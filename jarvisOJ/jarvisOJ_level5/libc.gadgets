


Gadgets
=======


0x000000000017a5bc: adc ah, 0xf6; call rdx; 
0x0000000000186724: adc ah, ah; sti; call qword ptr [rax]; 
0x00000000001868ad: adc ah, bh; push qword ptr [rax]; add edi, esp; push rax; add al, 0xfc; call rax; 
0x000000000019973c: adc ah, bl; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001863bc: adc ah, byte ptr [rdi - 0x5b4f0003]; std; jmp qword ptr [rax - 0x5b]; 
0x000000000016127d: adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000002d4ea: adc ah, byte ptr [rsi]; cmp dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000179341: adc ah, dh; inc dword ptr [rcx]; sbb ah, dh; jmp qword ptr [rbx]; 
0x0000000000179339: adc ah, dh; push qword ptr [rax + 0x38fff41a]; adc ah, dh; inc dword ptr [rcx]; sbb ah, dh; jmp qword ptr [rbx]; 
0x000000000013959f: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000139609: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001a50b8: adc al, 0; add byte ptr [rax], al; adc al, 0x6f; add dword ptr [rax], eax; and byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001a7bb8: adc al, 0; add byte ptr [rax], al; adc al, 0x9a; add dword ptr [rax], eax; sub byte ptr [rsi], 0xf5; jmp qword ptr [rcx]; 
0x00000000001a4fa8: adc al, 0; add byte ptr [rax], al; add al, 0x6e; add dword ptr [rax], eax; adc byte ptr [rbp - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001ac4a8: adc al, 0; add byte ptr [rax], al; add al, 0xe3; add dword ptr [rax], eax; cmp ch, 0xf5; call qword ptr [rax]; 
0x000000000006b0f9: adc al, 0; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000001a87c8: adc al, 0; add byte ptr [rax], al; and al, 0xa6; add dword ptr [rax], eax; and byte ptr [rdi - 0xb], dl; call qword ptr [rdx]; 
0x00000000001aa8c8: adc al, 0; add byte ptr [rax], al; and al, 0xc7; add dword ptr [rax], eax; rcl dh, 0xf5; jmp qword ptr [rsi]; 
0x000000000019e4c8: adc al, 0; add byte ptr [rax], al; and al, 3; add dword ptr [rax], eax; or byte ptr [rdx - 0x10], 0xff; ret; 
0x000000000019c9e8: adc al, 0; add byte ptr [rax], al; call 0xffffffffba09c9f2; out dx, al; call qword ptr [rax]; 
0x0000000000199ba0: adc al, 0; add byte ptr [rax], al; cld; mov ecx, 0xb5180000; cld; jmp qword ptr [rcx]; 
0x00000000001a7980: adc al, 0; add byte ptr [rax], al; fcom qword ptr [rdi + 0x2b680001]; cmc; call qword ptr [rax]; 
0x00000000001a7a80: adc al, 0; add byte ptr [rax], al; fcomp qword ptr [rax + 0x2d380001]; cmc; jmp qword ptr [rcx]; 
0x00000000001b1580: adc al, 0; add byte ptr [rax], al; fdiv qword ptr [rbx]; add al, byte ptr [rax]; div rsi; call qword ptr [rbx]; 
0x00000000001a5c80: adc al, 0; add byte ptr [rax], al; fdivr qword ptr [rdx + 1]; add byte ptr [rax], bh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a6a80: adc al, 0; add byte ptr [rax], al; fmul qword ptr [rax - 0x2007ffff]; hlt; jmp qword ptr [rcx]; 
0x00000000001b6398: adc al, 0; add byte ptr [rax], al; hlt; add dword ptr [rdx], 0xf7f85000; call qword ptr [rbx]; 
0x00000000001aa598: adc al, 0; add byte ptr [rax], al; hlt; ret; 
0x00000000001a4888: adc al, 0; add byte ptr [rax], al; in al, 0x66; add dword ptr [rax], eax; shl rdi, 1; jmp qword ptr [rax]; 
0x00000000001a5388: adc al, 0; add byte ptr [rax], al; in al, 0x71; add dword ptr [rax], eax; xor byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x00000000001a4b90: adc al, 0; add byte ptr [rax], al; in al, dx; imul eax, dword ptr [rcx], 0xf4639800; jmp qword ptr [rax]; 
0x00000000001aa990: adc al, 0; add byte ptr [rax], al; in al, dx; mov dword ptr [rcx], 0xf5d70800; call qword ptr [rsi]; 
0x00000000001a2910: adc al, 0; add byte ptr [rax], al; insb byte ptr [rdi], dx; add dword ptr [r8], r8d; mov sil, dl; jmp qword ptr [rbp]; 
0x00000000001aa910: adc al, 0; add byte ptr [rax], al; insb byte ptr [rdi], dx; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rsi]; 
0x00000000001a5ce8: adc al, 0; add byte ptr [rax], al; jnp 0x1a5cf0; add al, dh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x000000000019d1e8: adc al, 0; add byte ptr [rax], al; lock add byte ptr [rax], al; mov al, 0x1d; out dx, eax; call qword ptr [rax]; 
0x00000000001b2b50: adc al, 0; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; add al, byte ptr [r8]; cmp byte ptr [rbx - 9], cl; call qword ptr [rbx]; 
0x000000000019a450: adc al, 0; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret 0; 
0x00000000001aa550: adc al, 0; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret; 
0x00000000001a3158: adc al, 0; add byte ptr [rax], al; mov ah, 0x4f; add dword ptr [rax], eax; ret 0xe7da; 
0x00000000001a5358: adc al, 0; add byte ptr [rax], al; mov ah, 0x71; add dword ptr [rax], eax; add byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x00000000001a9a58: adc al, 0; add byte ptr [rax], al; mov ah, 0xb8; add dword ptr [rax], eax; jo 0x1a9a58; jmp qword ptr [rdx]; 
0x00000000001aa7f0: adc al, 0; add byte ptr [rax], al; mov byte ptr [rcx], 0; sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a69f0: adc al, 0; add byte ptr [rax], al; mov byte ptr [rcx], r8b; add byte ptr [rax - 0x21], ch; hlt; jmp qword ptr [rcx]; 
0x0000000000199ee8: adc al, 0; add byte ptr [rax], al; mov ebp, 0x1ba00000; out dx, al; call qword ptr [rcx]; 
0x00000000001a4d60: adc al, 0; add byte ptr [rax], al; mov esp, 0x1800016b; hlt; jmp qword ptr [rcx]; 
0x00000000001a8260: adc al, 0; add byte ptr [rax], al; mov esp, 0x180001a0; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001aa760: adc al, 0; add byte ptr [rax], al; mov esp, 0x180001c5; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001ac360: adc al, 0; add byte ptr [rax], al; mov esp, 0x280001e1; sti; cmc; call qword ptr [rax]; 
0x00000000001a8230: adc al, 0; add byte ptr [rax], al; mov word ptr [rax + 0x3ae80001], fs; cmc; jmp qword ptr [rcx]; 
0x0000000000192230: adc al, 0; add byte ptr [rax], al; mov word ptr [rax], es; add al, cl; mov cl, 0xea; call qword ptr [rax]; 
0x00000000001a7f30: adc al, 0; add byte ptr [rax], al; mov word ptr [rbp + 0x33080001], ds; cmc; jmp qword ptr [rcx]; 
0x0000000000190b30: adc al, 0; add byte ptr [rax], al; mov word ptr [rcx], gs; add byte ptr [rax], al; mov byte ptr [rcx - 0x16], ch; jmp qword ptr [rcx]; 
0x00000000001a7c30: adc al, 0; add byte ptr [rax], al; mov word ptr [rdx + 0x2ef80001], ds; cmc; jmp qword ptr [rcx]; 
0x00000000001a6430: adc al, 0; add byte ptr [rax], al; mov word ptr [rdx - 0x3377ffff], es; hlt; jmp qword ptr [rcx]; 
0x00000000001b2a48: adc al, 0; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add al, byte ptr [rax]; ror byte ptr [rax - 9], 1; jmp qword ptr [rsi]; 
0x0000000000192b48: adc al, 0; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [r8], al; cmp byte ptr [rdx], 0xfa; jmp qword ptr [rcx]; 
0x0000000000199d00: adc al, 0; add byte ptr [rax], al; pop rsp; mov ebx, 0x14180000; out dx, al; jmp qword ptr [rcx]; 
0x000000000019a500: adc al, 0; add byte ptr [rax], al; pop rsp; ret; 
0x00000000001a7ee8: adc al, 0; add byte ptr [rax], al; popfq; add dword ptr [rax], eax; sal byte ptr [rdx], 0xf5; jmp qword ptr [rcx]; 
0x00000000001931e8: adc al, 0; add byte ptr [rax], al; push rax; add byte ptr [rax], al; adc byte ptr [rsi - 0x15], ah; call qword ptr [rdi]; 
0x00000000001aa8f8: adc al, 0; add byte ptr [rax], al; push rsp; mov dword ptr [rcx], 0xf5d6f000; jmp qword ptr [rsi]; 
0x00000000001aa640: adc al, 0; add byte ptr [rax], al; pushfq; vaddps xmm10, xmm15, xmm13; cmc; jmp qword ptr [rsi]; 
0x0000000000118f95: adc al, 0; add byte ptr [rax], al; sar rdx, 4; add rdx, 1; syscall; 
0x00000000001b2ac0: adc al, 0; add byte ptr [rax], al; sbb al, 0x49; add al, byte ptr [rax]; or byte ptr [rbx - 9], cl; jmp qword ptr [rax]; 
0x0000000000192dc0: adc al, 0; add byte ptr [rax], al; sbb al, 0x4c; add byte ptr [rax], al; or byte ptr [rdx - 0x15], bl; jmp qword ptr [rsi]; 
0x00000000001a4bc0: adc al, 0; add byte ptr [rax], al; sbb al, 0x6a; add dword ptr [rax], eax; fsub dword ptr [rbx - 0xc]; jmp qword ptr [rcx]; 
0x00000000001a62c0: adc al, 0; add byte ptr [rax], al; sbb al, 0x81; add dword ptr [rax], eax; pop rax; ret; 
0x00000000001b51d0: adc al, 0; add byte ptr [rax], al; sub al, 0x70; add al, byte ptr [rax]; sbb byte ptr [rbx + rdi*8], al; jmp qword ptr [rdx]; 
0x00000000001a8fd0: adc al, 0; add byte ptr [rax], al; sub al, 0xae; add dword ptr [rax], eax; sbb byte ptr [rbx - 0xb], ah; jmp qword ptr [rcx]; 
0x00000000000f12c1: adc al, 0; add byte ptr [rax], al; syscall; 
0x00000000001aae28: adc al, 0; add byte ptr [rax], al; test ah, cl; add dword ptr [rax], eax; shl al, 0xf5; call qword ptr [rax]; 
0x00000000001aa928: adc al, 0; add byte ptr [rax], al; test bh, al; add dword ptr [rax], eax; push rax; ret 0xfff8; 
0x000000000019d128: adc al, 0; add byte ptr [rax], al; test bh, ch; add byte ptr [rax], al; cmp bl, 0xee; call qword ptr [rax]; 
0x00000000001a7528: adc al, 0; add byte ptr [rax], al; test byte ptr [rbx + 0x20c00001], dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a8528: adc al, 0; add byte ptr [rax], al; test byte ptr [rbx + 0x47200001], ah; cmc; jmp rax; 
0x0000000000197528: adc al, 0; add byte ptr [rax], al; test byte ptr [rbx - 0x42800000], dl; in eax, dx; jmp qword ptr [rax]; 
0x00000000001a7b28: adc al, 0; add byte ptr [rax], al; test byte ptr [rcx + 0x2dc00001], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a5b28: adc al, 0; add byte ptr [rax], al; test byte ptr [rcx + 1], bh; add al, dl; mov al, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a5328: adc al, 0; add byte ptr [rax], al; test byte ptr [rcx + 1], dh; add al, dl; jp 0x1a5327; jmp qword ptr [rcx]; 
0x00000000001a6928: adc al, 0; add byte ptr [rax], al; test byte ptr [rdi - 0x22efffff], al; hlt; call qword ptr [rdx]; 
0x00000000001a8428: adc al, 0; add byte ptr [rax], al; test byte ptr [rdx + 0x43900001], ah; cmc; call qword ptr [rax]; 
0x00000000001b65e8: adc al, 0; add byte ptr [rax], al; test byte ptr [rdx], r8b; add byte ptr [rax], dl; push rdi; call qword ptr [rcx]; 
0x00000000001a5028: adc al, 0; add byte ptr [rax], al; test byte ptr [rsi + 1], ch; add byte ptr [rax + 0x6e], ah; hlt; jmp qword ptr [rcx]; 
0x00000000001aa538: adc al, 0; add byte ptr [rax], al; xchg eax, esp; ret; 
0x0000000000066ad7: adc al, 0; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000036086: adc al, 0; andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x0000000000022b68: adc al, 0; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000003d1b0: adc al, 0; movsd qword ptr [rbp], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000003078e: adc al, 0; movsxd rax, dword ptr [rdx + r12*4]; add rdx, rax; jmp rdx; 
0x000000000003608e: adc al, 0; orpd xmm0, xmm1; ret; 
0x000000000007e012: adc al, 0x10; add byte ptr [rcx - 0x173fce21], cl; ret 0xff4f; 
0x000000000005f135: adc al, 0x10; lea rax, qword ptr [rip + 0x118542]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005f31c: adc al, 0x10; lea rax, qword ptr [rip + 0x1185db]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x000000000005f2d2: adc al, 0x10; lea rax, qword ptr [rip + 0x118625]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f21d: adc al, 0x10; lea rax, qword ptr [rip + 0x1186da]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f097: adc al, 0x10; lea rax, qword ptr [rip + 0x1186e0]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f17f: adc al, 0x10; lea rax, qword ptr [rip + 0x118778]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005f057: adc al, 0x10; lea rax, qword ptr [rip + 0x1187a0]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; jmp rax; 
0x000000000005ef90: adc al, 0x10; lea rax, qword ptr [rip + 0x118967]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x00000000000ece50: adc al, 0x10; sub eax, 0x64d8f700; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000142925: adc al, 0x13; jmp rdx; 
0x0000000000097c55: adc al, 0x16; sub eax, edx; ret; 
0x000000000005db14: adc al, 0x24; add rsp, 0x18; mov eax, edx; ret; 
0x00000000000cb63d: adc al, 0x24; add rsp, 0x18; mov rax, rdx; ret; 
0x000000000012dd86: adc al, 0x24; call qword ptr [rax + 0x48]; 
0x000000000012d0a8: adc al, 0x24; call qword ptr [rax + 8]; 
0x00000000000bdc0e: adc al, 0x24; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x00000000000ed08c: adc al, 0x24; mov rsi, qword ptr [rsp + 0x10]; mov eax, 0x10f; mov rdi, qword ptr [rsp + 8]; syscall; 
0x000000000012d476: adc al, 0x24; mov rsi, rsp; call qword ptr [rax + 8]; 
0x0000000000031e1b: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x00000000000a0e93: adc al, 0x30; in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000ed642: adc al, 0x30; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x00000000000b28fb: adc al, 0x31; add byte ptr [rcx], dh; dec dword ptr [rax + 0x39]; ret 0x840f; 
0x00000000000b7318: adc al, 0x31; rol byte ptr [rcx - 0x7d], cl; stc; add dword ptr [rdi], ecx; sahf; ret 0x1fbf; 
0x00000000000f4b0b: adc al, 0x31; ror byte ptr [rax - 0x7d], 0x3e; add byte ptr [rsi + rbx + 0x5b], dh; ret; 
0x0000000000142bf8: adc al, 0x3a; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000022751: adc al, 0x3a; add byte ptr [rcx + rbp*8], al; paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x00000000001a1cbc: adc al, 0x3b; add dword ptr [rax], eax; and dh, ch; int1; jmp qword ptr [rcx]; 
0x000000000018af10: adc al, 0x41; cmc; inc dword ptr [rbx + rax*8 + 0x49940001]; cmc; call rsp; 
0x000000000018d7c8: adc al, 0x45; cli; dec esp; ret; 
0x000000000007edf0: adc al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000009e5d0: adc al, 0x48; lea eax, dword ptr [rdi + 0x14]; ret; 
0x000000000009f423: adc al, 0x48; lea eax, dword ptr [rdi + 0x15]; ret; 
0x0000000000096ffb: adc al, 0x48; lea eax, dword ptr [rdi + rax + 0x30]; ret; 
0x0000000000129796: adc al, 0x48; mov dword ptr [rbx], eax; xor eax, eax; add rsp, 0x30; pop rbx; ret; 
0x0000000000021f3a: adc al, 0x48; mov edx, dword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000011c456: adc al, 0x48; mov edx, esp; movsxd rdi, dword ptr [rsp + 0x10]; movsxd rsi, ebp; mov eax, 0x81; syscall; 
0x0000000000037f03: adc al, 0x48; mov edx, esp; movsxd rsi, ebp; movsxd rdi, r12d; mov eax, 0x81; syscall; 
0x00000000001613b8: adc al, 0x51; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000077c8b: adc al, 0x5b; pop rbp; mov eax, 1; pop r12; ret; 
0x00000000000ffb63: adc al, 0x5b; pop rbp; xor eax, eax; pop r12; ret; 
0x000000000018d948: adc al, 0x68; cli; call rsp; 
0x00000000001a50bc: adc al, 0x6f; add dword ptr [rax], eax; and byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000000d15fa: adc al, 0x74; or byte ptr [rax - 0x7d], cl; ret 0x3901; 
0x0000000000083e62: adc al, 0x77; sub ecx, dword ptr [rcx - 0x7d]; ret; 
0x000000000010bd90: adc al, 0x80; sub eax, dword ptr [rax]; call 0xa3ea0; add rsp, 8; ret; 
0x00000000000e19e1: adc al, 0x80; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000001a63bc: adc al, 0x82; add dword ptr [rax], eax; and bl, cl; hlt; jmp qword ptr [rdx]; 
0x000000000005fbc9: adc al, 0x83; mov ebp, 0xffffee94; adc byte ptr [rcx - 0x73], al; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x000000000004a5a3: adc al, 0x83; mov ebp, 0xfffffa94; adc byte ptr [rcx - 0x73], al; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x000000000019683c: adc al, 0x85; in eax, dx; jmp qword ptr [rdx]; 
0x000000000011373e: adc al, 0x89; add al, 0x31; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000ebbd7: adc al, 0x89; ret 0xdaf7; 
0x00000000000fa58e: adc al, 0x89; ret; 
0x00000000000fd5b8: adc al, 0x8a; add eax, dword ptr [rsi + rdx]; ret; 
0x00000000000dbe4a: adc al, 0x8d; add qword ptr [r8 - 0x7d], rcx; ret; 
0x00000000000ee65d: adc al, 0x8d; push rax; jmp qword ptr [rsi - 0x7d]; 
0x00000000000b530a: adc al, 0x90; add rax, rdx; jmp rax; 
0x000000000006d295: adc al, 0x91; add rcx, rdx; jmp rcx; 
0x000000000013aa30: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013915e: adc al, 0x91; sub eax, edx; ret; 
0x00000000001a73bc: adc al, 0x92; add dword ptr [rax], eax; and byte ptr [rsi], cl; cmc; jmp qword ptr [rcx]; 
0x0000000000142921: adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000005ffe4: adc al, 0x95; add byte ptr [rax], 0; add byte ptr [rcx + 1], cl; ret 0x3145; 
0x00000000000b4c6d: adc al, 0x97; add rdx, rdi; jmp rdx; 
0x0000000000054b86: adc al, 0x98; add rax, rdx; jmp rax; 
0x00000000001a7bbc: adc al, 0x9a; add dword ptr [rax], eax; sub byte ptr [rsi], 0xf5; jmp qword ptr [rcx]; 
0x0000000000188fb0: adc al, 0x9b; out dx, al; jmp rsp; 
0x0000000000064801: adc al, 0xa0; add rax, rdx; jmp rax; 
0x0000000000097dc3: adc al, 0xa; sub eax, edx; ret; 
0x00000000000c286d: adc al, 0xb0; add rax, rdx; jmp rax; 
0x0000000000034c72: adc al, 0xb7; add rdx, rdi; jmp rdx; 
0x0000000000083577: adc al, 0xb8; add rax, rdx; jmp rax; 
0x0000000000199ebc: adc al, 0xbd; add byte ptr [rax], al; mov al, 0x1a; out dx, al; call qword ptr [rdi]; 
0x000000000018af80: adc al, 0xbf; cmc; call qword ptr [rdi + rax*8 - 0x405bffff]; cmc; call rsp; 
0x0000000000107e88: adc al, 0xc1; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001aa6bc: adc al, 0xc5; add dword ptr [rax], eax; rcl ch, 1; cmc; jmp qword ptr [rsi]; 
0x00000000000375b4: adc al, 0xc7; setne al; movzx eax, al; ret; 
0x00000000000375d4: adc al, 0xc7; xor eax, eax; ret; 
0x000000000018d3d0: adc al, 0xcc; stc; inc dword ptr [rax + rbp*4 - 0x326bfffe]; stc; call rsp; 
0x00000000001ab4bc: adc al, 0xd3; add dword ptr [rax], eax; shl ch, 1; cmc; jmp rbx; 
0x000000000018e13c: adc al, 0xd4; add al, byte ptr [rax]; and al, 0xdb; std; jmp rsp; 
0x000000000018dcf8: adc al, 0xd6; cli; jmp rsp; 
0x0000000000002b63: adc al, 0xe7; ret; 
0x00000000000cf306: adc al, 0xe9; ret 0xfffa; 
0x000000000013e6aa: adc al, 0xe; lea rcx, qword ptr [rip + 0x28bcd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013cfd1: adc al, 0xe; lea rcx, qword ptr [rip + 0x2a2a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013ad5a: adc al, 0xe; lea rcx, qword ptr [rip + 0x2c51d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000139151: adc al, 0xe; lea rcx, qword ptr [rip + 0x2e126]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000137271: adc al, 0xe; sub eax, edx; ret; 
0x000000000019cbbc: adc al, 0xea; add byte ptr [rax], al; mov al, 0xbf; out dx, al; jmp qword ptr [rax]; 
0x0000000000199d09: adc al, 0xee; jmp qword ptr [rcx]; 
0x00000000001895e9: adc al, 0xef; inc dword ptr [rdi + rdx + 0x17940001]; out dx, eax; call rsp; 
0x000000000019d1bc: adc al, 0xf0; add byte ptr [rax], al; nop; adc bh, dl; call qword ptr [rax]; 
0x000000000009f419: adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009dc09: adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x000000000010a22b: adc al, 0xf7; dec dword ptr [rax - 0x77]; ret 0x894c; 
0x000000000018c441: adc al, 0xf8; call rsp; 
0x00000000000ae4a4: adc al, 0xf8; inc dword ptr [rbp + 0x79c789c0]; ret; 
0x00000000001a51e9: adc al, 0xf9; call qword ptr [rax]; 
0x000000000009ef99: adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x0000000000186225: adc al, 0xfb; inc dword ptr [rax + 0x15]; sti; call qword ptr [rax]; 
0x00000000000bcb2f: adc al, 0xff; lea rax, qword ptr [rax + rdx*8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000164048: adc al, 1; add byte ptr [rax], al; ret; 
0x00000000000fadad: adc al, 1; add byte ptr [rax], al; syscall; 
0x000000000004ecab: adc al, 2; lea rax, qword ptr [rip + 0x127f4c]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004e830: adc al, 2; lea rax, qword ptr [rip + 0x128647]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000004e78d: adc al, 2; lea rax, qword ptr [rip + 0x1286ea]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004deb6: adc al, 2; lea rax, qword ptr [rip + 0x128e41]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004dd8a: adc al, 2; lea rax, qword ptr [rip + 0x128fed]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x000000000004d530: adc al, 2; lea rax, qword ptr [rip + 0x129947]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004ba97: adc al, 2; lea rax, qword ptr [rip + 0x12b3e0]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x0000000000145177: adc al, 4; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018c378: adc al, 7; clc; ljmp ptr [rax + rsi + 0x8640002]; clc; jmp rsp; 
0x00000000000460ad: adc al, 9; ret 0xa274; 
0x000000000018678c: adc al, bl; sti; call qword ptr [rax - 0x3d]; 
0x000000000018678c: adc al, bl; sti; call qword ptr [rax - 0x3d]; sti; jmp qword ptr [rax]; 
0x0000000000135db5: adc al, byte ptr [rax + 0x7500243c]; and al, 0x31; ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x000000000014550a: adc al, byte ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000139747: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001397b1: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000055a0: adc al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x31; 
0x000000000000edaa: adc al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret 0; 
0x000000000000c2a2: adc al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000cb5ad: adc al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000007ba: adc al, byte ptr [rax]; add byte ptr [rbx + 1], al; ret 0x102; 
0x000000000016e3bd: adc al, byte ptr [rax]; add byte ptr [rdx + rdx + 0x12bf0000], bh; add byte ptr [rax], al; ret 0x12; 
0x000000000016e3b5: adc al, byte ptr [rax]; add byte ptr [rsi - 0x46ffffee], dh; adc al, byte ptr [rax]; add byte ptr [rdx + rdx + 0x12bf0000], bh; add byte ptr [rax], al; ret 0x12; 
0x000000000004dd91: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x000000000004d58e: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov byte ptr [rbp - 0x4fa], 0x20; mov dword ptr [rbp - 0x530], 1; jmp rax; 
0x000000000004ecb2: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004ed61: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004e979: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004d537: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004ba9e: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000004e9da: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x558], 1; jmp rax; 
0x000000000004debd: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004ec51: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004e794: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004e837: adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x0000000000054a50: adc al, byte ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000054b7f: adc al, byte ptr [rax]; movzx ebx, bl; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x000000000000fa1c: adc al, byte ptr [rax]; or al, 0; push rax; call qword ptr [rax]; 
0x000000000000a1e4: adc al, byte ptr [rax]; or al, 0; push rax; ret 0x10; 
0x000000000000a9c4: adc al, byte ptr [rax]; or al, 0; push rax; ret 0xb; 
0x00000000000066bc: adc al, byte ptr [rax]; or al, 0; push rax; ret 7; 
0x000000000012ce8d: adc al, byte ptr [rbp + 0x481e75ed]; add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000117f35: adc al, byte ptr [rbx + 0xd777ffe]; mov eax, esi; shl eax, 4; add eax, 8; ret; 
0x000000000005f8b3: adc al, byte ptr [rbx - 0x111743]; call qword ptr [rax]; 
0x00000000000f96fa: adc al, byte ptr [rcx + 0x5d5b002c]; pop r12; ret; 
0x0000000000099c07: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x0000000000099c27: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x0000000000099c47: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000099c67: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000099ac4: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000099c87: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099ca7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099cc7: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x000000000009c817: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c898: adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000099b11: adc al, byte ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x00000000001af43d: adc al, byte ptr [rdx]; add al, ah; xchg dh, dh; jmp rdx; 
0x00000000000e40dd: adc al, ch; or eax, 0x8bfff3b4; push rbp; add al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000b66c8: adc al, ch; ret 0x5e; 
0x00000000000b64c8: adc al, ch; ret 0x60; 
0x0000000000102a28: adc al, ch; ret 0xf1ca; 
0x00000000000f9cc8: adc al, ch; ret 0xf257; 
0x00000000000d1e28: adc al, ch; ret 0xf4d6; 
0x000000000012bae7: adc al, ch; shr dword ptr [rcx - 1], cl; inc dword ptr [rbx - 0x3fe6fe08]; add rsp, 8; add eax, 2; ret; 
0x0000000000113253: adc al, ch; xchg eax, edi; ret 0xfff0; 
0x0000000000197b80: adc al, cl; in eax, dx; call qword ptr [rbx]; 
0x00000000001866a8: adc bh, ah; sti; call qword ptr [rax]; 
0x000000000012c391: adc bh, al; adc byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x0000000000186219: adc bh, bl; call rax; 
0x00000000001344fa: adc bh, byte ptr [rax + 3]; syscall; 
0x00000000000e426d: adc bh, byte ptr [rax + 9]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000003aaf: adc bh, byte ptr [rax]; cwde; ret; 
0x000000000007386a: adc bh, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000186918: adc bh, ch; sti; jmp qword ptr [rax - 0x10]; 
0x0000000000115956: adc bh, dh; ret 0x8080; 
0x000000000019d1c1: adc bh, dl; call qword ptr [rax]; 
0x0000000000186211: adc bl, bh; inc dword ptr [rax + 0x11]; sti; call qword ptr [rax]; 
0x0000000000186211: adc bl, bh; inc dword ptr [rax + 0x11]; sti; call qword ptr [rax]; adc bh, bl; call rax; 
0x0000000000036738: adc bl, bl; insb byte ptr [rdi], dx; and al, 8; ret; 
0x00000000001273da: adc bl, byte ptr [rbx - 0xc]; jmp qword ptr [rsi - 0x70]; 
0x0000000000188349: adc bl, ch; call rsp; 
0x0000000000038a62: adc bl, ch; jno 0x38aaf; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000014cb10: adc bl, dh; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000008c4f5: adc bl, dh; movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000009f396: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009dbb6: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000a0e06: adc bl, dh; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x000000000009e5a6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009f3f6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009e5c6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009cf36: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000009cf26: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000a0e66: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x000000000009e627: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009f477: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009e647: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009cfb7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000009cf97: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000a0ee7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x000000000009e567: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009f3b7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009cef7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000a0e27: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x000000000009e728: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009f578: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009d098: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000a0fe8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000f3137: adc bl, dh; ret; 
0x000000000014cb0f: adc bl, r14b; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000009f395: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009dbb5: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000a0e05: adc bl, r14b; movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x000000000009e5a5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009f3f5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009e5c5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009cf35: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000009cf25: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000a0e65: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x000000000009e626: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009f476: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009e646: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009cfb6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000009cf96: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000a0ee6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x000000000009e566: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009f3b6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009cef6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000a0e26: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x0000000000145765: adc byte ptr [eax + eax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000798c2: adc byte ptr [r11 + 0x12], r14b; movzx eax, byte ptr [rax]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000008130a: adc byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; pop r14; ret; 
0x0000000000073646: adc byte ptr [r11 + 0xc], r14b; lea rdx, qword ptr [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x00000000000e346f: adc byte ptr [r13 + rcx*4 + 0x52], cl; adc byte ptr [rax + 0x39], cl; ret 0x930f; 
0x0000000000108161: adc byte ptr [r13 - 0xcf68a40], r8b; ret; 
0x00000000000732f2: adc byte ptr [r15 - 0x18], r14b; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x0000000000086932: adc byte ptr [r15], cl; mov dh, 0xc; adc dword ptr [rax - 0x7d], ecx; ret 0x4201; 
0x0000000000074921: adc byte ptr [r15], cl; xchg eax, ebx; ret 0x3948; 
0x0000000000076fa3: adc byte ptr [r15], r9b; xchg eax, ebx; ret 0x3948; 
0x0000000000118f92: adc byte ptr [r8 + 0x14], dil; sar rdx, 4; add rdx, 1; syscall; 
0x00000000000df25e: adc byte ptr [r8 + 0x39], cl; ret 0x574; 
0x00000000000e23e2: adc byte ptr [r8 + 0x39], cl; ret; 
0x000000000007491a: adc byte ptr [r8 + 0x39], r9b; ror dword ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3948; 
0x00000000000726d2: adc byte ptr [r8 + 1], cl; ret 0x3948; 
0x000000000007948e: adc byte ptr [r8 + 3], r9b; xchg dword ptr [rax + 0x48000000], edx; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000bd308: adc byte ptr [r8 + r9*4 + 0x63], al; adc cl, byte ptr [rax + 1]; ret; 
0x00000000000a0e8f: adc byte ptr [r8 - 0x12cfeba9], r9b; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000725d2: adc byte ptr [r8 - 0x75], cl; push rbx; and byte ptr [rax - 0x77], cl; and byte ptr [r8 - 0x75], r9b; sbb byte ptr [r8 + 0x29], cl; ret 0x8948; 
0x0000000000101f41: adc byte ptr [r8 - 0x77], cl; imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000007b05c: adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000009d8ac: adc byte ptr [r8 - 0x7cb6eb89], r9b; call 0x7f9720cd; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x00000000000c3e25: adc byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000012c393: adc byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x00000000000a0e0c: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000a0e2e: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000a0e6c: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000a0eee: adc byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x000000000012c169: adc byte ptr [r9], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x00000000000ed092: adc byte ptr [rax + 0x10f], bh; mov rdi, qword ptr [rsp + 8]; syscall; 
0x00000000000fafb8: adc byte ptr [rax + 0x130], bh; syscall; 
0x0000000000118f93: adc byte ptr [rax + 0x14], bh; sar rdx, 4; add rdx, 1; syscall; 
0x00000000000f4908: adc byte ptr [rax + 0x1a], bh; syscall; 
0x00000000000c0d78: adc byte ptr [rax + 0x22], bh; syscall; 
0x00000000000c0dd8: adc byte ptr [rax + 0x23], bh; syscall; 
0x0000000000121b67: adc byte ptr [rax + 0x29], cl; int1; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000000fb158: adc byte ptr [rax + 0x2a], bh; syscall; 
0x00000000000fb0c8: adc byte ptr [rax + 0x2b], bh; syscall; 
0x00000000000fb498: adc byte ptr [rax + 0x2e], bh; syscall; 
0x00000000000fb388: adc byte ptr [rax + 0x2f], bh; syscall; 
0x00000000000fbbdf: adc byte ptr [rax + 0x39], cl; ret 0x1b72; 
0x00000000000d4ab9: adc byte ptr [rax + 0x39], cl; ret 0x574; 
0x0000000000080254: adc byte ptr [rax + 0x39], cl; ret 0x840f; 
0x00000000000e3474: adc byte ptr [rax + 0x39], cl; ret 0x930f; 
0x000000000003aa0a: adc byte ptr [rax + 0x39], cl; ret; 
0x000000000007491b: adc byte ptr [rax + 0x39], cl; ror dword ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3948; 
0x00000000000fbbde: adc byte ptr [rax + 0x39], r9b; ret 0x1b72; 
0x0000000000135c2f: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x000000000003606a: adc byte ptr [rax + 0x48d00148], al; shr eax, 0x3f; ret; 
0x00000000000f1dd8: adc byte ptr [rax + 0x4a], bh; syscall; 
0x00000000000f1e68: adc byte ptr [rax + 0x4b], bh; syscall; 
0x00000000000ebf58: adc byte ptr [rax + 0x55], bh; syscall; 
0x000000000011c45e: adc byte ptr [rax + 0x63], cl; cmc; mov eax, 0x81; syscall; 
0x00000000000e3456: adc byte ptr [rax + 0x63], cl; ret; 
0x0000000000187468: adc byte ptr [rax + 0x7f90fffc], al; cld; call qword ptr [rax]; 
0x000000000003d319: adc byte ptr [rax + 0xb], bh; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x000000000003d318: adc byte ptr [rax + 0xb], r15b; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x00000000000a0787: adc byte ptr [rax + 0xf], cl; mov esp, 0x1d8d4cd2; add dword ptr [rax + 0x6349000d], eax; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe07: adc byte ptr [rax + 0xf], cl; mov esp, 0x1d8d4cd2; add dword ptr [rcx + 0x6349000d], ecx; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e327: adc byte ptr [rax + 0xf], cl; mov esp, 0x1d8d4cd2; add dword ptr [rdx + 0x6349000d], esp; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3cb: adc byte ptr [rax + 0xf], cl; mov esp, 0x1d8d4cd2; or dword ptr [rax + 0x6349000d], esi; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001276e7: adc byte ptr [rax + 1], bh; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x00000000001221a4: adc byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f8fd1: adc byte ptr [rax + 1], bh; pop rbx; ret; 
0x0000000000123b0e: adc byte ptr [rax + 1], bh; ret; 
0x00000000000eb708: adc byte ptr [rax + 1], bh; syscall; 
0x00000000000a1efe: adc byte ptr [rax + 1], cl; clc; ret; 
0x0000000000096ff6: adc byte ptr [rax + 1], cl; ret 0x147c; 
0x00000000000726d3: adc byte ptr [rax + 1], cl; ret 0x3948; 
0x00000000000390de: adc byte ptr [rax + 1], cl; ret; 
0x000000000003d397: adc byte ptr [rax + 1], cl; ror byte ptr [rax - 0x77], 1; ret 0x8966; 
0x000000000003d396: adc byte ptr [rax + 1], r9b; ror byte ptr [rax - 0x77], 1; ret 0x8966; 
0x00000000000eb4b8: adc byte ptr [rax + 2], bh; syscall; 
0x00000000000ebe08: adc byte ptr [rax + 3], bh; syscall; 
0x000000000007948f: adc byte ptr [rax + 3], cl; xchg dword ptr [rax + 0x48000000], edx; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000ecfb8: adc byte ptr [rax + 7], bh; syscall; 
0x00000000000fa3a8: adc byte ptr [rax + 8], bh; syscall; 
0x0000000000145766: adc byte ptr [rax + rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000f0a20: adc byte ptr [rax + rax], dl; call 0xf11e0; add rsp, 0x18; ret; 
0x0000000000048f00: adc byte ptr [rax + rcx + 0x31], dh; ror byte ptr [rbp - 0x7b], cl; dec dword ptr [rdi]; xchg eax, ebp; ret 0xc031; 
0x00000000000bd309: adc byte ptr [rax + rcx*4 + 0x63], al; adc cl, byte ptr [rax + 1]; ret; 
0x00000000000a1014: adc byte ptr [rax - 0x12cfdfb1], cl; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000a0f12: adc byte ptr [rax - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000a0e90: adc byte ptr [rax - 0x12cfeba9], cl; mov byte ptr [rdi + 0x15], ch; ret; 
0x000000000018779c: adc byte ptr [rax - 0x586f0004], ch; cld; call qword ptr [rax]; 
0x00000000000fd5b5: adc byte ptr [rax - 0x73], cl; adc al, 0x8a; add eax, dword ptr [rsi + rdx]; ret; 
0x000000000015a104: adc byte ptr [rax - 0x73], cl; adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x000000000002f99e: adc byte ptr [rax - 0x73], cl; add al, 0xb2; mov eax, dword ptr [rdi + rax]; ret; 
0x0000000000070b30: adc byte ptr [rax - 0x73], cl; add dword ptr [r8 - 0x77], ecx; sub byte ptr [rax - 0x78], al; cmp dword ptr [rax + 0xf], eax; mov dh, 0xc7; ret; 
0x000000000007361c: adc byte ptr [rax - 0x73], cl; add dword ptr [r8 - 0x77], ecx; sub byte ptr [rax - 0x78], r8b; cmp dword ptr [rax + 0xf], eax; mov dh, 0xc7; ret; 
0x000000000005f136: adc byte ptr [rax - 0x73], cl; add eax, 0x118542; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005f31d: adc byte ptr [rax - 0x73], cl; add eax, 0x1185db; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x000000000005f2d3: adc byte ptr [rax - 0x73], cl; add eax, 0x118625; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f21e: adc byte ptr [rax - 0x73], cl; add eax, 0x1186da; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f098: adc byte ptr [rax - 0x73], cl; add eax, 0x1186e0; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f180: adc byte ptr [rax - 0x73], cl; add eax, 0x118778; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005f058: adc byte ptr [rax - 0x73], cl; add eax, 0x1187a0; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; jmp rax; 
0x000000000005ef91: adc byte ptr [rax - 0x73], cl; add eax, 0x118967; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000008b8d4: adc byte ptr [rax - 0x73], cl; add eax, 0x15844; lea rdx, qword ptr [rip - 0x5e3]; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000f96f6: adc byte ptr [rax - 0x73], cl; add eax, 0x2c8112; pop rbx; pop rbp; pop r12; ret; 
0x000000000010298a: adc byte ptr [rax - 0x73], cl; add ecx, dword ptr [rbp - 0x77]; ret; 
0x000000000012708c: adc byte ptr [rax - 0x73], cl; cmp eax, 0x54c0c; movsxd rax, dword ptr [rdi + rax*4]; add rdi, rax; jmp rdi; 
0x0000000000135934: adc byte ptr [rax - 0x73], cl; mov eax, 0x908; call qword ptr [rax + 0xf08]; 
0x00000000000fd5b4: adc byte ptr [rax - 0x73], r9b; adc al, 0x8a; add eax, dword ptr [rsi + rdx]; ret; 
0x00000000000f110f: adc byte ptr [rax - 0x75], cl; add eax, 0x2ccda1; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x0000000000021f3d: adc byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000126767: adc byte ptr [rax - 0x75], cl; and al, 0x48; call qword ptr [rax + 0x28]; 
0x000000000006e497: adc byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x00000000000fd47c: adc byte ptr [rax - 0x75], cl; and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000fd4dd: adc byte ptr [rax - 0x75], cl; and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000012d09d: adc byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x3f], r9b; cli; and byte ptr [rax - 0x77], cl; adc al, 0x24; call qword ptr [rax + 8]; 
0x00000000000725d3: adc byte ptr [rax - 0x75], cl; push rbx; and byte ptr [rax - 0x77], cl; and byte ptr [r8 - 0x75], r9b; sbb byte ptr [r8 + 0x29], cl; ret 0x8948; 
0x0000000000091b0a: adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x0000000000178288: adc byte ptr [rax - 0x76cf0004], cl; cld; call qword ptr [rax - 0x76]; 
0x00000000000bdc0b: adc byte ptr [rax - 0x77], cl; adc al, 0x24; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x000000000012d73e: adc byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000009c90c: adc byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000101f42: adc byte ptr [rax - 0x77], cl; imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000074117: adc byte ptr [rax - 0x77], cl; jo 0x7412c; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000f18e7: adc byte ptr [rax - 0x77], cl; out 0x48, eax; mov eax, dword ptr [rip + 0x2d2766]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f1877: adc byte ptr [rax - 0x77], cl; out 0x48, eax; mov eax, dword ptr [rip + 0x2d27d6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000123d5e: adc byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 8]; 
0x00000000001201ff: adc byte ptr [rax - 0x77], cl; out dx, eax; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x0000000000074f73: adc byte ptr [rax - 0x77], cl; push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x0000000000070128: adc byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x0000000000080811: adc byte ptr [rax - 0x77], cl; ret 0x58b; 
0x000000000010aef5: adc byte ptr [rax - 0x77], cl; ret 0x8548; 
0x00000000000811da: adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000001219e8: adc byte ptr [rax - 0x77], cl; ret 0xf9e9; 
0x00000000000d9531: adc byte ptr [rax - 0x77], cl; ret; 
0x000000000007b05d: adc byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000f4ed8: adc byte ptr [rax - 0x7b], cl; push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0xf4e90; mov rdi, qword ptr [r14]; call rbx; 
0x00000000000f4f19: adc byte ptr [rax - 0x7b], cl; push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0xf4e90; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000157027: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000000986b4: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13; 
0x0000000000157063: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000010580c: adc byte ptr [rax - 0x7b], cl; test byte ptr [rdi], 0x84; ret; 
0x000000000009d8ad: adc byte ptr [rax - 0x7cb6eb89], cl; call 0x7f9720cd; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x00000000000967f3: adc byte ptr [rax - 0x7d], cl; mov dword ptr [rcx + rcx*4], 0x8948fc47; clc; ret; 
0x000000000007dab3: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000083d3c: adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000091f86: adc byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x00000000000c3e26: adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000f0be0: adc byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f2151: adc byte ptr [rax - 1], bh; pop rbx; ret; 
0x00000000000ebb25: adc byte ptr [rax - 1], bh; ret; 
0x00000000000ab977: adc byte ptr [rax], 0; add byte ptr [rcx], dh; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x000000000018f1bd: adc byte ptr [rax], al; add al, ah; fsubr st(1); call qword ptr [rdx]; 
0x00000000000ec6da: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000005d46c: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x000000000007a1d4: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000013b9c1: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000139951: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000a8a04: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000000ffb0: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x000000000000ecd2: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 3; 
0x00000000000b81ae: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x7d], cl; ret; 
0x000000000012c394: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x00000000000e451c: adc byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000003d1dc: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000120dd2: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120d22: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120cfa: adc byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], rax; ret; 
0x00000000000ebab1: adc byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r10; mov eax, r9d; syscall; 
0x00000000000ebbc1: adc byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000006f5c1: adc byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000011f3e5: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000a1b49: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000017a6ed: adc byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x00000000000f0a4a: adc byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000044da6: adc byte ptr [rax], al; add byte ptr [rbx + 0x3108247c], cl; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x00000000001086d9: adc byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000ab978: adc byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x000000000005c29c: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rbx], esi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000059e79: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rsp + rax], ebp; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000461e6: adc byte ptr [rax], al; mov eax, 0x38; syscall; 
0x000000000002cb04: adc byte ptr [rax], al; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000006d17e: adc byte ptr [rax], al; movsxd rcx, dword ptr [rsi + rcx*4]; add rsi, rcx; jmp rsi; 
0x000000000006d291: adc byte ptr [rax], al; movsxd rdx, dword ptr [rcx + rdx*4]; add rcx, rdx; jmp rcx; 
0x000000000006c815: adc byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x0000000000039cf8: adc byte ptr [rax], al; or rax, rsi; mov qword ptr [rdi], rax; mov eax, 1; ret; 
0x00000000000eb6a8: adc byte ptr [rax], bh; syscall; 
0x0000000000121032: adc byte ptr [rax], ch; call qword ptr [rcx + 0x30]; 
0x00000000001868fc: adc byte ptr [rax], cl; cld; inc dword ptr [rax]; or bh, ah; call rax; 
0x00000000000bcd91: adc byte ptr [rax], dh; add byte ptr [rax + 0x63], cl; std; mov al, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000bcde1: adc byte ptr [rax], dh; add byte ptr [rdi + rax*8], ah; add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000186998: adc byte ptr [rax], dh; cld; push rax; xor esp, edi; call rax; 
0x00000000000a0e0d: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000a0e2f: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000a0e6d: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000a0eef: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000a0ff1: adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000001086d8: adc byte ptr [rax], dl; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000075208: adc byte ptr [rbp + 0x15], dh; sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x0000000000136be8: adc byte ptr [rbp + 0x17], dh; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000012d458: adc byte ptr [rbp + 0x482b75c0], al; add esp, 0x18; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000011fff7: adc byte ptr [rbp + 0x483475c0], al; mov eax, dword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000012d0e8: adc byte ptr [rbp + 0x48c474c0], al; mov eax, dword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x000000000011fce6: adc byte ptr [rbp + 0x497475c0], al; mov eax, dword ptr [rdi + 8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x00000000000c3284: adc byte ptr [rbp + 0xb], ah; add byte ptr [rcx + 0x146348f6], cl; mov al, 0x48; add eax, edx; jmp rax; 
0x00000000000a3662: adc byte ptr [rbp + r9*4 + 0x57], r9b; adc byte ptr [rbp + rcx*4 + 0x4e], cl; adc byte ptr [rcx + 0x39], al; ret; 
0x000000000009f78d: adc byte ptr [rbp + rcx*4 + 0x1d], cl; cmp ecx, dword ptr [rdi + 0x634b000d]; or al, 0x83; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe6f: adc byte ptr [rbp + rcx*4 + 0x1d], cl; popfq; mov byte ptr [rip + 0xc634900], cl; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e38f: adc byte ptr [rbp + rcx*4 + 0x1d], cl; popfq; movabs eax, dword ptr [0x8d49930c6349000d]; or al, 0xb; jmp rcx; 
0x00000000000a3667: adc byte ptr [rbp + rcx*4 + 0x4e], cl; adc byte ptr [rcx + 0x39], al; ret; 
0x00000000000e3470: adc byte ptr [rbp + rcx*4 + 0x52], cl; adc byte ptr [rax + 0x39], cl; ret 0x930f; 
0x00000000000a3663: adc byte ptr [rbp + rcx*4 + 0x57], cl; adc byte ptr [rbp + rcx*4 + 0x4e], cl; adc byte ptr [rcx + 0x39], al; ret; 
0x000000000019e720: adc byte ptr [rbp - 0x10], dl; call qword ptr [rsi]; 
0x0000000000166384: adc byte ptr [rbp - 0x14], bh; jmp rax; 
0x000000000008c678: adc byte ptr [rbp - 0x1b], dh; mov rax, rdi; ret; 
0x0000000000121700: adc byte ptr [rbp - 0x267bf040], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbx]; 
0x0000000000119ca7: adc byte ptr [rbp - 0x49f0be01], al; ret 0x48d; 
0x00000000000fc0c4: adc byte ptr [rbp - 0x57], dh; mov edx, 0x40; mov rsi, r15; mov rdi, r9; mov eax, 0x14; syscall; 
0x00000000001877b4: adc byte ptr [rbp - 0x5b6f0004], ah; cld; call qword ptr [rax]; 
0x000000000005f8ba: adc byte ptr [rbp - 0x6bf001bf], cl; ret 0xd284; 
0x00000000000ef121: adc byte ptr [rbp - 0x7b], cl; dec dword ptr [rbp - 0x7bf0fea8]; ret 1; 
0x00000000000f5287: adc byte ptr [rbp - 0x7b], cl; test byte ptr [rdi], 0x84; ret 0; 
0x00000000000a4a39: adc byte ptr [rbp - 0xc0d8a2e], al; ret; 
0x00000000001a4c70: adc byte ptr [rbp - 0xc], ah; call qword ptr [rbp]; 
0x00000000001a4fb0: adc byte ptr [rbp - 0xc], ch; jmp qword ptr [rcx]; 
0x0000000000108162: adc byte ptr [rbp - 0xcf68a40], al; ret; 
0x0000000000187480: adc byte ptr [rbp - 4], bh; inc dword ptr [rax - 0xf000384]; jnp 0x187487; jmp qword ptr [rax + 0x7b]; 
0x00000000000798c3: adc byte ptr [rbx + 0x12], dh; movzx eax, byte ptr [rax]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000ed29f: adc byte ptr [rbx + 0x1374a1f8], al; neg eax; pop rbx; ret; 
0x000000000019753b: adc byte ptr [rbx + 0x14000002], al; add byte ptr [rax], al; add byte ptr [rbx + rdx*4 - 0x42780000], bl; in eax, dx; call qword ptr [rsi]; 
0x00000000001aef23: adc byte ptr [rbx + 0x1990302], al; ret; 
0x000000000019f993: adc byte ptr [rbx + 0x300e4402], al; add dl, byte ptr [rax + 0x41100e0a]; ret; 
0x00000000000fccf5: adc byte ptr [rbx + 0x574fffa], al; add edx, 1; mov dword ptr [rax], edx; ret; 
0x0000000000108273: adc byte ptr [rbx + 0x5d], bl; and eax, 0xc; pop r12; ret; 
0x0000000000086791: adc byte ptr [rbx + 0x5d], bl; mov eax, 1; pop r12; ret; 
0x000000000006cd4c: adc byte ptr [rbx + 0x5d], bl; mov rax, r12; pop r12; ret; 
0x000000000008130b: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000117963: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000034723: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000f1011: adc byte ptr [rbx + 0x66c3ffc8], al; nop dword ptr cs:[rax + rax]; mov eax, 0x8d; syscall; 
0x000000000019c393: adc byte ptr [rbx + 0xa440202], al; ret; 
0x00000000001903eb: adc byte ptr [rbx + 0xa4c0202], al; ret; 
0x00000000001aef2e: adc byte ptr [rbx + 0xa550202], al; ret; 
0x0000000000073647: adc byte ptr [rbx + 0xc], dh; lea rdx, qword ptr [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000012c42e: adc byte ptr [rbx + rcx*4 + 0x24], cl; ret 0x854d; 
0x0000000000022174: adc byte ptr [rbx + rcx*4 + 0x44], cl; and al, 0x18; add rsp, 0x28; jmp rax; 
0x00000000001907d0: adc byte ptr [rbx - 0x16], ah; call qword ptr [rax]; 
0x000000000007c5d2: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000012e08d: adc byte ptr [rbx - 0x3d], bl; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x0000000000121a2d: adc byte ptr [rbx - 0x3d], bl; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000000135d4c: adc byte ptr [rbx - 0x3d], bl; nop; mov rax, qword ptr [rip + 0x288109]; mov rax, qword ptr [rax + 0x108]; jmp rax; 
0x00000000000c0b3d: adc byte ptr [rbx - 0x47e7db8c], cl; test dword ptr [rax], 0x7c8b0000; and al, 0xc; movsxd r10, ecx; syscall; 
0x00000000000a3660: adc byte ptr [rbx - 0x72b3efba], cl; push rdi; adc byte ptr [rbp + rcx*4 + 0x4e], cl; adc byte ptr [rcx + 0x39], al; ret; 
0x00000000000a385f: adc byte ptr [rbx - 0x7cb703ba], cl; ret; 
0x00000000001ace64: adc byte ptr [rbx - 0xb], bh; jmp qword ptr [rdx]; 
0x0000000000178384: adc byte ptr [rbx - 0xe], cl; jmp qword ptr [rax]; 
0x0000000000172980: adc byte ptr [rbx], ah; in al, dx; call qword ptr [rax]; 
0x00000000000c2d46: adc byte ptr [rbx], al; add cl, ch; ret 0xfffe; 
0x0000000000186ae4: adc byte ptr [rbx], bl; cld; jmp qword ptr [rax + 0x1c]; 
0x000000000019a490: adc byte ptr [rbx], ch; out dx, al; call qword ptr [rsi]; 
0x0000000000186880: adc byte ptr [rbx], cl; cld; jmp rax; 
0x0000000000092b83: adc byte ptr [rbx], dh; add byte ptr [rbp + 0x480e74c0], al; lea eax, dword ptr [rip - 0x511]; ret; 
0x0000000000038639: adc byte ptr [rcx + 0x29], cl; ret; 
0x00000000000a366b: adc byte ptr [rcx + 0x39], al; ret; 
0x00000000000a366a: adc byte ptr [rcx + 0x39], r8b; ret; 
0x0000000000111a93: adc byte ptr [rcx + 0x415d5bd0], cl; pop rsp; ret; 
0x00000000000f23d2: adc byte ptr [rcx + 0x448948ff], cl; and al, 0xb8; cmova r10, qword ptr [rax + 0x18]; mov eax, 0x65; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x000000000011929b: adc byte ptr [rcx + 0x58b4838], cl; ret; 
0x00000000000759b3: adc byte ptr [rcx + 0x5c], al; pop r13; pop r14; sar rax, 2; ret; 
0x0000000000036727: adc byte ptr [rcx + 0x8000e2], al; add byte ptr [rip + 0x7fff], ah; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000000a60fa: adc byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0xf983; 
0x000000000007d75c: adc byte ptr [rcx + 7], dh; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000012c586: adc byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8348; 
0x000000000011b07f: adc byte ptr [rcx + rcx*4 - 0x20], al; syscall; 
0x000000000006c982: adc byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fbad3: adc byte ptr [rcx + rcx*4 - 0x31], al; call 0x108100; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x00000000000c09ce: adc byte ptr [rcx + rcx*4 - 0x39], al; call 0x108100; add rsp, 0x10; mov eax, ebx; pop rbx; ret; 
0x00000000000f059a: adc byte ptr [rcx + rcx*4 - 0x39], al; call 0x108100; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x00000000000a0f72: adc byte ptr [rcx - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000a0f52: adc byte ptr [rcx - 0x12cfe8b1], cl; mov byte ptr [rdi + 0x1b], ch; ret; 
0x000000000003c177: adc byte ptr [rcx - 0x373eb721], cl; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000003c197: adc byte ptr [rcx - 0x373eb722], cl; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000121adf: adc byte ptr [rcx - 0x3b7cb730], cl; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000007a5e6: adc byte ptr [rcx - 0x3b7cb7fd], cl; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000000fc0c1: adc byte ptr [rcx - 0x568aef87], cl; mov edx, 0x40; mov rsi, r15; mov rdi, r9; mov eax, 0x14; syscall; 
0x000000000004a5aa: adc byte ptr [rcx - 0x73], al; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x000000000011feee: adc byte ptr [rcx - 0x75], cl; or byte ptr [r9 + rcx*4 - 0x11], r9b; call qword ptr [rax + 0x20]; 
0x00000000000f139b: adc byte ptr [rcx - 0x75], cl; or byte ptr [r9 - 0x77], cl; ror byte ptr [rcx + 0x29], cl; fimul dword ptr [rcx + 0x39]; ret 0x820f; 
0x00000000001641f7: adc byte ptr [rcx - 0x75], cl; sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000123b1f: adc byte ptr [rcx - 0x77], cl; add byte ptr [rcx - 0x77], cl; push rax; or byte ptr [rax + 1], bh; ret; 
0x00000000000f07fa: adc byte ptr [rcx - 0x78], al; push rdx; and ecx, dword ptr [rcx + rcx*4 - 0x2e]; mov byte ptr [rsp - 0x58], al; mov eax, ebp; syscall; 
0x000000000009da81: adc byte ptr [rcx - 0x7d], cl; call 0x7f9722a9; and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x000000000009a379: adc byte ptr [rcx - 0x7d], cl; call 0xffffffffa78fb291; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000001372f3: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000013ae97: adc byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000000acd24: adc byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000187460: adc byte ptr [rcx - 0x7f6f0004], al; cld; call qword ptr [rax]; 
0x0000000000178508: adc byte ptr [rcx - 0xe], bl; jmp qword ptr [rax]; 
0x0000000000178170: adc byte ptr [rcx - 0xf], dh; jmp qword ptr [rax + 0x73]; 
0x000000000018682c: adc byte ptr [rcx], 0xfc; call qword ptr [rax]; 
0x000000000018682c: adc byte ptr [rcx], 0xfc; call qword ptr [rax]; add al, 0xfc; call rax; 
0x000000000012c16a: adc byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x00000000000446ac: adc byte ptr [rcx], al; add byte ptr [rax], al; add cl, ch; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000fae01: adc byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x00000000000af0f4: adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000003cdd6: adc byte ptr [rcx], ch; ret 0xc269; 
0x0000000000193a30: adc byte ptr [rcx], cl; in al, dx; jmp qword ptr [rcx]; 
0x0000000000121ab2: adc byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000125ddf: adc byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000012c165: adc byte ptr [rcx], dh; test bh, 0x43; adc byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x00000000000c2bf1: adc byte ptr [rdi + 1], bh; mov eax, 0xe5; syscall; 
0x000000000019d790: adc byte ptr [rdi - 0x11], ah; jmp qword ptr [rsi]; 
0x00000000001949bc: adc byte ptr [rdi - 0x13], ch; jmp qword ptr [rdx]; 
0x00000000000732f3: adc byte ptr [rdi - 0x18], dh; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x00000000000bca45: adc byte ptr [rdi - 0x42], bh; nop dword ptr [rax + rax]; add rsp, 0x10; pop rbx; ret; 
0x00000000001877a4: adc byte ptr [rdi - 0x596f0004], ah; cld; call qword ptr [rax]; 
0x00000000001786dc: adc byte ptr [rdi - 0xe], ch; jmp qword ptr [rax]; 
0x0000000000178494: adc byte ptr [rdi - 0xe], dl; jmp qword ptr [rax]; 
0x0000000000186dc4: adc byte ptr [rdi - 4], dl; inc dword ptr [rax - 0xf0003aa]; push rbp; cld; jmp qword ptr [rsi + 0x55]; 
0x0000000000172a58: adc byte ptr [rdi], ah; in al, dx; call qword ptr [rax]; 
0x0000000000172aa0: adc byte ptr [rdi], ah; in al, dx; lcall ptr [rbx + 0x58ffec27]; sub ah, ch; jmp rcx; 
0x0000000000186898: adc byte ptr [rdi], al; cld; push rax; or ah, bh; call rax; 
0x00000000001a7c50: adc byte ptr [rdi], ch; cmc; jmp qword ptr [rcx]; 
0x000000000002fe75: adc byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x000000000010c5c2: adc byte ptr [rdi], cl; mov bh, 0xf6; or eax, esi; bswap eax; ret; 
0x0000000000086933: adc byte ptr [rdi], cl; mov dh, 0xc; adc dword ptr [rax - 0x7d], ecx; ret 0x4201; 
0x000000000012f789: adc byte ptr [rdi], cl; test byte ptr [rax + 0x1000001], al; ret 0x894c; 
0x00000000000a8ce3: adc byte ptr [rdi], cl; test byte ptr [rdx], ah; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000015a108: adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x0000000000128752: adc byte ptr [rdi], cl; test dword ptr [rsp + rdi*8 - 1], edi; jmp qword ptr [rsi - 0x7d]; 
0x00000000000d40c4: adc byte ptr [rdi], cl; test ecx, eax; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4c01; 
0x0000000000162173: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000001384e1: adc byte ptr [rdi], cl; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001385d1: adc byte ptr [rdi], cl; xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001383f1: adc byte ptr [rdi], cl; xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000013fcfb: adc byte ptr [rdi], cl; xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013e7ff: adc byte ptr [rdi], cl; xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x000000000013f9ff: adc byte ptr [rdi], cl; xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013f0ff: adc byte ptr [rdi], cl; xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013f3ff: adc byte ptr [rdi], cl; xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013eaf7: adc byte ptr [rdi], cl; xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000138e39: adc byte ptr [rdi], cl; xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x0000000000138991: adc byte ptr [rdi], cl; xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000138121: adc byte ptr [rdi], cl; xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000138b71: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000138301: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000138d51: adc byte ptr [rdi], cl; xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000138c61: adc byte ptr [rdi], cl; xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001385a3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000138693: adc byte ptr [rdi], cl; xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001384b3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013eda4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013f9a4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013fca4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013f3a4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013f0a4: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x000000000013ea9c: adc byte ptr [rdi], cl; xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000138211: adc byte ptr [rdi], cl; xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x000000000013c13d: adc byte ptr [rdi], cl; xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013bf5d: adc byte ptr [rdi], cl; xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013c935: adc byte ptr [rdi], cl; xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013b855: adc byte ptr [rdi], cl; xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013c755: adc byte ptr [rdi], cl; xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001383c3: adc byte ptr [rdi], cl; xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001381e3: adc byte ptr [rdi], cl; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001382d3: adc byte ptr [rdi], cl; xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001380f3: adc byte ptr [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x0000000000074922: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3948; 
0x000000000003a3cd: adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3949; 
0x00000000000ceb45: adc byte ptr [rdi], cl; xchg eax, esp; ret 0x38b; 
0x0000000000074afe: adc byte ptr [rdi], r9b; xchg eax, ebx; ret 0x3948; 
0x000000000003a3cc: adc byte ptr [rdi], r9b; xchg eax, ebx; ret 0x3949; 
0x000000000019c222: adc byte ptr [rdx + 0xe], al; or byte ptr [rbx + rcx + 0x3c], al; add byte ptr [rax], al; add byte ptr [rax - 0x6ff00000], al; out dx, al; jmp qword ptr [rbp + 2]; 
0x000000000019e20b: adc byte ptr [rdx + rax - 0x79e7f1b4], cl; add eax, dword ptr [rdi + 0xe]; and byte ptr [rbx + 0xac90204], al; ret; 
0x000000000018d610: adc byte ptr [rdx + rdi*8], ah; jmp rsp; 
0x0000000000049623: adc byte ptr [rdx + rdx*8 + 0x394ce875], al; ret; 
0x0000000000187988: adc byte ptr [rdx - 0x5e7f0004], ah; cld; call qword ptr [rax]; 
0x00000000001862e0: adc byte ptr [rdx - 5], dl; push rax; push rbx; sti; call rax; 
0x000000000004ec50: adc byte ptr [rdx], 0; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x00000000000007b6: adc byte ptr [rdx], ah; add byte ptr [rax], al; adc al, byte ptr [rax]; add byte ptr [rbx + 1], al; ret 0x102; 
0x0000000000186b38: adc byte ptr [rdx], ah; cld; jmp qword ptr [rax + 0x23]; 
0x000000000015e88c: adc byte ptr [rdx], al; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001987f8: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xedbc800d1cffedbd]; jmp qword ptr [rdx]; 
0x00000000001ab588: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xf55cf40d1cfff55d]; jmp qword ptr [rdx]; 
0x00000000001a9358: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf4ea900d1cfff4eb], al; jmp qword ptr [rdx]; 
0x00000000001ad5a8: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf582030d1cfff583], al; jmp qword ptr [rdx]; 
0x00000000001a9738: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs dword ptr [0xf4ec060d1cfff4ec], eax; jmp qword ptr [rdx]; 
0x00000000001995c0: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs eax, dword ptr [0xeddba10d1cffedfb]; jmp qword ptr [rdx]; 
0x00000000001998d8: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xedf8; 
0x000000000019a6d0: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xee68; 
0x00000000001a0d98: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf17f; 
0x00000000001ab298: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf55b; 
0x00000000001acb60: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf57a; 
0x00000000001b2570: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf683; 
0x00000000001ab7a8: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret; 
0x00000000001969c8: adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; xchg byte ptr [rbp + 0xd1cffed], al; ret 0xed84; 
0x00000000001ac3ab: adc byte ptr [rdx], al; ret; 
0x0000000000120996: adc byte ptr [rdx], ch; add byte ptr [rax], al; mov rdi, rbx; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x000000000016085b: adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000a2c01: adc byte ptr [rdx], dh; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0xd48f]; ret; 
0x0000000000186ac0: adc byte ptr [rdx], dh; cld; jmp rax; 
0x00000000001a7e90: adc byte ptr [rdx], dh; cmc; call qword ptr [rsi]; 
0x0000000000186218: adc byte ptr [rdx], dl; sti; call rax; 
0x00000000000ece14: adc byte ptr [rip + 0x64d8f700], ch; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ece51: adc byte ptr [rip + 0x64d8f700], ch; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036713: adc byte ptr [rip - 0x8000], cl; inc eax; shr eax, 0x1f; ret; 
0x00000000000ebbbf: adc byte ptr [rsi + 0x10], bh; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000009681b: adc byte ptr [rsi + 0x44], ah; mov dword ptr [rdi + 4], ebx; add rdi, 6; mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x0000000000162143: adc byte ptr [rsi + 0x66], ah; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000015fd05: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016070a: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret; 
0x000000000015fd00: adc byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000087175: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000008d07b: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x00000000000871bb: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000009d10b: adc byte ptr [rsi + 0xf], ah; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x000000000009d10a: adc byte ptr [rsi + 0xf], r12b; xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x0000000000129424: adc byte ptr [rsi + 6], bh; call qword ptr [rax + 0x28]; 
0x00000000001293ee: adc byte ptr [rsi + 6], bh; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x0000000000113887: adc byte ptr [rsi + rbx*2 + 0x31], dh; jmp qword ptr [rsi + 0x41]; 
0x00000000000a389c: adc byte ptr [rsi + rdi*8 + 0x438d48ff], cl; cld; pop rbx; ret; 
0x0000000000177f80: adc byte ptr [rsi - 0x11], dl; call qword ptr [rax - 0x6f0010aa]; push rsi; out dx, eax; call qword ptr [rax]; 
0x0000000000177f3c: adc byte ptr [rsi - 0x11], dl; jmp qword ptr [rax + 0x56]; 
0x0000000000177198: adc byte ptr [rsi - 0x12], dh; call qword ptr [rax + 0x75]; 
0x0000000000177198: adc byte ptr [rsi - 0x12], dh; call qword ptr [rax + 0x75]; out dx, al; call qword ptr [rax]; 
0x0000000000177194: adc byte ptr [rsi - 0x12], dh; call qword ptr [rax]; 
0x00000000001771b0: adc byte ptr [rsi - 0x12], dh; push qword ptr [rax + 0x75]; out dx, al; call qword ptr [rax]; 
0x00000000001931f0: adc byte ptr [rsi - 0x15], ah; call qword ptr [rdi]; 
0x00000000001877ac: adc byte ptr [rsi - 0x5a6f0004], ah; cld; call qword ptr [rax]; 
0x000000000009cfd7: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000a0f33: adc byte ptr [rsi - 0x77], ah; sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000fcaa5: adc byte ptr [rsi - 0x7d], ah; cli; push qword ptr [rsi + rax - 0x7d]; ret 0x6601; 
0x000000000018632c: adc byte ptr [rsi - 5], dh; jmp qword ptr [rax + 0x77]; 
0x00000000001adbc9: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; adc ecx, dword ptr [rbx + 0xd1cfff5]; mov r13d, esi; jmp qword ptr [rdx]; 
0x00000000001ad0d9: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; add byte ptr [rax + 0xd1cfff5], al; fdivr dword ptr [rbp - 0xb]; jmp qword ptr [rdx]; 
0x0000000000196b61: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; add byte ptr [rbp + 0xd1cffed], al; lodsd eax, dword ptr [rsi]; test ch, ch; jmp qword ptr [rdx]; 
0x00000000001a0d59: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; add eax, dword ptr [rax + 0xd1cfff1]; fidivr word ptr [rsi - 0xf]; jmp qword ptr [rdx]; 
0x00000000001acbb1: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; cmp dword ptr [rdx - 0xb], 0x3d0d1cff; jp 0x1acbb4; jmp qword ptr [rdx]; 
0x00000000001ad9e1: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; fild dword ptr [rdi + 0xd1cfff5]; push rax; xchg ebp, esi; jmp qword ptr [rdx]; 
0x00000000001a1609: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; fisttp dword ptr [rdx + 0xd1cfff1]; mov dh, 0x89; int1; jmp qword ptr [rdx]; 
0x00000000001b5881: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; idiv edi; sbb al, 0xd; mov dh, byte ptr [rdi + rsi*8]; jmp qword ptr [rdx]; 
0x0000000000196911: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; imul eax, dword ptr [rbp + 0xd1cffed], -0x11; test ch, ch; jmp qword ptr [rdx]; 
0x00000000001a98d1: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; imul ebp, edi, 0xd1cfff4; in eax, dx; hlt; jmp qword ptr [rdx]; 
0x0000000000197759: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; imul ecx, dword ptr [rdi + 0xd1cffed], -0x26; mov gs, ebp; jmp qword ptr [rdx]; 
0x0000000000199b69: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; imul esi, esi, 0xd1cffed; in al, 0xf3; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001adce9: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; jp 0xd37dce9; mov r13, r14; jmp qword ptr [rdx]; 
0x0000000000196ad1: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; mov al, byte ptr [rbp + 0xd1cffed]; mov ch, 0x84; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001ade29: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; mov ecx, dword ptr [rdx + 0xd1cfff5]; mov bp, si; jmp qword ptr [rdx]; 
0x0000000000198801: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xedbc800d1cffedbd]; jmp qword ptr [rdx]; 
0x00000000001ab591: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xf55cf40d1cfff55d]; jmp qword ptr [rdx]; 
0x00000000001a9361: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf4ea900d1cfff4eb], al; jmp qword ptr [rdx]; 
0x00000000001ad5b1: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf582030d1cfff583], al; jmp qword ptr [rdx]; 
0x00000000001a9741: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs dword ptr [0xf4ec060d1cfff4ec], eax; jmp qword ptr [rdx]; 
0x00000000001995c9: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs eax, dword ptr [0xeddba10d1cffedfb]; jmp qword ptr [rdx]; 
0x00000000001998e1: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xedf8; 
0x000000000019a6d9: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xee68; 
0x00000000001a0da1: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf17f; 
0x00000000001ab2a1: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf55b; 
0x00000000001acb69: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf57a; 
0x00000000001b2579: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf683; 
0x00000000001ab7b1: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret; 
0x00000000001ae011: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; sbb ecx, dword ptr [rbp + rsi*8 + 0x490d1cff]; mov dh, ch; jmp qword ptr [rdx]; 
0x000000000019a691: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; sub dword ptr [rsp + rdi*8 - 1], edi; sbb al, 0xd; bnd jnp 0x19a69b; jmp qword ptr [rdx]; 
0x0000000000194191: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; sub eax, dword ptr [rax + 0xd1cffec]; fdivr dword ptr [rdi - 0x14]; jmp qword ptr [rdx]; 
0x00000000001969d1: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; xchg byte ptr [rbp + 0xd1cffed], al; ret 0xed84; 
0x00000000001ad769: adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; xor rbp, 0xffffffffffffffff; sbb al, 0xd; ret 0xf582; 
0x000000000018622c: adc byte ptr [rsi], dl; sti; jmp rax; 
0x000000000003d02a: adc byte ptr [rsp + 8], al; add rsp, 0x18; ret; 
0x0000000000000453: adc byte ptr [rsp + rcx], bl; ret 0x4412; 
0x0000000000187520: adc byte ptr [rsp + rdi*8 - 1], ah; nop; cld; call qword ptr [rax]; 
0x0000000000186830: adc byte ptr [rsp + rdi*8], al; call rax; 
0x00000000000b078a: adc byte ptr [rsp - 0x10], al; ret; 
0x0000000000039dff: adc byte ptr [rsp - 4], al; ret; 
0x0000000000039e45: adc byte ptr [rsp - 8], al; ret; 
0x000000000013eda7: adc byte ptr es:[rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000e47c8: adc byte ptr gs:[rax - 0x77], cl; ret; 
0x00000000001866a4: adc ch, ah; sti; call qword ptr [rax]; 
0x000000000014a87c: adc ch, al; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001991a0: adc ch, bh; in eax, dx; call qword ptr [rax]; 
0x0000000000034c6c: adc ch, bl; adc eax, dword ptr [rax]; movsxd rdx, dword ptr [rdi + rsi*4]; add rdx, rdi; jmp rdx; 
0x00000000001a6930: adc ch, bl; hlt; call qword ptr [rdx]; 
0x00000000001926e9: adc ch, bl; jmp qword ptr [rdx + 4]; 
0x00000000000f1ef6: adc ch, byte ptr [rax]; mov rdi, -0x11e2153; mov eax, 0xa9; syscall; 
0x00000000001765b9: adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000018e1c9: adc ch, cl; call rax; 
0x000000000018e349: adc ch, cl; jmp qword ptr [rbp]; 
0x000000000019ab65: adc ch, dh; jmp qword ptr [rdx]; 
0x00000000001aa600: adc ch, dl; cmc; jmp qword ptr [rsi]; 
0x0000000000186778: adc cl, 0xfb; call rax; 
0x0000000000186778: adc cl, 0xfb; call rax; sar bl, cl; jmp qword ptr [rax]; 
0x0000000000161276: adc cl, al; call 0x75de4a8d; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000b14ed: adc cl, byte ptr [rax + 0x29]; ret 0x6948; 
0x00000000000b1472: adc cl, byte ptr [rax + 0x29]; ret 0x8948; 
0x00000000000bd30d: adc cl, byte ptr [rax + 1]; ret; 
0x0000000000038f74: adc cl, byte ptr [rax + 1]; ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x00000000000488d5: adc cl, byte ptr [rax - 0x73]; adc eax, 0x37b4cb; call 0xa3ea0; pop rbx; ret; 
0x0000000000022eff: adc cl, byte ptr [rax - 0x75]; push rbp; movabs al, byte ptr [0x201a748b48ef894c]; call rax; 
0x0000000000097efd: adc cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000000850dc: adc cl, byte ptr [rax - 0x77]; ret 0x348; 
0x00000000000f25d8: adc cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x00000000000d19ed: adc cl, byte ptr [rax - 0x77]; shr cl, 1; ret 0xfffd; 
0x00000000000ff8e4: adc cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000086cf5: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x0000000000118cc0: adc cl, byte ptr [rbp - 0x2ff4f]; jmp qword ptr [rsi - 0x7d]; 
0x0000000000028f41: adc cl, byte ptr [rbp - 0x77]; ret; 
0x0000000000099c8f: adc cl, byte ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099caf: adc cl, byte ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099ccf: adc cl, byte ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x000000000009c81f: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c900: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x0000000000099b15: adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000037dbd: adc cl, byte ptr [rcx - 0x3b7eb730]; cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000798c5: adc cl, byte ptr [rdi]; mov dh, 0; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000d3d60: adc cl, ch; ret 0xfffc; 
0x000000000008b2e8: adc cl, ch; ret 0xfffd; 
0x000000000010e3f2: adc cl, dh; dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 5; xchg eax, ecx; adc eax, 0x8948002b; ret 0xb9; 
0x000000000011ebde: adc cl, dh; jmp qword ptr [rsi + 0x2e]; 
0x00000000001a1110: adc dh, 0xf1; call rsp; 
0x0000000000186728: adc dh, ah; sti; call qword ptr [rax]; 
0x0000000000186728: adc dh, ah; sti; call qword ptr [rax]; call 0xffffffffdab9672d; sti; call qword ptr [rax - 0x24]; 
0x000000000008c594: adc dh, bh; ret; 
0x000000000013ccfd: adc dh, byte ptr [rbx - 0x10]; movsxd rcx, ecx; lea rax, qword ptr [rdi + rcx]; sub rax, rdx; ret; 
0x0000000000126bca: adc dh, byte ptr [rbx]; int1; jmp qword ptr [rsi - 0x70]; 
0x000000000011fc1e: adc dh, dh; ret 0x7401; 
0x000000000018696c: adc dh, dh; sti; jmp qword ptr [rax - 9]; 
0x00000000000022d3: adc dh, dl; ret; 
0x00000000001867a0: adc dl, cl; sti; jmp qword ptr [rax - 0x35]; 
0x00000000001b6440: adc dl, dh; cli; call rcx; 
0x00000000000810f2: adc dword ptr [rax + 0x29], ecx; ret 0x3948; 
0x000000000008234f: adc dword ptr [rax + 0x29], ecx; ror byte ptr [rax + 0x39], 1; ret; 
0x000000000008ae3b: adc dword ptr [rax + 0x39], ecx; ret; 
0x000000000014e209: adc dword ptr [rax + 0x63490003], 0x14; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000122a2e: adc dword ptr [rax + 1], edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000011afe8: adc dword ptr [rax + 3], edi; syscall; 
0x00000000001456ba: adc dword ptr [rax + rax], eax; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000031e17: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000008ab02: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; jmp rax; 
0x0000000000021f5d: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000036b4d: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x00000000001120a6: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000004632a: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006f7df: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c07f: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c47f: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab67: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb3b: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007adcf: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x0000000000065aa0: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x00000000000641a8: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed2c: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fc2: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efb8: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e84: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x000000000011ce8b: adc dword ptr [rax + rcx*2 + 0x33], esp; cmp al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x0000000000044da4: adc dword ptr [rax + rdx], 0; add byte ptr [rbx + 0x3108247c], cl; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x000000000010bd8c: adc dword ptr [rax - 0x73], ecx; adc eax, 0x2b8014; call 0xa3ea0; add rsp, 8; ret; 
0x00000000001347f6: adc dword ptr [rax - 0x77], ecx; pop rbp; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000007e4d5: adc dword ptr [rax - 0x77], ecx; ret 0x8348; 
0x000000000010836b: adc dword ptr [rax - 0x7b], ecx; sal byte ptr [rbp - 0x11], cl; leave; ret; 
0x0000000000086937: adc dword ptr [rax - 0x7d], ecx; ret 0x4201; 
0x00000000000d1b31: adc dword ptr [rax - 0x7d], ecx; ret 0x4401; 
0x00000000000009e2: adc dword ptr [rax], 0x12400515; xor byte ptr [rdx + 0x310e2044], ch; rol qword ptr [rax + 0x4260a120], cl; ret 0x4021; 
0x000000000013d34b: adc dword ptr [rax], 0x83480000; ret 0x4910; 
0x00000000000461e4: adc dword ptr [rax], eax; adc byte ptr [rax], al; mov eax, 0x38; syscall; 
0x000000000018f395: adc dword ptr [rax], eax; add byte ptr [rax + 0x58], cl; std; jmp qword ptr [rax]; 
0x00000000001398e7: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013b859: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000cb54d: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000000c0ed9: adc dword ptr [rax], eax; and byte ptr [rcx], al; mov eax, 0x38; syscall; 
0x0000000000023feb: adc dword ptr [rax], eax; mov rdi, r14; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x000000000005f05e: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; jmp rax; 
0x000000000005f13c: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005ef43: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 0; jmp rax; 
0x000000000005efe1: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 1; jmp rax; 
0x000000000005f1d0: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1100], 0x20; mov dword ptr [rbp - 0x10fc], 1; jmp rax; 
0x000000000005f186: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005ef97: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000005f224: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f09e: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f2d9: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f0e8: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1138], 1; mov dword ptr [rbp - 0x1128], 0; jmp rax; 
0x000000000005f323: adc dword ptr [rax], eax; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x000000000006465e: adc dword ptr [rax], eax; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x000000000005e53e: adc dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x00000000000647fd: adc dword ptr [rax], eax; movsxd rdx, dword ptr [rax + r12*4]; add rax, rdx; jmp rax; 
0x00000000000fbe53: adc dword ptr [rax], esp; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000014fca6: adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x3789e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000174a77: adc dword ptr [rbp - 0x1f57cada], ebp; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000000f48e3: adc dword ptr [rbp - 0x2708ffd4], 0x48018964; or eax, 0xffffffff; ret; 
0x000000000003d1b4: adc dword ptr [rbp], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000014df09: adc dword ptr [rbx + 0x63490003], 0x14; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000011bf56: adc dword ptr [rbx - 0x75], eax; adc r8d, dword ptr [rbx + rax*4]; ret; 
0x00000000000304fb: adc dword ptr [rbx], edi; cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38f77a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f364e: adc dword ptr [rcx + 0x800008], eax; add byte ptr [rax + 1], bh; add rsp, 8; ret; 
0x0000000000021fcf: adc dword ptr [rcx + rcx*4 - 0x1e], eax; add rdx, 0x47; shl rdx, 4; lea rdi, qword ptr [r14 + rdx]; call rax; 
0x0000000000028f68: adc dword ptr [rcx - 0x77], eax; add al, 0xe9; mov esp, 0x89fffffc; ret 0xe283; 
0x000000000003ca66: adc dword ptr [rcx], eax; add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x0000000000046581: adc dword ptr [rcx], eax; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000cb253: adc dword ptr [rdi + rbp], ebp; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000036465: adc dword ptr [rdi], eax; and eax, 0x80000000; movd xmm0, eax; ret; 
0x00000000000360df: adc dword ptr [rdi], eax; and rax, rdx; movq xmm0, rax; ret; 
0x0000000000036154: adc dword ptr [rdi], ecx; ret; 
0x000000000003611d: adc dword ptr [rdi], ecx; subsd xmm0, xmm1; ret; 
0x0000000000036482: adc dword ptr [rdi], ecx; subss xmm0, xmm1; ret; 
0x0000000000163770: adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000012dff6: adc dword ptr [rdx + 0x1f], esi; cmp eax, 2; sete al; movzx eax, al; ret; 
0x00000000000c1094: adc dword ptr [rdx + 1], edi; mov edi, dword ptr [rcx + 0x28]; mov eax, ebx; mov esi, 0x81; syscall; 
0x0000000000032f9b: adc dword ptr [rdx + 5], ebx; add byte ptr [rax - 0x77], cl; ret; 
0x000000000004e978: adc dword ptr [rdx], 0; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x00000000000fa453: adc dword ptr [rdx], edi; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036f9b: adc dword ptr [rip + 0x8be00], ecx; add byte ptr [rax], al; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x82; syscall; 
0x00000000000b827b: adc dword ptr [rip + 0xf40000c], ecx; mov dh, 0xd6; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000eb153: adc dword ptr [rip - 0x389bffd3], ebp; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000006f84f: adc dword ptr [rip - 0x597af100], esi; add al, 0; add bl, dh; ret; 
0x000000000006f7fe: adc dword ptr [rip - 0x766b1500], esi; ret 0x8b48; 
0x000000000014dc09: adc dword ptr [rsi + 0x63490003], 0x14; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000c2053: adc dword ptr [rsi - 0x2708ffd1], edi; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011b04c: adc dword ptr [rsi], 2; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fb253: adc dword ptr [rsp + rbp], ebp; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000faa53: adc dword ptr [rsp + rbp], esi; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001398e6: adc dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000123d36: adc eax, 0; add byte ptr [rax], al; mov dword ptr [rbx + 0xa8], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000123d55: adc eax, 0; add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000156e38: adc eax, 0x10443; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000156e13: adc eax, 0x10468; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000007520a: adc eax, 0x10502b48; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x00000000000f96f2: adc eax, 0x10c48348; lea rax, qword ptr [rip + 0x2c8112]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a1efa: adc eax, 0x10ef8348; add rax, rdi; ret; 
0x000000000005e53b: adc eax, 0x118c40; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x00000000001548d8: adc eax, 0x129a3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001548be: adc eax, 0x129bd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000003078b: adc eax, 0x1421b0; movsxd rax, dword ptr [rdx + r12*4]; add rdx, rax; jmp rdx; 
0x0000000000117aca: adc eax, 0x142b60f; lea rax, qword ptr [rdx + rax + 2]; cmp rcx, rax; sbb eax, eax; ret; 
0x0000000000022b65: adc eax, 0x1432b6; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x0000000000186229: adc eax, 0x1610fffb; sti; jmp rax; 
0x000000000007c602: adc eax, 0x18430348; mov qword ptr [rbx + 8], rax; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x00000000000d9409: adc eax, 0x1f0f69eb; add byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x000000000013fde8: adc eax, 0x27493; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013fdc3: adc eax, 0x274b8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001335a0: adc eax, 0x28853b; mov qword ptr [rip + 0x28c2e4], rdx; add rsp, 8; ret; 
0x00000000001335a7: adc eax, 0x28c2e4; add rsp, 8; ret; 
0x000000000013e438: adc eax, 0x28e43; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013e41e: adc eax, 0x28e5d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013516b: adc eax, 0x28ea30; mov eax, 0; cmove rax, rdx; add rsp, 8; ret; 
0x000000000012ab19: adc eax, 0x298d62; mov qword ptr fs:[rax], rdx; ret; 
0x00000000001211d2: adc eax, 0x29c9a9; mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x000000000013ca48: adc eax, 0x2a833; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013ca23: adc eax, 0x2a858; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000112f3a: adc eax, 0x2aaf29; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000109f98: adc eax, 0x2b3ecb; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000109ef8: adc eax, 0x2b3f6b; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000108826: adc eax, 0x2b563d; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010acd9: adc eax, 0x2b7ae2; pop rbp; ret; 
0x000000000010bd8f: adc eax, 0x2b8014; call 0xa3ea0; add rsp, 8; ret; 
0x00000000000fbb24: adc eax, 0x2c233f; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fba74: adc eax, 0x2c23ef; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb9d2: adc eax, 0x2c2491; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb408: adc eax, 0x2c2a5b; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb298: adc eax, 0x2c2bcb; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa55b: adc eax, 0x2c3908; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fc805: adc eax, 0x2c51c6; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000f7836: adc eax, 0x2c662d; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013aa78: adc eax, 0x2c803; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013aa5e: adc eax, 0x2c81d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000f3036: adc eax, 0x2cae2d; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2f9e: adc eax, 0x2caec5; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2ef3: adc eax, 0x2caf70; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2418: adc eax, 0x2cba4b; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1f12: adc eax, 0x2cbf51; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f19dd: adc eax, 0x2cc486; neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x00000000000f193d: adc eax, 0x2cc526; neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x00000000000f18c0: adc eax, 0x2cc5a3; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1850: adc eax, 0x2cc613; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f12d2: adc eax, 0x2ccb91; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1232: adc eax, 0x2ccc31; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0a5b: adc eax, 0x2cd408; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0545: adc eax, 0x2cd91e; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f38ce: adc eax, 0x2cdd5d; add rsp, 8; ret; 
0x00000000000ed372: adc eax, 0x2d0af1; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ed31e: adc eax, 0x2d0b45; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecf69: adc eax, 0x2d0efa; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecea6: adc eax, 0x2d0fbd; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ece4f: adc eax, 0x2d1014; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec85e: adc eax, 0x2d1605; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebb02: adc eax, 0x2d2361; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb56c: adc eax, 0x2d28f7; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb498: adc eax, 0x2d29cb; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb405: adc eax, 0x2d2a5e; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb21e: adc eax, 0x2d2c45; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb1c6: adc eax, 0x2d2c9d; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb166: adc eax, 0x2d2cfd; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb106: adc eax, 0x2d2d5d; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb0b6: adc eax, 0x2d2dad; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb066: adc eax, 0x2d2dfd; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e3172: adc eax, 0x2dae39; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x00000000000cb10c: adc eax, 0x2f2e47; mov dword ptr [rdx], ecx; add rsp, 0x10; pop rbx; ret; 
0x00000000000c2582: adc eax, 0x2fb8e1; mov eax, 0x20; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000c243a: adc eax, 0x2fba29; mov eax, 0x7f; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000c20c2: adc eax, 0x2fbda1; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c2052: adc eax, 0x2fbe11; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1dfe: adc eax, 0x2fc065; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1d9e: adc eax, 0x2fc0c5; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c11f3: adc eax, 0x2fcc70; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0b06: adc eax, 0x2fd35d; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0a17: adc eax, 0x2fd44c; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c098d: adc eax, 0x2fd4d6; neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x00000000000bdf9c: adc eax, 0x2ffec7; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000bcd8f: adc eax, 0x3010d4; movsxd rdi, ebp; mov al, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000008b9d9: adc eax, 0x335316; add rsp, 0x100; ret; 
0x00000000000869f2: adc eax, 0x337551; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x0000000000086882: adc eax, 0x3376c1; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x00000000000867ba: adc eax, 0x337789; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x0000000000085d31: adc eax, 0x33ae5a; add rsp, 0x18; ret; 
0x000000000007f87d: adc eax, 0x33e8de; movsxd rdi, ecx; mov eax, 3; syscall; 
0x000000000007c8d1: adc eax, 0x3440f2; add dword ptr [rip + 0x3440e7], 1; ret; 
0x00000000000266ea: adc eax, 0x358d4800; mov dh, 0x5c; adc eax, 0x3d8d4800; ret; 
0x000000000002917d: adc eax, 0x358d4800; mov esi, dword ptr [rdx]; adc eax, 0x3d8d4800; ret; 
0x000000000005dbdc: adc eax, 0x360287; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000488d8: adc eax, 0x37b4cb; call 0xa3ea0; pop rbx; ret; 
0x000000000002ed91: adc eax, 0x37ba0015; add dword ptr [rax], eax; add al, ch; ret 0xe; 
0x0000000000037bdd: adc eax, 0x3864be; ret; 
0x0000000000036f81: adc eax, 0x386ee2; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036f48: adc eax, 0x386f1b; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036eec: adc eax, 0x386f77; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036c5f: adc eax, 0x387204; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011fcd3: adc eax, 0x388; mov qword ptr [rsp + 8], rdi; mov esi, 1; mov rdi, r15; call qword ptr [rax]; 
0x000000000002ef89: adc eax, 0x390cef; ret; 
0x0000000000031e08: adc eax, 0x392203; lea rdi, qword ptr [rip + 0x38deec]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000000a2b8a: adc eax, 0x3b30478b; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000266f1: adc eax, 0x3d8d4800; ret; 
0x0000000000108a0e: adc eax, 0x3f14d; cmove rax, rdx; add rsp, 8; ret; 
0x00000000001734de: adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x000000000014cfc5: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cfc0: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000133884: adc eax, 0x48000001; mov eax, edx; add rsp, 8; ret; 
0x000000000010c8c4: adc eax, 0x4864002b; add eax, dword ptr [0]; ret; 
0x0000000000097b97: adc eax, 0x48ffff49; mov eax, ebx; pop rbx; ret; 
0x0000000000120d43: adc eax, 0x59e68; mov ecx, eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x0000000000021a18: adc eax, 0x5b000001; pop rbp; pop r12; ret; 
0x000000000009d8b8: adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x000000000014509d: adc eax, 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000121441: adc eax, 0x66fffffe; nop word ptr cs:[rax + rax]; mov eax, 2; ret; 
0x0000000000036462: adc eax, 0x7110ff3; and eax, 0x80000000; movd xmm0, eax; ret; 
0x000000000009efcc: adc eax, 0x71d850f; add byte ptr [rax], al; ret; 
0x00000000000c353a: adc eax, 0x74ff8548; sbb byte ptr [rax - 0x7b], cl; div byte ptr [rcx + rbx - 0x17]; xchg eax, esi; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000e49d0: adc eax, 0x801f0f; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000139471: adc eax, 0x83480000; ret 0xe910; 
0x0000000000104406: adc eax, 0x841f0f66; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000c2977: adc eax, 0x89000289; ret 0xc748; 
0x000000000010e3fc: adc eax, 0x8948002b; ret 0xb9; 
0x0000000000036fb9: adc eax, 0x89c78944; and al, 8; call 0x108100; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000c0b57: adc eax, 0x89cf8944; and al, 0xc; call 0x108100; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000001955ed: adc eax, 0x98a00000; in eax, dx; jmp rsi; 
0x00000000000e1876: adc eax, 0x98a2d; movzx ecx, al; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000dfbf1: adc eax, 0x9a69e; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000008c44e: adc eax, 0xbb71d; cmove rax, rdx; add rsp, 8; ret; 
0x000000000011ffe9: adc eax, 0xcf02; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x0000000000097c4a: adc eax, 0xd0bc0f48; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000000915d8: adc eax, 0xd5ca3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000915b3: adc eax, 0xd5cc8; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a1af4: adc eax, 0xd6deb; shr eax, 0xc; and eax, 0xf; movsxd rsi, dword ptr [rdx + rax*4]; add rdx, rsi; jmp rdx; 
0x000000000008eed8: adc eax, 0xd83a3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000008eebe: adc eax, 0xd83bd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000022644: adc eax, 0xd89003a; ret; 
0x00000000000a2e8a: adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x0000000000037322: adc eax, 0xe8e78948; xor eax, 0x48fffffc; add esp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000022634: adc eax, 0xeec1003a; or byte ptr [rbx - 0x3ebef020], al; call 0xffffffffc51faf48; adc eax, 0xd89003a; ret; 
0x000000000013340f: adc eax, 0xf04fa83; test byte ptr [rcx - 0x7d000000], bl; ret 0x8380; 
0x0000000000067176: adc eax, 0xf2ffa83; xchg dword ptr [rip - 0x7cfffffb], edi; ret 0x8308; 
0x000000000010a0c8: adc eax, 0xf741fff7; add al, 0x24; add byte ptr [rax - 0x76b80000], al; ret 0x3875; 
0x000000000012a9df: adc eax, 0xffff567c; mov esi, 3; mov rdi, r15; call qword ptr [rax]; 
0x000000000008b8de: adc eax, 0xfffffa1d; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000cb76e: adc eax, 0xfffffedd; cmove rax, rdx; add rsp, 8; ret; 
0x000000000010accb: adc eax, 0xfffffef0; test rax, rax; cmovne rdx, rax; mov qword ptr [rip + 0x2b7ae2], rdx; pop rbp; ret; 
0x00000000001454a0: adc eax, dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000012d4ac: adc eax, dword ptr [rax - 0x78]; sub edi, dword ptr [rax + 1]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000006eb8a: adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x000000000013d0ae: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013b679: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000f1221: adc eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000034ed7: adc eax, dword ptr [rax]; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000034c6e: adc eax, dword ptr [rax]; movsxd rdx, dword ptr [rdi + rsi*4]; add rdx, rdi; jmp rdx; 
0x000000000011bf5a: adc eax, dword ptr [rbx + rax*4]; ret; 
0x00000000000c61d9: adc eax, dword ptr [rbx - 0x7bf0a206]; imul edi, edi, 0x8348ffff; ret; 
0x00000000000cb50d: adc eax, dword ptr [rcx + rcx*8 + 0x63480f75]; ret 0x8948; 
0x00000000000fad1d: adc eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x000000000018955d: adc eax, dword ptr [rcx]; add byte ptr [rdx + rcx - 0x11], dh; jmp rsp; 
0x00000000001af575: adc eax, dword ptr [rdx]; add al, bl; mov esi, esi; call qword ptr [rbx]; 
0x00000000001af535: adc eax, dword ptr [rdx]; add al, cl; mov esi, esi; jmp qword ptr [rdi]; 
0x000000000018bf75: adc eax, dword ptr [rdx]; add byte ptr [rdi], ah; jp 0x18bf72; jmp rsp; 
0x0000000000099c0b: adc eax, dword ptr [rdx]; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x0000000000099c2b: adc eax, dword ptr [rdx]; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x0000000000099c4b: adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000099c6b: adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000099ac8: adc eax, dword ptr [rdx]; mov rax, rdi; ret; 
0x0000000000099b1a: adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000099c8b: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099cab: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099ccb: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x000000000009c81b: adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c89c: adc eax, dword ptr [rdx]; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x000000000013ea9f: adc eax, dword ptr cs:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000383a9: adc eax, eax; ret; 
0x00000000000384e6: adc eax, edx; pop rbp; pop rbx; ret; 
0x00000000000498bc: adc eax, esi; add eax, dword ptr [rax]; mov rax, rbx; add rsp, 0x440; pop rbx; ret; 
0x00000000000f1851: adc eax, esi; sub al, 0; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c08e3: adc ebp, 0xd8f7002f; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000174905: adc ebp, dword ptr [rbx]; fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x00000000000f1953: adc ebp, eax; sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x000000000010bd60: adc ebp, ebx; ret; 
0x0000000000077ac3: adc ebp, ebx; shl byte ptr [rsi + 0x2e], 1; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000bd27d: adc ebp, ecx; pop rbp; mov cl, 0xfc; jmp qword ptr [rsi + 0x2e]; 
0x000000000019abad: adc ebp, esi; jmp qword ptr [rdx]; 
0x000000000007394d: adc ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000001655d9: adc ebx, dword ptr [rdi + 0x1f0fffeb]; add bl, dh; ret; 
0x0000000000107be3: adc ebx, eax; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000186215: adc ebx, edi; call qword ptr [rax]; 
0x0000000000186215: adc ebx, edi; call qword ptr [rax]; adc bh, bl; call rax; 
0x00000000000b14fa: adc ecx, dword ptr [rax + 0x29]; sal dword ptr [rcx], -0x40; mov qword ptr [rbx + 8], rcx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000cb604: adc ecx, dword ptr [rax + 0x63]; sar byte ptr [rax + 0x1c], cl; syscall; 
0x00000000000cb604: adc ecx, dword ptr [rax + 0x63]; sar byte ptr [rax + 0x1c], cl; syscall; neg eax; ret; 
0x000000000003de40: adc ecx, dword ptr [rax - 0x73]; lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000062992: adc ecx, dword ptr [rax - 0x75]; add byte ptr [rbx - 0x109773], cl; jmp qword ptr [rsi - 0x77]; 
0x000000000010c4a4: adc ecx, dword ptr [rax - 0x75]; add eax, 0x2b6364; add rsp, 0x28; jmp rax; 
0x00000000001203ed: adc ecx, dword ptr [rax - 0x75]; push rbx; or byte ptr [rcx + 0x48182444], cl; mov edi, ebx; call qword ptr [rdx + 0x20]; 
0x000000000007c57c: adc ecx, dword ptr [rax - 0x77]; ret 0x8b48; 
0x00000000000e92fa: adc ecx, dword ptr [rax - 0x77]; ret; 
0x00000000000a394c: adc ecx, dword ptr [rax - 0x7d]; in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000011104a: adc ecx, dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000031973: adc ecx, dword ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000049a2b: adc ecx, dword ptr [rax - 0x7d]; ret 0x4c10; 
0x00000000000a354c: adc ecx, dword ptr [rax - 0x7d]; ret 0x8b04; 
0x00000000001261cd: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000037194: adc ecx, dword ptr [rbx + 0x802484]; add byte ptr [rax], al; add rsp, 0x108; ret; 
0x00000000001adbce: adc ecx, dword ptr [rbx + 0xd1cfff5]; mov r13d, esi; jmp qword ptr [rdx]; 
0x000000000002bdb4: adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x00000000001087f4: adc ecx, dword ptr [rcx + 0x3b8c1]; add byte ptr [rax], al; neg ecx; cmp edx, -0x16; cmovne eax, ecx; ret; 
0x0000000000108365: adc ecx, dword ptr [rcx - 0x77]; ror dword ptr [rcx - 0x75], 1; adc dword ptr [rax - 0x7b], ecx; sal byte ptr [rbp - 0x11], cl; leave; ret; 
0x000000000009ef91: adc ecx, dword ptr [rcx - 0x7d]; call 0x7f9737ad; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000a5c51: adc ecx, dword ptr [rcx - 0x7d]; ret 0x4104; 
0x00000000000b6fdb: adc ecx, dword ptr [rdi]; scasd eax, dword ptr [rdi]; ret 0x8941; 
0x0000000000099c94: adc ecx, dword ptr [rdx + 5]; mov rax, rdi; ret; 
0x0000000000099cb4: adc ecx, dword ptr [rdx + 6]; mov rax, rdi; ret; 
0x0000000000099cd4: adc ecx, dword ptr [rdx + 7]; mov rax, rdi; ret; 
0x0000000000099b1e: adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x000000000009c905: adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x000000000003778c: adc edi, dword ptr [rax + 1]; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000f6d4f: adc edi, eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000186221: adc edi, ebx; push qword ptr [rax + 0x14]; sti; inc dword ptr [rax + 0x15]; sti; call qword ptr [rax]; 
0x000000000018cea1: adc edi, ecx; call rsp; 
0x0000000000109f3a: adc edi, edi; call qword ptr [rax - 0x18]; 
0x00000000000ef5d9: adc edi, edi; push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000001456b9: adc edx, dword ptr [rcx]; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000003911a: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000018fcf5: adc edx, ebp; jmp qword ptr [rdx]; 
0x00000000000383a1: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000000a5470: adc esi, dword ptr [rbp + rcx - 0x77]; ret 0xc9eb; 
0x0000000000175e1e: adc esi, dword ptr [rbp - 0x60001a67]; mov dh, 0xc7; ret 0xe71f; 
0x00000000001ad299: adc esi, esi; jmp rbx; 
0x000000000007c0d1: adc esi, esi; ret 0xf02; 
0x000000000015fc79: adc esp, dword ptr [rdi + 2]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000007a32c: adc esp, dword ptr [rsp + rax*2 - 0x77]; add byte ptr gs:[rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000001867ed: adc esp, edi; call qword ptr [rax + 4]; 
0x00000000001867ed: adc esp, edi; call qword ptr [rax + 4]; cld; call qword ptr [rax]; 
0x000000000018682d: adc esp, edi; call qword ptr [rax]; 
0x000000000018682d: adc esp, edi; call qword ptr [rax]; add al, 0xfc; call rax; 
0x0000000000186ad1: adc esp, edi; call rax; 
0x000000000018684d: adc esp, edi; jmp rax; 
0x000000000013ec82: adc qword ptr [r8], rax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000383a0: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000008c4f4: adc r11b, r14b; movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000018e348: adc r13b, r9b; jmp qword ptr [rbp]; 
0x000000000013b7e0: adc r8b, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000011bf59: adc r8d, dword ptr [rbx + rax*4]; ret; 
0x000000000009ef90: adc r9d, dword ptr [r9 - 0x7d]; call 0x7f9737ad; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x00000000000384e5: adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000039119: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000008c593: adc sil, r15b; ret; 
0x000000000018b8df: add ah, ah; add esi, edi; inc esp; test dword ptr [rcx], 0xf704a400; jmp rsp; 
0x00000000001a488b: add ah, ah; add word ptr [rax], ax; shl rdi, 1; jmp qword ptr [rax]; 
0x000000000019d78b: add ah, ah; cmc; add byte ptr [rax], al; adc byte ptr [rdi - 0x11], ah; jmp qword ptr [rsi]; 
0x000000000018ca5f: add ah, ah; cmp al, 0xff; fcomp qword ptr [rdi + 2]; add byte ptr [rbx + rax*4 - 8], dh; call rsp; 
0x00000000001a1c8b: add ah, ah; cmp al, byte ptr [rcx]; add byte ptr [rax], al; out dx, al; int1; call qword ptr [rdx]; 
0x00000000001abb8b: add ah, ah; fld dword ptr [rcx]; add al, al; out dx, eax; cmc; call qword ptr [rax]; 
0x000000000018a31f: add ah, ah; iretd; int1; jmp rsp; 
0x000000000018d0bf: add ah, ah; jno 0x18d0bc; jmp rsp; 
0x00000000001a538b: add ah, ah; jno 0x1a5390; add byte ptr [rax], dh; jnp 0x1a5387; jmp qword ptr [rcx]; 
0x00000000001b5c8b: add ah, ah; jp 0x1b5c91; add byte ptr [rax], dh; fdivrp st(7); call qword ptr [rcx]; 
0x000000000018db97: add ah, ah; mov bh, 0xfa; call rsp; 
0x00000000001a9a8b: add ah, ah; mov eax, 0x71700001; cmc; call rsp; 
0x0000000000194a63: add ah, ah; or dword ptr [rax], eax; add byte ptr [rax - 0x72], ch; in eax, dx; call qword ptr [rax]; 
0x000000000019d18b: add ah, ah; out dx, eax; add byte ptr [rax], al; add cl, bl; stc; call qword ptr [rax]; 
0x00000000001898f7: add ah, ah; push rsp; out dx, eax; jmp rsp; 
0x00000000001a7e8b: add ah, ah; pushfq; add dword ptr [rax], eax; adc byte ptr [rdx], dh; cmc; call qword ptr [rsi]; 
0x000000000019a48b: add ah, ah; ret 0; 
0x000000000018a047: add ah, ah; ret; 
0x000000000018ae3f: add ah, ah; sal ah, cl; jmp rsp; 
0x00000000001888af: add ah, ah; sbb esp, ebp; jmp rsp; 
0x000000000018969f: add ah, ah; xor ebp, edi; call rsp; 
0x000000000019ca6b: add ah, al; call 0xffffffffbb89ca72; out dx, al; jmp qword ptr [rdx]; 
0x0000000000188f8f: add ah, al; cdq; out dx, al; jmp rsp; 
0x000000000018d2cf: add ah, al; lodsb al, byte ptr [rsi]; stc; jmp rsp; 
0x00000000001a6a6b: add ah, al; mov byte ptr [rcx], al; add al, ah; fcompi st(4); jmp qword ptr [rcx]; 
0x0000000000187f47: add ah, al; mov edx, ebp; jmp rsp; 
0x0000000000189557: add ah, al; or edi, ebp; inc esp; adc eax, dword ptr [rcx]; add byte ptr [rdx + rcx - 0x11], dh; jmp rsp; 
0x00000000001a4c6b: add ah, al; push 1; add byte ptr [rax], dl; hlt; call qword ptr [rbp]; 
0x000000000019a46b: add ah, al; ret 0; 
0x0000000000189287: add ah, al; ret; 
0x000000000019a36b: add ah, al; rol dword ptr [rax], 0; mov al, 0x25; out dx, al; jmp qword ptr [rax]; 
0x000000000018f16b: add ah, al; sldt word ptr [rax]; nop; shr ecx, cl; call qword ptr [rcx + 5]; 
0x000000000018d67f: add ah, al; sub edi, edx; jmp rsp; 
0x00000000001a7d6b: add ah, al; wait; add dword ptr [rax], eax; nop; xor ch, dh; jmp qword ptr [rcx]; 
0x00000000000a1abe: add ah, bh; add eax, dword ptr [rax]; pop rbx; ret; 
0x00000000000a1ae1: add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000001a7ba3: add ah, bh; cdq; add dword ptr [rax], eax; cmp byte ptr [rsi], ch; cmc; jmp qword ptr [rax]; 
0x00000000000a1b98: add ah, bh; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000000a1a9d: add ah, bh; inc dword ptr [rbx]; pop rbx; ret; 
0x000000000018694d: add ah, bh; jmp qword ptr [rax - 0x15]; 
0x0000000000179c6b: add ah, bh; jmp qword ptr [rsi]; 
0x000000000018698d: add ah, bh; ljmp ptr [rax + 0x2c]; cld; push qword ptr [rax]; cld; call qword ptr [rax]; 
0x0000000000199ba3: add ah, bh; mov ecx, 0xb5180000; cld; jmp qword ptr [rcx]; 
0x00000000001a50a3: add ah, bh; outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; or byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001ab4a3: add ah, bh; rol byte ptr [rcx], cl; add al, bl; in eax, 0xf5; call qword ptr [rax]; 
0x00000000001a0aa3: add ah, bh; sub byte ptr [rcx], al; add byte ptr [rax - 0x33], ch; int1; jmp qword ptr [rax]; 
0x000000000019b9a3: add ah, bh; xlatb; add byte ptr [rax], al; xor rbp, rsi; call qword ptr [rsi]; 
0x00000000001b0283: add ah, bl; and byte ptr [rdx], al; add byte ptr [rax + 0x51], bl; sti; call rsi; 
0x000000000019e183: add ah, bl; inc dword ptr [rax]; add byte ptr [rax + 0x42], ch; cld; jmp qword ptr [rbx + 0x17]; 
0x00000000001b4e83: add ah, bl; insb byte ptr [rdi], dx; add al, byte ptr [rax]; fadd dword ptr [rsi]; sti; jmp qword ptr [rdx]; 
0x00000000001a5c83: add ah, bl; jp 0x1a5c88; add byte ptr [rax], bh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a6a83: add ah, bl; mov byte ptr [rcx], al; add al, bh; fcompi st(4); jmp qword ptr [rcx]; 
0x0000000000004527: add ah, bl; or al, 0; add byte ptr [rdx], ah; add byte ptr [rax + rax], cl; push rax; ret 0xb; 
0x00000000001a5183: add ah, bl; outsd dx, dword ptr [rsi]; add dword ptr [rax], eax; sub byte ptr [rsi - 0xc], dh; jmp qword ptr [rcx]; 
0x00000000001aa583: add ah, bl; ret; 
0x000000000019a383: add ah, bl; rol dword ptr [rax], 0; sub byte ptr [rax], ch; out dx, al; call qword ptr [rsi]; 
0x00000000001a7d83: add ah, bl; wait; add dword ptr [rax], eax; test al, 0x30; cmc; jmp qword ptr [rcx]; 
0x000000000019e237: add ah, byte ptr [rdi + 0xa]; ret; 
0x0000000000099c8c: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099cac: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099ccc: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x000000000009c81c: add ah, byte ptr [rsi + 0xf]; adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000099b1b: add ah, byte ptr [rsi + 0xf]; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x000000000015c883: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, qword ptr [rdx + 5]; ret; 
0x0000000000099ba8: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000099b44: add ah, byte ptr [rsi - 0x75]; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000099c2c: add ah, byte ptr [rsi - 0x75]; or byte ptr [r14 - 0x77], spl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000e404a: add ah, byte ptr [rsi - 0x77]; inc byte ptr [r11 + 0x37401e2]; mov byte ptr [rdi], 0; xor eax, eax; ret; 
0x00000000000e3298: add ah, byte ptr [rsi - 0x77]; push rdi; inc byte ptr [rax - 0xa]; mov dword ptr [rdi + rcx], 0xffff0d84; jmp qword ptr [rsi + 0xf]; 
0x000000000018f393: add ah, ch; adc dword ptr [rax], eax; add byte ptr [rax + 0x58], cl; std; jmp qword ptr [rax]; 
0x00000000001aba93: add ah, ch; fadd dword ptr [rcx]; add byte ptr [rax - 0x13], cl; cmc; jmp qword ptr [rax]; 
0x00000000001a4b93: add ah, ch; imul eax, dword ptr [rcx], 0xf4639800; jmp qword ptr [rax]; 
0x0000000000199293: add ah, ch; mov al, 0; add byte ptr [rax + 1], bl; out dx, al; jmp rax; 
0x00000000001aa993: add ah, ch; mov dword ptr [rcx], 0xf5d70800; call qword ptr [rsi]; 
0x00000000001adfa3: add ah, ch; stc; add dword ptr [rax], eax; jmp qword ptr [rdi]; 
0x00000000001b0a93: add ah, ch; sub byte ptr [rdx], al; add byte ptr [rax + 0x64], bl; clc; jmp qword ptr [rbx]; 
0x00000000001af573: add ah, cl; adc eax, dword ptr [rdx]; add al, bl; mov esi, esi; call qword ptr [rbx]; 
0x00000000001a7b73: add ah, cl; cdq; add dword ptr [rax], eax; or byte ptr [rsi], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001a1b73: add ah, cl; cmp dword ptr [rcx], eax; add al, ch; out 0xf1, eax; jmp rsi; 
0x00000000001b1d73: add ah, cl; cmp eax, dword ptr [rdx]; add byte ptr [rax], bh; or al, 0xf7; call qword ptr [rbx]; 
0x000000000019ba73: add ah, cl; fadd dword ptr [rax]; add al, bh; out dx, al; call rsp; 
0x00000000001a9a73: add ah, cl; mov eax, 0x70d80001; cmc; jmp qword ptr [rcx]; 
0x00000000001a5073: add ah, cl; outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; test al, 0x6e; hlt; jmp qword ptr [rcx]; 
0x000000000019a983: add ah, cl; ret; 
0x00000000001afd73: add ah, cl; sbb eax, dword ptr [rdx]; add al, bh; mov dh, 0xf6; call qword ptr [rdi]; 
0x00000000001b0d73: add ah, cl; sub eax, dword ptr [rdx]; add byte ptr [rax], bl; fdecstp; call qword ptr [rcx + 5]; 
0x00000000001895e7: add ah, dh; adc al, 0xef; inc dword ptr [rdi + rdx + 0x17940001]; out dx, eax; call rsp; 
0x00000000001882c7: add ah, dh; add ch, bl; jmp rsp; 
0x00000000001b639b: add ah, dh; add dword ptr [rdx], 0xf7f85000; call qword ptr [rbx]; 
0x000000000018b9f7: add ah, dh; and dh, bh; call rsp; 
0x00000000001b079b: add ah, dh; and eax, 0x65300002; clc; jmp qword ptr [rbx]; 
0x000000000018d7a7: add ah, dh; cli; inc dword ptr [rdx + rax*8 + 0x41640002]; cli; call rsp; 
0x000000000018d327: add ah, dh; mov al, 0xf9; jmp rsp; 
0x00000000001aa89b: add ah, dh; mov byte ptr [rcx], 0; nop; salc; cmc; jmp qword ptr [rsi]; 
0x000000000019a09b: add ah, dh; mov esi, 0x20000000; out dx, al; jmp qword ptr [rcx + 1]; 
0x000000000019a8ab: add ah, dh; ret 0; 
0x000000000018a03f: add ah, dh; ret 0xfff0; 
0x00000000001aa49b: add ah, dh; ret 1; 
0x000000000018abe7: add ah, dh; ret; 
0x000000000019919b: add ah, dh; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; adc ch, bh; in eax, dx; call qword ptr [rax]; 
0x000000000018baaf: add ah, dh; sub al, 0xf7; jmp rsp; 
0x0000000000187dff: add ah, dh; sub edx, 0x7cacff; add byte ptr [rdx + rax*4 - 0x16], al; call rsp; 
0x00000000001a7d9b: add ah, dh; wait; add dword ptr [rax], eax; sal byte ptr [rax], 0xf5; jmp qword ptr [rax]; 
0x00000000001b227b: add ah, dl; add al, byte ptr [rax]; push rax; and esi, edi; call qword ptr [rdx]; 
0x0000000000192b7b: add ah, dl; add byte ptr [r8], al; add byte ptr [rcx - 0x15], al; call rdx; 
0x00000000001ae57b: add ah, dl; add eax, dword ptr [rdx]; add al, al; sub al, 0xf6; jmp qword ptr [rdi]; 
0x0000000000197b7b: add ah, dl; cdq; add byte ptr [rax], al; adc al, cl; in eax, dx; call qword ptr [rbx]; 
0x00000000001a4d7b: add ah, dl; imul eax, dword ptr [rcx], 0; xor byte ptr [rsi - 0xc], ah; jmp qword ptr [rcx]; 
0x00000000001a5d7b: add ah, dl; jnp 0x1a5d80; add byte ptr [rax - 0x49], dh; hlt; call rdi; 
0x000000000018dbb7: add ah, dl; mov edx, 0xdd84fffa; add al, byte ptr [rax]; and al, 0xbb; cli; jmp rsp; 
0x000000000018b407: add ah, dl; mov esi, esi; jmp rsp; 
0x000000000018cc1f: add ah, dl; movsd dword ptr [rdi], dword ptr [rsi]; clc; lcall ptr [rbp*2 - 0x594bfffe]; clc; jmp rsp; 
0x0000000000188a2f: add ah, dl; push rdi; in eax, dx; call rsp; 
0x000000000018a36f: add ah, dl; sal cl, 1; call rsp; 
0x000000000018d507: add ah, dl; sti; stc; push qword ptr [rax + rsi*4 - 0x3dbfffe]; stc; jmp rsp; 
0x000000000018d2c7: add ah, dl; stosd dword ptr [rdi], eax; stc; call qword ptr [rcx - 0x533bfffe]; stc; jmp rsp; 
0x000000000018c5ff: add ah, dl; sub edi, eax; call rsp; 
0x00000000001a147b: add ah, dl; xor al, byte ptr [rcx]; add byte ptr [rax - 0x21], dl; int1; jmp qword ptr [rdi + 1]; 
0x000000000006f855: add al, 0; add bl, dh; ret; 
0x00000000000273ba: add al, 0; add byte ptr [rax + 0x29], cl; ret 0x8b49; 
0x00000000001349c4: add al, 0; add byte ptr [rax + 0x63], cl; std; mov eax, 3; syscall; 
0x00000000000c98fb: add al, 0; add byte ptr [rax + rdx - 0x7f], dh; jmp qword ptr [rbp + 4]; 
0x0000000000048e08: add al, 0; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000012642d: add al, 0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000113ae8: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x0000000000137a2d: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013c579: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000137a51: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000059e7f: add al, 0; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000123bda: add al, 0; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000010c03e: add al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; add rsp, 8; ret; 
0x0000000000004a00: add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x3b; 
0x00000000000f5c6c: add al, 0; add byte ptr [rax], al; mov esi, 1; call rbx; 
0x00000000000f5c8e: add al, 0; add byte ptr [rax], al; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000129b8b: add al, 0; add byte ptr [rax], al; mov qword ptr [rsp + 8], rdi; mov rdi, rbx; call qword ptr [rax]; 
0x000000000011ffef: add al, 0; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax]; 
0x00000000000a2f13: add al, 0; add byte ptr [rax], al; ret; 
0x00000000000eb03f: add al, 0; add byte ptr [rax], al; syscall; 
0x000000000003aa16: add al, 0; add byte ptr [rbp - 0x7c], al; test byte ptr [rdi], 0x84; ret; 
0x0000000000127107: add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000005d21f: add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000d31dc: add al, 0; add byte ptr [rbx - 0x7bf0fd06], al; add dword ptr [rip + 0x438d0000], eax; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000110e26: add al, 0; add byte ptr [rcx + rcx*4 - 6], cl; mov rdi, r12; call rax; 
0x00000000000dbe44: add al, 0; add byte ptr [rcx - 0x75], al; adc al, 0x8d; add qword ptr [r8 - 0x7d], rcx; ret; 
0x00000000000c97af: add al, 0; add byte ptr [rdi], cl; mov ss, word ptr [rax - 0x7efffffd]; jmp qword ptr [rax + 4]; 
0x0000000000102189: add al, 0; add byte ptr [rdx], al; call rax; 
0x00000000001717b5: add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000000c09d5: add al, 0; add rsp, 0x10; mov eax, ebx; pop rbx; ret; 
0x00000000000498a6: add al, 0; add rsp, 0x440; pop rbx; ret; 
0x0000000000096964: add al, 0; lea rax, qword ptr [rdi + 4]; ret; 
0x0000000000108a0a: add al, 0; lea rdx, qword ptr [rip + 0x3f14d]; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000c0b62: add al, 0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000000c0d90: add al, 0; mov qword ptr [rsp], rax; mov eax, 0x22; syscall; 
0x00000000000c0df0: add al, 0; mov qword ptr [rsp], rax; mov eax, 0x23; syscall; 
0x00000000000968c4: add al, 0; mov rax, rdi; ret; 
0x000000000014291d: add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001089c9: add al, 0; ret; 
0x0000000000046e15: add al, 0x10; add bl, dh; ret; 
0x0000000000125d70: add al, 0x10; mov byte ptr [rdi + 7], al; ret; 
0x00000000001455c8: add al, 0x12; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000a1b1d: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000000b0712: add al, 0x16; add rsp, 0x18; ret; 
0x00000000000fd5bb: add al, 0x16; ret; 
0x0000000000137cbb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001378ab: add al, 0x16; sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x00000000001373b7: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000137bc7: add al, 0x16; sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013763b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000013797b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000137c97: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000137d67: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000137b1b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000013730b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000013770b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x0000000000137beb: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x00000000001373db: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000013747d: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001377db: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000137a4b: add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001374a1: add al, 0x16; sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000023169: add al, 0x17; add al, ch; jmp rsp; 
0x0000000000156e0f: add al, 0x17; lea rdx, qword ptr [rip + 0x10468]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001548ba: add al, 0x17; lea rdx, qword ptr [rip + 0x129bd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013fdbf: add al, 0x17; lea rdx, qword ptr [rip + 0x274b8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013e41a: add al, 0x17; lea rdx, qword ptr [rip + 0x28e5d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013ca1f: add al, 0x17; lea rdx, qword ptr [rip + 0x2a858]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013aa5a: add al, 0x17; lea rdx, qword ptr [rip + 0x2c81d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000915af: add al, 0x17; lea rdx, qword ptr [rip + 0xd5cc8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000008eeba: add al, 0x17; lea rdx, qword ptr [rip + 0xd83bd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000097c51: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000000883ba: add al, 0x17; sub eax, ecx; ret; 
0x000000000012a688: add al, 0x1c; add byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000115f28: add al, 0x24; add al, byte ptr [rax]; add byte ptr [rax], al; call 0x1154d0; add rsp, 0x18; ret; 
0x0000000000116855: add al, 0x24; add al, byte ptr [rax]; add byte ptr [rax], al; call 0x1162f0; add rsp, 0x18; ret; 
0x0000000000136635: add al, 0x24; add al, byte ptr [rax]; add byte ptr [rax], al; call 0xe4530; add rsp, 0x18; ret; 
0x000000000012ceda: add al, 0x24; add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, rsp; call rdx; 
0x00000000000bc25b: add al, 0x24; add al, ch; cmp eax, 0x48ffffdd; add esp, 0x18; ret; 
0x00000000000b9f2b: add al, 0x24; add al, ch; mov ebp, 0x48ffffe1; add esp, 0x18; ret; 
0x000000000010a0cd: add al, 0x24; add byte ptr [rax - 0x76b80000], al; ret 0x3875; 
0x00000000000cb168: add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call 0xcb0b0; add rsp, 0x18; ret; 
0x00000000000eb015: add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call 0xeb180; add rsp, 0x18; ret; 
0x0000000000120279: add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x00000000000a3ff2: add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x28]; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a3f64: add al, 0x24; add dword ptr [rax], eax; add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000136655: add al, 0x24; add eax, dword ptr [rax]; add byte ptr [rax], al; call 0xe4530; add rsp, 0x18; ret; 
0x0000000000133a25: add al, 0x24; add rsp, 0x10; pop rbx; ret; 
0x0000000000124f15: add al, 0x24; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000f09f8: add al, 0x24; add rsp, 0x18; ret; 
0x000000000002430d: add al, 0x24; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fd484: add al, 0x24; add rsp, 0x38; ret; 
0x00000000000fd4e5: add al, 0x24; add rsp, 0x40; ret; 
0x00000000000b42dc: add al, 0x24; call 0xb1410; add rsp, 0x18; ret; 
0x00000000001203e9: add al, 0x24; call qword ptr [r11]; mov rdx, qword ptr [rbx + 8]; mov dword ptr [rsp + 0x18], eax; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x0000000000075b29: add al, 0x24; call qword ptr [rbp + 0x18]; 
0x0000000000027632: add al, 0x24; call qword ptr [rbp]; 
0x0000000000027943: add al, 0x24; call qword ptr [rbx]; 
0x00000000000cc9d8: add al, 0x24; call rbx; 
0x000000000012e163: add al, 0x24; mov byte ptr [rbx], al; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000012cf33: add al, 0x24; mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x0000000000116285: add al, 0x24; mov dword ptr [rsp + 4], r11d; call 0x115190; add rsp, 0x88; ret; 
0x00000000000eb6c4: add al, 0x24; mov eax, 0; syscall; 
0x00000000000fafd4: add al, 0x24; mov eax, 0x130; syscall; 
0x00000000000f4924: add al, 0x24; mov eax, 0x1a; syscall; 
0x00000000000c0d94: add al, 0x24; mov eax, 0x22; syscall; 
0x00000000000c0df4: add al, 0x24; mov eax, 0x23; syscall; 
0x00000000000fb174: add al, 0x24; mov eax, 0x2a; syscall; 
0x00000000000fb0e4: add al, 0x24; mov eax, 0x2b; syscall; 
0x00000000000fb4b4: add al, 0x24; mov eax, 0x2e; syscall; 
0x00000000000fb3a4: add al, 0x24; mov eax, 0x2f; syscall; 
0x00000000000f1df4: add al, 0x24; mov eax, 0x4a; syscall; 
0x00000000000f1e84: add al, 0x24; mov eax, 0x4b; syscall; 
0x00000000000ebf74: add al, 0x24; mov eax, 0x55; syscall; 
0x00000000000eb724: add al, 0x24; mov eax, 1; syscall; 
0x00000000000eb4d4: add al, 0x24; mov eax, 2; syscall; 
0x00000000000ebe24: add al, 0x24; mov eax, 3; syscall; 
0x00000000000ecfd4: add al, 0x24; mov eax, 7; syscall; 
0x00000000000fa3c4: add al, 0x24; mov eax, 8; syscall; 
0x000000000012d032: add al, 0x24; mov qword ptr [rbx], rax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x00000000000fad37: add al, 0x24; mov r10, rcx; mov eax, 0x113; syscall; 
0x00000000000fadc7: add al, 0x24; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000f04e7: add al, 0x24; mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000fae87: add al, 0x24; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000cb567: add al, 0x24; mov r10, rcx; mov eax, 0x11; syscall; 
0x00000000000cb5c7: add al, 0x24; mov r10, rcx; mov eax, 0x12; syscall; 
0x00000000000f1c47: add al, 0x24; mov r10, rcx; mov eax, 0x17; syscall; 
0x00000000000fb517: add al, 0x24; mov r10, rcx; mov eax, 0x2c; syscall; 
0x00000000000fb347: add al, 0x24; mov r10, rcx; mov eax, 0x2d; syscall; 
0x00000000000fbc87: add al, 0x24; mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000fbce7: add al, 0x24; mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000faa07: add al, 0x24; mov r10, rcx; mov eax, 0xe8; syscall; 
0x0000000000125f51: add al, 0x24; mov rax, qword ptr [r12 + 8]; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000012db03: add al, 0x24; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x000000000012e0bf: add al, 0x24; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e0bf: add al, 0x24; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; ret; 
0x0000000000121a58: add al, 0x24; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121a58: add al, 0x24; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000135ce0: add al, 0x24; mov rax, qword ptr [rip + 0x288177]; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x00000000000a35c3: add al, 0x24; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000001201fa: add al, 0x24; mov rsi, qword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000012d393: add al, 0x24; mov word ptr [rbx], ax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x0000000000121ac6: add al, 0x24; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000125f94: add al, 0x24; or al, 0; add byte ptr [rax], al; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x00000000001246c3: add al, 0x24; outsb dx, byte ptr [rsi]; add byte ptr [rax], al; add al, ch; imul edi, ebp, 0x89c085ff; ret; 
0x00000000000ebd7c: add al, 0x24; xor eax, eax; call 0xebb40; add rsp, 0x20; pop rbx; ret; 
0x000000000002276a: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000fa373: add al, 0x25; rol byte ptr [rdx], 1; add byte ptr [rax], al; pop rax; pop rdi; call rax; 
0x000000000008ab06: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; jmp rax; 
0x0000000000021f61: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000000bdfd1: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; add rsp, 0x38; ret; 
0x0000000000036b51: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x00000000001120aa: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000004632e: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006f7e3: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c083: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c483: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab6b: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb3f: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007add3: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x0000000000065aa4: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x00000000000641ac: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed30: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fc6: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efbc: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e88: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x000000000018c5f8: add al, 0x2b; clc; dec dword ptr [rdi + rdi + 0x2bd40002]; clc; call rsp; 
0x0000000000117ddf: add al, 0x2b; pop rbx; pop rbp; ret; 
0x00000000000a0cc9: add al, 0x30; in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000a0cdb: add al, 0x30; in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000d9403: add al, 0x31; fild dword ptr [rbp - 0x14ea802e]; imul ecx, dword ptr [rdi], 0x8d00401f; add dword ptr [r8 - 0x7d], ecx; ret; 
0x000000000008a89e: add al, 0x31; ret; 
0x000000000003cd26: add al, 0x31; ror byte ptr [rax - 0x77], 0xf; mov qword ptr [rdi + 8], rdx; ret; 
0x0000000000113741: add al, 0x31; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000a37b1: add al, 0x32; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0xc84f]; ret; 
0x00000000000a37c5: add al, 0x32; add byte ptr [rax], al; add byte ptr [rax], cl; add byte ptr [rax + rcx + 0x48], dh; lea eax, dword ptr [rip + 0xbdacb]; ret; 
0x000000000007e2ba: add al, 0x34; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000008a79a: add al, 0x37; ret; 
0x000000000001f5f3: add al, 0x3a; add byte ptr [rax + 0x5b], bl; pop rbp; ret; 
0x00000000000750ff: add al, 0x3a; ret; 
0x00000000000a2a92: add al, 0x3b; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000001a20ac: add al, 0x3f; add dword ptr [rax], eax; xor dh, bh; int1; jmp qword ptr [rcx]; 
0x00000000000a177d: add al, 0x41; pop rsp; ret; 
0x00000000001a24ac: add al, 0x43; add dword ptr [rax], eax; push rax; sbb edx, esi; call qword ptr [rdx]; 
0x000000000019d278: add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x0000000000096806: add al, 0x48; add edi, 5; mov dword ptr [rdi - 5], eax; mov rax, rdi; ret; 
0x0000000000096820: add al, 0x48; add edi, 6; mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x0000000000096838: add al, 0x48; add edi, 7; mov byte ptr [rdi - 1], r8b; mov dword ptr [rdi - 7], eax; mov rax, rdi; ret; 
0x0000000000118f9c: add al, 0x48; add edx, 1; syscall; 
0x00000000001220ab: add al, 0x48; add esp, 0x10; mov eax, edx; pop rbx; ret; 
0x00000000000e4164: add al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000096975: add al, 0x48; lea eax, dword ptr [rdi + 5]; ret; 
0x0000000000096985: add al, 0x48; lea eax, dword ptr [rdi + 6]; mov byte ptr [rdi + 6], 0; ret; 
0x000000000009f26b: add al, 0x48; lea eax, dword ptr [rdi + 6]; ret; 
0x0000000000096925: add al, 0x48; lea eax, dword ptr [rdi + 7]; ret; 
0x000000000011810e: add al, 0x48; lea eax, dword ptr [rdi + rsi + 8]; ret; 
0x000000000015c879: add al, 0x48; lea eax, dword ptr [rdx + 4]; ret; 
0x000000000015c88b: add al, 0x48; lea eax, dword ptr [rdx + 5]; ret; 
0x00000000000f30ff: add al, 0x48; mov dword ptr [rax + 8], edi; mov qword ptr [rdi], rax; mov qword ptr [rdi + 8], rsi; ret; 
0x0000000000074663: add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x00000000000776d8: add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; ret; 
0x00000000000745be: add al, 0x48; mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x0000000000045f20: add al, 0x48; mov dword ptr [rbp], ebx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000014ccda: add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x00000000000780fc: add al, 0x48; mov dword ptr [rdx + 0x20], eax; mov dword ptr [rcx], edi; mov eax, edi; ret; 
0x00000000000782b2: add al, 0x48; mov dword ptr [rdx + 0x20], esi; mov dword ptr [rcx], eax; ret; 
0x0000000000074454: add al, 0x48; mov dword ptr [rdx], ecx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x00000000000968e5: add al, 0x48; mov eax, edi; mov byte ptr [rdi + 6], 0; ret; 
0x0000000000096885: add al, 0x48; mov eax, edi; ret; 
0x000000000014ccd3: add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000002216a: add al, 0x48; mov edx, dword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x0000000000088b74: add al, 0x48; xor eax, eax; ret; 
0x0000000000021fda: add al, 0x49; lea edi, dword ptr [rsi + rdx]; call rax; 
0x00000000001221d2: add al, 0x49; mov esp, eax; bswap ecx; mov dword ptr [rdx], ecx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x000000000018c7d0: add al, 0x4a; clc; call rsp; 
0x00000000000fa5aa: add al, 0x4c; movsxd rdx, ecx; mov ecx, 0x119; mov eax, ecx; syscall; 
0x00000000000fbac3: add al, 0x4c; movsxd rdx, ecx; syscall; 
0x00000000001079f4: add al, 0x50; shr ax, 0xe; and eax, 1; ret; 
0x000000000002eb98: add al, 0x5d; or al, 0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000018ca54: add al, 0x5f; add al, byte ptr [rax]; ret 0xf880; 
0x000000000015fd88: add al, 0x66; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000b43dd: add al, 0x66; mov dword ptr [rbx + 0xc], eax; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x000000000015c887: add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, qword ptr [rdx + 5]; ret; 
0x0000000000099bac: add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000188cb8: add al, 0x6b; out dx, al; call rsp; 
0x00000000001a4fac: add al, 0x6e; add dword ptr [rax], eax; adc byte ptr [rbp - 0xc], ch; jmp qword ptr [rcx]; 
0x0000000000036c60: add al, 0x72; cmp byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000002f96d: add al, 0x72; or bl, dh; ret; 
0x00000000000cb602: add al, 0x74; adc ecx, dword ptr [rax + 0x63]; sar byte ptr [rax + 0x1c], cl; syscall; 
0x00000000000cb602: add al, 0x74; adc ecx, dword ptr [rax + 0x63]; sar byte ptr [rax + 0x1c], cl; syscall; neg eax; ret; 
0x00000000000dbc59: add al, 0x74; add al, 0xa8; add dword ptr [rbx + rcx*4 - 0xa], esi; ret 0x7408; 
0x00000000000800d9: add al, 0x74; cmp al, 0x89; ret 0xb48b; 
0x0000000000032572: add al, 0x74; fmul qword ptr [rcx + 0x63]; cld; mov eax, 3; syscall; 
0x00000000000d0b7a: add al, 0x74; pop rsi; or byte ptr [r14], r11b; mov eax, 2; ret; 
0x00000000000d2744: add al, 0x75; cmpsb byte ptr [rsi], byte ptr [rdi]; pop rbx; pop rbp; pop r12; ret; 
0x000000000010bfc5: add al, 0x75; cwde; nop dword ptr [rax + rax]; mov rax, rdi; add rsp, 8; ret; 
0x000000000003574f: add al, 0x75; out 0x43, al; mov eax, dword ptr [rdx + rax*4 + 8]; add rax, qword ptr [rdi + 0x20]; pop rbx; ret; 
0x000000000002bdb2: add al, 0x77; adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x0000000000084042: add al, 0x77; or dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000000efcb2: add al, 0x77; or esp, dword ptr [rsi - 0x77]; push rsi; xor ax, ax; ret; 
0x000000000002fe70: add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000002fe50: add al, 0x78; and ax, 0x100; movzx eax, ax; ret; 
0x000000000002fe30: add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000002fdb0: add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x000000000002fdf0: add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000002fd50: add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x000000000002fdd0: add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000002fd90: add al, 0x78; and ax, 0x800; movzx eax, ax; ret; 
0x000000000002fef0: add al, 0x78; and eax, 1; ret; 
0x000000000002fd70: add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x000000000002fe10: add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x000000000002fd30: add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x00000000000d62de: add al, 0x7f; fistp qword ptr [rcx]; ret 0xc189; 
0x000000000006c75c: add al, 0x80; add rax, r8; jmp rax; 
0x0000000000054a57: add al, 0x81; add rcx, rax; jmp rcx; 
0x000000000013915b: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000003cc81: add al, 0x81; mov qword ptr [rsi + 0x10], rcx; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000013aa33: add al, 0x81; sub eax, edx; ret; 
0x0000000000022b6e: add al, 0x82; add rdx, rax; jmp rdx; 
0x000000000008eec7: add al, 0x82; sub eax, ecx; ret; 
0x00000000000af0f1: add al, 0x83; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000034edb: add al, 0x83; add rax, rbx; jmp rax; 
0x00000000000285e1: add al, 0x83; cli; add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4806; 
0x00000000000712a2: add al, 0x83; out 1, al; mov eax, esi; ret; 
0x00000000000d0f9f: add al, 0x83; ret 0x4101; 
0x000000000011bf5b: add al, 0x83; ret; 
0x0000000000037403: add al, 0x83; rol byte ptr [rcx], 0xf7; ret 0; 
0x00000000000a380e: add al, 0x85; ror byte ptr [rcx - 0xc0c8af0], cl; ret; 
0x000000000006c81c: add al, 0x86; add rsi, rax; jmp rsi; 
0x000000000006d0ba: add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000127096: add al, 0x87; add rdi, rax; jmp rdi; 
0x000000000015c876: add al, 0x88; add al, 0x48; lea eax, dword ptr [rdx + 4]; ret; 
0x0000000000099b8b: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000000967f7: add al, 0x89; cld; mov rax, rdi; ret; 
0x000000000009ed44: add al, 0x89; cmovs ecx, dword ptr [rbp - 0x7cb6fbb9]; call 0x7f973557; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x00000000000a0cd5: add al, 0x89; pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000e4bc3: add al, 0x89; ret 0xeeeb; 
0x0000000000048c8a: add al, 0x89; ret; 
0x00000000000a4a37: add al, 0x8b; adc byte ptr [rbp - 0xc0d8a2e], al; ret; 
0x0000000000099b74: add al, 0x8b; add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x000000000018cb10: add al, 0x8b; clc; jmp rsp; 
0x000000000006d361: add al, 0x8b; cmp byte ptr [rax - 0x77], cl; ret 0x778d; 
0x000000000006d22b: add al, 0x8b; cmp byte ptr [rax - 0x77], cl; ret 0xef83; 
0x00000000000a3550: add al, 0x8b; or al, byte ptr [rbp - 0xc0e8a37]; ret; 
0x0000000000053810: add al, 0x8b; or byte ptr [rax - 0x7d], cl; ret 0x8504; 
0x00000000000a1ad9: add al, 0x8d; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x00000000000d7982: add al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000001aa2ad: add al, 0x8e; add ecx, dword ptr [rdi + 0x14b0302]; ret; 
0x000000000004dd95: add al, 0x90; add rax, r12; jmp rax; 
0x000000000004d592: add al, 0x90; add rax, r12; mov byte ptr [rbp - 0x4fa], 0x20; mov dword ptr [rbp - 0x530], 1; jmp rax; 
0x000000000004ecb6: add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004ed65: add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004e97d: add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004d53b: add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004baa2: add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000004e9de: add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x558], 1; jmp rax; 
0x000000000004dec1: add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004ec55: add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004e798: add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004e83b: add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000005f062: add al, 0x90; add rax, r13; jmp rax; 
0x000000000005f140: add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005ef47: add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 0; jmp rax; 
0x000000000005efe5: add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 1; jmp rax; 
0x000000000005f1d4: add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1100], 0x20; mov dword ptr [rbp - 0x10fc], 1; jmp rax; 
0x000000000005f18a: add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005ef9b: add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000005f228: add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f0a2: add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f2dd: add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f0ec: add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1138], 1; mov dword ptr [rbp - 0x1128], 0; jmp rax; 
0x000000000005f327: add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x00000000001a7cac: add al, 0x9b; add dword ptr [rax], eax; jo 0x1a7ce1; cmc; jmp qword ptr [rcx]; 
0x000000000018d248: add al, 0xa0; stc; jmp rsp; 
0x0000000000030792: add al, 0xa2; add rdx, rax; jmp rdx; 
0x00000000000dbc5b: add al, 0xa8; add dword ptr [rbx + rcx*4 - 0xa], esi; ret 0x7408; 
0x000000000002f9a1: add al, 0xb2; mov eax, dword ptr [rdi + rax]; ret; 
0x000000000012e5c3: add al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000300d8: add al, 0xb8; ret; 
0x00000000000a1a69: add al, 0xbe; add rsi, rax; jmp rsi; 
0x00000000001211d9: add al, 0xc2; jmp rax; 
0x0000000000054f2f: add al, 0xc6; add al, 6; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x00000000000bcb33: add al, 0xd0; add rsp, 0x10; pop rbx; ret; 
0x000000000004f0bf: add al, 0xd1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000001653a4: add al, 0xd4; and eax, 0; add bl, dh; ret; 
0x00000000000375f7: add al, 0xd7; xor eax, eax; ret; 
0x000000000012260a: add al, 0xd; add byte ptr [rax], al; add byte ptr [rax + 0x289c80f], al; mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x0000000000031af8: add al, 0xe2; cmp byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001ac4ac: add al, 0xe3; add dword ptr [rax], eax; cmp ch, 0xf5; call qword ptr [rax]; 
0x00000000001a8fa4: add al, 0xe3; hlt; jmp qword ptr [rdx]; 
0x00000000001ac5ac: add al, 0xe4; add dword ptr [rax], eax; add ch, bh; cmc; jmp rsp; 
0x000000000007d75a: add al, 0xe8; adc byte ptr [rcx + 7], dh; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000007d873: add al, 0xe8; imul dword ptr [rdi + 7]; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ae4a1: add al, 0xe8; jns 0xae4b9; clc; inc dword ptr [rbp + 0x79c789c0]; ret; 
0x00000000000aebc7: add al, 0xe8; ret; 
0x0000000000028f6c: add al, 0xe9; mov esp, 0x89fffffc; ret 0xe283; 
0x0000000000022754: add al, 0xe9; paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x00000000000e4364: add al, 0xeb; nop; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000e42d7: add al, 0xeb; ret 0xf66; 
0x00000000001a2231: add al, 0xf2; call rdi; 
0x000000000014d043: add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000005dc9b: add al, 0xf3; ret; 
0x0000000000179145: add al, 0xf4; call qword ptr [rdi]; 
0x0000000000179141: add al, 0xf4; dec edx; add al, 0xf4; call qword ptr [rdi]; 
0x000000000017913d: add al, 0xf4; push rsi; add al, 0xf4; dec edx; add al, 0xf4; call qword ptr [rdi]; 
0x0000000000037671: add al, 0xf6; ret 0x7402; 
0x000000000008c639: add al, 0xf6; ret 0x7408; 
0x000000000018b8e9: add al, 0xf7; jmp rsp; 
0x000000000010be1b: add al, 0xf8; call qword ptr [rax - 0x18]; 
0x000000000010be1b: add al, 0xf8; call qword ptr [rax - 0x18]; pop rsp; fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x000000000018c301: add al, 0xf8; dec esp; sub eax, 0x4340002; clc; jmp rsp; 
0x000000000018c309: add al, 0xf8; jmp rsp; 
0x000000000002fd55: add al, 0xf; mov bh, 0xc0; ret; 
0x0000000000097a61: add al, 0xf; mov dh, 0x46; dec dword ptr [rax - 0x7d]; ret; 
0x000000000013726d: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000013cd05: add al, 0xf; sub rax, rdx; ret; 
0x0000000000133412: add al, 0xf; test byte ptr [rcx - 0x7d000000], bl; ret 0x8380; 
0x00000000000e6464: add al, 0xf; test byte ptr [rip - 0x7a000001], ah; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x00000000000a2a95: add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000a3687: add al, 0xf; test dword ptr [rdx - 0x7b000000], eax; sal byte ptr [rax + rbx + 0x49], 0x83; ret 0x4908; 
0x000000000015e70f: add al, 0xf; test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000ee384: add al, 0xf; test dword ptr [rip - 0x76ffffff], edi; sal dword ptr [rcx], 1; rol cl, 0xe9; add esi, esi; ret 0xf304; 
0x000000000009d68b: add al, 0xf; test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x00000000000dc8e9: add al, 0xf; xchg dword ptr [rax - 0x76fffff4], esi; ret 0x8d48; 
0x00000000000dfbc6: add al, 0xf; xchg eax, ebp; ret 0x2041; 
0x00000000000af502: add al, 0xf; xchg eax, ebp; ret 0xc0e9; 
0x00000000000af356: add al, 0xf; xchg eax, ebp; ret 0xf883; 
0x00000000000f212a: add al, 0xf; xchg eax, ebp; sal bh, 0xd8; add rsp, 0x10; pop rbx; ret; 
0x0000000000110ced: add al, 0xf; xchg eax, esi; ret; 
0x00000000001b51d9: add al, 0xfb; jmp qword ptr [rdx]; 
0x00000000001867f1: add al, 0xfc; call qword ptr [rax]; 
0x0000000000186831: add al, 0xfc; call rax; 
0x00000000001868d5: add al, 0xfc; inc dword ptr [rax + 0x60fffc06]; or ah, bh; call qword ptr [rax + 0xa]; 
0x00000000001868d5: add al, 0xfc; inc dword ptr [rax + 0x60fffc06]; or ah, bh; call qword ptr [rax + 0xa]; cld; jmp qword ptr [rax]; 
0x00000000001867d1: add al, 0xfc; jmp qword ptr [rax]; 
0x000000000007084b: add al, 0xff; or dh, byte ptr [rbp + 0x23]; mov eax, r8d; pop rbx; ret; 
0x000000000007119a: add al, 0xff; or dh, byte ptr [rbp + 0x3f]; ret; 
0x0000000000071294: add al, 0xff; or dh, byte ptr [rbp + 0x43]; mov eax, esi; ret; 
0x000000000007205f: add al, 0xff; or dh, byte ptr [rbp + 0x60]; pop rbx; ret; 
0x00000000000704ff: add al, 0xff; or dh, byte ptr [rbp + 0x63]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000123bca: add al, 1; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000001147db: add al, 1; add byte ptr [rax], al; cmove eax, edx; ret; 
0x00000000000a2ac8: add al, 1; add byte ptr [rax], al; ret; 
0x00000000000ec84c: add al, 1; add byte ptr [rax], al; syscall; 
0x000000000018df98: add al, 1; cld; call rsp; 
0x000000000006de83: add al, 1; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x000000000005dc3a: add al, 1; ret; 
0x000000000005dcba: add al, 1; xor eax, eax; ret; 
0x00000000000733d6: add al, 2; add byte ptr [rbx + 0x48], bl; mov eax, ebp; pop rbp; pop r12; ret; 
0x00000000000d0b63: add al, 2; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000015e798: add al, 3; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000160f67: add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000146336: add al, 4; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018c300: add al, 4; clc; dec esp; sub eax, 0x4340002; clc; jmp rsp; 
0x00000000000004b7: add al, 4; ret 0x6080; 
0x0000000000054f31: add al, 6; add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x000000000009d7d8: add al, 7; add byte ptr [rax], al; ret; 
0x0000000000056dc5: add al, 7; add dword ptr [rax - 0x77], ecx; dec byte ptr [rax - 0x7d]; ret 0xf01; 
0x0000000000086d8d: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000002f9a4: add al, 7; ret; 
0x0000000000072ed3: add al, 8; add byte ptr [rax], al; ret; 
0x0000000000097dbf: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000001b18bf: add al, ah; add dh, bh; call qword ptr [rdi]; 
0x00000000001b18df: add al, ah; add dh, bh; jmp qword ptr [rcx]; 
0x00000000001b182f: add al, ah; add edi, esi; call qword ptr [rdi]; 
0x00000000001b04df: add al, ah; clc; jmp qword ptr [rax]; 
0x00000000001a6daf: add al, ah; cld; hlt; call qword ptr [rcx]; 
0x000000000019d0ff: add al, ah; cld; stc; call qword ptr [rax]; 
0x00000000001a7c1f: add al, ah; cmc; jmp qword ptr [rcx]; 
0x00000000001b5b4f: add al, ah; fcomi st(7); jmp qword ptr [rbx]; 
0x00000000001a6a6f: add al, ah; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001aac5f: add al, ah; fdiv st(5); call qword ptr [rax + 2]; 
0x000000000018f1bf: add al, ah; fsubr st(1); call qword ptr [rdx]; 
0x00000000001a4acf: add al, ah; hlt; call qword ptr [rbp + 6]; 
0x00000000001a1dff: add al, ah; int1; jmp qword ptr [rdx]; 
0x000000000019215f: add al, ah; mov al, 0xea; call qword ptr [rsi]; 
0x000000000019edcf: add al, ah; mov bl, 0xf0; call qword ptr [rdi + 2]; 
0x00000000001b402f: add al, ah; mov dh, bh; call qword ptr [rdx]; 
0x00000000001af73f: add al, ah; mov esi, esi; call qword ptr [rdi + 5]; 
0x000000000019d2ff: add al, ah; out dx, eax; call qword ptr [rsi + 1]; 
0x000000000001b127: add al, ah; ret 0x3b; 
0x000000000001b40f: add al, ah; ret; 
0x00000000001b207f: add al, ah; sbb edi, esi; call qword ptr [rcx]; 
0x00000000001af43f: add al, ah; xchg dh, dh; jmp rdx; 
0x0000000000194eff: add al, ah; xchg eax, ebp; in eax, dx; call qword ptr [rax]; 
0x00000000001a752f: add al, al; and ch, dh; jmp qword ptr [rsi]; 
0x00000000001add3f: add al, al; and dh, dh; call rdi; 
0x000000000010c57d: add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000001a830f: add al, al; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001a4ccf: add al, al; hlt; jmp qword ptr [rdi]; 
0x00000000001a1c0f: add al, al; in al, dx; int1; jmp qword ptr [rcx]; 
0x00000000001afbbf: add al, al; mov bl, 0xf6; call qword ptr [rcx]; 
0x000000000019221f: add al, al; mov cl, 0xea; call qword ptr [rdx]; 
0x0000000000008957: add al, al; or byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x00000000001abb8f: add al, al; out dx, eax; cmc; call qword ptr [rax]; 
0x000000000019d5ff: add al, al; out dx, eax; jmp qword ptr [rcx]; 
0x000000000001b0c7: add al, al; ret 0x3b; 
0x000000000001b3af: add al, al; ret; 
0x00000000001aa8cf: add al, al; salc; cmc; jmp qword ptr [rsi]; 
0x000000000019fb4f: add al, al; sbb cl, dh; jmp qword ptr [rcx]; 
0x000000000010c5fb: add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000001ae57f: add al, al; sub al, 0xf6; jmp qword ptr [rdi]; 
0x0000000000193bcf: add al, al; xchg eax, esp; in al, dx; jmp qword ptr [rbx]; 
0x00000000001a7d9f: add al, al; xor ch, dh; jmp qword ptr [rax]; 
0x00000000001a7eef: add al, al; xor dh, ch; jmp qword ptr [rcx]; 
0x0000000000198e37: add al, bh; cmc; in eax, dx; jmp qword ptr [rbx]; 
0x00000000001a7c37: add al, bh; cmc; jmp qword ptr [rcx]; 
0x00000000001aacf7: add al, bh; fcomi st(5); call qword ptr [rax]; 
0x000000000019eff7: add al, bh; fcompi st(0); jmp rax; 
0x00000000001a6a87: add al, bh; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001afd77: add al, bh; mov dh, 0xf6; call qword ptr [rdi]; 
0x00000000001b44d7: add al, bh; nop; idiv edi; ret; 
0x000000000019ba77: add al, bh; out dx, al; call rsp; 
0x000000000001b16f: add al, bh; ret 0x3b; 
0x0000000000199f37: add al, bh; sbb ebp, esi; jmp qword ptr [rbx]; 
0x000000000019a457: add al, bh; sub ch, dh; call qword ptr [rsi]; 
0x00000000001a7ff7: add al, bh; xor al, 0xf5; jmp qword ptr [rax]; 
0x000000000019d117: add al, bl; cld; stc; call qword ptr [rsi + 0x16]; 
0x00000000001a8327: add al, bl; cmp esi, ebp; jmp rbx; 
0x00000000001b1517: add al, bl; div dh; call qword ptr [rsi]; 
0x00000000001b5d67: add al, bl; fdivrp st(7); call rdi; 
0x00000000001a1c27: add al, bl; in al, dx; int1; call qword ptr [rbx]; 
0x00000000001ab4a7: add al, bl; in eax, 0xf5; call qword ptr [rax]; 
0x00000000001a9a77: add al, bl; jo 0x1a9a70; jmp qword ptr [rcx]; 
0x000000000019dee7: add al, bl; lahf; out dx, eax; call qword ptr [rdi]; 
0x00000000001af577: add al, bl; mov esi, esi; call qword ptr [rbx]; 
0x00000000001a4bc7: add al, bl; movsxd rsi, esp; jmp qword ptr [rcx]; 
0x00000000001a9767: add al, bl; outsb dx, byte ptr [rsi]; cmc; jmp qword ptr [rdi + 1]; 
0x000000000001b10f: add al, bl; ret 0x3b; 
0x00000000001affa7: add al, bl; ret 0xfff6; 
0x000000000001b3f7: add al, bl; ret; 
0x00000000001aa8e7: add al, bl; salc; cmc; jmp qword ptr [rsi]; 
0x000000000019fb67: add al, bl; sbb cl, dh; jmp qword ptr [rax + 1]; 
0x0000000000195797: add al, bl; wait; in eax, dx; call qword ptr [rdi + 0x4000001]; 
0x00000000001a7f07: add al, bl; xor dh, ch; jmp qword ptr [rcx]; 
0x000000000015fc7a: add al, byte ptr [eax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c7cd: add al, byte ptr [r8]; add al, 0x4a; clc; call rsp; 
0x000000000013fb82: add al, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001b2b55: add al, byte ptr [r8]; cmp byte ptr [rbx - 9], cl; call qword ptr [rbx]; 
0x00000000001b2ac5: add al, byte ptr [r8]; or byte ptr [rbx - 9], cl; jmp qword ptr [rax]; 
0x0000000000086cf1: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x0000000000146524: add al, byte ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001987f9: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xedbc800d1cffedbd]; jmp qword ptr [rdx]; 
0x00000000001ab589: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xf55cf40d1cfff55d]; jmp qword ptr [rdx]; 
0x00000000001a9359: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf4ea900d1cfff4eb], al; jmp qword ptr [rdx]; 
0x00000000001ad5a9: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf582030d1cfff583], al; jmp qword ptr [rdx]; 
0x00000000001a9739: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs dword ptr [0xf4ec060d1cfff4ec], eax; jmp qword ptr [rdx]; 
0x00000000001995c1: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs eax, dword ptr [0xeddba10d1cffedfb]; jmp qword ptr [rdx]; 
0x00000000001998d9: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xedf8; 
0x000000000019a6d1: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xee68; 
0x00000000001a0d99: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf17f; 
0x00000000001ab299: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf55b; 
0x00000000001acb61: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf57a; 
0x00000000001b2571: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf683; 
0x00000000001ab7a9: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret; 
0x00000000001969c9: add al, byte ptr [rax - 0x7ff1bbfb]; add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; xchg byte ptr [rbp + 0xd1cffed], al; ret 0xed84; 
0x000000000018d7c6: add al, byte ptr [rax]; adc al, 0x45; cli; dec esp; ret; 
0x000000000018d946: add al, byte ptr [rax]; adc al, 0x68; cli; call rsp; 
0x000000000018d3ce: add al, byte ptr [rax]; adc al, 0xcc; stc; inc dword ptr [rax + rbp*4 - 0x326bfffe]; stc; call rsp; 
0x000000000018dcf6: add al, byte ptr [rax]; adc al, 0xd6; cli; jmp rsp; 
0x000000000018c376: add al, byte ptr [rax]; adc al, 7; clc; ljmp ptr [rax + rsi + 0x8640002]; clc; jmp rsp; 
0x000000000018d60e: add al, byte ptr [rax]; adc byte ptr [rdx + rdi*8], ah; jmp rsp; 
0x00000000001b643e: add al, byte ptr [rax]; adc dl, dh; cli; call rcx; 
0x000000000018c5f6: add al, byte ptr [rax]; add al, 0x2b; clc; dec dword ptr [rdi + rdi + 0x2bd40002]; clc; call rsp; 
0x000000000018c7ce: add al, byte ptr [rax]; add al, 0x4a; clc; call rsp; 
0x000000000018cb0e: add al, byte ptr [rax]; add al, 0x8b; clc; jmp rsp; 
0x000000000018d246: add al, byte ptr [rax]; add al, 0xa0; stc; jmp rsp; 
0x0000000000164dff: add al, byte ptr [rax]; add al, ch; pop rcx; scasb al, byte ptr [rdi]; in al, dx; jmp qword ptr [rsi + 0xf]; 
0x000000000007f5b5: add al, byte ptr [rax]; add al, ch; ret; 
0x00000000000c1cf7: add al, byte ptr [rax]; add bl, al; nop dword ptr [rax + rax]; mov eax, 0x6e; syscall; 
0x000000000002fea7: add al, byte ptr [rax]; add bl, dh; ret; 
0x0000000000028e94: add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000c114a: add al, byte ptr [rax]; add byte ptr [rax + 0x3a], bh; syscall; 
0x00000000000fa376: add al, byte ptr [rax]; add byte ptr [rax + 0x5f], bl; call rax; 
0x000000000008bb93: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000042937: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret; 
0x000000000004c11f: add al, byte ptr [rax]; add byte ptr [rax - 0x4fa43], al; call qword ptr [rbx + 0xf]; 
0x000000000004b6ee: add al, byte ptr [rax]; add byte ptr [rax - 0x50743], al; call qword ptr [rbx + 0xf]; 
0x000000000005e536: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x118c40; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000006d289: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x10ac1d; movsxd rdx, dword ptr [rcx + rdx*4]; add rcx, rdx; jmp rcx; 
0x0000000000034ecf: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; sbb eax, 0x13dadf; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000000d7dd6: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x000000000007c8cc: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; adc eax, 0x3440f2; add dword ptr [rip + 0x3440e7], 1; ret; 
0x00000000000857b2: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx + rcx*4 - 6]; call rax; 
0x00000000000e6a91: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x4c6; 
0x000000000008b85e: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000000b3c87: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000015e7cb: add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000f2aaa: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x3c01; 
0x0000000000137bcd: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a7f1: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000137bf1: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000035a5f: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x00000000000347e6: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000039d11: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000133adf: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000011b140: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000131c37: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0xa74fff8], al; movsxd rdi, eax; mov eax, 3; syscall; 
0x00000000001245ff: add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0x10; jmp rcx; 
0x0000000000127ecf: add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0x58; jmp rcx; 
0x000000000012761f: add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0x68; jmp rcx; 
0x0000000000123a42: add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0xc8; jmp rcx; 
0x0000000000115f2a: add al, byte ptr [rax]; add byte ptr [rax], al; call 0x1154d0; add rsp, 0x18; ret; 
0x0000000000116857: add al, byte ptr [rax]; add byte ptr [rax], al; call 0x1162f0; add rsp, 0x18; ret; 
0x0000000000136637: add al, byte ptr [rax]; add byte ptr [rax], al; call 0xe4530; add rsp, 0x18; ret; 
0x0000000000132ed2: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000f5d25: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 1; mov rdi, r13; call rbx; 
0x00000000000f5e4a: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 2; mov rdi, r13; call rbx; 
0x000000000011fed8: add al, byte ptr [rax]; add byte ptr [rax], al; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x48], 0; mov rdi, r13; call qword ptr [rax]; 
0x000000000012abbd: add al, byte ptr [rax]; add byte ptr [rax], al; mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x000000000004713b: add al, byte ptr [rax]; add byte ptr [rax], al; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000079e10: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x00000000000f60dc: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x00000000000f5e4f: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x00000000000f5d1b: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x00000000000f5c93: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000079d5f: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000012cedc: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, rsp; call rdx; 
0x000000000012cedc: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, rsp; call rdx; add rsp, 0x38; ret; 
0x000000000012b43a: add al, byte ptr [rax]; add byte ptr [rax], al; mov rsi, r13; mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x00000000000fc725: add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000a2ef3: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000eb4ba: add al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000bcde7: add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000001087de: add al, byte ptr [rax]; add byte ptr [rax], al; xor esi, esi; mov eax, ecx; movsxd rdi, r8d; syscall; 
0x000000000005d54c: add al, byte ptr [rax]; add byte ptr [rbp + 0x480d75c0], al; mov eax, ebx; pop rbx; ret; 
0x0000000000133555: add al, byte ptr [rax]; add byte ptr [rbp + 0x482c78c0], al; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000105dfb: add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008cc3b: add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 0x79]; ret; 
0x0000000000086f8f: add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 5]; ret; 
0x000000000008cc9e: add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 6]; ret; 
0x0000000000088e0b: add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 9]; ret; 
0x000000000008be65: add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0x1f]; ret; 
0x00000000000a37b5: add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0xc84f]; ret; 
0x00000000000a2c05: add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0xd48f]; ret; 
0x00000000000e2d14: add al, byte ptr [rax]; add byte ptr [rbp - 0x49f0be40], al; test dword ptr [rax + 0xf000000], esp; xchg eax, ebp; ret 0xe2c1; 
0x0000000000095356: add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x894c; 
0x00000000000800d1: add al, byte ptr [rax]; add byte ptr [rbp - 0x77cfdb9], cl; add al, 0x74; cmp al, 0x89; ret 0xb48b; 
0x00000000001b3c2e: add al, byte ptr [rax]; add byte ptr [rbp - 9], bh; call qword ptr [rbp + 1]; 
0x000000000011b078: add al, byte ptr [rax]; add byte ptr [rbx + 0x1074ffff], al; mov eax, r12d; syscall; 
0x000000000011afe1: add al, byte ptr [rax]; add byte ptr [rbx + 0x1174ffff], al; mov eax, 3; syscall; 
0x000000000011b113: add al, byte ptr [rax]; add byte ptr [rbx + 0x1b74fffa], al; movsxd rdi, edx; mov eax, r12d; syscall; 
0x0000000000165d0c: add al, byte ptr [rax]; add byte ptr [rbx + 0x1b74fffa], al; movsxd rdi, edx; mov eax, r13d; syscall; 
0x000000000007235f: add al, byte ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000038109: add al, byte ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000030f93: add al, byte ptr [rax]; add byte ptr [rbx - 0x7af0fa08], al; ret 0xfffa; 
0x0000000000163774: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000000fa36e: add al, byte ptr [rax]; add byte ptr [rcx + rcx*4 + 4], ah; and eax, 0x2d0; pop rax; pop rdi; call rax; 
0x00000000000e344c: add al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rax + 0x63], cl; ret; 
0x00000000000a7828: add al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000c0f00: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret; 
0x00000000000c0ed3: add al, byte ptr [rax]; add byte ptr [rcx], dh; idiv byte ptr [rdi + 0x1200011]; mov eax, 0x38; syscall; 
0x0000000000088dbf: add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x10f35]; ret; 
0x0000000000086b3f: add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x11595]; ret; 
0x0000000000091650: add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb1174]; ret; 
0x000000000008a69f: add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xcdf55]; ret; 
0x000000000008cacf: add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xce6a5]; ret; 
0x000000000008841f: add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xcea25]; ret; 
0x000000000008cbef: add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xcfd95]; ret; 
0x000000000018dc6e: add al, byte ptr [rax]; add ecx, eax; cli; call rsp; 
0x000000000005d5b0: add al, byte ptr [rax]; add rsp, 0x1000; pop rbx; ret; 
0x000000000012a086: add al, byte ptr [rax]; add rsp, 0x100; pop rbx; pop rbp; pop r12; ret; 
0x000000000018d7ce: add al, byte ptr [rax]; and al, 0x45; cli; jmp rsp; 
0x000000000018d066: add al, byte ptr [rax]; and al, 0x69; stc; call rsp; 
0x000000000018d076: add al, byte ptr [rax]; and al, 0x6a; stc; jmp rsp; 
0x000000000018d9fe: add al, byte ptr [rax]; and al, 0x6e; cli; jmp rsp; 
0x000000000018dbbe: add al, byte ptr [rax]; and al, 0xbb; cli; jmp rsp; 
0x000000000018dcee: add al, byte ptr [rax]; and al, 0xd5; cli; push qword ptr [rbp - 0x29ebfffe]; cli; jmp rsp; 
0x000000000018e13e: add al, byte ptr [rax]; and al, 0xdb; std; jmp rsp; 
0x000000000018d50e: add al, byte ptr [rax]; and al, 0xfc; stc; jmp rsp; 
0x00000000001b0716: add al, byte ptr [rax]; clc; jmp qword ptr [rbx]; 
0x000000000018c6de: add al, byte ptr [rax]; clc; jmp rsp; 
0x00000000001afd76: add al, byte ptr [rax]; clc; mov dh, 0xf6; call qword ptr [rdi]; 
0x00000000001b44d6: add al, byte ptr [rax]; clc; nop; idiv edi; ret; 
0x000000000018d7ae: add al, byte ptr [rax]; cli; call rsp; 
0x000000000018d7ae: add al, byte ptr [rax]; cli; call rsp; ret 2; 
0x000000000018d666: add al, byte ptr [rax]; cli; jmp rsp; 
0x00000000001b3a16: add al, byte ptr [rax]; cmp byte ptr [rax - 9], bh; call qword ptr [rax]; 
0x00000000001b2b56: add al, byte ptr [rax]; cmp byte ptr [rbx - 9], cl; call qword ptr [rbx]; 
0x00000000001b1d76: add al, byte ptr [rax]; cmp byte ptr [rdi + rsi*8], cl; call qword ptr [rbx]; 
0x00000000001aeab6: add al, byte ptr [rax]; cmp byte ptr [rdx - 0xa], bl; call qword ptr [rdi]; 
0x00000000001b4f56: add al, byte ptr [rax]; cmp byte ptr [rsi], al; sti; jmp qword ptr [rdx]; 
0x000000000018c92e: add al, byte ptr [rax]; cwde; push -8; jmp rsp; 
0x00000000001b1586: add al, byte ptr [rax]; div rsi; call qword ptr [rbx]; 
0x00000000001b4e86: add al, byte ptr [rax]; fadd dword ptr [rsi]; sti; jmp qword ptr [rdx]; 
0x000000000018ca0e: add al, byte ptr [rax]; fidivr dword ptr [rax - 8]; dec dword ptr [rsp + rbx*2 + 0x78f90002]; clc; call rsp; 
0x00000000001b3656: add al, byte ptr [rax]; fsubr dword ptr [rdi - 9]; jmp qword ptr [rbp]; 
0x000000000018d7a6: add al, byte ptr [rax]; hlt; cli; inc dword ptr [rdx + rax*8 + 0x41640002]; cli; call rsp; 
0x000000000018d326: add al, byte ptr [rax]; hlt; mov al, 0xf9; jmp rsp; 
0x000000000018cd56: add al, byte ptr [rax]; idiv al; jmp rsp; 
0x000000000018c616: add al, byte ptr [rax]; in al, 0x2f; clc; call qword ptr [rax + rax*2 + 0x30840002]; clc; call rsp; 
0x000000000018d0be: add al, byte ptr [rax]; in al, 0x71; stc; jmp rsp; 
0x000000000018db96: add al, byte ptr [rax]; in al, 0xb7; cli; call rsp; 
0x000000000018dcde: add al, byte ptr [rax]; in al, 0xd4; cli; jmp rsp; 
0x000000000018c34e: add al, byte ptr [rax]; in al, 5; clc; call rsp; 
0x000000000018d606: add al, byte ptr [rax]; int1; and edi, edx; lcall ptr [rbp + rsi*4 + 0x24100002]; cli; jmp rsp; 
0x000000000018c926: add al, byte ptr [rax]; jns 0x18c994; clc; lcall ptr [rbp + rdx*2 + 0x6a980002]; clc; jmp rsp; 
0x00000000001b0a0e: add al, byte ptr [rax]; jo 0x1b0a76; clc; jmp qword ptr [rbx]; 
0x0000000000096945: add al, byte ptr [rax]; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000018cb06: add al, byte ptr [rax]; loope 0x18ca94; clc; ljmp ptr [rsp - 0x74fbfffe]; clc; jmp rsp; 
0x000000000018d676: add al, byte ptr [rax]; mov ah, 0x2a; cli; call qword ptr [rbx + rdi*4 + 0x2bc40002]; cli; jmp rsp; 
0x000000000018d136: add al, byte ptr [rax]; mov ah, 0x7f; stc; call rsp; 
0x000000000018d17e: add al, byte ptr [rax]; mov ah, 0x87; stc; jmp rsp; 
0x000000000018cc26: add al, byte ptr [rax]; mov ah, 0xa6; clc; jmp rsp; 
0x000000000018dd4e: add al, byte ptr [rax]; mov ah, 0xdb; cli; jmp rsp; 
0x000000000018d31e: add al, byte ptr [rax]; mov al, 0xf9; ljmp ptr [rbx - 0x4f0bfffe]; stc; jmp rsp; 
0x000000000018db6e: add al, byte ptr [rax]; mov bl, 0xfa; call rsp; 
0x00000000001b3436: add al, byte ptr [rax]; mov byte ptr [rbp - 9], ah; jmp qword ptr [rbx]; 
0x00000000001b3466: add al, byte ptr [rax]; mov byte ptr [rsi - 9], ah; call rdi; 
0x000000000018d416: add al, byte ptr [rax]; mov dl, 0xd4; stc; lcall ptr [rdx + rbp*4 - 0x2b2efffe]; stc; jmp rsp; 
0x0000000000139158: add al, byte ptr [rax]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013aa61: add al, byte ptr [rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013aa2d: add al, byte ptr [rax]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000968a5: add al, byte ptr [rax]; mov rax, rdi; ret; 
0x000000000018cdf6: add al, byte ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; add ecx, edi; jmp rsp; 
0x000000000018d06e: add al, byte ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; imul edi, ecx, 0x2905cff; add byte ptr [rdx + rbp*2], ah; stc; jmp rsp; 
0x000000000018da3e: add al, byte ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; jo 0x18da3d; jmp rsp; 
0x000000000018c4c6: add al, byte ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; sbb al, 0xf8; jmp rsp; 
0x000000000015fc7b: add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000bce23: add al, byte ptr [rax]; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x301039]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000018c37e: add al, byte ptr [rax]; or al, bh; jmp rsp; 
0x00000000001b2ac6: add al, byte ptr [rax]; or byte ptr [rbx - 9], cl; jmp qword ptr [rax]; 
0x00000000001b1d06: add al, byte ptr [rax]; or byte ptr [rdi + rsi*8], cl; call qword ptr [rsi]; 
0x000000000018cd0e: add al, byte ptr [rax]; out 0xf8, eax; call rsp; 
0x0000000000111063: add al, byte ptr [rax]; pop r12; ret; 
0x000000000018c876: add al, byte ptr [rax]; pop rax; clc; call rsp; 
0x00000000001b0a96: add al, byte ptr [rax]; pop rax; clc; jmp qword ptr [rbx]; 
0x00000000001b0286: add al, byte ptr [rax]; pop rax; push rcx; sti; call rsi; 
0x00000000000733d7: add al, byte ptr [rax]; pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x00000000000f7ec2: add al, byte ptr [rax]; pop rbx; ret; 
0x00000000001b227e: add al, byte ptr [rax]; push rax; and esi, edi; call qword ptr [rdx]; 
0x000000000018c83e: add al, byte ptr [rax]; push rax; clc; call rsp; 
0x00000000001b5a6e: add al, byte ptr [rax]; push rax; fcomi st(7); call qword ptr [rbx]; 
0x00000000001afd0e: add al, byte ptr [rax]; push rax; mov ch, 0xf6; call qword ptr [rax]; 
0x000000000018c236: add al, byte ptr [rax]; push rdi; jmp rsp; 
0x000000000018ce9e: add al, byte ptr [rax]; push rsp; adc edi, ecx; call rsp; 
0x000000000018d65e: add al, byte ptr [rax]; push rsp; and eax, 0xba9cfffa; add al, byte ptr [rax]; cli; jmp rsp; 
0x000000000018cdc6: add al, byte ptr [rax]; push rsp; cld; clc; jmp rsp; 
0x000000000018c5d6: add al, byte ptr [rax]; push rsp; sub al, bh; jmp rsp; 
0x000000000018d41e: add al, byte ptr [rax]; rcl esp, 1; stc; jmp rsp; 
0x000000000018c48e: add al, byte ptr [rax]; ret 0xf81a; 
0x000000000018ca56: add al, byte ptr [rax]; ret 0xf880; 
0x000000000018cafe: add al, byte ptr [rax]; ret 0xf88a; 
0x00000000001b2a4e: add al, byte ptr [rax]; ror byte ptr [rax - 9], 1; jmp qword ptr [rsi]; 
0x00000000001b634e: add al, byte ptr [rax]; sal ch, 0xf7; call rdx; 
0x00000000001b51d6: add al, byte ptr [rax]; sbb byte ptr [rbx + rdi*8], al; jmp qword ptr [rdx]; 
0x00000000001b0e8e: add al, byte ptr [rax]; sbb dh, 0xf6; jmp qword ptr [rcx]; 
0x000000000018c86e: add al, byte ptr [rax]; sbb eax, 0x4cfff858; add r8b, byte ptr [r8]; pop rax; clc; call rsp; 
0x000000000018cd3e: add al, byte ptr [rax]; test al, dh; clc; call rsp; 
0x000000000018c61e: add al, byte ptr [rax]; test byte ptr [rax], dh; clc; call rsp; 
0x000000000018be3e: add al, byte ptr [rax]; test byte ptr [rbx - 9], ah; jmp rsp; 
0x000000000018caf6: add al, byte ptr [rax]; test byte ptr [rcx + 0x64f4fff8], cl; add al, byte ptr [rax]; ret 0xf88a; 
0x000000000018bd56: add al, byte ptr [rax]; test byte ptr [rcx - 9], cl; jmp rsp; 
0x00000000001b3f2e: add al, byte ptr [rax]; test dil, sil; jmp qword ptr [rdx + 2]; 
0x000000000018c43e: add al, byte ptr [rax]; xchg eax, esp; adc al, 0xf8; call rsp; 
0x000000000018d3d6: add al, byte ptr [rax]; xchg eax, esp; int 0xf9; call rsp; 
0x000000000018db8e: add al, byte ptr [rax]; xchg eax, esp; mov bh, 0xfa; ljmp ptr [rsp + rbx*8 - 0x481bfffe]; cli; call rsp; 
0x000000000018cd06: add al, byte ptr [rax]; xchg eax, esp; out 0xf8, al; dec dword ptr [rbx + rsi*2 - 0x18bbfffe]; clc; call rsp; 
0x000000000018d176: add al, byte ptr [rax]; xchg ecx, r15d; ljmp ptr [rax + rbx*4 - 0x784bfffe]; stc; jmp rsp; 
0x000000000018ceee: add al, byte ptr [rax]; xor al, 0x2a; stc; jmp rsp; 
0x000000000018cb86: add al, byte ptr [rax]; xor al, 0x96; clc; call rsp; 
0x000000000018db0e: add al, byte ptr [rax]; xor al, 0xa9; cli; jmp rsp; 
0x000000000018ddd6: add al, byte ptr [rax]; xor al, 0xe4; cli; call rsp; 
0x000000000018c286: add al, byte ptr [rax]; xor al, 1; clc; call rsp; 
0x000000000018c306: add al, byte ptr [rax]; xor al, 4; clc; jmp rsp; 
0x00000000001b079e: add al, byte ptr [rax]; xor byte ptr [rbp - 8], ah; jmp qword ptr [rbx]; 
0x00000000000640f6: add al, byte ptr [rbp + 0x481b7eed]; mov eax, dword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000127752: add al, byte ptr [rbx - 0x37f0fe18]; mov dword ptr [rcx + 0x48], eax; mov eax, 1; ret; 
0x00000000000e3295: add al, byte ptr [rbx - 0x7699fd12]; push rdi; inc byte ptr [rax - 0xa]; mov dword ptr [rdi + rcx], 0xffff0d84; jmp qword ptr [rsi + 0xf]; 
0x00000000001080ae: add al, byte ptr [rcx + 0x39]; ret; 
0x000000000011d51e: add al, byte ptr [rcx + 0x5c]; sub eax, 1; pop r13; ret; 
0x0000000000197870: add al, byte ptr [rcx + 0xa]; ret; 
0x0000000000104bd2: add al, byte ptr [rcx - 1]; push rbp; sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000114832: add al, byte ptr [rcx]; add byte ptr [rax], al; ret; 
0x00000000000eb486: add al, byte ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000001892f5: add al, byte ptr [rcx]; add byte ptr [rsp + rdx*8 - 0x12], al; push qword ptr [rdx + rax - 0x2b2bffff]; out dx, al; jmp rsp; 
0x00000000000373a2: add al, byte ptr [rdi + rcx + 0x45]; ret 0x8944; 
0x000000000019b685: add al, byte ptr [rdx]; clc; ret; 
0x0000000000117ad2: add al, byte ptr [rdx]; cmp rcx, rax; sbb eax, eax; ret; 
0x00000000001aadfd: add al, byte ptr [rdx]; ret; 
0x00000000001960d5: add al, byte ptr [rdx]; xchg eax, edi; ret; 
0x000000000019f995: add al, byte ptr [rsi + rcx + 0x30]; add dl, byte ptr [rax + 0x41100e0a]; ret; 
0x000000000009d8da: add al, byte ptr [rsi]; add byte ptr [rax], al; ret; 
0x000000000018c34d: add al, byte ptr cs:[rax]; in al, 5; clc; call rsp; 
0x000000000018c5d5: add al, byte ptr ds:[rax]; push rsp; sub al, bh; jmp rsp; 
0x00000000000b3c86: add al, byte ptr es:[rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000018cb0d: add al, byte ptr fs:[rax]; add al, 0x8b; clc; jmp rsp; 
0x000000000018cb05: add al, byte ptr fs:[rax]; loope 0x18ca94; clc; ljmp ptr [rsp - 0x74fbfffe]; clc; jmp rsp; 
0x000000000015feba: add al, byte ptr fs:[rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018cafd: add al, byte ptr fs:[rax]; ret 0xf88a; 
0x000000000018c48d: add al, byte ptr ss:[rax]; ret 0xf81a; 
0x00000000000e451a: add al, ch; adc byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000001ad297: add al, ch; adc esi, esi; jmp rbx; 
0x0000000000122958: add al, ch; add dh, byte ptr [rcx - 0x3f7b0000]; setne al; add rsp, 8; movzx eax, al; ret; 
0x00000000001ac7f7: add al, ch; add dh, dh; jmp qword ptr [rbx + 1]; 
0x0000000000048769: add al, ch; add dword ptr [rbp - 0x76b7fffb], esi; ret 0xffb8; 
0x0000000000037fc5: add al, ch; add eax, 0x48ffffef; add esp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000025515: add al, ch; add eax, 0xe9fffff4; ret; 
0x00000000001a3637: add al, ch; and ebx, esi; call qword ptr [rbx + 0xa]; 
0x0000000000023860: add al, ch; cli; ret; 
0x00000000001a8237: add al, ch; cmp dh, ch; jmp qword ptr [rcx]; 
0x00000000000bc25d: add al, ch; cmp eax, 0x48ffffdd; add esp, 0x18; ret; 
0x00000000000cb16d: add al, ch; cmp eax, 0x48ffffff; add esp, 0x18; ret; 
0x00000000000c0f8e: add al, ch; fdivr qword ptr [rax - 0x76b70005]; ret; 
0x00000000000eaf24: add al, ch; hlt; jmp qword ptr [rsi + 0xf]; 
0x00000000001246c8: add al, ch; imul edi, ebp, 0x89c085ff; ret; 
0x00000000000d928b: add al, ch; jmp qword ptr [rcx - 0xc]; 
0x0000000000129e4b: add al, ch; jmp rcx; 
0x000000000002316b: add al, ch; jmp rsp; 
0x00000000001344df: add al, ch; jnp 0x13449a; out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x00000000001273c1: add al, ch; jns 0x127357; lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000001348bb: add al, ch; lahf; mov bl, 0xef; jmp qword ptr [rsi + 0x66]; 
0x000000000002eccd: add al, ch; lodsd eax, dword ptr [rsi]; ret; 
0x00000000001a5cd7: add al, ch; mov ah, 0xf4; call qword ptr [rsi]; 
0x00000000001a5b47: add al, ch; mov al, 0xf4; jmp qword ptr [rcx]; 
0x00000000000f0a23: add al, ch; mov bh, 7; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000001a5c37: add al, ch; mov bl, 0xf4; jmp qword ptr [rcx]; 
0x00000000001178a4: add al, ch; mov dh, 0x83; int1; jmp qword ptr [rsi + 0xf]; 
0x00000000000570f4: add al, ch; mov di, bp; jmp qword ptr [rsi + 0xf]; 
0x00000000000e9ef1: add al, ch; mov dword ptr [rbp - 0xd], edx; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x00000000001974bf: add al, ch; mov eax, ebp; call rdx; 
0x00000000000b9f2d: add al, ch; mov ebp, 0x48ffffe1; add esp, 0x18; ret; 
0x000000000008abef: add al, ch; mov ebx, 0x39fffacf; ret; 
0x00000000001a28b7: add al, ch; mov edx, esi; jmp qword ptr [rcx]; 
0x00000000000488dc: add al, ch; mov esi, 0x5b0005b5; ret; 
0x00000000001948c7: add al, ch; mov gs, ebp; call qword ptr [rdx]; 
0x0000000000048826: add al, ch; mov spl, 5; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000022098: add al, ch; movabs byte ptr [0x2074fff883000c9a], al; add rsp, 8; ret; 
0x00000000000b39b6: add al, ch; movsb byte ptr [rdi], byte ptr [rsi]; ret 0xfff7; 
0x00000000000f9750: add al, ch; or al, byte ptr [rbx]; add byte ptr [rax], al; lea rax, qword ptr [rip + 0x2c8093]; add rsp, 8; ret; 
0x00000000001232a4: add al, ch; out 0xc1, al; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000001a1b77: add al, ch; out 0xf1, eax; jmp rsi; 
0x00000000001abbe7: add al, ch; out dx, eax; cmc; call qword ptr [rax]; 
0x000000000011adcb: add al, ch; out dx, eax; outsb dx, byte ptr [rsi]; cli; jmp qword ptr [rsi - 0x77]; 
0x00000000000aa401: add al, ch; pop rcx; pop rax; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000164e01: add al, ch; pop rcx; scasb al, byte ptr [rdi]; in al, dx; jmp qword ptr [rsi + 0xf]; 
0x0000000000060339: add al, ch; push rcx; cmp eax, 0x83480004; clc; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000123289: add al, ch; push rcx; ret 0xffef; 
0x0000000000193ea7: add al, ch; pushfq; in al, dx; jmp qword ptr [rcx]; 
0x000000000001b13f: add al, ch; ret 0x3b; 
0x00000000000bf3b8: add al, ch; ret 0x48c; 
0x00000000000afcb8: add al, ch; ret 0x583; 
0x000000000003a1b8: add al, ch; ret 0xcde; 
0x000000000002ed98: add al, ch; ret 0xe; 
0x0000000000088878: add al, ch; ret 0xfa7d; 
0x0000000000083a18: add al, ch; ret 0xfb99; 
0x0000000000129378: add al, ch; ret 0xffd9; 
0x0000000000081248: add al, ch; ret 0xffdb; 
0x000000000001b427: add al, ch; ret; 
0x00000000000438bc: add al, ch; sahf; ret; 
0x00000000001ad6c7: add al, ch; sbb dh, dh; jmp qword ptr [rcx]; 
0x0000000000196b87: add al, ch; scasd eax, dword ptr [rdi]; in eax, dx; call qword ptr [rcx]; 
0x00000000000a5661: add al, ch; stc; movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000102bb0: add al, ch; stosb byte ptr [rdi], al; sal dl, 1; jmp qword ptr [rsi + 0x2e]; 
0x00000000000ef53f: add al, ch; stosd dword ptr [rdi], eax; push rdx; jmp qword ptr [rsi - 0x7d]; 
0x00000000000f7e61: add al, ch; sub r9b, dil; dec dword ptr [rax + 0x39]; ret; 
0x00000000000d8c57: add al, ch; xchg eax, ebx; fdivr st(7); dec dword ptr [rax - 0x77]; ret; 
0x00000000000825e8: add al, ch; xchg eax, edx; mov al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000011f4b8: add al, ch; xchg eax, edx; ret 0; 
0x00000000000eafe8: add al, ch; xor al, byte ptr [rcx]; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000e44fa: add al, ch; xor byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000008ab65: add al, ch; xor eax, 0x39fffad0; ret; 
0x00000000001aa297: add al, cl; cdq; cmc; call rsp; 
0x00000000001946e7: add al, cl; clc; in al, dx; call qword ptr [rax]; 
0x00000000001a7c07: add al, cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a8447: add al, cl; cmc; jmp rdi; 
0x00000000001a6a57: add al, cl; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001a4c57: add al, cl; hlt; call qword ptr [rbp]; 
0x00000000001b5dd7: add al, cl; loope 0x1b5dd2; jmp qword ptr [rdx + 2]; 
0x00000000001afbd7: add al, cl; mov bl, 0xf6; jmp qword ptr [rcx]; 
0x0000000000192207: add al, cl; mov cl, 0xea; call qword ptr [rax]; 
0x00000000001af537: add al, cl; mov esi, esi; jmp qword ptr [rdi]; 
0x00000000001b0cb7: add al, cl; movsxd rdi, eax; jmp qword ptr [rbx]; 
0x000000000001b0df: add al, cl; ret 0x3b; 
0x000000000001b3c7: add al, cl; ret; 
0x00000000001962c7: add al, cl; test al, 0xed; jmp rbx; 
0x00000000001a7e47: add al, cl; xor ebp, esi; jmp qword ptr [rcx]; 
0x00000000001a815f: add al, dh; cmp ch, dh; jmp qword ptr [rsi]; 
0x00000000001a69af: add al, dh; fdivrp st(4); jmp qword ptr [rcx]; 
0x00000000001a4d0f: add al, dh; hlt; jmp qword ptr [rdi]; 
0x0000000000190e3f: add al, dh; jno 0x190e2d; call qword ptr [rsi + 1]; 
0x000000000019bfaf: add al, dh; jnp 0x19bfa1; call qword ptr [rbp]; 
0x00000000001a5cef: add al, dh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a29af: add al, dh; mov esi, edx; jmp qword ptr [rax]; 
0x00000000001a4bdf: add al, dh; movsxd rsi, esp; jmp qword ptr [rbx]; 
0x00000000000d0b64: add al, dh; or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000001b157: add al, dh; ret 0x3b; 
0x0000000000006e3f: add al, dh; ret; 
0x00000000001aa8ff: add al, dh; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001a58cf: add al, dh; stosd dword ptr [rdi], eax; hlt; jmp qword ptr [rax]; 
0x000000000018f6df: add al, dl; add ebp, edx; call qword ptr [rdi]; 
0x00000000001ab4bf: add al, dl; in eax, 0xf5; jmp rbx; 
0x00000000001a532f: add al, dl; jp 0x1a5327; jmp qword ptr [rcx]; 
0x00000000001a5b2f: add al, dl; mov al, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a289f: add al, dl; mov edx, esi; jmp qword ptr [rcx]; 
0x000000000001b0f7: add al, dl; ret 0x3b; 
0x000000000001b3df: add al, dl; ret; 
0x00000000001a5a5f: add al, dl; scasd eax, dword ptr [rdi]; hlt; call qword ptr [rax]; 
0x0000000000129371: add ax, 0xbe00; mov ebp, 0xe8000186; ret 0xffd9; 
0x0000000000150f27: add ax, word ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150f26: add ax, word ptr es:[rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001868f1: add bh, ah; jmp qword ptr [rax + 4]; 
0x000000000001a2df: add bh, ah; ret 0x17; 
0x0000000000123bd7: add bh, al; add al, 0; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000000a3f62: add bh, al; add al, 0x24; add dword ptr [rax], eax; add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000123bc7: add bh, al; add al, 1; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000039d0f: add bh, al; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000001b7557: add bh, al; add eax, 0x29f0000; add byte ptr [rax], al; ret; 
0x000000000010852d: add bh, al; add eax, 0x2bbb38; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x000000000008264f: add bh, al; add eax, 0x33e3f6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000023647: add bh, al; and al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000012b1ae: add bh, al; and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x00000000000f23e3: add bh, al; and al, 0xa8; sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000001176db: add bh, al; or byte ptr [r9], r13b; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x76b7f3a9], 0x3e; ret; 
0x000000000001e29f: add bh, al; ret 0x17; 
0x000000000019b686: add bh, al; ret; 
0x0000000000186758: add bh, al; sti; call qword ptr [rax - 0x38]; 
0x000000000004e98b: add bh, al; test dword ptr [rdx + rdi*8 + 0x1ffff], edx; add byte ptr [rax], al; jmp rax; 
0x000000000004ed73: add bh, al; test dword ptr [rdx + rdi*8 + 0xffff], edx; add byte ptr [rax], al; jmp rax; 
0x0000000000165c5f: add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000179c67: add bh, bh; dec dword ptr [rdi]; cld; jmp qword ptr [rsi]; 
0x00000000001b66f7: add bh, bh; inc dword ptr [rcx]; or ebp, edx; add dword ptr [rbx], eax; ret; 
0x00000000000b007a: add bh, bh; ret; 
0x000000000008aab5: add bh, bh; rol byte ptr [rbp + 0x480e74c0], 1; lea eax, dword ptr [rip + 0x3361bd]; mov qword ptr [rip + 0x3361a6], rax; add rsp, 8; ret; 
0x000000000006e490: add bh, bh; rol byte ptr [rbx + 0x1074fff8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000b9f6f: add bh, bh; sar byte ptr [rip - 0x1000], 1; setbe al; add rsp, 8; movzx eax, al; ret; 
0x000000000007a3ad: add bh, bh; xchg eax, ecx; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000001866d8: add bh, bl; sti; jmp rax; 
0x0000000000039d94: add bh, byte ptr [rax + 1]; ret; 
0x0000000000108870: add bh, byte ptr [rax - 1]; add rsp, 8; ret; 
0x00000000000f2375: add bh, byte ptr [rax - 1]; ret; 
0x000000000003037a: add bh, cl; cmp byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ebb20: add bh, dh; fisub dword ptr [rcx + rcx*4 + 0x10]; mov eax, 0xffffffff; ret; 
0x00000000000f110a: add bh, dh; fisub dword ptr [rcx + rcx*4 + 0x10]; mov rax, qword ptr [rip + 0x2ccda1]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000f09cf: add bh, dh; fisub dword ptr [rcx + rcx*4 + 0x10]; or eax, 0xffffffff; ret; 
0x0000000000036f16: add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010886b: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; add rsp, 8; ret; 
0x00000000000c0991: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, rdi; ret; 
0x0000000000036c63: add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x000000000001e317: add bh, dh; ret 0x17; 
0x00000000000c361d: add bh, dh; ret; 
0x0000000000036477: add bh, dh; shl byte ptr [rcx], cl; ret 0xf66; 
0x000000000019a6e4: add bh, dl; in eax, dx; jmp qword ptr [rdx]; 
0x000000000001a2af: add bh, dl; ret 0x17; 
0x00000000001866c0: add bl, ah; sti; call rax; 
0x0000000000107a8e: add bl, al; mov rax, qword ptr [rip + 0x2bc501]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001211c9: add bl, al; nop dword ptr [rax + rax]; lea rdx, qword ptr [rip + 0x29c9a9]; mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x00000000000c1cf9: add bl, al; nop dword ptr [rax + rax]; mov eax, 0x6e; syscall; 
0x000000000012d614: add bl, al; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000179c77: add bl, bh; inc ebx; add dh, bh; jmp rdi; 
0x00000000000c632b: add bl, byte ptr [r11 + 0x5d]; ret; 
0x00000000001a8fcc: add bl, byte ptr [rbp + 0x14080e]; add byte ptr [rax], al; sub al, 0xae; add dword ptr [rax], eax; sbb byte ptr [rbx - 0xb], ah; jmp qword ptr [rcx]; 
0x00000000001aa4ad: add bl, byte ptr [rbp + 0xa]; ret; 
0x00000000000c632c: add bl, byte ptr [rbx + 0x5d]; ret; 
0x0000000000074668: add bl, byte ptr [rbx - 0x3d]; nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000001ab1dc: add bl, byte ptr [rbx - 0xb]; jmp qword ptr [rdx]; 
0x00000000000c72f2: add bl, byte ptr [rcx - 0x7c0608bf]; ret 0x8d01; 
0x000000000018e724: add bl, byte ptr [rsi - 0x17]; jmp qword ptr [rdx]; 
0x00000000000f1b43: add bl, ch; leave; nop word ptr cs:[rax + rax]; mov eax, 0xaa; syscall; 
0x000000000003e047: add bl, ch; mov eax, 0x1b8; add byte ptr [rax + 1], cl; ret; 
0x000000000012682a: add bl, ch; mov edx, 0x83001f0f; add dh, byte ptr ds:[rbx + rcx - 0x48]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000011f5cd: add bl, ch; mov esp, 0x243c8b49; mov rsi, r14; mov r13d, 7; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000000218f4: add bl, ch; or ecx, dword ptr [rax - 1]; ret 0x9539; 
0x00000000000ba0c6: add bl, ch; ret 0x1f0f; 
0x0000000000044ee3: add bl, ch; ret 0x2e66; 
0x00000000000265b5: add bl, ch; ret 0x8b48; 
0x0000000000046e44: add bl, ch; ret; 
0x0000000000133c29: add bl, ch; ror dword ptr [rdi], 0x1f; add bl, sil; ret; 
0x0000000000136e71: add bl, ch; vminsd xmm15, xmm4, qword ptr [rax - 1]; pop r12; ret; 
0x000000000007bd39: add bl, ch; xchg eax, esi; nop dword ptr [rax]; mov rax, -1; ret; 
0x0000000000189b5f: add bl, cl; shr bh, 1; lcall ptr [rcx + rsi - 0x2f15ffff]; out dx, eax; jmp rsp; 
0x000000000009dbaf: add bl, dh; movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x000000000009ceef: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000009cf0f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000009cf8f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000009cf4f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000009cf6f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000009d08f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000009d02f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000009d04f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000009d06f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000009f37f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009e53f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009e54f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009cedf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000a0def: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000008c4ef: add bl, dh; movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm8; ret; 
0x000000000009de8f: add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x000000000009de9f: add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x0000000000021c82: add bl, dh; ret; 
0x0000000000186924: add bl, dh; sti; call qword ptr [rax - 0xc]; 
0x0000000000189467: add bl, dl; std; out dx, al; jmp rsp; 
0x000000000009ceee: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000008c4ee: add bl, sil; movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm8; ret; 
0x00000000000979c6: add bl, sil; ret; 
0x00000000001946e3: add byte ptr [0xfffffffff8c80000], bh; in al, dx; call qword ptr [rax]; 
0x0000000000085313: add byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; pop r14; ret; 
0x00000000000c2647: add byte ptr [r13 + rbp - 0x48], sil; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000bd9ae: add byte ptr [r13 - 0x77], 0x64; xchg eax, ebp; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000c8482: add byte ptr [r14 + 0xf], r8b; mov dh, 0x3c; mov eax, 0xfffb08e9; jmp qword ptr [rsi - 0x70]; 
0x00000000000857ad: add byte ptr [r15], r9b; test byte ptr [rbx + 2], bl; add byte ptr [rax], al; mov rdi, rbx; mov rdx, r15; call rax; 
0x000000000008550a: add byte ptr [r15], r9b; test byte ptr [rsi + 1], bl; add byte ptr [rax], al; mov rdx, r12; mov rdi, r15; call rax; 
0x00000000000852fa: add byte ptr [r15], r9b; test byte ptr [rsi], ch; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; call rax; 
0x000000000011a623: add byte ptr [r8 - 0x7d], r9b; ret 0x3108; 
0x0000000000029e99: add byte ptr [r8 - 0x7d], r9b; ret 0x4901; 
0x0000000000059c70: add byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000107661: add byte ptr [r8], 0; add byte ptr [rax], al; mov qword ptr [rbp - 0x70], rdx; mov rdx, r14; call rax; 
0x0000000000192b7d: add byte ptr [r8], al; add byte ptr [rcx - 0x15], al; call rdx; 
0x0000000000192b4d: add byte ptr [r8], al; cmp byte ptr [rdx], 0xfa; jmp qword ptr [rcx]; 
0x0000000000198a05: add byte ptr [r8], al; fdiv st(0); in eax, dx; jmp qword ptr [rdx]; 
0x0000000000093f4e: add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000012d6e4: add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbx - 0x14f3dbbc], cl; xor eax, 0x8478b48; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000003d21c: add byte ptr [r9], r14b; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000e3662: add byte ptr [r9], r15b; ret 0x870f; 
0x000000000003670e: add byte ptr [rax + 0x1024448b], dl; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000f11df: add byte ptr [rax + 0x10], bh; syscall; 
0x000000000018620f: add byte ptr [rax + 0x10], dh; sti; inc dword ptr [rax + 0x11]; sti; call qword ptr [rax]; 
0x00000000000ed041: add byte ptr [rax + 0x10f], bh; syscall; 
0x00000000000fa97f: add byte ptr [rax + 0x123], bh; syscall; 
0x00000000000ebebf: add byte ptr [rax + 0x124], bh; syscall; 
0x00000000000ebf1f: add byte ptr [rax + 0x125], bh; syscall; 
0x00000000000faaff: add byte ptr [rax + 0x126], bh; syscall; 
0x00000000000faf4f: add byte ptr [rax + 0x12c], bh; syscall; 
0x00000000000fa8bf: add byte ptr [rax + 0x131], bh; syscall; 
0x00000000000f1ebf: add byte ptr [rax + 0x132], bh; syscall; 
0x00000000000fb00f: add byte ptr [rax + 0x134], bh; syscall; 
0x00000000000eb75f: add byte ptr [rax + 0x15], bh; syscall; 
0x00000000000ebeef: add byte ptr [rax + 0x16], bh; syscall; 
0x000000000001b17f: add byte ptr [rax + 0x185e], bl; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000cb29f: add byte ptr [rax + 0x18], bh; syscall; 
0x0000000000188887: add byte ptr [rax + 0x19], al; in al, dx; dec dword ptr [rsp + rsi*4 + 0x195f0000]; in al, dx; call rsp; 
0x00000000000f498f: add byte ptr [rax + 0x1b], bh; syscall; 
0x00000000000f495f: add byte ptr [rax + 0x1c], bh; syscall; 
0x00000000000fbe9f: add byte ptr [rax + 0x1d], bh; syscall; 
0x00000000000fbecf: add byte ptr [rax + 0x1f], bh; syscall; 
0x000000000003640b: add byte ptr [rax + 0x1fe8c17f], al; ret; 
0x00000000000c2586: add byte ptr [rax + 0x20], bh; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000c256f: add byte ptr [rax + 0x20], bh; ret; 
0x00000000000ebe5f: add byte ptr [rax + 0x20], bh; syscall; 
0x00000000000ebe8f: add byte ptr [rax + 0x21], bh; syscall; 
0x00000000001a75d7: add byte ptr [rax + 0x21], ch; cmc; jmp qword ptr [rdx]; 
0x00000000000c0b8f: add byte ptr [rax + 0x25], bh; syscall; 
0x00000000000b428f: add byte ptr [rax + 0x26], bh; syscall; 
0x000000000019b7e7: add byte ptr [rax + 0x26], ch; out dx, al; jmp rcx; 
0x000000000012260e: add byte ptr [rax + 0x289c80f], al; mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x00000000000fb5af: add byte ptr [rax + 0x29], bh; syscall; 
0x00000000000d4012: add byte ptr [rax + 0x29], cl; ret 0x148; 
0x00000000000b55f5: add byte ptr [rax + 0x29], cl; ret 0x2948; 
0x00000000000514d2: add byte ptr [rax + 0x29], cl; ret 0x8349; 
0x00000000000273bc: add byte ptr [rax + 0x29], cl; ret 0x8b49; 
0x000000000007d4d5: add byte ptr [rax + 0x29], cl; ret 0x8d49; 
0x0000000000028e84: add byte ptr [rax + 0x29], cl; ret; 
0x00000000001a783f: add byte ptr [rax + 0x2a], al; cmc; jmp qword ptr [rcx]; 
0x000000000019a507: add byte ptr [rax + 0x2b], bh; out dx, al; call qword ptr [rdx]; 
0x00000000001a7987: add byte ptr [rax + 0x2b], ch; cmc; call qword ptr [rax]; 
0x00000000001a7957: add byte ptr [rax + 0x2b], cl; cmc; jmp qword ptr [rcx]; 
0x000000000019a4cf: add byte ptr [rax + 0x2b], dh; out dx, al; call qword ptr [rdx]; 
0x00000000000f3222: add byte ptr [rax + 0x2ce3d70d], cl; add byte ptr [rax - 0x77], cl; clc; mov byte ptr [r9 - 1], 0; ret; 
0x00000000001a7acf: add byte ptr [rax + 0x2d], ah; cmc; jmp qword ptr [rcx]; 
0x00000000001a7ae7: add byte ptr [rax + 0x2d], bh; cmc; jmp qword ptr [rcx]; 
0x00000000001a7c97: add byte ptr [rax + 0x2f], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7caf: add byte ptr [rax + 0x2f], dh; cmc; jmp qword ptr [rcx]; 
0x000000000000b447: add byte ptr [rax + 0x2f], dl; or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001a7d57: add byte ptr [rax + 0x30], cl; cmc; jmp qword ptr [rax]; 
0x00000000000fb11f: add byte ptr [rax + 0x31], bh; syscall; 
0x00000000001a7dff: add byte ptr [rax + 0x31], dl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7ebf: add byte ptr [rax + 0x32], ah; cmc; jmp qword ptr [rcx]; 
0x00000000000fb1df: add byte ptr [rax + 0x33], bh; syscall; 
0x000000000019b9a7: add byte ptr [rax + 0x33], cl; out dx, al; call qword ptr [rsi]; 
0x00000000000fb1af: add byte ptr [rax + 0x34], bh; syscall; 
0x00000000001a8027: add byte ptr [rax + 0x35], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a803f: add byte ptr [rax + 0x35], dh; cmc; jmp qword ptr [rcx]; 
0x00000000000461e7: add byte ptr [rax + 0x38], bh; syscall; 
0x00000000001a811f: add byte ptr [rax + 0x38], dh; cmc; jmp qword ptr [rax]; 
0x000000000002c234: add byte ptr [rax + 0x39], cl; ret 0x7773; 
0x000000000007e2bc: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000007896f: add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000000e5392: add byte ptr [rax + 0x39], cl; ret 0x860f; 
0x0000000000108240: add byte ptr [rax + 0x39], cl; ret 0xda75; 
0x000000000002748b: add byte ptr [rax + 0x39], cl; ret; 
0x000000000007ffc7: add byte ptr [rax + 0x39], cl; ror dword ptr [rdi], cl; xchg eax, ebp; ret 0x8348; 
0x000000000012ac3f: add byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rcx + 0x48], 1; add eax, 0xa0; add rsp, 8; ret; 
0x000000000012ac6f: add byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rcx + 0x48], 1; add eax, 0xa8; add rsp, 8; ret; 
0x000000000012abdf: add byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rcx + 0x48], 1; add esp, 8; ret; 
0x000000000012ac0f: add byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rcx + 0x48], 1; sub eax, -0x80; add rsp, 8; ret; 
0x000000000010bd87: add byte ptr [rax + 0x39], cl; sal byte ptr [rdi + 0x11], 1; lea rdx, qword ptr [rip + 0x2b8014]; call 0xa3ea0; add rsp, 8; ret; 
0x00000000000c114c: add byte ptr [rax + 0x3a], bh; syscall; 
0x00000000001a8207: add byte ptr [rax + 0x3a], bl; cmc; jmp qword ptr [rax]; 
0x00000000001a8233: add byte ptr [rax + 0x3ae80001], cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a824b: add byte ptr [rax + 0x3b000001], ah; cmc; jmp qword ptr [rcx]; 
0x00000000001a8263: add byte ptr [rax + 0x3b180001], bh; cmc; jmp qword ptr [rcx]; 
0x00000000001a82c7: add byte ptr [rax + 0x3b], bh; cmc; jmp qword ptr [rcx]; 
0x00000000000eaf2f: add byte ptr [rax + 0x3c], bh; syscall; 
0x00000000000464d7: add byte ptr [rax + 0x3e], bh; movsxd rdi, ebx; syscall; 
0x0000000000036eff: add byte ptr [rax + 0x3e], bh; syscall; 
0x00000000000c08cf: add byte ptr [rax + 0x3f], bh; syscall; 
0x00000000000c25bf: add byte ptr [rax + 0x40], bh; ret; 
0x00000000000fbdaf: add byte ptr [rax + 0x40], bh; syscall; 
0x00000000000fbd7f: add byte ptr [rax + 0x41], bh; syscall; 
0x000000000019ffe7: add byte ptr [rax + 0x42], bh; int1; jmp qword ptr [rcx]; 
0x000000000019e187: add byte ptr [rax + 0x42], ch; cld; jmp qword ptr [rbx + 0x17]; 
0x00000000000fbe6f: add byte ptr [rax + 0x43], bh; syscall; 
0x00000000001860fd: add byte ptr [rax + 0x43], dl; pop rcx; clc; ret 0x6e1f; 
0x00000000001a8497: add byte ptr [rax + 0x45], ch; cmc; jmp rax; 
0x00000000000fbd4f: add byte ptr [rax + 0x47], bh; syscall; 
0x000000000019d2bf: add byte ptr [rax + 0x49], ah; out dx, eax; jmp qword ptr [rsi]; 
0x00000000001a00d7: add byte ptr [rax + 0x49], bl; int1; call qword ptr [rdx]; 
0x00000000000f308f: add byte ptr [rax + 0x4c], bh; syscall; 
0x00000000000df30a: add byte ptr [rax + 0x4d0f0000], al; call 0xfffffffffd918600; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x00000000000f30bf: add byte ptr [rax + 0x4d], bh; syscall; 
0x00000000000ebfaf: add byte ptr [rax + 0x50], bh; syscall; 
0x00000000000ebfdf: add byte ptr [rax + 0x51], bh; syscall; 
0x00000000001b0287: add byte ptr [rax + 0x51], bl; sti; call rsi; 
0x000000000005db8f: add byte ptr [rax + 0x52], bh; syscall; 
0x00000000000ecf7f: add byte ptr [rax + 0x54], bh; syscall; 
0x00000000001a870f: add byte ptr [rax + 0x55], al; cmc; call qword ptr [rcx]; 
0x00000000000ecdff: add byte ptr [rax + 0x56], bh; syscall; 
0x00000000000ecf1f: add byte ptr [rax + 0x57], bh; syscall; 
0x000000000018f397: add byte ptr [rax + 0x58], cl; std; jmp qword ptr [rax]; 
0x00000000000eb37f: add byte ptr [rax + 0x5a], bh; syscall; 
0x00000000000eb3af: add byte ptr [rax + 0x5b], bh; syscall; 
0x000000000001f5f5: add byte ptr [rax + 0x5b], bl; pop rbp; ret; 
0x000000000001af6f: add byte ptr [rax + 0x5b], cl; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret 0x3b; 
0x00000000000ec7df: add byte ptr [rax + 0x5d], bh; syscall; 
0x00000000001a8937: add byte ptr [rax + 0x5d], bl; cmc; call qword ptr [rcx]; 
0x000000000001b167: add byte ptr [rax + 0x5e], bh; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; clc; ret 0x3b; 
0x00000000000ec80f: add byte ptr [rax + 0x5e], bh; syscall; 
0x00000000000eb36f: add byte ptr [rax + 0x5f], bh; syscall; 
0x00000000000eb36f: add byte ptr [rax + 0x5f], bh; syscall; ret; 
0x00000000000fa378: add byte ptr [rax + 0x5f], bl; call rax; 
0x00000000000f0bff: add byte ptr [rax + 0x61], bh; syscall; 
0x00000000000f0c5f: add byte ptr [rax + 0x62], bh; syscall; 
0x00000000000b5307: add byte ptr [rax + 0x63], cl; adc al, 0x90; add rax, rdx; jmp rax; 
0x000000000006d292: add byte ptr [rax + 0x63], cl; adc al, 0x91; add rcx, rdx; jmp rcx; 
0x00000000000c2bc2: add byte ptr [rax + 0x63], cl; adc al, 0x98; add rax, rdx; jmp rax; 
0x0000000000034c6f: add byte ptr [rax + 0x63], cl; adc al, 0xb7; add rdx, rdi; jmp rdx; 
0x0000000000083574: add byte ptr [rax + 0x63], cl; adc al, 0xb8; add rax, rdx; jmp rax; 
0x000000000006465f: add byte ptr [rax + 0x63], cl; add al, 0x81; add rcx, rax; jmp rcx; 
0x000000000005e53f: add byte ptr [rax + 0x63], cl; add al, 0x82; add rdx, rax; jmp rdx; 
0x0000000000034ed8: add byte ptr [rax + 0x63], cl; add al, 0x83; add rax, rbx; jmp rax; 
0x000000000006d0b7: add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000127093: add byte ptr [rax + 0x63], cl; add al, 0x87; add rdi, rax; jmp rdi; 
0x000000000004dd92: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; jmp rax; 
0x000000000004d58f: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov byte ptr [rbp - 0x4fa], 0x20; mov dword ptr [rbp - 0x530], 1; jmp rax; 
0x000000000004ecb3: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004ed62: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004e97a: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004d538: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004ba9f: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000004e9db: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x558], 1; jmp rax; 
0x000000000004debe: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004ec52: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004e795: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004e838: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000005f05f: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; jmp rax; 
0x000000000005f13d: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005ef44: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 0; jmp rax; 
0x000000000005efe2: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 1; jmp rax; 
0x000000000005f1d1: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1100], 0x20; mov dword ptr [rbp - 0x10fc], 1; jmp rax; 
0x000000000005f187: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005ef98: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000005f225: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f09f: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f2da: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f0e9: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1138], 1; mov dword ptr [rbp - 0x1128], 0; jmp rax; 
0x000000000005f324: add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x00000000000a1a66: add byte ptr [rax + 0x63], cl; add al, 0xbe; add rsi, rax; jmp rsi; 
0x000000000003cad5: add byte ptr [rax + 0x63], cl; and al, 0xc; add rsp, 0x18; ret; 
0x00000000000ece8f: add byte ptr [rax + 0x63], cl; idiv byte ptr [rax + 0x10a]; syscall; 
0x000000000006d17f: add byte ptr [rax + 0x63], cl; or al, 0x8e; add rsi, rcx; jmp rsi; 
0x0000000000130937: add byte ptr [rax + 0x63], cl; ret 0x14c; 
0x000000000005e63a: add byte ptr [rax + 0x63], cl; ret 0x3948; 
0x00000000000210d2: add byte ptr [rax + 0x63], cl; ret 0x894c; 
0x00000000000d6306: add byte ptr [rax + 0x63], cl; ret 0x8b48; 
0x00000000000447fe: add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x00000000000c8b84: add byte ptr [rax + 0x63], cl; ret 0xb60f; 
0x000000000013cb43: add byte ptr [rax + 0x63], cl; ret 0xf66; 
0x0000000000034c07: add byte ptr [rax + 0x63], cl; ret; 
0x000000000001ff59: add byte ptr [rax + 0x63], cl; ror byte ptr [rax + 0x39], 1; fidiv dword ptr [rdx + rdx*8 + 0x49]; movsxd rdi, ebp; mov eax, 3; syscall; 
0x0000000000117ec0: add byte ptr [rax + 0x63], cl; ror byte ptr [rax + 1], 1; xlatb; mov qword ptr [r9], rdi; ret; 
0x0000000000047d3d: add byte ptr [rax + 0x63], cl; ror byte ptr [rax - 0x7d], cl; ret; 
0x00000000000375c7: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x2d], -0x1e; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x000000000006f5f3: add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000001211bb: add byte ptr [rax + 0x63], cl; sbb byte ptr [r11 + 0xb7603f8], r8b; mov eax, 2; ret; 
0x000000000007f881: add byte ptr [rax + 0x63], cl; stc; mov eax, 3; syscall; 
0x00000000000bcd93: add byte ptr [rax + 0x63], cl; std; mov al, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000f4837: add byte ptr [rax + 0x63], cl; std; mov eax, 3; syscall; 
0x0000000000112f3e: add byte ptr [rax + 0x63], cl; sti; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000c277f: add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x00000000000464dc: add byte ptr [rax + 0x63], cl; sti; syscall; 
0x00000000000f1eef: add byte ptr [rax + 0x63], cl; xlatb; mov esi, 0x28121969; mov rdi, -0x11e2153; mov eax, 0xa9; syscall; 
0x00000000001b0a97: add byte ptr [rax + 0x64], bl; clc; jmp qword ptr [rbx]; 
0x00000000001b0a0f: add byte ptr [rax + 0x64], dh; clc; jmp qword ptr [rbx]; 
0x00000000001b0717: add byte ptr [rax + 0x65], cl; clc; jmp qword ptr [rbx]; 
0x00000000000e449e: add byte ptr [rax + 0x6607b70f], dl; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000c1d0f: add byte ptr [rax + 0x66], bh; syscall; 
0x00000000000c1d0f: add byte ptr [rax + 0x66], bh; syscall; ret; 
0x0000000000036148: add byte ptr [rax + 0x66d02148], al; movd mm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000fab5f: add byte ptr [rax + 0x67], bh; syscall; 
0x00000000000c1d2f: add byte ptr [rax + 0x68], bh; syscall; 
0x00000000000c1d2f: add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000000c1d1f: add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000000c1d1f: add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000000c1d3f: add byte ptr [rax + 0x6c], bh; syscall; 
0x00000000000c1d3f: add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x0000000000188aef: add byte ptr [rax + 0x6cffed65], ch; mov byte ptr [rax], 0; ret; 
0x000000000019bd67: add byte ptr [rax + 0x6d], bh; out dx, al; call qword ptr [rdi]; 
0x00000000000c1f0f: add byte ptr [rax + 0x6d], bh; syscall; 
0x00000000001a502f: add byte ptr [rax + 0x6e], ah; hlt; jmp qword ptr [rcx]; 
0x00000000001a5047: add byte ptr [rax + 0x6e], bh; hlt; jmp qword ptr [rcx]; 
0x00000000000c1cff: add byte ptr [rax + 0x6e], bh; syscall; 
0x00000000000c1cff: add byte ptr [rax + 0x6e], bh; syscall; ret; 
0x00000000001a5017: add byte ptr [rax + 0x6e], cl; hlt; jmp qword ptr [rcx]; 
0x00000000000c1f3f: add byte ptr [rax + 0x6f], bh; syscall; 
0x00000000000c1f3f: add byte ptr [rax + 0x6f], bh; syscall; ret; 
0x00000000001a9a5f: add byte ptr [rax + 0x70], al; cmc; jmp qword ptr [rdx]; 
0x00000000000c1f9f: add byte ptr [rax + 0x70], bh; syscall; 
0x00000000000360db: add byte ptr [rax + 0x7110ff2], al; and rax, rdx; movq xmm0, rax; ret; 
0x00000000001a9a8f: add byte ptr [rax + 0x71], dh; cmc; call rsp; 
0x00000000000c1d4f: add byte ptr [rax + 0x73], bh; syscall; 
0x0000000000086cef: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x0000000000046ff7: add byte ptr [rax + 0x752fff78], al; xor cl, byte ptr [rax - 0x77]; ret 0x8d48; 
0x00000000001a519f: add byte ptr [rax + 0x76], al; hlt; jmp qword ptr [rcx]; 
0x00000000000c1fcf: add byte ptr [rax + 0x76], bh; syscall; 
0x00000000001a51b7: add byte ptr [rax + 0x76], bl; hlt; jmp qword ptr [rcx]; 
0x00000000001b392f: add byte ptr [rax + 0x76], dl; idiv edi; ret 0; 
0x0000000000109f7e: add byte ptr [rax + 0x77ca3948], dl; and bh, byte ptr [rax + 0x59]; syscall; 
0x00000000000c1fff: add byte ptr [rax + 0x78], bh; syscall; 
0x00000000001a52c7: add byte ptr [rax + 0x78], ch; hlt; jmp qword ptr [rbx + 2]; 
0x000000000009e3df: add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000000c1edf: add byte ptr [rax + 0x79], bh; syscall; 
0x00000000000fa46f: add byte ptr [rax + 0x7a], bh; syscall; 
0x00000000001a53bf: add byte ptr [rax + 0x7b], ah; hlt; jmp qword ptr [rcx]; 
0x00000000000fa49f: add byte ptr [rax + 0x7b], bh; syscall; 
0x00000000000c1f6f: add byte ptr [rax + 0x7c], bh; syscall; 
0x000000000016637f: add byte ptr [rax + 0x7d], al; in al, dx; call qword ptr [rax]; 
0x00000000000fa85f: add byte ptr [rax + 0x7d], bh; syscall; 
0x00000000000c24a7: add byte ptr [rax + 0x7e], bh; ret; 
0x00000000000fa88f: add byte ptr [rax + 0x7e], bh; syscall; 
0x00000000000c243e: add byte ptr [rax + 0x7f], bh; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000c23fa: add byte ptr [rax + 0x7f], bh; ret; 
0x0000000000036f34: add byte ptr [rax + 0x7f], bh; syscall; 
0x0000000000036f6e: add byte ptr [rax + 0x82], bh; syscall; 
0x00000000000fae2f: add byte ptr [rax + 0x86], bh; syscall; 
0x00000000000fac1f: add byte ptr [rax + 0x87], bh; syscall; 
0x00000000000eb22f: add byte ptr [rax + 0x89], bh; syscall; 
0x00000000000eb25f: add byte ptr [rax + 0x8a], bh; syscall; 
0x00000000000f101f: add byte ptr [rax + 0x8d], bh; syscall; 
0x00000000000cb20f: add byte ptr [rax + 0x8f], bh; syscall; 
0x00000000000cb23f: add byte ptr [rax + 0x90], bh; syscall; 
0x00000000000cb26f: add byte ptr [rax + 0x91], bh; syscall; 
0x00000000000cb2cf: add byte ptr [rax + 0x92], bh; syscall; 
0x00000000000cb2ff: add byte ptr [rax + 0x93], bh; syscall; 
0x00000000000cb32f: add byte ptr [rax + 0x94], bh; syscall; 
0x00000000000f4a1f: add byte ptr [rax + 0x96], bh; syscall; 
0x00000000000f4a4f: add byte ptr [rax + 0x97], bh; syscall; 
0x00000000000f4a7f: add byte ptr [rax + 0x98], bh; syscall; 
0x00000000000fa7bf: add byte ptr [rax + 0x9a], bh; syscall; 
0x00000000000fac4f: add byte ptr [rax + 0x9b], bh; syscall; 
0x00000000000f0c2f: add byte ptr [rax + 0xa0], bh; syscall; 
0x00000000000f1d9f: add byte ptr [rax + 0xa1], bh; syscall; 
0x00000000000f1e2f: add byte ptr [rax + 0xa2], bh; syscall; 
0x00000000000f1d6f: add byte ptr [rax + 0xa3], bh; syscall; 
0x00000000000b140f: add byte ptr [rax + 0xa4], bh; syscall; 
0x00000000000fa40f: add byte ptr [rax + 0xa6], bh; syscall; 
0x00000000000f21af: add byte ptr [rax + 0xa7], bh; syscall; 
0x00000000000f21df: add byte ptr [rax + 0xa8], bh; syscall; 
0x00000000000f48cf: add byte ptr [rax + 0xa], bh; syscall; 
0x00000000000f1b4f: add byte ptr [rax + 0xaa], bh; syscall; 
0x00000000000f1bef: add byte ptr [rax + 0xab], bh; syscall; 
0x00000000000fa27f: add byte ptr [rax + 0xac], bh; syscall; 
0x00000000000fa24f: add byte ptr [rax + 0xad], bh; syscall; 
0x00000000000fa24e: add byte ptr [rax + 0xad], dil; syscall; 
0x00000000000fa8ef: add byte ptr [rax + 0xae], bh; syscall; 
0x00000000000fa91f: add byte ptr [rax + 0xb0], bh; syscall; 
0x000000000019f987: add byte ptr [rax + 0xb], bl; int1; jmp rcx; 
0x00000000000fa43f: add byte ptr [rax + 0xbb], bh; syscall; 
0x00000000000f817f: add byte ptr [rax + 0xc6], bh; syscall; 
0x00000000000f805f: add byte ptr [rax + 0xc7], bh; syscall; 
0x000000000010c4b7: add byte ptr [rax + 0xca], bh; add rsp, 0x28; ret; 
0x0000000000108091: add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000108091: add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x0000000000108138: add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000001ad0de: add byte ptr [rax + 0xd1cfff5], al; fdivr dword ptr [rbp - 0xb]; jmp qword ptr [rdx]; 
0x00000000000fa94f: add byte ptr [rax + 0xd5], bh; syscall; 
0x00000000001a72ff: add byte ptr [rax + 0xd], ah; cmc; jmp qword ptr [rcx]; 
0x00000000001a72e7: add byte ptr [rax + 0xd], cl; cmc; jmp qword ptr [rcx]; 
0x00000000000fa7ef: add byte ptr [rax + 0xe4], bh; syscall; 
0x00000000000fa7ef: add byte ptr [rax + 0xe4], bh; syscall; ret; 
0x00000000000c2bf6: add byte ptr [rax + 0xe5], bh; syscall; 
0x0000000000047109: add byte ptr [rax + 0xe], bh; syscall; 
0x00000000001903e8: add byte ptr [rax + 0xe], dl; adc byte ptr [rbx + 0xa4c0202], al; ret; 
0x00000000000f2edf: add byte ptr [rax + 0xeb], bh; syscall; 
0x000000000002fdf4: add byte ptr [rax + 0xf], al; mov bh, 0xc0; ret; 
0x000000000007a723: add byte ptr [rax + 0xf], al; mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b827e: add byte ptr [rax + 0xf], al; mov dh, 0xd6; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000002585f: add byte ptr [rax + 0xf], al; mov dh, 0xd6; test sil, sil; mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x000000000008a705: add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000012d3a7: add byte ptr [rax + 0xf], cl; mov edi, 0xe6894806; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000c24bf: add byte ptr [rax + 0xfc17], bh; ret; 
0x00000000000faacf: add byte ptr [rax + 0xfd], bh; syscall; 
0x00000000000fab2f: add byte ptr [rax + 0xff], bh; syscall; 
0x0000000000074f9a: add byte ptr [rax + 1], 0; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000074dba: add byte ptr [rax + 1], 0; add byte ptr [rsi - 1], bh; mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000074672: add byte ptr [rax + 1], 0; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000048a5f: add byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f3654: add byte ptr [rax + 1], bh; add rsp, 8; ret; 
0x00000000001224ad: add byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000002c04f: add byte ptr [rax + 1], bh; ret; 
0x00000000001a8203: add byte ptr [rax + 1], bl; add byte ptr [rax + 0x3a], bl; cmc; jmp qword ptr [rax]; 
0x0000000000199297: add byte ptr [rax + 1], bl; out dx, al; jmp rax; 
0x000000000008bb95: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000000a54ef: add byte ptr [rax + 1], cl; ret 0x1a75; 
0x0000000000095c9f: add byte ptr [rax + 1], cl; ret 0x8348; 
0x00000000000b0487: add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000df0a9: add byte ptr [rax + 1], cl; ret 0x8d4c; 
0x000000000003e04e: add byte ptr [rax + 1], cl; ret; 
0x000000000014938e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3d5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014923e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3d747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001490ee: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3d897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148f9e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3d9e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148e4e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3db37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148cfe: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3dc87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148bae: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3ddd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014890e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3e077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001487be: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3e1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014866e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3e317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014851e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3e467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001483ce: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3e5b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014827e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3e707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014812e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3e857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001469be: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3fe07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014686e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x3ff57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014671e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x400a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001465ce: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x401f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014647e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x40347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014632e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x40497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001461de: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x405e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145f3e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x40887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145dee: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x409d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145c9e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x40b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145b4e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x40c77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001459fe: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x40dc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001458ae: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x40f17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014575e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x41067]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143fee: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x42617]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143e9e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x42767]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143d4e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x428b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143bfe: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x42a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143aae: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x42b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014395e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x42ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014380e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x42df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014356e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x43097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014341e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x431e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001432ce: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x43337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014317e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x43487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014302e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x435d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ede: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x43727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142d8e: add byte ptr [rax + 1], cl; salc; lea r11, qword ptr [rip + 0x43877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000012144f: add byte ptr [rax + 2], bh; ret; 
0x00000000001b52bf: add byte ptr [rax + 3], ah; sti; jmp qword ptr [rdx]; 
0x00000000001a70ff: add byte ptr [rax + 7], dl; cmc; jmp qword ptr [rdi + 1]; 
0x0000000000000876: add byte ptr [rax + rax + 0x11323290], ah; out 0xc, eax; movabs eax, dword ptr [0x10c0449000e]; ret 0x440c; 
0x000000000018cdef: add byte ptr [rax + rax + 0x79ccfff9], dh; add al, byte ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; add ecx, edi; jmp rsp; 
0x000000000019bdbf: add byte ptr [rax + rax - 0x23e40000], dl; add byte ptr [rax], al; cmp byte ptr [rax - 0x12], dh; call qword ptr [rsi]; 
0x0000000000192203: add byte ptr [rax + rax*2], bl; add al, cl; mov cl, 0xea; call qword ptr [rax]; 
0x000000000019221b: add byte ptr [rax + rax*2], dh; add al, al; mov cl, 0xea; call qword ptr [rdx]; 
0x00000000001ac12b: add byte ptr [rax + rax*4 - 0x78fffff], ch; cmc; call qword ptr [rcx]; 
0x00000000001aa25b: add byte ptr [rax + rax*8 - 0x696fffff], dh; cmc; jmp qword ptr [rdi + 3]; 
0x000000000003196f: add byte ptr [rax + rax*8 - 0x7cb7ec8c], al; ret 0x4901; 
0x00000000000c0397: add byte ptr [rax + rax*8 - 0x7cb7f48c], al; ret; 
0x000000000019a1db: add byte ptr [rax + rax*8], dh; add byte ptr [rax], al; nop; and al, 0xee; call qword ptr [rsi]; 
0x000000000009da5c: add byte ptr [rax + rax], 0; ret; 
0x00000000001a1477: add byte ptr [rax + rax], ah; add ah, dl; xor al, byte ptr [rcx]; add byte ptr [rax - 0x21], dl; int1; jmp qword ptr [rdi + 1]; 
0x000000000000733f: add byte ptr [rax + rax], ah; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001a1c5f: add byte ptr [rax + rax], ah; add byte ptr [rax], al; mov esp, 0x8800013a; in eax, dx; int1; call qword ptr [rsi]; 
0x00000000001aa93f: add byte ptr [rax + rax], ah; add byte ptr [rax], al; pushfq; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rdi]; 
0x00000000001a975f: add byte ptr [rax + rax], ah; add byte ptr [rbp + rsi*4 + 0x6ed80001], bh; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001a8ccf: add byte ptr [rax + rax], ah; add byte ptr [rbx + rbp*4], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xb], bl; jmp qword ptr [rdi + 1]; 
0x00000000001ab4b7: add byte ptr [rax + rax], ah; add byte ptr [rbx + rdx*8], dl; add dword ptr [rax], eax; shl ch, 1; cmc; jmp rbx; 
0x00000000001aa15f: add byte ptr [rax + rax], ah; add byte ptr [rdi + rdi*4 - 0x7127ffff], bh; cmc; jmp qword ptr [rbx + 2]; 
0x00000000001b6437: add byte ptr [rax + rax], ah; add byte ptr [rdx + rax*4 - 0xdeffffe], dl; cli; call rcx; 
0x00000000001ac83f: add byte ptr [rax + rax], ah; add byte ptr [rsi + 0x2880001], bl; idiv bh; ret 3; 
0x000000000018f38f: add byte ptr [rax + rax], al; add ah, ch; adc dword ptr [rax], eax; add byte ptr [rax + 0x58], cl; std; jmp qword ptr [rax]; 
0x00000000001adf9f: add byte ptr [rax + rax], al; add ah, ch; stc; add dword ptr [rax], eax; jmp qword ptr [rdi]; 
0x00000000001a1b6f: add byte ptr [rax + rax], al; add ah, cl; cmp dword ptr [rcx], eax; add al, ch; out 0xf1, eax; jmp rsi; 
0x000000000019a97f: add byte ptr [rax + rax], al; add ah, cl; ret; 
0x000000000019a8a7: add byte ptr [rax + rax], al; add ah, dh; ret 0; 
0x00000000000049ff: add byte ptr [rax + rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x3b; 
0x0000000000194f3f: add byte ptr [rax + rax], al; add byte ptr [rbp + rbp*2 - 0x69d80000], bl; in eax, dx; jmp rsp; 
0x000000000005d21e: add byte ptr [rax + rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000019bd5f: add byte ptr [rax + rax], al; add byte ptr [rbx + rbx*8 + 0x6d780000], bh; out dx, al; call qword ptr [rdi]; 
0x0000000000110e25: add byte ptr [rax + rax], al; add byte ptr [rcx + rcx*4 - 6], cl; mov rdi, r12; call rax; 
0x000000000019d5f7: add byte ptr [rax + rax], al; add byte ptr [rsp + rsi*8], dl; add al, al; out dx, eax; jmp qword ptr [rcx]; 
0x0000000000146726: add byte ptr [rax + rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001b0d6f: add byte ptr [rax + rax], bh; add ah, cl; sub eax, dword ptr [rdx]; add byte ptr [rax], bl; fdecstp; call qword ptr [rcx + 5]; 
0x000000000019a097: add byte ptr [rax + rax], bh; add byte ptr [rax], al; hlt; mov esi, 0x20000000; out dx, al; jmp qword ptr [rcx + 1]; 
0x00000000001a0b5f: add byte ptr [rax + rax], bh; add byte ptr [rax], al; mov esp, 0x38000129; sal ecx, cl; call rsi; 
0x000000000019d25f: add byte ptr [rax + rax], bh; add byte ptr [rax], al; mov esp, 0x80000f0; out dx, eax; jmp qword ptr [rbp + 4]; 
0x00000000001b3927: add byte ptr [rax + rax], bh; add byte ptr [rax], al; test byte ptr [rdi + 2], dl; add byte ptr [rax + 0x76], dl; idiv edi; ret 0; 
0x00000000001a9427: add byte ptr [rax + rax], bh; add byte ptr [rax], al; test byte ptr [rdx + 0x69e00001], dh; cmc; call rcx; 
0x00000000001aa497: add byte ptr [rax + rax], bl; add byte ptr [rax], al; hlt; ret 1; 
0x00000000001a6887: add byte ptr [rax + rax], bl; add byte ptr [rax], al; in al, 0x86; add dword ptr [rax], eax; sbb bl, 0xf4; call qword ptr [rdi]; 
0x0000000000198e2f: add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov word ptr [rax + rax - 0x120a0800], gs; jmp qword ptr [rbx]; 
0x000000000019ca47: add byte ptr [rax + rax], bl; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; call 0xffffffffbb09ca52; out dx, al; call qword ptr [rdi]; 
0x00000000001aeaaf: add byte ptr [rax + rax], bl; add byte ptr [rax], al; or al, 9; add al, byte ptr [rax]; cmp byte ptr [rdx - 0xa], bl; call qword ptr [rdi]; 
0x00000000001a073f: add byte ptr [rax + rax], bl; add byte ptr [rax], al; pushfq; and eax, 0xc9b80001; int1; jmp qword ptr [rbp]; 
0x0000000000193a27: add byte ptr [rax + rax], bl; add byte ptr [rax], al; test byte ptr [rax], bl; add byte ptr [rax], dl; or esp, ebp; jmp qword ptr [rcx]; 
0x000000000019632f: add byte ptr [rax + rax], bl; add byte ptr [rcx + rax*4 - 0x56b80000], cl; in eax, dx; call rcx; 
0x00000000001a892f: add byte ptr [rax + rax], bl; add byte ptr [rdi + 0x5d580001], cl; cmc; call qword ptr [rcx]; 
0x00000000001907c7: add byte ptr [rax + rax], ch; add byte ptr [rax], al; and al, 0x26; add byte ptr [rax], al; adc byte ptr [rbx - 0x16], ah; call qword ptr [rax]; 
0x000000000019d9ef: add byte ptr [rax + rax], ch; add byte ptr [rax], al; clc; add byte ptr [rax], al; fdivr dword ptr [rdi - 0x11]; jmp qword ptr [rcx + 0xd]; 
0x00000000001906df: add byte ptr [rax + rax], ch; add byte ptr [rax], al; cmp al, 0x25; add byte ptr [rax], al; sub byte ptr [rdx - 0x16], ah; call qword ptr [rdx]; 
0x00000000001a007f: add byte ptr [rax + rax], ch; add byte ptr [rax], al; fcomp qword ptr [rsi]; add dword ptr [rax], eax; mov byte ptr [rbx - 0xf], al; call rsi; 
0x000000000019fb5f: add byte ptr [rax + rax], ch; add byte ptr [rax], al; mov esp, 0xd8000119; sbb cl, dh; jmp qword ptr [rax + 1]; 
0x000000000018f167: add byte ptr [rax + rax], cl; add ah, al; sldt word ptr [rax]; nop; shr ecx, cl; call qword ptr [rcx + 5]; 
0x00000000001aba8f: add byte ptr [rax + rax], cl; add ah, ch; fadd dword ptr [rcx]; add byte ptr [rax - 0x13], cl; cmc; jmp qword ptr [rax]; 
0x000000000019ba6f: add byte ptr [rax + rax], cl; add ah, cl; fadd dword ptr [rax]; add al, bh; out dx, al; call rsp; 
0x00000000001afd6f: add byte ptr [rax + rax], cl; add ah, cl; sbb eax, dword ptr [rdx]; add al, bh; mov dh, 0xf6; call qword ptr [rdi]; 
0x00000000001a5d77: add byte ptr [rax + rax], cl; add ah, dl; jnp 0x1a5d80; add byte ptr [rax - 0x49], dh; hlt; call rdi; 
0x00000000001aba3f: add byte ptr [rax + rax], cl; add byte ptr [rax + rbx*8 - 0x1407ffff], bl; cmc; jmp qword ptr [rax + 1]; 
0x00000000001a51df: add byte ptr [rax + rax], cl; add byte ptr [rax + rsi*2], bh; add dword ptr [rax], eax; mov byte ptr [rcx + rdi*8], dl; call qword ptr [rax]; 
0x00000000001991ef: add byte ptr [rax + rax], cl; add byte ptr [rax + rsi*4], cl; add byte ptr [rax - 3], ch; in eax, dx; call qword ptr [rsi + 2]; 
0x00000000000f10f9: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000841d9: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000081161: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000081321: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000001a1f1f: add byte ptr [rax + rax], cl; add byte ptr [rbp + rdi + 1], bh; add byte ptr [rax], bh; div ecx; jmp qword ptr [rax + 1]; 
0x00000000001a0ed7: add byte ptr [rax + rax], cl; add byte ptr [rbp - 0x2b2fffff], dh; int1; jmp qword ptr [rbx]; 
0x00000000001a6ed7: add byte ptr [rax + rax], cl; add byte ptr [rcx*4 - 0x12fffff], dh; hlt; jmp rax; 
0x00000000001a50cf: add byte ptr [rax + rax], cl; add byte ptr [rdi + rbp*2], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xc], ch; call qword ptr [rax + 6]; 
0x00000000001a70f7: add byte ptr [rax + rax], cl; add byte ptr [rdi + rcx*4 + 1], dl; add byte ptr [rax + 7], dl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001a843f: add byte ptr [rax + rax], cl; add byte ptr [rdx + 0x43c80001], bl; cmc; jmp rdi; 
0x00000000001ac7ef: add byte ptr [rax + rax], cl; add byte ptr [rsi + 1], cl; add al, ch; add dh, dh; jmp qword ptr [rbx + 1]; 
0x00000000001aa017: add byte ptr [rax + rax], cl; add byte ptr [rsi + rdi*4 + 1], dh; add byte ptr [rax - 0x7b], al; cmc; call qword ptr [rsi + 6]; 
0x00000000001a5dff: add byte ptr [rax + rax], cl; add byte ptr [rsp + rdi*2 + 1], bl; add byte ptr [rax - 0x47], cl; hlt; call rdi; 
0x00000000001945ef: add byte ptr [rax + rax], cl; add byte ptr [rsp], cl; add byte ptr [rax], bl; movsb byte ptr [rdi], byte ptr [rsi]; in al, dx; call rdx; 
0x000000000000fa1d: add byte ptr [rax + rax], cl; push rax; call qword ptr [rax]; 
0x000000000000a1e5: add byte ptr [rax + rax], cl; push rax; ret 0x10; 
0x000000000000452d: add byte ptr [rax + rax], cl; push rax; ret 0xb; 
0x00000000000066bd: add byte ptr [rax + rax], cl; push rax; ret 7; 
0x000000000000c29d: add byte ptr [rax + rax], cl; rcl ch, 1; adc al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000008955: add byte ptr [rax + rax], cl; rol byte ptr [rbp + 8], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x000000000000eccd: add byte ptr [rax + rax], cl; ror dl, 1; adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 3; 
0x00000000001b0797: add byte ptr [rax + rax], dh; add byte ptr [rax], al; hlt; and eax, 0x65300002; clc; jmp qword ptr [rbx]; 
0x000000000019d787: add byte ptr [rax + rax], dh; add byte ptr [rax], al; in al, 0xf5; add byte ptr [rax], al; adc byte ptr [rdi - 0x11], ah; jmp qword ptr [rsi]; 
0x00000000001b070f: add byte ptr [rax + rax], dh; add byte ptr [rax], al; insb byte ptr [rdi], dx; and eax, 0x65480002; clc; jmp qword ptr [rbx]; 
0x00000000001a6347: add byte ptr [rax + rax], dh; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rcx], 0xf4c5c000; call qword ptr [rax + 5]; 
0x00000000001b0a07: add byte ptr [rax + rax], dh; add byte ptr [rax], al; sub byte ptr fs:[rdx], al; add byte ptr [rax + 0x64], dh; clc; jmp qword ptr [rbx]; 
0x00000000001a50b7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; adc al, 0x6f; add dword ptr [rax], eax; and byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001a7bb7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; adc al, 0x9a; add dword ptr [rax], eax; sub byte ptr [rsi], 0xf5; jmp qword ptr [rcx]; 
0x00000000001a4fa7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; add al, 0x6e; add dword ptr [rax], eax; adc byte ptr [rbp - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001ac4a7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; add al, 0xe3; add dword ptr [rax], eax; cmp ch, 0xf5; call qword ptr [rax]; 
0x00000000001aa8c7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; and al, 0xc7; add dword ptr [rax], eax; rcl dh, 0xf5; jmp qword ptr [rsi]; 
0x000000000019e4c7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; and al, 3; add dword ptr [rax], eax; or byte ptr [rdx - 0x10], 0xff; ret; 
0x000000000019c9e7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; call 0xffffffffba09c9f2; out dx, al; call qword ptr [rax]; 
0x0000000000199b9f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; cld; mov ecx, 0xb5180000; cld; jmp qword ptr [rcx]; 
0x00000000001a797f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; fcom qword ptr [rdi + 0x2b680001]; cmc; call qword ptr [rax]; 
0x00000000001a7a7f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; fcomp qword ptr [rax + 0x2d380001]; cmc; jmp qword ptr [rcx]; 
0x00000000001b157f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; fdiv qword ptr [rbx]; add al, byte ptr [rax]; div rsi; call qword ptr [rbx]; 
0x00000000001a5c7f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; fdivr qword ptr [rdx + 1]; add byte ptr [rax], bh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a6a7f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; fmul qword ptr [rax - 0x2007ffff]; hlt; jmp qword ptr [rcx]; 
0x00000000001b6397: add byte ptr [rax + rax], dl; add byte ptr [rax], al; hlt; add dword ptr [rdx], 0xf7f85000; call qword ptr [rbx]; 
0x00000000001aa597: add byte ptr [rax + rax], dl; add byte ptr [rax], al; hlt; ret; 
0x00000000001a4887: add byte ptr [rax + rax], dl; add byte ptr [rax], al; in al, 0x66; add dword ptr [rax], eax; shl rdi, 1; jmp qword ptr [rax]; 
0x00000000001a5387: add byte ptr [rax + rax], dl; add byte ptr [rax], al; in al, 0x71; add dword ptr [rax], eax; xor byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x00000000001a4b8f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; in al, dx; imul eax, dword ptr [rcx], 0xf4639800; jmp qword ptr [rax]; 
0x00000000001aa98f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; in al, dx; mov dword ptr [rcx], 0xf5d70800; call qword ptr [rsi]; 
0x00000000001a290f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; insb byte ptr [rdi], dx; add dword ptr [r8], r8d; mov sil, dl; jmp qword ptr [rbp]; 
0x00000000001aa90f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; insb byte ptr [rdi], dx; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rsi]; 
0x00000000001a5ce7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; jnp 0x1a5cf0; add al, dh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x000000000019d1e7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; lock add byte ptr [rax], al; mov al, 0x1d; out dx, eax; call qword ptr [rax]; 
0x00000000001b2b4f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; add al, byte ptr [r8]; cmp byte ptr [rbx - 9], cl; call qword ptr [rbx]; 
0x000000000019a44f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret 0; 
0x00000000001aa54f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret; 
0x00000000001a5357: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov ah, 0x71; add dword ptr [rax], eax; add byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x00000000001a9a57: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov ah, 0xb8; add dword ptr [rax], eax; jo 0x1a9a58; jmp qword ptr [rdx]; 
0x00000000001aa7ef: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov byte ptr [rcx], 0; sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a69ef: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov byte ptr [rcx], r8b; add byte ptr [rax - 0x21], ch; hlt; jmp qword ptr [rcx]; 
0x0000000000199ee7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov ebp, 0x1ba00000; out dx, al; call qword ptr [rcx]; 
0x00000000001a4d5f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0x1800016b; hlt; jmp qword ptr [rcx]; 
0x00000000001a825f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0x180001a0; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001aa75f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0x180001c5; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001ac35f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0x280001e1; sti; cmc; call qword ptr [rax]; 
0x00000000001a822f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rax + 0x3ae80001], fs; cmc; jmp qword ptr [rcx]; 
0x000000000019222f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rax], es; add al, cl; mov cl, 0xea; call qword ptr [rax]; 
0x00000000001a7f2f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rbp + 0x33080001], ds; cmc; jmp qword ptr [rcx]; 
0x0000000000190b2f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rcx], gs; add byte ptr [rax], al; mov byte ptr [rcx - 0x16], ch; jmp qword ptr [rcx]; 
0x00000000001a7c2f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rdx + 0x2ef80001], ds; cmc; jmp qword ptr [rcx]; 
0x00000000001a642f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rdx - 0x3377ffff], es; hlt; jmp qword ptr [rcx]; 
0x00000000001b2a47: add byte ptr [rax + rax], dl; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add al, byte ptr [rax]; ror byte ptr [rax - 9], 1; jmp qword ptr [rsi]; 
0x0000000000192b47: add byte ptr [rax + rax], dl; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [r8], al; cmp byte ptr [rdx], 0xfa; jmp qword ptr [rcx]; 
0x0000000000199cff: add byte ptr [rax + rax], dl; add byte ptr [rax], al; pop rsp; mov ebx, 0x14180000; out dx, al; jmp qword ptr [rcx]; 
0x000000000019a4ff: add byte ptr [rax + rax], dl; add byte ptr [rax], al; pop rsp; ret; 
0x00000000001a7ee7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; popfq; add dword ptr [rax], eax; sal byte ptr [rdx], 0xf5; jmp qword ptr [rcx]; 
0x00000000001931e7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; push rax; add byte ptr [rax], al; adc byte ptr [rsi - 0x15], ah; call qword ptr [rdi]; 
0x00000000001aa8f7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; push rsp; mov dword ptr [rcx], 0xf5d6f000; jmp qword ptr [rsi]; 
0x00000000001aa63f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; pushfq; vaddps xmm10, xmm15, xmm13; cmc; jmp qword ptr [rsi]; 
0x00000000001b2abf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; sbb al, 0x49; add al, byte ptr [rax]; or byte ptr [rbx - 9], cl; jmp qword ptr [rax]; 
0x00000000001a4bbf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; sbb al, 0x6a; add dword ptr [rax], eax; fsub dword ptr [rbx - 0xc]; jmp qword ptr [rcx]; 
0x00000000001a62bf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; sbb al, 0x81; add dword ptr [rax], eax; pop rax; ret; 
0x00000000001b51cf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; sub al, 0x70; add al, byte ptr [rax]; sbb byte ptr [rbx + rdi*8], al; jmp qword ptr [rdx]; 
0x00000000001aae27: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test ah, cl; add dword ptr [rax], eax; shl al, 0xf5; call qword ptr [rax]; 
0x00000000001aa927: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test bh, al; add dword ptr [rax], eax; push rax; ret 0xfff8; 
0x000000000019d127: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test bh, ch; add byte ptr [rax], al; cmp bl, 0xee; call qword ptr [rax]; 
0x00000000001a7527: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rbx + 0x20c00001], dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a8527: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rbx + 0x47200001], ah; cmc; jmp rax; 
0x0000000000197527: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rbx - 0x42800000], dl; in eax, dx; jmp qword ptr [rax]; 
0x00000000001a7b27: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rcx + 0x2dc00001], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a5b27: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rcx + 1], bh; add al, dl; mov al, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a5327: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rcx + 1], dh; add al, dl; jp 0x1a5327; jmp qword ptr [rcx]; 
0x00000000001a6927: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rdi - 0x22efffff], al; hlt; call qword ptr [rdx]; 
0x00000000001a8427: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rdx + 0x43900001], ah; cmc; call qword ptr [rax]; 
0x00000000001b65e7: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rdx], r8b; add byte ptr [rax], dl; push rdi; call qword ptr [rcx]; 
0x00000000001a5027: add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rsi + 1], ch; add byte ptr [rax + 0x6e], ah; hlt; jmp qword ptr [rcx]; 
0x00000000001aa537: add byte ptr [rax + rax], dl; add byte ptr [rax], al; xchg eax, esp; ret; 
0x000000000019f927: add byte ptr [rax + rax], dl; add byte ptr [rdi + rdx + 0x7a00001], al; int1; call qword ptr [rax]; 
0x00000000001b0a0b: add byte ptr [rax + rbp + 2], ah; add byte ptr [rax + 0x64], dh; clc; jmp qword ptr [rbx]; 
0x000000000018c5cf: add byte ptr [rax + rbp - 8], al; dec esp; add al, byte ptr ds:[rax]; push rsp; sub al, bh; jmp rsp; 
0x000000000018c5d7: add byte ptr [rax + rbp - 8], dl; jmp rsp; 
0x000000000018ba1f: add byte ptr [rax + rbp - 9], al; jmp rsp; 
0x00000000000a34a5: add byte ptr [rax + rbp*2 + 0x48], dh; lea eax, dword ptr [rdi - 0x10]; ret; 
0x000000000018d05f: add byte ptr [rax + rbp*2 - 0x70b30007], ah; add al, byte ptr [rax]; and al, 0x69; stc; call rsp; 
0x000000000018d947: add byte ptr [rax + rbp*2], dl; cli; call rsp; 
0x000000000019ca4b: add byte ptr [rax + rbp*8 - 0x45100000], ah; out dx, al; call qword ptr [rdi]; 
0x000000000007d759: add byte ptr [rax + rbp*8], al; adc byte ptr [rcx + 7], dh; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000007d872: add byte ptr [rax + rbp*8], al; imul dword ptr [rdi + 7]; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000193a2b: add byte ptr [rax + rbx*2 + 0x9100000], al; in al, dx; jmp qword ptr [rcx]; 
0x000000000018c877: add byte ptr [rax + rbx*2 - 8], al; call rsp; 
0x000000000018aaa7: add byte ptr [rax + rbx*4 - 0xd], dh; jmp rsp; 
0x00000000001979eb: add byte ptr [rax + rbx*4], al; add byte ptr [rax], dh; ret; 
0x00000000001aba43: add byte ptr [rax + rbx*8 - 0x1407ffff], bl; cmc; jmp qword ptr [rax + 1]; 
0x00000000000a37cb: add byte ptr [rax + rcx + 0x48], dh; lea eax, dword ptr [rip + 0xbdacb]; ret; 
0x000000000008be7b: add byte ptr [rax + rcx + 0x48], dh; lea eax, dword ptr [rip + 0xd3ddb]; ret; 
0x00000000000ffb2d: add byte ptr [rax + rcx + 0x5b], dh; pop rbp; pop r12; ret; 
0x00000000000c3b2a: add byte ptr [rax + rcx + 0xf], dh; mov dh, 0x42; add cl, byte ptr [rax - 0x7d]; ret 0x8301; 
0x000000000018c37f: add byte ptr [rax + rcx - 8], ah; jmp rsp; 
0x00000000000f3c7d: add byte ptr [rax + rcx - 9], dh; ret 0xfc07; 
0x0000000000022766: add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000c847e: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [r14 + 0xf], r8b; mov dh, 0x3c; mov eax, 0xfffb08e9; jmp qword ptr [rsi - 0x70]; 
0x0000000000047596: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x77], cl; ret 0xde8; 
0x00000000001a69f3: add byte ptr [rax + rcx*4 + 1], cl; add byte ptr [rax - 0x21], ch; hlt; jmp qword ptr [rcx]; 
0x00000000001a6a53: add byte ptr [rax + rcx*4 - 0x2037ffff], ch; hlt; jmp qword ptr [rcx]; 
0x00000000001a6a3b: add byte ptr [rax + rcx*4 - 0x204fffff], dl; hlt; jmp qword ptr [rcx]; 
0x00000000001a69c3: add byte ptr [rax + rcx*4], bl; add dword ptr [rax], eax; or bh, bl; hlt; jmp qword ptr [rcx]; 
0x00000000001a5a5b: add byte ptr [rax + rdi*2 - 0x502fffff], dh; hlt; call qword ptr [rax]; 
0x0000000000195a4b: add byte ptr [rax + rdi*2 - 0x5e200000], ah; in eax, dx; call qword ptr [rax]; 
0x00000000001a9a5b: add byte ptr [rax + rdi*4 + 0x70400001], dh; cmc; jmp qword ptr [rdx]; 
0x00000000001891a7: add byte ptr [rax + rdi*4 - 0x12], ah; call rsp; 
0x0000000000071405: add byte ptr [rax + rdx - 0x75], dh; jo 0x71391; sar byte ptr [rax + 9], 0xf3; ret; 
0x00000000000c98fd: add byte ptr [rax + rdx - 0x7f], dh; jmp qword ptr [rbp + 4]; 
0x000000000018c83f: add byte ptr [rax + rdx*2 - 8], ah; call rsp; 
0x00000000001a51e3: add byte ptr [rax + rsi*2], bh; add dword ptr [rax], eax; mov byte ptr [rcx + rdi*8], dl; call qword ptr [rax]; 
0x00000000001b51d3: add byte ptr [rax + rsi*2], ch; add al, byte ptr [rax]; sbb byte ptr [rbx + rdi*8], al; jmp qword ptr [rdx]; 
0x000000000018d31f: add byte ptr [rax + rsi*4 - 7], ah; ljmp ptr [rbx - 0x4f0bfffe]; stc; jmp rsp; 
0x00000000001991f3: add byte ptr [rax + rsi*4], cl; add byte ptr [rax - 3], ch; in eax, dx; call qword ptr [rsi + 2]; 
0x000000000019d263: add byte ptr [rax + rsi*8 + 0x44080000], bh; out dx, eax; jmp qword ptr [rbp + 4]; 
0x000000000019d1bb: add byte ptr [rax + rsi*8], dl; add byte ptr [rax], al; nop; adc bh, dl; call qword ptr [rax]; 
0x00000000001abb07: add byte ptr [rax - 0x11], cl; cmc; jmp qword ptr [rax]; 
0x0000000000188bdf: add byte ptr [rax - 0x12], dh; dec dword ptr [rsi + rcx*8 + 0x608f0000]; out dx, al; call rsp; 
0x000000000004fdce: add byte ptr [rax - 0x12f43], al; jmp qword ptr [rsi + 0xf]; 
0x00000000001aba97: add byte ptr [rax - 0x13], cl; cmc; jmp qword ptr [rax]; 
0x0000000000188a6f: add byte ptr [rax - 0x13], dh; dec esp; ret; 
0x000000000019ce77: add byte ptr [rax - 0x14], bh; out dx, al; call qword ptr [rax]; 
0x00000000001261dd: add byte ptr [rax - 0x168b7f80], 0x89; ret 0x48bf; 
0x000000000011231c: add byte ptr [rax - 0x168b7f80], 0x89; ret 0x894c; 
0x0000000000031cbe: add byte ptr [rax - 0x178b7f80], 0x89; ret 0x8b4c; 
0x00000000001ab927: add byte ptr [rax - 0x17], bh; cmc; call qword ptr [rax]; 
0x00000000001ab8f7: add byte ptr [rax - 0x17], ch; cmc; call qword ptr [rax]; 
0x00000000001ab93f: add byte ptr [rax - 0x17], dh; cmc; call qword ptr [rax]; 
0x00000000000e6ad3: add byte ptr [rax - 0x188b7f80], 0x89; ret 0x8b49; 
0x00000000001ab6bf: add byte ptr [rax - 0x18], ah; cmc; call qword ptr [rax]; 
0x00000000001ab6d7: add byte ptr [rax - 0x18], bl; cmc; call qword ptr [rbx]; 
0x00000000001ab6a7: add byte ptr [rax - 0x18], ch; cmc; call qword ptr [rax]; 
0x000000000013563e: add byte ptr [rax - 0x1be417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013562e: add byte ptr [rax - 0x1c3417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013561e: add byte ptr [rax - 0x1d9417], dl; jmp qword ptr [rsi + 0x2e]; 
0x00000000001a1967: add byte ptr [rax - 0x1d], ch; int1; call rsp; 
0x000000000013564e: add byte ptr [rax - 0x1e3417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013560e: add byte ptr [rax - 0x20d417], dl; jmp qword ptr [rsi + 0x2e]; 
0x00000000001a69f7: add byte ptr [rax - 0x21], ch; hlt; jmp qword ptr [rcx]; 
0x00000000001a147f: add byte ptr [rax - 0x21], dl; int1; jmp qword ptr [rdi + 1]; 
0x00000000001a68cf: add byte ptr [rax - 0x24], dh; hlt; call qword ptr [rax]; 
0x00000000000c113c: add byte ptr [rax - 0x25080d77], al; cmove edx, ecx; mov dword ptr fs:[0x2d4], edx; mov eax, 0x3a; syscall; 
0x000000000019cc4f: add byte ptr [rax - 0x26], ah; out dx, al; jmp rdx; 
0x000000000011594e: add byte ptr [rax - 0x2976178c], 0xc1; out dx, al; adc bh, dh; ret 0x8080; 
0x00000000001aabff: add byte ptr [rax - 0x29], al; cmc; jmp qword ptr [rax + 1]; 
0x00000000001aa86f: add byte ptr [rax - 0x2a], ah; cmc; jmp qword ptr [rsi]; 
0x00000000001aa887: add byte ptr [rax - 0x2a], bh; cmc; jmp qword ptr [rsi]; 
0x00000000001aa857: add byte ptr [rax - 0x2a], cl; cmc; jmp qword ptr [rsi]; 
0x00000000001aa62f: add byte ptr [rax - 0x2b], al; cmc; jmp qword ptr [rsi]; 
0x00000000001aa647: add byte ptr [rax - 0x2b], bl; cmc; jmp qword ptr [rsi]; 
0x0000000000197e87: add byte ptr [rax - 0x2b], ch; in eax, dx; call rcx; 
0x00000000001aa65f: add byte ptr [rax - 0x2b], dh; cmc; jmp qword ptr [rsi]; 
0x00000000001a10df: add byte ptr [rax - 0x2b], dl; int1; jmp qword ptr [rdx]; 
0x00000000001a0aa7: add byte ptr [rax - 0x33], ch; int1; jmp qword ptr [rax]; 
0x00000000001a641f: add byte ptr [rax - 0x34], dh; hlt; jmp qword ptr [rcx]; 
0x0000000000036493: add byte ptr [rax - 0x3791f09a], al; movss dword ptr [rdi], xmm1; ret; 
0x0000000000133adc: add byte ptr [rax - 0x39], cl; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000074d48: add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [r15 + 0xd8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x0000000000075015: add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000fc76f: add byte ptr [rax - 0x39], cl; add eax, 0x2c1b85; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000fc71d: add byte ptr [rax - 0x39], cl; add eax, 0x2c1bd7; add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000f3931: add byte ptr [rax - 0x39], cl; add eax, 0x2cdcf3; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000007c933: add byte ptr [rax - 0x39], cl; add eax, 0x344089; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001293da: add byte ptr [rax - 0x39], cl; and al, 0x38; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x000000000011f958: add byte ptr [rax - 0x39], cl; and al, 8; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax]; 
0x00000000000c0f86: add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add al, ch; fdivr qword ptr [rax - 0x76b70005]; ret; 
0x000000000007bbc8: add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000007b109: add byte ptr [rax - 0x39], cl; push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000b13d4: add byte ptr [rax - 0x39], cl; ret 0; 
0x00000000000b1324: add byte ptr [rax - 0x39], cl; ret 0x400; 
0x0000000000070186: add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000035537: add byte ptr [rax - 0x39], cl; ret; 
0x00000000000a2eff: add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000a2edf: add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x00000000000a2f3f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000a2eef: add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000a2f2f: add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000036caf: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000007b9f6: add byte ptr [rax - 0x39], cl; sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000001aa71f: add byte ptr [rax - 0x3d], al; clc; jmp qword ptr [rsi]; 
0x00000000001a62c7: add byte ptr [rax - 0x3d], bl; hlt; jmp qword ptr [rsi]; 
0x0000000000036715: add byte ptr [rax - 0x3f000001], al; shr eax, 0x1f; ret; 
0x000000000003666e: add byte ptr [rax - 0x3f28f09a], dl; and eax, 8; ret; 
0x00000000000f2cf6: add byte ptr [rax - 0x3f7cb7f0], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000363fe: add byte ptr [rax - 0x3f81f09a], dl; and eax, 0x7fffffff; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x000000000003646a: add byte ptr [rax - 0x3f91f09a], al; ret; 
0x0000000000118f98: add byte ptr [rax - 0x3f], cl; cli; add al, 0x48; add edx, 1; syscall; 
0x000000000002c12d: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x00000000000beb8f: add byte ptr [rax - 0x3f], cl; ret 0xeb11; 
0x0000000000197827: add byte ptr [rax - 0x40], ch; in eax, dx; jmp qword ptr [rbp]; 
0x00000000001a6057: add byte ptr [rax - 0x42], ch; hlt; jmp qword ptr [rcx]; 
0x00000000001a5f7f: add byte ptr [rax - 0x44], dh; hlt; jmp qword ptr [rcx]; 
0x000000000019ca6f: add byte ptr [rax - 0x45], dh; out dx, al; jmp qword ptr [rdx]; 
0x00000000001717af: add byte ptr [rax - 0x45fffffc], bh; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000000b5194: add byte ptr [rax - 0x46], cl; ret; 
0x00000000001a5e07: add byte ptr [rax - 0x47], cl; hlt; call rdi; 
0x000000000011ad4b: add byte ptr [rax - 0x48], al; add byte ptr [rdi], cl; shr r9b, 1; ret 0xfffe; 
0x000000000003e824: add byte ptr [rax - 0x48], cl; ret 0xffff; 
0x00000000001a5d7f: add byte ptr [rax - 0x49], dh; hlt; call rdi; 
0x000000000004c121: add byte ptr [rax - 0x4fa43], al; call qword ptr [rbx + 0xf]; 
0x000000000004b6f0: add byte ptr [rax - 0x50743], al; call qword ptr [rbx + 0xf]; 
0x00000000001a58af: add byte ptr [rax - 0x55], ah; hlt; jmp qword ptr [rbx]; 
0x0000000000196407: add byte ptr [rax - 0x56], bl; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000196337: add byte ptr [rax - 0x57], cl; in eax, dx; call rcx; 
0x000000000018945f: add byte ptr [rax - 0x63001103], bh; or al, 1; add bl, dl; std; out dx, al; jmp rsp; 
0x000000000019c5df: add byte ptr [rax - 0x68], ah; out dx, al; call qword ptr [rdx]; 
0x00000000000c42e8: add byte ptr [rax - 0x6bf08406], al; ret 0xb60f; 
0x000000000013566e: add byte ptr [rax - 0x6e417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000017abe8: add byte ptr [rax - 0x6fef0006], dl; cli; jmp qword ptr [rax]; 
0x000000000019c22b: add byte ptr [rax - 0x6ff00000], al; out dx, al; jmp qword ptr [rbp + 2]; 
0x0000000000194a67: add byte ptr [rax - 0x72], ch; in eax, dx; call qword ptr [rax]; 
0x00000000000bcb2c: add byte ptr [rax - 0x73], cl; adc al, 0xff; lea rax, qword ptr [rax + rdx*8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000074917: add byte ptr [rax - 0x73], cl; adc byte ptr [r8 + 0x39], r9b; ror dword ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3948; 
0x000000000005e538: add byte ptr [rax - 0x73], cl; adc eax, 0x118c40; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x0000000000022b62: add byte ptr [rax - 0x73], cl; adc eax, 0x1432b6; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000012ab16: add byte ptr [rax - 0x73], cl; adc eax, 0x298d62; mov qword ptr fs:[rax], rdx; ret; 
0x00000000001211cf: add byte ptr [rax - 0x73], cl; adc eax, 0x29c9a9; mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x0000000000108a0b: add byte ptr [rax - 0x73], cl; adc eax, 0x3f14d; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000120d40: add byte ptr [rax - 0x73], cl; adc eax, 0x59e68; mov ecx, eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000e1873: add byte ptr [rax - 0x73], cl; adc eax, 0x98a2d; movzx ecx, al; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000dfbee: add byte ptr [rax - 0x73], cl; adc eax, 0x9a69e; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000008c44b: add byte ptr [rax - 0x73], cl; adc eax, 0xbb71d; cmove rax, rdx; add rsp, 8; ret; 
0x000000000011ffe6: add byte ptr [rax - 0x73], cl; adc eax, 0xcf02; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x000000000012a9dc: add byte ptr [rax - 0x73], cl; adc eax, 0xffff567c; mov esi, 3; mov rdi, r15; call qword ptr [rax]; 
0x000000000008b8db: add byte ptr [rax - 0x73], cl; adc eax, 0xfffffa1d; cmove rax, rdx; add rsp, 8; ret; 
0x000000000007465f: add byte ptr [rax - 0x73], cl; add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x0000000000086d8a: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000647f7: add byte ptr [rax - 0x73], cl; add eax, 0x113299; movsxd rdx, dword ptr [rax + r12*4]; add rax, rdx; jmp rax; 
0x000000000002202f: add byte ptr [rax - 0x73], cl; add eax, 0x15a154; ret; 
0x000000000002203f: add byte ptr [rax - 0x73], cl; add eax, 0x15c12b; ret; 
0x00000000000f9d0c: add byte ptr [rax - 0x73], cl; add eax, 0x2c7b2c; add rsp, 0x18; ret; 
0x00000000000f9755: add byte ptr [rax - 0x73], cl; add eax, 0x2c8093; add rsp, 8; ret; 
0x00000000000f94fe: add byte ptr [rax - 0x73], cl; add eax, 0x2c82b2; ret; 
0x00000000000f933e: add byte ptr [rax - 0x73], cl; add eax, 0x2c8472; ret; 
0x00000000000f916b: add byte ptr [rax - 0x73], cl; add eax, 0x2c8645; add rsp, 8; ret; 
0x000000000003d11f: add byte ptr [rax - 0x73], cl; add eax, 0x386c6f; add rsp, 8; ret; 
0x00000000000225f5: add byte ptr [rax - 0x73], cl; add eax, 0x3a1603; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x0000000000127efc: add byte ptr [rax - 0x73], cl; add eax, 0x541c0; mov esi, esi; movsxd rcx, dword ptr [rax + rsi*4]; add rax, rcx; jmp rax; 
0x000000000012769c: add byte ptr [rax - 0x73], cl; add eax, 0x549e0; mov esi, esi; movsxd rsi, dword ptr [rax + rsi*4]; add rax, rsi; jmp rax; 
0x0000000000123acf: add byte ptr [rax - 0x73], cl; add eax, 0x570f1; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000e7271: add byte ptr [rax - 0x73], cl; add eax, 0x932db; movsxd rdx, dword ptr [rax + r11*4]; add rax, rdx; jmp rax; 
0x00000000000d43a2: add byte ptr [rax - 0x73], cl; add eax, 0xa5b16; movzx r13d, r13b; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x00000000000c3280: add byte ptr [rax - 0x73], cl; add eax, 0xb6510; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000c2bbb: add byte ptr [rax - 0x73], cl; add eax, 0xb67f9; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000c2861: add byte ptr [rax - 0x73], cl; add eax, 0xb6aff; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x000000000008356d: add byte ptr [rax - 0x73], cl; add eax, 0xf4aab; movsxd rdx, dword ptr [rax + rdi*4]; add rax, rdx; jmp rax; 
0x000000000008b9ce: add byte ptr [rax - 0x73], cl; add qword ptr [rax + 0xf], rcx; ror dword ptr [r8 - 0x77], 1; adc eax, 0x335316; add rsp, 0x100; ret; 
0x00000000000f4aca: add byte ptr [rax - 0x73], cl; and al, 8; call 0xf4c10; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000022d7e: add byte ptr [rax - 0x73], cl; and qword ptr [rax - 0x77], rcx; fimul word ptr [rax - 0x77]; ret 0x8348; 
0x0000000000023042: add byte ptr [rax - 0x73], cl; and qword ptr [rax - 0x77], rcx; ret 0x8948; 
0x00000000000a34ef: add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000a34ff: add byte ptr [rax - 0x73], cl; cld; ret; 
0x00000000001120af: add byte ptr [rax - 0x73], cl; cmp eax, 0x2b0ec9; call rax; 
0x00000000000bc80e: add byte ptr [rax - 0x73], cl; cmp eax, 0x3032ea; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc7ee: add byte ptr [rax - 0x73], cl; cmp eax, 0x30330a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000bc70f: add byte ptr [rax - 0x73], cl; cmp eax, 0x3033e9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc6ed: add byte ptr [rax - 0x73], cl; cmp eax, 0x30340b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc506: add byte ptr [rax - 0x73], cl; cmp eax, 0x3035f2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc4db: add byte ptr [rax - 0x73], cl; cmp eax, 0x30361d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc38e: add byte ptr [rax - 0x73], cl; cmp eax, 0x30376a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc329: add byte ptr [rax - 0x73], cl; cmp eax, 0x3037cf; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aeffe: add byte ptr [rax - 0x73], cl; cmp eax, 0x310afa; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aef47: add byte ptr [rax - 0x73], cl; cmp eax, 0x310bb1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008aaa1: add byte ptr [rax - 0x73], cl; cmp eax, 0x336247; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340ee: add byte ptr [rax - 0x73], cl; cmp eax, 0x38bb8a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340c6: add byte ptr [rax - 0x73], cl; cmp eax, 0x38bbb2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000321aa: add byte ptr [rax - 0x73], cl; cmp eax, 0x38dbae; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032133: add byte ptr [rax - 0x73], cl; cmp eax, 0x38dc25; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003204e: add byte ptr [rax - 0x73], cl; cmp eax, 0x38dd0a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032026: add byte ptr [rax - 0x73], cl; cmp eax, 0x38dd32; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e39: add byte ptr [rax - 0x73], cl; cmp eax, 0x38debf; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e0c: add byte ptr [rax - 0x73], cl; cmp eax, 0x38deec; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000031b68: add byte ptr [rax - 0x73], cl; cmp eax, 0x38df90; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aa7: add byte ptr [rax - 0x73], cl; cmp eax, 0x38e051; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031b95: add byte ptr [rax - 0x73], cl; cmp eax, 0x38e0e3; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031ad2: add byte ptr [rax - 0x73], cl; cmp eax, 0x38e1a6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031af4: add byte ptr [rax - 0x73], cl; cmp eax, 0x38e204; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318cc: add byte ptr [rax - 0x73], cl; cmp eax, 0x38e22c; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a85: add byte ptr [rax - 0x73], cl; cmp eax, 0x38e273; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318f3: add byte ptr [rax - 0x73], cl; cmp eax, 0x38e385; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000305e6: add byte ptr [rax - 0x73], cl; cmp eax, 0x38f692; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000304fe: add byte ptr [rax - 0x73], cl; cmp eax, 0x38f77a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003039e: add byte ptr [rax - 0x73], cl; cmp eax, 0x38f8da; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030376: add byte ptr [rax - 0x73], cl; cmp eax, 0x38f902; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f896: add byte ptr [rax - 0x73], cl; cmp eax, 0x390262; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f876: add byte ptr [rax - 0x73], cl; cmp eax, 0x390282; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7d6: add byte ptr [rax - 0x73], cl; cmp eax, 0x390322; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7ab: add byte ptr [rax - 0x73], cl; cmp eax, 0x39034d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f5cf: add byte ptr [rax - 0x73], cl; cmp eax, 0x390529; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f57d: add byte ptr [rax - 0x73], cl; cmp eax, 0x39057b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f46b: add byte ptr [rax - 0x73], cl; cmp eax, 0x39068d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d753: add byte ptr [rax - 0x73], cl; cmp eax, 0x3923a5; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d731: add byte ptr [rax - 0x73], cl; cmp eax, 0x3923c7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d50e: add byte ptr [rax - 0x73], cl; cmp eax, 0x3925ea; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d4e6: add byte ptr [rax - 0x73], cl; cmp eax, 0x392612; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d49a: add byte ptr [rax - 0x73], cl; cmp eax, 0x39265e; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d286: add byte ptr [rax - 0x73], cl; cmp eax, 0x392872; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d116: add byte ptr [rax - 0x73], cl; cmp eax, 0x3929e2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002458d: add byte ptr [rax - 0x73], cl; cmp eax, 0x39b4db; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000243a5: add byte ptr [rax - 0x73], cl; cmp eax, 0x39b6c3; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c7c0c: add byte ptr [rax - 0x73], cl; cmp eax, 0xb1cc8; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000c644b: add byte ptr [rax - 0x73], cl; cmp eax, 0xb3399; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000b8277: add byte ptr [rax - 0x73], cl; cmp eax, 0xc0d11; movzx edx, sil; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000a34df: add byte ptr [rax - 0x73], cl; hlt; ret; 
0x000000000006d28b: add byte ptr [rax - 0x73], cl; or eax, 0x10ac1d; movsxd rdx, dword ptr [rcx + rdx*4]; add rcx, rdx; jmp rcx; 
0x0000000000064658: add byte ptr [rax - 0x73], cl; or eax, 0x11337c; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000054a4a: add byte ptr [rax - 0x73], cl; or eax, 0x122522; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x00000000000d4453: add byte ptr [rax - 0x73], cl; or eax, 0xa5c35; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000137265: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000028e71: add byte ptr [rax - 0x73], cl; pop rax; add dword ptr [rcx + rcx*4 + 0x55], eax; add byte ptr [rcx], dh; ror byte ptr [rax + 0x39], cl; ret; 
0x0000000000079668: add byte ptr [rax - 0x73], cl; push rax; add ecx, ebp; sar esi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000000f540f: add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000096c8f: add byte ptr [rax - 0x73], cl; push rcx; add esi, eax; add dword ptr [rax], eax; mov qword ptr [rdi], rdx; ret; 
0x0000000000034ed1: add byte ptr [rax - 0x73], cl; sbb eax, 0x13dadf; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000000f7ef7: add byte ptr [rax - 0x73], cl; sbb eax, 0x865af; mov rax, rbx; pop rbx; ret; 
0x0000000000074e73: add byte ptr [rax - 0x73], cl; test al, 0x38; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rsi + rsi*4 - 0xa]; ret 0x7508; 
0x000000000006d178: add byte ptr [rax - 0x73], cl; xor eax, 0x10ac74; movsxd rcx, dword ptr [rsi + rcx*4]; add rsi, rcx; jmp rsi; 
0x000000000006c80f: add byte ptr [rax - 0x73], cl; xor eax, 0x10b479; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x0000000000046333: add byte ptr [rax - 0x73], cl; xor eax, 0x195; call rax; 
0x000000000006f7e8: add byte ptr [rax - 0x73], cl; xor eax, 0x30; call rax; 
0x0000000000024586: add byte ptr [rax - 0x73], cl; xor eax, 0xab2; lea rdi, qword ptr [rip + 0x39b4db]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002439e: add byte ptr [rax - 0x73], cl; xor eax, 0xc9a; lea rdi, qword ptr [rip + 0x39b6c3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000a1a5f: add byte ptr [rax - 0x73], cl; xor eax, 0xd6e59; movsxd rax, dword ptr [rsi + rdi*4]; add rsi, rax; jmp rsi; 
0x00000000000d0486: add byte ptr [rax - 0x73], cl; xor eax, 0xffffdb52; lea rdi, qword ptr [rip + 0x2f0f2b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007c488: add byte ptr [rax - 0x73], cl; xor eax, 0xffffe480; call rax; 
0x000000000007c088: add byte ptr [rax - 0x73], cl; xor eax, 0xffffe880; call rax; 
0x000000000011bcc6: add byte ptr [rax - 0x73], cl; xor eax, 0xfffff7a2; lea rdi, qword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000049166: add byte ptr [rax - 0x73], cl; xor eax, 0xfffff912; lea rdi, qword ptr [rip + 0x37777b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007add8: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffb30; call rax; 
0x000000000006fb44: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffcd4; call rax; 
0x000000000007ab70: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffd98; call rax; 
0x000000000008ac9e: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffdca; lea rdi, qword ptr [rip + 0x335fb3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ee06: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffe52; lea rdi, qword ptr [rip + 0x2a486b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010ad6e: add byte ptr [rax - 0x73], cl; xor eax, 0xfffffeea; lea rdi, qword ptr [rip + 0x2b7a23]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011209b: add byte ptr [rax - 0x73], cl; xor eax, 0xffffff7d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000012ab86: add byte ptr [rax - 0x73], cl; xor eax, 0xffffff82; lea rdi, qword ptr [rip + 0x298ccb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f2496: add byte ptr [rax - 0x73], cl; xor eax, 0xffffff92; lea rdi, qword ptr [rip + 0x2cf08b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e23df: add byte ptr [rax - 0x75], cl; adc byte ptr [r8 + 0x39], cl; ret; 
0x000000000007daaf: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000123d52: add byte ptr [rax - 0x75], cl; adc eax, 0; add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000112f37: add byte ptr [rax - 0x75], cl; adc eax, 0x2aaf29; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000e316f: add byte ptr [rax - 0x75], cl; adc eax, 0x2dae39; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x00000000000cb109: add byte ptr [rax - 0x75], cl; adc eax, 0x2f2e47; mov dword ptr [rdx], ecx; add rsp, 0x10; pop rbx; ret; 
0x000000000008687f: add byte ptr [rax - 0x75], cl; adc eax, 0x3376c1; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x00000000000867b7: add byte ptr [rax - 0x75], cl; adc eax, 0x337789; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x00000000001211d6: add byte ptr [rax - 0x75], cl; add al, 0xc2; jmp rax; 
0x00000000000bd9ab: add byte ptr [rax - 0x75], cl; add byte ptr [r13 - 0x77], 0x64; xchg eax, ebp; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000e538f: add byte ptr [rax - 0x75], cl; add byte ptr [rax + 0x39], cl; ret 0x860f; 
0x0000000000074f97: add byte ptr [rax - 0x75], cl; add byte ptr [rax + 1], 0; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x000000000007466f: add byte ptr [rax - 0x75], cl; add byte ptr [rax + 1], 0; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000002ff2d: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000300fd: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000002ff0d: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x75], cl; pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000135cda: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x77], cl; add al, 0x24; mov rax, qword ptr [rip + 0x288177]; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x000000000012925f: add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rsi*2 - 0x75], 0x50; adc dh, dh; ret 0x7401; 
0x00000000000487a1: add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x00000000000b2fe7: add byte ptr [rax - 0x75], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x000000000015c92f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000015847f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000015fc2f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000001364ff: add byte ptr [rax - 0x75], cl; add eax, 0x287881; add rax, qword ptr fs:[0]; ret; 
0x00000000001365df: add byte ptr [rax - 0x75], cl; add eax, 0x287881; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000135c4f: add byte ptr [rax - 0x75], cl; add eax, 0x288209; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x00000000001336ff: add byte ptr [rax - 0x75], cl; add eax, 0x2883f9; jmp rax; 
0x00000000001336af: add byte ptr [rax - 0x75], cl; add eax, 0x288441; pop r12; jmp rax; 
0x000000000013364f: add byte ptr [rax - 0x75], cl; add eax, 0x288499; pop r12; jmp rax; 
0x00000000001335e9: add byte ptr [rax - 0x75], cl; add eax, 0x2884f7; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000135224: add byte ptr [rax - 0x75], cl; add eax, 0x28a664; call qword ptr [rax]; 
0x0000000000134e99: add byte ptr [rax - 0x75], cl; add eax, 0x28a9ef; xor ebp, ebp; call qword ptr [rax + 0x28]; 
0x0000000000132ec7: add byte ptr [rax - 0x75], cl; add eax, 0x28af99; mov dword ptr fs:[rax], 2; mov eax, 0xffffffff; ret; 
0x0000000000132cef: add byte ptr [rax - 0x75], cl; add eax, 0x28b171; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001338c0: add byte ptr [rax - 0x75], cl; add eax, 0x28bfc8; call qword ptr [rax + 0x28]; 
0x0000000000133853: add byte ptr [rax - 0x75], cl; add eax, 0x28c035; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x00000000001337d6: add byte ptr [rax - 0x75], cl; add eax, 0x28c0b2; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x0000000000133760: add byte ptr [rax - 0x75], cl; add eax, 0x28c128; call qword ptr [rax]; 
0x0000000000136b5f: add byte ptr [rax - 0x75], cl; add eax, 0x28d429; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136b2f: add byte ptr [rax - 0x75], cl; add eax, 0x28d451; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136aff: add byte ptr [rax - 0x75], cl; add eax, 0x28d479; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136acf: add byte ptr [rax - 0x75], cl; add eax, 0x28d4a1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136a9f: add byte ptr [rax - 0x75], cl; add eax, 0x28d4c9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136a6f: add byte ptr [rax - 0x75], cl; add eax, 0x28d4f1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012abef: add byte ptr [rax - 0x75], cl; add eax, 0x293381; add rsp, 8; ret; 
0x000000000012ab0f: add byte ptr [rax - 0x75], cl; add eax, 0x293469; lea rdx, qword ptr [rip + 0x298d62]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000010c8bf: add byte ptr [rax - 0x75], cl; add eax, 0x2b1591; add rax, qword ptr fs:[0]; ret; 
0x00000000001088cf: add byte ptr [rax - 0x75], cl; add eax, 0x2b5591; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010802f: add byte ptr [rax - 0x75], cl; add eax, 0x2bbfb1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107fff: add byte ptr [rax - 0x75], cl; add eax, 0x2bbfd9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107fcf: add byte ptr [rax - 0x75], cl; add eax, 0x2bc001; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f9f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc029; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f6f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc051; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f3f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc079; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f0f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc0a1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107edf: add byte ptr [rax - 0x75], cl; add eax, 0x2bc0c9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107eaf: add byte ptr [rax - 0x75], cl; add eax, 0x2bc0f1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107e4f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc109; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107e1f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc131; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107def: add byte ptr [rax - 0x75], cl; add eax, 0x2bc159; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107dbf: add byte ptr [rax - 0x75], cl; add eax, 0x2bc181; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d8f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc1a9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d5f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc1d1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d2f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc1f9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107cff: add byte ptr [rax - 0x75], cl; add eax, 0x2bc221; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ccf: add byte ptr [rax - 0x75], cl; add eax, 0x2bc249; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c9f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc271; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c6f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc299; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c3f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc2c1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c0f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc2e9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107bdf: add byte ptr [rax - 0x75], cl; add eax, 0x2bc311; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107baf: add byte ptr [rax - 0x75], cl; add eax, 0x2bc339; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b7f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc361; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b4f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc389; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b1f: add byte ptr [rax - 0x75], cl; add eax, 0x2bc3b1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107aef: add byte ptr [rax - 0x75], cl; add eax, 0x2bc3d9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107abf: add byte ptr [rax - 0x75], cl; add eax, 0x2bc3f9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000f965f: add byte ptr [rax - 0x75], cl; add eax, 0x2c4801; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fcd07: add byte ptr [rax - 0x75], cl; add eax, 0x2c4ce9; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000000fcab7: add byte ptr [rax - 0x75], cl; add eax, 0x2c4f39; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000f781f: add byte ptr [rax - 0x75], cl; add eax, 0x2c6641; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f4bff: add byte ptr [rax - 0x75], cl; add eax, 0x2c9261; mov dword ptr fs:[rax], 0x16; pop rbx; ret; 
0x00000000000f4b1f: add byte ptr [rax - 0x75], cl; add eax, 0x2c9341; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000000f301f: add byte ptr [rax - 0x75], cl; add eax, 0x2cae41; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2f87: add byte ptr [rax - 0x75], cl; add eax, 0x2caed9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f22af: add byte ptr [rax - 0x75], cl; add eax, 0x2cbbb1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f227f: add byte ptr [rax - 0x75], cl; add eax, 0x2cbbe1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f19ef: add byte ptr [rax - 0x75], cl; add eax, 0x2cc471; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f194f: add byte ptr [rax - 0x75], cl; add eax, 0x2cc511; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f11bf: add byte ptr [rax - 0x75], cl; add eax, 0x2ccca1; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f10ef: add byte ptr [rax - 0x75], cl; add eax, 0x2ccd71; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000f061f: add byte ptr [rax - 0x75], cl; add eax, 0x2cd841; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000efcbf: add byte ptr [rax - 0x75], cl; add eax, 0x2ce1a1; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x00000000000ee2af: add byte ptr [rax - 0x75], cl; add eax, 0x2cfbb1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ed39f: add byte ptr [rax - 0x75], cl; add eax, 0x2d0ac1; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000ed387: add byte ptr [rax - 0x75], cl; add eax, 0x2d0ad9; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000ed32f: add byte ptr [rax - 0x75], cl; add eax, 0x2d0b31; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb42f: add byte ptr [rax - 0x75], cl; add eax, 0x2d2a31; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x00000000000eb417: add byte ptr [rax - 0x75], cl; add eax, 0x2d2a49; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb207: add byte ptr [rax - 0x75], cl; add eax, 0x2d2c59; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb1af: add byte ptr [rax - 0x75], cl; add eax, 0x2d2cb1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb14f: add byte ptr [rax - 0x75], cl; add eax, 0x2d2d11; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000c12af: add byte ptr [rax - 0x75], cl; add eax, 0x2fcbb1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bf77f: add byte ptr [rax - 0x75], cl; add eax, 0x2fe6e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bce27: add byte ptr [rax - 0x75], cl; add eax, 0x301039; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bc807: add byte ptr [rax - 0x75], cl; add eax, 0x3077f9; lea rdi, qword ptr [rip + 0x3032ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc4ff: add byte ptr [rax - 0x75], cl; add eax, 0x307b09; lea rdi, qword ptr [rip + 0x3035f2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc387: add byte ptr [rax - 0x75], cl; add eax, 0x307c79; lea rdi, qword ptr [rip + 0x30376a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b42ef: add byte ptr [rax - 0x75], cl; add eax, 0x309b71; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b06af: add byte ptr [rax - 0x75], cl; add eax, 0x30d7b1; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000b05af: add byte ptr [rax - 0x75], cl; add eax, 0x30d8b1; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000b210d: add byte ptr [rax - 0x75], cl; add eax, 0x311d03; add rsp, 8; ret; 
0x00000000000aeff7: add byte ptr [rax - 0x75], cl; add eax, 0x315009; lea rdi, qword ptr [rip + 0x310afa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008aa9a: add byte ptr [rax - 0x75], cl; add eax, 0x339576; lea rdi, qword ptr [rip + 0x336247]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000081317: add byte ptr [rax - 0x75], cl; add eax, 0x33cb49; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000080950: add byte ptr [rax - 0x75], cl; add eax, 0x33d460; mov rdi, rcx; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x0000000000080800: add byte ptr [rax - 0x75], cl; add eax, 0x33d5b0; mov qword ptr [rsp + 0x28], r14; mov rdi, r14; call qword ptr [rax]; 
0x000000000007de97: add byte ptr [rax - 0x75], cl; add eax, 0x33ff19; xor edi, edi; mov r14, rdx; call qword ptr [rax]; 
0x000000000007c84f: add byte ptr [rax - 0x75], cl; add eax, 0x342949; ret; 
0x0000000000071417: add byte ptr [rax - 0x75], cl; add eax, 0x34ca49; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000006fff7: add byte ptr [rax - 0x75], cl; add eax, 0x34de69; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000003cd57: add byte ptr [rax - 0x75], cl; add eax, 0x381109; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003ccaf: add byte ptr [rax - 0x75], cl; add eax, 0x3811b1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037b7f: add byte ptr [rax - 0x75], cl; add eax, 0x3862e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037a7f: add byte ptr [rax - 0x75], cl; add eax, 0x3863e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000378df: add byte ptr [rax - 0x75], cl; add eax, 0x386581; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000377df: add byte ptr [rax - 0x75], cl; add eax, 0x386681; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003779f: add byte ptr [rax - 0x75], cl; add eax, 0x3866c1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037767: add byte ptr [rax - 0x75], cl; add eax, 0x3866f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000376b7: add byte ptr [rax - 0x75], cl; add eax, 0x3867a9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036c7f: add byte ptr [rax - 0x75], cl; add eax, 0x3871e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036be7: add byte ptr [rax - 0x75], cl; add eax, 0x387279; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000036b3f: add byte ptr [rax - 0x75], cl; add eax, 0x38d4a9; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000003012f: add byte ptr [rax - 0x75], cl; add eax, 0x38dda1; add rax, qword ptr fs:[0]; ret; 
0x000000000002faaf: add byte ptr [rax - 0x75], cl; add eax, 0x38e309; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000002fa6b: add byte ptr [rax - 0x75], cl; add eax, 0x38e365; mov qword ptr [rax], rdx; ret; 
0x00000000000340e7: add byte ptr [rax - 0x75], cl; add eax, 0x38ff21; lea rdi, qword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032047: add byte ptr [rax - 0x75], cl; add eax, 0x391fc1; lea rdi, qword ptr [rip + 0x38dd0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003201f: add byte ptr [rax - 0x75], cl; add eax, 0x391fd9; lea rdi, qword ptr [rip + 0x38dd32]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318c5: add byte ptr [rax - 0x75], cl; add eax, 0x392743; lea rdi, qword ptr [rip + 0x38e22c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002c15f: add byte ptr [rax - 0x75], cl; add eax, 0x393959; ret; 
0x00000000000305df: add byte ptr [rax - 0x75], cl; add eax, 0x393a21; lea rdi, qword ptr [rip + 0x38f692]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030397: add byte ptr [rax - 0x75], cl; add eax, 0x393c69; lea rdi, qword ptr [rip + 0x38f8da]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f86f: add byte ptr [rax - 0x75], cl; add eax, 0x394791; lea rdi, qword ptr [rip + 0x390282]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7cf: add byte ptr [rax - 0x75], cl; add eax, 0x394839; lea rdi, qword ptr [rip + 0x390322]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d507: add byte ptr [rax - 0x75], cl; add eax, 0x396b01; lea rdi, qword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d4df: add byte ptr [rax - 0x75], cl; add eax, 0x396b29; lea rdi, qword ptr [rip + 0x392612]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d27f: add byte ptr [rax - 0x75], cl; add eax, 0x396d81; lea rdi, qword ptr [rip + 0x392872]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002275f: add byte ptr [rax - 0x75], cl; add eax, 0x39b701; add rax, qword ptr fs:[0]; ret; 
0x00000000000237df: add byte ptr [rax - 0x75], cl; add eax, 0x3a0461; ret; 
0x00000000000237cf: add byte ptr [rax - 0x75], cl; add eax, 0x3a0481; ret; 
0x0000000000122697: add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdx, rbp; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000121227: add byte ptr [rax - 0x75], cl; and al, 0x18; mov esi, r13d; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000012696f: add byte ptr [rax - 0x75], cl; and al, 0x38; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000126a86: add byte ptr [rax - 0x75], cl; and al, 0x58; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000003d077: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x00000000000f1284: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x000000000011ece5: add byte ptr [rax - 0x75], cl; and al, 8; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x000000000011f68b: add byte ptr [rax - 0x75], cl; and byte ptr [r8 - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x000000000011f4a9: add byte ptr [rax - 0x75], cl; and byte ptr [r8 - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000011f4bd: add byte ptr [rax - 0x75], cl; and byte ptr [r9], sil; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x000000000007feff: add byte ptr [rax - 0x75], cl; and byte ptr [rax - 0x75], cl; push rax; or dh, dh; ret 0xf04; 
0x00000000001447cf: add byte ptr [rax - 0x75], cl; cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000005d122: add byte ptr [rax - 0x75], cl; cmp al, ch; add eax, 0x48ffff75; add esp, 0xd8; ret; 
0x0000000000075ff0: add byte ptr [rax - 0x75], cl; cmp byte ptr [r8 - 0x77], cl; ret 0x348; 
0x0000000000120d95: add byte ptr [rax - 0x75], cl; cmp byte ptr [r8 - 0x77], r9b; or byte ptr [rax - 0x75], r9b; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000126b30: add byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x0000000000123a7a: add byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0xc8; call rax; 
0x00000000001449af: add byte ptr [rax - 0x75], cl; hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144f9f: add byte ptr [rax - 0x75], cl; int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000023768: add byte ptr [rax - 0x75], cl; jnp 0x23785; call rax; 
0x0000000000086a77: add byte ptr [rax - 0x75], cl; jnp 0x86ac4; call qword ptr [rbx + 0x40]; 
0x0000000000127874: add byte ptr [rax - 0x75], cl; jo 0x1278c2; mov esi, dword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000300cf: add byte ptr [rax - 0x75], cl; jo 0x3011d; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000069f48: add byte ptr [rax - 0x75], cl; lea ebp, dword ptr [rax - 0x76000002]; ret; 
0x00000000000dbb49: add byte ptr [rax - 0x75], cl; mov bl, 0xa0; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x00000000000cc9c2: add byte ptr [rax - 0x75], cl; mov ebp, 0xffffff58; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rbp - 0x120]; mov qword ptr [rsp], rax; call rbx; 
0x0000000000070b7f: add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000002ff30: add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000144b9f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144d9f: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000030100: add byte ptr [rax - 0x75], cl; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x00000000000f829f: add byte ptr [rax - 0x75], cl; or al, 0; add byte ptr [rax], al; ret; 
0x0000000000120edf: add byte ptr [rax - 0x75], cl; or byte ptr [r14 + 0x20], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000121b0f: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x77], cl; out 0x48, al; mov edi, ebx; call qword ptr [rax]; 
0x000000000012d46f: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x77], r9b; adc al, 0x24; mov rsi, rsp; call qword ptr [rax + 8]; 
0x000000000012db37: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x77], r9b; out 0x48, al; mov edi, ebp; call qword ptr [rax]; 
0x000000000012d9cf: add byte ptr [rax - 0x75], cl; or byte ptr [r9 + r9*4 + 0x44], r9b; and al, 8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x00000000000d651c: add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x00000000000d1f37: add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], r9b; jo 0xd1f60; xor eax, eax; ret; 
0x0000000000135d56: add byte ptr [rax - 0x75], cl; or byte ptr [rax], 1; add byte ptr [rax], al; jmp rax; 
0x00000000000eaf3e: add byte ptr [rax - 0x75], cl; or eax, 0x2d2f22; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000002ff10: add byte ptr [rax - 0x75], cl; pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000f8297: add byte ptr [rax - 0x75], cl; pop rax; ret; 
0x00000000000fe5cf: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000fe53f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000fe4af: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000fe26f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000fe38f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000fe04f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x00000000000fe2ff: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000fe0df: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 1; ret; 
0x00000000000fe15f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x00000000000fe41f: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x00000000000fdfbf: add byte ptr [rax - 0x75], cl; push -0x48f00077; add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x000000000007fee7: add byte ptr [rax - 0x75], cl; push rax; or dh, dh; ret 0x7404; 
0x00000000000c81dc: add byte ptr [rax - 0x75], cl; push rax; sbb byte ptr [rbx + 0x1f0f404a], cl; add byte ptr [rax - 0x77], cl; fisttp qword ptr [rax - 0x7d]; ret; 
0x000000000014cc5f: add byte ptr [rax - 0x75], cl; push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000014424f: add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c49f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c40f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c6af: add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000036e85: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000135e61: add byte ptr [rax - 0x75], cl; push rsp; and al, 0x48; add rax, qword ptr [rdx + 8]; add rsp, 0x58; ret; 
0x000000000012c3cf: add byte ptr [rax - 0x75], cl; sbb byte ptr [r9 + r9*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x00000000000fcabe: add byte ptr [rax - 0x75], cl; sbb byte ptr [rsi - 0x7d], spl; add byte ptr [rcx], al; ret; 
0x00000000000797c1: add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x000000000007b38f: add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000006d96f: add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000014440f: add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000007c52f: add byte ptr [rax - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x0000000000049bdf: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rbx - 0x16], cl; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000005ea67: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rbx - 0x1e], cl; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000007ba8f: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x000000000007a627: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x00000000000750af: add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x0000000000027483: add byte ptr [rax - 0x75], cl; xchg eax, esp; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000065aa9: add byte ptr [rax - 0x75], cl; xor eax, 0x3584af; call rax; 
0x00000000000641b1: add byte ptr [rax - 0x75], cl; xor eax, 0x359da7; call rax; 
0x000000000005ed35: add byte ptr [rax - 0x75], cl; xor eax, 0x35f223; call rax; 
0x0000000000055fcb: add byte ptr [rax - 0x75], cl; xor eax, 0x367f8d; call rax; 
0x000000000004efc1: add byte ptr [rax - 0x75], cl; xor eax, 0x36ef97; call rax; 
0x0000000000049e8d: add byte ptr [rax - 0x75], cl; xor eax, 0x3740cb; call rax; 
0x00000000000f335a: add byte ptr [rax - 0x76b7ffc8], al; ret; 
0x000000000007032f: add byte ptr [rax - 0x76b80000], al; ret 0x2d75; 
0x000000000006e871: add byte ptr [rax - 0x76b80000], al; ret 0x3675; 
0x000000000010a0cf: add byte ptr [rax - 0x76b80000], al; ret 0x3875; 
0x00000000000f354f: add byte ptr [rax - 0x76b80000], al; ret 0x5e9; 
0x000000000003d315: add byte ptr [rax - 0x77], cl; adc byte ptr [rax + 0xb], r15b; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x00000000001335a4: add byte ptr [rax - 0x77], cl; adc eax, 0x28c2e4; add rsp, 8; ret; 
0x000000000007c8ce: add byte ptr [rax - 0x77], cl; adc eax, 0x3440f2; add dword ptr [rip + 0x3440e7], 1; ret; 
0x00000000000b42d9: add byte ptr [rax - 0x77], cl; add al, 0x24; call 0xb1410; add rsp, 0x18; ret; 
0x00000000000eb6c1: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0; syscall; 
0x00000000000fafd1: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x130; syscall; 
0x00000000000f4921: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x1a; syscall; 
0x00000000000c0d91: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x22; syscall; 
0x00000000000c0df1: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x23; syscall; 
0x00000000000fb171: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x2a; syscall; 
0x00000000000fb0e1: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x2b; syscall; 
0x00000000000fb4b1: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x2e; syscall; 
0x00000000000fb3a1: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x2f; syscall; 
0x00000000000f1df1: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x4a; syscall; 
0x00000000000f1e81: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x4b; syscall; 
0x00000000000ebf71: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x55; syscall; 
0x00000000000eb721: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 1; syscall; 
0x00000000000eb4d1: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 2; syscall; 
0x00000000000ebe21: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 3; syscall; 
0x00000000000ecfd1: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 7; syscall; 
0x00000000000fa3c1: add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 8; syscall; 
0x00000000000fad34: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x113; syscall; 
0x00000000000fadc4: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000f04e4: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000fae84: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000cb564: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x11; syscall; 
0x00000000000cb5c4: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x12; syscall; 
0x00000000000f1c44: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x17; syscall; 
0x00000000000fb514: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x2c; syscall; 
0x00000000000fb344: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x2d; syscall; 
0x00000000000fbc84: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000fbce4: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000faa04: add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0xe8; syscall; 
0x0000000000135cdd: add byte ptr [rax - 0x77], cl; add al, 0x24; mov rax, qword ptr [rip + 0x288177]; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x000000000008aac2: add byte ptr [rax - 0x77], cl; add eax, 0x3361a6; add rsp, 8; ret; 
0x000000000008aa80: add byte ptr [rax - 0x77], cl; add eax, 0x3361e8; ret; 
0x000000000001f5ee: add byte ptr [rax - 0x77], cl; add eax, 0x3a045a; pop rax; pop rbx; pop rbp; ret; 
0x0000000000126762: add byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x0000000000108f72: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x108fa0; add rsp, 0xd8; ret; 
0x00000000001090bd: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x1090d0; add rsp, 0xd8; ret; 
0x000000000010a347: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x10a360; add rsp, 0xd8; ret; 
0x000000000010a557: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x10a570; add rsp, 0xd8; ret; 
0x000000000010c0ed: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x10c100; add rsp, 0xd8; ret; 
0x0000000000048722: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x475b0; add rsp, 0xd8; ret; 
0x000000000005432c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x49c40; add rsp, 0xd8; ret; 
0x000000000005d07c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x5cfc0; add rsp, 0xd8; ret; 
0x000000000005e40c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x5e420; add rsp, 0xd8; ret; 
0x000000000007834c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x5eaf0; add rsp, 0xd8; ret; 
0x000000000007855c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x6c6c0; add rsp, 0xd8; ret; 
0x000000000005d1bc: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x70930; add rsp, 0xd8; ret; 
0x000000000005458c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x72120; add rsp, 0xd8; ret; 
0x000000000005461c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x72280; add rsp, 0xd8; ret; 
0x0000000000054467: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x72420; add rsp, 0xd8; ret; 
0x000000000007282c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x72620; add rsp, 0xd8; ret; 
0x0000000000073bd7: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x73c60; add rsp, 0xd8; ret; 
0x0000000000073e1c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x73d20; add rsp, 0xd8; ret; 
0x00000000000af64c: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0xaf660; add rsp, 0xd8; ret; 
0x00000000000f4494: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0xf3ec0; add rsp, 0xd8; ret; 
0x00000000000867be: add byte ptr [rax - 0x77], cl; and al, 8; call qword ptr [rdx]; 
0x0000000000114bb7: add byte ptr [rax - 0x77], cl; call 0x5c52a91a; ret; 
0x0000000000021b12: add byte ptr [rax - 0x77], cl; call 0x5dfaec62; mov qword ptr [rip + 0x39c70f], rax; pop r12; ret; 
0x0000000000079468: add byte ptr [rax - 0x77], cl; call 0x8cc17b8; pop rbx; pop rbp; ret; 
0x000000000010bfcf: add byte ptr [rax - 0x77], cl; clc; add rsp, 8; ret; 
0x000000000003c8df: add byte ptr [rax - 0x77], cl; clc; cqo; idiv rsi; ret; 
0x00000000000f3228: add byte ptr [rax - 0x77], cl; clc; mov byte ptr [r9 - 1], 0; ret; 
0x0000000000108e4f: add byte ptr [rax - 0x77], cl; clc; pop rbx; ret; 
0x000000000007c87f: add byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000135c56: add byte ptr [rax - 0x77], cl; dec byte ptr [rax - 0x75]; cmp al, 0x24; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x00000000000399fc: add byte ptr [rax - 0x77], cl; dec byte ptr [rax - 0x77]; ret 0x8948; 
0x0000000000079d47: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000005d46e: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000037c33: add byte ptr [rax - 0x77], cl; fidivr word ptr [rax + 0x80]; syscall; 
0x00000000000797a3: add byte ptr [rax - 0x77], cl; fild word ptr [rbp + 0x4f0f48c9]; ret 0x8948; 
0x0000000000086170: add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, r12; call rax; 
0x00000000000e3ad0: add byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x75]; or cl, byte ptr [rax - 0x77]; ret 0x1e8; 
0x0000000000035893: add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 3]; syscall; 
0x000000000007c536: add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x00000000001336f4: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov dword ptr [rip + 0x28c190], eax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000000769d6: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000074826: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x000000000007462b: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x00000000000d89f7: add byte ptr [rax - 0x77], cl; fisttp qword ptr [rax - 0x77]; ret; 
0x00000000000c81e7: add byte ptr [rax - 0x77], cl; fisttp qword ptr [rax - 0x7d]; ret; 
0x000000000006ff9e: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000135811: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; and al, 0x10; call rax; 
0x0000000000120999: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; and al, 8; call rcx; 
0x00000000000f4e6b: add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x77]; call 0x5c50abd1; jmp rax; 
0x000000000004a712: add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx + 0x29]; cmc; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000000857b4: add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx + rcx*4 - 6]; call rax; 
0x00000000000f0829: add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx - 0x74ba9b18]; sub al, 0x24; syscall; 
0x00000000000c3e1f: add byte ptr [rax - 0x77], cl; fmul dword ptr [rax + 3]; adc byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000000d4aaf: add byte ptr [rax - 0x77], cl; fmul dword ptr [rax - 0x77]; ror dword ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 0x39], cl; ret 0x574; 
0x0000000000114beb: add byte ptr [rax - 0x77], cl; fstp qword ptr [rbx + 0x48]; mov eax, ebp; pop rbp; pop r12; ret; 
0x0000000000131750: add byte ptr [rax - 0x77], cl; fsubp st(0); xchg dword ptr [rcx + 0x2948fff1], eax; ret; 
0x00000000001115c5: add byte ptr [rax - 0x77], cl; fucompi st(0); ret 0x201; 
0x0000000000113afb: add byte ptr [rax - 0x77], cl; inc byte ptr [rbx + 0x394101c0]; ret 0xd975; 
0x0000000000080957: add byte ptr [rax - 0x77], cl; iretd; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x0000000000129595: add byte ptr [rax - 0x77], cl; mov dword ptr [rcx - 1], 0x85d23112; ror byte ptr [rdi], 0x94; ret 0x3d83; 
0x0000000000078853: add byte ptr [rax - 0x77], cl; mov edx, 0x140; pop rbx; ret; 
0x00000000001276cd: add byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x77], cl; push rcx; adc byte ptr [rax + 1], bh; ret; 
0x0000000000036b46: add byte ptr [rax - 0x77], cl; out 0x48, al; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000bdfc1: add byte ptr [rax - 0x77], cl; out 0x48, eax; mov dword ptr [rsp + 0x10], esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1e1e: add byte ptr [rax - 0x77], cl; out 0x48, eax; mov eax, dword ptr [rip + 0x30222f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1dbe: add byte ptr [rax - 0x77], cl; out 0x48, eax; mov eax, dword ptr [rip + 0x30228f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011edb8: add byte ptr [rax - 0x77], cl; out 0xe8, eax; fistp word ptr [rip - 0x74b80000]; and al, 8; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x000000000011ecdd: add byte ptr [rax - 0x77], cl; out 0xe8, eax; mov edx, 0x4800001e; mov eax, dword ptr [rsp + 8]; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x000000000008ac75: add byte ptr [rax - 0x77], cl; out dx, al; mov edi, dword ptr [rip + 0x336071]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000123d70: add byte ptr [rax - 0x77], cl; out dx, al; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000008632b: add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; call rax; 
0x00000000000fa644: add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; mov eax, 0x11a; syscall; 
0x0000000000121576: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x0000000000121551: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x28]; 
0x0000000000120ee8: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x30]; 
0x000000000011fff2: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000000075a94: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000121708: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbx]; 
0x00000000000f60eb: add byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x000000000002c20c: add byte ptr [rax - 0x77], cl; out dx, eax; mov eax, 3; syscall; 
0x00000000000a42e4: add byte ptr [rax - 0x77], cl; out dx, eax; mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000135234: add byte ptr [rax - 0x77], cl; out dx, eax; mov rdx, rsp; lea rsi, qword ptr [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x0000000000107666: add byte ptr [rax - 0x77], cl; push rbp; nop; mov rdx, r14; call rax; 
0x000000000012e2a2: add byte ptr [rax - 0x77], cl; push rdi; sbb bl, dh; ret; 
0x000000000013592a: add byte ptr [rax - 0x77], cl; push rsp; and al, 8; mov qword ptr [rsp + 0x10], rcx; lea rdi, qword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x0000000000082be9: add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x000000000011b984: add byte ptr [rax - 0x77], cl; ret 0x1be; 
0x00000000000d1a1b: add byte ptr [rax - 0x77], cl; ret 0x1de9; 
0x00000000000a718f: add byte ptr [rax - 0x77], cl; ret 0x2944; 
0x0000000000048e0a: add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000105b94: add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x0000000000070332: add byte ptr [rax - 0x77], cl; ret 0x2d75; 
0x000000000007e215: add byte ptr [rax - 0x77], cl; ret 0x2fe9; 
0x000000000006e874: add byte ptr [rax - 0x77], cl; ret 0x3675; 
0x000000000010a0d2: add byte ptr [rax - 0x77], cl; ret 0x3875; 
0x000000000006eb8c: add byte ptr [rax - 0x77], cl; ret 0x38b; 
0x0000000000046ea4: add byte ptr [rax - 0x77], cl; ret 0x3dbe; 
0x000000000005b955: add byte ptr [rax - 0x77], cl; ret 0x42e8; 
0x00000000000e6a93: add byte ptr [rax - 0x77], cl; ret 0x4c6; 
0x00000000000f3552: add byte ptr [rax - 0x77], cl; ret 0x5e9; 
0x00000000000c5339: add byte ptr [rax - 0x77], cl; ret 0x775; 
0x0000000000033f2f: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000ea4f6: add byte ptr [rax - 0x77], cl; ret 0x8845; 
0x000000000005e51c: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000005030d: add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000002e9ef: add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x000000000006f6c8: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000b4e5f: add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000f24da: add byte ptr [rax - 0x77], cl; ret 0x8feb; 
0x00000000000f9225: add byte ptr [rax - 0x77], cl; ret 0xb6e9; 
0x00000000000602cd: add byte ptr [rax - 0x77], cl; ret 0xb848; 
0x00000000001005e2: add byte ptr [rax - 0x77], cl; ret 0xb9; 
0x00000000000bf56e: add byte ptr [rax - 0x77], cl; ret 0xbae9; 
0x000000000008b860: add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000000fc7d3: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000f38eb: add byte ptr [rax - 0x77], cl; ret 0xcfeb; 
0x00000000000bc478: add byte ptr [rax - 0x77], cl; ret 0xdb31; 
0x000000000004759a: add byte ptr [rax - 0x77], cl; ret 0xde8; 
0x00000000000bd79a: add byte ptr [rax - 0x77], cl; ret 0xeee9; 
0x000000000009284b: add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x00000000000e2395: add byte ptr [rax - 0x77], cl; ret 0xf7e9; 
0x0000000000086702: add byte ptr [rax - 0x77], cl; ret 0xff31; 
0x000000000004876e: add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000026473: add byte ptr [rax - 0x77], cl; ret; 
0x0000000000091ae6: add byte ptr [rax - 0x77], cl; rol dword ptr [rbx + 0x634807e1], 1; or al, 0x88; add rax, rcx; jmp rax; 
0x0000000000057351: add byte ptr [rax - 0x77], cl; ror byte ptr [rax - 0x7d], 1; ret; 
0x000000000002ad19: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 1; fimul word ptr [rax - 0x77]; ret 0x8948; 
0x00000000000e22ef: add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 1; ret 0x8b48; 
0x0000000000045ecf: add byte ptr [rax - 0x77], cl; sal dword ptr [rcx], 1; shr cl, cl; xchg eax, esi; fdivp st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000000f9035: add byte ptr [rax - 0x77], cl; sbb byte ptr [rax + 1], bh; add rsp, 0x10; pop rbx; ret; 
0x0000000000096bc2: add byte ptr [rax - 0x77], cl; stc; mov qword ptr [rdx], rcx; ret; 
0x0000000000074437: add byte ptr [rax - 0x77], cl; sti; call qword ptr [rax + 0x20]; 
0x000000000007b980: add byte ptr [rax - 0x77], cl; sti; call qword ptr [rax + 0x60]; 
0x000000000004dd1e: add byte ptr [rax - 0x77], cl; test dword ptr [rax - 0x16000006], ebx; ret; 
0x0000000000079030: add byte ptr [rax - 0x77], cl; xchg eax, ecx; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; call qword ptr [rax + 0x40]; 
0x000000000013385a: add byte ptr [rax - 0x77], cl; xlatb; call qword ptr [rax + 0x20]; 
0x00000000000c119f: add byte ptr [rax - 0x77], cl; xlatb; mov eax, r8d; syscall; 
0x0000000000136ba3: add byte ptr [rax - 0x77], cl; xlatb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e4a83: add byte ptr [rax - 0x77], cl; xlatb; syscall; 
0x0000000000129b85: add byte ptr [rax - 0x77], cl; xor al, 0x24; mov esi, 4; mov qword ptr [rsp + 8], rdi; mov rdi, rbx; call qword ptr [rax]; 
0x000000000008263a: add byte ptr [rax - 0x77], cl; xor byte ptr [rax - 0x75], cl; add eax, 0x33b88b; mov qword ptr [rax], rdi; ret; 
0x00000000001276ec: add byte ptr [rax - 0x77], cl; xor cl, byte ptr [rax - 0x77]; jp 0x1276fc; ret; 
0x0000000000127704: add byte ptr [rax - 0x77], cl; xor cl, byte ptr [rax - 0x77]; jp 0x127714; ret; 
0x0000000000127f4c: add byte ptr [rax - 0x77], cl; xor cl, byte ptr [rax - 0x77]; jp 0x127f5c; ret; 
0x0000000000127f64: add byte ptr [rax - 0x77], cl; xor cl, byte ptr [rax - 0x77]; jp 0x127f74; ret; 
0x0000000000127f94: add byte ptr [rax - 0x77], cl; xor cl, byte ptr [rax - 0x77]; jp 0x127fa4; ret; 
0x000000000010c4c7: add byte ptr [rax - 0x77], cl; xor eax, eax; ret; 
0x00000000000aedcf: add byte ptr [rax - 0x77], cl; xor ecx, dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x20; pop rbx; ret; 
0x000000000019c13f: add byte ptr [rax - 0x7a], dl; out dx, al; call qword ptr [rdi]; 
0x00000000001aa01f: add byte ptr [rax - 0x7b], al; cmc; call qword ptr [rsi + 6]; 
0x0000000000034a4f: add byte ptr [rax - 0x7b], cl; call qword ptr [rbx + 0x48]; 
0x00000000000488cf: add byte ptr [rax - 0x7b], cl; call qword ptr [rbx + 0x74]; 
0x00000000001365cf: add byte ptr [rax - 0x7b], cl; div byte ptr [rbx + rcx - 0x17]; out 0, al; int1; jmp qword ptr [rsi + 0xf]; 
0x00000000000ec06f: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdx*8 + 0x48]; mov ebp, edi; mov rdi, rbp; mov eax, 0x4f; syscall; 
0x000000000007368f: add byte ptr [rax - 0x7b], cl; push qword ptr [rbx + 0x48]; sub esp, 8; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x60]; 
0x0000000000074e7a: add byte ptr [rax - 0x7b], cl; push qword ptr [rsi + rsi*4 - 0xa]; ret 0x7508; 
0x0000000000107a6f: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x45; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000048e01: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; add al, 0; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x00000000000dde3f: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0; 
0x000000000009a383: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000000e22a6: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rdi + 0xf], 0xb6; xor byte ptr [rax - 0x77], cl; ret 0xf980; 
0x0000000000129262: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rsi*2 - 0x75], 0x50; adc dh, dh; ret 0x7401; 
0x000000000007dee3: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + 0x3f], 0x48; mov eax, dword ptr [rip + 0x33fec8]; xor edi, edi; mov qword ptr [rsp + 8], rcx; call qword ptr [rax]; 
0x00000000000887be: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x5b], 0x5d; pop r12; ret; 
0x00000000001063ed: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rbx + 0x48], 0x8b; jp 0x106447; mov rsi, rdx; call rax; 
0x000000000012b863: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x19], cl; pop rbx; ret; 
0x000000000010345f: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; adc byte ptr [rax + 0x39], cl; ret; 
0x00000000001117df: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; cmp eax, 0x2b1734; call rax; 
0x0000000000022efa: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rdx + 0x48], 0x8b; push rbp; movabs al, byte ptr [0x201a748b48ef894c]; call rax; 
0x0000000000080836: add byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rdx + 0x48], 0x89; push rsp; and al, 0x30; mov dword ptr [rsp + 0x28], r11d; call rax; 
0x000000000006e426: add byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x00000000000786e0: add byte ptr [rax - 0x7b], cl; sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x00000000000f2ced: add byte ptr [rax - 0x7bf0a306], al; pop rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x3f7cb7f0], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000c42df: add byte ptr [rax - 0x7bf0d306], al; test dword ptr [rcx], 0xfa800000; jnp 0xc42fc; xchg eax, esp; ret 0xb60f; 
0x000000000003044c: add byte ptr [rax - 0x7bf0ffc1], al; ret 0; 
0x000000000003e5fe: add byte ptr [rax - 0x7c], al; test byte ptr [rdi], 0x84; ret 0x15; 
0x000000000015e437: add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000082afc: add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000080ad1: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0x840f; 
0x000000000002fbb3: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000004e1c0: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret 0x840f; 
0x000000000004b9cf: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret 0x850f; 
0x000000000006033e: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x000000000006ebbf: add byte ptr [rax - 0x7d], cl; cli; push qword ptr [rdx + rcx + 0x48]; mov eax, edx; pop rbx; ret; 
0x000000000001f6df: add byte ptr [rax - 0x7d], cl; in al, dx; or byte ptr [rcx + 0x415d5bd8], 0x5c; ret; 
0x000000000011621f: add byte ptr [rax - 0x7d], cl; in al, dx; xor byte ptr [rcx], 0xc0; pop rbx; ret; 
0x0000000000097a5d: add byte ptr [rax - 0x7d], cl; mov byte ptr [rdi + rcx], 0xb6; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000a362f: add byte ptr [rax - 0x7d], cl; mov dword ptr [rbx + rcx*4], 0x75c08507; out dx, al; xor eax, eax; ret; 
0x00000000000c4037: add byte ptr [rax - 0x7d], cl; mov ebp, 0xfffffe38; add dword ptr [rdi], ecx; xchg byte ptr [rdi - 0xa000000], bh; ret; 
0x00000000000801bf: add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x000000000011a624: add byte ptr [rax - 0x7d], cl; ret 0x3108; 
0x00000000000a11ff: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x00000000000f2993: add byte ptr [rax - 0x7d], cl; ret 0x3c01; 
0x0000000000026921: add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x0000000000113aea: add byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x000000000006f8c4: add byte ptr [rax - 0x7d], cl; ret 0x4401; 
0x0000000000064c54: add byte ptr [rax - 0x7d], cl; ret 0x4504; 
0x000000000002364e: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000e6f95: add byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x0000000000074d86: add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x0000000000038fe7: add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000016572f: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000fbffa: add byte ptr [rax - 0x7d], cl; ret 0x4814; 
0x0000000000096ebf: add byte ptr [rax - 0x7d], cl; ret 0x4840; 
0x0000000000029e9a: add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x00000000000b3eef: add byte ptr [rax - 0x7d], cl; ret 0x4909; 
0x00000000001372ef: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000002929f: add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x0000000000068277: add byte ptr [rax - 0x7d], cl; ret 0x4c04; 
0x000000000007d47c: add byte ptr [rax - 0x7d], cl; ret 0x4d07; 
0x000000000008bd8f: add byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x000000000008bd1f: add byte ptr [rax - 0x7d], cl; ret 0x7e20; 
0x0000000000042bff: add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x00000000000a71c7: add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x0000000000025394: add byte ptr [rax - 0x7d], cl; ret 0x8801; 
0x0000000000116d90: add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x000000000008b142: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000001392d3: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000117aef: add byte ptr [rax - 0x7d], cl; ret 0xeb01; 
0x0000000000058ebf: add byte ptr [rax - 0x7d], cl; ret 0xeb08; 
0x0000000000137313: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000035a61: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000007494c: add byte ptr [rax - 0x7d], cl; ret 0xf301; 
0x0000000000023297: add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000097cff: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000002bcd6: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x00000000000472af: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x39; ret 0xb87f; 
0x000000000002d2bf: add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x83; ret 0x8301; 
0x0000000000049b67: add byte ptr [rax - 0x7d], cl; rol dword ptr [rcx], 0xf; mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x000000000006768f: add byte ptr [rax - 0x7d], cl; ror dword ptr [rax], -0x17; ret 0xfff0; 
0x0000000000095dc8: add byte ptr [rax - 0x7d], cl; stc; dec dword ptr [rcx - 0x77]; ret 0x840f; 
0x000000000013437b: add byte ptr [rax - 0x7f], cl; add eax, 0x28f7f9; add byte ptr [rcx], 0; add dh, dh; ret; 
0x00000000000b148c: add byte ptr [rax - 0x7f], cl; cli; ret 0x10; 
0x0000000000129e44: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; jmp rcx; 
0x000000000003a1b1: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0xcde; 
0x000000000007c980: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x00000000000301b4: add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000014a86b: add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000073ced: add byte ptr [rax - 0x7f], cl; ret; 
0x000000000013565e: add byte ptr [rax - 0x80417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000019dc0f: add byte ptr [rax - 0x80], dh; cld; jmp qword ptr [rax]; 
0x0000000000134382: add byte ptr [rax - 0x9ffffff], al; ret; 
0x00000000001abdef: add byte ptr [rax - 0xa], dl; cmc; jmp qword ptr [rcx + 0x4000001]; 
0x0000000000198e17: add byte ptr [rax - 0xb], ch; in eax, dx; jmp qword ptr [rcx]; 
0x00000000001784c0: add byte ptr [rax - 0xe], bl; jmp qword ptr [rax]; 
0x00000000001785e0: add byte ptr [rax - 0xe], ch; jmp qword ptr [rax]; 
0x000000000017817c: add byte ptr [rax - 0xf], bh; call qword ptr [rax + 0x7a]; 
0x00000000000b13d9: add byte ptr [rax - 1], ah; test rax, rax; cmovne rdx, rax; add rsp, 0x28; mov rax, rdx; ret; 
0x0000000000076b61: add byte ptr [rax - 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002c2a6: add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000132eba: add byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000000357dd: add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000036c8d: add byte ptr [rax - 1], bh; ret; 
0x000000000007cbfe: add byte ptr [rax - 1], dil; ret; 
0x00000000001a213f: add byte ptr [rax - 2], ah; int1; jmp qword ptr [rcx]; 
0x00000000001a2157: add byte ptr [rax - 2], bh; int1; jmp qword ptr [rcx]; 
0x00000000001a20c7: add byte ptr [rax - 2], cl; int1; jmp qword ptr [rcx]; 
0x00000000001ac4c7: add byte ptr [rax - 3], bh; cmc; call qword ptr [rax]; 
0x00000000001991f7: add byte ptr [rax - 3], ch; in eax, dx; call qword ptr [rsi + 2]; 
0x000000000019d147: add byte ptr [rax - 5], bh; out dx, al; jmp qword ptr [rsi]; 
0x000000000019d03f: add byte ptr [rax - 6], al; out dx, al; call qword ptr [rcx]; 
0x00000000001ac27f: add byte ptr [rax - 6], dl; cmc; jmp qword ptr [rax]; 
0x00000000001ac12f: add byte ptr [rax - 8], dh; cmc; call qword ptr [rcx]; 
0x000000000007dec1: add byte ptr [rax - 9], cl; fimul dword ptr [rcx + rbp - 0x19]; mov qword ptr [rsp + 8], rcx; and rdi, rdx; neg rdi; call qword ptr [rax]; 
0x000000000018d7c7: add byte ptr [rax*2 - 0x3c330006], dl; add al, byte ptr [rax]; and al, 0x45; cli; jmp rsp; 
0x00000000001aa6d3: add byte ptr [rax*8 - 0x2a17ffff], ch; cmc; jmp qword ptr [rsi]; 
0x00000000001aa6bb: add byte ptr [rax*8 - 0x2a2fffff], dl; cmc; jmp qword ptr [rsi]; 
0x0000000000129e48: add byte ptr [rax], 0; add al, ch; jmp rcx; 
0x00000000000bf3b5: add byte ptr [rax], 0; add al, ch; ret 0x48c; 
0x00000000000afcb5: add byte ptr [rax], 0; add al, ch; ret 0x583; 
0x000000000003a1b5: add byte ptr [rax], 0; add al, ch; ret 0xcde; 
0x000000000007c984: add byte ptr [rax], 0; add al, ch; ret; 
0x0000000000133c26: add byte ptr [rax], 0; add bl, ch; ror dword ptr [rdi], 0x1f; add bl, sil; ret; 
0x00000000000c9015: add byte ptr [rax], 0; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000d6b24: add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000df0a6: add byte ptr [rax], 0; add byte ptr [rax + 1], cl; ret 0x8d4c; 
0x000000000007a3b0: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000000dc442: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000786dd: add byte ptr [rax], 0; add byte ptr [rax - 0x7b], cl; sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x00000000000f8fdb: add byte ptr [rax], 0; add byte ptr [rax], al; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000086433: add byte ptr [rax], 0; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000003648b: add byte ptr [rax], 0; add byte ptr [rax], al; and eax, 0x80000000; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x000000000008bdcb: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000008bdeb: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x0000000000096f7b: add byte ptr [rax], 0; add byte ptr [rax], al; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x0000000000096f8b: add byte ptr [rax], 0; add byte ptr [rax], al; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x30]; ret; 
0x0000000000165c5b: add byte ptr [rax], 0; add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000011f5a3: add byte ptr [rax], 0; add byte ptr [rax], al; lea r14, qword ptr [r13 + 0x18]; mov rsi, r14; call qword ptr [rax + 0x10]; 
0x00000000000d0b1b: add byte ptr [rax], 0; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x000000000009686b: add byte ptr [rax], 0; add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000037643: add byte ptr [rax], 0; add byte ptr [rax], al; mov byte ptr [rdi], 0; xor eax, eax; ret; 
0x000000000008264b: add byte ptr [rax], 0; add byte ptr [rax], al; mov dword ptr [rip + 0x33e3f6], 0; ret; 
0x000000000009f20b: add byte ptr [rax], 0; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 2]; ret; 
0x00000000000c08cb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x3f; syscall; 
0x00000000000ecdfb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x56; syscall; 
0x00000000000f0bfb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x61; syscall; 
0x00000000000c1f6b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x7c; syscall; 
0x00000000000f1d6b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xa3; syscall; 
0x0000000000117ff3: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000001245bb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 2; ret; 
0x000000000012e5db: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x28]; ret; 
0x0000000000072efb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x00000000000735fb: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x00000000000e4e1b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x000000000014d04b: add byte ptr [rax], 0; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000107662: add byte ptr [rax], 0; add byte ptr [rax], al; mov qword ptr [rbp - 0x70], rdx; mov rdx, r14; call rax; 
0x00000000000fa75b: add byte ptr [rax], 0; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12e; syscall; 
0x0000000000126013: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [r12 + 8]; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000074e4b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x140]; call qword ptr [rax + 0x68]; 
0x00000000000f8293: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000012c3cb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x18]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x0000000000121a9b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 8]; call qword ptr [rax]; 
0x000000000012d9cb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp + 8], r8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000012d4cb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp], rdx; mov rsi, rsp; call qword ptr [rax + 8]; 
0x00000000000f965b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c4801]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fcd03: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c4ce9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000000ed383: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2d0ad9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000071413: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x34ca49]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000003cd53: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x381109]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037763: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3866f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003c8db: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, rdi; cqo; idiv rsi; ret; 
0x000000000010816b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x000000000014ce8b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000009cedb: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000006d0b3: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000f4833: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rdi, ebp; mov eax, 3; syscall; 
0x00000000001088a3: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0xe3; syscall; 
0x0000000000033103: add byte ptr [rax], 0; add byte ptr [rax], al; movsxd rdi, r12d; mov eax, 3; syscall; 
0x000000000014d19b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000014d12b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000003639b: add byte ptr [rax], 0; add byte ptr [rax], al; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x00000000000f6a7b: add byte ptr [rax], 0; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000011a033: add byte ptr [rax], 0; add byte ptr [rax], al; pop rbx; ret; 
0x000000000009dd9b: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x000000000011621b: add byte ptr [rax], 0; add byte ptr [rax], al; sub rsp, -0x80; xor eax, eax; pop rbx; ret; 
0x000000000008347b: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x00000000000ed2ab: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000072eeb: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x000000000009399b: add byte ptr [rax], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000000e0dea: add byte ptr [rax], 0; add byte ptr [rbx + 0x3978244c], cl; ret 0x1372; 
0x000000000005ffe6: add byte ptr [rax], 0; add byte ptr [rcx + 1], cl; ret 0x3145; 
0x00000000000a4195: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rdi, rbp; call rbx; 
0x00000000000a4790: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x17], cl; mov rdi, rbp; call rbx; 
0x000000000006498c: add byte ptr [rax], 0; add byte ptr [rcx - 0x1677b], cl; jmp qword ptr [rsi + 0x2e]; 
0x000000000010805c: add byte ptr [rax], 0; add byte ptr [rcx], bh; sal byte ptr [rbp + 7], 1; mov eax, 0xca; syscall; 
0x000000000014c0f3: add byte ptr [rax], 0; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000015ff81: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000031f0d: add byte ptr [rax], 0; add cl, ch; ret; 
0x000000000003672b: add byte ptr [rax], 0; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000000f260d: add byte ptr [rax], 0; lea rsp, qword ptr [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x00000000000f3652: add byte ptr [rax], 0; mov eax, 1; add rsp, 8; ret; 
0x00000000000369bf: add byte ptr [rax], 0; ret; 
0x00000000000c0eda: add byte ptr [rax], ah; add dword ptr [rax + 0x38], edi; syscall; 
0x00000000001a852f: add byte ptr [rax], ah; cmc; jmp rax; 
0x000000000019c5bf: add byte ptr [rax], ah; cwde; out dx, al; call qword ptr [rbx]; 
0x00000000001a1c3f: add byte ptr [rax], ah; in eax, dx; int1; call qword ptr [rax]; 
0x00000000001aae7f: add byte ptr [rax], ah; loope 0x1aae78; jmp qword ptr [rbx]; 
0x000000000002fe34: add byte ptr [rax], ah; movzx eax, ax; ret; 
0x00000000001a1cbf: add byte ptr [rax], ah; out dx, al; int1; jmp qword ptr [rcx]; 
0x000000000019a0a0: add byte ptr [rax], ah; out dx, al; jmp qword ptr [rcx + 1]; 
0x00000000001a50bf: add byte ptr [rax], ah; outsd dx, dword ptr [rsi]; hlt; jmp qword ptr [rcx]; 
0x00000000001a87cf: add byte ptr [rax], ah; push rdi; cmc; call qword ptr [rdx]; 
0x000000000000dcf7: add byte ptr [rax], ah; ret 0x10; 
0x000000000001aee7: add byte ptr [rax], ah; ret 0x3b; 
0x000000000001b1e7: add byte ptr [rax], ah; ret; 
0x0000000000186258: add byte ptr [rax], ah; sti; push rax; and bl, bh; jmp rax; 
0x000000000019c9e6: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; call 0xffffffffba09c9f2; out dx, al; call qword ptr [rax]; 
0x00000000001a797e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; fcom qword ptr [rdi + 0x2b680001]; cmc; call qword ptr [rax]; 
0x00000000001a7a7e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; fcomp qword ptr [rax + 0x2d380001]; cmc; jmp qword ptr [rcx]; 
0x00000000001a6a7e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; fmul qword ptr [rax - 0x2007ffff]; hlt; jmp qword ptr [rcx]; 
0x00000000001b6396: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; hlt; add dword ptr [rdx], 0xf7f85000; call qword ptr [rbx]; 
0x00000000001aa596: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; hlt; ret; 
0x00000000001a4b8e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; in al, dx; imul eax, dword ptr [rcx], 0xf4639800; jmp qword ptr [rax]; 
0x00000000001aa98e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; in al, dx; mov dword ptr [rcx], 0xf5d70800; call qword ptr [rsi]; 
0x00000000001aa90e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; insb byte ptr [rdi], dx; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rsi]; 
0x000000000019a44e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret 0; 
0x00000000001aa54e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret; 
0x0000000000199ee6: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; mov ebp, 0x1ba00000; out dx, al; call qword ptr [rcx]; 
0x00000000001a4d5e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; mov esp, 0x1800016b; hlt; jmp qword ptr [rcx]; 
0x00000000001a825e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; mov esp, 0x180001a0; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001a7f2e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; mov word ptr [rbp + 0x33080001], ds; cmc; jmp qword ptr [rcx]; 
0x00000000001a7c2e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; mov word ptr [rdx + 0x2ef80001], ds; cmc; jmp qword ptr [rcx]; 
0x00000000001a642e: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; mov word ptr [rdx - 0x3377ffff], es; hlt; jmp qword ptr [rcx]; 
0x000000000019a4fe: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; pop rsp; ret; 
0x00000000001aa8f6: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; push rsp; mov dword ptr [rcx], 0xf5d6f000; jmp qword ptr [rsi]; 
0x00000000001a7526: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; test byte ptr [rbx + 0x20c00001], dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a8526: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; test byte ptr [rbx + 0x47200001], ah; cmc; jmp rax; 
0x0000000000197526: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; test byte ptr [rbx - 0x42800000], dl; in eax, dx; jmp qword ptr [rax]; 
0x00000000001a7b26: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; test byte ptr [rcx + 0x2dc00001], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a6926: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; test byte ptr [rdi - 0x22efffff], al; hlt; call qword ptr [rdx]; 
0x00000000001a8426: add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; test byte ptr [rdx + 0x43900001], ah; cmc; call qword ptr [rax]; 
0x00000000001a1cba: add byte ptr [rax], al; adc al, 0x3b; add dword ptr [rax], eax; and dh, ch; int1; jmp qword ptr [rcx]; 
0x00000000001a50ba: add byte ptr [rax], al; adc al, 0x6f; add dword ptr [rax], eax; and byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001a63ba: add byte ptr [rax], al; adc al, 0x82; add dword ptr [rax], eax; and bl, cl; hlt; jmp qword ptr [rdx]; 
0x00000000001a73ba: add byte ptr [rax], al; adc al, 0x92; add dword ptr [rax], eax; and byte ptr [rsi], cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7bba: add byte ptr [rax], al; adc al, 0x9a; add dword ptr [rax], eax; sub byte ptr [rsi], 0xf5; jmp qword ptr [rcx]; 
0x0000000000188fae: add byte ptr [rax], al; adc al, 0x9b; out dx, al; jmp rsp; 
0x0000000000199eba: add byte ptr [rax], al; adc al, 0xbd; add byte ptr [rax], al; mov al, 0x1a; out dx, al; call qword ptr [rdi]; 
0x00000000001aa6ba: add byte ptr [rax], al; adc al, 0xc5; add dword ptr [rax], eax; rcl ch, 1; cmc; jmp qword ptr [rsi]; 
0x00000000001ab4ba: add byte ptr [rax], al; adc al, 0xd3; add dword ptr [rax], eax; shl ch, 1; cmc; jmp rbx; 
0x000000000019cbba: add byte ptr [rax], al; adc al, 0xea; add byte ptr [rax], al; mov al, 0xbf; out dx, al; jmp qword ptr [rax]; 
0x000000000019d1ba: add byte ptr [rax], al; adc al, 0xf0; add byte ptr [rax], al; nop; adc bh, dl; call qword ptr [rax]; 
0x000000000000559e: add byte ptr [rax], al; adc al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x31; 
0x00000000000007b8: add byte ptr [rax], al; adc al, byte ptr [rax]; add byte ptr [rbx + 1], al; ret 0x102; 
0x000000000000fa1a: add byte ptr [rax], al; adc al, byte ptr [rax]; or al, 0; push rax; call qword ptr [rax]; 
0x000000000000a1e2: add byte ptr [rax], al; adc al, byte ptr [rax]; or al, 0; push rax; ret 0x10; 
0x000000000000a9c2: add byte ptr [rax], al; adc al, byte ptr [rax]; or al, 0; push rax; ret 0xb; 
0x00000000000066ba: add byte ptr [rax], al; adc al, byte ptr [rax]; or al, 0; push rax; ret 7; 
0x0000000000197b7e: add byte ptr [rax], al; adc al, cl; in eax, dx; call qword ptr [rbx]; 
0x0000000000036068: add byte ptr [rax], al; adc byte ptr [rax + 0x48d00148], al; shr eax, 0x3f; ret; 
0x000000000000ffae: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x0000000000039cf6: add byte ptr [rax], al; adc byte ptr [rax], al; or rax, rsi; mov qword ptr [rdi], rax; mov eax, 1; ret; 
0x00000000001907ce: add byte ptr [rax], al; adc byte ptr [rbx - 0x16], ah; call qword ptr [rax]; 
0x000000000017297e: add byte ptr [rax], al; adc byte ptr [rbx], ah; in al, dx; call qword ptr [rax]; 
0x000000000019a48e: add byte ptr [rax], al; adc byte ptr [rbx], ch; out dx, al; call qword ptr [rsi]; 
0x0000000000193a2e: add byte ptr [rax], al; adc byte ptr [rcx], cl; in al, dx; jmp qword ptr [rcx]; 
0x000000000019d78e: add byte ptr [rax], al; adc byte ptr [rdi - 0x11], ah; jmp qword ptr [rsi]; 
0x00000000000007b4: add byte ptr [rax], al; adc byte ptr [rdx], ah; add byte ptr [rax], al; adc al, byte ptr [rax]; add byte ptr [rbx + 1], al; ret 0x102; 
0x00000000001931ee: add byte ptr [rax], al; adc byte ptr [rsi - 0x15], ah; call qword ptr [rdi]; 
0x000000000019919e: add byte ptr [rax], al; adc ch, bh; in eax, dx; call qword ptr [rax]; 
0x000000000018e346: add byte ptr [rax], al; adc r13b, r9b; jmp qword ptr [rbp]; 
0x00000000001a4889: add byte ptr [rax], al; add ah, ah; add word ptr [rax], ax; shl rdi, 1; jmp qword ptr [rax]; 
0x000000000019d789: add byte ptr [rax], al; add ah, ah; cmc; add byte ptr [rax], al; adc byte ptr [rdi - 0x11], ah; jmp qword ptr [rsi]; 
0x00000000001a5389: add byte ptr [rax], al; add ah, ah; jno 0x1a5390; add byte ptr [rax], dh; jnp 0x1a5387; jmp qword ptr [rcx]; 
0x00000000001b5c89: add byte ptr [rax], al; add ah, ah; jp 0x1b5c91; add byte ptr [rax], dh; fdivrp st(7); call qword ptr [rcx]; 
0x00000000001a9a89: add byte ptr [rax], al; add ah, ah; mov eax, 0x71700001; cmc; call rsp; 
0x0000000000194a61: add byte ptr [rax], al; add ah, ah; or dword ptr [rax], eax; add byte ptr [rax - 0x72], ch; in eax, dx; call qword ptr [rax]; 
0x000000000019a489: add byte ptr [rax], al; add ah, ah; ret 0; 
0x000000000019ca69: add byte ptr [rax], al; add ah, al; call 0xffffffffbb89ca72; out dx, al; jmp qword ptr [rdx]; 
0x00000000001a6a69: add byte ptr [rax], al; add ah, al; mov byte ptr [rcx], al; add al, ah; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001a4c69: add byte ptr [rax], al; add ah, al; push 1; add byte ptr [rax], dl; hlt; call qword ptr [rbp]; 
0x000000000019a469: add byte ptr [rax], al; add ah, al; ret 0; 
0x00000000001aa569: add byte ptr [rax], al; add ah, al; ret; 
0x000000000019a369: add byte ptr [rax], al; add ah, al; rol dword ptr [rax], 0; mov al, 0x25; out dx, al; jmp qword ptr [rax]; 
0x000000000018f169: add byte ptr [rax], al; add ah, al; sldt word ptr [rax]; nop; shr ecx, cl; call qword ptr [rcx + 5]; 
0x0000000000199ba1: add byte ptr [rax], al; add ah, bh; mov ecx, 0xb5180000; cld; jmp qword ptr [rcx]; 
0x00000000001a50a1: add byte ptr [rax], al; add ah, bh; outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; or byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001ab4a1: add byte ptr [rax], al; add ah, bh; rol byte ptr [rcx], cl; add al, bl; in eax, 0xf5; call qword ptr [rax]; 
0x00000000001a0aa1: add byte ptr [rax], al; add ah, bh; sub byte ptr [rcx], al; add byte ptr [rax - 0x33], ch; int1; jmp qword ptr [rax]; 
0x000000000019b9a1: add byte ptr [rax], al; add ah, bh; xlatb; add byte ptr [rax], al; xor rbp, rsi; call qword ptr [rsi]; 
0x000000000019e181: add byte ptr [rax], al; add ah, bl; inc dword ptr [rax]; add byte ptr [rax + 0x42], ch; cld; jmp qword ptr [rbx + 0x17]; 
0x00000000001a5c81: add byte ptr [rax], al; add ah, bl; jp 0x1a5c88; add byte ptr [rax], bh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a6a81: add byte ptr [rax], al; add ah, bl; mov byte ptr [rcx], al; add al, bh; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001a5181: add byte ptr [rax], al; add ah, bl; outsd dx, dword ptr [rsi]; add dword ptr [rax], eax; sub byte ptr [rsi - 0xc], dh; jmp qword ptr [rcx]; 
0x00000000001aa581: add byte ptr [rax], al; add ah, bl; ret; 
0x000000000019a381: add byte ptr [rax], al; add ah, bl; rol dword ptr [rax], 0; sub byte ptr [rax], ch; out dx, al; call qword ptr [rsi]; 
0x000000000018f391: add byte ptr [rax], al; add ah, ch; adc dword ptr [rax], eax; add byte ptr [rax + 0x58], cl; std; jmp qword ptr [rax]; 
0x00000000001aba91: add byte ptr [rax], al; add ah, ch; fadd dword ptr [rcx]; add byte ptr [rax - 0x13], cl; cmc; jmp qword ptr [rax]; 
0x00000000001a4b91: add byte ptr [rax], al; add ah, ch; imul eax, dword ptr [rcx], 0xf4639800; jmp qword ptr [rax]; 
0x0000000000199291: add byte ptr [rax], al; add ah, ch; mov al, 0; add byte ptr [rax + 1], bl; out dx, al; jmp rax; 
0x00000000001aa991: add byte ptr [rax], al; add ah, ch; mov dword ptr [rcx], 0xf5d70800; call qword ptr [rsi]; 
0x00000000001adfa1: add byte ptr [rax], al; add ah, ch; stc; add dword ptr [rax], eax; jmp qword ptr [rdi]; 
0x00000000001b0a91: add byte ptr [rax], al; add ah, ch; sub byte ptr [rdx], al; add byte ptr [rax + 0x64], bl; clc; jmp qword ptr [rbx]; 
0x00000000001af571: add byte ptr [rax], al; add ah, cl; adc eax, dword ptr [rdx]; add al, bl; mov esi, esi; call qword ptr [rbx]; 
0x00000000001a1b71: add byte ptr [rax], al; add ah, cl; cmp dword ptr [rcx], eax; add al, ch; out 0xf1, eax; jmp rsi; 
0x00000000001b1d71: add byte ptr [rax], al; add ah, cl; cmp eax, dword ptr [rdx]; add byte ptr [rax], bh; or al, 0xf7; call qword ptr [rbx]; 
0x000000000019ba71: add byte ptr [rax], al; add ah, cl; fadd dword ptr [rax]; add al, bh; out dx, al; call rsp; 
0x00000000001a9a71: add byte ptr [rax], al; add ah, cl; mov eax, 0x70d80001; cmc; jmp qword ptr [rcx]; 
0x000000000019a981: add byte ptr [rax], al; add ah, cl; ret; 
0x00000000001afd71: add byte ptr [rax], al; add ah, cl; sbb eax, dword ptr [rdx]; add al, bh; mov dh, 0xf6; call qword ptr [rdi]; 
0x00000000001b0d71: add byte ptr [rax], al; add ah, cl; sub eax, dword ptr [rdx]; add byte ptr [rax], bl; fdecstp; call qword ptr [rcx + 5]; 
0x00000000001b6399: add byte ptr [rax], al; add ah, dh; add dword ptr [rdx], 0xf7f85000; call qword ptr [rbx]; 
0x00000000001b0799: add byte ptr [rax], al; add ah, dh; and eax, 0x65300002; clc; jmp qword ptr [rbx]; 
0x000000000019a099: add byte ptr [rax], al; add ah, dh; mov esi, 0x20000000; out dx, al; jmp qword ptr [rcx + 1]; 
0x000000000019a8a9: add byte ptr [rax], al; add ah, dh; ret 0; 
0x00000000001aa499: add byte ptr [rax], al; add ah, dh; ret 1; 
0x00000000001aa599: add byte ptr [rax], al; add ah, dh; ret; 
0x00000000001a7d99: add byte ptr [rax], al; add ah, dh; wait; add dword ptr [rax], eax; sal byte ptr [rax], 0xf5; jmp qword ptr [rax]; 
0x00000000001b2279: add byte ptr [rax], al; add ah, dl; add al, byte ptr [rax]; push rax; and esi, edi; call qword ptr [rdx]; 
0x0000000000192b79: add byte ptr [rax], al; add ah, dl; add byte ptr [r8], al; add byte ptr [rcx - 0x15], al; call rdx; 
0x00000000001ae579: add byte ptr [rax], al; add ah, dl; add eax, dword ptr [rdx]; add al, al; sub al, 0xf6; jmp qword ptr [rdi]; 
0x00000000001a4d79: add byte ptr [rax], al; add ah, dl; imul eax, dword ptr [rcx], 0; xor byte ptr [rsi - 0xc], ah; jmp qword ptr [rcx]; 
0x00000000001a5d79: add byte ptr [rax], al; add ah, dl; jnp 0x1a5d80; add byte ptr [rax - 0x49], dh; hlt; call rdi; 
0x00000000001a1479: add byte ptr [rax], al; add ah, dl; xor al, byte ptr [rcx]; add byte ptr [rax - 0x21], dl; int1; jmp qword ptr [rdi + 1]; 
0x00000000000049fe: add byte ptr [rax], al; add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x3b; 
0x00000000001a20aa: add byte ptr [rax], al; add al, 0x3f; add dword ptr [rax], eax; xor dh, bh; int1; jmp qword ptr [rcx]; 
0x00000000001a24aa: add byte ptr [rax], al; add al, 0x43; add dword ptr [rax], eax; push rax; sbb edx, esi; call qword ptr [rdx]; 
0x0000000000188cb6: add byte ptr [rax], al; add al, 0x6b; out dx, al; call rsp; 
0x00000000001a4faa: add byte ptr [rax], al; add al, 0x6e; add dword ptr [rax], eax; adc byte ptr [rbp - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001a7caa: add byte ptr [rax], al; add al, 0x9b; add dword ptr [rax], eax; jo 0x1a7ce1; cmc; jmp qword ptr [rcx]; 
0x00000000001ac4aa: add byte ptr [rax], al; add al, 0xe3; add dword ptr [rax], eax; cmp ch, 0xf5; call qword ptr [rax]; 
0x00000000001ac5aa: add byte ptr [rax], al; add al, 0xe4; add dword ptr [rax], eax; add ch, bh; cmc; jmp rsp; 
0x000000000001b125: add byte ptr [rax], al; add al, ah; ret 0x3b; 
0x000000000001b40d: add byte ptr [rax], al; add al, ah; ret; 
0x000000000010c57b: add byte ptr [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000001b0c5: add byte ptr [rax], al; add al, al; ret 0x3b; 
0x000000000001b3ad: add byte ptr [rax], al; add al, al; ret; 
0x000000000010c5f9: add byte ptr [rax], al; add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000001b16d: add byte ptr [rax], al; add al, bh; ret 0x3b; 
0x000000000001b10d: add byte ptr [rax], al; add al, bl; ret 0x3b; 
0x000000000001b3f5: add byte ptr [rax], al; add al, bl; ret; 
0x0000000000123a40: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0xc8; jmp rcx; 
0x000000000008cc39: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 0x79]; ret; 
0x0000000000086f8d: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 5]; ret; 
0x000000000008cc9c: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 6]; ret; 
0x0000000000088e09: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 9]; ret; 
0x000000000008be63: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0x1f]; ret; 
0x00000000000a37b3: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0xc84f]; ret; 
0x00000000000a2c03: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0xd48f]; ret; 
0x0000000000088dbd: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x10f35]; ret; 
0x0000000000086b3d: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x11595]; ret; 
0x000000000009164e: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb1174]; ret; 
0x000000000008a69d: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xcdf55]; ret; 
0x000000000008cacd: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xce6a5]; ret; 
0x000000000008841d: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xcea25]; ret; 
0x000000000008cbed: add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xcfd95]; ret; 
0x0000000000104bd0: add byte ptr [rax], al; add al, byte ptr [rcx - 1]; push rbp; sub byte ptr [rax - 0x77], cl; ret; 
0x00000000000e4518: add byte ptr [rax], al; add al, ch; adc byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x0000000000048767: add byte ptr [rax], al; add al, ch; add dword ptr [rbp - 0x76b7fffb], esi; ret 0xffb8; 
0x000000000002385e: add byte ptr [rax], al; add al, ch; cli; ret; 
0x00000000000cb16b: add byte ptr [rax], al; add al, ch; cmp eax, 0x48ffffff; add esp, 0x18; ret; 
0x00000000000c0f8c: add byte ptr [rax], al; add al, ch; fdivr qword ptr [rax - 0x76b70005]; ret; 
0x00000000001246c6: add byte ptr [rax], al; add al, ch; imul edi, ebp, 0x89c085ff; ret; 
0x00000000000d9289: add byte ptr [rax], al; add al, ch; jmp qword ptr [rcx - 0xc]; 
0x0000000000129e49: add byte ptr [rax], al; add al, ch; jmp rcx; 
0x00000000001344dd: add byte ptr [rax], al; add al, ch; jnp 0x13449a; out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x00000000001273bf: add byte ptr [rax], al; add al, ch; jns 0x127357; lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x000000000002eccb: add byte ptr [rax], al; add al, ch; lodsd eax, dword ptr [rsi]; ret; 
0x00000000001178a2: add byte ptr [rax], al; add al, ch; mov dh, 0x83; int1; jmp qword ptr [rsi + 0xf]; 
0x00000000000e9eef: add byte ptr [rax], al; add al, ch; mov dword ptr [rbp - 0xd], edx; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x0000000000022096: add byte ptr [rax], al; add al, ch; movabs byte ptr [0x2074fff883000c9a], al; add rsp, 8; ret; 
0x000000000001b13d: add byte ptr [rax], al; add al, ch; ret 0x3b; 
0x00000000000bf3b6: add byte ptr [rax], al; add al, ch; ret 0x48c; 
0x00000000000afcb6: add byte ptr [rax], al; add al, ch; ret 0x583; 
0x000000000003a1b6: add byte ptr [rax], al; add al, ch; ret 0xcde; 
0x0000000000088876: add byte ptr [rax], al; add al, ch; ret 0xfa7d; 
0x0000000000083a16: add byte ptr [rax], al; add al, ch; ret 0xfb99; 
0x0000000000081246: add byte ptr [rax], al; add al, ch; ret 0xffdb; 
0x000000000001b425: add byte ptr [rax], al; add al, ch; ret; 
0x00000000000f7e5f: add byte ptr [rax], al; add al, ch; sub r9b, dil; dec dword ptr [rax + 0x39]; ret; 
0x00000000000d8c55: add byte ptr [rax], al; add al, ch; xchg eax, ebx; fdivr st(7); dec dword ptr [rax - 0x77]; ret; 
0x000000000011f4b6: add byte ptr [rax], al; add al, ch; xchg eax, edx; ret 0; 
0x00000000000eafe6: add byte ptr [rax], al; add al, ch; xor al, byte ptr [rcx]; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000e44f8: add byte ptr [rax], al; add al, ch; xor byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000008ab63: add byte ptr [rax], al; add al, ch; xor eax, 0x39fffad0; ret; 
0x000000000001b0dd: add byte ptr [rax], al; add al, cl; ret 0x3b; 
0x000000000001b3c5: add byte ptr [rax], al; add al, cl; ret; 
0x000000000001b155: add byte ptr [rax], al; add al, dh; ret 0x3b; 
0x000000000001b43d: add byte ptr [rax], al; add al, dh; ret; 
0x000000000001b0f5: add byte ptr [rax], al; add al, dl; ret 0x3b; 
0x000000000001b3dd: add byte ptr [rax], al; add al, dl; ret; 
0x000000000001a2dd: add byte ptr [rax], al; add bh, ah; ret 0x17; 
0x0000000000039d0d: add byte ptr [rax], al; add bh, al; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000008264d: add byte ptr [rax], al; add bh, al; add eax, 0x33e3f6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000012b1ac: add byte ptr [rax], al; add bh, al; and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x00000000000f23e1: add byte ptr [rax], al; add bh, al; and al, 0xa8; sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000001e29d: add byte ptr [rax], al; add bh, al; ret 0x17; 
0x000000000004e989: add byte ptr [rax], al; add bh, al; test dword ptr [rdx + rdi*8 + 0x1ffff], edx; add byte ptr [rax], al; jmp rax; 
0x000000000004ed71: add byte ptr [rax], al; add bh, al; test dword ptr [rdx + rdi*8 + 0xffff], edx; add byte ptr [rax], al; jmp rax; 
0x0000000000165c5d: add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000006e48e: add byte ptr [rax], al; add bh, bh; rol byte ptr [rbx + 0x1074fff8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000007a3ab: add byte ptr [rax], al; add bh, bh; xchg eax, ecx; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000001e315: add byte ptr [rax], al; add bh, dh; ret 0x17; 
0x00000000000d1cd7: add byte ptr [rax], al; add bh, dh; ret; 
0x0000000000036475: add byte ptr [rax], al; add bh, dh; shl byte ptr [rcx], cl; ret 0xf66; 
0x000000000001a2ad: add byte ptr [rax], al; add bh, dl; ret 0x17; 
0x0000000000107a8c: add byte ptr [rax], al; add bl, al; mov rax, qword ptr [rip + 0x2bc501]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001211c7: add byte ptr [rax], al; add bl, al; nop dword ptr [rax + rax]; lea rdx, qword ptr [rip + 0x29c9a9]; mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x000000000012d612: add byte ptr [rax], al; add bl, al; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x00000000000f1b41: add byte ptr [rax], al; add bl, ch; leave; nop word ptr cs:[rax + rax]; mov eax, 0xaa; syscall; 
0x000000000003e045: add byte ptr [rax], al; add bl, ch; mov eax, 0x1b8; add byte ptr [rax + 1], cl; ret; 
0x00000000000ba0c4: add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x0000000000044ee1: add byte ptr [rax], al; add bl, ch; ret 0x2e66; 
0x00000000000265b3: add byte ptr [rax], al; add bl, ch; ret 0x8b48; 
0x0000000000046e42: add byte ptr [rax], al; add bl, ch; ret; 
0x0000000000133c27: add byte ptr [rax], al; add bl, ch; ror dword ptr [rdi], 0x1f; add bl, sil; ret; 
0x000000000007bd37: add byte ptr [rax], al; add bl, ch; xchg eax, esi; nop dword ptr [rax]; mov rax, -1; ret; 
0x000000000009f37d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009e53d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009cedd: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000009de8d: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x000000000009de9d: add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x000000000002dd65: add byte ptr [rax], al; add bl, dh; ret; 
0x00000000001946e1: add byte ptr [rax], al; add byte ptr [0xfffffffff8c80000], bh; in al, dx; call qword ptr [rax]; 
0x00000000000f11dd: add byte ptr [rax], al; add byte ptr [rax + 0x10], bh; syscall; 
0x000000000018620d: add byte ptr [rax], al; add byte ptr [rax + 0x10], dh; sti; inc dword ptr [rax + 0x11]; sti; call qword ptr [rax]; 
0x00000000000ed03f: add byte ptr [rax], al; add byte ptr [rax + 0x10f], bh; syscall; 
0x000000000001b17d: add byte ptr [rax], al; add byte ptr [rax + 0x185e], bl; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000012260c: add byte ptr [rax], al; add byte ptr [rax + 0x289c80f], al; mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x00000000000d4010: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x148; 
0x00000000000b55f3: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x2948; 
0x00000000000514d0: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8349; 
0x000000000007d4d3: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8d49; 
0x0000000000095b93: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000007896d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000027489: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000001a8231: add byte ptr [rax], al; add byte ptr [rax + 0x3ae80001], cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a8249: add byte ptr [rax], al; add byte ptr [rax + 0x3b000001], ah; cmc; jmp qword ptr [rcx]; 
0x00000000001a8261: add byte ptr [rax], al; add byte ptr [rax + 0x3b180001], bh; cmc; jmp qword ptr [rcx]; 
0x00000000000464d5: add byte ptr [rax], al; add byte ptr [rax + 0x3e], bh; movsxd rdi, ebx; syscall; 
0x0000000000136b93: add byte ptr [rax], al; add byte ptr [rax + 0x3e], bh; syscall; 
0x00000000000c08cd: add byte ptr [rax], al; add byte ptr [rax + 0x3f], bh; syscall; 
0x00000000001860fb: add byte ptr [rax], al; add byte ptr [rax + 0x43], dl; pop rcx; clc; ret 0x6e1f; 
0x00000000000f308d: add byte ptr [rax], al; add byte ptr [rax + 0x4c], bh; syscall; 
0x00000000000ecf7d: add byte ptr [rax], al; add byte ptr [rax + 0x54], bh; syscall; 
0x00000000000ecdfd: add byte ptr [rax], al; add byte ptr [rax + 0x56], bh; syscall; 
0x00000000000eb37d: add byte ptr [rax], al; add byte ptr [rax + 0x5a], bh; syscall; 
0x00000000000eb36d: add byte ptr [rax], al; add byte ptr [rax + 0x5f], bh; syscall; 
0x00000000000eb36d: add byte ptr [rax], al; add byte ptr [rax + 0x5f], bh; syscall; ret; 
0x00000000000f0bfd: add byte ptr [rax], al; add byte ptr [rax + 0x61], bh; syscall; 
0x000000000006d0b5: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x000000000003cad3: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; and al, 0xc; add rsp, 0x18; ret; 
0x0000000000130935: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x14c; 
0x00000000000210d0: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x894c; 
0x00000000000db9d7: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8b48; 
0x00000000000daac1: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x0000000000117ebe: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror byte ptr [rax + 1], 1; xlatb; mov qword ptr [r9], rdi; ret; 
0x000000000006f5f1: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000001211b9: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sbb byte ptr [r11 + 0xb7603f8], r8b; mov eax, 2; ret; 
0x00000000000f4835: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; std; mov eax, 3; syscall; 
0x00000000000464da: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sti; syscall; 
0x00000000000e449c: add byte ptr [rax], al; add byte ptr [rax + 0x6607b70f], dl; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000c1d0d: add byte ptr [rax], al; add byte ptr [rax + 0x66], bh; syscall; 
0x00000000000c1d0d: add byte ptr [rax], al; add byte ptr [rax + 0x66], bh; syscall; ret; 
0x0000000000036146: add byte ptr [rax], al; add byte ptr [rax + 0x66d02148], al; movd mm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000c1d2d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x00000000000c1d2d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000000c1d1d: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000000c1d1d: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000000c1d3d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x00000000000c1d3d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000000360d9: add byte ptr [rax], al; add byte ptr [rax + 0x7110ff2], al; and rax, rdx; movq xmm0, rax; ret; 
0x00000000000c1d4d: add byte ptr [rax], al; add byte ptr [rax + 0x73], bh; syscall; 
0x0000000000109f7c: add byte ptr [rax], al; add byte ptr [rax + 0x77ca3948], dl; and bh, byte ptr [rax + 0x59]; syscall; 
0x000000000009e3dd: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000000c1f6d: add byte ptr [rax], al; add byte ptr [rax + 0x7c], bh; syscall; 
0x000000000016637d: add byte ptr [rax], al; add byte ptr [rax + 0x7d], al; in al, dx; call qword ptr [rax]; 
0x00000000000c23f8: add byte ptr [rax], al; add byte ptr [rax + 0x7f], bh; ret; 
0x0000000000036f32: add byte ptr [rax], al; add byte ptr [rax + 0x7f], bh; syscall; 
0x0000000000036f6c: add byte ptr [rax], al; add byte ptr [rax + 0x82], bh; syscall; 
0x00000000000f101d: add byte ptr [rax], al; add byte ptr [rax + 0x8d], bh; syscall; 
0x00000000000f1d6d: add byte ptr [rax], al; add byte ptr [rax + 0xa3], bh; syscall; 
0x00000000000fa40d: add byte ptr [rax], al; add byte ptr [rax + 0xa6], bh; syscall; 
0x00000000000f1b4d: add byte ptr [rax], al; add byte ptr [rax + 0xaa], bh; syscall; 
0x00000000000f1bed: add byte ptr [rax], al; add byte ptr [rax + 0xab], bh; syscall; 
0x000000000010808f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x000000000010808f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x0000000000108136: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000000c2bf4: add byte ptr [rax], al; add byte ptr [rax + 0xe5], bh; syscall; 
0x0000000000047107: add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x00000000001903e6: add byte ptr [rax], al; add byte ptr [rax + 0xe], dl; adc byte ptr [rbx + 0xa4c0202], al; ret; 
0x00000000000f2edd: add byte ptr [rax], al; add byte ptr [rax + 0xeb], bh; syscall; 
0x00000000000c24bd: add byte ptr [rax], al; add byte ptr [rax + 0xfc17], bh; ret; 
0x00000000001224ab: add byte ptr [rax], al; add byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x000000000002c04d: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000001a8201: add byte ptr [rax], al; add byte ptr [rax + 1], bl; add byte ptr [rax + 0x3a], bl; cmc; jmp qword ptr [rax]; 
0x00000000000a1e30: add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x00000000000a54ed: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x1a75; 
0x0000000000095c9d: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8348; 
0x00000000000d6b25: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000df0a7: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8d4c; 
0x000000000003e04c: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret; 
0x000000000012144d: add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x0000000000000874: add byte ptr [rax], al; add byte ptr [rax + rax + 0x11323290], ah; out 0xc, eax; movabs eax, dword ptr [0x10c0449000e]; ret 0x440c; 
0x0000000000192201: add byte ptr [rax], al; add byte ptr [rax + rax*2], bl; add al, cl; mov cl, 0xea; call qword ptr [rax]; 
0x0000000000192219: add byte ptr [rax], al; add byte ptr [rax + rax*2], dh; add al, al; mov cl, 0xea; call qword ptr [rdx]; 
0x00000000001ac129: add byte ptr [rax], al; add byte ptr [rax + rax*4 - 0x78fffff], ch; cmc; call qword ptr [rcx]; 
0x000000000003196d: add byte ptr [rax], al; add byte ptr [rax + rax*8 - 0x7cb7ec8c], al; ret 0x4901; 
0x00000000000c0395: add byte ptr [rax], al; add byte ptr [rax + rax*8 - 0x7cb7f48c], al; ret; 
0x000000000019a1d9: add byte ptr [rax], al; add byte ptr [rax + rax*8], dh; add byte ptr [rax], al; nop; and al, 0xee; call qword ptr [rsi]; 
0x000000000000733d: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001aa93d: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rax], al; pushfq; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rdi]; 
0x00000000001a975d: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rbp + rsi*4 + 0x6ed80001], bh; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001a8ccd: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rbx + rbp*4], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xb], bl; jmp qword ptr [rdi + 1]; 
0x00000000001aa15d: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rdi + rdi*4 - 0x7127ffff], bh; cmc; jmp qword ptr [rbx + 2]; 
0x00000000001b6435: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rdx + rax*4 - 0xdeffffe], dl; cli; call rcx; 
0x00000000001ac83d: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rsi + 0x2880001], bl; idiv bh; ret 3; 
0x00000000001adf9d: add byte ptr [rax], al; add byte ptr [rax + rax], al; add ah, ch; stc; add dword ptr [rax], eax; jmp qword ptr [rdi]; 
0x000000000019a97d: add byte ptr [rax], al; add byte ptr [rax + rax], al; add ah, cl; ret; 
0x000000000019a8a5: add byte ptr [rax], al; add byte ptr [rax + rax], al; add ah, dh; ret 0; 
0x00000000000049fd: add byte ptr [rax], al; add byte ptr [rax + rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x3b; 
0x0000000000194f3d: add byte ptr [rax], al; add byte ptr [rax + rax], al; add byte ptr [rbp + rbp*2 - 0x69d80000], bl; in eax, dx; jmp rsp; 
0x000000000019bd5d: add byte ptr [rax], al; add byte ptr [rax + rax], al; add byte ptr [rbx + rbx*8 + 0x6d780000], bh; out dx, al; call qword ptr [rdi]; 
0x000000000019d5f5: add byte ptr [rax], al; add byte ptr [rax + rax], al; add byte ptr [rsp + rsi*8], dl; add al, al; out dx, eax; jmp qword ptr [rcx]; 
0x00000000001a0b5d: add byte ptr [rax], al; add byte ptr [rax + rax], bh; add byte ptr [rax], al; mov esp, 0x38000129; sal ecx, cl; call rsi; 
0x000000000019d25d: add byte ptr [rax], al; add byte ptr [rax + rax], bh; add byte ptr [rax], al; mov esp, 0x80000f0; out dx, eax; jmp qword ptr [rbp + 4]; 
0x00000000001a9425: add byte ptr [rax], al; add byte ptr [rax + rax], bh; add byte ptr [rax], al; test byte ptr [rdx + 0x69e00001], dh; cmc; call rcx; 
0x00000000001aa495: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; hlt; ret 1; 
0x0000000000198e2d: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov word ptr [rax + rax - 0x120a0800], gs; jmp qword ptr [rbx]; 
0x000000000019632d: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rcx + rax*4 - 0x56b80000], cl; in eax, dx; call rcx; 
0x00000000001a892d: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rdi + 0x5d580001], cl; cmc; call qword ptr [rcx]; 
0x000000000019fb5d: add byte ptr [rax], al; add byte ptr [rax + rax], ch; add byte ptr [rax], al; mov esp, 0xd8000119; sbb cl, dh; jmp qword ptr [rax + 1]; 
0x00000000001aba3d: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + rbx*8 - 0x1407ffff], bl; cmc; jmp qword ptr [rax + 1]; 
0x00000000001a51dd: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + rsi*2], bh; add dword ptr [rax], eax; mov byte ptr [rcx + rdi*8], dl; call qword ptr [rax]; 
0x00000000001991ed: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + rsi*4], cl; add byte ptr [rax - 3], ch; in eax, dx; call qword ptr [rsi + 2]; 
0x00000000001a1f1d: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rbp + rdi + 1], bh; add byte ptr [rax], bh; div ecx; jmp qword ptr [rax + 1]; 
0x00000000001a0ed5: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rbp - 0x2b2fffff], dh; int1; jmp qword ptr [rbx]; 
0x00000000001a6ed5: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rcx*4 - 0x12fffff], dh; hlt; jmp rax; 
0x00000000001a50cd: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rdi + rbp*2], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xc], ch; call qword ptr [rax + 6]; 
0x00000000001a70f5: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rdi + rcx*4 + 1], dl; add byte ptr [rax + 7], dl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001a843d: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rdx + 0x43c80001], bl; cmc; jmp rdi; 
0x00000000001ac7ed: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rsi + 1], cl; add al, ch; add dh, dh; jmp qword ptr [rbx + 1]; 
0x00000000001aa015: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rsi + rdi*4 + 1], dh; add byte ptr [rax - 0x7b], al; cmc; call qword ptr [rsi + 6]; 
0x00000000001a5dfd: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rsp + rdi*2 + 1], bl; add byte ptr [rax - 0x47], cl; hlt; call rdi; 
0x00000000001a6345: add byte ptr [rax], al; add byte ptr [rax + rax], dh; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rcx], 0xf4c5c000; call qword ptr [rax + 5]; 
0x000000000019c9e5: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; call 0xffffffffba09c9f2; out dx, al; call qword ptr [rax]; 
0x00000000001a797d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; fcom qword ptr [rdi + 0x2b680001]; cmc; call qword ptr [rax]; 
0x00000000001a7a7d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; fcomp qword ptr [rax + 0x2d380001]; cmc; jmp qword ptr [rcx]; 
0x00000000001a6a7d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; fmul qword ptr [rax - 0x2007ffff]; hlt; jmp qword ptr [rcx]; 
0x00000000001b6395: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; hlt; add dword ptr [rdx], 0xf7f85000; call qword ptr [rbx]; 
0x00000000001aa595: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; hlt; ret; 
0x00000000001a4b8d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; in al, dx; imul eax, dword ptr [rcx], 0xf4639800; jmp qword ptr [rax]; 
0x00000000001aa98d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; in al, dx; mov dword ptr [rcx], 0xf5d70800; call qword ptr [rsi]; 
0x00000000001aa90d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; insb byte ptr [rdi], dx; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rsi]; 
0x000000000019a44d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret 0; 
0x00000000001aa54d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret; 
0x0000000000199ee5: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov ebp, 0x1ba00000; out dx, al; call qword ptr [rcx]; 
0x00000000001a4d5d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0x1800016b; hlt; jmp qword ptr [rcx]; 
0x00000000001a825d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov esp, 0x180001a0; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001a7f2d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rbp + 0x33080001], ds; cmc; jmp qword ptr [rcx]; 
0x00000000001a7c2d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rdx + 0x2ef80001], ds; cmc; jmp qword ptr [rcx]; 
0x00000000001a642d: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov word ptr [rdx - 0x3377ffff], es; hlt; jmp qword ptr [rcx]; 
0x000000000019a4fd: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; pop rsp; ret; 
0x00000000001aa8f5: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; push rsp; mov dword ptr [rcx], 0xf5d6f000; jmp qword ptr [rsi]; 
0x00000000001a7525: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rbx + 0x20c00001], dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a8525: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rbx + 0x47200001], ah; cmc; jmp rax; 
0x0000000000197525: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rbx - 0x42800000], dl; in eax, dx; jmp qword ptr [rax]; 
0x00000000001a7b25: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rcx + 0x2dc00001], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a6925: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rdi - 0x22efffff], al; hlt; call qword ptr [rdx]; 
0x00000000001a8425: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; test byte ptr [rdx + 0x43900001], ah; cmc; call qword ptr [rax]; 
0x000000000019f925: add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rdi + rdx + 0x7a00001], al; int1; call qword ptr [rax]; 
0x00000000001b0a09: add byte ptr [rax], al; add byte ptr [rax + rbp + 2], ah; add byte ptr [rax + 0x64], dh; clc; jmp qword ptr [rbx]; 
0x00000000000a34a3: add byte ptr [rax], al; add byte ptr [rax + rbp*2 + 0x48], dh; lea eax, dword ptr [rdi - 0x10]; ret; 
0x000000000019ca49: add byte ptr [rax], al; add byte ptr [rax + rbp*8 - 0x45100000], ah; out dx, al; call qword ptr [rdi]; 
0x0000000000193a29: add byte ptr [rax], al; add byte ptr [rax + rbx*2 + 0x9100000], al; in al, dx; jmp qword ptr [rcx]; 
0x00000000001979e9: add byte ptr [rax], al; add byte ptr [rax + rbx*4], al; add byte ptr [rax], dh; ret; 
0x00000000001aba41: add byte ptr [rax], al; add byte ptr [rax + rbx*8 - 0x1407ffff], bl; cmc; jmp qword ptr [rax + 1]; 
0x00000000000ffb2b: add byte ptr [rax], al; add byte ptr [rax + rcx + 0x5b], dh; pop rbp; pop r12; ret; 
0x00000000001a69f1: add byte ptr [rax], al; add byte ptr [rax + rcx*4 + 1], cl; add byte ptr [rax - 0x21], ch; hlt; jmp qword ptr [rcx]; 
0x00000000001a6a51: add byte ptr [rax], al; add byte ptr [rax + rcx*4 - 0x2037ffff], ch; hlt; jmp qword ptr [rcx]; 
0x00000000001a6a39: add byte ptr [rax], al; add byte ptr [rax + rcx*4 - 0x204fffff], dl; hlt; jmp qword ptr [rcx]; 
0x00000000001a69c1: add byte ptr [rax], al; add byte ptr [rax + rcx*4], bl; add dword ptr [rax], eax; or bh, bl; hlt; jmp qword ptr [rcx]; 
0x00000000001a5a59: add byte ptr [rax], al; add byte ptr [rax + rdi*2 - 0x502fffff], dh; hlt; call qword ptr [rax]; 
0x0000000000195a49: add byte ptr [rax], al; add byte ptr [rax + rdi*2 - 0x5e200000], ah; in eax, dx; call qword ptr [rax]; 
0x00000000001a9a59: add byte ptr [rax], al; add byte ptr [rax + rdi*4 + 0x70400001], dh; cmc; jmp qword ptr [rdx]; 
0x00000000001a51e1: add byte ptr [rax], al; add byte ptr [rax + rsi*2], bh; add dword ptr [rax], eax; mov byte ptr [rcx + rdi*8], dl; call qword ptr [rax]; 
0x00000000001b51d1: add byte ptr [rax], al; add byte ptr [rax + rsi*2], ch; add al, byte ptr [rax]; sbb byte ptr [rbx + rdi*8], al; jmp qword ptr [rdx]; 
0x00000000001991f1: add byte ptr [rax], al; add byte ptr [rax + rsi*4], cl; add byte ptr [rax - 3], ch; in eax, dx; call qword ptr [rsi + 2]; 
0x000000000019d261: add byte ptr [rax], al; add byte ptr [rax + rsi*8 + 0x44080000], bh; out dx, eax; jmp qword ptr [rbp + 4]; 
0x000000000019d1b9: add byte ptr [rax], al; add byte ptr [rax + rsi*8], dl; add byte ptr [rax], al; nop; adc bh, dl; call qword ptr [rax]; 
0x000000000013563c: add byte ptr [rax], al; add byte ptr [rax - 0x1be417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013562c: add byte ptr [rax], al; add byte ptr [rax - 0x1c3417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013561c: add byte ptr [rax], al; add byte ptr [rax - 0x1d9417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013564c: add byte ptr [rax], al; add byte ptr [rax - 0x1e3417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013560c: add byte ptr [rax], al; add byte ptr [rax - 0x20d417], dl; jmp qword ptr [rsi + 0x2e]; 
0x00000000000c113a: add byte ptr [rax], al; add byte ptr [rax - 0x25080d77], al; cmove edx, ecx; mov dword ptr fs:[0x2d4], edx; mov eax, 0x3a; syscall; 
0x0000000000036491: add byte ptr [rax], al; add byte ptr [rax - 0x3791f09a], al; movss dword ptr [rdi], xmm1; ret; 
0x0000000000133ada: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000075013: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000007c931: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x344089; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001293d8: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; and al, 0x38; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x000000000011f956: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; and al, 8; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax]; 
0x000000000007bbc6: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000035535: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000000a2efd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000a2edd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x00000000000a2f3d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000a2eed: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000a2f2d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000036cad: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000003666c: add byte ptr [rax], al; add byte ptr [rax - 0x3f28f09a], dl; and eax, 8; ret; 
0x0000000000036468: add byte ptr [rax], al; add byte ptr [rax - 0x3f91f09a], al; ret; 
0x0000000000118f96: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; cli; add al, 0x48; add edx, 1; syscall; 
0x000000000002c12b: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x00000000000beb8d: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0xeb11; 
0x000000000011ad49: add byte ptr [rax], al; add byte ptr [rax - 0x48], al; add byte ptr [rdi], cl; shr r9b, 1; ret 0xfffe; 
0x00000000000c4516: add byte ptr [rax], al; add byte ptr [rax - 0x6bf08406], al; ret 0xb60f; 
0x000000000013566c: add byte ptr [rax], al; add byte ptr [rax - 0x6e417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000019c229: add byte ptr [rax], al; add byte ptr [rax - 0x6ff00000], al; out dx, al; jmp qword ptr [rbp + 2]; 
0x000000000011ffe4: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0xcf02; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x0000000000086d88: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000002202d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x15a154; ret; 
0x000000000002203d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x15c12b; ret; 
0x00000000000a34ed: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000a34fd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cld; ret; 
0x00000000001120ad: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cmp eax, 0x2b0ec9; call rax; 
0x00000000000a34dd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; hlt; ret; 
0x0000000000079666: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; push rax; add ecx, ebp; sar esi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000046331: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x195; call rax; 
0x000000000006f7e6: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x30; call rax; 
0x000000000007c486: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0xffffe480; call rax; 
0x000000000007c086: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0xffffe880; call rax; 
0x000000000007add6: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0xfffffb30; call rax; 
0x000000000006fb42: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0xfffffcd4; call rax; 
0x000000000007ab6e: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0xfffffd98; call rax; 
0x000000000007daad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000e316d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc eax, 0x2dae39; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x000000000008687d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc eax, 0x3376c1; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x00000000000bd9a9: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add byte ptr [r13 - 0x77], 0x64; xchg eax, ebp; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000004879f: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000015847d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000134e97: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x28a9ef; xor ebp, ebp; call qword ptr [rax + 0x28]; 
0x0000000000132ced: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x28b171; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001338be: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x28bfc8; call qword ptr [rax + 0x28]; 
0x00000000000f965d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2c4801; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fcd05: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2c4ce9; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000000f061d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2cd841; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ed385: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2d0ad9; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000eb14d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2d2d11; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bf77d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2fe6e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b42ed: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x309b71; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000807fe: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x33d5b0; mov qword ptr [rsp + 0x28], r14; mov rdi, r14; call qword ptr [rax]; 
0x000000000007c84d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x342949; ret; 
0x0000000000071415: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x34ca49; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000003cd55: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x381109; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003ccad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3811b1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000378dd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x386581; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000037765: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3866f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003012d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x38dda1; add rax, qword ptr fs:[0]; ret; 
0x000000000002fa69: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x38e365; mov qword ptr [rax], rdx; ret; 
0x00000000000237dd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3a0461; ret; 
0x00000000000237cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3a0481; ret; 
0x000000000012696d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x38; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000011f4a7: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and byte ptr [r8 - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000007fefd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and byte ptr [rax - 0x75], cl; push rax; or dh, dh; ret 0xf04; 
0x0000000000120d93: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp byte ptr [r8 - 0x77], r9b; or byte ptr [rax - 0x75], r9b; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000126b2e: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x0000000000123a78: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0xc8; call rax; 
0x00000000000300cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; jo 0x3011d; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000dbb47: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov bl, 0xa0; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x0000000000070b7d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x0000000000144b9d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144d9d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000120edd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [r14 + 0x20], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000012d46d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x77], r9b; adc al, 0x24; mov rsi, rsp; call qword ptr [rax + 8]; 
0x000000000012d9cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [r9 + r9*4 + 0x44], r9b; and al, 8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x00000000000f8295: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; pop rax; ret; 
0x000000000007fee5: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rax; or dh, dh; ret 0x7404; 
0x000000000014424d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c6ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000012c3cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; sbb byte ptr [r9 + r9*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x000000000014440d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000000750ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x0000000000065aa7: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor eax, 0x3584af; call rax; 
0x00000000000641af: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor eax, 0x359da7; call rax; 
0x000000000005ed33: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor eax, 0x35f223; call rax; 
0x0000000000055fc9: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor eax, 0x367f8d; call rax; 
0x000000000004efbf: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor eax, 0x36ef97; call rax; 
0x0000000000049e8b: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor eax, 0x3740cb; call rax; 
0x000000000003d313: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc byte ptr [rax + 0xb], r15b; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x00000000000b42d7: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add al, 0x24; call 0xb1410; add rsp, 0x18; ret; 
0x0000000000126760: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x10; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x0000000000108f70: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x108fa0; add rsp, 0xd8; ret; 
0x00000000001090bb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x1090d0; add rsp, 0xd8; ret; 
0x000000000010a345: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x10a360; add rsp, 0xd8; ret; 
0x000000000010a555: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x10a570; add rsp, 0xd8; ret; 
0x000000000010c0eb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x10c100; add rsp, 0xd8; ret; 
0x0000000000048720: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x475b0; add rsp, 0xd8; ret; 
0x000000000005432a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x49c40; add rsp, 0xd8; ret; 
0x000000000005d07a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x5cfc0; add rsp, 0xd8; ret; 
0x000000000005e40a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x5e420; add rsp, 0xd8; ret; 
0x000000000007834a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x5eaf0; add rsp, 0xd8; ret; 
0x000000000007855a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x6c6c0; add rsp, 0xd8; ret; 
0x000000000005d1ba: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x70930; add rsp, 0xd8; ret; 
0x000000000005458a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x72120; add rsp, 0xd8; ret; 
0x000000000005461a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x72280; add rsp, 0xd8; ret; 
0x0000000000054465: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x72420; add rsp, 0xd8; ret; 
0x000000000007282a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x72620; add rsp, 0xd8; ret; 
0x0000000000073bd5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x73c60; add rsp, 0xd8; ret; 
0x0000000000073e1a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x73d20; add rsp, 0xd8; ret; 
0x00000000000af64a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0xaf660; add rsp, 0xd8; ret; 
0x00000000000f4492: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0xf3ec0; add rsp, 0xd8; ret; 
0x0000000000114bb5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c52a91a; ret; 
0x0000000000079466: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x8cc17b8; pop rbx; pop rbp; ret; 
0x000000000010bfcd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; add rsp, 8; ret; 
0x000000000003c8dd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; cqo; idiv rsi; ret; 
0x000000000007c87d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000f56e5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000037c31: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fidivr word ptr [rax + 0x80]; syscall; 
0x00000000000797a1: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fild word ptr [rbp + 0x4f0f48c9]; ret 0x8948; 
0x000000000008616e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, r12; call rax; 
0x0000000000035891: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 3]; syscall; 
0x000000000007c534: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x00000000000769d4: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000074824: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x0000000000074629: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x00000000000d89f5: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp qword ptr [rax - 0x77]; ret; 
0x000000000006ff9c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000013580f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; and al, 0x10; call rax; 
0x000000000004a710: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx + 0x29]; cmc; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000129593: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov dword ptr [rcx - 1], 0x85d23112; ror byte ptr [rdi], 0x94; ret 0x3d83; 
0x0000000000078851: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x140; pop rbx; ret; 
0x00000000001276cb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x77], cl; push rcx; adc byte ptr [rax + 1], bh; ret; 
0x0000000000086329: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; call rax; 
0x00000000000fa642: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; mov eax, 0x11a; syscall; 
0x0000000000126b6d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000012154f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x28]; 
0x0000000000120ee6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x30]; 
0x000000000011fff0: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax]; 
0x0000000000075a92: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000121706: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbx]; 
0x00000000000f60e9: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x000000000002c20a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; mov eax, 3; syscall; 
0x00000000000a42e2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000107664: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; push rbp; nop; mov rdx, r14; call rax; 
0x000000000012e2a0: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; push rdi; sbb bl, dh; ret; 
0x0000000000082be7: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x00000000000d1a19: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x1de9; 
0x00000000000a718d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2944; 
0x000000000005b953: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x42e8; 
0x00000000000cf16d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000cca93: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000006f6c6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000b4e5d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000bc476: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xdb31; 
0x000000000007a3b1: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000003ff46: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000e22ed: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 1; ret 0x8b48; 
0x0000000000074435: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sti; call qword ptr [rax + 0x20]; 
0x000000000007b97e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sti; call qword ptr [rax + 0x60]; 
0x000000000004dd1c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; test dword ptr [rax - 0x16000006], ebx; ret; 
0x000000000007902e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xchg eax, ecx; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; call qword ptr [rax + 0x40]; 
0x00000000000c119d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; mov eax, r8d; syscall; 
0x00000000000e4a81: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; syscall; 
0x00000000001276ea: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xor cl, byte ptr [rax - 0x77]; jp 0x1276fc; ret; 
0x0000000000127702: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xor cl, byte ptr [rax - 0x77]; jp 0x127714; ret; 
0x0000000000127f4a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xor cl, byte ptr [rax - 0x77]; jp 0x127f5c; ret; 
0x0000000000127f62: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xor cl, byte ptr [rax - 0x77]; jp 0x127f74; ret; 
0x0000000000127f92: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xor cl, byte ptr [rax - 0x77]; jp 0x127fa4; ret; 
0x0000000000034a4d: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; call qword ptr [rbx + 0x48]; 
0x00000000000488cd: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; call qword ptr [rbx + 0x74]; 
0x00000000000e22a4: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rdi + 0xf], 0xb6; xor byte ptr [rax - 0x77], cl; ret 0xf980; 
0x00000000000887bc: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000012b861: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x19], cl; pop rbx; ret; 
0x000000000010345d: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; adc byte ptr [rax + 0x39], cl; ret; 
0x0000000000022ef8: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rdx + 0x48], 0x8b; push rbp; movabs al, byte ptr [0x201a748b48ef894c]; call rax; 
0x000000000006e424: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x00000000000786de: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x000000000003044a: add byte ptr [rax], al; add byte ptr [rax - 0x7bf0ffc1], al; ret 0; 
0x000000000011621d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; in al, dx; xor byte ptr [rcx], 0xc0; pop rbx; ret; 
0x0000000000097a5b: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; mov byte ptr [rdi + rcx], 0xb6; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000a362d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; mov dword ptr [rbx + rcx*4], 0x75c08507; out dx, al; xor eax, eax; ret; 
0x00000000000c4035: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; mov ebp, 0xfffffe38; add dword ptr [rdi], ecx; xchg byte ptr [rdi - 0xa000000], bh; ret; 
0x00000000000801bd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x00000000000a11fd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x0000000000026a4d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000006f8c2: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4401; 
0x000000000002364c: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000004386d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000016572d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000fbff8: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4814; 
0x00000000000b3eed: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4909; 
0x0000000000138e13: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000002929d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000008bd8d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x000000000008bd1d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x7e20; 
0x0000000000042bfd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x00000000000a99bd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x000000000013a991: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000059035: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb08; 
0x0000000000138e3d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000002eb1d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000097cfd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x00000000000472ad: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x39; ret 0xb87f; 
0x000000000002d2bd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x83; ret 0x8301; 
0x000000000006768d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror dword ptr [rax], -0x17; ret 0xfff0; 
0x0000000000134379: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; add eax, 0x28f7f9; add byte ptr [rcx], 0; add dh, dh; ret; 
0x000000000014c064: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000013565c: add byte ptr [rax], al; add byte ptr [rax - 0x80417], dl; jmp qword ptr [rsi + 0x2e]; 
0x0000000000076b5f: add byte ptr [rax], al; add byte ptr [rax - 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002c2a4: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000132eb8: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000000357db: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000036c8b: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000001aa6d1: add byte ptr [rax], al; add byte ptr [rax*8 - 0x2a17ffff], ch; cmc; jmp qword ptr [rsi]; 
0x00000000001aa6b9: add byte ptr [rax], al; add byte ptr [rax*8 - 0x2a2fffff], dl; cmc; jmp qword ptr [rsi]; 
0x000000000019a09e: add byte ptr [rax], al; add byte ptr [rax], ah; out dx, al; jmp qword ptr [rcx + 1]; 
0x000000000001aee5: add byte ptr [rax], al; add byte ptr [rax], ah; ret 0x3b; 
0x000000000001b1e5: add byte ptr [rax], al; add byte ptr [rax], ah; ret; 
0x00000000001aa594: add byte ptr [rax], al; add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; hlt; ret; 
0x000000000019a44c: add byte ptr [rax], al; add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret 0; 
0x00000000001aa54c: add byte ptr [rax], al; add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret; 
0x000000000019a4fc: add byte ptr [rax], al; add byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; pop rsp; ret; 
0x0000000000036066: add byte ptr [rax], al; add byte ptr [rax], al; adc byte ptr [rax + 0x48d00148], al; shr eax, 0x3f; ret; 
0x000000000017297c: add byte ptr [rax], al; add byte ptr [rax], al; adc byte ptr [rbx], ah; in al, dx; call qword ptr [rax]; 
0x000000000001b123: add byte ptr [rax], al; add byte ptr [rax], al; add al, ah; ret 0x3b; 
0x000000000001b40b: add byte ptr [rax], al; add byte ptr [rax], al; add al, ah; ret; 
0x000000000001b0c3: add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret 0x3b; 
0x000000000001b3ab: add byte ptr [rax], al; add byte ptr [rax], al; add al, al; ret; 
0x000000000001b16b: add byte ptr [rax], al; add byte ptr [rax], al; add al, bh; ret 0x3b; 
0x000000000001b10b: add byte ptr [rax], al; add byte ptr [rax], al; add al, bl; ret 0x3b; 
0x000000000001b3f3: add byte ptr [rax], al; add byte ptr [rax], al; add al, bl; ret; 
0x0000000000048765: add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; add dword ptr [rbp - 0x76b7fffb], esi; ret 0xffb8; 
0x000000000001b13b: add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; ret 0x3b; 
0x000000000001b423: add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; ret; 
0x000000000001b0db: add byte ptr [rax], al; add byte ptr [rax], al; add al, cl; ret 0x3b; 
0x000000000001b3c3: add byte ptr [rax], al; add byte ptr [rax], al; add al, cl; ret; 
0x000000000001b153: add byte ptr [rax], al; add byte ptr [rax], al; add al, dh; ret 0x3b; 
0x000000000001b43b: add byte ptr [rax], al; add byte ptr [rax], al; add al, dh; ret; 
0x000000000001b0f3: add byte ptr [rax], al; add byte ptr [rax], al; add al, dl; ret 0x3b; 
0x000000000001b3db: add byte ptr [rax], al; add byte ptr [rax], al; add al, dl; ret; 
0x000000000001a2db: add byte ptr [rax], al; add byte ptr [rax], al; add bh, ah; ret 0x17; 
0x000000000001e29b: add byte ptr [rax], al; add byte ptr [rax], al; add bh, al; ret 0x17; 
0x000000000001e313: add byte ptr [rax], al; add byte ptr [rax], al; add bh, dh; ret 0x17; 
0x000000000001a2ab: add byte ptr [rax], al; add byte ptr [rax], al; add bh, dl; ret 0x17; 
0x000000000009de8b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi - 1], mm0; ret; 
0x000000000009de9b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; movq qword ptr [rdi], mm0; ret; 
0x00000000000711ab: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x00000000000f11db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x10], bh; syscall; 
0x000000000001b17b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x185e], bl; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000007896b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x00000000001860f9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x43], dl; pop rcx; clc; ret 0x6e1f; 
0x00000000000f308b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x4c], bh; syscall; 
0x00000000000ecf7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x54], bh; syscall; 
0x00000000000eb37b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x5a], bh; syscall; 
0x00000000000eb36b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x5f], bh; syscall; 
0x00000000000eb36b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x5f], bh; syscall; ret; 
0x0000000000134dcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; std; mov eax, 3; syscall; 
0x00000000000c1d0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66], bh; syscall; 
0x00000000000c1d0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66], bh; syscall; ret; 
0x0000000000036144: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66d02148], al; movd mm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000c1d2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x00000000000c1d2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x00000000000c1d1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000000c1d1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x00000000000c1d3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x00000000000c1d3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000000c1d4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x73], bh; syscall; 
0x0000000000109f7a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x77ca3948], dl; and bh, byte ptr [rax + 0x59]; syscall; 
0x000000000009e3db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000016637b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x7d], al; in al, dx; call qword ptr [rax]; 
0x00000000000f101b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x8d], bh; syscall; 
0x00000000000fa40b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xa6], bh; syscall; 
0x00000000000f1b4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xaa], bh; syscall; 
0x00000000000f1beb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xab], bh; syscall; 
0x00000000000f2edb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xeb], bh; syscall; 
0x00000000000c24bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xfc17], bh; ret; 
0x000000000002c04b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000013233b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret; 
0x000000000012144b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x00000000000ca12b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax*8 - 0x7cb7f48c], al; ret; 
0x00000000001a975b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rbp + rsi*4 + 0x6ed80001], bh; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001b6433: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rdx + rax*4 - 0xdeffffe], dl; cli; call rcx; 
0x000000000019a97b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], al; add ah, cl; ret; 
0x000000000019a8a3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], al; add ah, dh; ret 0; 
0x0000000000194f3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], al; add byte ptr [rbp + rbp*2 - 0x69d80000], bl; in eax, dx; jmp rsp; 
0x000000000019bd5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], al; add byte ptr [rbx + rbx*8 + 0x6d780000], bh; out dx, al; call qword ptr [rdi]; 
0x0000000000198e2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov word ptr [rax + rax - 0x120a0800], gs; jmp qword ptr [rbx]; 
0x00000000001a0ed3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rbp - 0x2b2fffff], dh; int1; jmp qword ptr [rbx]; 
0x00000000001a6ed3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rcx*4 - 0x12fffff], dh; hlt; jmp rax; 
0x00000000001a843b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rdx + 0x43c80001], bl; cmc; jmp rdi; 
0x00000000001aa593: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; hlt; ret; 
0x000000000019a44b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret 0; 
0x00000000001aa54b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret; 
0x000000000019a4fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; pop rsp; ret; 
0x000000000013563a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x1be417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013562a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x1c3417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013561a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x1d9417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013564a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x1e3417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000013560a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x20d417], dl; jmp qword ptr [rsi + 0x2e]; 
0x00000000000a2efb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000000a2edb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x00000000000a2f3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000a2eeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000a2f2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000036cab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000003666a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x3f28f09a], dl; and eax, 8; ret; 
0x000000000013566a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x6e417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000002202b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x15a154; ret; 
0x000000000002203b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x15c12b; ret; 
0x00000000000a34eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; clc; ret; 
0x00000000000a34fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; cld; ret; 
0x00000000000a34db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; hlt; ret; 
0x000000000007daab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000008687b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc eax, 0x3376c1; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x000000000004879d: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000007c84b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x342949; ret; 
0x000000000003012b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x38dda1; add rax, qword ptr fs:[0]; ret; 
0x00000000000237db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3a0461; ret; 
0x00000000000237cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x3a0481; ret; 
0x000000000012696b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x38; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000070b7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x0000000000120edb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [r14 + 0x20], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000010bfcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; add rsp, 8; ret; 
0x000000000007c87b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000012154d: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x28]; 
0x000000000005b951: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x42e8; 
0x00000000000cf16b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000df22b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000b4e5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000000e22eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 1; ret 0x8b48; 
0x00000000000c119b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xlatb; mov eax, r8d; syscall; 
0x0000000000034a4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; call qword ptr [rbx + 0x48]; 
0x00000000000488cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; call qword ptr [rbx + 0x74]; 
0x000000000010345b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8b; adc byte ptr [rax + 0x39], cl; ret; 
0x00000000000801bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x00000000000a11fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x0000000000026a4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000004386b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000016572b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000b3eeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4909; 
0x000000000008bd8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x6620; 
0x000000000008bd1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x7e20; 
0x0000000000042bfb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x00000000000a99bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8301; 
0x00000000000597fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb08; 
0x000000000002eb1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000097cfb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x00000000000472ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x39; ret 0xb87f; 
0x000000000002d2bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx], 0x83; ret 0x8301; 
0x000000000013565a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x80417], dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000007c7fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000001aee3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], ah; ret 0x3b; 
0x000000000001b1e3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], ah; ret; 
0x0000000000036064: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; adc byte ptr [rax + 0x48d00148], al; shr eax, 0x3f; ret; 
0x000000000017297a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; adc byte ptr [rbx], ah; in al, dx; call qword ptr [rax]; 
0x000000000001a2d9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add bh, ah; ret 0x17; 
0x000000000001e299: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add bh, al; ret 0x17; 
0x000000000001e311: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add bh, dh; ret 0x17; 
0x000000000001a2a9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add bh, dl; ret 0x17; 
0x0000000000166379: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x7d], al; in al, dx; call qword ptr [rax]; 
0x000000000019a979: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], al; add ah, cl; ret; 
0x000000000019a8a1: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], al; add ah, dh; ret 0; 
0x0000000000176e1a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0xfffd; 
0x00000000001b8bba: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 2; 
0x000000000000157e: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 5; 
0x00000000001785b8: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi - 0xe], ah; jmp qword ptr [rax]; 
0x0000000000165e18: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; or ch, 0xeb; call qword ptr [rax]; 
0x0000000000176e1c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0xfffd; 
0x00000000001b8bbc: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 2; 
0x0000000000001580: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 5; 
0x000000000001a381: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], bh; ret; 
0x0000000000172979: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dl; and ebp, esp; call qword ptr [rax]; 
0x000000000019a97a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add ah, cl; ret; 
0x000000000019a8a2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add ah, dh; ret 0; 
0x00000000001b7fe5: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 6], bl; add byte ptr [rax], al; ret 5; 
0x00000000001858e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0xd], bl; clc; ret 0x6e1f; 
0x00000000001785ba: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi - 0xe], ah; jmp qword ptr [rax]; 
0x000000000001e3a1: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], ah; ret; 
0x000000000001a321: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], al; ret; 
0x000000000001a351: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], dl; ret; 
0x0000000000017f21: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi], cl; ret; 
0x000000000001e20a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cdq; ret 0x17; 
0x00000000001b8676: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; inc dword ptr [rdi]; add byte ptr [rax], al; ret 3; 
0x00000000001b7986: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov ch, 5; add byte ptr [rax], al; ret; 
0x000000000012154c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x0000000000165e1a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; or ch, 0xeb; call qword ptr [rax]; 
0x00000000001858ea: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rcx; clc; ret 0x6e1f; 
0x000000000001e432: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rdx; ret; 
0x000000000000a132: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x15; 
0x000000000001ac22: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17c5; 
0x000000000001befa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17c6; 
0x0000000000018762: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17cf; 
0x000000000001071a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x19; 
0x000000000016ee02: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x0000000000004b0a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x26; 
0x0000000000000548: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x2800; 
0x00000000000055a2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x31; 
0x000000000000ffb2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x000000000000f3e2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x34; 
0x00000000000078e2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x35; 
0x00000000000059c2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x37; 
0x0000000000004a02: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x3b; 
0x00000000000098aa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x47; 
0x000000000000fb62: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x48; 
0x0000000000005842: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4c; 
0x0000000000176e1e: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0xfffd; 
0x00000000001b8782: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x00000000001b8bbe: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 2; 
0x0000000000001582: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 5; 
0x000000000000158a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000001a2aa: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xlatb; ret 0x17; 
0x000000000001af2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], bh; ret 0x3b; 
0x000000000001a383: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], bh; ret; 
0x000000000001aecb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], bl; ret 0x3b; 
0x000000000001b1cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], bl; ret; 
0x000000000001aefb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], ch; ret 0x3b; 
0x000000000001b1fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], ch; ret; 
0x000000000001aeb3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], cl; ret 0x3b; 
0x000000000001b19b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], cl; ret; 
0x0000000000179ebb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x00000000000a0c5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi], ch; ret; 
0x000000000001af13: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; ret 0x3b; 
0x000000000001b213: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; ret; 
0x000000000017297b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dl; and ebp, esp; call qword ptr [rax]; 
0x0000000000036065: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dl; or byte ptr [rax + 1], 0xd0; shr rax, 0x3f; ret; 
0x000000000001b1b3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dl; ret; 
0x000000000019a97c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add ah, cl; ret; 
0x000000000019a8a4: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add ah, dh; ret 0; 
0x00000000001aba3c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + rbx*8 - 0x1407ffff], bl; cmc; jmp qword ptr [rax + 1]; 
0x0000000000194f3c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbp + rbp*2 - 0x69d80000], bl; in eax, dx; jmp rsp; 
0x00000000001a0ed4: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbp - 0x2b2fffff], dh; int1; jmp qword ptr [rbx]; 
0x000000000019bd5c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbx + rbx*8 + 0x6d780000], bh; out dx, al; call qword ptr [rdi]; 
0x00000000001a6ed4: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rcx*4 - 0x12fffff], dh; hlt; jmp rax; 
0x00000000001a843c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rdx + 0x43c80001], bl; cmc; jmp rdi; 
0x0000000000047eeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x39], cl; ret 0x830f; 
0x0000000000083e8b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret; 
0x00000000000e40bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x000000000002cb1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp - 0x7cf78140], al; call 0x846542b; pop rbx; ret; 
0x0000000000083adb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x33a68a05], cl; add byte ptr [rbp - 0xcf98740], al; ret; 
0x000000000002245b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x3a179a05], cl; add byte ptr [rbp + 0x480e74c0], al; lea eax, dword ptr [rip + 0x3a178f]; ret; 
0x000000000009ce1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000015c85b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, dword ptr [rdx + 3]; ret; 
0x000000000015fc0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x000000000009f23b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48178916], cl; lea eax, dword ptr [rdi + 4]; ret; 
0x000000000007442b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48], dl; mov eax, dword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000014c92b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x0000000000093f4f: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000077abd: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x66d0eb13], cl; nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x00000000000e44cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x6890447], cl; xor eax, eax; ret; 
0x000000000012f14e: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0xa74fff9], al; movsxd rdi, ecx; mov eax, 3; syscall; 
0x00000000000b9f3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0xb7401fe], al; xor eax, eax; ret; 
0x00000000001b7fe7: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 6], bl; add byte ptr [rax], al; ret 5; 
0x000000000001b043: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + rbx*2 + 0x18], bh; add byte ptr [rax], al; cwde; ret 0x3b; 
0x000000000012d6e5: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x14f3dbbc], cl; xor eax, 0x8478b48; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000002ea7b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x387cfe40], al; add dword ptr [rax - 0x7d], ecx; ret 0x8310; 
0x000000000012e60b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x47fbd7b9], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000064c4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x73], al; lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret 0x4504; 
0x0000000000047e0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x73], al; lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000048909: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x00000000000d0dcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fe3b], al; ret; 
0x00000000000f976b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x7d], dl; call qword ptr [rcx]; 
0x00000000000066b3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x1200001d], bh; add byte ptr [rax + rax], cl; push rax; ret 7; 
0x000000000015a51b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x3518911], cl; ret; 
0x00000000000968bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x447c60f], cl; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000015a4fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x4518811], cl; ret; 
0x000000000009ddeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x4578817], cl; ret; 
0x000000000009691b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x4789440f], cl; add al, 0x48; lea eax, dword ptr [rdi + 7]; ret; 
0x000000000009687b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x4789440f], cl; add al, 0x48; mov eax, edi; ret; 
0x00000000000a143b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000000e44db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x3fcefb89], cl; ret; 
0x00000000000e365b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x75], al; add byte ptr [r9], r15b; ret 0x870f; 
0x000000000007e84b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x00000000001372cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000008712b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000001858eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0xd], bl; clc; ret 0x6e1f; 
0x000000000002ff4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6bf07f19], 0xc0; ret; 
0x00000000001785bc: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi - 0xe], ah; jmp qword ptr [rax]; 
0x000000000001e3a3: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], ah; ret; 
0x000000000001a323: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], al; ret; 
0x0000000000096f6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000096feb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xea8348c0; adc byte ptr [rax + 1], cl; ret 0x147c; 
0x0000000000096fcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x347c; 
0x000000000009395b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000008bddb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000001a353: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], dl; ret; 
0x000000000015c81b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, dword ptr [rdx]; ret; 
0x00000000001584eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000009f1fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48178816], cl; lea eax, dword ptr [rdi + 1]; ret; 
0x0000000000036feb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 8], bh; mov eax, 0x82; syscall; 
0x00000000000faf19: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x11f; syscall; 
0x00000000000fbe39: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x1e; syscall; 
0x00000000000fb579: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x30; syscall; 
0x00000000000fb239: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x32; syscall; 
0x00000000000eb449: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x53; syscall; 
0x00000000000374b9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x83; syscall; 
0x00000000000f49e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x95; syscall; 
0x00000000000fa789: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x9e; syscall; 
0x00000000000fa829: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x9f; syscall; 
0x00000000000fabe9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xb4; syscall; 
0x00000000000f4899: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xb; syscall; 
0x00000000000f80e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc2; syscall; 
0x00000000000f8149: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc3; syscall; 
0x00000000000f8029: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc4; syscall; 
0x00000000000f81d9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc5; syscall; 
0x00000000000faa99: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xfe; syscall; 
0x00000000000bd339: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi]; ret; 
0x0000000000037b99: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rip + 0x3864fa]; ret; 
0x00000000000fb069: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000000fabb9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000000faca9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000000facd9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb3; syscall; 
0x0000000000132d09: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb5; syscall; 
0x0000000000132d59: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb6; syscall; 
0x00000000000f80b9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000000fbe09: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xdc; syscall; 
0x0000000000017f23: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi], cl; ret; 
0x00000000001a975c: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rbp + rsi*4 + 0x6ed80001], bh; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001b6434: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rdx + rax*4 - 0xdeffffe], dl; cli; call rcx; 
0x000000000006e25b: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x7420; 
0x0000000000001583: add byte ptr [rax], al; add byte ptr [rax], al; add dl, al; add eax, 0; add byte ptr [rax], al; ret; 
0x000000000000f3dc: add byte ptr [rax], al; add byte ptr [rax], al; add dword ptr [rax], 0; add byte ptr [rax], al; ret 0x34; 
0x000000000012e60c: add byte ptr [rax], al; add byte ptr [rax], al; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x00000000000a2ebc: add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x00000000000bca4c: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x00000000000f8fdc: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000023835: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f3939: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000003648c: add byte ptr [rax], al; add byte ptr [rax], al; and eax, 0x80000000; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x000000000008bdcc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000008bddc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000008bdec: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x000000000009395c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x0000000000096f6c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x0000000000096f7c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x0000000000096f8c: add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x30]; ret; 
0x00000000001162d3: add byte ptr [rax], al; add byte ptr [rax], al; call 0x114d00; add rsp, 0x18; ret; 
0x000000000012e9a4: add byte ptr [rax], al; add byte ptr [rax], al; call 0x12ac60; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000001364df: add byte ptr [rax], al; add byte ptr [rax], al; call 0x135f80; add rsp, 0x28; ret; 
0x00000000000e3a41: add byte ptr [rax], al; add byte ptr [rax], al; call 0x1f4f0; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x00000000000487e8: add byte ptr [rax], al; add byte ptr [rax], al; call 0xa4090; add rsp, 0x28; ret; 
0x00000000000488b8: add byte ptr [rax], al; add byte ptr [rax], al; call 0xa40c0; add rsp, 0x28; ret; 
0x00000000000cb16a: add byte ptr [rax], al; add byte ptr [rax], al; call 0xcb0b0; add rsp, 0x18; ret; 
0x00000000000e44f7: add byte ptr [rax], al; add byte ptr [rax], al; call 0xe4530; add rsp, 0x18; ret; 
0x00000000000eafe5: add byte ptr [rax], al; add byte ptr [rax], al; call 0xeb120; add rsp, 0x18; ret; 
0x00000000000eb017: add byte ptr [rax], al; add byte ptr [rax], al; call 0xeb180; add rsp, 0x18; ret; 
0x000000000012027b: add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x000000000011f55a: add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x000000000011f95e: add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax]; 
0x0000000000165c5c: add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx]; 
0x0000000000170e2c: add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x000000000016ffdc: add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x000000000001e20c: add byte ptr [rax], al; add byte ptr [rax], al; cdq; ret 0x17; 
0x000000000001b16c: add byte ptr [rax], al; add byte ptr [rax], al; clc; ret 0x3b; 
0x0000000000135171: add byte ptr [rax], al; add byte ptr [rax], al; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000079950: add byte ptr [rax], al; add byte ptr [rax], al; cmovg rax, rdx; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000001b04c: add byte ptr [rax], al; add byte ptr [rax], al; cwde; ret 0x3b; 
0x000000000001b34c: add byte ptr [rax], al; add byte ptr [rax], al; cwde; ret; 
0x000000000003694c: add byte ptr [rax], al; add byte ptr [rax], al; fstp st(1); add rsp, 0x20; pop rbx; ret; 
0x00000000001b8678: add byte ptr [rax], al; add byte ptr [rax], al; inc dword ptr [rdi]; add byte ptr [rax], al; ret 3; 
0x000000000017a550: add byte ptr [rax], al; add byte ptr [rax], al; insb byte ptr [rdi], dx; sal esi, cl; call rdx; 
0x000000000004ec6a: add byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x00000000000a083c: add byte ptr [rax], al; add byte ptr [rax], al; lea r11, qword ptr [rip + 0xd7f4d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000011f5a4: add byte ptr [rax], al; add byte ptr [rax], al; lea r14, qword ptr [r13 + 0x18]; mov rsi, r14; call qword ptr [rax + 0x10]; 
0x00000000000a3ff4: add byte ptr [rax], al; add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x28]; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a3ba5: add byte ptr [rax], al; add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x28]; mov rsi, r13; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a4498: add byte ptr [rax], al; add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x38]; mov rcx, r13; mov rdi, rbp; call rbx; 
0x000000000016239c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xa]; ret; 
0x00000000001623ac: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xb]; ret; 
0x00000000001623bc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xc]; ret; 
0x00000000001623cc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xd]; ret; 
0x00000000001623dc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000016231c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000016232c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000016233c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000016234c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000016235c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000016236c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000016237c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000016238c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 9]; ret; 
0x0000000000086d87: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000a34dc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi - 0xc]; ret; 
0x00000000000a34fc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi - 4]; ret; 
0x00000000000a34ec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi - 8]; ret; 
0x000000000016230c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi]; ret; 
0x000000000008346c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdx - 0x10]; add rsp, 8; ret; 
0x000000000002202c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x000000000002203c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rip + 0x15c12b]; ret; 
0x000000000015c81c: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, qword ptr [rdx]; ret; 
0x00000000001584ec: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000015c82c: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, qword ptr [rdx + 1]; ret; 
0x00000000001584fc: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000096bbc: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rcx], 0; mov rcx, rdi; mov qword ptr [rdx], rcx; ret; 
0x000000000015a4bc: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rcx], dl; ret; 
0x00000000000d0b1c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000d0b8c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x000000000009686c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000037644: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], 0; xor eax, eax; ret; 
0x000000000009e3dc: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000009cddc: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000009ddac: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dl; ret; 
0x00000000001b7988: add byte ptr [rax], al; add byte ptr [rax], al; mov ch, 5; add byte ptr [rax], al; ret; 
0x000000000009cdfc: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000009f1fc: add byte ptr [rax], al; add byte ptr [rax], al; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009daac: add byte ptr [rax], al; add byte ptr [rax], al; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000015a4fc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x000000000015a51c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x000000000015a50c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000015a4ec: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x00000000000e44dc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x000000000009ddcc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi - 1], edx; ret; 
0x000000000009695c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], 0; lea rax, qword ptr [rdi + 4]; ret; 
0x00000000000968bc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], 0; mov rax, rdi; ret; 
0x000000000009691c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 4], r8d; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009687c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 4], r8d; mov rax, rdi; ret; 
0x000000000009ddec: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000009ddfc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x000000000009dddc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; ret; 
0x0000000000039d0c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000008264c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rip + 0x33e3f6], 0; ret; 
0x0000000000120dcc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120d1c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120d7c: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x0000000000120dbc: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 0xc; ret; 
0x0000000000120dac: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 8; ret; 
0x000000000009e3ec: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009f20c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009cdec: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000f11dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x10; syscall; 
0x00000000000c08cc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x3f; syscall; 
0x00000000000f308c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x4c; syscall; 
0x00000000000ecf7c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x54; syscall; 
0x00000000000ecdfc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x56; syscall; 
0x00000000000eb37c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x5a; syscall; 
0x00000000000eb36c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x5f; syscall; 
0x00000000000eb36c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x5f; syscall; ret; 
0x00000000000f0bfc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x61; syscall; 
0x00000000000c1d0c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x66; syscall; 
0x00000000000c1d0c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x66; syscall; ret; 
0x00000000000c1d2c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x00000000000c1d2c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000000c1d1c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000000c1d1c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x00000000000c1d3c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x00000000000c1d3c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x00000000000c1d4c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x73; syscall; 
0x00000000000c1f6c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x7c; syscall; 
0x00000000000f101c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x8d; syscall; 
0x00000000000f1d6c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xa3; syscall; 
0x00000000000fa40c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xa6; syscall; 
0x00000000000f1b4c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xaa; syscall; 
0x00000000000f1bec: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xab; syscall; 
0x00000000000f2edc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xeb; syscall; 
0x00000000000c24bc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xfc17; ret; 
0x000000000007c7fc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000002c04c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000012144c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x000000000015c85c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 3]; ret; 
0x000000000015fc0c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000007c59c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000012e5dc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x28]; ret; 
0x00000000000e44cc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000072efc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x00000000000735fc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x0000000000037bac: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x3864da]; ret; 
0x00000000000e4e1c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x000000000010c53c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, edi; bswap eax; ret; 
0x00000000000066b4: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, 0x1200001d; add byte ptr [rax + rax], cl; push rax; ret 7; 
0x000000000009ce1c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000014c92c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000009f23c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000014d04c: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000108084: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000036fec: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 8; mov eax, 0x82; syscall; 
0x0000000000075012: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000107663: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbp - 0x70], rdx; mov rdx, r14; call rax; 
0x000000000015a53c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x000000000015a55c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x000000000015a56c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x000000000015a57c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x000000000015a58c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000015a59c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000015a5ac: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x000000000015a54c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x000000000015a52c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x000000000012e23c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], edx; mov al, 1; ret; 
0x000000000012e970: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000f3113: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 8], 0; ret; 
0x000000000012e978: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 8], rax; ret; 
0x000000000009de0c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x000000000009de2c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000009de4c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000009de5c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000009de6c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000009de7c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000009de3c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x000000000009de1c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x000000000007c930: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x344089], 0; ret; 
0x00000000000e3eea: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x0000000000120dda: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000e3ef2: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; ret; 
0x000000000012675f: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x000000000012b81d: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 8], 0x2faf080; call 0xc0dd0; add rsp, 0x18; ret; 
0x00000000000b42d6: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp], rax; call 0xb1410; add rsp, 0x18; ret; 
0x00000000000fa7fc: add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12d; syscall; 
0x00000000000fa75c: add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12e; syscall; 
0x00000000000ed2cc: add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000000e3cac: add byte ptr [rax], al; add byte ptr [rax], al; mov r9d, edx; call 0xe32d0; add rsp, 0x18; ret; 
0x000000000007c80c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x0000000000036cac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x00000000000a2edc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x00000000000a2eec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000a2efc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000a2f0c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000a2f1c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000a2f2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000a2f3c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000126014: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [r12 + 8]; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000074d4d: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [r15 + 0xd8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x0000000000074e4c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x140]; call qword ptr [rax + 0x68]; 
0x00000000000f8294: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x000000000004879e: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000120edc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbp + 8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000012c3cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x18]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000012ddac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000012d61c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012ce7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000015c7ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; ret; 
0x000000000015847c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000012e1fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000070b7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000007c86c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000750ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000121a9c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 8]; call qword ptr [rax]; 
0x000000000012d9cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp + 8], r8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000012d46c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp], rdx; mov rsi, rsp; call qword ptr [rax + 8]; 
0x0000000000132cec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28b171]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000f965c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c4801]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fcd04: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c4ce9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000000f061c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2cd841]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ed384: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2d0ad9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000eb14c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2d2d11]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bf77c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2fe6e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b42ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x309b71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000007c84c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x342949]; ret; 
0x0000000000071414: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x34ca49]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000003cd54: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x381109]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003ccac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3811b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000378dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x386581]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000037764: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3866f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003012c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x38dda1]; add rax, qword ptr fs:[0]; ret; 
0x00000000000237dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3a0461]; ret; 
0x00000000000237cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3a0481]; ret; 
0x00000000000300cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000012696c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x38]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000097adc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x000000000010bfcc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; add rsp, 8; ret; 
0x000000000003c8dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; cqo; idiv rsi; ret; 
0x000000000007c87c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000009ce5c: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000012c395: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x000000000011fee6: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r13; call qword ptr [rax]; 
0x000000000011fd8a: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000012154e: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x00000000000a42e1: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000c119c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000010816c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x00000000000e316c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x2dae39]; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x000000000008687c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x3376c1]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x000000000014424c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014ce8c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000015a4dc: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000015a4cc: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rcx], dx; ret; 
0x000000000009ddbc: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; ret; 
0x000000000009693c: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], si; mov byte ptr [rdi + 2], 0; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009689c: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], si; mov byte ptr [rdi + 2], 0; mov rax, rdi; ret; 
0x0000000000133e43: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rip + 0x28fbb2], ax; mov eax, 1; add rsp, 8; ret; 
0x0000000000036830: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000036810: add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000009f37c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009e53c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009cedc: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000009de8c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x000000000009de9c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000006d0b4: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000f4834: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, ebp; mov eax, 3; syscall; 
0x00000000001088a4: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0xe3; syscall; 
0x0000000000033104: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, r12d; mov eax, 3; syscall; 
0x0000000000117ebd: add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x000000000016360c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000015fc8c: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000000883cc: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000014cabc: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000014d19c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000014ca3c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000014d12c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000fa977: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x00000000000ebeb7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x00000000000ebf17: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x00000000000faaf7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x00000000000faf47: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x00000000000fa8b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x00000000000ebee7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x00000000000cb297: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x00000000000f4987: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x00000000000fbe97: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1d; syscall; 
0x00000000000fbec7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1f; syscall; 
0x00000000000ebe87: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000c0b87: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x25; syscall; 
0x00000000000b4287: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x00000000000fb5a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x00000000000fb1d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x00000000000fbda7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x40; syscall; 
0x00000000000fbd77: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x41; syscall; 
0x00000000000fbe67: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x43; syscall; 
0x00000000000fbd47: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x47; syscall; 
0x00000000000f30b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x4d; syscall; 
0x00000000000ebfd7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x00000000000eb3a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x00000000000ec7d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x00000000000ec807: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000f0c57: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x62; syscall; 
0x00000000000fab57: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000c1f07: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000c1f37: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000c1f37: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; ret; 
0x00000000000c1f97: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000c1fc7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000c1ff7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x00000000000fa467: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7a; syscall; 
0x00000000000fa497: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x00000000000fa857: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x00000000000fa887: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x00000000000fae27: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x00000000000fac17: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x87; syscall; 
0x00000000000eb257: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000000cb207: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000000cb237: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x00000000000cb267: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x00000000000cb2c7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000000cb2f7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000000cb327: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x00000000000f4a17: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x00000000000f4a47: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x00000000000f4a77: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x00000000000fa7b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x00000000000fac47: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000000f0c27: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa0; syscall; 
0x00000000000f1d97: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x00000000000f21a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000000f21d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x00000000000f48c7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x00000000000fa277: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x00000000000fa8e7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x00000000000fa917: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x00000000000fa437: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x00000000000f8177: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x00000000000f8057: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x00000000000fa947: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x00000000000fa7e7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x00000000000fa7e7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; ret; 
0x00000000000faac7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x00000000000fab27: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x0000000000036f27: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov esi, 8; mov eax, 0x7f; syscall; 
0x00000000000faee7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000000faf77: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000000fb037: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x136; syscall; 
0x00000000000fb5d7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x35; syscall; 
0x00000000000fb207: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000000fbdd7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x42; syscall; 
0x00000000000fac77: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x9d; syscall; 
0x00000000000fab87: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000000faa67: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000000f8207: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000000f81a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbd; syscall; 
0x00000000000f8087: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000000f8117: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000000f49b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000000fa9a7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000000ece87: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; movsxd rsi, esi; mov eax, 0x10a; syscall; 
0x000000000005db89: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x52; syscall; 
0x0000000000072ec8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x00000000000c0aa8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x3d; syscall; 
0x000000000010c8b9: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2b1591]; add rax, qword ptr fs:[0]; ret; 
0x000000000002c288: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rdi, rbp; mov eax, 3; syscall; 
0x00000000000fc766: add byte ptr [rax], al; add byte ptr [rax], al; nop word ptr [rax + rax]; mov qword ptr [rip + 0x2c1b85], 0; pop rbp; ret; 
0x00000000000faf1a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x11f; syscall; 
0x00000000000fbe3a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x1e; syscall; 
0x00000000000fb57a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x30; syscall; 
0x00000000000fb23a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x32; syscall; 
0x00000000000c11db: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x3b; syscall; 
0x00000000000ebcbb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x49; syscall; 
0x00000000000eb44a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x53; syscall; 
0x00000000000ecebb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x59; syscall; 
0x00000000000374ba: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x83; syscall; 
0x00000000000f49ea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x95; syscall; 
0x00000000000fa78a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x9e; syscall; 
0x00000000000fa82a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x9f; syscall; 
0x00000000000fabea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xb4; syscall; 
0x00000000000f489a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xb; syscall; 
0x00000000000f80ea: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc2; syscall; 
0x00000000000f814a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc3; syscall; 
0x00000000000f802a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc4; syscall; 
0x00000000000f81da: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc5; syscall; 
0x00000000000faa9a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xfe; syscall; 
0x00000000000bd33a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rdi]; ret; 
0x0000000000037b9a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rip + 0x3864fa]; ret; 
0x000000000010c54b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, edi; ror ax, 8; ret; 
0x00000000000fb06a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000000fabba: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000000facaa: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000000facda: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb3; syscall; 
0x0000000000132d0a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb5; syscall; 
0x0000000000132d5a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb6; syscall; 
0x00000000000f80ba: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000000f7ffb: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xc1; syscall; 
0x00000000000fbe0a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xdc; syscall; 
0x000000000011c40b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x2a1bd9]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000003666b: add byte ptr [rax], al; add byte ptr [rax], al; nop; pmovmskb eax, xmm0; and eax, 8; ret; 
0x000000000001b034: add byte ptr [rax], al; add byte ptr [rax], al; nop; ret 0x3b; 
0x000000000001b334: add byte ptr [rax], al; add byte ptr [rax], al; nop; ret; 
0x0000000000036145: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xd0; movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x0000000000165e1c: add byte ptr [rax], al; add byte ptr [rax], al; or ch, 0xeb; call qword ptr [rax]; 
0x0000000000078d1c: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000004b04: add byte ptr [rax], al; add byte ptr [rax], al; outsb dx, byte ptr [rsi]; add eax, 0; add byte ptr [rax], al; ret 0x26; 
0x000000000003639c: add byte ptr [rax], al; add byte ptr [rax], al; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x000000000001af8c: add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret 0x3b; 
0x000000000001b28c: add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x00000000000fc777: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000a1adb: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x000000000004890a: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000007b9fb: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000002cb0a: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000001858ec: add byte ptr [rax], al; add byte ptr [rax], al; pop rcx; clc; ret 0x6e1f; 
0x000000000001e434: add byte ptr [rax], al; add byte ptr [rax], al; pop rdx; ret; 
0x00000000001860fa: add byte ptr [rax], al; add byte ptr [rax], al; push rax; pop r9; clc; ret 0x6e1f; 
0x000000000001af74: add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret 0x3b; 
0x000000000001b274: add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret; 
0x000000000007442c: add byte ptr [rax], al; add byte ptr [rax], al; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000001b1f4: add byte ptr [rax], al; add byte ptr [rax], al; rcr byte ptr [rax + rbx], 0; add byte ptr [rax], al; add byte ptr [rax], ch; ret; 
0x000000000000edac: add byte ptr [rax], al; add byte ptr [rax], al; ret 0; 
0x000000000000a134: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x15; 
0x000000000001ac24: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17c5; 
0x000000000001befc: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17c6; 
0x0000000000018764: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17cf; 
0x000000000001071c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x19; 
0x000000000016fdfc: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x0000000000170594: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x000000000016ee04: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x0000000000004b0c: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x26; 
0x000000000000054a: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x2800; 
0x00000000000055a4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x31; 
0x000000000000ffb4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x000000000000f3e4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x34; 
0x00000000000078e4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x35; 
0x00000000000059c4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x37; 
0x0000000000004a04: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x3b; 
0x00000000000098ac: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x47; 
0x000000000000fb64: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x48; 
0x0000000000005844: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4c; 
0x0000000000176e20: add byte ptr [rax], al; add byte ptr [rax], al; ret 0xfffd; 
0x000000000000895c: add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x00000000001b8bc0: add byte ptr [rax], al; add byte ptr [rax], al; ret 2; 
0x000000000000ecd4: add byte ptr [rax], al; add byte ptr [rax], al; ret 3; 
0x0000000000001584: add byte ptr [rax], al; add byte ptr [rax], al; ret 5; 
0x000000000000158c: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001aa494: add byte ptr [rax], al; add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; hlt; ret 1; 
0x0000000000198e2c: add byte ptr [rax], al; add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; mov word ptr [rax + rax - 0x120a0800], gs; jmp qword ptr [rbx]; 
0x000000000016edfc: add byte ptr [rax], al; add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x000000000011621c: add byte ptr [rax], al; add byte ptr [rax], al; sub rsp, -0x80; xor eax, eax; pop rbx; ret; 
0x000000000003cfac: add byte ptr [rax], al; add byte ptr [rax], al; sub rsp, 8; call 0x3ca70; add rsp, 8; ret; 
0x00000000000eb6aa: add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000001a2ac: add byte ptr [rax], al; add byte ptr [rax], al; xlatb; ret 0x17; 
0x00000000000a0c5c: add byte ptr [rax], al; add byte ptr [rax], al; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000001365ac: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; add rsp, 0x48; ret; 
0x000000000008347c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000002ff4c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000000048812: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000046d3c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000072edc: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x0000000000072eec: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x00000000000cb12d: add byte ptr [rax], al; add byte ptr [rax], al; xor ecx, ecx; call 0xcb0b0; add rsp, 0x18; ret; 
0x00000000000cb18c: add byte ptr [rax], al; add byte ptr [rax], al; xor r9d, r9d; call 0xc9d70; add rsp, 0x18; ret; 
0x000000000009399c: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000001af2d: add byte ptr [rax], al; add byte ptr [rax], bh; ret 0x3b; 
0x000000000001a385: add byte ptr [rax], al; add byte ptr [rax], bh; ret; 
0x000000000001aecd: add byte ptr [rax], al; add byte ptr [rax], bl; ret 0x3b; 
0x000000000001b1cd: add byte ptr [rax], al; add byte ptr [rax], bl; ret; 
0x000000000001aefd: add byte ptr [rax], al; add byte ptr [rax], ch; ret 0x3b; 
0x000000000001b1fd: add byte ptr [rax], al; add byte ptr [rax], ch; ret; 
0x00000000000a37c7: add byte ptr [rax], al; add byte ptr [rax], cl; add byte ptr [rax + rcx + 0x48], dh; lea eax, dword ptr [rip + 0xbdacb]; ret; 
0x000000000008be77: add byte ptr [rax], al; add byte ptr [rax], cl; add byte ptr [rax + rcx + 0x48], dh; lea eax, dword ptr [rip + 0xd3ddb]; ret; 
0x000000000001aeb5: add byte ptr [rax], al; add byte ptr [rax], cl; ret 0x3b; 
0x000000000001b19d: add byte ptr [rax], al; add byte ptr [rax], cl; ret; 
0x0000000000179ebd: add byte ptr [rax], al; add byte ptr [rax], dh; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x00000000000a0c5d: add byte ptr [rax], al; add byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi], ch; ret; 
0x000000000001af15: add byte ptr [rax], al; add byte ptr [rax], dh; ret 0x3b; 
0x000000000001b215: add byte ptr [rax], al; add byte ptr [rax], dh; ret; 
0x000000000008ad4a: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb1f68]; ret; 
0x000000000008a9ba: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb21d8]; ret; 
0x000000000008852a: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb4528]; ret; 
0x000000000017297d: add byte ptr [rax], al; add byte ptr [rax], dl; and ebp, esp; call qword ptr [rax]; 
0x0000000000036067: add byte ptr [rax], al; add byte ptr [rax], dl; or byte ptr [rax + 1], 0xd0; shr rax, 0x3f; ret; 
0x000000000001b1b5: add byte ptr [rax], al; add byte ptr [rax], dl; ret; 
0x00000000001adf9e: add byte ptr [rax], al; add byte ptr [rax], r8b; add ah, ch; stc; add dword ptr [rax], eax; jmp qword ptr [rdi]; 
0x000000000019a97e: add byte ptr [rax], al; add byte ptr [rax], r8b; add ah, cl; ret; 
0x000000000019a8a6: add byte ptr [rax], al; add byte ptr [rax], r8b; add ah, dh; ret 0; 
0x00000000001aba3e: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + rbx*8 - 0x1407ffff], bl; cmc; jmp qword ptr [rax + 1]; 
0x00000000001a51de: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + rsi*2], bh; add dword ptr [rax], eax; mov byte ptr [rcx + rdi*8], dl; call qword ptr [rax]; 
0x00000000001991ee: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + rsi*4], cl; add byte ptr [rax - 3], ch; in eax, dx; call qword ptr [rsi + 2]; 
0x0000000000194f3e: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbp + rbp*2 - 0x69d80000], bl; in eax, dx; jmp rsp; 
0x00000000001a1f1e: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbp + rdi + 1], bh; add byte ptr [rax], bh; div ecx; jmp qword ptr [rax + 1]; 
0x00000000001a0ed6: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbp - 0x2b2fffff], dh; int1; jmp qword ptr [rbx]; 
0x000000000019bd5e: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rbx + rbx*8 + 0x6d780000], bh; out dx, al; call qword ptr [rdi]; 
0x00000000001a6ed6: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rcx*4 - 0x12fffff], dh; hlt; jmp rax; 
0x00000000001a50ce: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rdi + rbp*2], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xc], ch; call qword ptr [rax + 6]; 
0x00000000001a70f6: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rdi + rcx*4 + 1], dl; add byte ptr [rax + 7], dl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001a843e: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rdx + 0x43c80001], bl; cmc; jmp rdi; 
0x00000000001ac7ee: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rsi + 1], cl; add al, ch; add dh, dh; jmp qword ptr [rbx + 1]; 
0x00000000001aa016: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rsi + rdi*4 + 1], dh; add byte ptr [rax - 0x7b], al; cmc; call qword ptr [rsi + 6]; 
0x00000000001a5dfe: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rsp + rdi*2 + 1], bl; add byte ptr [rax - 0x47], cl; hlt; call rdi; 
0x000000000019d5f6: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rsp + rsi*8], dl; add al, al; out dx, eax; jmp qword ptr [rcx]; 
0x0000000000078599: add byte ptr [rax], al; add byte ptr [rbp + 0x12], dh; mov edx, dword ptr [rdi + 0xc0]; mov eax, edx; pop rbx; ret; 
0x0000000000078890: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x830f; 
0x00000000000cb18d: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; leave; call 0xc9d70; add rsp, 0x18; ret; 
0x00000000000b81b0: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x7d], cl; ret; 
0x0000000000118744: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x63], 0xfe; mov eax, 3; syscall; 
0x000000000006f753: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov eax, r8d; syscall; 
0x0000000000047eed: add byte ptr [rax], al; add byte ptr [rbp + 0x39], cl; ret 0x830f; 
0x0000000000036dc9: add byte ptr [rax], al; add byte ptr [rbp + 0x481079d2], al; add esp, 0xd0; ret; 
0x000000000006e9ee: add byte ptr [rax], al; add byte ptr [rbp + 0x48117ec0], al; mov eax, dword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000133a1c: add byte ptr [rax], al; add byte ptr [rbp + 0x482d78c0], al; mov eax, dword ptr [rsp]; add rsp, 0x10; pop rbx; ret; 
0x000000000007b491: add byte ptr [rax], al; add byte ptr [rbp + 0x48487ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000006dffd: add byte ptr [rax], al; add byte ptr [rbp + 0x485c7ef6], al; mov dword ptr [rbp], eax; mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x00000000000f1cb5: add byte ptr [rax], al; add byte ptr [rbp + 0x4c2975c0], al; lea ecx, dword ptr [rsp + 0x40]; movsxd rdi, edi; mov eax, 0x10e; syscall; 
0x00000000001a4739: add byte ptr [rax], al; add byte ptr [rbp + 0x6f00001], dl; hlt; jmp qword ptr [rsi]; 
0x00000000001a8709: add byte ptr [rax], al; add byte ptr [rbp + 1], ah; add byte ptr [rax + 0x55], al; cmc; call qword ptr [rcx]; 
0x000000000000ea4d: add byte ptr [rax], al; add byte ptr [rbp + 1], bl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001b0711: add byte ptr [rax], al; add byte ptr [rbp + 2], ch; add byte ptr [rax + 0x65], cl; clc; jmp qword ptr [rbx]; 
0x000000000012e8e4: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; ret; 
0x000000000009163c: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0x6878]; ret; 
0x00000000001250d6: add byte ptr [rax], al; add byte ptr [rbp + rax + 0x48], dh; add esp, 0x48; ret; 
0x00000000001aa6e9: add byte ptr [rax], al; add byte ptr [rbp + rax*8 + 1], al; add byte ptr [rax], al; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa701: add byte ptr [rax], al; add byte ptr [rbp + rax*8 + 1], bl; add byte ptr [rax], bl; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa719: add byte ptr [rax], al; add byte ptr [rbp + rax*8 + 1], dh; add byte ptr [rax - 0x3d], al; clc; jmp qword ptr [rsi]; 
0x00000000001aa761: add byte ptr [rax], al; add byte ptr [rbp + rax*8 - 0x29e7ffff], bh; cmc; jmp qword ptr [rsi]; 
0x00000000001aa731: add byte ptr [rax], al; add byte ptr [rbp + rax*8 - 0x29e7ffff], cl; cmc; jmp qword ptr [rsi]; 
0x00000000001aa749: add byte ptr [rax], al; add byte ptr [rbp + rax*8 - 0x3cbfffff], ah; clc; jmp qword ptr [rsi]; 
0x00000000001a4f29: add byte ptr [rax], al; add byte ptr [rbp + rbp*2 + 0x69800001], al; hlt; jmp qword ptr [rax + 1]; 
0x0000000000194f41: add byte ptr [rax], al; add byte ptr [rbp + rbp*2 - 0x69d80000], bl; in eax, dx; jmp rsp; 
0x0000000000194ef9: add byte ptr [rax], al; add byte ptr [rbp + rbp*2], dl; add al, ah; xchg eax, ebp; in eax, dx; call qword ptr [rax]; 
0x00000000001a7f31: add byte ptr [rax], al; add byte ptr [rbp + rbx*4 + 0x33080001], cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7ee9: add byte ptr [rax], al; add byte ptr [rbp + rbx*4 + 1], al; add al, al; xor dh, ch; jmp qword ptr [rcx]; 
0x00000000000a3f67: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; call rbx; 
0x00000000000a3ff5: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a3ba6: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; mov rsi, r13; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a4499: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x38; mov rcx, r13; mov rdi, rbp; call rbx; 
0x00000000001a1f21: add byte ptr [rax], al; add byte ptr [rbp + rdi + 1], bh; add byte ptr [rax], bh; div ecx; jmp qword ptr [rax + 1]; 
0x00000000001abde9: add byte ptr [rax], al; add byte ptr [rbp + rdi*2 + 1], ch; add byte ptr [rax - 0xa], dl; cmc; jmp qword ptr [rcx + 0x4000001]; 
0x00000000001a5f41: add byte ptr [rax], al; add byte ptr [rbp + rdi*2 - 0x43c7ffff], bl; hlt; jmp qword ptr [rdi]; 
0x00000000001a5f29: add byte ptr [rax], al; add byte ptr [rbp + rdi*2 - 0x43dfffff], al; hlt; jmp qword ptr [rcx]; 
0x0000000000199f31: add byte ptr [rax], al; add byte ptr [rbp + rdi*4 + 0x1bf80000], cl; out dx, al; jmp qword ptr [rbx]; 
0x000000000019df41: add byte ptr [rax], al; add byte ptr [rbp + rdi*8 - 0x63d80000], bl; cli; jmp qword ptr [rdi + 0x2b]; 
0x00000000001ab759: add byte ptr [rax], al; add byte ptr [rbp + rdx*8 - 0x176fffff], dh; cmc; call qword ptr [rax]; 
0x00000000001a9761: add byte ptr [rax], al; add byte ptr [rbp + rsi*4 + 0x6ed80001], bh; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001a0ed9: add byte ptr [rax], al; add byte ptr [rbp - 0x2b2fffff], dh; int1; jmp qword ptr [rbx]; 
0x00000000001a0741: add byte ptr [rax], al; add byte ptr [rbp - 0x3647ffff], bl; int1; jmp qword ptr [rbp]; 
0x00000000000c2be8: add byte ptr [rax], al; add byte ptr [rbp - 0x3d], dh; lea rsi, qword ptr [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x00000000000f7fec: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbaf02e], al; ret; 
0x00000000000589da: add byte ptr [rax], al; add byte ptr [rbp - 0x4c7af02e], al; ret 0xffff; 
0x0000000000095406: add byte ptr [rax], al; add byte ptr [rbp - 0x73], cl; dec dword ptr [r13 - 0x77]; ret; 
0x00000000000d884a: add byte ptr [rax], al; add byte ptr [rbp - 0x75], al; pop rbp; add al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x0000000000083e8d: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret; 
0x00000000000d0efd: add byte ptr [rax], al; add byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x000000000002cb1d: add byte ptr [rax], al; add byte ptr [rbp - 0x7cf78140], al; call 0x846542b; pop rbx; ret; 
0x000000000005dc95: add byte ptr [rax], al; add byte ptr [rbp - 0xcfb8b37], al; ret; 
0x00000000001a4ec1: add byte ptr [rax], al; add byte ptr [rbp*2 + 0x68980001], bl; hlt; jmp qword ptr [rcx]; 
0x00000000000059bd: add byte ptr [rax], al; add byte ptr [rbp], ah; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x37; 
0x0000000000072efd: add byte ptr [rax], al; add byte ptr [rbx + 0x2002507], cl; add byte ptr [rax], al; ret; 
0x00000000000a1adc: add byte ptr [rax], al; add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000000a0cad: add byte ptr [rax], al; add byte ptr [rbx + 0x30178916], cl; in eax, dx; mov byte ptr [rdi + 4], ch; ret; 
0x0000000000083add: add byte ptr [rax], al; add byte ptr [rbx + 0x33a68a05], cl; add byte ptr [rbp - 0xcf98740], al; ret; 
0x00000000000e0deb: add byte ptr [rax], al; add byte ptr [rbx + 0x3978244c], cl; ret 0x1372; 
0x000000000002245d: add byte ptr [rax], al; add byte ptr [rbx + 0x3a179a05], cl; add byte ptr [rbp + 0x480e74c0], al; lea eax, dword ptr [rip + 0x3a178f]; ret; 
0x000000000010ac56: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x00000000001352cc: add byte ptr [rax], al; add byte ptr [rbx + 0x440f03fd], al; call 0x12c5c2; jmp qword ptr [rsi + 0xf]; 
0x000000000009daed: add byte ptr [rax], al; add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a2a8d: add byte ptr [rax], al; add byte ptr [rbx + 0x463b0447], cl; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000a2abd: add byte ptr [rax], al; add byte ptr [rbx + 0x463b0c47], cl; or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x00000000001a8529: add byte ptr [rax], al; add byte ptr [rbx + 0x47200001], al; cmc; jmp rax; 
0x000000000009e41d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000009ce1d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000015c85d: add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, dword ptr [rdx + 3]; ret; 
0x000000000015fc0d: add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x0000000000127086: add byte ptr [rax], al; add byte ptr [rbx + 0x48102444], cl; lea edi, dword ptr [rip + 0x54c0c]; movsxd rax, dword ptr [rdi + rax*4]; add rdi, rax; jmp rdi; 
0x000000000009f23d: add byte ptr [rax], al; add byte ptr [rbx + 0x48178916], cl; lea eax, dword ptr [rdi + 4]; ret; 
0x000000000006f48e: add byte ptr [rax], al; add byte ptr [rbx + 0x48], bl; mov eax, ebp; pop rbp; pop r12; ret; 
0x000000000007442d: add byte ptr [rax], al; add byte ptr [rbx + 0x48], dl; mov eax, dword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x00000000000fa601: add byte ptr [rax], al; add byte ptr [rbx + 0x48], dl; movsxd rbx, edi; mov eax, ecx; mov rdi, rbx; syscall; 
0x00000000000c0b44: add byte ptr [rax], al; add byte ptr [rbx + 0x4c0c247c], cl; movsxd rdx, ecx; syscall; 
0x0000000000144fbd: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144dbd: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144bbd: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c92d: add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x0000000000077c9d: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; mov eax, 0xffffffff; pop r12; ret; 
0x000000000012256d: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; mov eax, 1; pop r12; ret; 
0x0000000000037f20: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000002c26d: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000001f58f: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000007a34d: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; xor eax, eax; pop r12; ret; 
0x00000000000735fd: add byte ptr [rax], al; add byte ptr [rbx + 0x5e8c107], cl; and eax, 1; ret; 
0x0000000000077abf: add byte ptr [rax], al; add byte ptr [rbx + 0x66d0eb13], cl; nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x00000000000e44cd: add byte ptr [rax], al; add byte ptr [rbx + 0x6890447], cl; xor eax, eax; ret; 
0x000000000012d88d: add byte ptr [rax], al; add byte ptr [rbx + 0x748d4806], cl; and al, 0x10; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000004ef54: add byte ptr [rax], al; add byte ptr [rbx + 0x7501046a], al; ret; 
0x0000000000131c39: add byte ptr [rax], al; add byte ptr [rbx + 0xa74fff8], al; movsxd rdi, eax; mov eax, 3; syscall; 
0x000000000012f150: add byte ptr [rax], al; add byte ptr [rbx + 0xa74fff9], al; movsxd rdi, ecx; mov eax, 3; syscall; 
0x00000000000b9f3d: add byte ptr [rax], al; add byte ptr [rbx + 0xb7401fe], al; xor eax, eax; ret; 
0x000000000014cfdd: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014cf6d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014cefd: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000019c38e: add byte ptr [rax], al; add byte ptr [rbx + 0xe], cl; adc byte ptr [rbx + 0xa440202], al; ret; 
0x00000000001aef1e: add byte ptr [rax], al; add byte ptr [rbx + 0xe], dl; adc byte ptr [rbx + 0x1990302], al; ret; 
0x00000000001b7fe9: add byte ptr [rax], al; add byte ptr [rbx + 6], bl; add byte ptr [rax], al; ret 5; 
0x00000000001a24a9: add byte ptr [rax], al; add byte ptr [rbx + rax*2], al; add dword ptr [rax], eax; push rax; sbb edx, esi; call qword ptr [rdx]; 
0x00000000000c2441: add byte ptr [rax], al; add byte ptr [rbx + rax*4 + 0x3a], ah; mov rdx, -1; cmovne rax, rdx; ret; 
0x000000000019a4c9: add byte ptr [rax], al; add byte ptr [rbx + rax*8], ah; add byte ptr [rax], al; jo 0x19a4fd; out dx, al; call qword ptr [rdx]; 
0x000000000019a501: add byte ptr [rax], al; add byte ptr [rbx + rax*8], bl; add byte ptr [rax + 0x2b], bh; out dx, al; call qword ptr [rdx]; 
0x000000000019e4c9: add byte ptr [rax], al; add byte ptr [rbx + rax], ah; add dword ptr [rax], eax; or byte ptr [rdx - 0x10], 0xff; ret; 
0x00000000001a4d61: add byte ptr [rax], al; add byte ptr [rbx + rbp*2 + 0x66180001], bh; hlt; jmp qword ptr [rcx]; 
0x00000000001a4d09: add byte ptr [rax], al; add byte ptr [rbx + rbp*2 + 1], ah; add al, dh; hlt; jmp qword ptr [rdi]; 
0x00000000001a4cb1: add byte ptr [rax], al; add byte ptr [rbx + rbp*2], cl; add dword ptr [rax], eax; test al, 0x65; hlt; jmp qword ptr [rcx]; 
0x00000000001a8cd1: add byte ptr [rax], al; add byte ptr [rbx + rbp*4], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xb], bl; jmp qword ptr [rdi + 1]; 
0x000000000001b045: add byte ptr [rax], al; add byte ptr [rbx + rbx*2 + 0x18], bh; add byte ptr [rax], al; cwde; ret 0x3b; 
0x00000000001a7d51: add byte ptr [rax], al; add byte ptr [rbx + rbx*4 + 0x30480001], ch; cmc; jmp qword ptr [rax]; 
0x00000000001a7ca9: add byte ptr [rax], al; add byte ptr [rbx + rbx*4], al; add dword ptr [rax], eax; jo 0x1a7ce1; cmc; jmp qword ptr [rcx]; 
0x00000000001a7cc1: add byte ptr [rax], al; add byte ptr [rbx + rbx*4], bl; add dword ptr [rax], eax; mov byte ptr [rdi], ch; cmc; jmp qword ptr [rcx]; 
0x000000000019bd61: add byte ptr [rax], al; add byte ptr [rbx + rbx*8 + 0x6d780000], bh; out dx, al; call qword ptr [rdi]; 
0x0000000000112f44: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x32], ah; syscall; 
0x000000000012ff38: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x4d], al; mov byte ptr [rax + 1], cl; ret; 
0x00000000000485e4: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x7c], cl; and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0xd7e9; 
0x00000000001aacf1: add byte ptr [rax], al; add byte ptr [rbx + rcx*8 + 1], cl; add al, bh; fcomi st(5); call qword ptr [rax]; 
0x00000000001aad49: add byte ptr [rax], al; add byte ptr [rbx + rcx*8 - 0x237fffff], ah; cmc; call qword ptr [rax]; 
0x00000000001b1d01: add byte ptr [rax], al; add byte ptr [rbx + rdi + 2], bl; add byte ptr [rax], cl; or al, 0xf7; call qword ptr [rsi]; 
0x00000000001a5ce9: add byte ptr [rax], al; add byte ptr [rbx + rdi*2 + 1], al; add al, dh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a5d01: add byte ptr [rax], al; add byte ptr [rbx + rdi*2 + 1], bl; add byte ptr [rax], cl; mov ch, 0xf4; call qword ptr [rbx]; 
0x0000000000199d01: add byte ptr [rax], al; add byte ptr [rbx + rdi*4], bl; add byte ptr [rax], bl; adc al, 0xee; jmp qword ptr [rcx]; 
0x00000000001add21: add byte ptr [rax], al; add byte ptr [rbx + rdi*8 + 1], bh; add byte ptr [rax], ch; and dh, dh; jmp qword ptr [rcx]; 
0x00000000001a1cd9: add byte ptr [rax], al; add byte ptr [rbx + rdi], dh; add dword ptr [rax], eax; mov al, 0xee; int1; jmp qword ptr [rcx]; 
0x00000000001a1cb9: add byte ptr [rax], al; add byte ptr [rbx + rdi], dl; add dword ptr [rax], eax; and dh, ch; int1; jmp qword ptr [rcx]; 
0x00000000001a7529: add byte ptr [rax], al; add byte ptr [rbx + rdx*4 + 0x20c00001], al; cmc; jmp qword ptr [rsi]; 
0x0000000000197541: add byte ptr [rax], al; add byte ptr [rbx + rdx*4 - 0x42780000], bl; in eax, dx; call qword ptr [rsi]; 
0x0000000000197529: add byte ptr [rax], al; add byte ptr [rbx + rdx*4 - 0x42800000], al; in eax, dx; jmp qword ptr [rax]; 
0x000000000017a551: add byte ptr [rax], al; add byte ptr [rbx + rdx*8 - 0xa], ch; call rdx; 
0x00000000001ab4b9: add byte ptr [rax], al; add byte ptr [rbx + rdx*8], dl; add dword ptr [rax], eax; shl ch, 1; cmc; jmp rbx; 
0x00000000001b1511: add byte ptr [rax], al; add byte ptr [rbx + rsi + 2], ch; add al, bl; div dh; call qword ptr [rsi]; 
0x000000000005f94c: add byte ptr [rax], al; add byte ptr [rbx - 0x111743], al; call qword ptr [rax]; 
0x000000000005fc60: add byte ptr [rax], al; add byte ptr [rbx - 0x116b43], al; call qword ptr [rax]; 
0x000000000012d6e7: add byte ptr [rax], al; add byte ptr [rbx - 0x14f3dbbc], cl; xor eax, 0x8478b48; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000049be4: add byte ptr [rax], al; add byte ptr [rbx - 0x16], cl; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000005ea6c: add byte ptr [rax], al; add byte ptr [rbx - 0x1e], cl; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x00000000000c1097: add byte ptr [rax], al; add byte ptr [rbx - 0x2776d787], cl; mov esi, 0x81; syscall; 
0x00000000000fa53d: add byte ptr [rax], al; add byte ptr [rbx - 0x2f], cl; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x119; syscall; 
0x0000000000127ff7: add byte ptr [rax], al; add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000002ea7d: add byte ptr [rax], al; add byte ptr [rbx - 0x387cfe40], al; add dword ptr [rax - 0x7d], ecx; ret 0x8310; 
0x000000000012e60d: add byte ptr [rax], al; add byte ptr [rbx - 0x47fbd7b9], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000007b1ad: add byte ptr [rax], al; add byte ptr [rbx - 0x4c8b0008], al; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000b6fd6: add byte ptr [rax], al; add byte ptr [rbx - 0x50f0ec18], al; ret 0x8941; 
0x0000000000036ec8: add byte ptr [rax], al; add byte ptr [rbx - 0x6f3c0038], al; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x00000000000d0b75: add byte ptr [rax], al; add byte ptr [rbx - 0x708bfb1e], al; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x0000000000064c4d: add byte ptr [rax], al; add byte ptr [rbx - 0x73], al; lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret 0x4504; 
0x0000000000047e0d: add byte ptr [rax], al; add byte ptr [rbx - 0x73], al; lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000004890b: add byte ptr [rax], al; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x00000000000205e0: add byte ptr [rax], al; add byte ptr [rbx - 0x76ff4783], al; ret; 
0x0000000000021e7d: add byte ptr [rax], al; add byte ptr [rbx - 0x7a2dcf00], cl; ror byte ptr [rdi], 0x94; ret 0x8d48; 
0x00000000000eea28: add byte ptr [rax], al; add byte ptr [rbx - 0x7acfdb84], cl; dec dword ptr [rdi]; xchg eax, esp; ret 0x7c83; 
0x00000000000ba185: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fb8d], cl; ret; 
0x00000000000d0dcd: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fe3b], al; ret; 
0x0000000000113b7d: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fe40], al; ret 0x3904; 
0x00000000000f976d: add byte ptr [rax], al; add byte ptr [rbx - 0x7d], dl; call qword ptr [rcx]; 
0x00000000000cc616: add byte ptr [rax], al; add byte ptr [rbx - 0x9f43], al; jmp qword ptr [rdx]; 
0x00000000001a7eb9: add byte ptr [rax], al; add byte ptr [rbx*4 + 0x32600001], dl; cmc; jmp qword ptr [rcx]; 
0x00000000001ac4a9: add byte ptr [rax], al; add byte ptr [rbx], al; add dword ptr [rax], eax; cmp ch, 0xf5; call qword ptr [rax]; 
0x00000000000066b5: add byte ptr [rax], al; add byte ptr [rcx + 0x1200001d], bh; add byte ptr [rax + rax], cl; push rax; ret 7; 
0x0000000000042f68: add byte ptr [rax], al; add byte ptr [rcx + 0x29], cl; ret; 
0x000000000015a51d: add byte ptr [rax], al; add byte ptr [rcx + 0x3518911], cl; ret; 
0x00000000001143f5: add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x840f; 
0x000000000004934c: add byte ptr [rax], al; add byte ptr [rcx + 0x415d5bd0], cl; pop rsp; ret; 
0x00000000000f476f: add byte ptr [rax], al; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x00000000000968bd: add byte ptr [rax], al; add byte ptr [rcx + 0x447c60f], cl; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000015a4fd: add byte ptr [rax], al; add byte ptr [rcx + 0x4518811], cl; ret; 
0x000000000009dded: add byte ptr [rax], al; add byte ptr [rcx + 0x4578817], cl; ret; 
0x000000000009691d: add byte ptr [rax], al; add byte ptr [rcx + 0x4789440f], cl; add al, 0x48; lea eax, dword ptr [rdi + 7]; ret; 
0x000000000009687d: add byte ptr [rax], al; add byte ptr [rcx + 0x4789440f], cl; add al, 0x48; mov eax, edi; ret; 
0x000000000007ba94: add byte ptr [rax], al; add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x00000000000739d2: add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; ret; 
0x000000000005386f: add byte ptr [rax], al; add byte ptr [rcx + 0x5d], al; ret; 
0x00000000000537a1: add byte ptr [rax], al; add byte ptr [rcx + 0x5e], al; ret; 
0x0000000000033105: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; cld; mov eax, 3; syscall; 
0x000000000002e6d4: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; std; mov eax, 3; syscall; 
0x00000000000f0fdd: add byte ptr [rax], al; add byte ptr [rcx + 0x8c], bh; mov esi, esi; movsxd rdi, edi; mov eax, ecx; syscall; 
0x000000000019e206: add byte ptr [rax], al; add byte ptr [rcx + 0xe], dl; adc byte ptr [rdx + rax - 0x79e7f1b4], cl; add eax, dword ptr [rdi + 0xe]; and byte ptr [rbx + 0xac90204], al; ret; 
0x00000000000e0d90: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 4; or byte ptr [rcx], bh; ret 0x1372; 
0x00000000001a8309: add byte ptr [rax], al; add byte ptr [rcx + 1], ah; add al, al; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001a8321: add byte ptr [rax], al; add byte ptr [rcx + 1], bh; add al, bl; cmp esi, ebp; jmp rbx; 
0x000000000005ffe7: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret 0x3145; 
0x00000000000a143d: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x00000000001a6349: add byte ptr [rax], al; add byte ptr [rcx + rax*4 - 0x3a3fffff], ah; hlt; call qword ptr [rax + 5]; 
0x0000000000196331: add byte ptr [rax], al; add byte ptr [rcx + rax*4 - 0x56b80000], cl; in eax, dx; call rcx; 
0x00000000001a62c1: add byte ptr [rax], al; add byte ptr [rcx + rax*4], bl; add dword ptr [rax], eax; pop rax; ret; 
0x00000000001a0b61: add byte ptr [rax], al; add byte ptr [rcx + rbp - 0x2cc7ffff], bh; int1; call rsi; 
0x000000000019fb49: add byte ptr [rax], al; add byte ptr [rcx + rbx + 0x18c00001], ah; int1; jmp qword ptr [rcx]; 
0x000000000019fb61: add byte ptr [rax], al; add byte ptr [rcx + rbx + 0x18d80001], bh; int1; jmp qword ptr [rax + 1]; 
0x00000000001a7b29: add byte ptr [rax], al; add byte ptr [rcx + rbx*4 + 0x2dc00001], al; cmc; jmp qword ptr [rcx]; 
0x00000000001a7b41: add byte ptr [rax], al; add byte ptr [rcx + rbx*4 + 0x2dd80001], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7b59: add byte ptr [rax], al; add byte ptr [rcx + rbx*4 + 0x2df00001], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001abb01: add byte ptr [rax], al; add byte ptr [rcx + rbx*8 + 1], bl; add byte ptr [rax - 0x11], cl; cmc; jmp qword ptr [rax]; 
0x00000000001abb41: add byte ptr [rax], al; add byte ptr [rcx + rbx*8 - 0x1057ffff], bl; cmc; call qword ptr [rdi]; 
0x0000000000192b49: add byte ptr [rax], al; add byte ptr [rcx + rcx*2 + 0x3a800000], ah; cli; jmp qword ptr [rcx]; 
0x0000000000198a01: add byte ptr [rax], al; add byte ptr [rcx + rcx*2 - 0xf280000], al; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001b2ac1: add byte ptr [rax], al; add byte ptr [rcx + rcx*2], bl; add al, byte ptr [rax]; or byte ptr [rbx - 9], cl; jmp qword ptr [rax]; 
0x000000000006b0fb: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x24], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x000000000006de7a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 + 0x40], cl; or byte ptr [rbx + 0x48010442], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x000000000012c16c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x000000000011fee7: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax]; 
0x000000000011fee7: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax]; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000000f5d2b: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rbx; 
0x00000000001281d0: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x000000000012b43b: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x000000000006f5c2: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000012d9f5: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbp; mov edx, 0xffffffff; xor eax, eax; call rcx; 
0x00000000000a4196: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rdi, rbp; call rbx; 
0x000000000004a190: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x598]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000a4791: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x17], cl; mov rdi, rbp; call rbx; 
0x000000000012443f: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x000000000012c396: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x0000000000125f5a: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x30]; 
0x0000000000079e11: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x48]; 
0x00000000000f5e5f: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x00000000000fc1c6: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, r9; mov qword ptr [rbp - 0x6d0], rax; mov eax, ebx; syscall; 
0x000000000004c1fa: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006ed8e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006e6e5: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078d9d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000007031c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x1f], al; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000ebab2: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x29], cl; mov eax, r9d; syscall; 
0x0000000000070687: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x2a], cl; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000062dfb: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x10e0], r10; mov rsi, r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000004b8ef: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x508], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004b7de: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x538], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000ebbc2: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, r8d; syscall; 
0x000000000007318d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x3e], cl; mov rsi, r12; mov rdi, r13; mov eax, r9d; syscall; 
0x0000000000051804: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000123d38: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x4d], al; test al, 0; add byte ptr [rax], al; bswap r14d; call qword ptr [rax + 0x18]; 
0x00000000000dc43b: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x7c], al; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000749de: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x00000000000792ad: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000049cfe: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; sub r12, r14; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000007655e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rdi, rbx; call rax; 
0x0000000000079690: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x0000000000074d55: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x000000000011fcdf: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax]; 
0x00000000000f5c94: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x0000000000085faf: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; mov rdx, rbx; mov rsi, r13; call rax; 
0x00000000000fc0c9: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r9; mov eax, 0x14; syscall; 
0x0000000000075cb0: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 2], cl; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x0000000000120719: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax + 0x20]; 
0x00000000000f5ca3: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call rbx; 
0x000000000002e201: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; mov eax, 3; syscall; 
0x00000000001a6ae1: add byte ptr [rax], al; add byte ptr [rcx + rcx*4], bh; add dword ptr [rax], eax; or al, ah; hlt; jmp rsp; 
0x00000000001aeab1: add byte ptr [rax], al; add byte ptr [rcx + rcx], cl; add al, byte ptr [rax]; cmp byte ptr [rdx - 0xa], bl; call qword ptr [rdi]; 
0x00000000001a5b59: add byte ptr [rax], al; add byte ptr [rcx + rdi*2 - 0x4effffff], dh; hlt; jmp qword ptr [rcx]; 
0x00000000001a5b41: add byte ptr [rax], al; add byte ptr [rcx + rdi*2 - 0x4f17ffff], bl; hlt; jmp qword ptr [rcx]; 
0x00000000001a5b29: add byte ptr [rax], al; add byte ptr [rcx + rdi*2 - 0x4f2fffff], al; hlt; jmp qword ptr [rcx]; 
0x00000000001a72f9: add byte ptr [rax], al; add byte ptr [rcx + rdx*4 + 1], dl; add byte ptr [rax + 0xd], ah; cmc; jmp qword ptr [rcx]; 
0x00000000001a5329: add byte ptr [rax], al; add byte ptr [rcx + rsi*2 + 0x7ad00001], al; hlt; jmp qword ptr [rcx]; 
0x00000000001a5359: add byte ptr [rax], al; add byte ptr [rcx + rsi*2 + 0x7b000001], dh; hlt; jmp qword ptr [rcx]; 
0x000000000019d2f9: add byte ptr [rax], al; add byte ptr [rcx + rsi*8], dl; add al, ah; out dx, eax; call qword ptr [rsi + 1]; 
0x0000000000192b7e: add byte ptr [rax], al; add byte ptr [rcx - 0x15], al; call rdx; 
0x000000000006498d: add byte ptr [rax], al; add byte ptr [rcx - 0x1677b], cl; jmp qword ptr [rsi + 0x2e]; 
0x00000000000700db: add byte ptr [rax], al; add byte ptr [rcx - 0x1976b317], cl; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000007504f: add byte ptr [rax], al; add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x00000000000bcdcf: add byte ptr [rax], al; add byte ptr [rcx - 0x3b7cb739], cl; or cl, ch; ret; 
0x00000000000e44dd: add byte ptr [rax], al; add byte ptr [rcx - 0x3fcefb89], cl; ret; 
0x0000000000044e63: add byte ptr [rax], al; add byte ptr [rcx - 0x43], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000004713c: add byte ptr [rax], al; add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x00000000001ac361: add byte ptr [rax], al; add byte ptr [rcx - 0x4d7ffff], bh; cmc; call qword ptr [rax]; 
0x0000000000125f4d: add byte ptr [rax], al; add byte ptr [rcx - 0x74b6dbfc], cl; and al, 8; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x00000000000e365d: add byte ptr [rax], al; add byte ptr [rcx - 0x75], al; add byte ptr [r9], r15b; ret 0x870f; 
0x0000000000126015: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; and al, 8; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x00000000000e278d: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; cmp byte ptr [r8 - 0x77], r9b; ret 0x8948; 
0x000000000010556e: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x0000000000127d02: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; jo 0x127d56; mov edi, esp; call qword ptr [rax + 0x20]; 
0x000000000012aa02: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x20]; 
0x000000000012b528: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000012a816: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + rcx*4 - 0x11], r9b; call qword ptr [rax + 0x20]; 
0x0000000000074d4e: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x0000000000036fa0: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ror byte ptr [rax - 0x75], 0x7c; and al, 8; mov eax, 0x82; syscall; 
0x0000000000020c6d: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; xor al, 0x89; inc dword ptr [rdi + 4]; ret; 
0x0000000000059577: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx - 0x77]; ret; 
0x000000000003fefa: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x000000000004b72c: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8b44; 
0x0000000000062125: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x000000000008b481: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x00000000000210db: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000004554f: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret; 
0x0000000000048206: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; std; inc dword ptr [rdi + rcx + 0x44]; call 0xfffffffffff9a6fe; jmp qword ptr [rsi + 0x2e]; 
0x000000000007e84d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x00000000000d40c8: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4c01; 
0x00000000001372cd: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000008712d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x00000000000952e7: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000007a1cd: add byte ptr [rax], al; add byte ptr [rcx - 0x7f], al; in eax, 0; adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000f0fe2: add byte ptr [rax], al; add byte ptr [rcx - 0x9cb70a], cl; mov eax, ecx; syscall; 
0x00000000001858ed: add byte ptr [rax], al; add byte ptr [rcx - 0xd], bl; clc; ret 0x6e1f; 
0x000000000008beb0: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 1; 
0x000000000008bed6: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 2; 
0x00000000001a6ed9: add byte ptr [rax], al; add byte ptr [rcx*4 - 0x12fffff], dh; hlt; jmp rax; 
0x00000000000d9285: add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax], al; add al, ch; jmp qword ptr [rcx - 0xc]; 
0x00000000000485ec: add byte ptr [rax], al; add byte ptr [rcx], al; ret 0xd7e9; 
0x00000000000e1e87: add byte ptr [rax], al; add byte ptr [rcx], bh; ret 0x8f0f; 
0x00000000000fce87: add byte ptr [rax], al; add byte ptr [rcx], bh; ret; 
0x000000000010805d: add byte ptr [rax], al; add byte ptr [rcx], bh; sal byte ptr [rbp + 7], 1; mov eax, 0xca; syscall; 
0x00000000000ce97a: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x850f; 
0x00000000000b9245: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8944; 
0x00000000000b92df: add byte ptr [rax], al; add byte ptr [rcx], ch; ret 0x8d41; 
0x000000000008ac07: add byte ptr [rax], al; add byte ptr [rcx], ch; ret; 
0x00000000000b7927: add byte ptr [rax], al; add byte ptr [rcx], ch; rol byte ptr [rcx + 0x29], 1; ret; 
0x00000000000f0fff: add byte ptr [rax], al; add byte ptr [rcx], ch; sal bl, 1; ret; 
0x00000000001a82d9: add byte ptr [rax], al; add byte ptr [rcx], dh; add dword ptr [rax], eax; nop; cmp esi, ebp; jmp qword ptr [rcx]; 
0x0000000000079e05: add byte ptr [rax], al; add byte ptr [rcx], dh; idiv byte ptr [rcx + 3]; mov edx, 2; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000079d54: add byte ptr [rax], al; add byte ptr [rcx], dh; idiv byte ptr [rcx + 3]; mov edx, 2; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000cb12e: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; call 0xcb0b0; add rsp, 0x18; ret; 
0x000000000003c3fa: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000888c4: add byte ptr [rax], al; add byte ptr [rcx], dh; ret; 
0x000000000002ff4d: add byte ptr [rax], al; add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6bf07f19], 0xc0; ret; 
0x0000000000026196: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax + 0x39], cl; ret; 
0x0000000000037d91: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; fidivr word ptr [rax + 0x80]; syscall; 
0x000000000003c239: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001176e0: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x76b7f3a9], 0x3e; ret; 
0x000000000007c156: add byte ptr [rax], al; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x58]; 
0x000000000003706a: add byte ptr [rax], al; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rcx + rcx*4 - 0x31], 0x44; mov eax, eax; syscall; 
0x0000000000037103: add byte ptr [rax], al; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rcx + rcx*4 - 0x39], 0x89; call 0xffffffff894b7622; ret 0xc189; 
0x00000000001365bd: add byte ptr [rax], al; add byte ptr [rcx], dh; shr bl, 0xdb; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000000ca948: add byte ptr [rax], al; add byte ptr [rcx], dh; shr cl, 0xf7; idiv edi; dec dword ptr [rax - 0x7d]; ret; 
0x000000000010217e: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x75], 0x54; and al, 0x18; mov edi, 0x2000004; call rax; 
0x000000000006d974: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x10]; 
0x00000000001087df: add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rcx - 0x79cb638], 0xf; add eax, 0xfff0003d; dec dword ptr [rax - 0x77]; ret 0x1376; 
0x00000000001a8931: add byte ptr [rax], al; add byte ptr [rdi + 0x5d580001], cl; cmc; call qword ptr [rcx]; 
0x00000000000e8a62: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000a2bd2: add byte ptr [rax], al; add byte ptr [rdi + 2], bh; neg eax; ret; 
0x0000000000164162: add byte ptr [rax], al; add byte ptr [rdi + 9], bh; neg eax; ret; 
0x00000000001089bf: add byte ptr [rax], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x41d15]; ret; 
0x0000000000108a5f: add byte ptr [rax], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x44745]; ret; 
0x000000000008c5df: add byte ptr [rax], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xc0bd5]; ret; 
0x0000000000086d2c: add byte ptr [rax], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xdb398]; ret; 
0x00000000001a28f9: add byte ptr [rax], al; add byte ptr [rdi + rax*2 + 1], dl; add byte ptr [rax], dh; mov dh, dl; jmp qword ptr [rcx]; 
0x00000000001a6929: add byte ptr [rax], al; add byte ptr [rdi + rax*4 - 0x22efffff], al; hlt; call qword ptr [rdx]; 
0x00000000001a68c9: add byte ptr [rax], al; add byte ptr [rdi + rax*4], ah; add dword ptr [rax], eax; jo 0x1a68ae; hlt; call qword ptr [rax]; 
0x00000000001aa911: add byte ptr [rax], al; add byte ptr [rdi + rax*8 + 1], ch; add byte ptr [rax], cl; xlatb; cmc; jmp qword ptr [rsi]; 
0x00000000001aa8f9: add byte ptr [rax], al; add byte ptr [rdi + rax*8 + 1], dl; add al, dh; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa941: add byte ptr [rax], al; add byte ptr [rdi + rax*8 - 0x28f7ffff], bl; cmc; jmp qword ptr [rdi]; 
0x00000000001aa8c9: add byte ptr [rax], al; add byte ptr [rdi + rax*8], ah; add dword ptr [rax], eax; rcl dh, 0xf5; jmp qword ptr [rsi]; 
0x00000000001aa8e1: add byte ptr [rax], al; add byte ptr [rdi + rax*8], bh; add dword ptr [rax], eax; fcom st(6); cmc; jmp qword ptr [rsi]; 
0x00000000001aa8b1: add byte ptr [rax], al; add byte ptr [rdi + rax*8], cl; add dword ptr [rax], eax; test al, 0xd6; cmc; jmp qword ptr [rsi]; 
0x00000000001b1111: add byte ptr [rax], al; add byte ptr [rdi + rbp + 2], ch; add byte ptr [rax], bl; out 0xf6, al; jmp rdx; 
0x00000000001a5159: add byte ptr [rax], al; add byte ptr [rdi + rbp*2 + 0x75c00001], dh; hlt; call qword ptr [rax]; 
0x00000000001a50d1: add byte ptr [rax], al; add byte ptr [rdi + rbp*2], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xc], ch; call qword ptr [rax + 6]; 
0x00000000001a50b9: add byte ptr [rax], al; add byte ptr [rdi + rbp*2], dl; add dword ptr [rax], eax; and byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x000000000019d129: add byte ptr [rax], al; add byte ptr [rdi + rbp*8 - 0x4800000], al; out dx, al; call qword ptr [rax]; 
0x000000000019d141: add byte ptr [rax], al; add byte ptr [rdi + rbp*8 - 0x4880000], bl; out dx, al; jmp qword ptr [rsi]; 
0x000000000019d0f9: add byte ptr [rax], al; add byte ptr [rdi + rbp*8], dl; add al, ah; cld; stc; call qword ptr [rax]; 
0x00000000001a0151: add byte ptr [rax], al; add byte ptr [rdi + rbx + 0x7f880001], ch; int1; call qword ptr [rax]; 
0x00000000001a8159: add byte ptr [rax], al; add byte ptr [rdi + rbx*4 + 0x38f00001], dh; cmc; jmp qword ptr [rsi]; 
0x00000000001a8119: add byte ptr [rax], al; add byte ptr [rdi + rbx*4 + 1], dh; add byte ptr [rax + 0x38], dh; cmc; jmp qword ptr [rax]; 
0x000000000019c139: add byte ptr [rax], al; add byte ptr [rdi + rbx*8 - 0x79b00000], dl; out dx, al; call qword ptr [rdi]; 
0x00000000001a00d1: add byte ptr [rax], al; add byte ptr [rdi + rbx], ch; add dword ptr [rax], eax; pop rax; int1; call qword ptr [rdx]; 
0x00000000001a70f9: add byte ptr [rax], al; add byte ptr [rdi + rcx*4 + 1], dl; add byte ptr [rax + 7], dl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001a2121: add byte ptr [rax], al; add byte ptr [rdi + rdi + 1], bh; add byte ptr [rax - 2], cl; int1; jmp qword ptr [rcx]; 
0x00000000001a2151: add byte ptr [rax], al; add byte ptr [rdi + rdi - 0x187ffff], ch; int1; jmp qword ptr [rcx]; 
0x00000000001a2139: add byte ptr [rax], al; add byte ptr [rdi + rdi - 0x19fffff], dl; int1; jmp qword ptr [rcx]; 
0x00000000001aa161: add byte ptr [rax], al; add byte ptr [rdi + rdi*4 - 0x7127ffff], bh; cmc; jmp qword ptr [rbx + 2]; 
0x00000000001a20a9: add byte ptr [rax], al; add byte ptr [rdi + rdi], al; add dword ptr [rax], eax; xor dh, bh; int1; jmp qword ptr [rcx]; 
0x000000000019f929: add byte ptr [rax], al; add byte ptr [rdi + rdx + 0x7a00001], al; int1; call qword ptr [rax]; 
0x00000000001b3929: add byte ptr [rax], al; add byte ptr [rdi + rdx*2 + 0x76500002], al; idiv edi; ret 0; 
0x00000000001a7951: add byte ptr [rax], al; add byte ptr [rdi + rdx*4 + 0x2b480001], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001a7909: add byte ptr [rax], al; add byte ptr [rdi + rdx*4 + 1], ah; add byte ptr [rax], al; sub esi, ebp; jmp qword ptr [rcx]; 
0x00000000001a7921: add byte ptr [rax], al; add byte ptr [rdi + rdx*4 + 1], bh; add byte ptr [rax], bl; sub esi, ebp; jmp qword ptr [rcx]; 
0x00000000001ab921: add byte ptr [rax], al; add byte ptr [rdi + rdx*8 + 1], bh; add byte ptr [rax - 0x17], bh; cmc; call qword ptr [rax]; 
0x00000000001ab8f1: add byte ptr [rax], al; add byte ptr [rdi + rdx*8 + 1], cl; add byte ptr [rax - 0x17], ch; cmc; call qword ptr [rax]; 
0x00000000001ab951: add byte ptr [rax], al; add byte ptr [rdi + rdx*8 - 0x1697ffff], ch; cmc; call qword ptr [rax]; 
0x000000000019f8c9: add byte ptr [rax], al; add byte ptr [rdi + rdx], ah; add dword ptr [rax], eax; nop; cld; jmp qword ptr [rbx]; 
0x00000000001a1961: add byte ptr [rax], al; add byte ptr [rdi + rsi - 0x1c97ffff], bh; int1; call rsp; 
0x00000000001a1949: add byte ptr [rax], al; add byte ptr [rdi + rsi - 0x1d2fffff], ah; int1; jmp qword ptr [rcx]; 
0x00000000001a1931: add byte ptr [rax], al; add byte ptr [rdi + rsi - 0x1dc7ffff], cl; int1; jmp qword ptr [rdx]; 
0x00000000001785be: add byte ptr [rax], al; add byte ptr [rdi - 0xe], ah; jmp qword ptr [rax]; 
0x00000000001a5ec9: add byte ptr [rax], al; add byte ptr [rdi*2 - 0x443fffff], ah; hlt; jmp qword ptr [rbx]; 
0x0000000000199eb9: add byte ptr [rax], al; add byte ptr [rdi*4 + 0x1ab00000], dl; out dx, al; call qword ptr [rdi]; 
0x000000000019dee1: add byte ptr [rax], al; add byte ptr [rdi*8 - 0x60280000], bh; out dx, eax; call qword ptr [rdi]; 
0x000000000001e3a5: add byte ptr [rax], al; add byte ptr [rdi], ah; ret; 
0x000000000001a325: add byte ptr [rax], al; add byte ptr [rdi], al; ret; 
0x0000000000176bb9: add byte ptr [rax], al; add byte ptr [rdi], bl; add byte ptr [rax], al; insd dword ptr [rdi], dx; sar bh, 1; jmp qword ptr [rdi]; 
0x000000000014c0f4: add byte ptr [rax], al; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000014d12d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000014d19d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x00000000000279f1: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x48; dec dword ptr [rcx - 0x7d]; ret; 
0x0000000000027a3b: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4101; 
0x000000000002a9ef: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4a; inc dword ptr [rcx - 0x78]; add rcx, qword ptr [r9 + 0x39]; ret; 
0x000000000006d4bd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x000000000007b5fb: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x75; add byte ptr [rcx + rcx*4 - 0x19], cl; lea r13, qword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x00000000000883cd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000015fc8d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000096f7d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x0000000000096f8d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x0000000000096f6d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000096fed: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xea8348c0; adc byte ptr [rax + 1], cl; ret 0x147c; 
0x0000000000096fcd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x347c; 
0x000000000009395d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000008bded: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000008bddd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000008bdcd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x00000000000a1a35: add byte ptr [rax], al; add byte ptr [rdi], cl; popfq; ret 0xea81; 
0x00000000000b8e9b: add byte ptr [rax], al; add byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0x8d44; 
0x00000000000f6106: add byte ptr [rax], al; add byte ptr [rdi], cl; test byte ptr [rcx], ah; add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x00000000000f658b: add byte ptr [rax], al; add byte ptr [rdi], cl; test byte ptr [rdx + rax - 0x9cf0000], dh; mov rdi, r15; call rbx; 
0x0000000000047e33: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rax + rdi*8 - 0x49f00001], eax; add dword ptr [r8 - 0x7d], ecx; ret; 
0x000000000015ee05: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rdx - 0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi + 0x66]; 
0x00000000000e2d1e: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xe2c1; 
0x00000000000cd96c: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x00000000000c599a: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0x45e9; 
0x00000000000c4ee4: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000005356a: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebp, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000001a355: add byte ptr [rax], al; add byte ptr [rdi], dl; ret; 
0x000000000006f5bd: add byte ptr [rax], al; add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000a0c6d: add byte ptr [rax], al; add byte ptr [rdx + 0x30178816], cl; in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x00000000001a8429: add byte ptr [rax], al; add byte ptr [rdx + 0x43900001], al; cmc; call qword ptr [rax]; 
0x00000000001a8441: add byte ptr [rax], al; add byte ptr [rdx + 0x43c80001], bl; cmc; jmp rdi; 
0x000000000015c81d: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, dword ptr [rdx]; ret; 
0x00000000001584ed: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000009f1fd: add byte ptr [rax], al; add byte ptr [rdx + 0x48178816], cl; lea eax, dword ptr [rdi + 1]; ret; 
0x000000000019f98e: add byte ptr [rax], al; add byte ptr [rdx + 0xe], cl; adc byte ptr [rbx + 0x300e4402], al; add dl, byte ptr [rax + 0x41100e0a]; ret; 
0x000000000013630c: add byte ptr [rax], al; add byte ptr [rdx + 1], bh; add rdi, 0x1c; mov al, 0xca; mov esi, 0x81; syscall; 
0x000000000010808a: add byte ptr [rax], al; add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x0000000000079e0c: add byte ptr [rax], al; add byte ptr [rdx + 2], bh; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000079d5b: add byte ptr [rax], al; add byte ptr [rdx + 2], bh; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000001a6419: add byte ptr [rax], al; add byte ptr [rdx + rax*4 + 1], dh; add byte ptr [rax - 0x34], dh; hlt; jmp qword ptr [rcx]; 
0x00000000001a6431: add byte ptr [rax], al; add byte ptr [rdx + rax*4 - 0x3377ffff], cl; hlt; jmp qword ptr [rcx]; 
0x00000000001b6439: add byte ptr [rax], al; add byte ptr [rdx + rax*4 - 0xdeffffe], dl; cli; call rcx; 
0x0000000000196401: add byte ptr [rax], al; add byte ptr [rdx + rax*4], bl; add byte ptr [rax - 0x56], bl; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a63b9: add byte ptr [rax], al; add byte ptr [rdx + rax*4], dl; add dword ptr [rax], eax; and bl, cl; hlt; jmp qword ptr [rdx]; 
0x000000000019a451: add byte ptr [rax], al; add byte ptr [rdx + rax*8 + 0x2af80000], ch; out dx, al; call qword ptr [rsi]; 
0x00000000001a4c51: add byte ptr [rax], al; add byte ptr [rdx + rbp*2 + 0x64c80001], ch; hlt; call qword ptr [rbp]; 
0x00000000001a4bc1: add byte ptr [rax], al; add byte ptr [rdx + rbp*2], bl; add dword ptr [rax], eax; fsub dword ptr [rbx - 0xc]; jmp qword ptr [rcx]; 
0x000000000019cc49: add byte ptr [rax], al; add byte ptr [rdx + rbp*8 - 0x25a00000], ah; out dx, al; jmp rdx; 
0x000000000019cc19: add byte ptr [rax], al; add byte ptr [rdx + rbp*8], dh; add byte ptr [rax], al; ret 0xffee; 
0x000000000019cbb9: add byte ptr [rax], al; add byte ptr [rdx + rbp*8], dl; add byte ptr [rax], al; mov al, 0xbf; out dx, al; jmp qword ptr [rax]; 
0x00000000001a7c31: add byte ptr [rax], al; add byte ptr [rdx + rbx*4 + 0x2ef80001], cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7c49: add byte ptr [rax], al; add byte ptr [rdx + rbx*4 + 0x2f100001], ah; cmc; jmp qword ptr [rcx]; 
0x00000000001a7c01: add byte ptr [rax], al; add byte ptr [rdx + rbx*4 + 1], bl; add al, cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7c19: add byte ptr [rax], al; add byte ptr [rdx + rbx*4 + 1], dh; add al, ah; cmc; jmp qword ptr [rcx]; 
0x00000000001a7bb9: add byte ptr [rax], al; add byte ptr [rdx + rbx*4], dl; add dword ptr [rax], eax; sub byte ptr [rsi], 0xf5; jmp qword ptr [rcx]; 
0x00000000001aac21: add byte ptr [rax], al; add byte ptr [rdx + rcx*8 + 1], bh; add byte ptr [rax], ch; cmpsd dword ptr [rsi], dword ptr [rdi]; sti; jmp qword ptr [rsi]; 
0x00000000001aabf9: add byte ptr [rax], al; add byte ptr [rdx + rcx*8 + 1], dl; add byte ptr [rax - 0x29], al; cmc; jmp qword ptr [rax + 1]; 
0x00000000001aac59: add byte ptr [rax], al; add byte ptr [rdx + rcx*8 - 0x271fffff], dh; cmc; call qword ptr [rax + 2]; 
0x00000000001a1c09: add byte ptr [rax], al; add byte ptr [rdx + rdi + 1], ah; add al, al; in al, dx; int1; jmp qword ptr [rcx]; 
0x00000000001a1c21: add byte ptr [rax], al; add byte ptr [rdx + rdi + 1], bh; add al, bl; in al, dx; int1; call qword ptr [rbx]; 
0x00000000001a1c61: add byte ptr [rax], al; add byte ptr [rdx + rdi - 0x1277ffff], bh; int1; call qword ptr [rsi]; 
0x00000000001a5c31: add byte ptr [rax], al; add byte ptr [rdx + rdi*2 - 0x4c17ffff], cl; hlt; jmp qword ptr [rcx]; 
0x000000000019dc09: add byte ptr [rax], al; add byte ptr [rdx + rdi*8], ah; add byte ptr [rax - 0x80], dh; cld; jmp qword ptr [rax]; 
0x0000000000197461: add byte ptr [rax], al; add byte ptr [rdx + rdx*4 - 0x45580000], bh; in eax, dx; jmp qword ptr [rdi]; 
0x00000000001a73b9: add byte ptr [rax], al; add byte ptr [rdx + rdx*4], dl; add dword ptr [rax], eax; and byte ptr [rsi], cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a9429: add byte ptr [rax], al; add byte ptr [rdx + rsi*4 + 0x69e00001], al; cmc; call rcx; 
0x000000000008ca6d: add byte ptr [rax], al; add byte ptr [rdx - 1], bh; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x00000000001ab6b9: add byte ptr [rax], al; add byte ptr [rdx*8 - 0x179fffff], dl; cmc; call qword ptr [rax]; 
0x00000000001ab6d1: add byte ptr [rax], al; add byte ptr [rdx*8 - 0x17a7ffff], ch; cmc; call qword ptr [rbx]; 
0x00000000001a03e1: add byte ptr [rax], al; add byte ptr [rdx], bh; add dword ptr [rax], eax; sub bh, al; int1; jmp qword ptr [rbp]; 
0x000000000000583d: add byte ptr [rax], al; add byte ptr [rdx], ch; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4c; 
0x0000000000010715: add byte ptr [rax], al; add byte ptr [rdx], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x19; 
0x00000000000107a5: add byte ptr [rax], al; add byte ptr [rdx], dl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000003648d: add byte ptr [rax], al; add byte ptr [rip - 0x80000000], ah; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x00000000001ac841: add byte ptr [rax], al; add byte ptr [rsi + 0x2880001], bl; idiv bh; ret 3; 
0x0000000000123ba5: add byte ptr [rax], al; add byte ptr [rsi + 0x41], ah; mov dword ptr [rax + 0x6c], eax; mov eax, 1; ret; 
0x00000000000f0a82: add byte ptr [rax], al; add byte ptr [rsi + 0x5409], bh; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000f0a3e: add byte ptr [rax], al; add byte ptr [rsi + 0x5409], bh; movsxd rdi, edi; mov eax, 0x10; syscall; 
0x0000000000108085: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000001a4849: add byte ptr [rax], al; add byte ptr [rsi + 0x9300001], ah; hlt; jmp rdx; 
0x000000000015ff82: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000006ac32: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x000000000008bce2: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000096eaf: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ror dword ptr [rdi], -0x43; ror byte ptr [rax + 1], 0xf8; ret; 
0x00000000000f5c6d: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; call rbx; 
0x00000000000f5e5a: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r12; call rbx; 
0x00000000000f5d26: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r13; call rbx; 
0x00000000000f5c9e: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r14; call rbx; 
0x00000000001ac7f1: add byte ptr [rax], al; add byte ptr [rsi + 1], cl; add al, ch; add dh, dh; jmp qword ptr [rbx + 1]; 
0x000000000011fed4: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x48], 0; mov rdi, r13; call qword ptr [rax]; 
0x00000000000f60d8: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r12; call rbx; 
0x00000000000f5e4b: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r13; call rbx; 
0x00000000000f5d17: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r14; call rbx; 
0x00000000000f5c8f: add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x0000000000004b05: add byte ptr [rax], al; add byte ptr [rsi + 5], ch; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x26; 
0x0000000000036fed: add byte ptr [rax], al; add byte ptr [rsi + 8], bh; mov eax, 0x82; syscall; 
0x0000000000125f97: add byte ptr [rax], al; add byte ptr [rsi + 8], bh; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x00000000001aa809: add byte ptr [rax], al; add byte ptr [rsi + rax*8 + 1], ah; add byte ptr [rax - 0x3d], al; clc; jmp qword ptr [rsi]; 
0x00000000001aa821: add byte ptr [rax], al; add byte ptr [rsi + rax*8 + 1], bh; add byte ptr [rax], bl; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa7f1: add byte ptr [rax], al; add byte ptr [rsi + rax*8 + 1], cl; add byte ptr [rax], bl; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa851: add byte ptr [rax], al; add byte ptr [rsi + rax*8 - 0x29b7ffff], ch; cmc; jmp qword ptr [rsi]; 
0x00000000001aa7c1: add byte ptr [rax], al; add byte ptr [rsi + rax*8], bl; add dword ptr [rax], eax; sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a5029: add byte ptr [rax], al; add byte ptr [rsi + rbp*2 + 0x6e600001], al; hlt; jmp qword ptr [rcx]; 
0x00000000001a5041: add byte ptr [rax], al; add byte ptr [rsi + rbp*2 + 0x6e780001], bl; hlt; jmp qword ptr [rcx]; 
0x00000000001a4fa9: add byte ptr [rax], al; add byte ptr [rsi + rbp*2], al; add dword ptr [rax], eax; adc byte ptr [rbp - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001a8fd1: add byte ptr [rax], al; add byte ptr [rsi + rbp*4], ch; add dword ptr [rax], eax; sbb byte ptr [rbx - 0xb], ah; jmp qword ptr [rcx]; 
0x000000000019cfc9: add byte ptr [rax], al; add byte ptr [rsi + rbp*8], ah; add byte ptr [rax], al; xor dh, dh; out dx, al; call qword ptr [rdx + 4]; 
0x00000000001a8021: add byte ptr [rax], al; add byte ptr [rsi + rbx*4 + 1], bh; add byte ptr [rax + 0x35], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7ff1: add byte ptr [rax], al; add byte ptr [rsi + rbx*4 + 1], cl; add al, bh; xor al, 0xf5; jmp qword ptr [rax]; 
0x000000000019eff1: add byte ptr [rax], al; add byte ptr [rsi + rcx + 1], cl; add al, bh; fcompi st(0); jmp rax; 
0x00000000001a2031: add byte ptr [rax], al; add byte ptr [rsi + rdi - 0x2e7ffff], cl; int1; jmp qword ptr [rcx]; 
0x00000000001a6051: add byte ptr [rax], al; add byte ptr [rsi + rdi*2 - 0x4197ffff], ch; hlt; jmp qword ptr [rcx]; 
0x00000000001aa019: add byte ptr [rax], al; add byte ptr [rsi + rdi*4 + 1], dh; add byte ptr [rax - 0x7b], al; cmc; call qword ptr [rsi + 6]; 
0x0000000000192009: add byte ptr [rax], al; add byte ptr [rsi + rdi], ah; add byte ptr [rax], dh; mov al, 0xea; jmp qword ptr [rax]; 
0x0000000000192021: add byte ptr [rax], al; add byte ptr [rsi + rdi], bh; add byte ptr [rax], bh; mov al, 0xea; jmp qword ptr [rdx]; 
0x0000000000191ff1: add byte ptr [rax], al; add byte ptr [rsi + rdi], cl; add byte ptr [rax], bl; mov al, 0xea; jmp qword ptr [rbx]; 
0x00000000001a7839: add byte ptr [rax], al; add byte ptr [rsi + rdx*4 + 0x2a400001], dl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7821: add byte ptr [rax], al; add byte ptr [rsi + rdx*4 + 1], bh; add byte ptr [rax], ch; sub dh, ch; jmp qword ptr [rcx]; 
0x0000000000197821: add byte ptr [rax], al; add byte ptr [rsi + rdx*4], bh; add byte ptr [rax - 0x40], ch; in eax, dx; jmp qword ptr [rbp]; 
0x00000000001a0861: add byte ptr [rax], al; add byte ptr [rsi - 0x35d7ffff], bh; int1; call qword ptr [rbx]; 
0x00000000001a0849: add byte ptr [rax], al; add byte ptr [rsi - 0x35dfffff], ah; int1; call qword ptr [rbx]; 
0x00000000001a0831: add byte ptr [rax], al; add byte ptr [rsi - 0x35e7ffff], cl; int1; call qword ptr [rsi]; 
0x000000000003607b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; andpd xmm0, xmmword ptr [rip + 0x14f858]; andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x00000000000faf1b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x11f; syscall; 
0x00000000000fbe3b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x1e; syscall; 
0x00000000000fb57b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x30; syscall; 
0x00000000000fb23b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x32; syscall; 
0x00000000000eb44b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x53; syscall; 
0x00000000000374bb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x83; syscall; 
0x00000000000f49eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x95; syscall; 
0x00000000000fa78b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x9e; syscall; 
0x00000000000fa82b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x9f; syscall; 
0x00000000000fabeb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xb4; syscall; 
0x00000000000f489b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xb; syscall; 
0x00000000000f80eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc2; syscall; 
0x00000000000f814b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc3; syscall; 
0x00000000000f802b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc4; syscall; 
0x00000000000f81db: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc5; syscall; 
0x00000000000faa9b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xfe; syscall; 
0x00000000000bd33b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi]; ret; 
0x00000000000735eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x0000000000037b9b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rip + 0x3864fa]; ret; 
0x00000000000fb06b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000000fabbb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000000facab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000000facdb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb3; syscall; 
0x0000000000132d0b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb5; syscall; 
0x0000000000132d5b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb6; syscall; 
0x00000000000f80bb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000000fbe0b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xdc; syscall; 
0x0000000000132dab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x28b0b1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d8b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x28b0d1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d3b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x28b121]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fb09b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x2c2dc1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000003783b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x386621]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000036c9b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; nop; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000001584fd: add byte ptr [rax], al; add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000133e44: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; add eax, 0x28fbb2; mov eax, 1; add rsp, 8; ret; 
0x0000000000036831: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000036811: add byte ptr [rax], al; add byte ptr [rsi - 0x77], ah; and al, 0xf0; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000194849: add byte ptr [rax], al; add byte ptr [rsi - 0x79600000], ah; in eax, dx; call qword ptr [rbx + 1]; 
0x0000000000076015: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x00000000000750b4: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x0000000000079593: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000007b234: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000000e44ad: add byte ptr [rax], al; add byte ptr [rsi - 9], ah; mov byte ptr [rax + 0x16b8ff], 0; add byte ptr [rsp + rax - 0xd], dh; ret; 
0x000000000018faee: add byte ptr [rax], al; add byte ptr [rsi], 0xea; call qword ptr [rcx]; 
0x00000000001907c9: add byte ptr [rax], al; add byte ptr [rsi], ah; add byte ptr [rax], al; adc byte ptr [rbx - 0x16], ah; call qword ptr [rax]; 
0x00000000001a87c9: add byte ptr [rax], al; add byte ptr [rsi], ah; add dword ptr [rax], eax; and byte ptr [rdi - 0xb], dl; call qword ptr [rdx]; 
0x0000000000017f25: add byte ptr [rax], al; add byte ptr [rsi], cl; ret; 
0x00000000000e44b7: add byte ptr [rax], al; add byte ptr [rsp + rax - 0xd], dh; ret; 
0x00000000001b65e9: add byte ptr [rax], al; add byte ptr [rsp + rax*4 + 2], al; add byte ptr [rax], dl; push rdi; call qword ptr [rcx]; 
0x00000000001aa659: add byte ptr [rax], al; add byte ptr [rsp + rax*8 - 0x2a8fffff], dh; cmc; jmp qword ptr [rsi]; 
0x00000000001aa641: add byte ptr [rax], al; add byte ptr [rsp + rax*8 - 0x2aa7ffff], bl; cmc; jmp qword ptr [rsi]; 
0x00000000001aa629: add byte ptr [rax], al; add byte ptr [rsp + rax*8 - 0x2abfffff], al; cmc; jmp qword ptr [rsi]; 
0x0000000000198e31: add byte ptr [rax], al; add byte ptr [rsp + rbp*4 - 0xa080000], cl; in eax, dx; jmp qword ptr [rbx]; 
0x0000000000198e11: add byte ptr [rax], al; add byte ptr [rsp + rbp*4], ch; add byte ptr [rax - 0xb], ch; in eax, dx; jmp qword ptr [rcx]; 
0x000000000001b195: add byte ptr [rax], al; add byte ptr [rsp + rbx*2 + 0x18], bh; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], cl; ret; 
0x000000000001b135: add byte ptr [rax], al; add byte ptr [rsp + rbx*2 + 0x18], bl; add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; ret 0x3b; 
0x000000000001b14d: add byte ptr [rax], al; add byte ptr [rsp + rbx*2 + 0x18], ch; add byte ptr [rax], al; add byte ptr [rax], al; add al, dh; ret 0x3b; 
0x000000000001b11d: add byte ptr [rax], al; add byte ptr [rsp + rbx*2 + 0x18], cl; add byte ptr [rax], al; add byte ptr [rax], al; add al, ah; ret 0x3b; 
0x00000000001a7e41: add byte ptr [rax], al; add byte ptr [rsp + rbx*4 + 0x31c80001], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7de1: add byte ptr [rax], al; add byte ptr [rsp + rbx*4], bh; add dword ptr [rax], eax; cmp byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001a7db1: add byte ptr [rax], al; add byte ptr [rsp + rbx*4], cl; add dword ptr [rax], eax; or byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x000000000019bdc1: add byte ptr [rax], al; add byte ptr [rsp + rbx*8], bl; add byte ptr [rax], al; cmp byte ptr [rax - 0x12], dh; call qword ptr [rsi]; 
0x0000000000192dc1: add byte ptr [rax], al; add byte ptr [rsp + rcx*2], bl; add byte ptr [rax], al; or byte ptr [rdx - 0x15], bl; jmp qword ptr [rsi]; 
0x00000000001aae29: add byte ptr [rax], al; add byte ptr [rsp + rcx*8 - 0x1f3fffff], al; cmc; call qword ptr [rax]; 
0x00000000001a1df9: add byte ptr [rax], al; add byte ptr [rsp + rdi + 1], dl; add al, ah; int1; jmp qword ptr [rdx]; 
0x00000000001a5e01: add byte ptr [rax], al; add byte ptr [rsp + rdi*2 + 1], bl; add byte ptr [rax - 0x47], cl; hlt; call rdi; 
0x00000000001a5e51: add byte ptr [rax], al; add byte ptr [rsp + rdi*2 - 0x4627ffff], ch; hlt; jmp qword ptr [rsi]; 
0x000000000019de01: add byte ptr [rax], al; add byte ptr [rsp + rdi*8], bl; add byte ptr [rax], bl; pushfq; out dx, eax; jmp rdi; 
0x00000000001a1de1: add byte ptr [rax], al; add byte ptr [rsp + rdi], bh; add dword ptr [rax], eax; cwde; int1; call qword ptr [rbp]; 
0x000000000019d5f9: add byte ptr [rax], al; add byte ptr [rsp + rsi*8], dl; add al, al; out dx, eax; jmp qword ptr [rcx]; 
0x00000000001ac5a9: add byte ptr [rax], al; add byte ptr [rsp], al; add dword ptr [rax], eax; add ch, bh; cmc; jmp rsp; 
0x00000000001945f1: add byte ptr [rax], al; add byte ptr [rsp], cl; add byte ptr [rax], bl; movsb byte ptr [rdi], byte ptr [rsi]; in al, dx; call rdx; 
0x00000000001a975e: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rbp + rsi*4 + 0x6ed80001], bh; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001a8cce: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rbx + rbp*4], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xb], bl; jmp qword ptr [rdi + 1]; 
0x00000000001aa15e: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rdi + rdi*4 - 0x7127ffff], bh; cmc; jmp qword ptr [rbx + 2]; 
0x00000000001b6436: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rdx + rax*4 - 0xdeffffe], dl; cli; call rcx; 
0x00000000001ac83e: add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rsi + 0x2880001], bl; idiv bh; ret 3; 
0x000000000019d18e: add byte ptr [rax], al; add cl, bl; stc; call qword ptr [rax]; 
0x0000000000102083: add byte ptr [rax], al; add cl, byte ptr [rax - 0x75]; push rsp; and al, 0x18; mov rsi, qword ptr [rsp + 8]; call rax; 
0x00000000000d96fb: add byte ptr [rax], al; add cl, ch; cdq; idiv bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000045872: add byte ptr [rax], al; add cl, ch; cmp eax, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000002201e: add byte ptr [rax], al; add cl, ch; ficom dword ptr [rsi + 0x2e66000c]; nop dword ptr [rax + rax]; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x00000000000446ae: add byte ptr [rax], al; add cl, ch; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000002e5e4: add byte ptr [rax], al; add cl, ch; mov ebp, 0x4cfffffc; mov edi, esi; mov ax, 3; syscall; 
0x0000000000136a4d: add byte ptr [rax], al; add cl, ch; or esi, dword ptr [rbx - 5]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000058a39: add byte ptr [rax], al; add cl, ch; push rdi; ret 0xffff; 
0x0000000000060a8d: add byte ptr [rax], al; add cl, ch; ret 0xffec; 
0x00000000000b7e9f: add byte ptr [rax], al; add cl, ch; ret 0xfff3; 
0x000000000010386d: add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x000000000002c342: add byte ptr [rax], al; add cl, ch; ret; 
0x00000000000529ae: add byte ptr [rax], al; add cl, ch; sar ecx, -1; jmp qword ptr [rsi + 0x2e]; 
0x00000000000ab24e: add byte ptr [rax], al; add cl, ch; sti; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000003f9f7: add byte ptr [rax], al; add cl, ch; xor dl, 0xff; dec dword ptr [rax + 0x63]; ret 0x3ce9; 
0x0000000000096bbd: add byte ptr [rax], al; add dh, al; add dword ptr [rax], eax; mov rcx, rdi; mov qword ptr [rdx], rcx; ret; 
0x00000000000d0b8d: add byte ptr [rax], al; add dh, al; or byte ptr [r8 + r15*4], r11b; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000d0b1d: add byte ptr [rax], al; add dh, al; or byte ptr [r9], r11b; mov eax, 1; ret; 
0x00000000001356b0: add byte ptr [rax], al; add dh, dh; ret 0x7402; 
0x000000000006e25d: add byte ptr [rax], al; add dh, dh; ret 0x7420; 
0x00000000001635d1: add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x0000000000072ea4: add byte ptr [rax], al; add dh, dh; ret 0x7508; 
0x00000000000eb67d: add byte ptr [rax], al; add dh, dh; ret 0x7540; 
0x00000000000df84f: add byte ptr [rax], al; add dh, dh; ret 0xf10; 
0x0000000000098360: add byte ptr [rax], al; add dh, dh; ret 0xf20; 
0x0000000000098369: add byte ptr [rax], al; add dh, dh; ret 0xf40; 
0x0000000000081de4: add byte ptr [rax], al; add dh, dh; ret; 
0x0000000000001585: add byte ptr [rax], al; add dl, al; add eax, 0; add byte ptr [rax], al; ret; 
0x000000000003d052: add byte ptr [rax], al; add dl, dh; movups xmm0, xmmword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011f56a: add byte ptr [rax], al; add dword ptr [rax - 0x77], ecx; out dx, eax; mov edx, dword ptr [rbx + 0x22c0]; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000f3de: add byte ptr [rax], al; add dword ptr [rax], 0; add byte ptr [rax], al; ret 0x34; 
0x000000000012b537: add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000012b4bd: add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x00000000001215c0: add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000012e60e: add byte ptr [rax], al; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000012e5ce: add byte ptr [rax], al; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x00000000000d0c94: add byte ptr [rax], al; add dword ptr [rdi], ecx; lahf; ret 0x82eb; 
0x00000000000d4eb4: add byte ptr [rax], al; add dword ptr [rdi], ecx; lahf; ret 0xee9; 
0x000000000019d26f: add byte ptr [rax], al; add esp, dword ptr [rcx + rax - 0x72bafc72]; add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x00000000000a2ebe: add byte ptr [rax], al; add rax, 3; ret; 
0x000000000008bb94: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x0000000000124601: add byte ptr [rax], al; add rdi, 0x10; jmp rcx; 
0x0000000000136312: add byte ptr [rax], al; add rdi, 0x1c; mov al, 0xca; mov esi, 0x81; syscall; 
0x0000000000127ed1: add byte ptr [rax], al; add rdi, 0x58; jmp rcx; 
0x0000000000127621: add byte ptr [rax], al; add rdi, 0x68; jmp rcx; 
0x0000000000123a44: add byte ptr [rax], al; add rdi, 0xc8; jmp rcx; 
0x0000000000126642: add byte ptr [rax], al; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000005d5be: add byte ptr [rax], al; add rsp, 0x1000; xor eax, eax; pop rbx; ret; 
0x000000000003719a: add byte ptr [rax], al; add rsp, 0x108; ret; 
0x00000000000f214c: add byte ptr [rax], al; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000003471e: add byte ptr [rax], al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bca4e: add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x00000000000bca76: add byte ptr [rax], al; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x0000000000036bd8: add byte ptr [rax], al; add rsp, 0x148; ret; 
0x000000000011210c: add byte ptr [rax], al; add rsp, 0x18; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000012d444: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000e44fe: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000ebdb4: add byte ptr [rax], al; add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000fba30: add byte ptr [rax], al; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x00000000000710b6: add byte ptr [rax], al; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000003699a: add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x00000000000fa5c7: add byte ptr [rax], al; add rsp, 0x28; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000000fb2fb: add byte ptr [rax], al; add rsp, 0x28; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000010c4bb: add byte ptr [rax], al; add rsp, 0x28; ret; 
0x000000000005d219: add byte ptr [rax], al; add rsp, 0x400; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f0cdc: add byte ptr [rax], al; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x00000000000ebb99: add byte ptr [rax], al; add rsp, 0x70; pop rbx; ret; 
0x0000000000132eb2: add byte ptr [rax], al; add rsp, 0x88; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000006d849: add byte ptr [rax], al; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000036e90: add byte ptr [rax], al; add rsp, 0xd0; ret; 
0x00000000000475a1: add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x000000000008ab0a: add byte ptr [rax], al; add rsp, 8; jmp rax; 
0x000000000011f3de: add byte ptr [rax], al; add rsp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x0000000000133605: add byte ptr [rax], al; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000106076: add byte ptr [rax], al; add rsp, 8; mov eax, 7; pop rbx; pop rbp; ret; 
0x000000000006ea3f: add byte ptr [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000006e055: add byte ptr [rax], al; add rsp, 8; mov eax, esi; pop rbx; pop rbp; ret; 
0x00000000000c6186: add byte ptr [rax], al; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000092091: add byte ptr [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000826fe: add byte ptr [rax], al; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000003c353: add byte ptr [rax], al; add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x0000000000023837: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000036392: add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000088746: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000000733e: add byte ptr [rax], al; and al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001aa93e: add byte ptr [rax], al; and al, 0; add byte ptr [rax], al; pushfq; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rdi]; 
0x000000000019f8ca: add byte ptr [rax], al; and al, 0x17; add dword ptr [rax], eax; nop; cld; jmp qword ptr [rbx]; 
0x00000000001907ca: add byte ptr [rax], al; and al, 0x26; add byte ptr [rax], al; adc byte ptr [rbx - 0x16], ah; call qword ptr [rax]; 
0x00000000001a68ca: add byte ptr [rax], al; and al, 0x87; add dword ptr [rax], eax; jo 0x1a68ae; hlt; call qword ptr [rax]; 
0x00000000001a87ca: add byte ptr [rax], al; and al, 0xa6; add dword ptr [rax], eax; and byte ptr [rdi - 0xb], dl; call qword ptr [rdx]; 
0x0000000000189236: add byte ptr [rax], al; and al, 0xbe; out dx, al; push qword ptr [rbp + rdi*8 - 0x416c0000]; out dx, al; jmp rsp; 
0x000000000019a4ca: add byte ptr [rax], al; and al, 0xc3; add byte ptr [rax], al; jo 0x19a4fd; out dx, al; call qword ptr [rdx]; 
0x00000000001aa8ca: add byte ptr [rax], al; and al, 0xc7; add dword ptr [rax], eax; rcl dh, 0xf5; jmp qword ptr [rsi]; 
0x000000000019cfca: add byte ptr [rax], al; and al, 0xee; add byte ptr [rax], al; xor dh, dh; out dx, al; call qword ptr [rdx + 4]; 
0x000000000019e4ca: add byte ptr [rax], al; and al, 3; add dword ptr [rax], eax; or byte ptr [rdx - 0x10], 0xff; ret; 
0x000000000000452a: add byte ptr [rax], al; and al, byte ptr [rax]; or al, 0; push rax; ret 0xb; 
0x00000000001b8912: add byte ptr [rax], al; and al, byte ptr [rdi]; add byte ptr [rax], al; jp 0x1b891c; add byte ptr [rax], al; ret 6; 
0x000000000019a09f: add byte ptr [rax], al; and dh, ch; jmp qword ptr [rcx + 1]; 
0x000000000000a12e: add byte ptr [rax], al; and dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x15; 
0x00000000000098a6: add byte ptr [rax], al; and dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x47; 
0x000000000003672c: add byte ptr [rax], al; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x000000000003648e: add byte ptr [rax], al; and eax, 0x80000000; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x00000000001609c1: add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000fa4df: add byte ptr [rax], al; and eax, 0xfffff000; or eax, edi; ret; 
0x000000000003010b: add byte ptr [rax], al; and eax, esi; ret; 
0x000000000003cd44: add byte ptr [rax], al; and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x0000000000161293: add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x00000000001609c6: add byte ptr [rax], al; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000008bdce: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000008bdde: add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000008bdee: add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x000000000009395e: add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x0000000000088c17: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000000883ae: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000096f6e: add byte ptr [rax], al; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x0000000000096f7e: add byte ptr [rax], al; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x0000000000096f8e: add byte ptr [rax], al; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x30]; ret; 
0x000000000008a704: add byte ptr [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x000000000008a792: add byte ptr [rax], al; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x0000000000123bec: add byte ptr [rax], al; bswap eax; mov eax, eax; mov qword ptr [r8], rax; mov eax, 1; ret; 
0x0000000000128038: add byte ptr [rax], al; bswap edx; mov dword ptr [rax + 0x10], edx; mov eax, 1; ret; 
0x0000000000127f18: add byte ptr [rax], al; bswap edx; mov dword ptr [rax + 0xc], edx; mov eax, 1; ret; 
0x0000000000123d40: add byte ptr [rax], al; bswap r14d; call qword ptr [rax + 0x18]; 
0x00000000001162d5: add byte ptr [rax], al; call 0x114d00; add rsp, 0x18; ret; 
0x0000000000115f2c: add byte ptr [rax], al; call 0x1154d0; add rsp, 0x18; ret; 
0x0000000000116859: add byte ptr [rax], al; call 0x1162f0; add rsp, 0x18; ret; 
0x000000000012e9a6: add byte ptr [rax], al; call 0x12ac60; mov dword ptr [rax], 0; pop rbx; ret; 
0x0000000000121643: add byte ptr [rax], al; call 0x12e3c0; lea rax, qword ptr [rbx + 0x2260]; pop rbx; ret; 
0x00000000001364e1: add byte ptr [rax], al; call 0x135f80; add rsp, 0x28; ret; 
0x0000000000112027: add byte ptr [rax], al; call 0x1f490; mov qword ptr [rip + 0x2ad9b3], rax; add rsp, 8; ret; 
0x00000000000e3a43: add byte ptr [rax], al; call 0x1f4f0; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x00000000000eaf23: add byte ptr [rax], al; call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0x3c; syscall; 
0x00000000000b1403: add byte ptr [rax], al; call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x0000000000037f74: add byte ptr [rax], al; call 0x36ed0; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000f70c6: add byte ptr [rax], al; call 0x780e0; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x00000000000833ad: add byte ptr [rax], al; call 0x7d680; mov rsi, qword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x00000000000487ea: add byte ptr [rax], al; call 0xa4090; add rsp, 0x28; ret; 
0x00000000000488ba: add byte ptr [rax], al; call 0xa40c0; add rsp, 0x28; ret; 
0x00000000000cb1d4: add byte ptr [rax], al; call 0xc9d70; add rsp, 0x18; ret; 
0x00000000000cb16c: add byte ptr [rax], al; call 0xcb0b0; add rsp, 0x18; ret; 
0x00000000000e44f9: add byte ptr [rax], al; call 0xe4530; add rsp, 0x18; ret; 
0x00000000000eafe7: add byte ptr [rax], al; call 0xeb120; add rsp, 0x18; ret; 
0x00000000000eb019: add byte ptr [rax], al; call 0xeb180; add rsp, 0x18; ret; 
0x00000000000f0a22: add byte ptr [rax], al; call 0xf11e0; add rsp, 0x18; ret; 
0x00000000000f974f: add byte ptr [rax], al; call 0xf9a60; lea rax, qword ptr [rip + 0x2c8093]; add rsp, 8; ret; 
0x000000000019c9ea: add byte ptr [rax], al; call 0xffffffffba09c9f2; out dx, al; call qword ptr [rax]; 
0x000000000012b1b5: add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000012b1b5: add byte ptr [rax], al; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x00000000000797c7: add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x00000000000797c7: add byte ptr [rax], al; call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000011f4cc: add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x000000000007a322: add byte ptr [rax], al; call qword ptr [rax + 0x48]; 
0x000000000007369e: add byte ptr [rax], al; call qword ptr [rax + 0x60]; 
0x0000000000074e55: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x000000000013593a: add byte ptr [rax], al; call qword ptr [rax + 0xf08]; 
0x0000000000135d3d: add byte ptr [rax], al; call qword ptr [rax + 0xf0]; mov qword ptr [rbx + 0x10], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000011f960: add byte ptr [rax], al; call qword ptr [rax]; 
0x000000000003c822: add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000016e2c2: add byte ptr [rax], al; call qword ptr [rcx]; 
0x0000000000021f65: add byte ptr [rax], al; call rax; 
0x000000000007ab47: add byte ptr [rax], al; call rax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000011ee20: add byte ptr [rax], al; call rax; add rsp, 0x30; lea rax, qword ptr [rip + 0x2a4871]; pop rbx; ret; 
0x00000000000bdfd5: add byte ptr [rax], al; call rax; add rsp, 0x38; ret; 
0x00000000000f5c73: add byte ptr [rax], al; call rbx; 
0x0000000000170e2e: add byte ptr [rax], al; call rdi; 
0x0000000000031e1f: add byte ptr [rax], al; call rdx; 
0x000000000016ffde: add byte ptr [rax], al; call rsp; 
0x000000000001e20e: add byte ptr [rax], al; cdq; ret 0x17; 
0x000000000019d9f2: add byte ptr [rax], al; clc; add byte ptr [rax], al; fdivr dword ptr [rdi - 0x11]; jmp qword ptr [rcx + 0xd]; 
0x0000000000198e36: add byte ptr [rax], al; clc; cmc; in eax, dx; jmp qword ptr [rbx]; 
0x000000000019ba76: add byte ptr [rax], al; clc; out dx, al; call rsp; 
0x000000000001b16e: add byte ptr [rax], al; clc; ret 0x3b; 
0x0000000000199f36: add byte ptr [rax], al; clc; sbb ebp, esi; jmp qword ptr [rbx]; 
0x000000000019a456: add byte ptr [rax], al; clc; sub ch, dh; call qword ptr [rsi]; 
0x0000000000199ba2: add byte ptr [rax], al; cld; mov ecx, 0xb5180000; cld; jmp qword ptr [rcx]; 
0x00000000001a50a2: add byte ptr [rax], al; cld; outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; or byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001ab4a2: add byte ptr [rax], al; cld; rol byte ptr [rcx], cl; add al, bl; in eax, 0xf5; call qword ptr [rax]; 
0x00000000001a0aa2: add byte ptr [rax], al; cld; sub byte ptr [rcx], al; add byte ptr [rax - 0x33], ch; int1; jmp qword ptr [rax]; 
0x000000000019b9a2: add byte ptr [rax], al; cld; xlatb; add byte ptr [rax], al; xor rbp, rsi; call qword ptr [rsi]; 
0x000000000019dc0a: add byte ptr [rax], al; cli; add byte ptr [rax], al; jo 0x19db92; cld; jmp qword ptr [rax]; 
0x000000000019d03e: add byte ptr [rax], al; cli; out dx, al; call qword ptr [rcx]; 
0x000000000010adae: add byte ptr [rax], al; cmove eax, edx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001147bf: add byte ptr [rax], al; cmove eax, edx; ret; 
0x0000000000135173: add byte ptr [rax], al; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000079952: add byte ptr [rax], al; cmovg rax, rdx; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x00000000001296b7: add byte ptr [rax], al; cmovne eax, edx; sub rsp, -0x80; pop rbx; ret; 
0x00000000001a0b5e: add byte ptr [rax], al; cmp al, 0; add byte ptr [rax], al; mov esp, 0x38000129; sal ecx, cl; call rsi; 
0x000000000019d25e: add byte ptr [rax], al; cmp al, 0; add byte ptr [rax], al; mov esp, 0x80000f0; out dx, eax; jmp qword ptr [rbp + 4]; 
0x00000000001a9426: add byte ptr [rax], al; cmp al, 0; add byte ptr [rax], al; test byte ptr [rdx + 0x69e00001], dh; cmc; call rcx; 
0x000000000018fee2: add byte ptr [rax], al; cmp al, 0x1d; add byte ptr [rax], al; pop rax; and dl, ch; call qword ptr [rsi]; 
0x00000000001a03e2: add byte ptr [rax], al; cmp al, 0x22; add dword ptr [rax], eax; sub bh, al; int1; jmp qword ptr [rbp]; 
0x00000000001906e2: add byte ptr [rax], al; cmp al, 0x25; add byte ptr [rax], al; sub byte ptr [rdx - 0x16], ah; call qword ptr [rdx]; 
0x00000000001a1de2: add byte ptr [rax], al; cmp al, 0x3c; add dword ptr [rax], eax; cwde; int1; call qword ptr [rbp]; 
0x00000000001a51e2: add byte ptr [rax], al; cmp al, 0x70; add dword ptr [rax], eax; mov byte ptr [rcx + rdi*8], dl; call qword ptr [rax]; 
0x00000000001a6ae2: add byte ptr [rax], al; cmp al, 0x89; add dword ptr [rax], eax; or al, ah; hlt; jmp rsp; 
0x00000000001a7de2: add byte ptr [rax], al; cmp al, 0x9c; add dword ptr [rax], eax; cmp byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001aa8e2: add byte ptr [rax], al; cmp al, 0xc7; add dword ptr [rax], eax; fcom st(6); cmc; jmp qword ptr [rsi]; 
0x000000000019cd26: add byte ptr [rax], al; cmp al, ah; out dx, al; call qword ptr [rdi]; 
0x00000000001a1c0a: add byte ptr [rax], al; cmp al, byte ptr fs:[rcx]; add al, al; in al, dx; int1; jmp qword ptr [rcx]; 
0x000000000019e10e: add byte ptr [rax], al; cmp bh, 0xef; jmp qword ptr [rdi + 6]; 
0x000000000019d12e: add byte ptr [rax], al; cmp bl, 0xee; call qword ptr [rax]; 
0x000000000011ad4a: add byte ptr [rax], al; cmp byte ptr [rax + 0xffffff], 0xf; shr r9b, 1; ret 0xfffe; 
0x000000000019bdc6: add byte ptr [rax], al; cmp byte ptr [rax - 0x12], dh; call qword ptr [rsi]; 
0x000000000015e436: add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000192b4e: add byte ptr [rax], al; cmp byte ptr [rdx], 0xfa; jmp qword ptr [rcx]; 
0x00000000000c2442: add byte ptr [rax], al; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000b006e: add byte ptr [rax], al; cmp ecx, eax; setg al; movzx eax, al; lea eax, dword ptr [rax + rax - 1]; ret; 
0x00000000001a824f: add byte ptr [rax], al; cmp esi, ebp; jmp qword ptr [rcx]; 
0x000000000001b04e: add byte ptr [rax], al; cwde; ret 0x3b; 
0x000000000001b34e: add byte ptr [rax], al; cwde; ret; 
0x0000000000194e86: add byte ptr [rax], al; cwde; xchg eax, ebp; in eax, dx; jmp qword ptr [rax]; 
0x000000000019e882: add byte ptr [rax], al; fadd qword ptr [rsi]; add dword ptr [rax], eax; sub byte ptr [rbx - 0x10], bl; jmp rsi; 
0x000000000019a382: add byte ptr [rax], al; fadd st(1), st(0); add byte ptr [rax], al; sub byte ptr [rax], ch; out dx, al; call qword ptr [rsi]; 
0x00000000001a7982: add byte ptr [rax], al; fcom qword ptr [rdi + 0x2b680001]; cmc; call qword ptr [rax]; 
0x000000000019f982: add byte ptr [rax], al; fcom qword ptr [rdi]; add dword ptr [rax], eax; pop rax; or esi, ecx; jmp rcx; 
0x00000000001a7a82: add byte ptr [rax], al; fcomp qword ptr [rax + 0x2d380001]; cmc; jmp qword ptr [rcx]; 
0x0000000000197e82: add byte ptr [rax], al; fcomp qword ptr [rax + rax - 0x122a9800]; call rcx; 
0x00000000001a7d82: add byte ptr [rax], al; fcomp qword ptr [rbx + 0x30a80001]; cmc; jmp qword ptr [rcx]; 
0x00000000001a0082: add byte ptr [rax], al; fcomp qword ptr [rsi]; add dword ptr [rax], eax; mov byte ptr [rbx - 0xf], al; call rsi; 
0x00000000001b1582: add byte ptr [rax], al; fdiv qword ptr [rbx]; add al, byte ptr [rax]; div rsi; call qword ptr [rbx]; 
0x0000000000198a06: add byte ptr [rax], al; fdiv st(0); in eax, dx; jmp qword ptr [rdx]; 
0x000000000019d9f6: add byte ptr [rax], al; fdivr dword ptr [rdi - 0x11]; jmp qword ptr [rcx + 0xd]; 
0x00000000001a5c82: add byte ptr [rax], al; fdivr qword ptr [rdx + 1]; add byte ptr [rax], bh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x000000000019d116: add byte ptr [rax], al; fdivr st(4); stc; call qword ptr [rsi + 0x16]; 
0x000000000000a9be: add byte ptr [rax], al; fimul dword ptr [rax + rax]; add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; ret 0xb; 
0x00000000001b6a8a: add byte ptr [rax], al; fld dword ptr [rbx]; add byte ptr [rax], al; ret; 
0x0000000000004526: add byte ptr [rax], al; fmul qword ptr [rax + rax]; add byte ptr [rdx], ah; add byte ptr [rax + rax], cl; push rax; ret 0xb; 
0x00000000001a6a82: add byte ptr [rax], al; fmul qword ptr [rax - 0x2007ffff]; hlt; jmp qword ptr [rcx]; 
0x0000000000187ab6: add byte ptr [rax], al; fnstcw word ptr [rdi - 0x17]; jmp rsp; 
0x000000000003694e: add byte ptr [rax], al; fstp st(1); add rsp, 0x20; pop rbx; ret; 
0x00000000001b4e82: add byte ptr [rax], al; fsubr qword ptr [rdx + rax]; fadd dword ptr [rsi]; sti; jmp qword ptr [rdx]; 
0x000000000019d18f: add byte ptr [rax], al; fyl2xp1; call qword ptr [rax]; 
0x00000000001882c6: add byte ptr [rax], al; hlt; add ch, bl; jmp rsp; 
0x00000000001b639a: add byte ptr [rax], al; hlt; add dword ptr [rdx], 0xf7f85000; call qword ptr [rbx]; 
0x00000000001b079a: add byte ptr [rax], al; hlt; and eax, 0x65300002; clc; jmp qword ptr [rbx]; 
0x000000000019a09a: add byte ptr [rax], al; hlt; mov esi, 0x20000000; out dx, al; jmp qword ptr [rcx + 1]; 
0x000000000019a8aa: add byte ptr [rax], al; hlt; ret 0; 
0x00000000001aa49a: add byte ptr [rax], al; hlt; ret 1; 
0x00000000001aa59a: add byte ptr [rax], al; hlt; ret; 
0x0000000000187dfe: add byte ptr [rax], al; hlt; sub edx, 0x7cacff; add byte ptr [rdx + rax*4 - 0x16], al; call rsp; 
0x00000000001a7d9a: add byte ptr [rax], al; hlt; wait; add dword ptr [rax], eax; sal byte ptr [rax], 0xf5; jmp qword ptr [rax]; 
0x00000000001888ae: add byte ptr [rax], al; in al, 0x19; in al, dx; jmp rsp; 
0x00000000001b0e8a: add byte ptr [rax], al; in al, 0x2c; add al, byte ptr [rax]; sbb dh, 0xf6; jmp qword ptr [rcx]; 
0x00000000001a1c8a: add byte ptr [rax], al; in al, 0x3a; add dword ptr [rax], eax; add dh, ch; int1; call qword ptr [rdx]; 
0x00000000001a488a: add byte ptr [rax], al; in al, 0x66; add dword ptr [rax], eax; shl rdi, 1; jmp qword ptr [rax]; 
0x00000000001a538a: add byte ptr [rax], al; in al, 0x71; add dword ptr [rax], eax; xor byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x00000000001a688a: add byte ptr [rax], al; in al, 0x86; add dword ptr [rax], eax; sbb bl, 0xf4; call qword ptr [rdi]; 
0x00000000001a7e8a: add byte ptr [rax], al; in al, 0x9c; add dword ptr [rax], eax; adc byte ptr [rdx], dh; cmc; call qword ptr [rsi]; 
0x00000000001a9a8a: add byte ptr [rax], al; in al, 0xb8; add dword ptr [rax], eax; jo 0x1a9b03; cmc; call rsp; 
0x000000000019a48a: add byte ptr [rax], al; in al, 0xc2; add byte ptr [rax], al; adc byte ptr [rbx], ch; out dx, al; call qword ptr [rsi]; 
0x00000000001abb8a: add byte ptr [rax], al; in al, 0xd9; add dword ptr [rax], eax; shr bh, 0xf5; call qword ptr [rax]; 
0x000000000019d18a: add byte ptr [rax], al; in al, 0xef; add byte ptr [rax], al; add cl, bl; stc; call qword ptr [rax]; 
0x000000000019d78a: add byte ptr [rax], al; in al, 0xf5; add byte ptr [rax], al; adc byte ptr [rdi - 0x11], ah; jmp qword ptr [rsi]; 
0x000000000018f392: add byte ptr [rax], al; in al, dx; adc dword ptr [rax], eax; add byte ptr [rax + 0x58], cl; std; jmp qword ptr [rax]; 
0x00000000001aba92: add byte ptr [rax], al; in al, dx; fadd dword ptr [rcx]; add byte ptr [rax - 0x13], cl; cmc; jmp qword ptr [rax]; 
0x00000000001a4b92: add byte ptr [rax], al; in al, dx; imul eax, dword ptr [rcx], 0xf4639800; jmp qword ptr [rax]; 
0x0000000000199292: add byte ptr [rax], al; in al, dx; mov al, 0; add byte ptr [rax + 1], bl; out dx, al; jmp rax; 
0x00000000001aa992: add byte ptr [rax], al; in al, dx; mov dword ptr [rcx], 0xf5d70800; call qword ptr [rsi]; 
0x00000000001adfa2: add byte ptr [rax], al; in al, dx; stc; add dword ptr [rax], eax; jmp qword ptr [rdi]; 
0x00000000001b0a92: add byte ptr [rax], al; in al, dx; sub byte ptr [rdx], al; add byte ptr [rax + 0x64], bl; clc; jmp qword ptr [rbx]; 
0x00000000001b867a: add byte ptr [rax], al; inc dword ptr [rdi]; add byte ptr [rax], al; ret 3; 
0x00000000001955ea: add byte ptr [rax], al; insb byte ptr [rdi], dx; adc eax, 0x98a00000; in eax, dx; jmp rsi; 
0x00000000001a2912: add byte ptr [rax], al; insb byte ptr [rdi], dx; add dword ptr [r8], r8d; mov sil, dl; jmp qword ptr [rbp]; 
0x00000000001b0712: add byte ptr [rax], al; insb byte ptr [rdi], dx; and eax, 0x65480002; clc; jmp qword ptr [rbx]; 
0x00000000001aa912: add byte ptr [rax], al; insb byte ptr [rdi], dx; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rsi]; 
0x00000000001b3a12: add byte ptr [rax], al; insb byte ptr [rdi], dx; pop rax; add al, byte ptr [rax]; cmp byte ptr [rax - 9], bh; call qword ptr [rax]; 
0x000000000017a552: add byte ptr [rax], al; insb byte ptr [rdi], dx; sal esi, cl; call rdx; 
0x00000000001b1512: add byte ptr [rax], al; insb byte ptr [rdi], dx; xor eax, dword ptr [rdx]; add al, bl; div dh; call qword ptr [rsi]; 
0x0000000000176bbe: add byte ptr [rax], al; insd dword ptr [rdi], dx; sar bh, 1; jmp qword ptr [rdi]; 
0x0000000000036b55: add byte ptr [rax], al; jmp rax; 
0x0000000000123a4b: add byte ptr [rax], al; jmp rcx; 
0x00000000001a535f: add byte ptr [rax], al; jnp 0x1a5357; jmp qword ptr [rcx]; 
0x00000000001a5cea: add byte ptr [rax], al; jnp 0x1a5cf0; add al, dh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x000000000018620e: add byte ptr [rax], al; jo 0x186222; sti; inc dword ptr [rax + 0x11]; sti; call qword ptr [rax]; 
0x000000000019a4ce: add byte ptr [rax], al; jo 0x19a4fd; out dx, al; call qword ptr [rdx]; 
0x000000000019ca6e: add byte ptr [rax], al; jo 0x19ca2d; out dx, al; jmp qword ptr [rdx]; 
0x000000000019dc0e: add byte ptr [rax], al; jo 0x19db92; cld; jmp qword ptr [rax]; 
0x00000000001b8916: add byte ptr [rax], al; jp 0x1b891c; add byte ptr [rax], al; ret 6; 
0x000000000014fca9: add byte ptr [rax], al; lea r11, qword ptr [rip + 0x3789e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000a083e: add byte ptr [rax], al; lea r11, qword ptr [rip + 0xd7f4d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009eb6e: add byte ptr [rax], al; lea r11, qword ptr [rip + 0xd9a49]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d4ce: add byte ptr [rax], al; lea r11, qword ptr [rip + 0xdaf09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000011f5a6: add byte ptr [rax], al; lea r14, qword ptr [r13 + 0x18]; mov rsi, r14; call qword ptr [rax + 0x10]; 
0x000000000012a9d4: add byte ptr [rax], al; lea r8, qword ptr [rip + 0x29e3]; lea rdx, qword ptr [rip - 0xa984]; mov esi, 3; mov rdi, r15; call qword ptr [rax]; 
0x00000000000a3f68: add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x28]; call rbx; 
0x00000000000a3ff6: add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x28]; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a3ba7: add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x28]; mov rsi, r13; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a449a: add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x38]; mov rcx, r13; mov rdi, rbp; call rbx; 
0x00000000000a478a: add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x80]; mov rcx, r13; mov rdi, rbp; call rbx; 
0x00000000000a418f: add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x80]; mov rdx, r13; mov rdi, rbp; call rbx; 
0x0000000000121648: add byte ptr [rax], al; lea rax, qword ptr [rbx + 0x2260]; pop rbx; ret; 
0x000000000016239e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xa]; ret; 
0x00000000001623ae: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xb]; ret; 
0x00000000001623be: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xc]; ret; 
0x00000000001623ce: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xd]; ret; 
0x00000000001623de: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xe]; ret; 
0x00000000001622fd: add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000016231e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000016232e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000016233e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000016234e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000016235e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000016236e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 6]; ret; 
0x00000000001622aa: add byte ptr [rax], al; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000016237e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000016238e: add byte ptr [rax], al; lea rax, qword ptr [rdi + 9]; ret; 
0x0000000000086d89: add byte ptr [rax], al; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000a337b: add byte ptr [rax], al; lea rax, qword ptr [rdi - 0x10]; ret; 
0x00000000000a34de: add byte ptr [rax], al; lea rax, qword ptr [rdi - 0xc]; ret; 
0x00000000000a34fe: add byte ptr [rax], al; lea rax, qword ptr [rdi - 4]; ret; 
0x00000000000a34ee: add byte ptr [rax], al; lea rax, qword ptr [rdi - 8]; ret; 
0x000000000016230e: add byte ptr [rax], al; lea rax, qword ptr [rdi]; ret; 
0x000000000008346e: add byte ptr [rax], al; lea rax, qword ptr [rdx - 0x10]; add rsp, 8; ret; 
0x00000000000647f6: add byte ptr [rax], al; lea rax, qword ptr [rip + 0x113299]; movsxd rdx, dword ptr [rax + r12*4]; add rax, rdx; jmp rax; 
0x000000000002202e: add byte ptr [rax], al; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x000000000002203e: add byte ptr [rax], al; lea rax, qword ptr [rip + 0x15c12b]; ret; 
0x00000000000f9d0b: add byte ptr [rax], al; lea rax, qword ptr [rip + 0x2c7b2c]; add rsp, 0x18; ret; 
0x00000000000f9754: add byte ptr [rax], al; lea rax, qword ptr [rip + 0x2c8093]; add rsp, 8; ret; 
0x000000000003d11e: add byte ptr [rax], al; lea rax, qword ptr [rip + 0x386c6f]; add rsp, 8; ret; 
0x0000000000127efb: add byte ptr [rax], al; lea rax, qword ptr [rip + 0x541c0]; mov esi, esi; movsxd rcx, dword ptr [rax + rsi*4]; add rax, rcx; jmp rax; 
0x000000000012769b: add byte ptr [rax], al; lea rax, qword ptr [rip + 0x549e0]; mov esi, esi; movsxd rsi, dword ptr [rax + rsi*4]; add rax, rsi; jmp rax; 
0x0000000000123ace: add byte ptr [rax], al; lea rax, qword ptr [rip + 0x570f1]; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000e7270: add byte ptr [rax], al; lea rax, qword ptr [rip + 0x932db]; movsxd rdx, dword ptr [rax + r11*4]; add rax, rdx; jmp rax; 
0x00000000000d43a1: add byte ptr [rax], al; lea rax, qword ptr [rip + 0xa5b16]; movzx r13d, r13b; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x00000000000c327f: add byte ptr [rax], al; lea rax, qword ptr [rip + 0xb6510]; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000c2bba: add byte ptr [rax], al; lea rax, qword ptr [rip + 0xb67f9]; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000c2860: add byte ptr [rax], al; lea rax, qword ptr [rip + 0xb6aff]; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x000000000008356c: add byte ptr [rax], al; lea rax, qword ptr [rip + 0xf4aab]; movsxd rdx, dword ptr [rax + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000034ed0: add byte ptr [rax], al; lea rbx, qword ptr [rip + 0x13dadf]; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000000f7ef6: add byte ptr [rax], al; lea rbx, qword ptr [rip + 0x865af]; mov rax, rbx; pop rbx; ret; 
0x000000000005eec9: add byte ptr [rax], al; lea rcx, qword ptr [rbp - 0x1090]; mov qword ptr [rbp - 0x1198], rcx; lea rcx, qword ptr [rbp - 0x1000]; mov qword ptr [rbp - 0x11a0], rcx; jmp rax; 
0x000000000007465e: add byte ptr [rax], al; lea rcx, qword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x0000000000137264: add byte ptr [rax], al; lea rcx, qword ptr [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000006d28a: add byte ptr [rax], al; lea rcx, qword ptr [rip + 0x10ac1d]; movsxd rdx, dword ptr [rcx + rdx*4]; add rcx, rdx; jmp rcx; 
0x0000000000064657: add byte ptr [rax], al; lea rcx, qword ptr [rip + 0x11337c]; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000054a49: add byte ptr [rax], al; lea rcx, qword ptr [rip + 0x122522]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x00000000000d4452: add byte ptr [rax], al; lea rcx, qword ptr [rip + 0xa5c35]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x00000000001120ae: add byte ptr [rax], al; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000002458c: add byte ptr [rax], al; lea rdi, qword ptr [rip + 0x39b4db]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000243a4: add byte ptr [rax], al; lea rdi, qword ptr [rip + 0x39b6c3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c7c0b: add byte ptr [rax], al; lea rdi, qword ptr [rip + 0xb1cc8]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000c644a: add byte ptr [rax], al; lea rdi, qword ptr [rip + 0xb3399]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000b8276: add byte ptr [rax], al; lea rdi, qword ptr [rip + 0xc0d11]; movzx edx, sil; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000096c8e: add byte ptr [rax], al; lea rdx, qword ptr [rcx + 1]; mov byte ptr [rcx], 0; mov qword ptr [rdi], rdx; ret; 
0x000000000005e537: add byte ptr [rax], al; lea rdx, qword ptr [rip + 0x118c40]; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x0000000000022b61: add byte ptr [rax], al; lea rdx, qword ptr [rip + 0x1432b6]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x00000000001211ce: add byte ptr [rax], al; lea rdx, qword ptr [rip + 0x29c9a9]; mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x0000000000120d3f: add byte ptr [rax], al; lea rdx, qword ptr [rip + 0x59e68]; mov ecx, eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000e1872: add byte ptr [rax], al; lea rdx, qword ptr [rip + 0x98a2d]; movzx ecx, al; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000dfbed: add byte ptr [rax], al; lea rdx, qword ptr [rip + 0x9a69e]; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000011ffe5: add byte ptr [rax], al; lea rdx, qword ptr [rip + 0xcf02]; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x000000000012a9db: add byte ptr [rax], al; lea rdx, qword ptr [rip - 0xa984]; mov esi, 3; mov rdi, r15; call qword ptr [rax]; 
0x000000000012a860: add byte ptr [rax], al; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000006d177: add byte ptr [rax], al; lea rsi, qword ptr [rip + 0x10ac74]; movsxd rcx, dword ptr [rsi + rcx*4]; add rsi, rcx; jmp rsi; 
0x000000000006c80e: add byte ptr [rax], al; lea rsi, qword ptr [rip + 0x10b479]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x0000000000046332: add byte ptr [rax], al; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006f7e7: add byte ptr [rax], al; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x00000000000a1a5e: add byte ptr [rax], al; lea rsi, qword ptr [rip + 0xd6e59]; movsxd rax, dword ptr [rsi + rdi*4]; add rsi, rax; jmp rsi; 
0x000000000007c087: add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c487: add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab6f: add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb43: add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007add7: add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x000000000003b8cb: add byte ptr [rax], al; lea rsp, qword ptr [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000019d1ea: add byte ptr [rax], al; lock add byte ptr [rax], al; mov al, 0x1d; out dx, eax; call qword ptr [rax]; 
0x00000000001b2b52: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; add al, byte ptr [r8]; cmp byte ptr [rbx - 9], cl; call qword ptr [rbx]; 
0x00000000001ac12a: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; add byte ptr [rcx], 0; jo 0x1ac12a; cmc; call qword ptr [rcx]; 
0x0000000000192052: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; add byte ptr ds:[rax], al; pop rax; mov al, 0xea; jmp qword ptr [rdx]; 
0x00000000001aa852: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; mov byte ptr [rcx], 0; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001a6a52: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; mov byte ptr [rcx], al; add al, cl; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001a4c52: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; push 1; add al, cl; hlt; call qword ptr [rbp]; 
0x00000000001b3652: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; push rsp; add al, byte ptr [rax]; fsubr dword ptr [rdi - 9]; jmp qword ptr [rbp]; 
0x000000000019a452: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret 0; 
0x00000000001aa552: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; ret; 
0x0000000000190d52: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; sub eax, dword ptr [rax]; add byte ptr [rax], cl; jo 0x190d45; call qword ptr [rdx + 1]; 
0x00000000001a7d52: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; wait; add dword ptr [rax], eax; xor bpl, sil; jmp qword ptr [rax]; 
0x00000000001a7952: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; xchg eax, edi; add dword ptr [rax], eax; sub rsi, rbp; jmp qword ptr [rcx]; 
0x000000000017a6e7: add byte ptr [rax], al; loope 0x17a6eb; add byte ptr [rcx], al; adc byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x00000000001a315a: add byte ptr [rax], al; mov ah, 0x4f; add dword ptr [rax], eax; ret 0xe7da; 
0x00000000001a535a: add byte ptr [rax], al; mov ah, 0x71; add dword ptr [rax], eax; add byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x00000000001890be: add byte ptr [rax], al; mov ah, 0xa9; out dx, al; jmp rsp; 
0x00000000001a9a5a: add byte ptr [rax], al; mov ah, 0xb8; add dword ptr [rax], eax; jo 0x1a9a58; jmp qword ptr [rdx]; 
0x00000000001aa65a: add byte ptr [rax], al; mov ah, 0xc4; add dword ptr [rax], eax; jo 0x1aa637; cmc; jmp qword ptr [rsi]; 
0x00000000001991f2: add byte ptr [rax], al; mov al, 0; add byte ptr [rax - 3], ch; in eax, dx; call qword ptr [rsi + 2]; 
0x0000000000199ebe: add byte ptr [rax], al; mov al, 0x1a; out dx, al; call qword ptr [rdi]; 
0x000000000019d1ee: add byte ptr [rax], al; mov al, 0x1d; out dx, eax; call qword ptr [rax]; 
0x000000000019a36e: add byte ptr [rax], al; mov al, 0x25; out dx, al; jmp qword ptr [rax]; 
0x000000000019dfee: add byte ptr [rax], al; mov al, 0x47; sti; call qword ptr [rax]; 
0x00000000001973ee: add byte ptr [rax], al; mov al, 0xba; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019cbbe: add byte ptr [rax], al; mov al, 0xbf; out dx, al; jmp qword ptr [rax]; 
0x000000000015c81e: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, qword ptr [rdx]; ret; 
0x00000000001584ee: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000015c82e: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, qword ptr [rdx + 1]; ret; 
0x00000000001584fe: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000001b6a86: add byte ptr [rax], al; mov bl, 6; add byte ptr [rax], al; fld dword ptr [rbx]; add byte ptr [rax], al; ret; 
0x00000000000fc32f: add byte ptr [rax], al; mov byte ptr [r12 + 0x26], 0; mov rdi, r9; mov byte ptr [rbp - 0x689], 0x73; mov eax, 0x14; syscall; 
0x0000000000190b36: add byte ptr [rax], al; mov byte ptr [rcx - 0x16], ch; jmp qword ptr [rcx]; 
0x0000000000096bbe: add byte ptr [rax], al; mov byte ptr [rcx], 0; mov rcx, rdi; mov qword ptr [rdx], rcx; ret; 
0x00000000001aa7f2: add byte ptr [rax], al; mov byte ptr [rcx], 0; sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x000000000015a4be: add byte ptr [rax], al; mov byte ptr [rcx], dl; ret; 
0x00000000001a69f2: add byte ptr [rax], al; mov byte ptr [rcx], r8b; add byte ptr [rax - 0x21], ch; hlt; jmp qword ptr [rcx]; 
0x00000000000d0aee: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000d0b1e: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000d0b8e: add byte ptr [rax], al; mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x00000000000f321e: add byte ptr [rax], al; mov byte ptr [rdi], 0; mov byte ptr [rip + 0x2ce3d7], cl; mov rax, rdi; mov byte ptr [r9 - 1], 0; ret; 
0x000000000009686e: add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000037646: add byte ptr [rax], al; mov byte ptr [rdi], 0; xor eax, eax; ret; 
0x000000000009e3de: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000009cdde: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000009ddae: add byte ptr [rax], al; mov byte ptr [rdi], dl; ret; 
0x00000000000967a6: add byte ptr [rax], al; mov byte ptr [rdi], sil; add rdi, 1; mov rax, rdi; ret; 
0x000000000011a106: add byte ptr [rax], al; mov byte ptr [rdx], 0; pop rbx; ret; 
0x00000000001b798a: add byte ptr [rax], al; mov ch, 5; add byte ptr [rax], al; ret; 
0x00000000001a5b5f: add byte ptr [rax], al; mov cl, 0xf4; jmp qword ptr [rcx]; 
0x000000000009dace: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x000000000009e3fe: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009cdfe: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000176e9e: add byte ptr [rax], al; mov dh, 0xb; add byte ptr [rax], al; ret 0xfffd; 
0x00000000001a28cf: add byte ptr [rax], al; mov dh, dl; jmp qword ptr [rcx]; 
0x000000000009f1fe: add byte ptr [rax], al; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009daae: add byte ptr [rax], al; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000000a0c6e: add byte ptr [rax], al; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000f09b9: add byte ptr [rax], al; mov dword ptr [r8 + 0x34], edx; mov dword ptr [r8 + 0x38], edx; mov word ptr [r8 + 0x21], si; ret; 
0x0000000000020c6e: add byte ptr [rax], al; mov dword ptr [r9 + rcx*4], esi; inc dword ptr [rdi + 4]; ret; 
0x000000000005f1e1: add byte ptr [rax], al; mov dword ptr [rbp - 0x10fc], 1; jmp rax; 
0x000000000005ef54: add byte ptr [rax], al; mov dword ptr [rbp - 0x1118], 0; jmp rax; 
0x000000000005eff2: add byte ptr [rax], al; mov dword ptr [rbp - 0x1118], 1; jmp rax; 
0x000000000005f0f9: add byte ptr [rax], al; mov dword ptr [rbp - 0x1128], 0; jmp rax; 
0x000000000004ec62: add byte ptr [rax], al; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004ed72: add byte ptr [rax], al; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004e98a: add byte ptr [rax], al; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000002e1f8: add byte ptr [rax], al; mov dword ptr [rbp - 0xd8], 1; mov rdi, r14; mov eax, 3; syscall; 
0x000000000002e1ee: add byte ptr [rax], al; mov dword ptr [rbp - 0xdc], 1; mov dword ptr [rbp - 0xd8], 1; mov rdi, r14; mov eax, 3; syscall; 
0x0000000000079ae0: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000123d39: add byte ptr [rax], al; mov dword ptr [rbx + 0xa8], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x00000000001b70ca: add byte ptr [rax], al; mov dword ptr [rbx], 0x6c70000; add byte ptr [rax], al; ret; 
0x0000000000123bc6: add byte ptr [rax], al; mov dword ptr [rcx + 4], 1; mov eax, 1; ret; 
0x000000000015a4fe: add byte ptr [rax], al; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x000000000015a51e: add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x000000000015a50e: add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000015a4ee: add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x0000000000127fae: add byte ptr [rax], al; mov dword ptr [rdi + 4], 1; mov eax, 1; ret; 
0x00000000000e44de: add byte ptr [rax], al; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x00000000001176da: add byte ptr [rax], al; mov dword ptr [rdi + 8], 0x29; xor eax, eax; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x000000000009ddce: add byte ptr [rax], al; mov dword ptr [rdi - 1], edx; ret; 
0x000000000009695e: add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], 0; lea rax, qword ptr [rdi + 4]; ret; 
0x00000000000968be: add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], 0; mov rax, rdi; ret; 
0x000000000009691e: add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 4], r8d; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009687e: add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 4], r8d; mov rax, rdi; ret; 
0x00000000000968ae: add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov rax, rdi; ret; 
0x000000000009696e: add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000009697e: add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 6]; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968de: add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; mov rax, rdi; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968ce: add byte ptr [rax], al; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; mov rax, rdi; ret; 
0x000000000009ddee: add byte ptr [rax], al; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000009ddfe: add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x000000000009ddde: add byte ptr [rax], al; mov dword ptr [rdi], edx; ret; 
0x0000000000039d0e: add byte ptr [rax], al; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000000542a5: add byte ptr [rax], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000039ce4: add byte ptr [rax], al; mov dword ptr [rdx], ecx; ret; 
0x000000000008264e: add byte ptr [rax], al; mov dword ptr [rip + 0x33e3f6], 0; ret; 
0x0000000000120dce: add byte ptr [rax], al; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120d1e: add byte ptr [rax], al; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120d7e: add byte ptr [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x0000000000120dbe: add byte ptr [rax], al; mov dword ptr [rsi], 0xc; ret; 
0x0000000000120dae: add byte ptr [rax], al; mov dword ptr [rsi], 8; ret; 
0x00000000000e4d24: add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000012b1ad: add byte ptr [rax], al; mov dword ptr [rsp + 0x18], 1; call qword ptr [rax + 0x18]; 
0x000000000012b1e1: add byte ptr [rax], al; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x000000000012b1e1: add byte ptr [rax], al; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x00000000000f23e2: add byte ptr [rax], al; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x00000000000a3f61: add byte ptr [rax], al; mov dword ptr [rsp], 1; lea r9, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000125f4e: add byte ptr [rax], al; mov dword ptr [rsp], eax; mov rax, qword ptr [r12 + 8]; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x00000000000fa36f: add byte ptr [rax], al; mov dword ptr fs:[0x2d0], eax; pop rax; pop rdi; call rax; 
0x00000000000be6c8: add byte ptr [rax], al; mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x00000000000be856: add byte ptr [rax], al; mov dword ptr fs:[rdx], r8d; add rsp, 0x40; mov eax, esi; pop rbx; ret; 
0x00000000000fa6f6: add byte ptr [rax], al; mov dword ptr fs:[rsi], 0x16; ret; 
0x000000000014d0be: add byte ptr [rax], al; mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000009e3ee: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009f20e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009cdee: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000a0c7e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000f11de: add byte ptr [rax], al; mov eax, 0x10; syscall; 
0x00000000000ed040: add byte ptr [rax], al; mov eax, 0x10f; syscall; 
0x00000000000fa97e: add byte ptr [rax], al; mov eax, 0x123; syscall; 
0x00000000000ebebe: add byte ptr [rax], al; mov eax, 0x124; syscall; 
0x00000000000ebf1e: add byte ptr [rax], al; mov eax, 0x125; syscall; 
0x00000000000faafe: add byte ptr [rax], al; mov eax, 0x126; syscall; 
0x00000000000faf4e: add byte ptr [rax], al; mov eax, 0x12c; syscall; 
0x00000000000fa8be: add byte ptr [rax], al; mov eax, 0x131; syscall; 
0x00000000000f1ebe: add byte ptr [rax], al; mov eax, 0x132; syscall; 
0x00000000000fb00e: add byte ptr [rax], al; mov eax, 0x134; syscall; 
0x00000000000eb75e: add byte ptr [rax], al; mov eax, 0x15; syscall; 
0x00000000000ebeee: add byte ptr [rax], al; mov eax, 0x16; syscall; 
0x00000000000cb29e: add byte ptr [rax], al; mov eax, 0x18; syscall; 
0x00000000000f498e: add byte ptr [rax], al; mov eax, 0x1b; syscall; 
0x00000000000f495e: add byte ptr [rax], al; mov eax, 0x1c; syscall; 
0x00000000000fbe9e: add byte ptr [rax], al; mov eax, 0x1d; syscall; 
0x00000000000fbece: add byte ptr [rax], al; mov eax, 0x1f; syscall; 
0x00000000000c256e: add byte ptr [rax], al; mov eax, 0x20; ret; 
0x00000000000ebe5e: add byte ptr [rax], al; mov eax, 0x20; syscall; 
0x00000000000ebe8e: add byte ptr [rax], al; mov eax, 0x21; syscall; 
0x00000000000c0b8e: add byte ptr [rax], al; mov eax, 0x25; syscall; 
0x00000000000b428e: add byte ptr [rax], al; mov eax, 0x26; syscall; 
0x00000000000fb5ae: add byte ptr [rax], al; mov eax, 0x29; syscall; 
0x00000000000fb11e: add byte ptr [rax], al; mov eax, 0x31; syscall; 
0x00000000000fb1de: add byte ptr [rax], al; mov eax, 0x33; syscall; 
0x00000000000fb1ae: add byte ptr [rax], al; mov eax, 0x34; syscall; 
0x00000000000c114b: add byte ptr [rax], al; mov eax, 0x3a; syscall; 
0x00000000000eaf2e: add byte ptr [rax], al; mov eax, 0x3c; syscall; 
0x00000000000464d6: add byte ptr [rax], al; mov eax, 0x3e; movsxd rdi, ebx; syscall; 
0x0000000000036efe: add byte ptr [rax], al; mov eax, 0x3e; syscall; 
0x00000000000c08ce: add byte ptr [rax], al; mov eax, 0x3f; syscall; 
0x00000000000fbdae: add byte ptr [rax], al; mov eax, 0x40; syscall; 
0x00000000000fbd7e: add byte ptr [rax], al; mov eax, 0x41; syscall; 
0x00000000000fbe6e: add byte ptr [rax], al; mov eax, 0x43; syscall; 
0x00000000000fbd4e: add byte ptr [rax], al; mov eax, 0x47; syscall; 
0x00000000000f308e: add byte ptr [rax], al; mov eax, 0x4c; syscall; 
0x00000000000f30be: add byte ptr [rax], al; mov eax, 0x4d; syscall; 
0x00000000000ebfae: add byte ptr [rax], al; mov eax, 0x50; syscall; 
0x00000000000ebfde: add byte ptr [rax], al; mov eax, 0x51; syscall; 
0x00000000000ecf7e: add byte ptr [rax], al; mov eax, 0x54; syscall; 
0x00000000000ecdfe: add byte ptr [rax], al; mov eax, 0x56; syscall; 
0x00000000000ecf1e: add byte ptr [rax], al; mov eax, 0x57; syscall; 
0x00000000000eb37e: add byte ptr [rax], al; mov eax, 0x5a; syscall; 
0x00000000000eb3ae: add byte ptr [rax], al; mov eax, 0x5b; syscall; 
0x00000000000ec7de: add byte ptr [rax], al; mov eax, 0x5d; syscall; 
0x00000000000ec80e: add byte ptr [rax], al; mov eax, 0x5e; syscall; 
0x00000000000eb36e: add byte ptr [rax], al; mov eax, 0x5f; syscall; 
0x00000000000eb36e: add byte ptr [rax], al; mov eax, 0x5f; syscall; ret; 
0x00000000000f0bfe: add byte ptr [rax], al; mov eax, 0x61; syscall; 
0x00000000000f0c5e: add byte ptr [rax], al; mov eax, 0x62; syscall; 
0x00000000000c1d0e: add byte ptr [rax], al; mov eax, 0x66; syscall; 
0x00000000000c1d0e: add byte ptr [rax], al; mov eax, 0x66; syscall; ret; 
0x00000000000fab5e: add byte ptr [rax], al; mov eax, 0x67; syscall; 
0x00000000000c1d2e: add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x00000000000c1d2e: add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000000c1d1e: add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000000c1d1e: add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x00000000000c1d3e: add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x00000000000c1d3e: add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x00000000000c1f0e: add byte ptr [rax], al; mov eax, 0x6d; syscall; 
0x00000000000c1cfe: add byte ptr [rax], al; mov eax, 0x6e; syscall; 
0x00000000000c1cfe: add byte ptr [rax], al; mov eax, 0x6e; syscall; ret; 
0x00000000000c1f3e: add byte ptr [rax], al; mov eax, 0x6f; syscall; 
0x00000000000c1f3e: add byte ptr [rax], al; mov eax, 0x6f; syscall; ret; 
0x00000000000c1f9e: add byte ptr [rax], al; mov eax, 0x70; syscall; 
0x00000000000c1d4e: add byte ptr [rax], al; mov eax, 0x73; syscall; 
0x00000000000c1fce: add byte ptr [rax], al; mov eax, 0x76; syscall; 
0x00000000000c1ffe: add byte ptr [rax], al; mov eax, 0x78; syscall; 
0x00000000000c1ede: add byte ptr [rax], al; mov eax, 0x79; syscall; 
0x00000000000fa46e: add byte ptr [rax], al; mov eax, 0x7a; syscall; 
0x00000000000fa49e: add byte ptr [rax], al; mov eax, 0x7b; syscall; 
0x00000000000c1f6e: add byte ptr [rax], al; mov eax, 0x7c; syscall; 
0x00000000000fa85e: add byte ptr [rax], al; mov eax, 0x7d; syscall; 
0x00000000000fa88e: add byte ptr [rax], al; mov eax, 0x7e; syscall; 
0x00000000000c23f9: add byte ptr [rax], al; mov eax, 0x7f; ret; 
0x0000000000036f33: add byte ptr [rax], al; mov eax, 0x7f; syscall; 
0x0000000000036f6d: add byte ptr [rax], al; mov eax, 0x82; syscall; 
0x00000000000fae2e: add byte ptr [rax], al; mov eax, 0x86; syscall; 
0x00000000000fac1e: add byte ptr [rax], al; mov eax, 0x87; syscall; 
0x00000000000eb25e: add byte ptr [rax], al; mov eax, 0x8a; syscall; 
0x00000000000f101e: add byte ptr [rax], al; mov eax, 0x8d; syscall; 
0x00000000000cb20e: add byte ptr [rax], al; mov eax, 0x8f; syscall; 
0x00000000000cb23e: add byte ptr [rax], al; mov eax, 0x90; syscall; 
0x00000000000cb26e: add byte ptr [rax], al; mov eax, 0x91; syscall; 
0x00000000000cb2ce: add byte ptr [rax], al; mov eax, 0x92; syscall; 
0x00000000000cb2fe: add byte ptr [rax], al; mov eax, 0x93; syscall; 
0x00000000000cb32e: add byte ptr [rax], al; mov eax, 0x94; syscall; 
0x00000000000f4a1e: add byte ptr [rax], al; mov eax, 0x96; syscall; 
0x00000000000f4a4e: add byte ptr [rax], al; mov eax, 0x97; syscall; 
0x00000000000f4a7e: add byte ptr [rax], al; mov eax, 0x98; syscall; 
0x00000000000fa7be: add byte ptr [rax], al; mov eax, 0x9a; syscall; 
0x00000000000fac4e: add byte ptr [rax], al; mov eax, 0x9b; syscall; 
0x00000000000f0c2e: add byte ptr [rax], al; mov eax, 0xa0; syscall; 
0x00000000000f1d9e: add byte ptr [rax], al; mov eax, 0xa1; syscall; 
0x00000000000f1e2e: add byte ptr [rax], al; mov eax, 0xa2; syscall; 
0x00000000000f1d6e: add byte ptr [rax], al; mov eax, 0xa3; syscall; 
0x00000000000b140e: add byte ptr [rax], al; mov eax, 0xa4; syscall; 
0x00000000000fa40e: add byte ptr [rax], al; mov eax, 0xa6; syscall; 
0x00000000000f21ae: add byte ptr [rax], al; mov eax, 0xa7; syscall; 
0x00000000000f21de: add byte ptr [rax], al; mov eax, 0xa8; syscall; 
0x00000000000f48ce: add byte ptr [rax], al; mov eax, 0xa; syscall; 
0x00000000000f1b4e: add byte ptr [rax], al; mov eax, 0xaa; syscall; 
0x00000000000f1bee: add byte ptr [rax], al; mov eax, 0xab; syscall; 
0x00000000000fa27e: add byte ptr [rax], al; mov eax, 0xac; syscall; 
0x00000000000fa8ee: add byte ptr [rax], al; mov eax, 0xae; syscall; 
0x00000000000fa91e: add byte ptr [rax], al; mov eax, 0xb0; syscall; 
0x00000000000fa43e: add byte ptr [rax], al; mov eax, 0xbb; syscall; 
0x00000000000f817e: add byte ptr [rax], al; mov eax, 0xc6; syscall; 
0x00000000000f805e: add byte ptr [rax], al; mov eax, 0xc7; syscall; 
0x000000000010c4b6: add byte ptr [rax], al; mov eax, 0xca; add rsp, 0x28; ret; 
0x0000000000108090: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000108090: add byte ptr [rax], al; mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x0000000000108137: add byte ptr [rax], al; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000000fa94e: add byte ptr [rax], al; mov eax, 0xd5; syscall; 
0x00000000000fa7ee: add byte ptr [rax], al; mov eax, 0xe4; syscall; 
0x00000000000fa7ee: add byte ptr [rax], al; mov eax, 0xe4; syscall; ret; 
0x00000000000c2bf5: add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x0000000000047108: add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x00000000000f2ede: add byte ptr [rax], al; mov eax, 0xeb; syscall; 
0x00000000000c24be: add byte ptr [rax], al; mov eax, 0xfc17; ret; 
0x00000000000faace: add byte ptr [rax], al; mov eax, 0xfd; syscall; 
0x00000000000fab2e: add byte ptr [rax], al; mov eax, 0xff; syscall; 
0x0000000000076b60: add byte ptr [rax], al; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002c2a5: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000132eb9: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000000357dc: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000036c8c: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000048a5e: add byte ptr [rax], al; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f3653: add byte ptr [rax], al; mov eax, 1; add rsp, 8; ret; 
0x00000000001224ac: add byte ptr [rax], al; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000002c04e: add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000012144e: add byte ptr [rax], al; mov eax, 2; ret; 
0x0000000000123bb6: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [r8], eax; mov eax, 1; ret; 
0x000000000015c85e: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 3]; ret; 
0x000000000015fc0e: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000000e4d2e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000007c59e: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000120cec: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi + 8], eax; ret; 
0x000000000012e5de: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x28]; ret; 
0x00000000000e44ce: add byte ptr [rax], al; mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000072efe: add byte ptr [rax], al; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x00000000000735fe: add byte ptr [rax], al; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x000000000012d736: add byte ptr [rax], al; mov eax, dword ptr [rdx]; lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000753ce: add byte ptr [rax], al; mov eax, dword ptr [rdx]; ret; 
0x0000000000037bae: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x3864da]; ret; 
0x000000000012d88e: add byte ptr [rax], al; mov eax, dword ptr [rsi]; lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000e4e1e: add byte ptr [rax], al; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x000000000012cfa6: add byte ptr [rax], al; mov eax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000127087: add byte ptr [rax], al; mov eax, dword ptr [rsp + 0x10]; lea rdi, qword ptr [rip + 0x54c0c]; movsxd rax, dword ptr [rdi + rax*4]; add rdi, rax; jmp rdi; 
0x0000000000132e14: add byte ptr [rax], al; mov eax, ebx; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000f4770: add byte ptr [rax], al; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000085d9a: add byte ptr [rax], al; mov eax, ebx; pop rbx; ret; 
0x00000000000c1ce5: add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000010c53e: add byte ptr [rax], al; mov eax, edi; bswap eax; ret; 
0x0000000000022cba: add byte ptr [rax], al; mov eax, edi; ret; 
0x0000000000103f5e: add byte ptr [rax], al; mov eax, edi; sub eax, esi; ret; 
0x0000000000100163: add byte ptr [rax], al; mov eax, edx; add rsp, 8; ret; 
0x000000000004934d: add byte ptr [rax], al; mov eax, edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000005de59: add byte ptr [rax], al; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000005e19e: add byte ptr [rax], al; mov eax, edx; pop rbx; ret; 
0x00000000001094e0: add byte ptr [rax], al; mov eax, esi; pop rbx; pop rbp; ret; 
0x0000000000051805: add byte ptr [rax], al; mov eax, r8d; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000199eea: add byte ptr [rax], al; mov ebp, 0x1ba00000; out dx, al; call qword ptr [rcx]; 
0x00000000001aa732: add byte ptr [rax], al; mov ebp, es; add dword ptr [rax], eax; sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000000066b6: add byte ptr [rax], al; mov ecx, 0x1200001d; add byte ptr [rax + rax], cl; push rax; ret 7; 
0x00000000000c08fe: add byte ptr [rax], al; mov ecx, 0x64; mov rsi, rdi; mov eax, ecx; syscall; 
0x00000000000f0fde: add byte ptr [rax], al; mov ecx, 0x8c; mov esi, esi; movsxd rdi, edi; mov eax, ecx; syscall; 
0x000000000009e41e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000009ce1e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000009daee: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000009ce2e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000700dc: add byte ptr [rax], al; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000007ba95: add byte ptr [rax], al; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000007031d: add byte ptr [rax], al; mov ecx, r12d; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000e8a63: add byte ptr [rax], al; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000047476: add byte ptr [rax], al; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000c1098: add byte ptr [rax], al; mov edi, dword ptr [rcx + 0x28]; mov eax, ebx; mov esi, 0x81; syscall; 
0x00000000000c0b45: add byte ptr [rax], al; mov edi, dword ptr [rsp + 0xc]; movsxd r10, ecx; syscall; 
0x000000000006f5be: add byte ptr [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000008ca6e: add byte ptr [rax], al; mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x000000000013630d: add byte ptr [rax], al; mov edx, 1; add rdi, 0x1c; mov al, 0xca; mov esi, 0x81; syscall; 
0x000000000010808b: add byte ptr [rax], al; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000079e0d: add byte ptr [rax], al; mov edx, 2; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000079d5c: add byte ptr [rax], al; mov edx, 2; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000014cfde: add byte ptr [rax], al; mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014cf6e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014cefe: add byte ptr [rax], al; mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014c92e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144bbe: add byte ptr [rax], al; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144dbe: add byte ptr [rax], al; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144fbe: add byte ptr [rax], al; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000009f23e: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000009ce0e: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000a0cae: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000dc8ee: add byte ptr [rax], al; mov edx, eax; lea rax, qword ptr [rip + 0x9d8f3]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000eb47e: add byte ptr [rax], al; mov edx, edx; movsxd rdi, edi; mov eax, 0x102; syscall; 
0x00000000000f0a83: add byte ptr [rax], al; mov esi, 0x5409; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000f0a3f: add byte ptr [rax], al; mov esi, 0x5409; movsxd rdi, edi; mov eax, 0x10; syscall; 
0x0000000000108146: add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x0000000000108086: add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000074f9d: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000000750b5: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000074dbd: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000079594: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x0000000000074675: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000000f5c6e: add byte ptr [rax], al; mov esi, 1; call rbx; 
0x00000000000f5e5b: add byte ptr [rax], al; mov esi, 1; mov rdi, r12; call rbx; 
0x00000000000f5d27: add byte ptr [rax], al; mov esi, 1; mov rdi, r13; call rbx; 
0x00000000000f5c9f: add byte ptr [rax], al; mov esi, 1; mov rdi, r14; call rbx; 
0x000000000011fed5: add byte ptr [rax], al; mov esi, 2; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x48], 0; mov rdi, r13; call qword ptr [rax]; 
0x00000000000f60d9: add byte ptr [rax], al; mov esi, 2; mov rdi, r12; call rbx; 
0x00000000000f5e4c: add byte ptr [rax], al; mov esi, 2; mov rdi, r13; call rbx; 
0x00000000000f5d18: add byte ptr [rax], al; mov esi, 2; mov rdi, r14; call rbx; 
0x00000000000f5c90: add byte ptr [rax], al; mov esi, 2; mov rdi, r15; call rbx; 
0x000000000011ffec: add byte ptr [rax], al; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x0000000000036f2e: add byte ptr [rax], al; mov esi, 8; mov eax, 0x7f; syscall; 
0x0000000000036fee: add byte ptr [rax], al; mov esi, 8; mov eax, 0x82; syscall; 
0x0000000000125f98: add byte ptr [rax], al; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000112f45: add byte ptr [rax], al; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000075050: add byte ptr [rax], al; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x00000000000f0fe3: add byte ptr [rax], al; mov esi, esi; movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000000749df: add byte ptr [rax], al; mov esi, r14d; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x00000000001a4d62: add byte ptr [rax], al; mov esp, 0x1800016b; hlt; jmp qword ptr [rcx]; 
0x00000000001a8262: add byte ptr [rax], al; mov esp, 0x180001a0; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001aa762: add byte ptr [rax], al; mov esp, 0x180001c5; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001ac362: add byte ptr [rax], al; mov esp, 0x280001e1; sti; cmc; call qword ptr [rax]; 
0x00000000001a0b62: add byte ptr [rax], al; mov esp, 0x38000129; sal ecx, cl; call rsi; 
0x000000000019bd62: add byte ptr [rax], al; mov esp, 0x780000db; insd dword ptr [rdi], dx; out dx, al; call qword ptr [rdi]; 
0x000000000019d262: add byte ptr [rax], al; mov esp, 0x80000f0; out dx, eax; jmp qword ptr [rbp + 4]; 
0x00000000001a1c62: add byte ptr [rax], al; mov esp, 0x8800013a; in eax, dx; int1; call qword ptr [rsi]; 
0x00000000001888a6: add byte ptr [rax], al; mov esp, 0xacffec19; mov ch, 0; add ah, ah; sbb esp, ebp; jmp rsp; 
0x00000000001719b6: add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x000000000016dfbe: add byte ptr [rax], al; mov esp, 0xbf00000f; sldt word ptr [rax]; ret 0xf; 
0x000000000019fb62: add byte ptr [rax], al; mov esp, 0xd8000119; sbb cl, dh; jmp qword ptr [rax + 1]; 
0x00000000001a9762: add byte ptr [rax], al; mov esp, 0xd80001b5; outsb dx, byte ptr [rsi]; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001b5d62: add byte ptr [rax], al; mov esp, 0xd800027b; fdivrp st(7); call rdi; 
0x00000000000fc760: add byte ptr [rax], al; mov qword ptr [rax + 0x10], 0; nop word ptr [rax + rax]; mov qword ptr [rip + 0x2c1b85], 0; pop rbp; ret; 
0x0000000000074d47: add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; mov rax, qword ptr [r15 + 0xd8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x0000000000075014: add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000122026: add byte ptr [rax], al; mov qword ptr [rax + 0x58], r8; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x000000000006de7b: add byte ptr [rax], al; mov qword ptr [rax + 8], r8; add dword ptr [rdx + 4], 1; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x000000000005dca5: add byte ptr [rax], al; mov qword ptr [rax + 8], r8; mov dword ptr [rax + 4], 1; xor eax, eax; ret; 
0x000000000005dc32: add byte ptr [rax], al; mov qword ptr [rax + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x0000000000107665: add byte ptr [rax], al; mov qword ptr [rbp - 0x70], rdx; mov rdx, r14; call rax; 
0x000000000007994a: add byte ptr [rax], al; mov qword ptr [rbx + 0x10], 0; cmovg rax, rdx; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x0000000000135d43: add byte ptr [rax], al; mov qword ptr [rbx + 0x10], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000007b9f5: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000135cf0: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; add rsp, 0x10; pop rbx; ret; 
0x00000000000bcc83: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rdx; add rsp, 0xd0; pop rbx; ret; 
0x000000000012163c: add byte ptr [rax], al; mov qword ptr [rbx + 0x2290], rax; call 0x12e3c0; lea rax, qword ptr [rbx + 0x2260]; pop rbx; ret; 
0x000000000007b108: add byte ptr [rax], al; mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000078d02: add byte ptr [rax], al; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000023830: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000135f6b: add byte ptr [rax], al; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x00000000000aedce: add byte ptr [rax], al; mov qword ptr [rbx], rsi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x000000000007995d: add byte ptr [rax], al; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000007902f: add byte ptr [rax], al; mov qword ptr [rcx + 0x140], rdx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x00000000001276cc: add byte ptr [rax], al; mov qword ptr [rcx + 8], rax; mov qword ptr [rcx + 0x10], rdx; mov eax, 1; ret; 
0x000000000015a53e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x000000000015a55e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x000000000015a56e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x000000000015a57e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x000000000015a58e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000015a59e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000015a5ae: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x000000000015a54e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x000000000015a52e: add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x000000000012e23e: add byte ptr [rax], al; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], edx; mov al, 1; ret; 
0x000000000012e972: add byte ptr [rax], al; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000f3115: add byte ptr [rax], al; mov qword ptr [rdi + 8], 0; ret; 
0x000000000012e97a: add byte ptr [rax], al; mov qword ptr [rdi + 8], rax; ret; 
0x000000000009de0e: add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x000000000009de2e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000009de4e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000009de5e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000009de6e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000009de7e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000009de3e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x000000000009de1e: add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x0000000000078852: add byte ptr [rax], al; mov qword ptr [rdx + 0x140], rdi; pop rbx; ret; 
0x0000000000133adb: add byte ptr [rax], al; mov qword ptr [rdx], 0; mov eax, 0xffffffff; ret; 
0x0000000000071cfc: add byte ptr [rax], al; mov qword ptr [rdx], rax; xor eax, eax; pop rbx; ret; 
0x00000000001276eb: add byte ptr [rax], al; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x00000000000fc76e: add byte ptr [rax], al; mov qword ptr [rip + 0x2c1b85], 0; pop rbp; ret; 
0x00000000000fc71c: add byte ptr [rax], al; mov qword ptr [rip + 0x2c1bd7], 2; pop rbp; ret; 
0x00000000000f3930: add byte ptr [rax], al; mov qword ptr [rip + 0x2cdcf3], 0; add rsp, 8; ret; 
0x000000000007c932: add byte ptr [rax], al; mov qword ptr [rip + 0x344089], 0; ret; 
0x000000000007c8cd: add byte ptr [rax], al; mov qword ptr [rip + 0x3440f2], rdx; add dword ptr [rip + 0x3440e7], 1; ret; 
0x00000000000e3eec: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x000000000003d314: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; mov eax, 0xb; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x0000000000120d2c: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000003d2d3: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x00000000000e43fc: add byte ptr [rax], al; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x0000000000120dd4: add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000e3ef4: add byte ptr [rax], al; mov qword ptr [rsi + 8], 0; ret; 
0x0000000000120d24: add byte ptr [rax], al; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120cfc: add byte ptr [rax], al; mov qword ptr [rsi + 8], rax; ret; 
0x0000000000123a13: add byte ptr [rax], al; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000007d4f8: add byte ptr [rax], al; mov qword ptr [rsi], rax; mov rax, r8; ret; 
0x000000000010c4c6: add byte ptr [rax], al; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x0000000000126761: add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x0000000000108f71: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x108fa0; add rsp, 0xd8; ret; 
0x00000000001090bc: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x1090d0; add rsp, 0xd8; ret; 
0x000000000010a346: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x10a360; add rsp, 0xd8; ret; 
0x000000000010a556: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x10a570; add rsp, 0xd8; ret; 
0x000000000010c0ec: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x10c100; add rsp, 0xd8; ret; 
0x0000000000048721: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x475b0; add rsp, 0xd8; ret; 
0x000000000005432b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x49c40; add rsp, 0xd8; ret; 
0x000000000005d07b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x5cfc0; add rsp, 0xd8; ret; 
0x000000000005e40b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x5e420; add rsp, 0xd8; ret; 
0x000000000007834b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x5eaf0; add rsp, 0xd8; ret; 
0x000000000007855b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x6c6c0; add rsp, 0xd8; ret; 
0x000000000005d1bb: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x70930; add rsp, 0xd8; ret; 
0x000000000005458b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x72120; add rsp, 0xd8; ret; 
0x000000000005461b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x72280; add rsp, 0xd8; ret; 
0x0000000000054466: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x72420; add rsp, 0xd8; ret; 
0x000000000007282b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x72620; add rsp, 0xd8; ret; 
0x0000000000073bd6: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x73c60; add rsp, 0xd8; ret; 
0x0000000000073e1b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x73d20; add rsp, 0xd8; ret; 
0x00000000000af64b: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0xaf660; add rsp, 0xd8; ret; 
0x00000000000f4493: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0xf3ec0; add rsp, 0xd8; ret; 
0x00000000001293d9: add byte ptr [rax], al; mov qword ptr [rsp + 0x38], 0; call qword ptr [rax + 0x28]; 
0x000000000012b4c1: add byte ptr [rax], al; mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x000000000011f957: add byte ptr [rax], al; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x000000000012b81f: add byte ptr [rax], al; mov qword ptr [rsp + 8], 0x2faf080; call 0xc0dd0; add rsp, 0x18; ret; 
0x000000000011fcd6: add byte ptr [rax], al; mov qword ptr [rsp + 8], rdi; mov esi, 1; mov rdi, r15; call qword ptr [rax]; 
0x000000000011feda: add byte ptr [rax], al; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x48], 0; mov rdi, r13; call qword ptr [rax]; 
0x0000000000129b8d: add byte ptr [rax], al; mov qword ptr [rsp + 8], rdi; mov rdi, rbx; call qword ptr [rax]; 
0x00000000000f2345: add byte ptr [rax], al; mov qword ptr [rsp + 8], rdi; mov rdi, rsp; call 0xc0dd0; add rsp, 0x18; ret; 
0x00000000000b42d8: add byte ptr [rax], al; mov qword ptr [rsp], rax; call 0xb1410; add rsp, 0x18; ret; 
0x00000000000fafd0: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0x130; syscall; 
0x00000000000fb170: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0x2a; syscall; 
0x00000000000fb0e0: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0x2b; syscall; 
0x00000000000fb4b0: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0x2e; syscall; 
0x00000000000fb3a0: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0x2f; syscall; 
0x00000000000fa3c0: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 8; syscall; 
0x00000000000fad33: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x113; syscall; 
0x00000000000fadc3: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000fae83: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000fb513: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x2c; syscall; 
0x00000000000fb343: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x2d; syscall; 
0x00000000000fbc83: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000fbce3: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000faa03: add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0xe8; syscall; 
0x0000000000129b84: add byte ptr [rax], al; mov qword ptr [rsp], rsi; mov esi, 4; mov qword ptr [rsp + 8], rdi; mov rdi, rbx; call qword ptr [rax]; 
0x00000000000301ba: add byte ptr [rax], al; mov qword ptr fs:[rax], rdx; ret; 
0x000000000012abbf: add byte ptr [rax], al; mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x00000000000faeee: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000000fa7fe: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12d; syscall; 
0x00000000000fa75e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12e; syscall; 
0x00000000000faf7e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000000fb03e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x136; syscall; 
0x00000000000ed2ce: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000000fb5de: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x35; syscall; 
0x00000000000fb20e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000000fbdde: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x42; syscall; 
0x00000000000fac7e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0x9d; syscall; 
0x00000000000fab8e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000000faa6e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000000f820e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000000f81ae: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xbd; syscall; 
0x00000000000f808e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000000f811e: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000000f49be: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000000fa9ae: add byte ptr [rax], al; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000000eceee: add byte ptr [rax], al; mov r10, rcx; movsxd rdi, edi; mov eax, 0x10b; syscall; 
0x000000000005dbbe: add byte ptr [rax], al; mov r10, rcx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x108; syscall; 
0x000000000010896d: add byte ptr [rax], al; mov r10, rcx; syscall; 
0x000000000004713d: add byte ptr [rax], al; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000eb54e: add byte ptr [rax], al; mov r10d, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x000000000014422e: add byte ptr [rax], al; mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000004719f: add byte ptr [rax], al; mov r8, qword ptr [rdi + 0x28]; mov r9, qword ptr [rdi + 0x30]; mov rdi, qword ptr [rdi + 0x68]; xor eax, eax; ret; 
0x00000000000474df: add byte ptr [rax], al; mov r8, qword ptr [rsi + 0x28]; mov r9, qword ptr [rsi + 0x30]; mov rsi, qword ptr [rsi + 0x70]; xor eax, eax; ret; 
0x0000000000036fa1: add byte ptr [rax], al; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x82; syscall; 
0x00000000000fa696: add byte ptr [rax], al; mov r8d, esi; mov rdi, r9; movsxd rsi, esi; mov eax, ecx; syscall; 
0x00000000000cb1ce: add byte ptr [rax], al; mov r9d, 1; call 0xc9d70; add rsp, 0x18; ret; 
0x00000000000e3cae: add byte ptr [rax], al; mov r9d, edx; call 0xe32d0; add rsp, 0x18; ret; 
0x0000000000036bf4: add byte ptr [rax], al; mov rax, -1; ret; 
0x0000000000036cae: add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x00000000000a2ede: add byte ptr [rax], al; mov rax, 1; ret; 
0x00000000000a2eee: add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000a2efe: add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000a2f0e: add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000a2f1e: add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000a2f2e: add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000a2f3e: add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000126016: add byte ptr [rax], al; mov rax, qword ptr [r12 + 8]; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000012a817: add byte ptr [rax], al; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000001281c6: add byte ptr [rax], al; mov rax, qword ptr [r14 + 0x60]; mov esi, dword ptr [r14 + 0x88]; mov rdi, r13; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x0000000000128234: add byte ptr [rax], al; mov rax, qword ptr [r14 + 0x60]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x0000000000127d03: add byte ptr [rax], al; mov rax, qword ptr [r14 + 0x70]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x0000000000074d4f: add byte ptr [rax], al; mov rax, qword ptr [r15 + 0xd8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000012b447: add byte ptr [rax], al; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x000000000012aa03: add byte ptr [rax], al; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000012b529: add byte ptr [rax], al; mov rax, qword ptr [r15 + 8]; mov rdi, r15; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x0000000000074db6: add byte ptr [rax], al; mov rax, qword ptr [r8 + 0x140]; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000123ae6: add byte ptr [rax], al; mov rax, qword ptr [r8]; bswap eax; mov dword ptr [rcx + 0xb4], eax; mov eax, 1; ret; 
0x0000000000123c2e: add byte ptr [rax], al; mov rax, qword ptr [r8]; bswap eax; mov dword ptr [rcx + 0xb8], eax; mov eax, 1; ret; 
0x0000000000074e4e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x140]; call qword ptr [rax + 0x68]; 
0x0000000000074f96: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000007466e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007b139: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x00000000000769e0: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000007b685: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x00000000000f8296: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x58]; ret; 
0x00000000000487a0: add byte ptr [rax], al; mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000120f75: add byte ptr [rax], al; mov rax, qword ptr [rbp + 8]; lea esi, dword ptr [r12 + 3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x0000000000120ede: add byte ptr [rax], al; mov rax, qword ptr [rbp + 8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000012db36: add byte ptr [rax], al; mov rax, qword ptr [rbp + 8]; mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x000000000012c3ce: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x18]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000011f4a8: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000011f4bc: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x0000000000127873: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x70]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000123d51: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0xd0]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000797c0: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x000000000007b38e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000006d96e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012ddae: add byte ptr [rax], al; mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000012d0be: add byte ptr [rax], al; mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x0000000000121aee: add byte ptr [rax], al; mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000012ce46: add byte ptr [rax], al; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012ce7e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000121b0e: add byte ptr [rax], al; mov rax, qword ptr [rbx + 8]; mov rsi, rsp; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000129401: add byte ptr [rax], al; mov rax, qword ptr [rbx]; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000129341: add byte ptr [rax], al; mov rax, qword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000015c7ae: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; ret; 
0x000000000015847e: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000012e1fe: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000120d5c: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x20]; mov qword ptr [rsi + 8], rax; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000bd23e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x20]; ret; 
0x000000000011f5db: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000120d94: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsi + 8], rax; mov rax, qword ptr [rdi + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000070b7e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000007c86e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000007ba8e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000007b0be: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000000750ae: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000005ea66: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; movsxd r12, edx; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000049bde: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xd8]; movsxd r13, edx; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000001293f2: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x000000000012702e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x0000000000121a9e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 8]; call qword ptr [rax]; 
0x000000000012d9ce: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp + 8], r8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000012d46e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp], rdx; mov rsi, rsp; call qword ptr [rax + 8]; 
0x000000000012e006: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x000000000012e016: add byte ptr [rax], al; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x0000000000072f8f: add byte ptr [rax], al; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x0000000000072e7f: add byte ptr [rax], al; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000012777e: add byte ptr [rax], al; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [rcx + 0x58], eax; mov eax, 1; ret; 
0x00000000001365de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x287881]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000135223: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28a664]; call qword ptr [rax]; 
0x0000000000134e98: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28a9ef]; xor ebp, ebp; call qword ptr [rax + 0x28]; 
0x0000000000132ec6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28af99]; mov dword ptr fs:[rax], 2; mov eax, 0xffffffff; ret; 
0x0000000000132cee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28b171]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000001338bf: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28bfc8]; call qword ptr [rax + 0x28]; 
0x0000000000133852: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28c035]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x00000000001337d5: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28c0b2]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x000000000013375f: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28c128]; call qword ptr [rax]; 
0x000000000012abee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x293381]; add rsp, 8; ret; 
0x00000000001088ce: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2b5591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f965e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c4801]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fcd06: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c4ce9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000000fcab6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c4f39]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000f781e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c6641]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f4bfe: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c9261]; mov dword ptr fs:[rax], 0x16; pop rbx; ret; 
0x00000000000f4b1e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2c9341]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000000f22ae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2cbbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f19ee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2cc471]; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f194e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2cc511]; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f11be: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2ccca1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f10ee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2ccd71]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000f061e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2cd841]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ee2ae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2cfbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ed386: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2d0ad9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000eb1ae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2d2cb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb14e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2d2d11]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000c12ae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2fcbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bf77e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2fe6e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bc386: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x307c79]; lea rdi, qword ptr [rip + 0x30376a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b42ee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x309b71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b210c: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x311d03]; add rsp, 8; ret; 
0x000000000008aa99: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x339576]; lea rdi, qword ptr [rip + 0x336247]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008094f: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x33d460]; mov rdi, rcx; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x00000000000807ff: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x33d5b0]; mov qword ptr [rsp + 0x28], r14; mov rdi, r14; call qword ptr [rax]; 
0x000000000007c84e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x342949]; ret; 
0x0000000000071416: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x34ca49]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000003cd56: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x381109]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003ccae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3811b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037b7e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3862e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037a7e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3863e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000378de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x386581]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000003779e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3866c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037766: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3866f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000376b6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3867a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036c7e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3871e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036be6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x387279]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000003012e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x38dda1]; add rax, qword ptr fs:[0]; ret; 
0x000000000002faae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x38e309]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000002fa6a: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x38e365]; mov qword ptr [rax], rdx; ret; 
0x00000000000340e6: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x38ff21]; lea rdi, qword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032046: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x391fc1]; lea rdi, qword ptr [rip + 0x38dd0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003201e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x391fd9]; lea rdi, qword ptr [rip + 0x38dd32]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318c4: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x392743]; lea rdi, qword ptr [rip + 0x38e22c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000305de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x393a21]; lea rdi, qword ptr [rip + 0x38f692]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030396: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x393c69]; lea rdi, qword ptr [rip + 0x38f8da]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f86e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x394791]; lea rdi, qword ptr [rip + 0x390282]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d506: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x396b01]; lea rdi, qword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d4de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x396b29]; lea rdi, qword ptr [rip + 0x392612]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d27e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x396d81]; lea rdi, qword ptr [rip + 0x392872]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002275e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x39b701]; add rax, qword ptr fs:[0]; ret; 
0x00000000000237de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3a0461]; ret; 
0x00000000000237ce: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3a0481]; ret; 
0x00000000000fe0de: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002ff5e: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000300ce: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000300de: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000d1f36: add byte ptr [rax], al; mov rax, qword ptr [rsi + 8]; mov qword ptr [rax + 0x20], rsi; xor eax, eax; ret; 
0x000000000002efde: add byte ptr [rax], al; mov rax, qword ptr [rsi + rdx*8 + 0x80]; ret; 
0x0000000000121226: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x18]; mov esi, r13d; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000012696e: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x38]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000126a85: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x58]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000003d076: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011ece4: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x000000000007e469: add byte ptr [rax], al; mov rax, r8; ret; 
0x0000000000079467: add byte ptr [rax], al; mov rax, rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000114bb6: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000079d46: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000005d46d: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000003ca68: add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x000000000003576c: add byte ptr [rax], al; mov rax, rcx; pop rbx; ret; 
0x0000000000035776: add byte ptr [rax], al; mov rax, rcx; ret; 
0x000000000010bfce: add byte ptr [rax], al; mov rax, rdi; add rsp, 8; ret; 
0x000000000003c8de: add byte ptr [rax], al; mov rax, rdi; cqo; idiv rsi; ret; 
0x000000000007c87e: add byte ptr [rax], al; mov rax, rdi; ret; 
0x0000000000133886: add byte ptr [rax], al; mov rax, rdx; add rsp, 8; ret; 
0x0000000000082be8: add byte ptr [rax], al; mov rax, rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000006ebe3: add byte ptr [rax], al; mov rax, rdx; pop rbx; ret; 
0x0000000000074436: add byte ptr [rax], al; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000007b97f: add byte ptr [rax], al; mov rbx, rdi; call qword ptr [rax + 0x60]; 
0x00000000001445ee: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001447ce: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001449ae: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144b9e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144d9e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f9e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014440e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000009e46e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009ce5e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000009db2e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000009ce6e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000a4792: add byte ptr [rax], al; mov rcx, r13; mov rdi, rbp; call rbx; 
0x00000000001334e5: add byte ptr [rax], al; mov rcx, rsp; call 0x133250; add rsp, 0x98; ret; 
0x00000000000f2f63: add byte ptr [rax], al; mov rdi, -0x64; mov eax, 0x118; syscall; 
0x000000000011f47d: add byte ptr [rax], al; mov rdi, qword ptr [r12]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x0000000000123d6b: add byte ptr [rax], al; mov rdi, qword ptr [r13]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x0000000000128202: add byte ptr [rax], al; mov rdi, qword ptr [r15]; mov rsi, r13; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000cc9c1: add byte ptr [rax], al; mov rdi, qword ptr [rbp - 0xa8]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rbp - 0x120]; mov qword ptr [rsp], rax; call rbx; 
0x0000000000023767: add byte ptr [rax], al; mov rdi, qword ptr [rbx + 0x18]; call rax; 
0x00000000000868e4: add byte ptr [rax], al; mov rdi, qword ptr [rdi + 0x48]; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x00000000000d499e: add byte ptr [rax], al; mov rdi, qword ptr [rsi + 0x28]; call 0x1f4f0; xor eax, eax; pop rbx; ret; 
0x00000000000ed096: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 8]; syscall; 
0x00000000000ebab3: add byte ptr [rax], al; mov rdi, r10; mov eax, r9d; syscall; 
0x0000000000124440: add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000012c397: add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x0000000000125f5b: add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000079e12: add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x00000000000869c6: add byte ptr [rax], al; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x00000000000f5e60: add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x000000000012c16d: add byte ptr [rax], al; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x000000000011fee8: add byte ptr [rax], al; mov rdi, r13; call qword ptr [rax]; 
0x000000000011fee8: add byte ptr [rax], al; mov rdi, r13; call qword ptr [rax]; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000000f5d2c: add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x00000000001281d1: add byte ptr [rax], al; mov rdi, r13; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x000000000012071a: add byte ptr [rax], al; mov rdi, r14; call qword ptr [rax + 0x20]; 
0x00000000000f5ca4: add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x000000000002e202: add byte ptr [rax], al; mov rdi, r14; mov eax, 3; syscall; 
0x0000000000074d56: add byte ptr [rax], al; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000011fce0: add byte ptr [rax], al; mov rdi, r15; call qword ptr [rax]; 
0x00000000000f5c95: add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000085fb0: add byte ptr [rax], al; mov rdi, r15; mov rdx, rbx; mov rsi, r13; call rax; 
0x00000000000ebbc3: add byte ptr [rax], al; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000006e00d: add byte ptr [rax], al; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000121575: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000121550: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x0000000000120ee7: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000011fff1: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax]; 
0x0000000000075a93: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000121707: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbx]; 
0x00000000000f60ea: add byte ptr [rax], al; mov rdi, rbp; call rbx; 
0x000000000002c20b: add byte ptr [rax], al; mov rdi, rbp; mov eax, 3; syscall; 
0x00000000000a42e3: add byte ptr [rax], al; mov rdi, rbp; mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000011c2c9: add byte ptr [rax], al; mov rdi, rbx; call 0x11a4a0; add rsp, 0x90; pop rbx; ret; 
0x000000000007b7c9: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001215c4: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000007bd69: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x0000000000079d61: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000006de8a: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x00000000000706f2: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000006cdf2: add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000035892: add byte ptr [rax], al; mov rdi, rbx; mov eax, 3; syscall; 
0x00000000000f0828: add byte ptr [rax], al; mov rdi, rbx; mov eax, ebp; mov r13d, dword ptr fs:[r12]; syscall; 
0x000000000007c535: add byte ptr [rax], al; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000006ff9d: add byte ptr [rax], al; mov rdi, rbx; mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000135810: add byte ptr [rax], al; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000120998: add byte ptr [rax], al; mov rdi, rbx; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x00000000000857b3: add byte ptr [rax], al; mov rdi, rbx; mov rdx, r15; call rax; 
0x00000000000769d5: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000074825: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000007462a: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000004a711: add byte ptr [rax], al; mov rdi, rbx; sub r13, rsi; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000000c119e: add byte ptr [rax], al; mov rdi, rdx; mov eax, r8d; syscall; 
0x00000000000e4a82: add byte ptr [rax], al; mov rdi, rdx; syscall; 
0x000000000012cede: add byte ptr [rax], al; mov rdi, rsp; call rdx; 
0x000000000012cede: add byte ptr [rax], al; mov rdi, rsp; call rdx; add rsp, 0x38; ret; 
0x00000000000bdfc0: add byte ptr [rax], al; mov rdi, rsp; mov qword ptr [rsp + 0x10], rsi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1e1d: add byte ptr [rax], al; mov rdi, rsp; mov rax, qword ptr [rip + 0x30222f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1dbd: add byte ptr [rax], al; mov rdi, rsp; mov rax, qword ptr [rip + 0x30228f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010816e: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x0000000000112f36: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x2aaf29]; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000e316e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x2dae39]; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x000000000008687e: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x3376c1]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x00000000000e4de4: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x100], rdx; ret; 
0x000000000014ce1e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cdae: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cd3e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cc5e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cbee: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cb7e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014c62e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c49e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c40e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014424e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c6ae: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000009ce4e: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000036e84: add byte ptr [rax], al; mov rdx, qword ptr [rsp + 0x38]; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000062dfc: add byte ptr [rax], al; mov rdx, r10; mov qword ptr [rbp - 0x10e0], r10; mov rsi, r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000004b8f0: add byte ptr [rax], al; mov rdx, r10; mov qword ptr [rbp - 0x508], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004b7df: add byte ptr [rax], al; mov rdx, r10; mov qword ptr [rbp - 0x538], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000085510: add byte ptr [rax], al; mov rdx, r12; mov rdi, r15; call rax; 
0x000000000004c1fb: add byte ptr [rax], al; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006ed8f: add byte ptr [rax], al; mov rdx, r12; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006e6e6: add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078d9e: add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000079036: add byte ptr [rax], al; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x00000000000a4197: add byte ptr [rax], al; mov rdx, r13; mov rdi, rbp; call rbx; 
0x000000000004a191: add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x598]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007655f: add byte ptr [rax], al; mov rdx, r14; mov rdi, rbx; call rax; 
0x0000000000079691: add byte ptr [rax], al; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x0000000000110e27: add byte ptr [rax], al; mov rdx, r15; mov rdi, r12; call rax; 
0x000000000007318e: add byte ptr [rax], al; mov rdx, r8; mov rsi, r12; mov rdi, r13; mov eax, r9d; syscall; 
0x000000000006fdfc: add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x00000000000704c5: add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000007a3ce: add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000008616f: add byte ptr [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000060d97: add byte ptr [rax], al; mov rdx, rcx; mov qword ptr [rbp - 0x1148], rcx; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000004a306: add byte ptr [rax], al; mov rdx, rcx; mov qword ptr [rbp - 0x538], rcx; mov rsi, qword ptr [rbp - 0x540]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004aaa3: add byte ptr [rax], al; mov rsi, qword ptr [r12 + 0x18]; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x00000000001281e6: add byte ptr [rax], al; mov rsi, qword ptr [rbp - 0x180]; mov rdi, r13; add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x00000000000f543f: add byte ptr [rax], al; mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000065aa8: add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x00000000000641b0: add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed34: add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fca: add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efc0: add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e8c: add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x0000000000123d58: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000f1d1b: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x18]; movsxd rdi, dword ptr [rsp + 0x14]; syscall; 
0x000000000011f574: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000070688: add byte ptr [rax], al; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000000fc1c7: add byte ptr [rax], al; mov rsi, r12; mov rdi, r9; mov qword ptr [rbp - 0x6d0], rax; mov eax, ebx; syscall; 
0x0000000000085300: add byte ptr [rax], al; mov rsi, r12; mov rdi, rbx; call rax; 
0x000000000012b43c: add byte ptr [rax], al; mov rsi, r13; mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x000000000006f5c3: add byte ptr [rax], al; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000012d9f6: add byte ptr [rax], al; mov rsi, r13; mov rdi, rbp; mov edx, 0xffffffff; xor eax, eax; call rcx; 
0x000000000010307d: add byte ptr [rax], al; mov rsi, r13; mov rdx, rax; mov edi, 0x2000003; call qword ptr [rbx + 0x28]; 
0x0000000000085092: add byte ptr [rax], al; mov rsi, r14; call rax; 
0x00000000000792ae: add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000049cff: add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; sub r12, r14; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x00000000000fc0ca: add byte ptr [rax], al; mov rsi, r15; mov rdi, r9; mov eax, 0x14; syscall; 
0x0000000000075cb1: add byte ptr [rax], al; mov rsi, r15; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x0000000000036db4: add byte ptr [rax], al; mov rsi, rax; mov eax, ecx; syscall; 
0x000000000008632a: add byte ptr [rax], al; mov rsi, rbp; mov rdi, rbx; call rax; 
0x00000000000fa643: add byte ptr [rax], al; mov rsi, rbp; mov rdi, rbx; mov eax, 0x11a; syscall; 
0x0000000000037c32: add byte ptr [rax], al; mov rsi, rbx; mov eax, 0x80; syscall; 
0x00000000000c0903: add byte ptr [rax], al; mov rsi, rdi; mov eax, ecx; syscall; 
0x00000000000738d7: add byte ptr [rax], al; mov rsi, rdi; mov rdx, rbp; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x0000000000123ba6: add byte ptr [rax], al; mov word ptr [r8 + 0x6c], ax; mov eax, 1; ret; 
0x00000000001a8232: add byte ptr [rax], al; mov word ptr [rax + 0x3ae80001], fs; cmc; jmp qword ptr [rcx]; 
0x0000000000198e32: add byte ptr [rax], al; mov word ptr [rax + rax - 0x120a0800], gs; jmp qword ptr [rbx]; 
0x0000000000192232: add byte ptr [rax], al; mov word ptr [rax], es; add al, cl; mov cl, 0xea; call qword ptr [rax]; 
0x00000000001a7f32: add byte ptr [rax], al; mov word ptr [rbp + 0x33080001], ds; cmc; jmp qword ptr [rcx]; 
0x0000000000196332: add byte ptr [rax], al; mov word ptr [rcx - 0x56b80000], es; in eax, dx; call rcx; 
0x000000000015a4de: add byte ptr [rax], al; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000015a4ce: add byte ptr [rax], al; mov word ptr [rcx], dx; ret; 
0x0000000000190b32: add byte ptr [rax], al; mov word ptr [rcx], gs; add byte ptr [rax], al; mov byte ptr [rcx - 0x16], ch; jmp qword ptr [rcx]; 
0x00000000001a8932: add byte ptr [rax], al; mov word ptr [rdi + 0x5d580001], fs; cmc; call qword ptr [rcx]; 
0x000000000009ddbe: add byte ptr [rax], al; mov word ptr [rdi], dx; ret; 
0x000000000009692e: add byte ptr [rax], al; mov word ptr [rdi], si; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009693e: add byte ptr [rax], al; mov word ptr [rdi], si; mov byte ptr [rdi + 2], 0; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009689e: add byte ptr [rax], al; mov word ptr [rdi], si; mov byte ptr [rdi + 2], 0; mov rax, rdi; ret; 
0x000000000009688e: add byte ptr [rax], al; mov word ptr [rdi], si; mov rax, rdi; ret; 
0x00000000001a7c32: add byte ptr [rax], al; mov word ptr [rdx + 0x2ef80001], ds; cmc; jmp qword ptr [rcx]; 
0x00000000001a6432: add byte ptr [rax], al; mov word ptr [rdx - 0x3377ffff], es; hlt; jmp qword ptr [rcx]; 
0x0000000000133e45: add byte ptr [rax], al; mov word ptr [rip + 0x28fbb2], ax; mov eax, 1; add rsp, 8; ret; 
0x000000000003d31d: add byte ptr [rax], al; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x000000000003d364: add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000003d2c6: add byte ptr [rax], al; mov word ptr [rsi], ax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x00000000001a0832: add byte ptr [rax], al; mov word ptr [rsi], fs; add dword ptr [rax], eax; sbb dl, cl; int1; call qword ptr [rsi]; 
0x0000000000036832: add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000036812: add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000368ec: add byte ptr [rax], al; mov word ptr [rsp - 0x10], dx; mov dword ptr [rdi], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000116281: add byte ptr [rax], al; mov word ptr [rsp], ax; mov dword ptr [rsp + 4], r11d; call 0x115190; add rsp, 0x88; ret; 
0x000000000009dbae: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x000000000009cf0e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000009cf8e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000009cf4e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000009cf6e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000009d08e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000009d02e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000009d04e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000009d06e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000009f37e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009e53e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009cede: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000a0dee: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000009de8e: add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x000000000009de9e: add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000099ac0: add byte ptr [rax], al; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000001b2a4a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add al, byte ptr [rax]; ror byte ptr [rax - 9], 1; jmp qword ptr [rsi]; 
0x0000000000192b4a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [r8], al; cmp byte ptr [rdx], 0xfa; jmp qword ptr [rcx]; 
0x00000000001a634a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rcx], 0xf4c5c000; call qword ptr [rax + 5]; 
0x00000000001b634a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rdx], 0xf7f5c000; call rdx; 
0x00000000001a084a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr es:[rax], eax; and dl, cl; int1; call qword ptr [rbx]; 
0x00000000001a484a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add word ptr [rax], ax; xor byte ptr [rcx], cl; hlt; jmp rdx; 
0x000000000019ca4a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; call 0xffffffffbb09ca52; out dx, al; call qword ptr [rdi]; 
0x00000000001b5b4a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; jns 0x1b5b51; add al, ah; fcomi st(7); jmp qword ptr [rbx]; 
0x000000000018833e: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; por mm7, mm7; mov esp, 0xb4000095; adc bl, ch; call rsp; 
0x00000000001aa44a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; ret 1; 
0x000000000019fb4a: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; sbb dword ptr [rcx], eax; add al, al; sbb cl, dh; jmp qword ptr [rcx]; 
0x00000000001a870a: add byte ptr [rax], al; movsd dword ptr [rdi], dword ptr fs:[rsi]; add dword ptr [rax], eax; push rbp; cmc; call qword ptr [rcx]; 
0x000000000003d026: add byte ptr [rax], al; movsd xmm0, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000012e176: add byte ptr [rax], al; movsx eax, byte ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e0b6: add byte ptr [rax], al; movsx eax, word ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012d3a6: add byte ptr [rax], al; movsx rax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000fa53e: add byte ptr [rax], al; movsxd r10, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x119; syscall; 
0x000000000005ea6d: add byte ptr [rax], al; movsxd r12, edx; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000049be5: add byte ptr [rax], al; movsxd r13, edx; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000006d0b6: add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000012cf46: add byte ptr [rax], al; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000003cad4: add byte ptr [rax], al; movsxd rax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000ebc4c: add byte ptr [rax], al; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000000f0a88: add byte ptr [rax], al; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000f4836: add byte ptr [rax], al; movsxd rdi, ebp; mov eax, 3; syscall; 
0x00000000000464db: add byte ptr [rax], al; movsxd rdi, ebx; syscall; 
0x00000000000f0a44: add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0x10; syscall; 
0x00000000001088a6: add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0xe3; syscall; 
0x0000000000036ed4: add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x00000000000f0940: add byte ptr [rax], al; movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000000323d0: add byte ptr [rax], al; movsxd rdi, r12d; mov eax, 3; syscall; 
0x000000000002e6d5: add byte ptr [rax], al; movsxd rdi, r13d; mov eax, 3; syscall; 
0x0000000000117ebf: add byte ptr [rax], al; movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x000000000004ef02: add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006f5f2: add byte ptr [rax], al; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000f1eee: add byte ptr [rax], al; movsxd rdx, edi; mov esi, 0x28121969; mov rdi, -0x11e2153; mov eax, 0xa9; syscall; 
0x0000000000117da6: add byte ptr [rax], al; movsxd rdx, edx; mov eax, ebx; mov byte ptr [rdi + rdx], 0; pop rbx; ret; 
0x00000000000ecf4e: add byte ptr [rax], al; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x107; syscall; 
0x00000000000f7f50: add byte ptr [rax], al; movsxd rsi, eax; movsxd rdi, r12d; mov eax, edx; syscall; 
0x00000000000ece8e: add byte ptr [rax], al; movsxd rsi, esi; mov eax, 0x10a; syscall; 
0x000000000007a722: add byte ptr [rax], al; movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x000000000016360e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000016366e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000016365e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000016364e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000016363e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000016362e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000016361e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000160b2e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000001608e1: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000015fc8e: add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000012e1d6: add byte ptr [rax], al; movzx eax, byte ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e116: add byte ptr [rax], al; movzx eax, word ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012d406: add byte ptr [rax], al; movzx eax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000e2b48: add byte ptr [rax], al; movzx ebx, byte ptr [rcx + 8]; movsxd rbx, dword ptr [r10 + rbx*4]; add rbx, r10; jmp rbx; 
0x00000000000883ce: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000014cabe: add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000014d19e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000002585e: add byte ptr [rax], al; movzx edx, sil; test sil, sil; mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x000000000014ca3e: add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000014d12e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000007b5fc: add byte ptr [rax], al; movzx esi, byte ptr [rbp]; mov rdi, r12; lea r13, qword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x00000000001087fa: add byte ptr [rax], al; neg ecx; cmp edx, -0x16; cmovne eax, ecx; ret; 
0x00000000000fa979: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x00000000000ebeb9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x00000000000ebf19: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x00000000000faaf9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x00000000000faf49: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x00000000000fa8b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x00000000000ebee9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x00000000000cb299: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x00000000000f4989: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x00000000000fbe99: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1d; syscall; 
0x00000000000fbec9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1f; syscall; 
0x00000000000ebe89: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000c0b89: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x25; syscall; 
0x00000000000b4289: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x00000000000fb5a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x00000000000fb1d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x00000000000fbda9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x40; syscall; 
0x00000000000fbd79: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x41; syscall; 
0x00000000000fbe69: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x43; syscall; 
0x00000000000fbd49: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x47; syscall; 
0x00000000000f30b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x4d; syscall; 
0x00000000000ebfd9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x00000000000eb3a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x00000000000ec7d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x00000000000ec809: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000f0c59: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x62; syscall; 
0x00000000000fab59: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000c1f09: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000c1f39: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000c1f39: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; ret; 
0x00000000000c1f99: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000c1fc9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000c1ff9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x00000000000fa469: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7a; syscall; 
0x00000000000fa499: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x00000000000fa859: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x00000000000fa889: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x00000000000fae29: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x00000000000fac19: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x87; syscall; 
0x00000000000eb259: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000000cb209: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000000cb239: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x00000000000cb269: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x00000000000cb2c9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000000cb2f9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000000cb329: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x00000000000f4a19: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x00000000000f4a49: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x00000000000f4a79: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x00000000000fa7b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x00000000000fac49: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000000f0c29: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa0; syscall; 
0x00000000000f1d99: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x00000000000f21a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000000f21d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x00000000000f48c9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x00000000000fa279: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x00000000000fa8e9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x00000000000fa919: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x00000000000fa439: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x00000000000f8179: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x00000000000f8059: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x00000000000fa949: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x00000000000fa7e9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x00000000000fa7e9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; ret; 
0x00000000000faac9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x00000000000fab29: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x00000000000c08f9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov ecx, 0x64; mov rsi, rdi; mov eax, ecx; syscall; 
0x00000000000eb479: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov edx, edx; movsxd rdi, edi; mov eax, 0x102; syscall; 
0x0000000000036f29: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov esi, 8; mov eax, 0x7f; syscall; 
0x00000000000faee9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000000faf79: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000000fb039: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x136; syscall; 
0x00000000000fb5d9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x35; syscall; 
0x00000000000fb209: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000000fbdd9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x42; syscall; 
0x00000000000fac79: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x9d; syscall; 
0x00000000000fab89: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000000faa69: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000000f8209: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000000f81a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbd; syscall; 
0x00000000000f8089: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000000f8119: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000000f49b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000000fa9a9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000000ecee9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov r10, rcx; movsxd rdi, edi; mov eax, 0x10b; syscall; 
0x00000000000f11b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2ccca1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x0000000000036c79: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3871e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ecf49: add byte ptr [rax], al; nop dword ptr [rax + rax]; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x107; syscall; 
0x00000000000ece89: add byte ptr [rax], al; nop dword ptr [rax + rax]; movsxd rsi, esi; mov eax, 0x10a; syscall; 
0x00000000000b2022: add byte ptr [rax], al; nop dword ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000005db8b: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x52; syscall; 
0x00000000000e4d1a: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000072eca: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x00000000000c0aaa: add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x3d; syscall; 
0x000000000011f462: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x20]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000010c8bb: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2b1591]; add rax, qword ptr fs:[0]; ret; 
0x000000000002c28a: add byte ptr [rax], al; nop dword ptr [rax]; mov rdi, rbp; mov eax, 3; syscall; 
0x000000000009eb68: add byte ptr [rax], al; nop word ptr [rax + rax]; lea r11, qword ptr [rip + 0xd9a49]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d4c8: add byte ptr [rax], al; nop word ptr [rax + rax]; lea r11, qword ptr [rip + 0xdaf09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000fa405: add byte ptr [rax], al; nop word ptr [rax + rax]; mov eax, 0xa6; syscall; 
0x0000000000074530: add byte ptr [rax], al; nop word ptr [rax + rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000fc768: add byte ptr [rax], al; nop word ptr [rax + rax]; mov qword ptr [rip + 0x2c1b85], 0; pop rbp; ret; 
0x000000000006d968: add byte ptr [rax], al; nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000019d1be: add byte ptr [rax], al; nop; adc bh, dl; call qword ptr [rax]; 
0x000000000019a1de: add byte ptr [rax], al; nop; and al, 0xee; call qword ptr [rsi]; 
0x000000000003607c: add byte ptr [rax], al; nop; andpd xmm0, xmmword ptr [rip + 0x14f858]; andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x00000000001176bd: add byte ptr [rax], al; nop; lea eax, dword ptr [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000000faf1c: add byte ptr [rax], al; nop; mov eax, 0x11f; syscall; 
0x00000000000fbe3c: add byte ptr [rax], al; nop; mov eax, 0x1e; syscall; 
0x00000000000fb57c: add byte ptr [rax], al; nop; mov eax, 0x30; syscall; 
0x00000000000fb23c: add byte ptr [rax], al; nop; mov eax, 0x32; syscall; 
0x00000000000c11dd: add byte ptr [rax], al; nop; mov eax, 0x3b; syscall; 
0x00000000000ebcbd: add byte ptr [rax], al; nop; mov eax, 0x49; syscall; 
0x00000000000eb44c: add byte ptr [rax], al; nop; mov eax, 0x53; syscall; 
0x00000000000ecebd: add byte ptr [rax], al; nop; mov eax, 0x59; syscall; 
0x00000000000374bc: add byte ptr [rax], al; nop; mov eax, 0x83; syscall; 
0x00000000000f49ec: add byte ptr [rax], al; nop; mov eax, 0x95; syscall; 
0x00000000000fa78c: add byte ptr [rax], al; nop; mov eax, 0x9e; syscall; 
0x00000000000fa82c: add byte ptr [rax], al; nop; mov eax, 0x9f; syscall; 
0x00000000000fabec: add byte ptr [rax], al; nop; mov eax, 0xb4; syscall; 
0x00000000000f489c: add byte ptr [rax], al; nop; mov eax, 0xb; syscall; 
0x00000000000f80ec: add byte ptr [rax], al; nop; mov eax, 0xc2; syscall; 
0x00000000000f814c: add byte ptr [rax], al; nop; mov eax, 0xc3; syscall; 
0x00000000000f802c: add byte ptr [rax], al; nop; mov eax, 0xc4; syscall; 
0x00000000000f81dc: add byte ptr [rax], al; nop; mov eax, 0xc5; syscall; 
0x00000000000faa9c: add byte ptr [rax], al; nop; mov eax, 0xfe; syscall; 
0x00000000000746fc: add byte ptr [rax], al; nop; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000bd33c: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi]; ret; 
0x00000000000735ec: add byte ptr [rax], al; nop; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x0000000000037b9c: add byte ptr [rax], al; nop; mov eax, dword ptr [rip + 0x3864fa]; ret; 
0x000000000010c54d: add byte ptr [rax], al; nop; mov eax, edi; ror ax, 8; ret; 
0x00000000000fb06c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000000fabbc: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000000facac: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000000facdc: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb3; syscall; 
0x0000000000132d0c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb5; syscall; 
0x0000000000132d5c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xb6; syscall; 
0x00000000000f80bc: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000000f7ffd: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xc1; syscall; 
0x00000000000fbe0c: add byte ptr [rax], al; nop; mov r10, rcx; mov eax, 0xdc; syscall; 
0x0000000000132dac: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x28b0b1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d8c: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x28b0d1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d3c: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x28b121]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000011c40d: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x2a1bd9]; mov rax, qword ptr fs:[rax]; ret; 
0x00000000000fb09c: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x2c2dc1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000003783c: add byte ptr [rax], al; nop; mov rax, qword ptr [rip + 0x386621]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000e449d: add byte ptr [rax], al; nop; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x0000000000036c9c: add byte ptr [rax], al; nop; nop; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000019856e: add byte ptr [rax], al; nop; out dx, eax; in eax, dx; jmp qword ptr [rcx]; 
0x000000000003666d: add byte ptr [rax], al; nop; pmovmskb eax, xmm0; and eax, 8; ret; 
0x000000000001b036: add byte ptr [rax], al; nop; ret 0x3b; 
0x000000000001b336: add byte ptr [rax], al; nop; ret; 
0x000000000018f16e: add byte ptr [rax], al; nop; shr ecx, cl; call qword ptr [rcx + 5]; 
0x00000000001a4cb2: add byte ptr [rax], al; or al, 0x6b; add dword ptr [rax], eax; test al, 0x65; hlt; jmp qword ptr [rcx]; 
0x00000000001a7db2: add byte ptr [rax], al; or al, 0x9c; add dword ptr [rax], eax; or byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001aa8b2: add byte ptr [rax], al; or al, 0xc7; add dword ptr [rax], eax; test al, 0xd6; cmc; jmp qword ptr [rsi]; 
0x00000000001aeab2: add byte ptr [rax], al; or al, 9; add al, byte ptr [rax]; cmp byte ptr [rdx - 0xa], bl; call qword ptr [rdi]; 
0x000000000000cc66: add byte ptr [rax], al; or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000036147: add byte ptr [rax], al; or byte ptr [rax + 0x21], 0xd0; movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x0000000000190d56: add byte ptr [rax], al; or byte ptr [rax - 0x16], dh; call qword ptr [rdx + 1]; 
0x000000000001ac1e: add byte ptr [rax], al; or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17c5; 
0x000000000001bef6: add byte ptr [rax], al; or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17c6; 
0x000000000001875e: add byte ptr [rax], al; or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17cf; 
0x000000000001af0e: add byte ptr [rax], al; or byte ptr [rbx + 0x18], bl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; ret 0x3b; 
0x00000000000c113b: add byte ptr [rax], al; or byte ptr [rcx + 0xfdaf7f2], 0x44; shl dword ptr [rcx + rcx*4 + 0x14], 1; and eax, 0x2d4; mov eax, 0x3a; syscall; 
0x000000000012260d: add byte ptr [rax], al; or byte ptr [rdi], 0xc8; mov dword ptr [rdx], eax; mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x0000000000192dc6: add byte ptr [rax], al; or byte ptr [rdx - 0x15], bl; jmp qword ptr [rsi]; 
0x00000000000f08b6: add byte ptr [rax], al; or byte ptr [rip - 0x80000000], 0x39; ret 0x9e75; 
0x0000000000165e1e: add byte ptr [rax], al; or ch, 0xeb; call qword ptr [rax]; 
0x0000000000078d1e: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000036ec9: add byte ptr [rax], al; or eax, 0xffffffff; ret; 
0x000000000000fb5e: add byte ptr [rax], al; or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x48; 
0x0000000000036731: add byte ptr [rax], al; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000001ac7f2: add byte ptr [rax], al; out 1, al; add al, ch; add dh, dh; jmp qword ptr [rbx + 1]; 
0x00000000001a1c8f: add byte ptr [rax], al; out dx, al; int1; call qword ptr [rdx]; 
0x0000000000004b06: add byte ptr [rax], al; outsb dx, byte ptr [rsi]; add eax, 0; add byte ptr [rax], al; ret 0x26; 
0x000000000003639e: add byte ptr [rax], al; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x000000000008bd09: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000096eb0: add byte ptr [rax], al; pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x00000000000739d3: add byte ptr [rax], al; pop r12; ret; 
0x0000000000053870: add byte ptr [rax], al; pop r13; ret; 
0x00000000000537a2: add byte ptr [rax], al; pop r14; ret; 
0x0000000000199296: add byte ptr [rax], al; pop rax; add esi, ebp; jmp rax; 
0x000000000018fee6: add byte ptr [rax], al; pop rax; and dl, ch; call qword ptr [rsi]; 
0x0000000000192056: add byte ptr [rax], al; pop rax; mov al, 0xea; jmp qword ptr [rdx]; 
0x00000000000fa377: add byte ptr [rax], al; pop rax; pop rdi; call rax; 
0x000000000001af8e: add byte ptr [rax], al; pop rax; ret 0x3b; 
0x000000000001b28e: add byte ptr [rax], al; pop rax; ret; 
0x000000000018f396: add byte ptr [rax], al; pop rax; std; jmp qword ptr [rax]; 
0x0000000000196406: add byte ptr [rax], al; pop rax; stosb byte ptr [rdi], al; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001911a6: add byte ptr [rax], al; pop rax; test edx, ebp; jmp qword ptr [rbx + 3]; 
0x00000000000a17ca: add byte ptr [rax], al; pop rbp; lea rax, qword ptr [r9 + 1]; pop r12; ret; 
0x00000000000fc727: add byte ptr [rax], al; pop rbp; ret; 
0x00000000000a1add: add byte ptr [rax], al; pop rbx; and eax, 0x3fc00; ret; 
0x000000000004890c: add byte ptr [rax], al; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000006fe73: add byte ptr [rax], al; pop rbx; mov eax, ebp; pop rbp; pop r12; ret; 
0x000000000006f48f: add byte ptr [rax], al; pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x000000000010ac57: add byte ptr [rax], al; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000077c9e: add byte ptr [rax], al; pop rbx; pop rbp; mov eax, 0xffffffff; pop r12; ret; 
0x000000000012256e: add byte ptr [rax], al; pop rbx; pop rbp; mov eax, 1; pop r12; ret; 
0x0000000000070665: add byte ptr [rax], al; pop rbx; pop rbp; mov eax, edx; pop r12; ret; 
0x000000000001ff71: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000021a1a: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000001f590: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000007a34e: add byte ptr [rax], al; pop rbx; pop rbp; xor eax, eax; pop r12; ret; 
0x000000000012e0af: add byte ptr [rax], al; pop rbx; ret; 
0x00000000001858ee: add byte ptr [rax], al; pop rcx; clc; ret 0x6e1f; 
0x000000000018888e: add byte ptr [rax], al; pop rdi; sbb esp, ebp; call rsp; 
0x000000000001e436: add byte ptr [rax], al; pop rdx; ret; 
0x000000000019632e: add byte ptr [rax], al; pop rsp; add byte ptr [rax], al; add byte ptr [rcx + rax*4 - 0x56b80000], cl; in eax, dx; call rcx; 
0x00000000001a892e: add byte ptr [rax], al; pop rsp; add byte ptr [rax], al; add byte ptr [rdi + 0x5d580001], cl; cmc; call qword ptr [rcx]; 
0x00000000001b1d02: add byte ptr [rax], al; pop rsp; cmp eax, dword ptr [rdx]; add byte ptr [rax], cl; or al, 0xf7; call qword ptr [rsi]; 
0x00000000001abb02: add byte ptr [rax], al; pop rsp; fld dword ptr [rcx]; add byte ptr [rax - 0x11], cl; cmc; jmp qword ptr [rax]; 
0x00000000001a5d02: add byte ptr [rax], al; pop rsp; jnp 0x1a5d08; add byte ptr [rax], cl; mov ch, 0xf4; call qword ptr [rbx]; 
0x0000000000199d02: add byte ptr [rax], al; pop rsp; mov ebx, 0x14180000; out dx, al; jmp qword ptr [rcx]; 
0x0000000000193202: add byte ptr [rax], al; pop rsp; push rax; add byte ptr [rax], al; sbb byte ptr [rsi - 0x15], ah; jmp qword ptr [rbx]; 
0x000000000019a402: add byte ptr [rax], al; pop rsp; ret 0; 
0x000000000019a502: add byte ptr [rax], al; pop rsp; ret; 
0x00000000001a7eea: add byte ptr [rax], al; popfq; add dword ptr [rax], eax; sal byte ptr [rdx], 0xf5; jmp qword ptr [rcx]; 
0x000000000000583e: add byte ptr [rax], al; push 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4c; 
0x00000000001931ea: add byte ptr [rax], al; push rax; add byte ptr [rax], al; adc byte ptr [rsi - 0x15], ah; call qword ptr [rdi]; 
0x00000000001860fc: add byte ptr [rax], al; push rax; pop r9; clc; ret 0x6e1f; 
0x000000000001af76: add byte ptr [rax], al; push rax; ret 0x3b; 
0x000000000001b276: add byte ptr [rax], al; push rax; ret; 
0x000000000019c13e: add byte ptr [rax], al; push rax; xchg dh, ch; call qword ptr [rdi]; 
0x000000000007442e: add byte ptr [rax], al; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x00000000000fa602: add byte ptr [rax], al; push rbx; movsxd rbx, edi; mov eax, ecx; mov rdi, rbx; syscall; 
0x0000000000188a26: add byte ptr [rax], al; push rdi; in eax, dx; lcall ptr [rcx + rax*8 + 0x57d40000]; in eax, dx; call rsp; 
0x000000000019f926: add byte ptr [rax], al; push rsp; add byte ptr [rax], al; add byte ptr [rdi + rdx + 0x7a00001], al; int1; call qword ptr [rax]; 
0x00000000001b62fa: add byte ptr [rax], al; push rsp; add dword ptr [rdx], 0xf7f43000; call rcx; 
0x00000000001a1dfa: add byte ptr [rax], al; push rsp; cmp al, 1; add al, ah; int1; jmp qword ptr [rdx]; 
0x00000000001aa8fa: add byte ptr [rax], al; push rsp; mov dword ptr [rcx], 0xf5d6f000; jmp qword ptr [rsi]; 
0x00000000001a70fa: add byte ptr [rax], al; push rsp; pop qword ptr [rcx]; add byte ptr [rax + 7], dl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001aa3fa: add byte ptr [rax], al; push rsp; ret 1; 
0x00000000001a0742: add byte ptr [rax], al; pushfq; and eax, 0xc9b80001; int1; jmp qword ptr [rbp]; 
0x00000000001a5b42: add byte ptr [rax], al; pushfq; jns 0x1a5b48; add al, ch; mov al, 0xf4; jmp qword ptr [rcx]; 
0x00000000001aa942: add byte ptr [rax], al; pushfq; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rdi]; 
0x00000000001aa642: add byte ptr [rax], al; pushfq; vaddps xmm10, xmm15, xmm13; cmc; jmp qword ptr [rsi]; 
0x000000000001b1f6: add byte ptr [rax], al; rcr byte ptr [rax + rbx], 0; add byte ptr [rax], al; add byte ptr [rax], ch; ret; 
0x000000000000edae: add byte ptr [rax], al; ret 0; 
0x000000000016e3c6: add byte ptr [rax], al; ret 0x12; 
0x000000000000a136: add byte ptr [rax], al; ret 0x15; 
0x000000000001ac26: add byte ptr [rax], al; ret 0x17c5; 
0x000000000001befe: add byte ptr [rax], al; ret 0x17c6; 
0x0000000000018766: add byte ptr [rax], al; ret 0x17cf; 
0x000000000001071e: add byte ptr [rax], al; ret 0x19; 
0x000000000016fdfe: add byte ptr [rax], al; ret 0x1d4; 
0x0000000000170596: add byte ptr [rax], al; ret 0x1d5; 
0x000000000016ee06: add byte ptr [rax], al; ret 0x24; 
0x0000000000004b0e: add byte ptr [rax], al; ret 0x26; 
0x000000000000054c: add byte ptr [rax], al; ret 0x2800; 
0x00000000000055a6: add byte ptr [rax], al; ret 0x31; 
0x000000000000ffb6: add byte ptr [rax], al; ret 0x33; 
0x000000000000f3e6: add byte ptr [rax], al; ret 0x34; 
0x00000000000078e6: add byte ptr [rax], al; ret 0x35; 
0x00000000000059c6: add byte ptr [rax], al; ret 0x37; 
0x0000000000004a06: add byte ptr [rax], al; ret 0x3b; 
0x0000000000000886: add byte ptr [rax], al; ret 0x440c; 
0x00000000000098ae: add byte ptr [rax], al; ret 0x47; 
0x000000000000fb66: add byte ptr [rax], al; ret 0x48; 
0x0000000000005846: add byte ptr [rax], al; ret 0x4c; 
0x000000000016dbc6: add byte ptr [rax], al; ret 0xc; 
0x000000000016dfc6: add byte ptr [rax], al; ret 0xf; 
0x000000000019cc1f: add byte ptr [rax], al; ret 0xffee; 
0x0000000000176e22: add byte ptr [rax], al; ret 0xfffd; 
0x0000000000000e1e: add byte ptr [rax], al; ret 1; 
0x000000000000100e: add byte ptr [rax], al; ret 2; 
0x000000000000ecd6: add byte ptr [rax], al; ret 3; 
0x00000000001717c2: add byte ptr [rax], al; ret 4; 
0x0000000000001586: add byte ptr [rax], al; ret 5; 
0x0000000000001726: add byte ptr [rax], al; ret 6; 
0x0000000000171dc2: add byte ptr [rax], al; ret 7; 
0x0000000000171fc2: add byte ptr [rax], al; ret 8; 
0x000000000016d7c6: add byte ptr [rax], al; ret 9; 
0x0000000000000977: add byte ptr [rax], al; ret; 
0x00000000001aacf2: add byte ptr [rax], al; retfq; add dword ptr [rax], eax; clc; fcomi st(5); call qword ptr [rax]; 
0x00000000001717be: add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x000000000010c57c: add byte ptr [rax], al; rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x000000000002fc10: add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001a7ff2: add byte ptr [rax], al; sahf; add dword ptr [rax], eax; clc; xor al, 0xf5; jmp qword ptr [rax]; 
0x00000000001aa6ef: add byte ptr [rax], al; salc; cmc; jmp qword ptr [rsi]; 
0x00000000000366b8: add byte ptr [rax], al; sar eax, 0x1f; sub edx, ecx; not eax; and eax, edx; ret; 
0x0000000000118f97: add byte ptr [rax], al; sar rdx, 4; add rdx, 1; syscall; 
0x00000000001aa496: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; hlt; ret 1; 
0x0000000000198e2e: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; mov word ptr [rax + rax - 0x120a0800], gs; jmp qword ptr [rbx]; 
0x00000000001b2ac2: add byte ptr [rax], al; sbb al, 0x49; add al, byte ptr [rax]; or byte ptr [rbx - 9], cl; jmp qword ptr [rax]; 
0x0000000000192dc2: add byte ptr [rax], al; sbb al, 0x4c; add byte ptr [rax], al; or byte ptr [rdx - 0x15], bl; jmp qword ptr [rsi]; 
0x00000000001a4bc2: add byte ptr [rax], al; sbb al, 0x6a; add dword ptr [rax], eax; fsub dword ptr [rbx - 0xc]; jmp qword ptr [rcx]; 
0x00000000001a62c2: add byte ptr [rax], al; sbb al, 0x81; add dword ptr [rax], eax; pop rax; ret; 
0x00000000001a69c2: add byte ptr [rax], al; sbb al, 0x88; add dword ptr [rax], eax; or bh, bl; hlt; jmp qword ptr [rcx]; 
0x00000000001a7cc2: add byte ptr [rax], al; sbb al, 0x9b; add dword ptr [rax], eax; mov byte ptr [rdi], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001aa7c2: add byte ptr [rax], al; sbb al, 0xc6; add dword ptr [rax], eax; sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x000000000019bdc2: add byte ptr [rax], al; sbb al, 0xdc; add byte ptr [rax], al; cmp byte ptr [rax - 0x12], dh; call qword ptr [rsi]; 
0x0000000000007c86: add byte ptr [rax], al; sbb al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000000fa16: add byte ptr [rax], al; sbb al, byte ptr cs:[rax]; add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; call qword ptr [rax]; 
0x000000000003739e: add byte ptr [rax], al; sbb byte ptr [rax + 0x450f4402], ch; ret 0x8944; 
0x000000000001af26: add byte ptr [rax], al; sbb byte ptr [rbx + 0x18], bl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], bh; ret 0x3b; 
0x0000000000199d06: add byte ptr [rax], al; sbb byte ptr [rsi + rbp*8], dl; jmp qword ptr [rcx]; 
0x0000000000193206: add byte ptr [rax], al; sbb byte ptr [rsi - 0x15], ah; jmp qword ptr [rbx]; 
0x0000000000188886: add byte ptr [rax], al; sbb esp, ebp; dec dword ptr [rsp + rsi*4 + 0x195f0000]; in al, dx; call rsp; 
0x00000000001a8fea: add byte ptr [rax], al; scasb al, byte ptr [rdi]; add dword ptr [rax], eax; mov al, 0x63; cmc; call rsp; 
0x000000000016edfe: add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x000000000010c5be: add byte ptr [rax], al; shl eax, 0x10; movzx esi, si; or eax, esi; bswap eax; ret; 
0x000000000010c5ce: add byte ptr [rax], al; shl eax, 0x18; and esi, 0xffffff; or eax, esi; bswap eax; ret; 
0x0000000000037790: add byte ptr [rax], al; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000037810: add byte ptr [rax], al; shl rax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x000000000019e01e: add byte ptr [rax], al; shr byte ptr [rax - 5], 1; call qword ptr [rax]; 
0x000000000018d247: add byte ptr [rax], al; stc; jmp rsp; 
0x00000000001ac5af: add byte ptr [rax], al; std; cmc; jmp rsp; 
0x000000000019fb5e: add byte ptr [rax], al; sub al, 0; add byte ptr [rax], al; mov esp, 0xd8000119; sbb cl, dh; jmp qword ptr [rax + 1]; 
0x00000000001a00d2: add byte ptr [rax], al; sub al, 0x1f; add dword ptr [rax], eax; pop rax; int1; call qword ptr [rdx]; 
0x00000000001a50d2: add byte ptr [rax], al; sub al, 0x6f; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xc], ch; call qword ptr [rax + 6]; 
0x00000000001b51d2: add byte ptr [rax], al; sub al, 0x70; add al, byte ptr [rax]; sbb byte ptr [rbx + rdi*8], al; jmp qword ptr [rdx]; 
0x00000000001a8cd2: add byte ptr [rax], al; sub al, 0xab; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xb], bl; jmp qword ptr [rdi + 1]; 
0x00000000001a8fd2: add byte ptr [rax], al; sub al, 0xae; add dword ptr [rax], eax; sbb byte ptr [rbx - 0xb], ah; jmp qword ptr [rcx]; 
0x000000000019a386: add byte ptr [rax], al; sub byte ptr [rax], ch; out dx, al; call qword ptr [rsi]; 
0x000000000019e19e: add byte ptr [rax], al; sub byte ptr [rdi], 0xf0; call qword ptr [rbx + 4]; 
0x00000000001906e6: add byte ptr [rax], al; sub byte ptr [rdx - 0x16], ah; call qword ptr [rdx]; 
0x00000000001b0a0a: add byte ptr [rax], al; sub byte ptr fs:[rdx], al; add byte ptr [rax + 0x64], dh; clc; jmp qword ptr [rbx]; 
0x0000000000187a86: add byte ptr [rax], al; sub dword ptr [rbx - 0x17], edi; call rsp; 
0x0000000000127ff8: add byte ptr [rax], al; sub eax, 1; bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000001609cc: add byte ptr [rax], al; sub eax, ecx; ret; 
0x00000000000366fd: add byte ptr [rax], al; sub eax, edx; sar eax, 0x10; ret; 
0x0000000000103d0a: add byte ptr [rax], al; sub ecx, eax; mov eax, ecx; ret; 
0x00000000000fd91e: add byte ptr [rax], al; sub edi, 0x30; xor eax, eax; cmp edi, 9; setbe al; ret; 
0x00000000001a790f: add byte ptr [rax], al; sub esi, ebp; jmp qword ptr [rcx]; 
0x00000000001220a5: add byte ptr [rax], al; sub qword ptr [rax + 0x68], 4; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x000000000007be06: add byte ptr [rax], al; sub r8, rcx; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000075106: add byte ptr [rax], al; sub r8, rcx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000103d9e: add byte ptr [rax], al; sub r8d, eax; mov eax, r8d; ret; 
0x00000000000885d1: add byte ptr [rax], al; sub rax, rdx; ret; 
0x000000000007521e: add byte ptr [rax], al; sub rdx, qword ptr [rax + 8]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x000000000011621e: add byte ptr [rax], al; sub rsp, -0x80; xor eax, eax; pop rbx; ret; 
0x00000000001334de: add byte ptr [rax], al; sub rsp, 0x98; mov rcx, rsp; call 0x133250; add rsp, 0x98; ret; 
0x000000000003cfae: add byte ptr [rax], al; sub rsp, 8; call 0x3ca70; add rsp, 8; ret; 
0x000000000011af7e: add byte ptr [rax], al; sub rsp, 8; call 0xc1cc0; add rsp, 8; movzx eax, ax; ret; 
0x000000000011fa6e: add byte ptr [rax], al; sub rsp, 8; call 0xf1a90; mov dword ptr [rip + 0x2a3cc1], eax; add rsp, 8; ret; 
0x00000000000f394e: add byte ptr [rax], al; sub rsp, 8; call 0xf36b0; mov qword ptr [rip + 0x2cdcd0], rax; add rsp, 8; ret; 
0x000000000012e8be: add byte ptr [rax], al; sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x6eb20; add rsp, 8; ret; 
0x000000000001ff68: add byte ptr [rax], al; syscall; 
0x00000000000cb60b: add byte ptr [rax], al; syscall; neg eax; ret; 
0x0000000000108095: add byte ptr [rax], al; syscall; pop rdx; pop rsi; ret; 
0x00000000000c1d03: add byte ptr [rax], al; syscall; ret; 
0x00000000001aae2a: add byte ptr [rax], al; test ah, cl; add dword ptr [rax], eax; shl al, 0xf5; call qword ptr [rax]; 
0x0000000000194cc6: add byte ptr [rax], al; test al, 0x92; in eax, dx; jmp qword ptr [rcx + 0x4000001]; 
0x0000000000197466: add byte ptr [rax], al; test al, 0xba; in eax, dx; jmp qword ptr [rdi]; 
0x00000000001aa92a: add byte ptr [rax], al; test bh, al; add dword ptr [rax], eax; push rax; ret 0xfff8; 
0x000000000019d12a: add byte ptr [rax], al; test bh, ch; add byte ptr [rax], al; cmp bl, 0xee; call qword ptr [rax]; 
0x0000000000188a76: add byte ptr [rax], al; test byte ptr [rax - 0x13], ah; jmp rsp; 
0x0000000000193a2a: add byte ptr [rax], al; test byte ptr [rax], bl; add byte ptr [rax], dl; or esp, ebp; jmp qword ptr [rcx]; 
0x00000000001a752a: add byte ptr [rax], al; test byte ptr [rbx + 0x20c00001], dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a852a: add byte ptr [rax], al; test byte ptr [rbx + 0x47200001], ah; cmc; jmp rax; 
0x000000000019752a: add byte ptr [rax], al; test byte ptr [rbx - 0x42800000], dl; in eax, dx; jmp qword ptr [rax]; 
0x00000000001a7b2a: add byte ptr [rax], al; test byte ptr [rcx + 0x2dc00001], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a5b2a: add byte ptr [rax], al; test byte ptr [rcx + 1], bh; add al, dl; mov al, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a532a: add byte ptr [rax], al; test byte ptr [rcx + 1], dh; add al, dl; jp 0x1a5327; jmp qword ptr [rcx]; 
0x00000000001b392a: add byte ptr [rax], al; test byte ptr [rdi + 2], dl; add byte ptr [rax + 0x76], dl; idiv edi; ret 0; 
0x00000000001a692a: add byte ptr [rax], al; test byte ptr [rdi - 0x22efffff], al; hlt; call qword ptr [rdx]; 
0x00000000001a842a: add byte ptr [rax], al; test byte ptr [rdx + 0x43900001], ah; cmc; call qword ptr [rax]; 
0x00000000001a942a: add byte ptr [rax], al; test byte ptr [rdx + 0x69e00001], dh; cmc; call rcx; 
0x00000000001b65ea: add byte ptr [rax], al; test byte ptr [rdx], r8b; add byte ptr [rax], dl; push rdi; call qword ptr [rcx]; 
0x00000000001a502a: add byte ptr [rax], al; test byte ptr [rsi + 1], ch; add byte ptr [rax + 0x6e], ah; hlt; jmp qword ptr [rcx]; 
0x00000000001b402a: add byte ptr [rax], al; test byte ptr [rsi + 2], bl; add al, ah; mov dh, bh; call qword ptr [rdx]; 
0x00000000001b7506: add byte ptr [rax], al; test dword ptr [rax], ecx; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000f1aa4: add byte ptr [rax], al; test eax, eax; cmovns edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x00000000000ecdea: add byte ptr [rax], al; test eax, eax; sete al; add rsp, 0x48; movzx eax, al; ret; 
0x0000000000122917: add byte ptr [rax], al; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000103d02: add byte ptr [rax], al; test ecx, ecx; jns 0x103d90; sub ecx, eax; mov eax, ecx; ret; 
0x00000000000f7fed: add byte ptr [rax], al; test edx, edx; cmovne eax, edx; ret; 
0x0000000000036dca: add byte ptr [rax], al; test edx, edx; jns 0x36de0; add rsp, 0xd0; ret; 
0x000000000000d03e: add byte ptr [rax], al; xchg byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000187efe: add byte ptr [rax], al; xchg dl, r13b; call rsp; 
0x00000000001a790a: add byte ptr [rax], al; xchg eax, edi; add dword ptr [rax], eax; add byte ptr [rbx], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001973ea: add byte ptr [rax], al; xchg eax, edx; add byte ptr [rax], al; mov al, 0xba; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001af43a: add byte ptr [rax], al; xchg eax, esp; adc al, byte ptr [rdx]; add al, ah; xchg dh, dh; jmp rdx; 
0x000000000019c13a: add byte ptr [rax], al; xchg eax, esp; fild word ptr [rax]; add byte ptr [rax - 0x7a], dl; out dx, al; call qword ptr [rdi]; 
0x00000000001aa53a: add byte ptr [rax], al; xchg eax, esp; ret; 
0x00000000001add3a: add byte ptr [rax], al; xchg eax, esp; sti; add dword ptr [rax], eax; shl byte ptr [rdx], 0xf6; call rdi; 
0x0000000000190e3a: add byte ptr [rax], al; xchg eax, esp; sub al, 0; add al, dh; jno 0x190e2d; call qword ptr [rsi + 1]; 
0x00000000001a783a: add byte ptr [rax], al; xchg eax, esp; xchg eax, esi; add dword ptr [rax], eax; sub sil, bpl; jmp qword ptr [rcx]; 
0x000000000001a2ae: add byte ptr [rax], al; xlatb; ret 0x17; 
0x00000000001a6346: add byte ptr [rax], al; xor al, 0; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rcx], 0xf4c5c000; call qword ptr [rax + 5]; 
0x00000000001a0eda: add byte ptr [rax], al; xor al, 0x2d; add dword ptr [rax], eax; rcl ah, 1; int1; jmp qword ptr [rbx]; 
0x00000000001a1cda: add byte ptr [rax], al; xor al, 0x3b; add dword ptr [rax], eax; mov al, 0xee; int1; jmp qword ptr [rcx]; 
0x00000000001a6eda: add byte ptr [rax], al; xor al, 0x8d; add dword ptr [rax], eax; sar dh, 1; hlt; jmp rax; 
0x00000000001a82da: add byte ptr [rax], al; xor al, 0xa1; add dword ptr [rax], eax; nop; cmp esi, ebp; jmp qword ptr [rcx]; 
0x000000000019a1da: add byte ptr [rax], al; xor al, 0xc0; add byte ptr [rax], al; nop; and al, 0xee; call qword ptr [rsi]; 
0x00000000001ad6da: add byte ptr [rax], al; xor al, 0xf5; add dword ptr [rax], eax; sbb byte ptr [rcx], 0xf6; call rdi; 
0x00000000000e4e14: add byte ptr [rax], al; xor al, al; ret; 
0x000000000001b436: add byte ptr [rax], al; xor byte ptr [rax + 0x18], ah; add byte ptr [rax], al; add byte ptr [rax], al; add al, dh; ret; 
0x000000000018eaee: add byte ptr [rax], al; xor byte ptr [rax - 3], ah; jmp qword ptr [rdx]; 
0x00000000000f067a: add byte ptr [rax], al; xor byte ptr [rcx], 0xc0; ret; 
0x00000000000a0c5e: add byte ptr [rax], al; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x000000000019cfce: add byte ptr [rax], al; xor dh, dh; out dx, al; call qword ptr [rdx + 4]; 
0x00000000000360da: add byte ptr [rax], al; xor dl, 0xf; adc dword ptr [rdi], eax; and rax, rdx; movq xmm0, rax; ret; 
0x00000000000841dc: add byte ptr [rax], al; xor eax, eax; add rsp, 0x18; ret; 
0x00000000001365ae: add byte ptr [rax], al; xor eax, eax; add rsp, 0x48; ret; 
0x000000000003c23a: add byte ptr [rax], al; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008347e: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000002ff4e: add byte ptr [rax], al; xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x0000000000132cd7: add byte ptr [rax], al; xor eax, eax; call 0xebb40; add rsp, 8; sar eax, 0x1f; ret; 
0x00000000001214fe: add byte ptr [rax], al; xor eax, eax; jmp rcx; 
0x00000000001176e1: add byte ptr [rax], al; xor eax, eax; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x0000000000128217: add byte ptr [rax], al; xor eax, eax; mov rsi, qword ptr [rbp - 0x188]; mov rdi, r13; mov rcx, qword ptr [rbp - 0x168]; call rcx; 
0x0000000000123d81: add byte ptr [rax], al; xor eax, eax; mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x00000000001214b7: add byte ptr [rax], al; xor eax, eax; pop rbp; jmp rcx; 
0x000000000003c3fb: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000013513f: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000003bf9a: add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000038526: add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000072ede: add byte ptr [rax], al; xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x0000000000072eee: add byte ptr [rax], al; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x000000000003d00b: add byte ptr [rax], al; xor eax, edx; ret; 
0x00000000000cb12f: add byte ptr [rax], al; xor ecx, ecx; call 0xcb0b0; add rsp, 0x18; ret; 
0x0000000000047136: add byte ptr [rax], al; xor edx, edx; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000037d92: add byte ptr [rax], al; xor edx, edx; mov rsi, rbx; mov eax, 0x80; syscall; 
0x000000000008aa61: add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x0000000000037104: add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000003706b: add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000007c157: add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000039ea7: add byte ptr [rax], al; xor esi, esi; call 0x3d3e0; add rsp, 8; ret; 
0x00000000001087e0: add byte ptr [rax], al; xor esi, esi; mov eax, ecx; movsxd rdi, r8d; syscall; 
0x0000000000079e06: add byte ptr [rax], al; xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000079d55: add byte ptr [rax], al; xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000c0ed4: add byte ptr [rax], al; xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x00000000000f5be0: add byte ptr [rax], al; xor esi, esi; mov rdi, r12; call rbx; 
0x00000000000f5c05: add byte ptr [rax], al; xor esi, esi; mov rdi, r13; call rbx; 
0x00000000000f5c29: add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000000f5c49: add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000000f5bbb: add byte ptr [rax], al; xor esi, esi; mov rdi, rbp; call rbx; 
0x000000000006d975: add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000010217f: add byte ptr [rax], al; xor esi, esi; mov rdx, qword ptr [rsp + 0x18]; mov edi, 0x2000004; call rax; 
0x00000000000ed293: add byte ptr [rax], al; xor esi, esi; syscall; 
0x000000000010813c: add byte ptr [rax], al; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000010844e: add byte ptr [rax], al; xor r10d, r10d; add rdi, 0x28; mov eax, r9d; syscall; 
0x000000000006f754: add byte ptr [rax], al; xor r10d, r10d; xor edx, edx; mov rsi, r9; mov eax, r8d; syscall; 
0x00000000000e3c91: add byte ptr [rax], al; xor r8d, r8d; call 0xe32d0; add rsp, 0x18; ret; 
0x0000000000118745: add byte ptr [rax], al; xor r8d, r8d; movsxd rdi, r14d; mov eax, 3; syscall; 
0x00000000000cb18e: add byte ptr [rax], al; xor r9d, r9d; call 0xc9d70; add rsp, 0x18; ret; 
0x000000000008bd7d: add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000019b9a6: add byte ptr [rax], al; xor rbp, rsi; call qword ptr [rsi]; 
0x00000000001a7ba7: add byte ptr [rax], bh; cmc; jmp qword ptr [rax]; 
0x000000000013516f: add byte ptr [rax], bh; cmove rax, rdx; add rsp, 8; ret; 
0x00000000001a1f27: add byte ptr [rax], bh; div ecx; jmp qword ptr [rax + 1]; 
0x00000000001b5a57: add byte ptr [rax], bh; fcomi st(7); jmp qword ptr [rcx]; 
0x00000000001b10d7: add byte ptr [rax], bh; in eax, 0xf6; call qword ptr [rdi]; 
0x000000000019bdc7: add byte ptr [rax], bh; jo 0x19bdb9; call qword ptr [rsi]; 
0x00000000001a5c87: add byte ptr [rax], bh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x0000000000192027: add byte ptr [rax], bh; mov al, 0xea; jmp qword ptr [rdx]; 
0x00000000001b1d77: add byte ptr [rax], bh; or al, 0xf7; call qword ptr [rbx]; 
0x00000000001a50d7: add byte ptr [rax], bh; outsd dx, dword ptr [rsi]; hlt; call qword ptr [rax + 6]; 
0x00000000001a8cd7: add byte ptr [rax], bh; pop rdi; cmc; jmp qword ptr [rdi + 1]; 
0x000000000001af2f: add byte ptr [rax], bh; ret 0x3b; 
0x000000000001a387: add byte ptr [rax], bh; ret; 
0x00000000001a0b67: add byte ptr [rax], bh; sal ecx, cl; call rsi; 
0x00000000001a7de7: add byte ptr [rax], bh; xor ebp, esi; jmp qword ptr [rcx]; 
0x0000000000199d07: add byte ptr [rax], bl; adc al, 0xee; jmp qword ptr [rcx]; 
0x00000000001926e7: add byte ptr [rax], bl; adc ch, bl; jmp qword ptr [rdx + 4]; 
0x00000000001b51d7: add byte ptr [rax], bl; add al, 0xfb; jmp qword ptr [rdx]; 
0x00000000001a8267: add byte ptr [rax], bl; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001b0d77: add byte ptr [rax], bl; fdecstp; call qword ptr [rcx + 5]; 
0x00000000001a4d67: add byte ptr [rax], bl; hlt; jmp qword ptr [rcx]; 
0x0000000000191ff7: add byte ptr [rax], bl; mov al, 0xea; jmp qword ptr [rbx]; 
0x0000000000199ba7: add byte ptr [rax], bl; mov ch, 0xfc; jmp qword ptr [rcx]; 
0x00000000001a28e7: add byte ptr [rax], bl; mov dh, dl; jmp qword ptr [rcx]; 
0x00000000001945f7: add byte ptr [rax], bl; movsb byte ptr [rdi], byte ptr [rsi]; in al, dx; call rdx; 
0x00000000001a8fd7: add byte ptr [rax], bl; movsxd rsi, ebp; jmp qword ptr [rcx]; 
0x00000000001b1117: add byte ptr [rax], bl; out 0xf6, al; jmp rdx; 
0x00000000001898d7: add byte ptr [rax], bl; push rcx; out dx, eax; call rsp; 
0x000000000019de07: add byte ptr [rax], bl; pushfq; out dx, eax; jmp rdi; 
0x000000000001aecf: add byte ptr [rax], bl; ret 0x3b; 
0x000000000001b1cf: add byte ptr [rax], bl; ret; 
0x00000000001aa707: add byte ptr [rax], bl; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001a2037: add byte ptr [rax], bl; std; int1; jmp qword ptr [rcx]; 
0x00000000001a7927: add byte ptr [rax], bl; sub esi, ebp; jmp qword ptr [rcx]; 
0x0000000000191a37: add byte ptr [rax], bl; test al, 0xea; jmp qword ptr [rcx + 1]; 
0x00000000001add27: add byte ptr [rax], ch; and dh, dh; jmp qword ptr [rcx]; 
0x00000000001aac27: add byte ptr [rax], ch; cmpsd dword ptr [rsi], dword ptr [rdi]; sti; jmp qword ptr [rsi]; 
0x000000000019df47: add byte ptr [rax], ch; pushfq; cli; jmp qword ptr [rdi + 0x2b]; 
0x000000000001aeff: add byte ptr [rax], ch; ret 0x3b; 
0x000000000001b1ff: add byte ptr [rax], ch; ret; 
0x00000000001ac367: add byte ptr [rax], ch; sti; cmc; call qword ptr [rax]; 
0x000000000019a387: add byte ptr [rax], ch; sub dh, ch; call qword ptr [rsi]; 
0x00000000001a7827: add byte ptr [rax], ch; sub dh, ch; jmp qword ptr [rcx]; 
0x0000000000194f47: add byte ptr [rax], ch; xchg eax, esi; in eax, dx; jmp rsp; 
0x00000000000a37c9: add byte ptr [rax], cl; add byte ptr [rax + rcx + 0x48], dh; lea eax, dword ptr [rip + 0xbdacb]; ret; 
0x000000000008be79: add byte ptr [rax], cl; add byte ptr [rax + rcx + 0x48], dh; lea eax, dword ptr [rip + 0xd3ddb]; ret; 
0x000000000001a2d7: add byte ptr [rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add bh, ah; ret 0x17; 
0x000000000001e297: add byte ptr [rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add bh, al; ret 0x17; 
0x000000000001e30f: add byte ptr [rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add bh, dh; ret 0x17; 
0x000000000001a2a7: add byte ptr [rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add bh, dl; ret 0x17; 
0x000000000001a37f: add byte ptr [rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], bh; ret; 
0x000000000001e39f: add byte ptr [rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], ah; ret; 
0x000000000001a31f: add byte ptr [rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], al; ret; 
0x000000000001a34f: add byte ptr [rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], dl; ret; 
0x0000000000017f1f: add byte ptr [rax], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi], cl; ret; 
0x00000000001867d8: add byte ptr [rax], cl; cld; jmp rax; 
0x00000000001a7b77: add byte ptr [rax], cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a69c7: add byte ptr [rax], cl; fcompi st(4); jmp qword ptr [rcx]; 
0x0000000000190d57: add byte ptr [rax], cl; jo 0x190d45; call qword ptr [rdx + 1]; 
0x00000000001a5d07: add byte ptr [rax], cl; mov ch, 0xf4; call qword ptr [rbx]; 
0x00000000001a5bb7: add byte ptr [rax], cl; mov dl, 0xf4; call qword ptr [rbp]; 
0x000000000002fd94: add byte ptr [rax], cl; movzx eax, ax; ret; 
0x00000000001b1d07: add byte ptr [rax], cl; or al, 0xf7; call qword ptr [rsi]; 
0x000000000019d267: add byte ptr [rax], cl; out dx, eax; jmp qword ptr [rbp + 4]; 
0x00000000001a50a7: add byte ptr [rax], cl; outsd dx, dword ptr [rsi]; hlt; jmp qword ptr [rcx]; 
0x000000000001aeb7: add byte ptr [rax], cl; ret 0x3b; 
0x000000000001b19f: add byte ptr [rax], cl; ret; 
0x00000000001aa997: add byte ptr [rax], cl; xlatb; cmc; call qword ptr [rsi]; 
0x00000000001aa947: add byte ptr [rax], cl; xlatb; cmc; jmp qword ptr [rdi]; 
0x00000000001aa917: add byte ptr [rax], cl; xlatb; cmc; jmp qword ptr [rsi]; 
0x00000000001a7db7: add byte ptr [rax], cl; xor ebp, esi; jmp qword ptr [rcx]; 
0x00000000001a7f37: add byte ptr [rax], cl; xor esi, ebp; jmp qword ptr [rcx]; 
0x00000000000bf8c4: add byte ptr [rax], dh; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000001b079f: add byte ptr [rax], dh; clc; jmp qword ptr [rbx]; 
0x00000000001869b8: add byte ptr [rax], dh; cld; jmp rax; 
0x00000000001a827f: add byte ptr [rax], dh; cmp esi, ebp; jmp qword ptr [rcx]; 
0x0000000000179ebf: add byte ptr [rax], dh; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x00000000001b5c8f: add byte ptr [rax], dh; fdivrp st(7); call qword ptr [rcx]; 
0x00000000001a4d7f: add byte ptr [rax], dh; hlt; jmp qword ptr [rcx]; 
0x000000000019cfcf: add byte ptr [rax], dh; imul dh; call qword ptr [rdx + 4]; 
0x00000000000a0c5f: add byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi], ch; ret; 
0x00000000001a538f: add byte ptr [rax], dh; jnp 0x1a5387; jmp qword ptr [rcx]; 
0x000000000019200f: add byte ptr [rax], dh; mov al, 0xea; jmp qword ptr [rax]; 
0x00000000001a28ff: add byte ptr [rax], dh; mov dh, dl; jmp qword ptr [rcx]; 
0x00000000001a484f: add byte ptr [rax], dh; or esp, esi; jmp rdx; 
0x000000000000b477: add byte ptr [rax], dh; ret 0x10; 
0x000000000001af17: add byte ptr [rax], dh; ret 0x3b; 
0x000000000001b217: add byte ptr [rax], dh; ret; 
0x00000000001a793f: add byte ptr [rax], dh; sub esi, ebp; jmp qword ptr [rcx]; 
0x00000000001b262f: add byte ptr [rax], dh; sub esi, edi; call qword ptr [rsi + 0xb]; 
0x00000000001a7d3f: add byte ptr [rax], dh; xor ch, dh; jmp qword ptr [rcx]; 
0x00000000000461e5: add byte ptr [rax], dl; add byte ptr [rax + 0x38], bh; syscall; 
0x000000000005d5b5: add byte ptr [rax], dl; add byte ptr [rax], al; pop rbx; ret; 
0x000000000005d5c3: add byte ptr [rax], dl; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000008ad4c: add byte ptr [rax], dl; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb1f68]; ret; 
0x000000000008a9bc: add byte ptr [rax], dl; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb21d8]; ret; 
0x000000000008852c: add byte ptr [rax], dl; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb4528]; ret; 
0x000000000018d60f: add byte ptr [rax], dl; and al, 0xfa; jmp rsp; 
0x000000000017297f: add byte ptr [rax], dl; and ebp, esp; call qword ptr [rax]; 
0x00000000001b643f: add byte ptr [rax], dl; cli; call rcx; 
0x00000000001a4c6f: add byte ptr [rax], dl; hlt; call qword ptr [rbp]; 
0x00000000001a4faf: add byte ptr [rax], dl; insd dword ptr [rdi], dx; hlt; jmp qword ptr [rcx]; 
0x000000000008b8d3: add byte ptr [rax], dl; lea rax, qword ptr [rip + 0x15844]; lea rdx, qword ptr [rip - 0x5e3]; cmove rax, rdx; add rsp, 8; ret; 
0x00000000001907cf: add byte ptr [rax], dl; movsxd rbp, edx; call qword ptr [rax]; 
0x000000000002fe74: add byte ptr [rax], dl; movzx eax, ax; ret; 
0x000000000019c22f: add byte ptr [rax], dl; nop; out dx, al; jmp qword ptr [rbp + 2]; 
0x0000000000036069: add byte ptr [rax], dl; or byte ptr [rax + 1], 0xd0; shr rax, 0x3f; ret; 
0x0000000000193a2f: add byte ptr [rax], dl; or esp, ebp; jmp qword ptr [rcx]; 
0x000000000019d78f: add byte ptr [rax], dl; out dx, eax; jmp qword ptr [rsi]; 
0x00000000001b65ef: add byte ptr [rax], dl; push rdi; call qword ptr [rcx]; 
0x000000000000d9af: add byte ptr [rax], dl; ret 0x10; 
0x000000000019794f: add byte ptr [rax], dl; ret 0xffed; 
0x000000000001b1b7: add byte ptr [rax], dl; ret; 
0x00000000001a74bf: add byte ptr [rax], dl; sbb al, 0xf5; call qword ptr [rdi + 1]; 
0x00000000001b20af: add byte ptr [rax], dl; sbb dh, bh; jmp qword ptr [rbx + 1]; 
0x000000000019919f: add byte ptr [rax], dl; std; in eax, dx; call qword ptr [rax]; 
0x000000000019a48f: add byte ptr [rax], dl; sub ebp, esi; call qword ptr [rsi]; 
0x000000000019db8f: add byte ptr [rax], dl; xchg eax, ecx; out dx, eax; jmp qword ptr [rbx]; 
0x00000000001a7e8f: add byte ptr [rax], dl; xor dh, ch; call qword ptr [rsi]; 
0x000000000018f168: add byte ptr [rax], r8b; add ah, al; sldt word ptr [rax]; nop; shr ecx, cl; call qword ptr [rcx + 5]; 
0x000000000018f390: add byte ptr [rax], r8b; add ah, ch; adc dword ptr [rax], eax; add byte ptr [rax + 0x58], cl; std; jmp qword ptr [rax]; 
0x00000000001aba90: add byte ptr [rax], r8b; add ah, ch; fadd dword ptr [rcx]; add byte ptr [rax - 0x13], cl; cmc; jmp qword ptr [rax]; 
0x00000000001adfa0: add byte ptr [rax], r8b; add ah, ch; stc; add dword ptr [rax], eax; jmp qword ptr [rdi]; 
0x00000000001a1b70: add byte ptr [rax], r8b; add ah, cl; cmp dword ptr [rcx], eax; add al, ch; out 0xf1, eax; jmp rsi; 
0x000000000019ba70: add byte ptr [rax], r8b; add ah, cl; fadd dword ptr [rax]; add al, bh; out dx, al; call rsp; 
0x000000000019a980: add byte ptr [rax], r8b; add ah, cl; ret; 
0x00000000001afd70: add byte ptr [rax], r8b; add ah, cl; sbb eax, dword ptr [rdx]; add al, bh; mov dh, 0xf6; call qword ptr [rdi]; 
0x000000000019a8a8: add byte ptr [rax], r8b; add ah, dh; ret 0; 
0x00000000001a5d78: add byte ptr [rax], r8b; add ah, dl; jnp 0x1a5d80; add byte ptr [rax - 0x49], dh; hlt; call rdi; 
0x00000000001aba40: add byte ptr [rax], r8b; add byte ptr [rax + rbx*8 - 0x1407ffff], bl; cmc; jmp qword ptr [rax + 1]; 
0x00000000001a51e0: add byte ptr [rax], r8b; add byte ptr [rax + rsi*2], bh; add dword ptr [rax], eax; mov byte ptr [rcx + rdi*8], dl; call qword ptr [rax]; 
0x00000000001991f0: add byte ptr [rax], r8b; add byte ptr [rax + rsi*4], cl; add byte ptr [rax - 3], ch; in eax, dx; call qword ptr [rsi + 2]; 
0x0000000000194f40: add byte ptr [rax], r8b; add byte ptr [rbp + rbp*2 - 0x69d80000], bl; in eax, dx; jmp rsp; 
0x00000000001a1f20: add byte ptr [rax], r8b; add byte ptr [rbp + rdi + 1], bh; add byte ptr [rax], bh; div ecx; jmp qword ptr [rax + 1]; 
0x00000000001a0ed8: add byte ptr [rax], r8b; add byte ptr [rbp - 0x2b2fffff], dh; int1; jmp qword ptr [rbx]; 
0x000000000019bd60: add byte ptr [rax], r8b; add byte ptr [rbx + rbx*8 + 0x6d780000], bh; out dx, al; call qword ptr [rdi]; 
0x00000000001a6ed8: add byte ptr [rax], r8b; add byte ptr [rcx*4 - 0x12fffff], dh; hlt; jmp rax; 
0x00000000001a50d0: add byte ptr [rax], r8b; add byte ptr [rdi + rbp*2], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xc], ch; call qword ptr [rax + 6]; 
0x00000000001a70f8: add byte ptr [rax], r8b; add byte ptr [rdi + rcx*4 + 1], dl; add byte ptr [rax + 7], dl; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001a8440: add byte ptr [rax], r8b; add byte ptr [rdx + 0x43c80001], bl; cmc; jmp rdi; 
0x00000000001ac7f0: add byte ptr [rax], r8b; add byte ptr [rsi + 1], cl; add al, ch; add dh, dh; jmp qword ptr [rbx + 1]; 
0x00000000001aa018: add byte ptr [rax], r8b; add byte ptr [rsi + rdi*4 + 1], dh; add byte ptr [rax - 0x7b], al; cmc; call qword ptr [rsi + 6]; 
0x00000000001a5e00: add byte ptr [rax], r8b; add byte ptr [rsp + rdi*2 + 1], bl; add byte ptr [rax - 0x47], cl; hlt; call rdi; 
0x000000000019d5f8: add byte ptr [rax], r8b; add byte ptr [rsp + rsi*8], dl; add al, al; out dx, eax; jmp qword ptr [rcx]; 
0x00000000001945f0: add byte ptr [rax], r8b; add byte ptr [rsp], cl; add byte ptr [rax], bl; movsb byte ptr [rdi], byte ptr [rsi]; in al, dx; call rdx; 
0x000000000012e5cd: add byte ptr [rax], r8b; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x000000000005d5bd: add byte ptr [rax], r8b; add rsp, 0x1000; xor eax, eax; pop rbx; ret; 
0x0000000000038245: add byte ptr [rax], r8b; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bca75: add byte ptr [rax], r8b; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000000c6275: add byte ptr [rax], r8b; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000088745: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000137ecd: add byte ptr [rax], r8b; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000009eb6d: add byte ptr [rax], r8b; lea r11, qword ptr [rip + 0xd9a49]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d4cd: add byte ptr [rax], r8b; lea r11, qword ptr [rip + 0xdaf09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000f7ef5: add byte ptr [rax], r8b; lea rbx, qword ptr [rip + 0x865af]; mov rax, rbx; pop rbx; ret; 
0x000000000007465d: add byte ptr [rax], r8b; lea rcx, qword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x00000000001211cd: add byte ptr [rax], r8b; lea rdx, qword ptr [rip + 0x29c9a9]; mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x00000000000d0aed: add byte ptr [rax], r8b; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000f321d: add byte ptr [rax], r8b; mov byte ptr [rdi], 0; mov byte ptr [rip + 0x2ce3d7], cl; mov rax, rdi; mov byte ptr [r9 - 1], 0; ret; 
0x00000000000967a5: add byte ptr [rax], r8b; mov byte ptr [rdi], sil; add rdi, 1; mov rax, rdi; ret; 
0x000000000011a105: add byte ptr [rax], r8b; mov byte ptr [rdx], 0; pop rbx; ret; 
0x000000000009e3fd: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x0000000000123bc5: add byte ptr [rax], r8b; mov dword ptr [rcx + 4], 1; mov eax, 1; ret; 
0x0000000000127fad: add byte ptr [rax], r8b; mov dword ptr [rdi + 4], 1; mov eax, 1; ret; 
0x00000000000968ad: add byte ptr [rax], r8b; mov dword ptr [rdi], ecx; mov rax, rdi; ret; 
0x000000000009696d: add byte ptr [rax], r8b; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000009697d: add byte ptr [rax], r8b; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 6]; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968dd: add byte ptr [rax], r8b; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; mov rax, rdi; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968cd: add byte ptr [rax], r8b; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; mov rax, rdi; ret; 
0x00000000000fa6f5: add byte ptr [rax], r8b; mov dword ptr fs:[rsi], 0x16; ret; 
0x00000000000a0c7d: add byte ptr [rax], r8b; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000fa97d: add byte ptr [rax], r8b; mov eax, 0x123; syscall; 
0x00000000000ebebd: add byte ptr [rax], r8b; mov eax, 0x124; syscall; 
0x00000000000ebf1d: add byte ptr [rax], r8b; mov eax, 0x125; syscall; 
0x00000000000faafd: add byte ptr [rax], r8b; mov eax, 0x126; syscall; 
0x00000000000faf4d: add byte ptr [rax], r8b; mov eax, 0x12c; syscall; 
0x00000000000fa8bd: add byte ptr [rax], r8b; mov eax, 0x131; syscall; 
0x00000000000f1ebd: add byte ptr [rax], r8b; mov eax, 0x132; syscall; 
0x00000000000fb00d: add byte ptr [rax], r8b; mov eax, 0x134; syscall; 
0x00000000000eb75d: add byte ptr [rax], r8b; mov eax, 0x15; syscall; 
0x00000000000ebeed: add byte ptr [rax], r8b; mov eax, 0x16; syscall; 
0x00000000000cb29d: add byte ptr [rax], r8b; mov eax, 0x18; syscall; 
0x00000000000f498d: add byte ptr [rax], r8b; mov eax, 0x1b; syscall; 
0x00000000000f495d: add byte ptr [rax], r8b; mov eax, 0x1c; syscall; 
0x00000000000fbe9d: add byte ptr [rax], r8b; mov eax, 0x1d; syscall; 
0x00000000000fbecd: add byte ptr [rax], r8b; mov eax, 0x1f; syscall; 
0x00000000000c256d: add byte ptr [rax], r8b; mov eax, 0x20; ret; 
0x00000000000ebe5d: add byte ptr [rax], r8b; mov eax, 0x20; syscall; 
0x00000000000ebe8d: add byte ptr [rax], r8b; mov eax, 0x21; syscall; 
0x00000000000c0b8d: add byte ptr [rax], r8b; mov eax, 0x25; syscall; 
0x00000000000b428d: add byte ptr [rax], r8b; mov eax, 0x26; syscall; 
0x00000000000fb5ad: add byte ptr [rax], r8b; mov eax, 0x29; syscall; 
0x00000000000fb11d: add byte ptr [rax], r8b; mov eax, 0x31; syscall; 
0x00000000000fb1dd: add byte ptr [rax], r8b; mov eax, 0x33; syscall; 
0x00000000000fb1ad: add byte ptr [rax], r8b; mov eax, 0x34; syscall; 
0x00000000000eaf2d: add byte ptr [rax], r8b; mov eax, 0x3c; syscall; 
0x0000000000036efd: add byte ptr [rax], r8b; mov eax, 0x3e; syscall; 
0x00000000000fbdad: add byte ptr [rax], r8b; mov eax, 0x40; syscall; 
0x00000000000fbd7d: add byte ptr [rax], r8b; mov eax, 0x41; syscall; 
0x00000000000fbe6d: add byte ptr [rax], r8b; mov eax, 0x43; syscall; 
0x00000000000fbd4d: add byte ptr [rax], r8b; mov eax, 0x47; syscall; 
0x00000000000f30bd: add byte ptr [rax], r8b; mov eax, 0x4d; syscall; 
0x00000000000ebfad: add byte ptr [rax], r8b; mov eax, 0x50; syscall; 
0x00000000000ebfdd: add byte ptr [rax], r8b; mov eax, 0x51; syscall; 
0x00000000000ecf1d: add byte ptr [rax], r8b; mov eax, 0x57; syscall; 
0x00000000000eb3ad: add byte ptr [rax], r8b; mov eax, 0x5b; syscall; 
0x00000000000ec7dd: add byte ptr [rax], r8b; mov eax, 0x5d; syscall; 
0x00000000000ec80d: add byte ptr [rax], r8b; mov eax, 0x5e; syscall; 
0x00000000000f0c5d: add byte ptr [rax], r8b; mov eax, 0x62; syscall; 
0x00000000000fab5d: add byte ptr [rax], r8b; mov eax, 0x67; syscall; 
0x00000000000c1f0d: add byte ptr [rax], r8b; mov eax, 0x6d; syscall; 
0x00000000000c1cfd: add byte ptr [rax], r8b; mov eax, 0x6e; syscall; 
0x00000000000c1cfd: add byte ptr [rax], r8b; mov eax, 0x6e; syscall; ret; 
0x00000000000c1f3d: add byte ptr [rax], r8b; mov eax, 0x6f; syscall; 
0x00000000000c1f3d: add byte ptr [rax], r8b; mov eax, 0x6f; syscall; ret; 
0x00000000000c1f9d: add byte ptr [rax], r8b; mov eax, 0x70; syscall; 
0x00000000000c1fcd: add byte ptr [rax], r8b; mov eax, 0x76; syscall; 
0x00000000000c1ffd: add byte ptr [rax], r8b; mov eax, 0x78; syscall; 
0x00000000000c1edd: add byte ptr [rax], r8b; mov eax, 0x79; syscall; 
0x00000000000fa46d: add byte ptr [rax], r8b; mov eax, 0x7a; syscall; 
0x00000000000fa49d: add byte ptr [rax], r8b; mov eax, 0x7b; syscall; 
0x00000000000fa85d: add byte ptr [rax], r8b; mov eax, 0x7d; syscall; 
0x00000000000fa88d: add byte ptr [rax], r8b; mov eax, 0x7e; syscall; 
0x00000000000fae2d: add byte ptr [rax], r8b; mov eax, 0x86; syscall; 
0x00000000000fac1d: add byte ptr [rax], r8b; mov eax, 0x87; syscall; 
0x00000000000eb25d: add byte ptr [rax], r8b; mov eax, 0x8a; syscall; 
0x00000000000cb20d: add byte ptr [rax], r8b; mov eax, 0x8f; syscall; 
0x00000000000cb23d: add byte ptr [rax], r8b; mov eax, 0x90; syscall; 
0x00000000000cb26d: add byte ptr [rax], r8b; mov eax, 0x91; syscall; 
0x00000000000cb2cd: add byte ptr [rax], r8b; mov eax, 0x92; syscall; 
0x00000000000cb2fd: add byte ptr [rax], r8b; mov eax, 0x93; syscall; 
0x00000000000cb32d: add byte ptr [rax], r8b; mov eax, 0x94; syscall; 
0x00000000000f4a1d: add byte ptr [rax], r8b; mov eax, 0x96; syscall; 
0x00000000000f4a4d: add byte ptr [rax], r8b; mov eax, 0x97; syscall; 
0x00000000000f4a7d: add byte ptr [rax], r8b; mov eax, 0x98; syscall; 
0x00000000000fa7bd: add byte ptr [rax], r8b; mov eax, 0x9a; syscall; 
0x00000000000fac4d: add byte ptr [rax], r8b; mov eax, 0x9b; syscall; 
0x00000000000f0c2d: add byte ptr [rax], r8b; mov eax, 0xa0; syscall; 
0x00000000000f1d9d: add byte ptr [rax], r8b; mov eax, 0xa1; syscall; 
0x00000000000f1e2d: add byte ptr [rax], r8b; mov eax, 0xa2; syscall; 
0x00000000000b140d: add byte ptr [rax], r8b; mov eax, 0xa4; syscall; 
0x00000000000f21ad: add byte ptr [rax], r8b; mov eax, 0xa7; syscall; 
0x00000000000f21dd: add byte ptr [rax], r8b; mov eax, 0xa8; syscall; 
0x00000000000f48cd: add byte ptr [rax], r8b; mov eax, 0xa; syscall; 
0x00000000000fa27d: add byte ptr [rax], r8b; mov eax, 0xac; syscall; 
0x00000000000fa8ed: add byte ptr [rax], r8b; mov eax, 0xae; syscall; 
0x00000000000fa91d: add byte ptr [rax], r8b; mov eax, 0xb0; syscall; 
0x00000000000fa43d: add byte ptr [rax], r8b; mov eax, 0xbb; syscall; 
0x00000000000f817d: add byte ptr [rax], r8b; mov eax, 0xc6; syscall; 
0x00000000000f805d: add byte ptr [rax], r8b; mov eax, 0xc7; syscall; 
0x000000000010c4b5: add byte ptr [rax], r8b; mov eax, 0xca; add rsp, 0x28; ret; 
0x00000000000fa94d: add byte ptr [rax], r8b; mov eax, 0xd5; syscall; 
0x00000000000fa7ed: add byte ptr [rax], r8b; mov eax, 0xe4; syscall; 
0x00000000000fa7ed: add byte ptr [rax], r8b; mov eax, 0xe4; syscall; ret; 
0x00000000000faacd: add byte ptr [rax], r8b; mov eax, 0xfd; syscall; 
0x00000000000fab2d: add byte ptr [rax], r8b; mov eax, 0xff; syscall; 
0x0000000000074535: add byte ptr [rax], r8b; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000085d3d: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x0000000000048a5d: add byte ptr [rax], r8b; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000c3555: add byte ptr [rax], r8b; mov eax, 1; ret; 
0x000000000012b86d: add byte ptr [rax], r8b; mov eax, 2; ret; 
0x0000000000123bb5: add byte ptr [rax], r8b; mov eax, dword ptr [rcx]; mov dword ptr [r8], eax; mov eax, 1; ret; 
0x00000000000e4d2d: add byte ptr [rax], r8b; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000012d735: add byte ptr [rax], r8b; mov eax, dword ptr [rdx]; lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000753cd: add byte ptr [rax], r8b; mov eax, dword ptr [rdx]; ret; 
0x000000000012cfa5: add byte ptr [rax], r8b; mov eax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000103f5d: add byte ptr [rax], r8b; mov eax, edi; sub eax, esi; ret; 
0x00000000000c08fd: add byte ptr [rax], r8b; mov ecx, 0x64; mov rsi, rdi; mov eax, ecx; syscall; 
0x000000000009dafd: add byte ptr [rax], r8b; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000009ce0d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000eb47d: add byte ptr [rax], r8b; mov edx, edx; movsxd rdi, edi; mov eax, 0x102; syscall; 
0x0000000000036f2d: add byte ptr [rax], r8b; mov esi, 8; mov eax, 0x7f; syscall; 
0x00000000000fc76d: add byte ptr [rax], r8b; mov qword ptr [rip + 0x2c1b85], 0; pop rbp; ret; 
0x000000000010c4c5: add byte ptr [rax], r8b; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x00000000000faeed: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000000faf7d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000000fb03d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x136; syscall; 
0x00000000000fb5dd: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x35; syscall; 
0x00000000000fb20d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000000fbddd: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x42; syscall; 
0x00000000000fac7d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0x9d; syscall; 
0x00000000000fab8d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000000faa6d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000000f820d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000000f81ad: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xbd; syscall; 
0x00000000000f808d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000000f811d: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000000f49bd: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000000fa9ad: add byte ptr [rax], r8b; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000000eceed: add byte ptr [rax], r8b; mov r10, rcx; movsxd rdi, edi; mov eax, 0x10b; syscall; 
0x000000000005dbbd: add byte ptr [rax], r8b; mov r10, rcx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x108; syscall; 
0x00000000000eb54d: add byte ptr [rax], r8b; mov r10d, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x0000000000074db5: add byte ptr [rax], r8b; mov rax, qword ptr [r8 + 0x140]; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000123ae5: add byte ptr [rax], r8b; mov rax, qword ptr [r8]; bswap eax; mov dword ptr [rcx + 0xb4], eax; mov eax, 1; ret; 
0x0000000000123c2d: add byte ptr [rax], r8b; mov rax, qword ptr [r8]; bswap eax; mov dword ptr [rcx + 0xb8], eax; mov eax, 1; ret; 
0x0000000000074f95: add byte ptr [rax], r8b; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000007466d: add byte ptr [rax], r8b; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000012db35: add byte ptr [rax], r8b; mov rax, qword ptr [rbp + 8]; mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x000000000006d96d: add byte ptr [rax], r8b; mov rax, qword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012d0bd: add byte ptr [rax], r8b; mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x0000000000121aed: add byte ptr [rax], r8b; mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000012ce45: add byte ptr [rax], r8b; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000121b0d: add byte ptr [rax], r8b; mov rax, qword ptr [rbx + 8]; mov rsi, rsp; mov rdi, rbx; call qword ptr [rax]; 
0x00000000000bd23d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x20]; ret; 
0x000000000007b0bd: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000012e005: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x000000000012e015: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x00000000001365dd: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x287881]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000132ec5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x28af99]; mov dword ptr fs:[rax], 2; mov eax, 0xffffffff; ret; 
0x000000000012abed: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x293381]; add rsp, 8; ret; 
0x00000000001088cd: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2b5591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000fcab5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2c4f39]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000f781d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2c6641]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f4bfd: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2c9261]; mov dword ptr fs:[rax], 0x16; pop rbx; ret; 
0x00000000000f22ad: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2cbbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f19ed: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2cc471]; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f194d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2cc511]; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f11bd: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2ccca1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f10ed: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2ccd71]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000ee2ad: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2cfbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb1ad: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2d2cb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000c12ad: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x2fcbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bc385: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x307c79]; lea rdi, qword ptr [rip + 0x30376a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000037b7d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x3862e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037a7d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x3863e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003779d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x3866c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000376b5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x3867a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036c7d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x3871e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036be5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x387279]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000340e5: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x38ff21]; lea rdi, qword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032045: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x391fc1]; lea rdi, qword ptr [rip + 0x38dd0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030395: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x393c69]; lea rdi, qword ptr [rip + 0x38f8da]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d505: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x396b01]; lea rdi, qword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002275d: add byte ptr [rax], r8b; mov rax, qword ptr [rip + 0x39b701]; add rax, qword ptr fs:[0]; ret; 
0x00000000000fe0dd: add byte ptr [rax], r8b; mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000300dd: add byte ptr [rax], r8b; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000d1f35: add byte ptr [rax], r8b; mov rax, qword ptr [rsi + 8]; mov qword ptr [rax + 0x20], rsi; xor eax, eax; ret; 
0x000000000002efdd: add byte ptr [rax], r8b; mov rax, qword ptr [rsi + rdx*8 + 0x80]; ret; 
0x0000000000047025: add byte ptr [rax], r8b; mov rax, rbx; pop rbx; ret; 
0x0000000000035775: add byte ptr [rax], r8b; mov rax, rcx; ret; 
0x0000000000091615: add byte ptr [rax], r8b; mov rax, rdi; ret; 
0x000000000009e46d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009ce6d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000869c5: add byte ptr [rax], r8b; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x0000000000112f35: add byte ptr [rax], r8b; mov rdx, qword ptr [rip + 0x2aaf29]; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000009ce4d: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000009692d: add byte ptr [rax], r8b; mov word ptr [rdi], si; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009688d: add byte ptr [rax], r8b; mov word ptr [rdi], si; mov rax, rdi; ret; 
0x000000000012e175: add byte ptr [rax], r8b; movsx eax, byte ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e0b5: add byte ptr [rax], r8b; movsx eax, word ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012d3a5: add byte ptr [rax], r8b; movsx rax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012cf45: add byte ptr [rax], r8b; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000cffad: add byte ptr [rax], r8b; movsxd rdi, r12d; mov eax, 3; syscall; 
0x00000000000f1eed: add byte ptr [rax], r8b; movsxd rdx, edi; mov esi, 0x28121969; mov rdi, -0x11e2153; mov eax, 0xa9; syscall; 
0x0000000000117da5: add byte ptr [rax], r8b; movsxd rdx, edx; mov eax, ebx; mov byte ptr [rdi + rdx], 0; pop rbx; ret; 
0x00000000000ecf4d: add byte ptr [rax], r8b; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x107; syscall; 
0x00000000000ece8d: add byte ptr [rax], r8b; movsxd rsi, esi; mov eax, 0x10a; syscall; 
0x000000000016366d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000016365d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000016364d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000016363d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000016362d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000016361d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000012e1d5: add byte ptr [rax], r8b; movzx eax, byte ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e115: add byte ptr [rax], r8b; movzx eax, word ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012d405: add byte ptr [rax], r8b; movzx eax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000002585d: add byte ptr [rax], r8b; movzx edx, sil; test sil, sil; mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x0000000000192dc5: add byte ptr [rax], r8b; or byte ptr [rdx - 0x15], bl; jmp qword ptr [rsi]; 
0x00000000000d262d: add byte ptr [rax], r8b; pop rbx; pop rbp; pop r12; ret; 
0x000000000004701d: add byte ptr [rax], r8b; pop rbx; ret; 
0x00000000000a110d: add byte ptr [rax], r8b; ret; 
0x000000000010c5cd: add byte ptr [rax], r8b; shl eax, 0x18; and esi, 0xffffff; or eax, esi; bswap eax; ret; 
0x00000000000fd91d: add byte ptr [rax], r8b; sub edi, 0x30; xor eax, eax; cmp edi, 9; setbe al; ret; 
0x000000000007be05: add byte ptr [rax], r8b; sub r8, rcx; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000075105: add byte ptr [rax], r8b; sub r8, rcx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000103d9d: add byte ptr [rax], r8b; sub r8d, eax; mov eax, r8d; ret; 
0x000000000011fa6d: add byte ptr [rax], r8b; sub rsp, 8; call 0xf1a90; mov dword ptr [rip + 0x2a3cc1], eax; add rsp, 8; ret; 
0x000000000012e8bd: add byte ptr [rax], r8b; sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x6eb20; add rsp, 8; ret; 
0x00000000000e315d: add byte ptr [rax], r8b; xor eax, eax; add rsp, 8; ret; 
0x00000000000d232d: add byte ptr [rax], r8b; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000004883d: add byte ptr [rax], r8b; xor eax, eax; pop rbx; ret; 
0x0000000000038525: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x000000000010844d: add byte ptr [rax], r8b; xor r10d, r10d; add rdi, 0x28; mov eax, r9d; syscall; 
0x00000000000a2bdd: add byte ptr [rax], r8b; xor rax, rax; ret; 
0x00000000000eb6a6: add byte ptr [rbp + 0x10], dh; mov eax, 0; syscall; 
0x00000000000fafb6: add byte ptr [rbp + 0x10], dh; mov eax, 0x130; syscall; 
0x00000000000f4906: add byte ptr [rbp + 0x10], dh; mov eax, 0x1a; syscall; 
0x00000000000c0d76: add byte ptr [rbp + 0x10], dh; mov eax, 0x22; syscall; 
0x00000000000c0dd6: add byte ptr [rbp + 0x10], dh; mov eax, 0x23; syscall; 
0x00000000000fb156: add byte ptr [rbp + 0x10], dh; mov eax, 0x2a; syscall; 
0x00000000000fb0c6: add byte ptr [rbp + 0x10], dh; mov eax, 0x2b; syscall; 
0x00000000000fb496: add byte ptr [rbp + 0x10], dh; mov eax, 0x2e; syscall; 
0x00000000000fb386: add byte ptr [rbp + 0x10], dh; mov eax, 0x2f; syscall; 
0x00000000000f1dd6: add byte ptr [rbp + 0x10], dh; mov eax, 0x4a; syscall; 
0x00000000000f1e66: add byte ptr [rbp + 0x10], dh; mov eax, 0x4b; syscall; 
0x00000000000ebf56: add byte ptr [rbp + 0x10], dh; mov eax, 0x55; syscall; 
0x00000000000eb706: add byte ptr [rbp + 0x10], dh; mov eax, 1; syscall; 
0x00000000000eb4b6: add byte ptr [rbp + 0x10], dh; mov eax, 2; syscall; 
0x00000000000ebe06: add byte ptr [rbp + 0x10], dh; mov eax, 3; syscall; 
0x00000000000ecfb6: add byte ptr [rbp + 0x10], dh; mov eax, 7; syscall; 
0x00000000000fa3a6: add byte ptr [rbp + 0x10], dh; mov eax, 8; syscall; 
0x000000000007859b: add byte ptr [rbp + 0x12], dh; mov edx, dword ptr [rdi + 0xc0]; mov eax, edx; pop rbx; ret; 
0x00000000001180d3: add byte ptr [rbp + 0x12], dh; movzx eax, byte ptr [rdi + 1]; shl eax, 3; cdqe; shr rax, 4; ret; 
0x00000000000fad16: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x113; syscall; 
0x00000000000fada6: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000f04c6: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000fae66: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000cb546: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x11; syscall; 
0x00000000000cb5a6: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x12; syscall; 
0x00000000000f1c26: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x17; syscall; 
0x00000000000fb4f6: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x2c; syscall; 
0x00000000000fb326: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x2d; syscall; 
0x00000000000fbc66: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000fbcc6: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000fa9e6: add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0xe8; syscall; 
0x00000000000f1aa5: add byte ptr [rbp + 0x14490fc0], al; and al, 0x48; add esp, 0x18; mov eax, edx; ret; 
0x0000000000135ee7: add byte ptr [rbp + 0x1e], dh; add rsp, 0x48; ret; 
0x0000000000133b47: add byte ptr [rbp + 0x23], dh; mov eax, edx; add rsp, 8; ret; 
0x0000000000135db9: add byte ptr [rbp + 0x24], dh; xor eax, eax; add rsp, 0x58; ret; 
0x00000000000be059: add byte ptr [rbp + 0x28], dh; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x0000000000124f10: add byte ptr [rbp + 0x2a], dh; mov rax, qword ptr [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000010dac6: add byte ptr [rbp + 0x2b], dh; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x000000000011ee50: add byte ptr [rbp + 0x310b75c0], al; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000078892: add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x830f; 
0x0000000000023c2e: add byte ptr [rbp + 0x31], al; jmp qword ptr [rsi + 0xf]; 
0x00000000000cb18f: add byte ptr [rbp + 0x31], al; leave; call 0xc9d70; add rsp, 0x18; ret; 
0x00000000000b81b2: add byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x7d], cl; ret; 
0x0000000000118746: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x63], 0xfe; mov eax, 3; syscall; 
0x000000000006f755: add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov eax, r8d; syscall; 
0x0000000000133bbc: add byte ptr [rbp + 0x35], dh; mov rax, qword ptr [rip + 0x28bcca]; mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x18]; 
0x0000000000133b19: add byte ptr [rbp + 0x35], dh; mov rax, qword ptr [rip + 0x28bd6d]; mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x00000000000a70c0: add byte ptr [rbp + 0x36840fed], al; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x00000000000478de: add byte ptr [rbp + 0x39], cl; ret 0x830f; 
0x000000000018c6df: add byte ptr [rbp + 0x40], al; clc; jmp rsp; 
0x00000000000ed037: add byte ptr [rbp + 0x412875c0], al; mov eax, 8; mov eax, 0x10f; syscall; 
0x0000000000103daf: add byte ptr [rbp + 0x450578d2], al; test ecx, ecx; jns 0x103d88; mov eax, edx; sub eax, r9d; ret; 
0x0000000000120070: add byte ptr [rbp + 0x480b75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001201d6: add byte ptr [rbp + 0x480d75c0], al; add esp, 0x18; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000008aade: add byte ptr [rbp + 0x480d75c0], al; add esp, 8; ret; 
0x000000000005d54e: add byte ptr [rbp + 0x480d75c0], al; mov eax, ebx; pop rbx; ret; 
0x0000000000022465: add byte ptr [rbp + 0x480e74c0], al; lea eax, dword ptr [rip + 0x3a178f]; ret; 
0x0000000000092b85: add byte ptr [rbp + 0x480e74c0], al; lea eax, dword ptr [rip - 0x511]; ret; 
0x0000000000133599: add byte ptr [rbp + 0x480e74c0], al; lea edx, dword ptr [rip + 0x28853b]; mov qword ptr [rip + 0x28c2e4], rdx; add rsp, 8; ret; 
0x00000000001229d5: add byte ptr [rbp + 0x480e75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000120c6c: add byte ptr [rbp + 0x480f74c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000122b0b: add byte ptr [rbp + 0x481075c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000036dcb: add byte ptr [rbp + 0x481079d2], al; add esp, 0xd0; ret; 
0x0000000000122b8a: add byte ptr [rbp + 0x481175c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000007ab1a: add byte ptr [rbp + 0x481175ed], al; add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000006e9f0: add byte ptr [rbp + 0x48117ec0], al; mov eax, dword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x000000000011ed28: add byte ptr [rbp + 0x481374c0], al; add esp, 0x30; lea rax, qword ptr [rip + 0x2a4968]; pop rbx; ret; 
0x000000000008aa75: add byte ptr [rbp + 0x481675c0], al; lea eax, dword ptr [rip + 0x3361ff]; mov qword ptr [rip + 0x3361e8], rax; ret; 
0x000000000005d5a5: add byte ptr [rbp + 0x481675c0], al; mov edi, esp; call 0x88710; add rsp, 0x1000; pop rbx; ret; 
0x0000000000072f85: add byte ptr [rbp + 0x48167ec0], al; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x0000000000072e75: add byte ptr [rbp + 0x48167ec0], al; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000135164: add byte ptr [rbp + 0x481778c0], al; lea edx, dword ptr [rip + 0x28ea30]; mov eax, 0; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000032128: add byte ptr [rbp + 0x481d74f6], al; mov eax, dword ptr [rip + 0x391ed4]; lea rdi, qword ptr [rip + 0x38dc25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000304f3: add byte ptr [rbp + 0x482074c0], al; mov eax, dword ptr [rip + 0x393b11]; lea rdi, qword ptr [rip + 0x38f77a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f1215: add byte ptr [rbp + 0x482775c0], al; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x13; syscall; 
0x00000000000f12b5: add byte ptr [rbp + 0x482775c0], al; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x14; syscall; 
0x000000000007ad67: add byte ptr [rbp + 0x482c75ed], al; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000133557: add byte ptr [rbp + 0x482c78c0], al; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000133a1e: add byte ptr [rbp + 0x482d78c0], al; mov eax, dword ptr [rsp]; add rsp, 0x10; pop rbx; ret; 
0x00000000000f191a: add byte ptr [rbp + 0x484275c0], al; mov edx, 0xffffffff; mov esi, edi; mov eax, 0x75; mov rdi, rdx; syscall; 
0x00000000000f19ba: add byte ptr [rbp + 0x484275c0], al; mov edx, 0xffffffff; mov esi, edi; mov eax, 0x77; mov rdi, rdx; syscall; 
0x000000000007b493: add byte ptr [rbp + 0x48487ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000011f677: add byte ptr [rbp + 0x485c74c0], al; mov eax, dword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000318e8: add byte ptr [rbp + 0x485c74c0], al; mov eax, dword ptr [rip + 0x39271c]; lea rdi, qword ptr [rip + 0x38e385]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000eb597: add byte ptr [rbp + 0x485c75c0], al; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x000000000006dfff: add byte ptr [rbp + 0x485c7ef6], al; mov dword ptr [rbp], eax; mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000034075: add byte ptr [rbp + 0x486e75c0], al; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000012028f: add byte ptr [rbp + 0x48a774c0], al; mov eax, dword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000108915: add byte ptr [rbp + 0x492875c0], al; mov edx, ecx; movsxd rsi, esi; mov rdi, rbx; mov eax, 0xe6; syscall; 
0x00000000000f150a: add byte ptr [rbp + 0x495875c0], al; mov edx, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x127; syscall; 
0x00000000000f176a: add byte ptr [rbp + 0x495875c0], al; mov edx, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x128; syscall; 
0x00000000000a17cb: add byte ptr [rbp + 0x49], bl; lea eax, dword ptr [rcx + 1]; pop r12; ret; 
0x000000000006f5e7: add byte ptr [rbp + 0x49eb7edb], al; mov eax, dword ptr [rsp + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000fb9b5: add byte ptr [rbp + 0x4c2775c0], al; movsxd rdx, ecx; movsxd rdi, edi; mov eax, 0x120; syscall; 
0x00000000000f1cb7: add byte ptr [rbp + 0x4c2975c0], al; lea ecx, dword ptr [rsp + 0x40]; movsxd rdi, edi; mov eax, 0x10e; syscall; 
0x00000000000fba55: add byte ptr [rbp + 0x4c2975c0], al; movsxd rdx, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x12b; syscall; 
0x00000000000fbb05: add byte ptr [rbp + 0x4c2975c0], al; movsxd rdx, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x133; syscall; 
0x0000000000189b8f: add byte ptr [rbp + 0x4cffefd1], al; xor eax, dword ptr [rcx]; add byte ptr [rcx + rdx*8 + 0x3394ffef], ah; add dword ptr [rax], eax; ret; 
0x00000000000bc7d1: add byte ptr [rbp + 0x5b0a75c0], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000053935: add byte ptr [rbp + 0x5c], dh; mov eax, edx; pop rbx; ret; 
0x0000000000118057: add byte ptr [rbp + 0x63], cl; ret; 
0x00000000000ec83f: add byte ptr [rbp + 0x63], cl; rol byte ptr [rcx - 0x77], 0xca; mov edx, edx; movsxd rdi, edi; mov eax, 0x104; syscall; 
0x00000000001a473b: add byte ptr [rbp + 0x6f00001], dl; hlt; jmp qword ptr [rsi]; 
0x0000000000135e73: add byte ptr [rbp + 0xa], dh; xor eax, eax; add rsp, 0x58; ret; 
0x000000000012a80b: add byte ptr [rbp + 0xb], dh; mov rax, qword ptr [rsp + 0x18]; mov dword ptr [rax], 0xf; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000012a9f7: add byte ptr [rbp + 0xb], dh; mov rax, qword ptr [rsp + 0x18]; mov dword ptr [rax], 0xf; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x0000000000196b66: add byte ptr [rbp + 0xd1cffed], al; lodsd eax, dword ptr [rsi]; test ch, ch; jmp qword ptr [rdx]; 
0x00000000000b4a08: add byte ptr [rbp + 0xd], dh; mov rax, rdx; add rsp, 8; ret; 
0x00000000000d43a9: add byte ptr [rbp + 0xf], al; mov dh, 0xed; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x0000000000038bcf: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000038abf: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000105b89: add byte ptr [rbp + 0xf], cl; push r14; sub byte ptr [rbx + 0x2b87ff35], cl; add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x00000000001a870b: add byte ptr [rbp + 1], ah; add byte ptr [rax + 0x55], al; cmc; call qword ptr [rcx]; 
0x000000000000ea4f: add byte ptr [rbp + 1], bl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001b0713: add byte ptr [rbp + 2], ch; add byte ptr [rax + 0x65], cl; clc; jmp qword ptr [rbx]; 
0x000000000004874a: add byte ptr [rbp + 3], dh; pop rbx; ret; 
0x0000000000105dfd: add byte ptr [rbp + 7], dh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008cc3d: add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 0x79]; ret; 
0x0000000000086f91: add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 5]; ret; 
0x000000000008cca0: add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 6]; ret; 
0x0000000000088e0d: add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 9]; ret; 
0x000000000012e8e6: add byte ptr [rbp + 7], dh; ret; 
0x000000000008be67: add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0x1f]; ret; 
0x000000000009163e: add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0x6878]; ret; 
0x00000000000a37b7: add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0xc84f]; ret; 
0x00000000000a2c07: add byte ptr [rbp + 8], dh; lea rax, qword ptr [rip + 0xd48f]; ret; 
0x000000000018c347: add byte ptr [rbp + rax + 0x2ea4fff8], dh; add al, byte ptr [rax]; in al, 5; clc; call rsp; 
0x00000000001250d8: add byte ptr [rbp + rax + 0x48], dh; add esp, 0x48; ret; 
0x00000000001aa6eb: add byte ptr [rbp + rax*8 + 1], al; add byte ptr [rax], al; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa703: add byte ptr [rbp + rax*8 + 1], bl; add byte ptr [rax], bl; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa71b: add byte ptr [rbp + rax*8 + 1], dh; add byte ptr [rax - 0x3d], al; clc; jmp qword ptr [rsi]; 
0x00000000001aa763: add byte ptr [rbp + rax*8 - 0x29e7ffff], bh; cmc; jmp qword ptr [rsi]; 
0x00000000001aa733: add byte ptr [rbp + rax*8 - 0x29e7ffff], cl; cmc; jmp qword ptr [rsi]; 
0x00000000001aa74b: add byte ptr [rbp + rax*8 - 0x3cbfffff], ah; clc; jmp qword ptr [rsi]; 
0x00000000000c2648: add byte ptr [rbp + rbp - 0x48], dh; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000001b4f53: add byte ptr [rbp + rbp*2 + 0x6380002], ch; sti; jmp qword ptr [rdx]; 
0x00000000001a4f2b: add byte ptr [rbp + rbp*2 + 0x69800001], al; hlt; jmp qword ptr [rax + 1]; 
0x0000000000194f43: add byte ptr [rbp + rbp*2 - 0x69d80000], bl; in eax, dx; jmp rsp; 
0x0000000000194efb: add byte ptr [rbp + rbp*2], dl; add al, ah; xchg eax, ebp; in eax, dx; call qword ptr [rax]; 
0x00000000001a7f33: add byte ptr [rbp + rbx*4 + 0x33080001], cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7eeb: add byte ptr [rbp + rbx*4 + 1], al; add al, al; xor dh, ch; jmp qword ptr [rcx]; 
0x00000000001a7f03: add byte ptr [rbp + rbx*4 + 1], bl; add al, bl; xor dh, ch; jmp qword ptr [rcx]; 
0x0000000000035a03: add byte ptr [rbp + rcx*4 + 0x1c], cl; sbb byte ptr [rax - 0x77], cl; ret 0x394d; 
0x000000000014627f: add byte ptr [rbp + rcx*4 + 0x1d], cl; add rax, 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148a66: add byte ptr [rbp + rcx*4 + 0x1d], cl; and bl, bh; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014336f: add byte ptr [rbp + rcx*4 + 0x1d], cl; cdq; xor al, byte ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145e8f: add byte ptr [rbp + rcx*4 + 0x1d], cl; cmp dword ptr [rcx], ecx; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001430cf: add byte ptr [rbp + rcx*4 + 0x1d], cl; cmp dword ptr [rip + 0x63490004], esi; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148c4f: add byte ptr [rbp + rcx*4 + 0x1d], cl; cmp ebp, ebx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014903f: add byte ptr [rbp + rcx*4 + 0x1d], cl; fld dword ptr [r11]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142e2f: add byte ptr [rbp + rcx*4 + 0x1d], cl; fnstenv dword ptr [rdi]; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001489af: add byte ptr [rbp + rcx*4 + 0x1d], cl; fstpnce st(7), st(0); add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c9f: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul ebp, dword ptr [rcx], 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146a5f: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul edi, ebp, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014831f: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul esp, esi, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014408f: add byte ptr [rbp + rcx*4 + 0x1d], cl; jns 0x1440ba; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014594f: add byte ptr [rbp + rcx*4 + 0x1d], cl; jns 0x145963; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014870f: add byte ptr [rbp + rcx*4 + 0x1d], cl; jns 0x1486f7; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143f3f: add byte ptr [rbp + rcx*4 + 0x1d], cl; leave; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145d3f: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr [rdx], ecx; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142f7f: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr [rsi], esi; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148aff: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov esi, ebx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001467bf: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rax], eax; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000009d4cf: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rdi + 0x6349000d], ebp; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001439ff: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rsp + rax], ebp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014666f: add byte ptr [rbp + rcx*4 + 0x1d], cl; pop rcx; add dword ptr [rax + rax], eax; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001438af: add byte ptr [rbp + rcx*4 + 0x1d], cl; pop rcx; sub eax, 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143def: add byte ptr [rbp + rcx*4 + 0x1d], cl; sbb dword ptr [rax], ebp; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014846f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sbb ebp, esp; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001463cf: add byte ptr [rbp + rcx*4 + 0x1d], cl; stc; add eax, dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a9f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sub dword ptr [rip + 0x63490004], ecx; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014885f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sub ecx, esp; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146096: add byte ptr [rbp + rcx*4 + 0x1d], cl; xor al, byte ptr [rdi]; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001434bf: add byte ptr [rbp + rcx*4 + 0x1d], cl; xor qword ptr [r8 + rax], rax; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000a3f69: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; call rbx; 
0x00000000000a3ff7: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a3ba8: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; mov rsi, r13; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a449b: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x38; mov rcx, r13; mov rdi, rbp; call rbx; 
0x00000000000d4a17: add byte ptr [rbp + rcx*4 + 0x65], cl; or byte ptr [rax - 0x77], cl; ret; 
0x00000000001306d7: add byte ptr [rbp + rcx*4 + 0x68], cl; add eax, ebp; iretd; and dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000011065e: add byte ptr [rbp + rcx*4 + 5], cl; ret 0x2b27; 
0x000000000010e60e: add byte ptr [rbp + rcx*4 + 5], cl; ret 0x2b44; 
0x0000000000061650: add byte ptr [rbp + rcx*4 - 0x6b], cl; shr bh, 0xff; dec dword ptr [rdi]; test al, ch; out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x00000000000a4190: add byte ptr [rbp + rcx*4 - 0x74], cl; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rdi, rbp; call rbx; 
0x00000000000a478b: add byte ptr [rbp + rcx*4 - 0x74], cl; and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x17], cl; mov rdi, rbp; call rbx; 
0x00000000001a1f23: add byte ptr [rbp + rdi + 1], bh; add byte ptr [rax], bh; div ecx; jmp qword ptr [rax + 1]; 
0x00000000001abdeb: add byte ptr [rbp + rdi*2 + 1], ch; add byte ptr [rax - 0xa], dl; cmc; jmp qword ptr [rcx + 0x4000001]; 
0x00000000001a5f43: add byte ptr [rbp + rdi*2 - 0x43c7ffff], bl; hlt; jmp qword ptr [rdi]; 
0x00000000001a5f2b: add byte ptr [rbp + rdi*2 - 0x43dfffff], al; hlt; jmp qword ptr [rcx]; 
0x0000000000199f33: add byte ptr [rbp + rdi*4 + 0x1bf80000], cl; out dx, al; jmp qword ptr [rbx]; 
0x000000000019df43: add byte ptr [rbp + rdi*8 - 0x63d80000], bl; cli; jmp qword ptr [rdi + 0x2b]; 
0x000000000018ae97: add byte ptr [rbp + rdi*8 - 0xc], dl; call rsp; 
0x00000000001ab75b: add byte ptr [rbp + rdx*8 - 0x176fffff], dh; cmc; call qword ptr [rax]; 
0x00000000001a9763: add byte ptr [rbp + rsi*4 + 0x6ed80001], bh; cmc; jmp qword ptr [rdi + 1]; 
0x000000000018cd4f: add byte ptr [rbp + rsi*8 + 0x76ccfff8], dh; add al, byte ptr [rax]; idiv al; jmp rsp; 
0x000000000018ae8f: add byte ptr [rbp + rsi*8 - 0x427b000c], dl; add dword ptr [rax], eax; push rsp; std; hlt; call rsp; 
0x0000000000107a2c: add byte ptr [rbp - 0x10], dh; mov edx, dword ptr [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x00000000000c1cdf: add byte ptr [rbp - 0x13], dh; mov ecx, 0x27; mov eax, ecx; syscall; 
0x000000000003c0b8: add byte ptr [rbp - 0x16f48a40], al; mov esi, 0x66fffff6; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000c266f: add byte ptr [rbp - 0x27], dh; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000ac22d: add byte ptr [rbp - 0x297bf013], al; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x00000000001a0edb: add byte ptr [rbp - 0x2b2fffff], dh; int1; jmp qword ptr [rbx]; 
0x000000000004f207: add byte ptr [rbp - 0x2dce00b9], cl; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x0000000000189bcf: add byte ptr [rbp - 0x2e], dh; out dx, eax; dec dword ptr [rbp + rsi - 0x2d6fffff]; out dx, eax; call rsp; 
0x000000000012e426: add byte ptr [rbp - 0x33], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000001a0743: add byte ptr [rbp - 0x3647ffff], bl; int1; jmp qword ptr [rbp]; 
0x00000000000c2bea: add byte ptr [rbp - 0x3d], dh; lea rsi, qword ptr [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x00000000000f7fee: add byte ptr [rbp - 0x3dbaf02e], al; ret; 
0x0000000000022c9e: add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000122918: add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x000000000005db76: add byte ptr [rbp - 0x3f6af040], al; movzx eax, al; neg eax; pop rbx; ret; 
0x00000000000ecdeb: add byte ptr [rbp - 0x3f6bf040], al; add rsp, 0x48; movzx eax, al; ret; 
0x0000000000036f65: add byte ptr [rbp - 0x41d98a40], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x82; syscall; 
0x000000000011afad: add byte ptr [rbp - 0x47e78701], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000001344f6: add byte ptr [rbp - 0x47ed8701], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000107a85: add byte ptr [rbp - 0x47f98a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000e2d16: add byte ptr [rbp - 0x49f0be40], al; test dword ptr [rax + 0xf000000], esp; xchg eax, ebp; ret 0xe2c1; 
0x00000000000589dc: add byte ptr [rbp - 0x4c7af02e], al; ret 0xffff; 
0x00000000000c25ba: add byte ptr [rbp - 0x4d], dh; nop dword ptr [rax]; mov eax, 0x40; ret; 
0x0000000000187584: add byte ptr [rbp - 0x536f0004], ch; cld; jmp qword ptr [rax]; 
0x00000000001782b0: add byte ptr [rbp - 0x698f0004], dl; cld; jmp rax; 
0x0000000000122c2a: add byte ptr [rbp - 0x6f4f8a40], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000095408: add byte ptr [rbp - 0x73], cl; dec dword ptr [r13 - 0x77]; ret; 
0x00000000000f09f2: add byte ptr [rbp - 0x74f68740], al; add al, 0x24; add rsp, 0x18; ret; 
0x00000000000d884c: add byte ptr [rbp - 0x75], al; pop rbp; add al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000bd9af: add byte ptr [rbp - 0x77], 0x64; xchg eax, ebp; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000009685c: add byte ptr [rbp - 0x77], al; leave; movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x0000000000095358: add byte ptr [rbp - 0x77], cl; ret 0x894c; 
0x0000000000049577: add byte ptr [rbp - 0x77], cl; ret 0xf41; 
0x0000000000083e57: add byte ptr [rbp - 0x77], cl; ret; 
0x00000000000800d3: add byte ptr [rbp - 0x77cfdb9], cl; add al, 0x74; cmp al, 0x89; ret 0xb48b; 
0x00000000000789ef: add byte ptr [rbp - 0x7b], al; test byte ptr [rdi], 0x95; ret 0x8445; 
0x000000000003aa18: add byte ptr [rbp - 0x7c], al; test byte ptr [rdi], 0x84; ret; 
0x00000000000d0eff: add byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x000000000002cb1f: add byte ptr [rbp - 0x7cf78140], al; call 0x846542b; pop rbx; ret; 
0x0000000000135db1: add byte ptr [rbp - 0x7fed8b40], al; cmp al, 0x24; add byte ptr [rbp + 0x24], dh; xor eax, eax; add rsp, 0x58; ret; 
0x0000000000047017: add byte ptr [rbp - 0xa], dh; nop word ptr [rax + rax]; pop rbx; ret; 
0x0000000000083ae5: add byte ptr [rbp - 0xcf98740], al; ret; 
0x0000000000036b35: add byte ptr [rbp - 0xcf98a40], al; ret; 
0x000000000005dc97: add byte ptr [rbp - 0xcfb8b37], al; ret; 
0x000000000018ab5f: add byte ptr [rbp - 0xd], ah; jmp rsp; 
0x0000000000178678: add byte ptr [rbp - 0xe], ch; jmp qword ptr [rax]; 
0x0000000000178438: add byte ptr [rbp - 0xe], dl; jmp qword ptr [rax]; 
0x0000000000035887: add byte ptr [rbp - 1], bh; mov dword ptr fs:[rax], 0x16; mov rdi, rbx; mov eax, 3; syscall; 
0x0000000000186b60: add byte ptr [rbp - 4], ah; call qword ptr [rax + 0x20fffc64]; cld; push qword ptr [rax + 0x40fffc63]; movsxd rdi, esp; call rax; 
0x00000000001874c0: add byte ptr [rbp - 4], bh; push qword ptr [rax + 0x7c]; cld; jmp rax; 
0x000000000018d65f: add byte ptr [rbp - 6], dl; lcall ptr [rdx + rdi*4 + 0x26440002]; cli; jmp rsp; 
0x00000000001b3c30: add byte ptr [rbp - 9], bh; call qword ptr [rbp + 1]; 
0x00000000001a4ec3: add byte ptr [rbp*2 + 0x68980001], bl; hlt; jmp qword ptr [rcx]; 
0x00000000000059bf: add byte ptr [rbp], ah; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x37; 
0x000000000011b07a: add byte ptr [rbx + 0x1074ffff], al; mov eax, r12d; syscall; 
0x000000000011afe3: add byte ptr [rbx + 0x1174ffff], al; mov eax, 3; syscall; 
0x0000000000139159: add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x0000000000022273: add byte ptr [rbx + 0x15890fe6], al; xchg eax, edi; sbb dword ptr [rdx], edi; add byte ptr [rbx - 0x76bef019], al; ret 0xb8; 
0x000000000011b115: add byte ptr [rbx + 0x1b74fffa], al; movsxd rdi, edx; mov eax, r12d; syscall; 
0x0000000000165d0e: add byte ptr [rbx + 0x1b74fffa], al; movsxd rdi, edx; mov eax, r13d; syscall; 
0x0000000000072eff: add byte ptr [rbx + 0x2002507], cl; add byte ptr [rax], al; ret; 
0x000000000002209d: add byte ptr [rbx + 0x2074fff8], al; add rsp, 8; ret; 
0x00000000000ebbef: add byte ptr [rbx + 0x2475eaf8], al; mov rdx, rbx; mov esi, 9; mov rdi, r9; mov eax, r8d; syscall; 
0x00000000000a1ade: add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000000769c8: add byte ptr [rbx + 0x275fff8], al; pop rbx; ret; 
0x00000000000ebb79: add byte ptr [rbx + 0x297409fe], al; mov rdx, rbx; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000011ed22: add byte ptr [rbx + 0x2a495705], cl; add byte ptr [rbp + 0x481374c0], al; add esp, 0x30; lea rax, qword ptr [rip + 0x2a4968]; pop rbx; ret; 
0x00000000000fc7cd: add byte ptr [rbx + 0x2c51cc0d], cl; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000f94f2: add byte ptr [rbx + 0x2c82bb05], cl; add byte ptr [rcx + 0x2c82e505], cl; add byte ptr [rax - 0x73], cl; add eax, 0x2c82b2; ret; 
0x00000000000f9332: add byte ptr [rbx + 0x2c847b05], cl; add byte ptr [rcx + 0x2c84a505], cl; add byte ptr [rax - 0x73], cl; add eax, 0x2c8472; ret; 
0x00000000000f915f: add byte ptr [rbx + 0x2c864e05], cl; add byte ptr [rcx + 0x2c867805], cl; add byte ptr [rax - 0x73], cl; add eax, 0x2c8645; add rsp, 8; ret; 
0x00000000000f12af: add byte ptr [rbx + 0x2d2dbe05], cl; add byte ptr [rbp + 0x482775c0], al; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x14; syscall; 
0x00000000000f120f: add byte ptr [rbx + 0x2d2e5e05], cl; add byte ptr [rbp + 0x482775c0], al; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x13; syscall; 
0x00000000000a0caf: add byte ptr [rbx + 0x30178916], cl; in eax, dx; mov byte ptr [rdi + 4], ch; ret; 
0x0000000000044da8: add byte ptr [rbx + 0x3108247c], cl; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x000000000008aa6f: add byte ptr [rbx + 0x3395fa05], cl; add byte ptr [rbp + 0x481675c0], al; lea eax, dword ptr [rip + 0x3361ff]; mov qword ptr [rip + 0x3361e8], rax; ret; 
0x0000000000083adf: add byte ptr [rbx + 0x33a68a05], cl; add byte ptr [rbp - 0xcf98740], al; ret; 
0x000000000007c8d5: add byte ptr [rbx + 0x3440e705], al; add byte ptr [rcx], al; ret; 
0x000000000009e44f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000009f27f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009ce3f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000036f5f: add byte ptr [rbx + 0x38d10e05], cl; add byte ptr [rbp - 0x41d98a40], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x82; syscall; 
0x0000000000032196: add byte ptr [rbx + 0x391ed30d], cl; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000031dc8: add byte ptr [rbx + 0x3922a13d], cl; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000d3f13: add byte ptr [rbx + 0x394104c0], al; ret 0x697e; 
0x000000000006d0ab: add byte ptr [rbx + 0x397729f8], al; nop dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000e0ded: add byte ptr [rbx + 0x3978244c], cl; ret 0x1372; 
0x000000000002245f: add byte ptr [rbx + 0x3a179a05], cl; add byte ptr [rbp + 0x480e74c0], al; lea eax, dword ptr [rip + 0x3a178f]; ret; 
0x00000000000ebad7: add byte ptr [rbx + 0x3b75eaf8], al; mov rdx, r8; mov esi, 9; mov rdi, r10; mov eax, r9d; syscall; 
0x00000000000a17c3: add byte ptr [rbx + 0x41], bl; and ecx, 0xfff; pop rbp; lea rax, qword ptr [r9 + 1]; pop r12; ret; 
0x00000000000c1ed0: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000010ac58: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret; 
0x00000000001352ce: add byte ptr [rbx + 0x440f03fd], al; call 0x12c5c2; jmp qword ptr [rsi + 0xf]; 
0x000000000007a30f: add byte ptr [rbx + 0x4464f3e0], al; mov esp, dword ptr [rbp]; or eax, 0x40; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x000000000009f24f: add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000009daef: add byte ptr [rbx + 0x4568a0e], cl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a2a8f: add byte ptr [rbx + 0x463b0447], cl; add al, 0xf; test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x00000000000a2abf: add byte ptr [rbx + 0x463b0c47], cl; or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x00000000001a852b: add byte ptr [rbx + 0x47200001], al; cmc; jmp rax; 
0x000000000009e41f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000009ce1f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000015c85f: add byte ptr [rbx + 0x48028901], cl; lea eax, dword ptr [rdx + 3]; ret; 
0x000000000015fc0f: add byte ptr [rbx + 0x48028901], cl; mov eax, edi; ret; 
0x000000000012e44b: add byte ptr [rbx + 0x48082444], cl; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000036fc5: add byte ptr [rbx + 0x48082444], cl; add esp, 0x18; ret; 
0x00000000000c0b63: add byte ptr [rbx + 0x480c2444], cl; add esp, 0x28; ret; 
0x0000000000127088: add byte ptr [rbx + 0x48102444], cl; lea edi, dword ptr [rip + 0x54c0c]; movsxd rax, dword ptr [rdi + rax*4]; add rdi, rax; jmp rdi; 
0x000000000009f23f: add byte ptr [rbx + 0x48178916], cl; lea eax, dword ptr [rdi + 4]; ret; 
0x00000000000462e0: add byte ptr [rbx + 0x48302444], cl; add esp, 0x170; pop rbx; pop rbp; pop r12; ret; 
0x000000000006e24f: add byte ptr [rbx + 0x48], bl; mov eax, ebp; pop rbp; pop r12; ret; 
0x000000000007442f: add byte ptr [rbx + 0x48], dl; mov eax, dword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x00000000000fa603: add byte ptr [rbx + 0x48], dl; movsxd rbx, edi; mov eax, ecx; mov rdi, rbx; syscall; 
0x000000000011b23e: add byte ptr [rbx + 0x48f94060], al; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c0b46: add byte ptr [rbx + 0x4c0c247c], cl; movsxd rdx, ecx; syscall; 
0x0000000000144fbf: add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144dbf: add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144bbf: add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000018ca4f: add byte ptr [rbx + 0x4fff880], ah; pop rdi; add al, byte ptr [rax]; ret 0xf880; 
0x000000000014c92f: add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x0000000000077c9f: add byte ptr [rbx + 0x5d], bl; mov eax, 0xffffffff; pop r12; ret; 
0x000000000012256f: add byte ptr [rbx + 0x5d], bl; mov eax, 1; pop r12; ret; 
0x0000000000070666: add byte ptr [rbx + 0x5d], bl; mov eax, edx; pop r12; ret; 
0x00000000000f0790: add byte ptr [rbx + 0x5d], bl; pop r12; mov eax, r9d; pop r13; ret; 
0x000000000002487d: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000001ff72: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000021a1b: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000001f591: add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000007a34f: add byte ptr [rbx + 0x5d], bl; xor eax, eax; pop r12; ret; 
0x00000000000735ff: add byte ptr [rbx + 0x5e8c107], cl; and eax, 1; ret; 
0x000000000012384e: add byte ptr [rbx + 0x634801ea], al; ret 0xd285; 
0x000000000018c8d7: add byte ptr [rbx + 0x63], ah; clc; lcall ptr [rdx + rdx*2 + 0x63820002]; clc; jmp rsp; 
0x000000000009d509: add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000f7fe6: add byte ptr [rbx + 0x64b83850], cl; add byte ptr [rax], al; add byte ptr [rbp - 0x3dbaf02e], al; ret; 
0x0000000000096817: add byte ptr [rbx + 0x66102444], cl; mov dword ptr [rdi + 4], r11d; add rdi, 6; mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x000000000007b509: add byte ptr [rbx + 0x66b9eb03], cl; nop; mov eax, 0xffffffff; ret; 
0x0000000000077ac1: add byte ptr [rbx + 0x66d0eb13], cl; nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x00000000000e44cf: add byte ptr [rbx + 0x6890447], cl; xor eax, eax; ret; 
0x000000000012d737: add byte ptr [rbx + 0x748d4802], cl; and al, 0x10; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012d88f: add byte ptr [rbx + 0x748d4806], cl; and al, 0x10; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000004ef56: add byte ptr [rbx + 0x7501046a], al; ret; 
0x000000000003c0b6: add byte ptr [rbx + 0x75c08500], cl; or ebp, ecx; mov esi, 0x66fffff6; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000124621: add byte ptr [rbx + 0x77d7e83b], cl; cld; jmp qword ptr [rsi - 0x7d]; 
0x000000000007a317: add byte ptr [rbx + 0x78940c8], al; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x0000000000072ecf: add byte ptr [rbx + 0x8042507], cl; add byte ptr [rax], al; ret; 
0x0000000000123bb7: add byte ptr [rbx + 0x894101], cl; mov eax, 1; ret; 
0x0000000000131c3b: add byte ptr [rbx + 0xa74fff8], al; movsxd rdi, eax; mov eax, 3; syscall; 
0x000000000012f152: add byte ptr [rbx + 0xa74fff9], al; movsxd rdi, ecx; mov eax, 3; syscall; 
0x00000000000b9f3f: add byte ptr [rbx + 0xb7401fe], al; xor eax, eax; ret; 
0x000000000012682f: add byte ptr [rbx + 0xb74023e], al; mov eax, 1; ret; 
0x00000000001063cf: add byte ptr [rbx + 0xb7456ff], al; mov eax, 7; ret; 
0x00000000000efcaf: add byte ptr [rbx + 0xb7704fa], al; mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x000000000007979d: add byte ptr [rbx + 0xc08b], cl; add byte ptr [rax - 0x77], cl; fild word ptr [rbp + 0x4f0f48c9]; ret 0x8948; 
0x00000000000fc800: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0x2c51c6]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000014cfdf: add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014cf6f: add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014ceff: add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000019c390: add byte ptr [rbx + 0xe], cl; adc byte ptr [rbx + 0xa440202], al; ret; 
0x00000000001aef20: add byte ptr [rbx + 0xe], dl; adc byte ptr [rbx + 0x1990302], al; ret; 
0x0000000000026917: add byte ptr [rbx + 0xfc98508], cl; mov byte ptr [rcx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x00000000000007bc: add byte ptr [rbx + 1], al; ret 0x102; 
0x00000000001b7feb: add byte ptr [rbx + 6], bl; add byte ptr [rax], al; ret 5; 
0x00000000001a24ab: add byte ptr [rbx + rax*2], al; add dword ptr [rax], eax; push rax; sbb edx, esi; call qword ptr [rdx]; 
0x000000000003256e: add byte ptr [rbx + rax*4 + 0x38], ah; add al, 0x74; fmul qword ptr [rcx + 0x63]; cld; mov eax, 3; syscall; 
0x00000000000c2686: add byte ptr [rbx + rax*4 + 0x38], ah; sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x00000000000c2443: add byte ptr [rbx + rax*4 + 0x3a], ah; mov rdx, -1; cmovne rax, rdx; ret; 
0x000000000018ca67: add byte ptr [rbx + rax*4 - 8], dh; call rsp; 
0x000000000019a4cb: add byte ptr [rbx + rax*8], ah; add byte ptr [rax], al; jo 0x19a4fd; out dx, al; call qword ptr [rdx]; 
0x000000000019a503: add byte ptr [rbx + rax*8], bl; add byte ptr [rax + 0x2b], bh; out dx, al; call qword ptr [rdx]; 
0x000000000019e4cb: add byte ptr [rbx + rax], ah; add dword ptr [rax], eax; or byte ptr [rdx - 0x10], 0xff; ret; 
0x00000000001a4d63: add byte ptr [rbx + rbp*2 + 0x66180001], bh; hlt; jmp qword ptr [rcx]; 
0x00000000001a4d0b: add byte ptr [rbx + rbp*2 + 1], ah; add al, dh; hlt; jmp qword ptr [rdi]; 
0x0000000000188cb7: add byte ptr [rbx + rbp*2], al; out dx, al; call rsp; 
0x00000000001a4cb3: add byte ptr [rbx + rbp*2], cl; add dword ptr [rax], eax; test al, 0x65; hlt; jmp qword ptr [rcx]; 
0x00000000001a8cd3: add byte ptr [rbx + rbp*4], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xb], bl; jmp qword ptr [rdi + 1]; 
0x000000000018c5f7: add byte ptr [rbx + rbp], al; clc; dec dword ptr [rdi + rdi + 0x2bd40002]; clc; call rsp; 
0x000000000005f8a8: add byte ptr [rbx + rbx - 0x7d], dh; mov ebp, 0xffffeeec; add byte ptr [rdx + rdx - 0x7d], dh; mov ebp, 0xffffeee8; adc byte ptr [rbp - 0x6bf001bf], cl; ret 0xd284; 
0x000000000001b047: add byte ptr [rbx + rbx*2 + 0x18], bh; add byte ptr [rax], al; cwde; ret 0x3b; 
0x00000000001a7d3b: add byte ptr [rbx + rbx*4 + 0x30300001], dl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7d53: add byte ptr [rbx + rbx*4 + 0x30480001], ch; cmc; jmp qword ptr [rax]; 
0x00000000001a7cab: add byte ptr [rbx + rbx*4], al; add dword ptr [rax], eax; jo 0x1a7ce1; cmc; jmp qword ptr [rcx]; 
0x00000000001a7cc3: add byte ptr [rbx + rbx*4], bl; add dword ptr [rax], eax; mov byte ptr [rdi], ch; cmc; jmp qword ptr [rcx]; 
0x0000000000188faf: add byte ptr [rbx + rbx*4], dl; out dx, al; jmp rsp; 
0x000000000019bd63: add byte ptr [rbx + rbx*8 + 0x6d780000], bh; out dx, al; call qword ptr [rdi]; 
0x000000000018dd47: add byte ptr [rbx + rbx*8 - 0x18330006], ah; add al, byte ptr [rax]; mov ah, 0xdb; cli; jmp rsp; 
0x000000000018e13f: add byte ptr [rbx + rbx*8], ah; std; jmp rsp; 
0x0000000000074e12: add byte ptr [rbx + rcx + 0x5b], dh; pop rbp; pop r12; ret; 
0x000000000010038e: add byte ptr [rbx + rcx*4 + 0x2d], cl; ret 0x2bf5; 
0x0000000000112f46: add byte ptr [rbx + rcx*4 + 0x32], ah; syscall; 
0x000000000012ff3a: add byte ptr [rbx + rcx*4 + 0x4d], al; mov byte ptr [rax + 1], cl; ret; 
0x0000000000039c67: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x00000000000384d7: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x00000000000bc573: add byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rax - 0x77], cl; and cl, r13b; ret 0xfffe; 
0x00000000000da19f: add byte ptr [rbx + rcx*4 + 0x78], cl; or byte ptr [rax + 0x63], cl; ret 0xc148; 
0x00000000000485e6: add byte ptr [rbx + rcx*4 - 0x7c], cl; and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0xd7e9; 
0x000000000018cb0f: add byte ptr [rbx + rcx*4], al; clc; jmp rsp; 
0x00000000001aacf3: add byte ptr [rbx + rcx*8 + 1], cl; add al, bh; fcomi st(5); call qword ptr [rax]; 
0x00000000001aad4b: add byte ptr [rbx + rcx*8 - 0x237fffff], ah; cmc; call qword ptr [rax]; 
0x00000000001b1d03: add byte ptr [rbx + rdi + 2], bl; add byte ptr [rax], cl; or al, 0xf7; call qword ptr [rsi]; 
0x000000000018bc9f: add byte ptr [rbx + rdi - 9], dh; jmp rsp; 
0x00000000001a5ceb: add byte ptr [rbx + rdi*2 + 1], al; add al, dh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a5d03: add byte ptr [rbx + rdi*2 + 1], bl; add byte ptr [rax], cl; mov ch, 0xf4; call qword ptr [rbx]; 
0x000000000018dbbf: add byte ptr [rbx + rdi*4], ah; cli; jmp rsp; 
0x0000000000199d03: add byte ptr [rbx + rdi*4], bl; add byte ptr [rax], bl; adc al, 0xee; jmp qword ptr [rcx]; 
0x00000000001add23: add byte ptr [rbx + rdi*8 + 1], bh; add byte ptr [rax], ch; and dh, dh; jmp qword ptr [rcx]; 
0x00000000001a1cdb: add byte ptr [rbx + rdi], dh; add dword ptr [rax], eax; mov al, 0xee; int1; jmp qword ptr [rcx]; 
0x00000000001a1cbb: add byte ptr [rbx + rdi], dl; add dword ptr [rax], eax; and dh, ch; int1; jmp qword ptr [rcx]; 
0x000000000018ce9f: add byte ptr [rbx + rdx - 7], dl; call rsp; 
0x00000000001898ef: add byte ptr [rbx + rdx*2 - 0x11], al; call qword ptr [rcx + rbp + 0x54e40001]; out dx, eax; jmp rsp; 
0x00000000001a752b: add byte ptr [rbx + rdx*4 + 0x20c00001], al; cmc; jmp qword ptr [rsi]; 
0x0000000000197543: add byte ptr [rbx + rdx*4 - 0x42780000], bl; in eax, dx; call qword ptr [rsi]; 
0x000000000019752b: add byte ptr [rbx + rdx*4 - 0x42800000], al; in eax, dx; jmp qword ptr [rax]; 
0x000000000017a553: add byte ptr [rbx + rdx*8 - 0xa], ch; call rdx; 
0x00000000001ab4bb: add byte ptr [rbx + rdx*8], dl; add dword ptr [rax], eax; shl ch, 1; cmc; jmp rbx; 
0x0000000000189697: add byte ptr [rbx + rsi + 0x21bcffef], dh; add dword ptr [rax], eax; in al, 0x33; out dx, eax; call rsp; 
0x00000000001b1513: add byte ptr [rbx + rsi + 2], ch; add al, bl; div dh; call qword ptr [rsi]; 
0x0000000000129497: add byte ptr [rbx + rsi*2 + 0x48], dh; mov eax, dword ptr [rdi + 8]; lea rdx, qword ptr [rsp + 0xc]; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x000000000018db6f: add byte ptr [rbx + rsi*4 - 6], ah; call rsp; 
0x0000000000062995: add byte ptr [rbx - 0x109773], cl; jmp qword ptr [rsi - 0x77]; 
0x0000000000060292: add byte ptr [rbx - 0x10df43], al; call qword ptr [rbx + 0xf]; 
0x0000000000064cbc: add byte ptr [rbx - 0x10f6b], cl; inc dword ptr [rbx - 0x7cf0cf06]; ret; 
0x000000000005f94e: add byte ptr [rbx - 0x111743], al; call qword ptr [rax]; 
0x0000000000060c38: add byte ptr [rbx - 0x113f43], al; call qword ptr [rbx + 0xf]; 
0x000000000005fc62: add byte ptr [rbx - 0x116b43], al; call qword ptr [rax]; 
0x000000000012cfdf: add byte ptr [rbx - 0x138afe08], al; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax]; jmp rax; 
0x000000000012d6e9: add byte ptr [rbx - 0x14f3dbbc], cl; xor eax, 0x8478b48; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000018ddcf: add byte ptr [rbx - 0x15530006], dl; add al, byte ptr [rax]; xor al, 0xe4; cli; call rsp; 
0x0000000000049be6: add byte ptr [rbx - 0x16], cl; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000012cfa7: add byte ptr [rbx - 0x1976b7fa], cl; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000005ea6e: add byte ptr [rbx - 0x1e], cl; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x00000000001176ef: add byte ptr [rbx - 0x1f8bc906], al; mov eax, 0xffffffff; ret; 
0x00000000000c1099: add byte ptr [rbx - 0x2776d787], cl; mov esi, 0x81; syscall; 
0x00000000000739df: add byte ptr [rbx - 0x2e8b0008], al; pop rbx; pop rbp; mov eax, 0xffffffff; pop r12; ret; 
0x00000000000ed0df: add byte ptr [rbx - 0x2f], cl; movsxd rdi, edi; mov eax, 0xdd; syscall; 
0x00000000000fa53f: add byte ptr [rbx - 0x2f], cl; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x119; syscall; 
0x0000000000127767: add byte ptr [rbx - 0x37f0a7bf], cl; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000012773f: add byte ptr [rbx - 0x37f0b7bf], cl; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000128016: add byte ptr [rbx - 0x37f0efc0], cl; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000012804e: add byte ptr [rbx - 0x37f0f3c0], cl; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000123c02: add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rcx + 0xa8], eax; mov eax, 1; ret; 
0x0000000000127ff9: add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000002ea7f: add byte ptr [rbx - 0x387cfe40], al; add dword ptr [rax - 0x7d], ecx; ret 0x8310; 
0x0000000000076947: add byte ptr [rbx - 0x3b7cb7fe], cl; sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000007a61f: add byte ptr [rbx - 0x3d14df38], al; nop dword ptr [rax]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000011c49c: add byte ptr [rbx - 0x3fce000a], ch; ret; 
0x00000000000fd91f: add byte ptr [rbx - 0x3fcecf11], al; cmp edi, 9; setbe al; ret; 
0x000000000012e60f: add byte ptr [rbx - 0x47fbd7b9], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000127f9f: add byte ptr [rbx - 0x47fd76f9], cl; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000012770f: add byte ptr [rbx - 0x47fd76ff], cl; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000016d3e3: add byte ptr [rbx - 0x47fffffb], dh; add eax, 0x5bd0000; add byte ptr [rax], al; ret 5; 
0x000000000007b1af: add byte ptr [rbx - 0x4c8b0008], al; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000004e364: add byte ptr [rbx - 0x4d773], cl; jmp qword ptr [rsi - 0x77]; 
0x00000000000b6fd8: add byte ptr [rbx - 0x50f0ec18], al; ret 0x8941; 
0x00000000000f9e14: add byte ptr [rbx - 0x57ccf16], al; or dword ptr [rdi], ecx; xchg dword ptr [rdi], ebx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000f9854: add byte ptr [rbx - 0x57ccf16], al; or dword ptr [rdi], ecx; xchg dword ptr [rdi], edx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001877c4: add byte ptr [rbx - 0x5d8f0004], ah; cld; jmp rax; 
0x00000000000efa59: add byte ptr [rbx - 0x6117c385], cl; ret; 
0x0000000000036eca: add byte ptr [rbx - 0x6f3c0038], al; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x00000000000d0b77: add byte ptr [rbx - 0x708bfb1e], al; mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x00000000000ab5ca: add byte ptr [rbx - 0x71f0e708], al; ret; 
0x00000000001194f0: add byte ptr [rbx - 0x71f0f905], al; ret 1; 
0x0000000000064c4f: add byte ptr [rbx - 0x73], al; lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret 0x4504; 
0x0000000000047e0f: add byte ptr [rbx - 0x73], al; lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000634d7: add byte ptr [rbx - 0x74bbfe40], al; test dword ptr [rax + 0xfffffee], edi; test dword ptr [rdi + rax*8 + 0x6ae9ffff], esi; ret 0xffff; 
0x00000000000487a4: add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x000000000015c86f: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, dword ptr [rdx + 4]; ret; 
0x000000000015852f: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x0000000000127fd6: add byte ptr [rbx - 0x7637f100], cl; ror byte ptr [rax - 0x77], 2; mov eax, 1; ret; 
0x000000000002227c: add byte ptr [rbx - 0x76bef019], al; ret 0xb8; 
0x00000000000fa58a: add byte ptr [rbx - 0x76ebdbb4], cl; ret; 
0x00000000000205e2: add byte ptr [rbx - 0x76ff4783], al; ret; 
0x000000000011c7f7: add byte ptr [rbx - 0x77], al; scasd eax, dword ptr [rdi]; or bl, ch; ret 0x4890; 
0x00000000000f94eb: add byte ptr [rbx - 0x77], bl; add eax, 0x2c82ed; mov eax, dword ptr [rip + 0x2c82bb]; mov dword ptr [rip + 0x2c82e5], eax; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f932b: add byte ptr [rbx - 0x77], bl; add eax, 0x2c84ad; mov eax, dword ptr [rip + 0x2c847b]; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000c0cb2: add byte ptr [rbx - 0x77], bl; call 0x41684e17; pop rbp; ret; 
0x0000000000021e7f: add byte ptr [rbx - 0x7a2dcf00], cl; ror byte ptr [rdi], 0x94; ret 0x8d48; 
0x00000000000eea2a: add byte ptr [rbx - 0x7acfdb84], cl; dec dword ptr [rdi]; xchg eax, esp; ret 0x7c83; 
0x0000000000030f95: add byte ptr [rbx - 0x7af0fa08], al; ret 0xfffa; 
0x0000000000075d60: add byte ptr [rbx - 0x7af0fe08], al; ret; 
0x000000000004daa4: add byte ptr [rbx - 0x7af0fe40], al; ret 0xfffc; 
0x00000000000d88ff: add byte ptr [rbx - 0x7bf00002], al; mov ebx, 0x8dfffffd; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000ed4a3: add byte ptr [rbx - 0x7bf0cfbd], cl; ret; 
0x0000000000163776: add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000000d31de: add byte ptr [rbx - 0x7bf0fd06], al; add dword ptr [rip + 0x438d0000], eax; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000007d473: add byte ptr [rbx - 0x7bf0fe1f], al; stosd dword ptr [rdi], eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4d07; 
0x0000000000115820: add byte ptr [rbx - 0x7cb7db84], cl; call qword ptr [rax]; 
0x00000000000ba187: add byte ptr [rbx - 0x7cb7fb8d], cl; ret; 
0x00000000000d0dcf: add byte ptr [rbx - 0x7cb7fe3b], al; ret; 
0x0000000000079fdf: add byte ptr [rbx - 0x7cb7fe3f], al; ret 0xc601; 
0x0000000000113b7f: add byte ptr [rbx - 0x7cb7fe40], al; ret 0x3904; 
0x00000000000ca267: add byte ptr [rbx - 0x7cb7fe40], al; ret 0x4408; 
0x000000000002284f: add byte ptr [rbx - 0x7cb7fe40], al; ret 0xc601; 
0x00000000000803d8: add byte ptr [rbx - 0x7d], cl; cmp al, 8; add dword ptr [rax + 0x39], ecx; ret; 
0x00000000000802ef: add byte ptr [rbx - 0x7d], cl; sub al, 8; add dword ptr [rax + 0x39], ecx; ret; 
0x00000000000f976f: add byte ptr [rbx - 0x7d], dl; call qword ptr [rcx]; 
0x00000000000cc618: add byte ptr [rbx - 0x9f43], al; jmp qword ptr [rdx]; 
0x00000000001ac9a4: add byte ptr [rbx - 0xb], dh; jmp qword ptr [rdx]; 
0x00000000001a5360: add byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x0000000000178380: add byte ptr [rbx - 0xe], cl; call qword ptr [rax]; 
0x00000000001783f8: add byte ptr [rbx - 0xe], dl; jmp qword ptr [rax]; 
0x00000000001a7ebb: add byte ptr [rbx*4 + 0x32600001], dl; cmc; jmp qword ptr [rcx]; 
0x00000000001ac4ab: add byte ptr [rbx], al; add dword ptr [rax], eax; cmp ch, 0xf5; call qword ptr [rax]; 
0x00000000000f2314: add byte ptr [rbx], al; push rsp; and al, 0x38; mov eax, edx; add rsp, 0x48; ret; 
0x00000000001a8250: add byte ptr [rbx], bh; cmc; jmp qword ptr [rcx]; 
0x00000000001933af: add byte ptr [rbx], bh; ret; 
0x00000000001b44d3: add byte ptr [rbx], ch; add al, byte ptr [rax]; clc; nop; idiv edi; ret; 
0x00000000001a7910: add byte ptr [rbx], ch; cmc; jmp qword ptr [rcx]; 
0x00000000000f2149: add byte ptr [rbx], cl; add byte ptr [rax], al; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000066b7: add byte ptr [rcx + 0x1200001d], bh; add byte ptr [rax + rax], cl; push rax; ret 7; 
0x00000000000c2868: add byte ptr [rcx + 0x146348f6], cl; mov al, 0x48; add eax, edx; jmp rax; 
0x00000000000542a6: add byte ptr [rcx + 0x1b802], cl; add byte ptr [rax], al; ret; 
0x0000000000042f6a: add byte ptr [rcx + 0x29], cl; ret; 
0x00000000000b1003: add byte ptr [rcx + 0x29], cl; ror byte ptr [rax + 0x63], 0x84; and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000f94f8: add byte ptr [rcx + 0x2c82e505], cl; add byte ptr [rax - 0x73], cl; add eax, 0x2c82b2; ret; 
0x00000000000f9338: add byte ptr [rcx + 0x2c84a505], cl; add byte ptr [rax - 0x73], cl; add eax, 0x2c8472; ret; 
0x00000000000f9165: add byte ptr [rcx + 0x2c867805], cl; add byte ptr [rax - 0x73], cl; add eax, 0x2c8645; add rsp, 8; ret; 
0x00000000001276a3: add byte ptr [rcx + 0x346348f6], cl; mov al, 0x48; add eax, esi; jmp rax; 
0x000000000015a51f: add byte ptr [rcx + 0x3518911], cl; ret; 
0x00000000001143f7: add byte ptr [rcx + 0x39], al; ret 0x840f; 
0x0000000000113be2: add byte ptr [rcx + 0x39], al; ret; 
0x0000000000045b21: add byte ptr [rcx + 0x39], cl; ret 0x840f; 
0x000000000008c776: add byte ptr [rcx + 0x39], cl; ror byte ptr [rdi + rcx + 0x47], 1; ret 0x894c; 
0x000000000002221a: add byte ptr [rcx + 0x3a1a1b3d], cl; add byte ptr [rcx + rcx*4 + 5], al; fcomp dword ptr [rcx]; cmp al, byte ptr [rax]; pop rbx; ret; 
0x000000000006412c: add byte ptr [rcx + 0x415d5bc8], cl; pop rsp; pop r13; ret; 
0x000000000004934e: add byte ptr [rcx + 0x415d5bd0], cl; pop rsp; ret; 
0x000000000010002d: add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; pop r13; ret; 
0x00000000000f4771: add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x0000000000070912: add byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x000000000007edea: add byte ptr [rcx + 0x4389247b], cl; adc al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000968bf: add byte ptr [rcx + 0x447c60f], cl; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000015a4ff: add byte ptr [rcx + 0x4518811], cl; ret; 
0x000000000009ddef: add byte ptr [rcx + 0x4578817], cl; ret; 
0x00000000000ba141: add byte ptr [rcx + 0x46348f0], cl; xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x000000000009691f: add byte ptr [rcx + 0x4789440f], cl; add al, 0x48; lea eax, dword ptr [rdi + 7]; ret; 
0x000000000009687f: add byte ptr [rcx + 0x4789440f], cl; add al, 0x48; mov eax, edi; ret; 
0x00000000000b4a1e: add byte ptr [rcx + 0x48d23102], cl; add esp, 8; mov rax, rdx; ret; 
0x000000000007ba96: add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x000000000008008c: add byte ptr [rcx + 0x548d48cf], cl; ret; 
0x00000000000bd2b9: add byte ptr [rcx + 0x55], al; push r12; push rbp; push rbx; mov rbx, rsi; syscall; 
0x000000000009696f: add byte ptr [rcx + 0x5789660f], cl; add al, 0x48; lea eax, dword ptr [rdi + 5]; ret; 
0x000000000009697f: add byte ptr [rcx + 0x5789660f], cl; add al, 0x48; lea eax, dword ptr [rdi + 6]; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968df: add byte ptr [rcx + 0x5789660f], cl; add al, 0x48; mov eax, edi; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968cf: add byte ptr [rcx + 0x5789660f], cl; add al, 0x48; mov eax, edi; ret; 
0x00000000000ebb17: add byte ptr [rcx + 0x58b48c2], cl; and r13d, dword ptr [rip + 0x64daf700]; mov dword ptr [rax], edx; mov eax, 0xffffffff; ret; 
0x00000000000dc8ef: add byte ptr [rcx + 0x58d48c2], cl; fmul dword ptr [rcx]; add byte ptr [rax + 0x63], cl; adc al, 0x90; add rax, rdx; jmp rax; 
0x00000000000e19c5: add byte ptr [rcx + 0x5bc03128], cl; pop rbp; pop r12; ret; 
0x0000000000133656: add byte ptr [rcx + 0x5c], al; jmp rax; 
0x0000000000021b20: add byte ptr [rcx + 0x5c], al; ret; 
0x0000000000053871: add byte ptr [rcx + 0x5d], al; ret; 
0x00000000000537a3: add byte ptr [rcx + 0x5e], al; ret; 
0x000000000018c88f: add byte ptr [rcx + 0x60], ch; clc; call rsp; 
0x000000000014291e: add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000323d1: add byte ptr [rcx + 0x63], cl; cld; mov eax, 3; syscall; 
0x000000000015fc7c: add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000009cc98: add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000c752f: add byte ptr [rcx + 0x63], cl; ret; 
0x000000000002e6d6: add byte ptr [rcx + 0x63], cl; std; mov eax, 3; syscall; 
0x00000000000c08ff: add byte ptr [rcx + 0x64], bh; mov rsi, rdi; mov eax, ecx; syscall; 
0x000000000018c927: add byte ptr [rcx + 0x6a], bh; clc; lcall ptr [rbp + rdx*2 + 0x6a980002]; clc; jmp rsp; 
0x000000000002ff3f: add byte ptr [rcx + 0x7fe083f8], cl; ret; 
0x00000000000f0fdf: add byte ptr [rcx + 0x8c], bh; mov esi, esi; movsxd rdi, edi; mov eax, ecx; syscall; 
0x0000000000127f03: add byte ptr [rcx + 0xc6348f6], cl; mov al, 0x48; add eax, ecx; jmp rax; 
0x0000000000197538: add byte ptr [rcx + 0xe], al; adc byte ptr [rbx + 0x14000002], al; add byte ptr [rax], al; add byte ptr [rbx + rdx*4 - 0x42780000], bl; in eax, dx; call qword ptr [rsi]; 
0x000000000019e208: add byte ptr [rcx + 0xe], dl; adc byte ptr [rdx + rax - 0x79e7f1b4], cl; add eax, dword ptr [rdi + 0xe]; and byte ptr [rbx + 0xac90204], al; ret; 
0x00000000000a1ab7: add byte ptr [rcx + 0xee8c1c8], cl; and eax, 0x3fc00; pop rbx; ret; 
0x000000000003e5f9: add byte ptr [rcx + 0xf], al; mov dh, 0x75; add byte ptr [rax - 0x7c], al; test byte ptr [rdi], 0x84; ret 0x15; 
0x00000000000e0d92: add byte ptr [rcx + 0xf], al; mov dh, 4; or byte ptr [rcx], bh; ret 0x1372; 
0x0000000000049022: add byte ptr [rcx + 0xf], al; xchg eax, ebp; ret 0x8348; 
0x00000000000cf2f5: add byte ptr [rcx + 0xf], al; xchg eax, ebp; ret 0x8d47; 
0x000000000007d52d: add byte ptr [rcx + 0xf], al; xchg eax, esi; ret 0x8348; 
0x00000000000b1c13: add byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0x894c; 
0x0000000000105c52: add byte ptr [rcx + 0xf], cl; sub byte ptr [rcx], r13b; ret 0x8941; 
0x00000000001a830b: add byte ptr [rcx + 1], ah; add al, al; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001a8323: add byte ptr [rcx + 1], bh; add al, bl; cmp esi, ebp; jmp rbx; 
0x000000000005ffe9: add byte ptr [rcx + 1], cl; ret 0x3145; 
0x00000000000a143f: add byte ptr [rcx + 1], cl; ret; 
0x00000000000e1e7b: add byte ptr [rcx + 3], al; test dword ptr [rax + rax - 0x6b750000], esp; and al, 0xa4; add byte ptr [rax], al; add byte ptr [rcx], bh; ret 0x8f0f; 
0x0000000000000881: add byte ptr [rcx + 4], cl; or al, 1; add byte ptr [rax], al; ret 0x440c; 
0x00000000000838c3: add byte ptr [rcx + rax - 0x18], cl; jmp rax; 
0x00000000001882bf: add byte ptr [rcx + rax - 0x6d4b0015], dl; add byte ptr [rax], al; hlt; add ch, bl; jmp rsp; 
0x000000000018d7af: add byte ptr [rcx + rax*2 - 6], ah; call rsp; 
0x000000000018d7af: add byte ptr [rcx + rax*2 - 6], ah; call rsp; ret 2; 
0x000000000018af0f: add byte ptr [rcx + rax*2], dl; cmc; inc dword ptr [rbx + rax*8 + 0x49940001]; cmc; call rsp; 
0x00000000001a634b: add byte ptr [rcx + rax*4 - 0x3a3fffff], ah; hlt; call qword ptr [rax + 5]; 
0x0000000000196333: add byte ptr [rcx + rax*4 - 0x56b80000], cl; in eax, dx; call rcx; 
0x00000000001a62c3: add byte ptr [rcx + rax*4], bl; add dword ptr [rax], eax; pop rax; ret; 
0x000000000018df97: add byte ptr [rcx + rax], al; cld; call rsp; 
0x000000000018c287: add byte ptr [rcx + rax], dh; clc; call rsp; 
0x00000000001a0b63: add byte ptr [rcx + rbp - 0x2cc7ffff], bh; int1; call rsi; 
0x00000000000a307f: add byte ptr [rcx + rbp - 0x40], al; ret; 
0x000000000018d06f: add byte ptr [rcx + rbp*2 - 0x6fa30007], ah; add al, byte ptr [rax]; and al, 0x6a; stc; jmp rsp; 
0x000000000018d067: add byte ptr [rcx + rbp*2], ah; stc; call rsp; 
0x00000000001890b7: add byte ptr [rcx + rbp*4 - 0x12], dl; ljmp ptr [rsp + rsi*8 - 0x564c0000]; out dx, al; jmp rsp; 
0x000000000018db0f: add byte ptr [rcx + rbp*4], dh; cli; jmp rsp; 
0x0000000000022753: add byte ptr [rcx + rbp*8], al; paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x000000000019fb4b: add byte ptr [rcx + rbx + 0x18c00001], ah; int1; jmp qword ptr [rcx]; 
0x000000000019fb63: add byte ptr [rcx + rbx + 0x18d80001], bh; int1; jmp qword ptr [rax + 1]; 
0x00000000001888a7: add byte ptr [rcx + rbx - 0x4a530014], bh; add byte ptr [rax], al; in al, 0x19; in al, dx; jmp rsp; 
0x00000000001a7b2b: add byte ptr [rcx + rbx*4 + 0x2dc00001], al; cmc; jmp qword ptr [rcx]; 
0x00000000001a7b43: add byte ptr [rcx + rbx*4 + 0x2dd80001], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7b5b: add byte ptr [rcx + rbx*4 + 0x2df00001], dh; cmc; jmp qword ptr [rcx]; 
0x000000000018a387: add byte ptr [rcx + rbx*8 + 0x70bcfff1], dl; add dword ptr [rax], eax; movsb byte ptr [rdi], byte ptr [rsi]; fyl2x; call rsp; 
0x00000000001abb03: add byte ptr [rcx + rbx*8 + 1], bl; add byte ptr [rax - 0x11], cl; cmc; jmp qword ptr [rax]; 
0x00000000001abb43: add byte ptr [rcx + rbx*8 - 0x1057ffff], bl; cmc; call qword ptr [rdi]; 
0x0000000000101354: add byte ptr [rcx + rcx + 0x5b], dh; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000016d7bf: add byte ptr [rcx + rcx + 0x9bf0000], bh; add byte ptr [rax], al; ret 9; 
0x0000000000107a1c: add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x0000000000192b4b: add byte ptr [rcx + rcx*2 + 0x3a800000], ah; cli; jmp qword ptr [rcx]; 
0x0000000000198a03: add byte ptr [rcx + rcx*2 - 0xf280000], al; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001b2ac3: add byte ptr [rcx + rcx*2], bl; add al, byte ptr [rax]; or byte ptr [rbx - 9], cl; jmp qword ptr [rax]; 
0x000000000018c7c7: add byte ptr [rcx + rcx*2], dh; clc; push qword ptr [rbx + rcx*2 + 2]; add byte ptr [rdx + rcx*2], al; clc; call rsp; 
0x000000000006b0fd: add byte ptr [rcx + rcx*4 + 0x24], cl; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000000be6c9: add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 0x18; ret; 
0x000000000006de7c: add byte ptr [rcx + rcx*4 + 0x40], cl; or byte ptr [rbx + 0x48010442], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x0000000000122027: add byte ptr [rcx + rcx*4 + 0x40], cl; pop rax; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x000000000004733d: add byte ptr [rcx + rcx*4 + 0x47], cl; push -0x9617; jmp qword ptr [rsi + 0xf]; 
0x0000000000091e57: add byte ptr [rcx + rcx*4 + 0x4f], cl; cmp bl, dh; ret; 
0x000000000018caf7: add byte ptr [rcx + rcx*4 + 0x64f4fff8], al; add al, byte ptr [rax]; ret 0xf88a; 
0x0000000000080807: add byte ptr [rcx + rcx*4 + 0x74], cl; and al, 0x28; mov rdi, r14; call qword ptr [rax]; 
0x0000000000135136: add byte ptr [rcx + rcx*4 + 2], ah; add rsp, 0x518; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000fa370: add byte ptr [rcx + rcx*4 + 4], ah; and eax, 0x2d0; pop rax; pop rdi; call rax; 
0x0000000000022220: add byte ptr [rcx + rcx*4 + 5], al; fcomp dword ptr [rcx]; cmp al, byte ptr [rax]; pop rbx; ret; 
0x000000000012c16e: add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x000000000011fee9: add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax]; 
0x000000000011fee9: add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax]; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000000f5d2d: add byte ptr [rcx + rcx*4 - 0x11], cl; call rbx; 
0x00000000001281d2: add byte ptr [rcx + rcx*4 - 0x11], cl; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x000000000012b520: add byte ptr [rcx + rcx*4 - 0x12], cl; mov dword ptr [rsp + 0xc0], eax; mov rax, qword ptr [r15 + 8]; mov rdi, r15; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000012b43d: add byte ptr [rcx + rcx*4 - 0x12], cl; mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x000000000006f5c4: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000005fd7e: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r14; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1148], rcx; call qword ptr [rax + 0x38]; 
0x0000000000061b5a: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r14; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1158], rcx; call qword ptr [rax + 0x38]; 
0x000000000012d9f7: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbp; mov edx, 0xffffffff; xor eax, eax; call rcx; 
0x000000000010307e: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdx, rax; mov edi, 0x2000003; call qword ptr [rbx + 0x28]; 
0x0000000000079037: add byte ptr [rcx + rcx*4 - 0x16], cl; call qword ptr [rax + 0x40]; 
0x00000000000a4198: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rdi, rbp; call rbx; 
0x000000000004a192: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x598]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000a4793: add byte ptr [rcx + rcx*4 - 0x17], cl; mov rdi, rbp; call rbx; 
0x000000000012daf7: add byte ptr [rcx + rcx*4 - 0x18], al; mov rsi, rsp; mov rdi, rbp; mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x00000000000749d0: add byte ptr [rcx + rcx*4 - 0x19], cl; call 0x70f10; mov rax, qword ptr [r12 + 0xd8]; mov esi, r14d; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000124441: add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x000000000012c398: add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x0000000000125f5c: add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x30]; 
0x0000000000079e13: add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x48]; 
0x00000000000869c7: add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rbx + 0x38]; 
0x00000000000f5e61: add byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000007b601: add byte ptr [rcx + rcx*4 - 0x19], cl; lea r13, qword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x00000000000fc1c8: add byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, r9; mov qword ptr [rbp - 0x6d0], rax; mov eax, ebx; syscall; 
0x0000000000085301: add byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; call rax; 
0x0000000000085511: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rdi, r15; call rax; 
0x000000000004c1fc: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006ed90: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006e6e7: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078d9f: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000007031e: add byte ptr [rcx + rcx*4 - 0x1f], al; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000eb8f3: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000ebab4: add byte ptr [rcx + rcx*4 - 0x29], cl; mov eax, r9d; syscall; 
0x0000000000133b22: add byte ptr [rcx + rcx*4 - 0x2a], cl; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x0000000000133bc5: add byte ptr [rcx + rcx*4 - 0x2a], cl; mov rdi, r9; call qword ptr [rax + 0x18]; 
0x0000000000070689: add byte ptr [rcx + rcx*4 - 0x2a], cl; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000000f0821: add byte ptr [rcx + rcx*4 - 0x2e], cl; mov esi, 0x5401; mov rdi, rbx; mov eax, ebp; mov r13d, dword ptr fs:[r12]; syscall; 
0x0000000000062dfd: add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x10e0], r10; mov rsi, r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000060413: add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x10f8], r10; mov rsi, r8; mov qword ptr [rbp - 0x10e8], r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000004b8f1: add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x508], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004b7e0: add byte ptr [rcx + rcx*4 - 0x2e], cl; mov qword ptr [rbp - 0x538], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000fc336: add byte ptr [rcx + rcx*4 - 0x31], cl; mov byte ptr [rbp - 0x689], 0x73; mov eax, 0x14; syscall; 
0x00000000000ebbc4: add byte ptr [rcx + rcx*4 - 0x31], cl; mov eax, r8d; syscall; 
0x00000000000c10ce: add byte ptr [rcx + rcx*4 - 0x31], cl; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001337dd: add byte ptr [rcx + rcx*4 - 0x32], cl; mov rdi, r8; call qword ptr [rax + 8]; 
0x000000000007318f: add byte ptr [rcx + rcx*4 - 0x3e], cl; mov rsi, r12; mov rdi, r13; mov eax, r9d; syscall; 
0x0000000000051806: add byte ptr [rcx + rcx*4 - 0x40], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000007e46a: add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x0000000000123d3a: add byte ptr [rcx + rcx*4 - 0x4d], al; test al, 0; add byte ptr [rax], al; bswap r14d; call qword ptr [rax + 0x18]; 
0x00000000000dc43d: add byte ptr [rcx + rcx*4 - 0x7c], al; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000749e0: add byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000085093: add byte ptr [rcx + rcx*4 - 0xa], cl; call rax; 
0x00000000000792af: add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000049d00: add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; sub r12, r14; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000076560: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rdi, rbx; call rax; 
0x0000000000079692: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x0000000000074d57: add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x000000000011fce1: add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax]; 
0x00000000000f5c96: add byte ptr [rcx + rcx*4 - 1], cl; call rbx; 
0x0000000000085fb1: add byte ptr [rcx + rcx*4 - 1], cl; mov rdx, rbx; mov rsi, r13; call rax; 
0x000000000012b547: add byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r14; call qword ptr [rdx + 0x18]; 
0x00000000000fc0cb: add byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r9; mov eax, 0x14; syscall; 
0x0000000000075cb2: add byte ptr [rcx + rcx*4 - 2], cl; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x0000000000110e28: add byte ptr [rcx + rcx*4 - 6], cl; mov rdi, r12; call rax; 
0x000000000012071b: add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax + 0x20]; 
0x00000000000f5ca5: add byte ptr [rcx + rcx*4 - 9], cl; call rbx; 
0x000000000002e203: add byte ptr [rcx + rcx*4 - 9], cl; mov eax, 3; syscall; 
0x0000000000023fec: add byte ptr [rcx + rcx*4 - 9], cl; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x000000000005fa63: add byte ptr [rcx + rcx*4 - 9], cl; mov rsi, qword ptr [rbp - 0x10f8]; sar r10, 2; mov rdx, r10; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x00000000001a6ae3: add byte ptr [rcx + rcx*4], bh; add dword ptr [rax], eax; or al, ah; hlt; jmp rsp; 
0x00000000000f37ef: add byte ptr [rcx + rcx*8 - 0x7cb78e8c], al; ret; 
0x00000000001aeab3: add byte ptr [rcx + rcx], cl; add al, byte ptr [rax]; cmp byte ptr [rdx - 0xa], bl; call qword ptr [rdi]; 
0x000000000018acbf: add byte ptr [rcx + rdi - 0xc], ah; call rsp; 
0x0000000000086084: add byte ptr [rcx + rdi*2 + 0x48], dh; mov esi, ebx; mov rdi, r13; call rdx; 
0x00000000001a5b5b: add byte ptr [rcx + rdi*2 - 0x4effffff], dh; hlt; jmp qword ptr [rcx]; 
0x00000000001a5b43: add byte ptr [rcx + rdi*2 - 0x4f17ffff], bl; hlt; jmp qword ptr [rcx]; 
0x00000000001a5b2b: add byte ptr [rcx + rdi*2 - 0x4f2fffff], al; hlt; jmp qword ptr [rcx]; 
0x00000000000f364c: add byte ptr [rcx + rdx - 0x7f], dh; or byte ptr [rax], al; add byte ptr [rax], 0; mov eax, 1; add rsp, 8; ret; 
0x00000000001a7343: add byte ptr [rcx + rdx*4 + 0xda80001], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a72fb: add byte ptr [rcx + rdx*4 + 1], dl; add byte ptr [rax + 0xd], ah; cmc; jmp qword ptr [rcx]; 
0x000000000018ad77: add byte ptr [rcx + rdx*4], dh; hlt; jmp rsp; 
0x0000000000189b97: add byte ptr [rcx + rdx*8 + 0x3394ffef], ah; add dword ptr [rax], eax; ret; 
0x00000000001a532b: add byte ptr [rcx + rsi*2 + 0x7ad00001], al; hlt; jmp qword ptr [rcx]; 
0x00000000001a535b: add byte ptr [rcx + rsi*2 + 0x7b000001], dh; hlt; jmp qword ptr [rcx]; 
0x000000000019d2fb: add byte ptr [rcx + rsi*8], dl; add al, ah; out dx, eax; call qword ptr [rsi + 1]; 
0x0000000000192b80: add byte ptr [rcx - 0x15], al; call rdx; 
0x000000000006498f: add byte ptr [rcx - 0x1677b], cl; jmp qword ptr [rsi + 0x2e]; 
0x000000000007e014: add byte ptr [rcx - 0x173fce21], cl; ret 0xff4f; 
0x00000000000700dd: add byte ptr [rcx - 0x1976b317], cl; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000112f0f: add byte ptr [rcx - 0x1d361721], cl; std; inc dword ptr [rbp + 0x481d78c0]; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000075051: add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x0000000000055450: add byte ptr [rcx - 0x22f7b], cl; jmp qword ptr [rsi + 0xf]; 
0x000000000000245f: add byte ptr [rcx - 0x23], al; out 0xa9, al; ret 0xbd07; 
0x000000000003685f: add byte ptr [rcx - 0x2403db84], cl; and al, 0xfc; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000056ec0: add byte ptr [rcx - 0x2877b], cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000036c24: add byte ptr [rcx - 0x289cb73a], cl; movsxd rsi, esi; movsxd rdi, ecx; mov eax, 0xea; syscall; 
0x00000000000fc330: add byte ptr [rcx - 0x3a], al; and al, 0x26; add byte ptr [rcx + rcx*4 - 0x31], cl; mov byte ptr [rbp - 0x689], 0x73; mov eax, 0x14; syscall; 
0x00000000000bcdd1: add byte ptr [rcx - 0x3b7cb739], cl; or cl, ch; ret; 
0x0000000000132e15: add byte ptr [rcx - 0x3b7eb728], cl; mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000e44df: add byte ptr [rcx - 0x3fcefb89], cl; ret; 
0x000000000002fc08: add byte ptr [rcx - 0x40cbdbb4], cl; add dword ptr [rax], eax; add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000044e65: add byte ptr [rcx - 0x43], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000004713e: add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x00000000000cb1cf: add byte ptr [rcx - 0x47], al; add dword ptr [rax], eax; add byte ptr [rax], al; call 0xc9d70; add rsp, 0x18; ret; 
0x0000000000097497: add byte ptr [rcx - 0x48], al; cmp eax, 0xeb000000; ret; 
0x00000000001ac363: add byte ptr [rcx - 0x4d7ffff], bh; cmc; call qword ptr [rax]; 
0x000000000018775c: add byte ptr [rcx - 0x4f6f0004], dh; cld; jmp qword ptr [rax]; 
0x0000000000034325: add byte ptr [rcx - 0x55551e], al; call rcx; 
0x0000000000125f4f: add byte ptr [rcx - 0x74b6dbfc], cl; and al, 8; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x00000000000dbe46: add byte ptr [rcx - 0x75], al; adc al, 0x8d; add qword ptr [r8 - 0x7d], rcx; ret; 
0x00000000000e365f: add byte ptr [rcx - 0x75], al; add byte ptr [r9], r15b; ret 0x870f; 
0x000000000010494f: add byte ptr [rcx - 0x75], al; push rbp; sbb byte ptr [rcx - 0x75], al; or r14b, r14b; ret 0x7508; 
0x0000000000074db7: add byte ptr [rcx - 0x75], cl; add byte ptr [rax + 1], 0; add byte ptr [rsi - 1], bh; mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000123bff: add byte ptr [rcx - 0x75], cl; add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rcx + 0xa8], eax; mov eax, 1; ret; 
0x0000000000126017: add byte ptr [rcx - 0x75], cl; and al, 8; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000011f47e: add byte ptr [rcx - 0x75], cl; cmp al, 0x24; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000e278f: add byte ptr [rcx - 0x75], cl; cmp byte ptr [r8 - 0x77], r9b; ret 0x8948; 
0x0000000000105570: add byte ptr [rcx - 0x75], cl; cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x0000000000127d04: add byte ptr [rcx - 0x75], cl; jo 0x127d56; mov edi, esp; call qword ptr [rax + 0x20]; 
0x000000000012b307: add byte ptr [rcx - 0x75], cl; or byte ptr [r8 - 0x77], r9b; fimul word ptr [rcx + rcx*4 - 1]; call qword ptr [rax]; 
0x000000000012aa04: add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x20]; 
0x000000000012b52a: add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000012a818: add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + rcx*4 - 0x11], r9b; call qword ptr [rax + 0x20]; 
0x00000000000e344e: add byte ptr [rcx - 0x75], cl; or byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rax + 0x63], cl; ret; 
0x000000000013126f: add byte ptr [rcx - 0x75], cl; push rdi; or byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x8b41; 
0x000000000012f7e7: add byte ptr [rcx - 0x75], cl; push rsi; sbb byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8b41; 
0x000000000012c426: add byte ptr [rcx - 0x75], cl; sbb byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rbx + rcx*4 + 0x24], cl; ret 0x854d; 
0x0000000000074d50: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x00000000000b367a: add byte ptr [rcx - 0x76dbdbbc], cl; ret; 
0x00000000000968af: add byte ptr [rcx - 0x776b7f1], cl; ret; 
0x00000000000f09ba: add byte ptr [rcx - 0x77], al; push rax; xor al, 0x41; mov dword ptr [rax + 0x38], edx; mov word ptr [r8 + 0x21], si; ret; 
0x00000000000c643b: add byte ptr [rcx - 0x77], al; ret; 
0x0000000000036fa2: add byte ptr [rcx - 0x77], al; ror byte ptr [rax - 0x75], 0x7c; and al, 8; mov eax, 0x82; syscall; 
0x00000000000f0a7c: add byte ptr [rcx - 0x77], al; sar byte ptr [rdx + 1], 0xbe; or dword ptr [rax + rax], edx; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x0000000000020c6f: add byte ptr [rcx - 0x77], al; xor al, 0x89; inc dword ptr [rdi + 4]; ret; 
0x000000000004bf2f: add byte ptr [rcx - 0x77], cl; add bl, ch; ret; 
0x0000000000059579: add byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx - 0x77]; ret; 
0x0000000000123b22: add byte ptr [rcx - 0x77], cl; push rax; or byte ptr [rax + 1], bh; ret; 
0x0000000000047264: add byte ptr [rcx - 0x77], cl; ret 0x18b9; 
0x0000000000033d75: add byte ptr [rcx - 0x77], cl; ret 0x65e9; 
0x000000000003fefc: add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x000000000004b72e: add byte ptr [rcx - 0x77], cl; ret 0x8b44; 
0x0000000000062127: add byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x000000000008b483: add byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x000000000005c2e2: add byte ptr [rcx - 0x77], cl; ret 0x92e9; 
0x00000000000210dd: add byte ptr [rcx - 0x77], cl; ret; 
0x00000000000d023f: add byte ptr [rcx - 0x7d], al; cld; push qword ptr [rdx + rcx + 0x49]; movsxd rdi, esp; mov eax, 3; syscall; 
0x0000000000022997: add byte ptr [rcx - 0x7d], al; ret 0x4101; 
0x0000000000045551: add byte ptr [rcx - 0x7d], al; ret; 
0x0000000000048208: add byte ptr [rcx - 0x7d], al; std; inc dword ptr [rdi + rcx + 0x44]; call 0xfffffffffff9a6fe; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d1f9f: add byte ptr [rcx - 0x7d], cl; ret 0x4104; 
0x000000000007e84f: add byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x00000000000d40ca: add byte ptr [rcx - 0x7d], cl; ret 0x4c01; 
0x00000000001372cf: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000008712f: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000024a4e: add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000801fd: add byte ptr [rcx - 0x7d], cl; sub al, 8; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000007a1cf: add byte ptr [rcx - 0x7f], al; in eax, 0; adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000973a3: add byte ptr [rcx - 0x80], al; clc; cmp eax, 0x89480f75; clc; ret; 
0x00000000000e9db7: add byte ptr [rcx - 0x80], al; jmp qword ptr [rdi]; 
0x00000000000e9d27: add byte ptr [rcx - 0x80], al; jmp qword ptr [rdx]; 
0x00000000000f0fe4: add byte ptr [rcx - 0x9cb70a], cl; mov eax, ecx; syscall; 
0x00000000000eb47f: add byte ptr [rcx - 0x9cb72e], cl; mov eax, 0x102; syscall; 
0x00000000000804cc: add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x00000000000c1cca: add byte ptr [rcx - 0xcfd8130], cl; ret; 
0x00000000001858ef: add byte ptr [rcx - 0xd], bl; clc; ret 0x6e1f; 
0x0000000000178504: add byte ptr [rcx - 0xe], bl; call qword ptr [rax]; 
0x00000000001784e0: add byte ptr [rcx - 0xe], bl; jmp qword ptr [rax]; 
0x000000000018630c: add byte ptr [rcx - 5], cl; jmp rax; 
0x000000000008beb2: add byte ptr [rcx - 9], cl; ret 1; 
0x000000000008bed8: add byte ptr [rcx - 9], cl; ret 2; 
0x00000000001a6edb: add byte ptr [rcx*4 - 0x12fffff], dh; hlt; jmp rax; 
0x0000000000094304: add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000012f78c: add byte ptr [rcx], 0; add byte ptr [rcx], al; ret 0x894c; 
0x0000000000134383: add byte ptr [rcx], 0; add dh, dh; ret; 
0x00000000001ac12d: add byte ptr [rcx], 0; jo 0x1ac12a; cmc; call qword ptr [rcx]; 
0x00000000001adbc6: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; adc ecx, dword ptr [rbx + 0xd1cfff5]; mov r13d, esi; jmp qword ptr [rdx]; 
0x00000000001ad0d6: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; add byte ptr [rax + 0xd1cfff5], al; fdivr dword ptr [rbp - 0xb]; jmp qword ptr [rdx]; 
0x00000000001a0d56: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; add eax, dword ptr [rax + 0xd1cfff1]; fidivr word ptr [rsi - 0xf]; jmp qword ptr [rdx]; 
0x00000000001acbae: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; cmp dword ptr [rdx - 0xb], 0x3d0d1cff; jp 0x1acbb4; jmp qword ptr [rdx]; 
0x000000000019690e: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; imul eax, dword ptr [rbp + 0xd1cffed], -0x11; test ch, ch; jmp qword ptr [rdx]; 
0x0000000000197756: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; imul ecx, dword ptr [rdi + 0xd1cffed], -0x26; mov gs, ebp; jmp qword ptr [rdx]; 
0x00000000001adce6: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; jp 0xd37dce9; mov r13, r14; jmp qword ptr [rdx]; 
0x00000000001ade26: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; mov ecx, dword ptr [rdx + 0xd1cfff5]; mov bp, si; jmp qword ptr [rdx]; 
0x00000000001987fe: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xedbc800d1cffedbd]; jmp qword ptr [rdx]; 
0x00000000001ab58e: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xf55cf40d1cfff55d]; jmp qword ptr [rdx]; 
0x00000000001a935e: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf4ea900d1cfff4eb], al; jmp qword ptr [rdx]; 
0x00000000001ad5ae: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf582030d1cfff583], al; jmp qword ptr [rdx]; 
0x00000000001a973e: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs dword ptr [0xf4ec060d1cfff4ec], eax; jmp qword ptr [rdx]; 
0x00000000001995c6: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs eax, dword ptr [0xeddba10d1cffedfb]; jmp qword ptr [rdx]; 
0x00000000001998de: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xedf8; 
0x000000000019a6d6: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xee68; 
0x00000000001a0d9e: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf17f; 
0x00000000001ab29e: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf55b; 
0x00000000001acb66: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf57a; 
0x00000000001b2576: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf683; 
0x00000000001ab7ae: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret; 
0x00000000001ae00e: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; sbb ecx, dword ptr [rbp + rsi*8 + 0x490d1cff]; mov dh, ch; jmp qword ptr [rdx]; 
0x000000000019418e: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; sub eax, dword ptr [rax + 0xd1cffec]; fdivr dword ptr [rdi - 0x14]; jmp qword ptr [rdx]; 
0x00000000001969ce: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; xchg byte ptr [rbp + 0xd1cffed], al; ret 0xed84; 
0x00000000001ad766: add byte ptr [rcx], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; xor rbp, 0xffffffffffffffff; sbb al, 0xd; ret 0xf582; 
0x000000000017a6eb: add byte ptr [rcx], al; adc byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x00000000000d9287: add byte ptr [rcx], al; add byte ptr [rax], al; add al, ch; jmp qword ptr [rcx - 0xc]; 
0x0000000000085acf: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; ret; 
0x000000000002c340: add byte ptr [rcx], al; add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000030109: add byte ptr [rcx], al; add byte ptr [rax], al; and eax, esi; ret; 
0x0000000000135cee: add byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; add rsp, 0x10; pop rbx; ret; 
0x00000000000e4d07: add byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x00000000000f2f61: add byte ptr [rcx], al; add byte ptr [rax], al; mov rdi, -0x64; mov eax, 0x118; syscall; 
0x000000000011482b: add byte ptr [rcx], al; add byte ptr [rax], al; nop; ret; 
0x000000000012a043: add byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000008b9e1: add byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x00000000000885cf: add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x000000000008aa5f: add byte ptr [rcx], al; add byte ptr [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000001281f3: add byte ptr [rcx], al; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x000000000011f56b: add byte ptr [rcx], al; mov rdi, rbp; mov edx, dword ptr [rbx + 0x22c0]; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000002fe54: add byte ptr [rcx], al; movzx eax, ax; ret; 
0x000000000012e5cf: add byte ptr [rcx], al; push rdi; sub byte ptr [rax + 1], bh; ret; 
0x0000000000132155: add byte ptr [rcx], al; ret 0x59e9; 
0x000000000012f78f: add byte ptr [rcx], al; ret 0x894c; 
0x00000000000485ee: add byte ptr [rcx], al; ret 0xd7e9; 
0x000000000007c8db: add byte ptr [rcx], al; ret; 
0x00000000000c2473: add byte ptr [rcx], al; sbb dword ptr [rbp + rsi*2 - 0x7e], edx; mov eax, 0x7d00; ret; 
0x00000000000e3663: add byte ptr [rcx], bh; ret 0x870f; 
0x00000000000e1e89: add byte ptr [rcx], bh; ret 0x8f0f; 
0x0000000000080bc1: add byte ptr [rcx], bh; ret 0xa7e; 
0x00000000000c0f02: add byte ptr [rcx], bh; ret; 
0x00000000000b24c5: add byte ptr [rcx], bh; ror dword ptr [rdi], 1; xchg eax, esp; ret; 
0x000000000010805f: add byte ptr [rcx], bh; sal byte ptr [rbp + 7], 1; mov eax, 0xca; syscall; 
0x00000000000f236a: add byte ptr [rcx], bl; rol byte ptr [rbx - 0x3f7c0f20], 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000187a87: add byte ptr [rcx], ch; jnp 0x187a74; call rsp; 
0x00000000000b2310: add byte ptr [rcx], ch; ret 0x428d; 
0x00000000000ce97c: add byte ptr [rcx], ch; ret 0x850f; 
0x00000000000b9247: add byte ptr [rcx], ch; ret 0x8944; 
0x00000000000b92e1: add byte ptr [rcx], ch; ret 0x8d41; 
0x00000000000888cd: add byte ptr [rcx], ch; ret; 
0x00000000000b7929: add byte ptr [rcx], ch; rol byte ptr [rcx + 0x29], 1; ret; 
0x00000000000f1001: add byte ptr [rcx], ch; sal bl, 1; ret; 
0x00000000000357d9: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000071421: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000039df4: add byte ptr [rcx], cl; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000366ac: add byte ptr [rcx], cl; ret 0xd089; 
0x0000000000036732: add byte ptr [rcx], cl; ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x00000000001a82db: add byte ptr [rcx], dh; add dword ptr [rax], eax; nop; cmp esi, ebp; jmp qword ptr [rcx]; 
0x0000000000186a5c: add byte ptr [rcx], dh; cld; jmp rax; 
0x00000000000b28fd: add byte ptr [rcx], dh; dec dword ptr [rax + 0x39]; ret 0x840f; 
0x000000000007deef: add byte ptr [rcx], dh; dec dword ptr [rax - 0x77]; and al, 8; call qword ptr [rax]; 
0x000000000007de9e: add byte ptr [rcx], dh; dec dword ptr [rcx - 0x77]; salc; call qword ptr [rax]; 
0x0000000000111e15: add byte ptr [rcx], dh; fild dword ptr [rcx - 0x7d]; std; add dword ptr [rdi], ecx; xchg eax, esp; ret; 
0x0000000000103789: add byte ptr [rcx], dh; fucomi st(0); scasd eax, dword ptr [rdi]; xor eax, 0x8548fff8; ror byte ptr [rdi], 0x95; ret; 
0x000000000012143d: add byte ptr [rcx], dh; fucomi st(1); adc eax, 0x66fffffe; nop word ptr cs:[rax + rax]; mov eax, 2; ret; 
0x0000000000079e07: add byte ptr [rcx], dh; idiv byte ptr [rcx + 3]; mov edx, 2; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000079d56: add byte ptr [rcx], dh; idiv byte ptr [rcx + 3]; mov edx, 2; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000c0ed5: add byte ptr [rcx], dh; idiv byte ptr [rdi + 0x1200011]; mov eax, 0x38; syscall; 
0x0000000000134ea0: add byte ptr [rcx], dh; in eax, dx; call qword ptr [rax + 0x28]; 
0x00000000000cb130: add byte ptr [rcx], dh; leave; call 0xcb0b0; add rsp, 0x18; ret; 
0x00000000001273d0: add byte ptr [rcx], dh; push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or cl, ch; adc bl, byte ptr [rbx - 0xc]; jmp qword ptr [rsi - 0x70]; 
0x000000000012a476: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000003c3fc: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000888c6: add byte ptr [rcx], dh; ret; 
0x000000000002ff4f: add byte ptr [rcx], dh; rol byte ptr [rbx - 0x6bf07f19], 0xc0; ret; 
0x0000000000026198: add byte ptr [rcx], dh; ror byte ptr [rax + 0x39], cl; ret; 
0x00000000000a5507: add byte ptr [rcx], dh; ror byte ptr [rax + 1], cl; ret 0xe974; 
0x0000000000123d82: add byte ptr [rcx], dh; ror byte ptr [rax - 0x75], 0x74; and al, 0x28; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x0000000000037d93: add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; fidivr word ptr [rax + 0x80]; syscall; 
0x00000000000c0400: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000003c23b: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001347fa: add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008aa62: add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x00000000001176e2: add byte ptr [rcx], dh; ror byte ptr [rcx - 0x76b7f3a9], 0x3e; ret; 
0x000000000007c158: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x58]; 
0x000000000003706c: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rcx + rcx*4 - 0x31], 0x44; mov eax, eax; syscall; 
0x0000000000037105: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rcx + rcx*4 - 0x39], 0x89; call 0xffffffff894b7622; ret 0xc189; 
0x00000000000d1d6f: add byte ptr [rcx], dh; sal dh, 0xc1; add dword ptr [rbp - 0x79], esi; pop rbx; ret; 
0x0000000000047137: add byte ptr [rcx], dh; sar byte ptr [rdi + 2], cl; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000001365bf: add byte ptr [rcx], dh; shr bl, 0xdb; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000000ca94a: add byte ptr [rcx], dh; shr cl, 0xf7; idiv edi; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000102180: add byte ptr [rcx], dh; test byte ptr [rax - 0x75], 0x54; and al, 0x18; mov edi, 0x2000004; call rax; 
0x000000000006d976: add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x10]; 
0x00000000000f5bbc: add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xef; call rbx; 
0x000000000003fef4: add byte ptr [rcx], dh; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x00000000001087e1: add byte ptr [rcx], dh; test byte ptr [rcx - 0x79cb638], 0xf; add eax, 0xfff0003d; dec dword ptr [rax - 0x77]; ret 0x1376; 
0x000000000018888f: add byte ptr [rdi + 0x19], bl; in al, dx; call rsp; 
0x000000000018985f: add byte ptr [rdi + 0x4f], ah; out dx, eax; lcall ptr [rsp + rbx + 0x4f820001]; out dx, eax; jmp rsp; 
0x00000000001a8933: add byte ptr [rdi + 0x5d580001], cl; cmc; call qword ptr [rcx]; 
0x00000000001b88fb: add byte ptr [rdi + 0x72000004], bl; add eax, 0x7c10000; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000e8a64: add byte ptr [rdi + 1], bh; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000000a1df: add byte ptr [rdi + 1], dh; add byte ptr [rax], al; adc al, byte ptr [rax]; or al, 0; push rax; ret 0x10; 
0x0000000000047477: add byte ptr [rdi + 2], bh; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000a2bd4: add byte ptr [rdi + 2], bh; neg eax; ret; 
0x000000000010aaf6: add byte ptr [rdi + 8], dh; mov rax, rdi; sar rax, 6; ret; 
0x0000000000164164: add byte ptr [rdi + 9], bh; neg eax; ret; 
0x00000000001b6ed3: add byte ptr [rdi + rax + 0x3160000], ch; add byte ptr [rax], al; ret 7; 
0x0000000000088dc1: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x10f35]; ret; 
0x0000000000086b41: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x11595]; ret; 
0x00000000001089c1: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x41d15]; ret; 
0x0000000000108a61: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x44745]; ret; 
0x0000000000091652: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb1174]; ret; 
0x000000000008ad4e: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb1f68]; ret; 
0x000000000008a9be: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb21d8]; ret; 
0x000000000008852e: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb4528]; ret; 
0x000000000008c5e1: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xc0bd5]; ret; 
0x000000000008a6a1: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xcdf55]; ret; 
0x000000000008cad1: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xce6a5]; ret; 
0x0000000000088421: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xcea25]; ret; 
0x000000000008cbf1: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xcfd95]; ret; 
0x0000000000086d2e: add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xdb398]; ret; 
0x00000000001a28fb: add byte ptr [rdi + rax*2 + 1], dl; add byte ptr [rax], dh; mov dh, dl; jmp qword ptr [rcx]; 
0x00000000001a692b: add byte ptr [rdi + rax*4 - 0x22efffff], al; hlt; call qword ptr [rdx]; 
0x000000000018d177: add byte ptr [rdi + rax*4 - 7], al; ljmp ptr [rax + rbx*4 - 0x784bfffe]; stc; jmp rsp; 
0x00000000001a68cb: add byte ptr [rdi + rax*4], ah; add dword ptr [rax], eax; jo 0x1a68ae; hlt; call qword ptr [rax]; 
0x000000000018a1c7: add byte ptr [rdi + rax*4], ah; int1; jmp rsp; 
0x00000000001aa913: add byte ptr [rdi + rax*8 + 1], ch; add byte ptr [rax], cl; xlatb; cmc; jmp qword ptr [rsi]; 
0x00000000001aa8fb: add byte ptr [rdi + rax*8 + 1], dl; add al, dh; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa943: add byte ptr [rdi + rax*8 - 0x28f7ffff], bl; cmc; jmp qword ptr [rdi]; 
0x0000000000132ece: add byte ptr [rdi + rax*8], ah; add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000bcde3: add byte ptr [rdi + rax*8], ah; add al, byte ptr [rax]; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000037846: add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000001aa8cb: add byte ptr [rdi + rax*8], ah; add dword ptr [rax], eax; rcl dh, 0xf5; jmp qword ptr [rsi]; 
0x0000000000036994: add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x000000000003638c: add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000f10f6: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000841d6: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; xor eax, eax; add rsp, 0x18; ret; 
0x000000000008115e: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x000000000008131e: add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000357d6: add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000007141e: add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000022cb4: add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, edi; ret; 
0x00000000000eb436: add byte ptr [rdi + rax*8], ah; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000035766: add byte ptr [rdi + rax*8], ah; sub al, byte ptr [rax]; add byte ptr [rax], al; mov rax, rcx; pop rbx; ret; 
0x00000000001aa8e3: add byte ptr [rdi + rax*8], bh; add dword ptr [rax], eax; fcom st(6); cmc; jmp qword ptr [rsi]; 
0x00000000001aa8b3: add byte ptr [rdi + rax*8], cl; add dword ptr [rax], eax; test al, 0xd6; cmc; jmp qword ptr [rsi]; 
0x000000000018c377: add byte ptr [rdi + rax], dl; clc; ljmp ptr [rax + rsi + 0x8640002]; clc; jmp rsp; 
0x00000000001b1113: add byte ptr [rdi + rbp + 2], ch; add byte ptr [rax], bl; out 0xf6, al; jmp rdx; 
0x00000000001a515b: add byte ptr [rdi + rbp*2 + 0x75c00001], dh; hlt; call qword ptr [rax]; 
0x00000000001ab013: add byte ptr [rdi + rbp*2 - 0x1e67ffff], dl; cmc; jmp qword ptr [rcx + 0x4000001]; 
0x000000000018da37: add byte ptr [rdi + rbp*2 - 6], dl; call qword ptr [rdx + rdx*8 + 0x70a40002]; cli; jmp rsp; 
0x00000000001a50d3: add byte ptr [rdi + rbp*2], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xc], ch; call qword ptr [rax + 6]; 
0x00000000001a50bb: add byte ptr [rdi + rbp*2], dl; add dword ptr [rax], eax; and byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x000000000019d12b: add byte ptr [rdi + rbp*8 - 0x4800000], al; out dx, al; call qword ptr [rax]; 
0x000000000019d143: add byte ptr [rdi + rbp*8 - 0x4880000], bl; out dx, al; jmp qword ptr [rsi]; 
0x000000000019d113: add byte ptr [rdi + rbp*8], ch; add al, bl; cld; stc; call qword ptr [rsi + 0x16]; 
0x000000000019d0fb: add byte ptr [rdi + rbp*8], dl; add al, ah; cld; stc; call qword ptr [rax]; 
0x00000000000c5229: add byte ptr [rdi + rbx + 0x31], dh; fisttp dword ptr [rax - 0x77]; fmul dword ptr [rcx + 3]; adc byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000135c7e: add byte ptr [rdi + rbx + 0x48], dh; mov eax, dword ptr [rip + 0x2881d8]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x00000000001a0153: add byte ptr [rdi + rbx + 0x7f880001], ch; int1; call qword ptr [rax]; 
0x00000000001a815b: add byte ptr [rdi + rbx*4 + 0x38f00001], dh; cmc; jmp qword ptr [rsi]; 
0x00000000001a811b: add byte ptr [rdi + rbx*4 + 1], dh; add byte ptr [rax + 0x38], dh; cmc; jmp qword ptr [rax]; 
0x000000000018d23f: add byte ptr [rdi + rbx*4 - 0x62430007], ah; add al, byte ptr [rax]; add al, 0xa0; stc; jmp rsp; 
0x000000000019c13b: add byte ptr [rdi + rbx*8 - 0x79b00000], dl; out dx, al; call qword ptr [rdi]; 
0x00000000001a00d3: add byte ptr [rdi + rbx], ch; add dword ptr [rax], eax; pop rax; int1; call qword ptr [rdx]; 
0x000000000016dfbf: add byte ptr [rdi + rcx + 0xfbf0000], bh; add byte ptr [rax], al; ret 0xf; 
0x00000000000c4b1c: add byte ptr [rdi + rcx - 0x7b], bl; xor ah, 0xff; push rsi; ret; 
0x00000000001a70fb: add byte ptr [rdi + rcx*4 + 1], dl; add byte ptr [rax + 7], dl; cmc; jmp qword ptr [rdi + 1]; 
0x000000000002fd54: add byte ptr [rdi + rcx], al; mov bh, 0xc0; ret; 
0x00000000001a2123: add byte ptr [rdi + rdi + 1], bh; add byte ptr [rax - 2], cl; int1; jmp qword ptr [rcx]; 
0x00000000001a2153: add byte ptr [rdi + rdi - 0x187ffff], ch; int1; jmp qword ptr [rcx]; 
0x00000000001a213b: add byte ptr [rdi + rdi - 0x19fffff], dl; int1; jmp qword ptr [rcx]; 
0x000000000018a987: add byte ptr [rdi + rdi*2 - 0x632b000d], al; add dword ptr [rax], eax; ret 0xf380; 
0x000000000018ca47: add byte ptr [rdi + rdi*2 - 8], dl; call qword ptr [rdi + rbx*2 - 0x7f5cfffe]; clc; inc dword ptr [rdi + rbx*2]; add al, byte ptr [rax]; ret 0xf880; 
0x00000000001aa163: add byte ptr [rdi + rdi*4 - 0x7127ffff], bh; cmc; jmp qword ptr [rbx + 2]; 
0x000000000018af7f: add byte ptr [rdi + rdi*4], dl; cmc; call qword ptr [rdi + rax*8 - 0x405bffff]; cmc; call rsp; 
0x000000000018c237: add byte ptr [rdi + rdi*8 - 9], al; jmp rsp; 
0x000000000002ef7b: add byte ptr [rdi + rdi*8], bh; cmovne edx, eax; lea rax, qword ptr [rip + 0x390c98]; mov byte ptr [rip + 0x390cef], dl; ret; 
0x00000000001a20ab: add byte ptr [rdi + rdi], al; add dword ptr [rax], eax; xor dh, bh; int1; jmp qword ptr [rcx]; 
0x000000000019f92b: add byte ptr [rdi + rdx + 0x7a00001], al; int1; call qword ptr [rax]; 
0x00000000001b392b: add byte ptr [rdi + rdx*2 + 0x76500002], al; idiv edi; ret 0; 
0x0000000000188a27: add byte ptr [rdi + rdx*2 - 0x13], ah; lcall ptr [rcx + rax*8 + 0x57d40000]; in eax, dx; call rsp; 
0x00000000001a793b: add byte ptr [rdi + rdx*4 + 0x2b300001], dl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7953: add byte ptr [rdi + rdx*4 + 0x2b480001], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001a790b: add byte ptr [rdi + rdx*4 + 1], ah; add byte ptr [rax], al; sub esi, ebp; jmp qword ptr [rcx]; 
0x00000000001a7923: add byte ptr [rdi + rdx*4 + 1], bh; add byte ptr [rax], bl; sub esi, ebp; jmp qword ptr [rcx]; 
0x00000000001ab923: add byte ptr [rdi + rdx*8 + 1], bh; add byte ptr [rax - 0x17], bh; cmc; call qword ptr [rax]; 
0x00000000001ab8f3: add byte ptr [rdi + rdx*8 + 1], cl; add byte ptr [rax - 0x17], ch; cmc; call qword ptr [rax]; 
0x00000000001ab93b: add byte ptr [rdi + rdx*8 - 0x168fffff], dl; cmc; call qword ptr [rax]; 
0x00000000001ab953: add byte ptr [rdi + rdx*8 - 0x1697ffff], ch; cmc; call qword ptr [rax]; 
0x000000000019f8cb: add byte ptr [rdi + rdx], ah; add dword ptr [rax], eax; nop; cld; jmp qword ptr [rbx]; 
0x00000000001a1963: add byte ptr [rdi + rsi - 0x1c97ffff], bh; int1; call rsp; 
0x00000000001a194b: add byte ptr [rdi + rsi - 0x1d2fffff], ah; int1; jmp qword ptr [rcx]; 
0x00000000001a1933: add byte ptr [rdi + rsi - 0x1dc7ffff], cl; int1; jmp qword ptr [rdx]; 
0x000000000018ac77: add byte ptr [rdi + rsi - 0xc], dh; jmp rsp; 
0x000000000018ca07: add byte ptr [rdi + rsi*2 + 0x5d1cfff8], dl; add al, byte ptr [rax]; fidivr dword ptr [rax - 8]; dec dword ptr [rsp + rbx*2 + 0x78f90002]; clc; call rsp; 
0x000000000018db8f: add byte ptr [rdi + rsi*4 - 0x23530006], dl; add al, byte ptr [rax]; in al, 0xb7; cli; call rsp; 
0x000000000018a267: add byte ptr [rdi + rsi*4 - 0xf], ah; push qword ptr [rdx + rbp*2 - 0x485bffff]; int1; jmp rsp; 
0x000000000018db07: add byte ptr [rdi - 0x264b0006], dl; add al, byte ptr [rax]; xor al, 0xa9; cli; jmp rsp; 
0x00000000001785c0: add byte ptr [rdi - 0xe], ah; jmp qword ptr [rax]; 
0x00000000001786d8: add byte ptr [rdi - 0xe], ch; call qword ptr [rax]; 
0x0000000000178490: add byte ptr [rdi - 0xe], dl; call qword ptr [rax]; 
0x000000000018cd0f: add byte ptr [rdi - 8], al; call rsp; 
0x00000000001a5ecb: add byte ptr [rdi*2 - 0x443fffff], ah; hlt; jmp qword ptr [rbx]; 
0x0000000000199ebb: add byte ptr [rdi*4 + 0x1ab00000], dl; out dx, al; call qword ptr [rdi]; 
0x000000000019dee3: add byte ptr [rdi*8 - 0x60280000], bh; out dx, eax; call qword ptr [rdi]; 
0x0000000000186858: add byte ptr [rdi], 0xfc; jmp qword ptr [rax + 9]; 
0x000000000018bf77: add byte ptr [rdi], ah; jp 0x18bf72; jmp rsp; 
0x000000000001e3a7: add byte ptr [rdi], ah; ret; 
0x000000000001a327: add byte ptr [rdi], al; ret; 
0x0000000000176bbb: add byte ptr [rdi], bl; add byte ptr [rax], al; insd dword ptr [rdi], dx; sar bh, 1; jmp qword ptr [rdi]; 
0x00000000000eb439: add byte ptr [rdi], bl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000186af0: add byte ptr [rdi], bl; cld; call qword ptr [rax + 0x20]; 
0x000000000017c114: add byte ptr [rdi], ch; sti; call qword ptr [rax]; 
0x000000000014fca4: add byte ptr [rdi], cl; adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x3789e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000012aa00: add byte ptr [rdi], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x20]; 
0x000000000012a814: add byte ptr [rdi], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + rcx*4 - 0x11], r9b; call qword ptr [rax + 0x20]; 
0x00000000000df30d: add byte ptr [rdi], cl; call 0xfffffffffd918600; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x000000000014c0f6: add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000014d12f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x00000000001079f1: add byte ptr [rdi], cl; mov bh, 4; push rax; shr ax, 0xe; and eax, 1; ret; 
0x000000000012e117: add byte ptr [rdi], cl; mov bh, 6; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012d407: add byte ptr [rdi], cl; mov bh, 6; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000007b1d7: add byte ptr [rdi], cl; mov dh, 0; pop rbx; ret; 
0x000000000014d19f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x00000000000c448a: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000016365f: add byte ptr [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000016364f: add byte ptr [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000016361f: add byte ptr [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000016363f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000016362f: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000000279f3: add byte ptr [rdi], cl; mov dh, 0x48; dec dword ptr [rcx - 0x7d]; ret; 
0x0000000000027a3d: add byte ptr [rdi], cl; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4101; 
0x000000000002a9f1: add byte ptr [rdi], cl; mov dh, 0x4a; inc dword ptr [rcx - 0x78]; add rcx, qword ptr [r9 + 0x39]; ret; 
0x0000000000033af0: add byte ptr [rdi], cl; mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000006d4bf: add byte ptr [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x00000000000e2b49: add byte ptr [rdi], cl; mov dh, 0x59; or byte ptr [rcx + 0x63], cl; sbb al, 0x9a; add rbx, r10; jmp rbx; 
0x000000000007b5fd: add byte ptr [rdi], cl; mov dh, 0x75; add byte ptr [rcx + rcx*4 - 0x19], cl; lea r13, qword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x0000000000054a51: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x00000000000c7c13: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000006c816: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x00000000000deccb: add byte ptr [rdi], cl; mov dh, 0xc8; mov r14d, r8d; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000e187a: add byte ptr [rdi], cl; mov dh, 0xc8; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000b4c67: add byte ptr [rdi], cl; mov dh, 0xd2; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000054b80: add byte ptr [rdi], cl; mov dh, 0xdb; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000883cf: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000012e1d7: add byte ptr [rdi], cl; mov dh, 6; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000015fc8f: add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000008bf5f: add byte ptr [rdi], cl; mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000096f7f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x0000000000096f8f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x0000000000096f6f: add byte ptr [rdi], cl; mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000096fef: add byte ptr [rdi], cl; mov ebp, 0xea8348c0; adc byte ptr [rax + 1], cl; ret 0x147c; 
0x0000000000096fcf: add byte ptr [rdi], cl; mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x347c; 
0x000000000012e0b7: add byte ptr [rdi], cl; mov edi, 0xe6894806; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e177: add byte ptr [rdi], cl; mov esi, 0xe6894806; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000009395f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000008bdef: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000008bddf: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000008bdcf: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x00000000000d7dd2: add byte ptr [rdi], cl; mov fs, word ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x00000000000c97b1: add byte ptr [rdi], cl; mov ss, word ptr [rax - 0x7efffffd]; jmp qword ptr [rax + 4]; 
0x00000000000a1a37: add byte ptr [rdi], cl; popfq; ret 0xea81; 
0x0000000000036427: add byte ptr [rdi], cl; push rsp; ret; 
0x00000000000a18a2: add byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0x8341; 
0x00000000000b8e9d: add byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0x8d44; 
0x000000000011ad51: add byte ptr [rdi], cl; shr r9b, 1; ret 0xfffe; 
0x00000000000f5d69: add byte ptr [rdi], cl; test byte ptr [rax + 0xc], bh; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000000e54c9: add byte ptr [rdi], cl; test byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000015a804: add byte ptr [rdi], cl; test byte ptr [rbp + 0x48fffffb], ah; mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000000f6514: add byte ptr [rdi], cl; test byte ptr [rbp + 3], cl; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000000f5bb6: add byte ptr [rdi], cl; test byte ptr [rbx + 0x3100000a], dh; test byte ptr [rax - 0x77], 0xef; call rbx; 
0x00000000000857ae: add byte ptr [rdi], cl; test byte ptr [rbx + 2], bl; add byte ptr [rax], al; mov rdi, rbx; mov rdx, r15; call rax; 
0x00000000000f6276: add byte ptr [rdi], cl; test byte ptr [rbx + 5], cl; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000000f6296: add byte ptr [rdi], cl; test byte ptr [rbx + 6], cl; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000000a4c5e: add byte ptr [rdi], cl; test byte ptr [rbx], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a50fe: add byte ptr [rdi], cl; test byte ptr [rbx], dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000f6108: add byte ptr [rdi], cl; test byte ptr [rcx], ah; add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x00000000000c4595: add byte ptr [rdi], cl; test byte ptr [rdi*8 - 0x7cb70001], al; ret 0xeb02; 
0x00000000000f5fc7: add byte ptr [rdi], cl; test byte ptr [rdx + 7], bl; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000000f658d: add byte ptr [rdi], cl; test byte ptr [rdx + rax - 0x9cf0000], dh; mov rdi, r15; call rbx; 
0x00000000000c5307: add byte ptr [rdi], cl; test byte ptr [rip + 0x31ffffff], bh; fisttp dword ptr [rax - 0x77]; fmul dword ptr [rcx + 3]; adc byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000085fab: add byte ptr [rdi], cl; test byte ptr [rsi + 0x4c000000], al; mov edi, edi; mov rdx, rbx; mov rsi, r13; call rax; 
0x00000000000f5bdb: add byte ptr [rdi], cl; test byte ptr [rsi + 0xa], ch; add byte ptr [rax], al; xor esi, esi; mov rdi, r12; call rbx; 
0x000000000008550b: add byte ptr [rdi], cl; test byte ptr [rsi + 1], bl; add byte ptr [rax], al; mov rdx, r12; mov rdi, r15; call rax; 
0x00000000000852fb: add byte ptr [rdi], cl; test byte ptr [rsi], ch; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; call rax; 
0x00000000000c23f4: add byte ptr [rdi], cl; test ch, dl; add byte ptr [rax], al; add byte ptr [rax + 0x7f], bh; ret; 
0x0000000000047e35: add byte ptr [rdi], cl; test dword ptr [rax + rdi*8 - 0x49f00001], eax; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000f686c: add byte ptr [rdi], cl; test dword ptr [rax - 0x41000004], ebp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000133787: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000001], edx; add esp, 8; ret; 
0x000000000013521e: add byte ptr [rdi], cl; test dword ptr [rbx + rax], ebp; add byte ptr [rax - 0x75], cl; add eax, 0x28a664; call qword ptr [rax]; 
0x00000000000f672c: add byte ptr [rdi], cl; test dword ptr [rbx - 0x41000008], ebx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x00000000000f692c: add byte ptr [rdi], cl; test dword ptr [rbx - 0x4100000a], edi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000084028: add byte ptr [rdi], cl; test dword ptr [rcx + 0x3100000e], eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000013375a: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000001], esp; mov eax, dword ptr [rip + 0x28c128]; call qword ptr [rax]; 
0x00000000000be6c3: add byte ptr [rdi], cl; test dword ptr [rcx + 0x64000001], edi; mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x00000000000f66ac: add byte ptr [rdi], cl; test dword ptr [rcx - 0x41000006], eax; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x0000000000082acb: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000022], eax; mov eax, ebx; pop rbx; ret; 
0x00000000000f66ec: add byte ptr [rdi], cl; test dword ptr [rdi - 0x41000004], edi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x000000000003c94e: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000001], ebp; add esp, 8; ret; 
0x0000000000133806: add byte ptr [rdi], cl; test dword ptr [rdx + 1], edx; add byte ptr [rax], al; mov eax, edx; add rsp, 8; ret; 
0x000000000007c911: add byte ptr [rdi], cl; test dword ptr [rdx + rax], ebp; add bl, dh; ret; 
0x000000000015ee07: add byte ptr [rdi], cl; test dword ptr [rdx - 0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi + 0x66]; 
0x00000000000f67cc: add byte ptr [rdi], cl; test dword ptr [rdx - 0x41000006], ebp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x00000000000f68ec: add byte ptr [rdi], cl; test dword ptr [rdx - 0x41000007], ebp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000133881: add byte ptr [rdi], cl; test dword ptr [rip + 0x48000001], edx; mov eax, edx; add rsp, 8; ret; 
0x0000000000134e93: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], esi; mov eax, dword ptr [rip + 0x28a9ef]; xor ebp, ebp; call qword ptr [rax + 0x28]; 
0x000000000007c8c8: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000002], edx; mov dword ptr [rip + 0x3440f2], edx; add dword ptr [rip + 0x3440e7], 1; ret; 
0x00000000000f6655: add byte ptr [rdi], cl; test dword ptr [rsi - 0x4100000b], eax; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x000000000006f851: add byte ptr [rdi], cl; test dword ptr [rsi - 0xcfffffc], esp; ret; 
0x00000000000f66cc: add byte ptr [rdi], cl; test dword ptr [rsi*8 + 0x3beffff], esi; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rbx; 
0x000000000007e464: add byte ptr [rdi], cl; test dword ptr [rsi], eax; add byte ptr [rax], al; mov rax, r8; ret; 
0x000000000010dba6: add byte ptr [rdi], cl; test ebp, eax; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 0x18; ret; 
0x00000000001338ba: add byte ptr [rdi], cl; test ebx, edi; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x28bfc8; call qword ptr [rax + 0x28]; 
0x000000000005c29e: add byte ptr [rdi], cl; xchg dword ptr [rbx], esi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000059e7b: add byte ptr [rdi], cl; xchg dword ptr [rsp + rax], ebp; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000b185f: add byte ptr [rdi], cl; xchg eax, ebp; ret 0x3145; 
0x000000000004902c: add byte ptr [rdi], cl; xchg eax, ebp; ret 0x854d; 
0x0000000000112599: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xd120; 
0x00000000000e2d20: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xe2c1; 
0x00000000000b1be7: add byte ptr [rdi], cl; xchg eax, ebp; ret 0xf749; 
0x00000000000cd96e: add byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x00000000000b3670: add byte ptr [rdi], cl; xchg eax, ebp; ror byte ptr [rcx + rcx*4 + 0x15], 0xa5; fdiv dword ptr [rax]; add byte ptr [rcx - 0x76dbdbbc], cl; ret; 
0x000000000012d537: add byte ptr [rdi], cl; xchg eax, ebp; ror byte ptr [rcx - 0x3b7cb7fd], 0x10; mov eax, 1; pop rbx; ret; 
0x000000000008869a: add byte ptr [rdi], cl; xchg eax, esi; ret 0x144; 
0x00000000000df85f: add byte ptr [rdi], cl; xchg eax, esp; ret 0x3d; 
0x00000000000c599d: add byte ptr [rdi], cl; xchg eax, esp; ret 0x45e9; 
0x00000000000c4ee7: add byte ptr [rdi], cl; xchg eax, esp; ret 0xd284; 
0x000000000001f541: add byte ptr [rdi], cl; xchg eax, esp; ret; 
0x000000000005356c: add byte ptr [rdi], cl; xchg ebp, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001899ef: add byte ptr [rdi], dh; out dx, eax; call rsp; 
0x000000000001a357: add byte ptr [rdi], dl; ret; 
0x000000000006f5bf: add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000eaf1f: add byte ptr [rdx + 0x193], bh; call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0x3c; syscall; 
0x00000000000b13ff: add byte ptr [rdx + 0x1f], bh; call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000a0c6f: add byte ptr [rdx + 0x30178816], cl; in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x00000000001a842b: add byte ptr [rdx + 0x43900001], al; cmc; call qword ptr [rax]; 
0x00000000001a8443: add byte ptr [rdx + 0x43c80001], bl; cmc; jmp rdi; 
0x000000000015c81f: add byte ptr [rdx + 0x48028801], cl; lea eax, dword ptr [rdx]; ret; 
0x00000000001584ef: add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000009f1ff: add byte ptr [rdx + 0x48178816], cl; lea eax, dword ptr [rdi + 1]; ret; 
0x00000000000794e6: add byte ptr [rdx + 0x48], bl; cwde; ret; 
0x00000000000e7278: add byte ptr [rdx + 0x63], cl; adc al, 0x98; add rax, rdx; jmp rax; 
0x00000000000647fe: add byte ptr [rdx + 0x63], cl; adc al, 0xa0; add rax, rdx; jmp rax; 
0x000000000003078f: add byte ptr [rdx + 0x63], cl; add al, 0xa2; add rdx, rax; jmp rdx; 
0x00000000000833a9: add byte ptr [rdx + 0xc97], bh; call 0x7d680; mov rsi, qword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x000000000019f990: add byte ptr [rdx + 0xe], cl; adc byte ptr [rbx + 0x300e4402], al; add dl, byte ptr [rax + 0x41100e0a]; ret; 
0x000000000013630e: add byte ptr [rdx + 1], bh; add rdi, 0x1c; mov al, 0xca; mov esi, 0x81; syscall; 
0x00000000001296b3: add byte ptr [rdx + 1], bh; cmovne eax, edx; sub rsp, -0x80; pop rbx; ret; 
0x000000000010808c: add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x00000000001b8917: add byte ptr [rdx + 2], bh; add byte ptr [rax], al; ret 6; 
0x0000000000079e0e: add byte ptr [rdx + 2], bh; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000079d5d: add byte ptr [rdx + 2], bh; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000001a641b: add byte ptr [rdx + rax*4 + 1], dh; add byte ptr [rax - 0x34], dh; hlt; jmp qword ptr [rcx]; 
0x0000000000187e07: add byte ptr [rdx + rax*4 - 0x16], al; call rsp; 
0x00000000001a6433: add byte ptr [rdx + rax*4 - 0x3377ffff], cl; hlt; jmp qword ptr [rcx]; 
0x00000000001b643b: add byte ptr [rdx + rax*4 - 0xdeffffe], dl; cli; call rcx; 
0x0000000000196403: add byte ptr [rdx + rax*4], bl; add byte ptr [rax - 0x56], bl; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a63bb: add byte ptr [rdx + rax*4], dl; add dword ptr [rax], eax; and bl, cl; hlt; jmp qword ptr [rdx]; 
0x000000000019a453: add byte ptr [rdx + rax*8 + 0x2af80000], ch; out dx, al; call qword ptr [rsi]; 
0x000000000018afa7: add byte ptr [rdx + rax*8], dh; cmc; call rsp; 
0x00000000001a4c53: add byte ptr [rdx + rbp*2 + 0x64c80001], ch; hlt; call qword ptr [rbp]; 
0x0000000000188caf: add byte ptr [rdx + rbp*2 - 0x2b5b0012], al; add byte ptr [rax], al; add al, 0x6b; out dx, al; call rsp; 
0x000000000018d077: add byte ptr [rdx + rbp*2], ah; stc; jmp rsp; 
0x00000000001a4bc3: add byte ptr [rdx + rbp*2], bl; add dword ptr [rax], eax; fsub dword ptr [rbx - 0xc]; jmp qword ptr [rcx]; 
0x000000000019cc4b: add byte ptr [rdx + rbp*8 - 0x25a00000], ah; out dx, al; jmp rdx; 
0x000000000019cc1b: add byte ptr [rdx + rbp*8], dh; add byte ptr [rax], al; ret 0xffee; 
0x000000000019cbbb: add byte ptr [rdx + rbp*8], dl; add byte ptr [rax], al; mov al, 0xbf; out dx, al; jmp qword ptr [rax]; 
0x000000000018ceef: add byte ptr [rdx + rbp], dh; stc; jmp rsp; 
0x00000000001a7c33: add byte ptr [rdx + rbx*4 + 0x2ef80001], cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7c4b: add byte ptr [rdx + rbx*4 + 0x2f100001], ah; cmc; jmp qword ptr [rcx]; 
0x00000000001a7c03: add byte ptr [rdx + rbx*4 + 1], bl; add al, cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7c1b: add byte ptr [rdx + rbx*4 + 1], dh; add al, ah; cmc; jmp qword ptr [rcx]; 
0x00000000001a7bbb: add byte ptr [rdx + rbx*4], dl; add dword ptr [rax], eax; sub byte ptr [rsi], 0xf5; jmp qword ptr [rcx]; 
0x00000000001a25a7: add byte ptr [rdx + rbx*8 - 0x19], dl; jmp qword ptr [rdx]; 
0x0000000000093ee3: add byte ptr [rdx + rcx + 0x5b], dh; pop rbp; pop r12; ret; 
0x000000000018955f: add byte ptr [rdx + rcx - 0x11], dh; jmp rsp; 
0x000000000018c7cf: add byte ptr [rdx + rcx*2], al; clc; call rsp; 
0x00000000001aac23: add byte ptr [rdx + rcx*8 + 1], bh; add byte ptr [rax], ch; cmpsd dword ptr [rsi], dword ptr [rdi]; sti; jmp qword ptr [rsi]; 
0x00000000001aabfb: add byte ptr [rdx + rcx*8 + 1], dl; add byte ptr [rax - 0x29], al; cmc; jmp qword ptr [rax + 1]; 
0x00000000001aac5b: add byte ptr [rdx + rcx*8 - 0x271fffff], dh; cmc; call qword ptr [rax + 2]; 
0x00000000001a1c0b: add byte ptr [rdx + rdi + 1], ah; add al, al; in al, dx; int1; jmp qword ptr [rcx]; 
0x00000000001a1c23: add byte ptr [rdx + rdi + 1], bh; add al, bl; in al, dx; int1; call qword ptr [rbx]; 
0x00000000001a1c63: add byte ptr [rdx + rdi - 0x1277ffff], bh; int1; call qword ptr [rsi]; 
0x00000000001a1c3b: add byte ptr [rdx + rdi - 0x12dfffff], dl; int1; call qword ptr [rax]; 
0x0000000000187a7f: add byte ptr [rdx + rdi*2 + 0x687cffe9], dh; add byte ptr [rax], al; sub dword ptr [rbx - 0x17], edi; call rsp; 
0x00000000001a5c33: add byte ptr [rdx + rdi*2 - 0x4c17ffff], cl; hlt; jmp qword ptr [rcx]; 
0x000000000019dc0b: add byte ptr [rdx + rdi*8], ah; add byte ptr [rax - 0x80], dh; cld; jmp qword ptr [rax]; 
0x000000000016e3bf: add byte ptr [rdx + rdx + 0x12bf0000], bh; add byte ptr [rax], al; ret 0x12; 
0x000000000005f8b1: add byte ptr [rdx + rdx - 0x7d], dh; mov ebp, 0xffffeee8; adc byte ptr [rbp - 0x6bf001bf], cl; ret 0xd284; 
0x0000000000189f57: add byte ptr [rdx + rdx*2 - 0x10], dl; call rsp; 
0x0000000000197463: add byte ptr [rdx + rdx*4 - 0x45580000], bh; in eax, dx; jmp qword ptr [rdi]; 
0x00000000001a73bb: add byte ptr [rdx + rdx*4], dl; add dword ptr [rax], eax; and byte ptr [rsi], cl; cmc; jmp qword ptr [rcx]; 
0x000000000018ae37: add byte ptr [rdx + rdx*8 - 0xc], dl; push qword ptr [rcx + rdi*4 - 0x2d1bffff]; hlt; jmp rsp; 
0x00000000001a942b: add byte ptr [rdx + rsi*4 + 0x69e00001], al; cmc; call rcx; 
0x000000000017863c: add byte ptr [rdx + rsi*8 - 1], ch; mov al, 0x6b; inc eax; imul esi, edx, -1; shr byte ptr [rbx - 0xe], 1; jmp rax; 
0x00000000000a468e: add byte ptr [rdx - 0x4a351785], dh; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000001879c8: add byte ptr [rdx - 0x5e8f0004], ah; cld; call rax; 
0x000000000018d417: add byte ptr [rdx - 0x6300062c], dh; stosb byte ptr [rdi], al; add al, byte ptr [rax]; rcl esp, 1; stc; jmp rsp; 
0x0000000000187264: add byte ptr [rdx - 0x766f0004], cl; cld; jmp qword ptr [rax]; 
0x000000000008ca6f: add byte ptr [rdx - 1], bh; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x000000000010016f: add byte ptr [rdx - 1], bh; mov eax, edx; ret; 
0x000000000010016e: add byte ptr [rdx - 1], dil; mov eax, edx; ret; 
0x0000000000186338: add byte ptr [rdx - 5], bh; call qword ptr [rax + 0x7b]; 
0x000000000017abb4: add byte ptr [rdx - 6], ah; jmp rax; 
0x00000000001ab6bb: add byte ptr [rdx*8 - 0x179fffff], dl; cmc; call qword ptr [rax]; 
0x00000000001ab6d3: add byte ptr [rdx*8 - 0x17a7ffff], ch; cmc; call qword ptr [rbx]; 
0x000000000018dcef: add byte ptr [rdx*8 - 0x1a4b0006], ah; add al, byte ptr [rax]; adc al, 0xd6; cli; jmp rsp; 
0x000000000018ceed: add byte ptr [rdx], 0; xor al, 0x2a; stc; jmp rsp; 
0x000000000000452b: add byte ptr [rdx], ah; add byte ptr [rax + rax], cl; push rax; ret 0xb; 
0x0000000000008953: add byte ptr [rdx], ah; add byte ptr [rax + rax], cl; rol byte ptr [rbp + 8], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x0000000000132ed1: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000012b439: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x00000000001089bd: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x41d15]; ret; 
0x0000000000108a5d: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x44745]; ret; 
0x000000000008c5dd: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xc0bd5]; ret; 
0x00000000000301b8: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rax], rdx; ret; 
0x000000000002ff18: add byte ptr [rdx], al; add byte ptr [rax], al; ret; 
0x000000000011edea: add byte ptr [rdx], al; add rsp, 0x30; lea rax, qword ptr [rip + 0x2a48a9]; pop rbx; ret; 
0x000000000011bcb6: add byte ptr [rdx], al; add rsp, 8; ret; 
0x0000000000103088: add byte ptr [rdx], al; call qword ptr [rbx + 0x28]; 
0x000000000010218b: add byte ptr [rdx], al; call rax; 
0x0000000000108a03: add byte ptr [rdx], al; lea rax, qword ptr [rip + 0x47274]; lea rdx, qword ptr [rip + 0x3f14d]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000008c443: add byte ptr [rdx], al; lea rax, qword ptr [rip + 0xc3844]; lea rdx, qword ptr [rip + 0xbb71d]; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000102084: add byte ptr [rdx], al; mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x000000000002fdb4: add byte ptr [rdx], al; movzx eax, ax; ret; 
0x00000000000004af: add byte ptr [rdx], al; or al, byte ptr [rcx]; or al, 0x80; push rbx; add al, 4; ret 0x6080; 
0x00000000001a47b7: add byte ptr [rdx], al; shl bh, cl; jmp qword ptr [rax]; 
0x00000000001a03e3: add byte ptr [rdx], bh; add dword ptr [rax], eax; sub bh, al; int1; jmp qword ptr [rbp]; 
0x00000000001ac3c3: add byte ptr [rdx], bl; add dword ptr [rax], eax; cwde; cld; cmc; call qword ptr [rax]; 
0x000000000000583f: add byte ptr [rdx], ch; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4c; 
0x00000000001a476f: add byte ptr [rdx], ch; shl bh, cl; jmp qword ptr [rax]; 
0x0000000000010717: add byte ptr [rdx], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x19; 
0x00000000000f7119: add byte ptr [rdx], cl; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000186900: add byte ptr [rdx], cl; cld; call rax; 
0x00000000000f6d8f: add byte ptr [rdx], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000001ac3db: add byte ptr [rdx], dh; add dword ptr [rax], eax; nop; cld; cmc; call qword ptr [rax]; 
0x000000000000fa1b: add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; call qword ptr [rax]; 
0x000000000000a1e3: add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; ret 0x10; 
0x000000000000a9c3: add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; ret 0xb; 
0x00000000000066bb: add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; ret 7; 
0x00000000000107a7: add byte ptr [rdx], dl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001adbc2: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; adc ecx, dword ptr [rbx + 0xd1cfff5]; mov r13d, esi; jmp qword ptr [rdx]; 
0x00000000001ad0d2: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; add byte ptr [rax + 0xd1cfff5], al; fdivr dword ptr [rbp - 0xb]; jmp qword ptr [rdx]; 
0x00000000001a0d52: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; add eax, dword ptr [rax + 0xd1cfff1]; fidivr word ptr [rsi - 0xf]; jmp qword ptr [rdx]; 
0x00000000001acbaa: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; cmp dword ptr [rdx - 0xb], 0x3d0d1cff; jp 0x1acbb4; jmp qword ptr [rdx]; 
0x000000000019690a: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; imul eax, dword ptr [rbp + 0xd1cffed], -0x11; test ch, ch; jmp qword ptr [rdx]; 
0x0000000000197752: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; imul ecx, dword ptr [rdi + 0xd1cffed], -0x26; mov gs, ebp; jmp qword ptr [rdx]; 
0x00000000001adce2: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; jp 0xd37dce9; mov r13, r14; jmp qword ptr [rdx]; 
0x00000000001ade22: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; mov ecx, dword ptr [rdx + 0xd1cfff5]; mov bp, si; jmp qword ptr [rdx]; 
0x00000000001987fa: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xedbc800d1cffedbd]; jmp qword ptr [rdx]; 
0x00000000001ab58a: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xf55cf40d1cfff55d]; jmp qword ptr [rdx]; 
0x00000000001a935a: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf4ea900d1cfff4eb], al; jmp qword ptr [rdx]; 
0x00000000001ad5aa: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf582030d1cfff583], al; jmp qword ptr [rdx]; 
0x00000000001a973a: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs dword ptr [0xf4ec060d1cfff4ec], eax; jmp qword ptr [rdx]; 
0x00000000001995c2: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs eax, dword ptr [0xeddba10d1cffedfb]; jmp qword ptr [rdx]; 
0x00000000001998da: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xedf8; 
0x000000000019a6d2: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xee68; 
0x00000000001a0d9a: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf17f; 
0x00000000001ab29a: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf55b; 
0x00000000001acb62: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf57a; 
0x00000000001b2572: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf683; 
0x00000000001ab7aa: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret; 
0x00000000001ae00a: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; sbb ecx, dword ptr [rbp + rsi*8 + 0x490d1cff]; mov dh, ch; jmp qword ptr [rdx]; 
0x000000000019418a: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; sub eax, dword ptr [rax + 0xd1cffec]; fdivr dword ptr [rdi - 0x14]; jmp qword ptr [rdx]; 
0x00000000001969ca: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; xchg byte ptr [rbp + 0xd1cffed], al; ret 0xed84; 
0x00000000001ad762: add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; xor rbp, 0xffffffffffffffff; sbb al, 0xd; ret 0xf582; 
0x000000000006ebe0: add byte ptr [rip + 0x48000000], al; mov eax, edx; pop rbx; ret; 
0x000000000018c86f: add byte ptr [rip + 0x4cfff858], bl; add r8b, byte ptr [r8]; pop rax; clc; call rsp; 
0x000000000003672d: add byte ptr [rip + 0x7fff], ah; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000000450: add byte ptr [rip + 0xc1c107c], al; ret 0x4412; 
0x000000000016128f: add byte ptr [rip + 0xff], ah; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000016128e: add byte ptr [rip + 0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x00000000001609c2: add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000fa4e0: add byte ptr [rip - 0x1000], ah; or eax, edi; ret; 
0x00000000000f0b3b: add byte ptr [rip - 0x131], ah; or eax, 0x30; mov dword ptr [rdi + 8], eax; ret; 
0x000000000004f9a7: add byte ptr [rip - 0x1a817], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000052aa7: add byte ptr [rip - 0x73617], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000003648f: add byte ptr [rip - 0x80000000], ah; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x00000000000526ef: add byte ptr [rip - 0xac517], ch; jmp qword ptr [rsi + 0x2e]; 
0x00000000000a394a: add byte ptr [rsi + 0x13], dh; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000018c4bf: add byte ptr [rsi + 0x1c], bh; clc; inc dword ptr [rdi + rsi + 0x1ca40002]; clc; jmp rsp; 
0x00000000001ac843: add byte ptr [rsi + 0x2880001], bl; idiv bh; ret 3; 
0x0000000000022025: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x0000000000123ba7: add byte ptr [rsi + 0x41], ah; mov dword ptr [rax + 0x6c], eax; mov eax, 1; ret; 
0x00000000000967df: add byte ptr [rsi + 0x44], ah; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; add rdi, 3; mov rax, rdi; ret; 
0x00000000000967de: add byte ptr [rsi + 0x44], spl; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; add rdi, 3; mov rax, rdi; ret; 
0x00000000000f0a84: add byte ptr [rsi + 0x5409], bh; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000f0a40: add byte ptr [rsi + 0x5409], bh; movsxd rdi, edi; mov eax, 0x10; syscall; 
0x00000000000f915c: add byte ptr [rsi + 0x58b002c], 0x4e; xchg byte ptr [rax + rax], ch; mov dword ptr [rip + 0x2c8678], eax; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x000000000018cd07: add byte ptr [rsi + 0x738cfff8], dl; add al, byte ptr [rax]; out 0xf8, eax; call rsp; 
0x0000000000108147: add byte ptr [rsi + 0x80], bh; syscall; 
0x0000000000108087: add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000001a484b: add byte ptr [rsi + 0x9300001], ah; hlt; jmp rdx; 
0x000000000012a667: add byte ptr [rsi + 0xe], bh; pop rbx; pop rbp; xor eax, eax; pop r12; ret; 
0x0000000000099ac1: add byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x000000000013cac7: add byte ptr [rsi + 0xf], ah; cmp ah, byte ptr [rbx - 0x25]; cmp cl, byte ptr [rax + 0x63]; ror dword ptr [rax + 1], -8; sub rax, rsi; ret; 
0x000000000013caa5: add byte ptr [rsi + 0xf], ah; cmp ah, byte ptr [rbx - 0x35]; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000015ff84: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000006ac34: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x0000000000036087: add byte ptr [rsi + 0xf], ah; push rsp; or eax, 0x14f840; orpd xmm0, xmm1; ret; 
0x000000000008bce4: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000096e8c: add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000096eb1: add byte ptr [rsi + 0xf], ah; xlatb; ror dword ptr [rdi], -0x43; ror byte ptr [rax + 1], 0xf8; ret; 
0x00000000000c8483: add byte ptr [rsi + 0xf], al; mov dh, 0x3c; mov eax, 0xfffb08e9; jmp qword ptr [rsi - 0x70]; 
0x00000000000f5c6f: add byte ptr [rsi + 1], bh; call rbx; 
0x00000000000f5e5c: add byte ptr [rsi + 1], bh; mov rdi, r12; call rbx; 
0x00000000000f5d28: add byte ptr [rsi + 1], bh; mov rdi, r13; call rbx; 
0x00000000000f5ca0: add byte ptr [rsi + 1], bh; mov rdi, r14; call rbx; 
0x00000000001ac7f3: add byte ptr [rsi + 1], cl; add al, ch; add dh, dh; jmp qword ptr [rbx + 1]; 
0x000000000011fed6: add byte ptr [rsi + 2], bh; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x48], 0; mov rdi, r13; call qword ptr [rax]; 
0x00000000000f60da: add byte ptr [rsi + 2], bh; mov rdi, r12; call rbx; 
0x00000000000f5e4d: add byte ptr [rsi + 2], bh; mov rdi, r13; call rbx; 
0x00000000000f5d19: add byte ptr [rsi + 2], bh; mov rdi, r14; call rbx; 
0x00000000000f5c91: add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x000000000011ffed: add byte ptr [rsi + 4], bh; mov rdi, rbp; call qword ptr [rax]; 
0x0000000000004b07: add byte ptr [rsi + 5], ch; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x26; 
0x0000000000036f2f: add byte ptr [rsi + 8], bh; mov eax, 0x7f; syscall; 
0x0000000000036fef: add byte ptr [rsi + 8], bh; mov eax, 0x82; syscall; 
0x0000000000036f9d: add byte ptr [rsi + 8], bh; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x82; syscall; 
0x0000000000125f99: add byte ptr [rsi + 8], bh; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000000171f: add byte ptr [rsi + rax + 0x6bf0000], bh; add byte ptr [rax], al; ret 6; 
0x000000000018a6a7: add byte ptr [rsi + rax - 0xd], ah; dec esp; xchg byte ptr [rcx], al; add byte ptr [rsi + rax - 0xd], dh; jmp rsp; 
0x000000000018a6af: add byte ptr [rsi + rax - 0xd], dh; jmp rsp; 
0x0000000000187eff: add byte ptr [rsi + rax*4 - 0x16], al; call rsp; 
0x00000000001aa80b: add byte ptr [rsi + rax*8 + 1], ah; add byte ptr [rax - 0x3d], al; clc; jmp qword ptr [rsi]; 
0x00000000001aa823: add byte ptr [rsi + rax*8 + 1], bh; add byte ptr [rax], bl; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa7f3: add byte ptr [rsi + rax*8 + 1], cl; add byte ptr [rax], bl; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa853: add byte ptr [rsi + rax*8 - 0x29b7ffff], ch; cmc; jmp qword ptr [rsi]; 
0x00000000001aa7c3: add byte ptr [rsi + rax*8], bl; add dword ptr [rax], eax; sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000000d0aaf: add byte ptr [rsi + rbp*2 + 0x3c], dh; sub eax, 0x47c62a75; or byte ptr [rsi], dl; mov eax, 1; ret; 
0x00000000001a502b: add byte ptr [rsi + rbp*2 + 0x6e600001], al; hlt; jmp qword ptr [rcx]; 
0x00000000001a5043: add byte ptr [rsi + rbp*2 + 0x6e780001], bl; hlt; jmp qword ptr [rcx]; 
0x00000000001a505b: add byte ptr [rsi + rbp*2 + 0x6e900001], dh; hlt; jmp qword ptr [rcx]; 
0x00000000001a5013: add byte ptr [rsi + rbp*2 + 1], ch; add byte ptr [rax + 0x6e], cl; hlt; jmp qword ptr [rcx]; 
0x000000000018d9ff: add byte ptr [rsi + rbp*2], ah; cli; jmp rsp; 
0x00000000001a4fab: add byte ptr [rsi + rbp*2], al; add dword ptr [rax], eax; adc byte ptr [rbp - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001a8fd3: add byte ptr [rsi + rbp*4], ch; add dword ptr [rax], eax; sbb byte ptr [rbx - 0xb], ah; jmp qword ptr [rcx]; 
0x000000000019d03b: add byte ptr [rsi + rbp*8 - 0x5c00000], dl; out dx, al; call qword ptr [rcx]; 
0x000000000019cfcb: add byte ptr [rsi + rbp*8], ah; add byte ptr [rax], al; xor dh, dh; out dx, al; call qword ptr [rdx + 4]; 
0x00000000000313ed: add byte ptr [rsi + rbx + 0x48], dh; mov eax, dword ptr [rip + 0x392c19]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f4b11: add byte ptr [rsi + rbx + 0x5b], dh; ret; 
0x00000000001a803b: add byte ptr [rsi + rbx*4 + 0x35700001], dl; cmc; jmp qword ptr [rcx]; 
0x00000000001a8023: add byte ptr [rsi + rbx*4 + 1], bh; add byte ptr [rax + 0x35], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7ff3: add byte ptr [rsi + rbx*4 + 1], cl; add al, bh; xor al, 0xf5; jmp qword ptr [rax]; 
0x000000000019eff3: add byte ptr [rsi + rcx + 1], cl; add al, bh; fcompi st(0); jmp rax; 
0x0000000000189827: add byte ptr [rsi + rcx*2 - 0x11], dh; jmp rsp; 
0x0000000000188537: add byte ptr [rsi + rcx*2 - 0x15], dh; call rsp; 
0x000000000018981f: add byte ptr [rsi + rcx*2], ah; out dx, eax; dec esp; sub byte ptr [rcx], al; add byte ptr [rsi + rcx*2 - 0x11], dh; jmp rsp; 
0x00000000001a2033: add byte ptr [rsi + rdi - 0x2e7ffff], cl; int1; jmp qword ptr [rcx]; 
0x00000000001a6053: add byte ptr [rsi + rdi*2 - 0x4197ffff], ch; hlt; jmp qword ptr [rcx]; 
0x00000000001aa01b: add byte ptr [rsi + rdi*4 + 1], dh; add byte ptr [rax - 0x7b], al; cmc; call qword ptr [rsi + 6]; 
0x0000000000189237: add byte ptr [rsi + rdi*4], ah; out dx, al; push qword ptr [rbp + rdi*8 - 0x416c0000]; out dx, al; jmp rsp; 
0x000000000019200b: add byte ptr [rsi + rdi], ah; add byte ptr [rax], dh; mov al, 0xea; jmp qword ptr [rax]; 
0x0000000000192023: add byte ptr [rsi + rdi], bh; add byte ptr [rax], bh; mov al, 0xea; jmp qword ptr [rdx]; 
0x0000000000191ff3: add byte ptr [rsi + rdi], cl; add byte ptr [rax], bl; mov al, 0xea; jmp qword ptr [rbx]; 
0x00000000001885ef: add byte ptr [rsi + rdx*2 - 0x15], al; jmp rsp; 
0x00000000001a783b: add byte ptr [rsi + rdx*4 + 0x2a400001], dl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7823: add byte ptr [rsi + rdx*4 + 1], bh; add byte ptr [rax], ch; sub dh, ch; jmp qword ptr [rcx]; 
0x0000000000197823: add byte ptr [rsi + rdx*4], bh; add byte ptr [rax - 0x40], ch; in eax, dx; jmp qword ptr [rbp]; 
0x000000000018cb87: add byte ptr [rsi + rdx*4], dh; clc; call rsp; 
0x00000000000e3b23: add byte ptr [rsi + rdx*8 + 0x5b], dh; pop rbp; xor eax, eax; pop r12; ret; 
0x000000000018dcf7: add byte ptr [rsi + rdx*8], dl; cli; jmp rsp; 
0x000000000018a25f: add byte ptr [rsi + rsi*4 - 0xf], dh; dec dword ptr [rdx + rbp*2 - 0x489bffff]; int1; push qword ptr [rdx + rbp*2 - 0x485bffff]; int1; jmp rsp; 
0x000000000018cd57: add byte ptr [rsi + rsi*8 - 8], ah; jmp rsp; 
0x0000000000177f38: add byte ptr [rsi - 0x11], dl; call qword ptr [rax]; 
0x0000000000177f38: add byte ptr [rsi - 0x11], dl; call qword ptr [rax]; push rsi; out dx, eax; jmp qword ptr [rax + 0x56]; 
0x00000000001886df: add byte ptr [rsi - 0x15], dl; call rsp; 
0x0000000000189c5f: add byte ptr [rsi - 0x2c], bh; out dx, eax; lcall ptr [rdx + rdi - 0x2b66ffff]; out dx, eax; jmp rsp; 
0x00000000001a0863: add byte ptr [rsi - 0x35d7ffff], bh; int1; call qword ptr [rbx]; 
0x00000000001a084b: add byte ptr [rsi - 0x35dfffff], ah; int1; call qword ptr [rbx]; 
0x00000000001a0833: add byte ptr [rsi - 0x35e7ffff], cl; int1; call qword ptr [rsi]; 
0x000000000016e3b7: add byte ptr [rsi - 0x46ffffee], dh; adc al, byte ptr [rax]; add byte ptr [rdx + rdx + 0x12bf0000], bh; add byte ptr [rax], al; ret 0x12; 
0x000000000016dfb7: add byte ptr [rsi - 0x46fffff1], dh; sldt word ptr [rax]; mov esp, 0xbf00000f; sldt word ptr [rax]; ret 0xf; 
0x000000000016dbb7: add byte ptr [rsi - 0x46fffff4], dh; or al, 0; add byte ptr [rsp + rcx + 0xcbf0000], bh; add byte ptr [rax], al; ret 0xc; 
0x000000000016d7b7: add byte ptr [rsi - 0x46fffff7], dh; or dword ptr [rax], eax; add byte ptr [rcx + rcx + 0x9bf0000], bh; add byte ptr [rax], al; ret 9; 
0x00000000000237bd: add byte ptr [rsi - 0x70], ah; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000003607d: add byte ptr [rsi - 0x70], ah; andpd xmm0, xmmword ptr [rip + 0x14f858]; andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x00000000000faf1d: add byte ptr [rsi - 0x70], ah; mov eax, 0x11f; syscall; 
0x00000000000fbe3d: add byte ptr [rsi - 0x70], ah; mov eax, 0x1e; syscall; 
0x00000000000fb57d: add byte ptr [rsi - 0x70], ah; mov eax, 0x30; syscall; 
0x00000000000fb23d: add byte ptr [rsi - 0x70], ah; mov eax, 0x32; syscall; 
0x00000000000eb44d: add byte ptr [rsi - 0x70], ah; mov eax, 0x53; syscall; 
0x00000000000374bd: add byte ptr [rsi - 0x70], ah; mov eax, 0x83; syscall; 
0x00000000000f49ed: add byte ptr [rsi - 0x70], ah; mov eax, 0x95; syscall; 
0x00000000000fa78d: add byte ptr [rsi - 0x70], ah; mov eax, 0x9e; syscall; 
0x00000000000fa82d: add byte ptr [rsi - 0x70], ah; mov eax, 0x9f; syscall; 
0x00000000000fabed: add byte ptr [rsi - 0x70], ah; mov eax, 0xb4; syscall; 
0x00000000000f489d: add byte ptr [rsi - 0x70], ah; mov eax, 0xb; syscall; 
0x00000000000f80ed: add byte ptr [rsi - 0x70], ah; mov eax, 0xc2; syscall; 
0x00000000000f814d: add byte ptr [rsi - 0x70], ah; mov eax, 0xc3; syscall; 
0x00000000000f802d: add byte ptr [rsi - 0x70], ah; mov eax, 0xc4; syscall; 
0x00000000000f81dd: add byte ptr [rsi - 0x70], ah; mov eax, 0xc5; syscall; 
0x00000000000faa9d: add byte ptr [rsi - 0x70], ah; mov eax, 0xfe; syscall; 
0x00000000000746fd: add byte ptr [rsi - 0x70], ah; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000bd33d: add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi]; ret; 
0x00000000000735ed: add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x0000000000037b9d: add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rip + 0x3864fa]; ret; 
0x00000000000fb06d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000000fabbd: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000000facad: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000000facdd: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb3; syscall; 
0x0000000000132d0d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb5; syscall; 
0x0000000000132d5d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xb6; syscall; 
0x00000000000f80bd: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000000fbe0d: add byte ptr [rsi - 0x70], ah; mov r10, rcx; mov eax, 0xdc; syscall; 
0x0000000000132dad: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x28b0b1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d8d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x28b0d1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d3d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x28b121]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fb09d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x2c2dc1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x000000000003783d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x386621]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000002cd5d: add byte ptr [rsi - 0x70], ah; mov rax, qword ptr [rip + 0x391059]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000036c9d: add byte ptr [rsi - 0x70], ah; nop; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000001584ff: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000015850f: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000116282: add byte ptr [rsi - 0x77], ah; add al, 0x24; mov dword ptr [rsp + 4], r11d; call 0x115190; add rsp, 0x88; ret; 
0x0000000000133e46: add byte ptr [rsi - 0x77], ah; add eax, 0x28fbb2; mov eax, 1; add rsp, 8; ret; 
0x0000000000036833: add byte ptr [rsi - 0x77], ah; and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000036813: add byte ptr [rsi - 0x77], ah; and al, 0xf0; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000368ed: add byte ptr [rsi - 0x77], ah; push rsp; and al, 0xf0; mov dword ptr [rdi], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000019484b: add byte ptr [rsi - 0x79600000], ah; in eax, dx; call qword ptr [rbx + 1]; 
0x000000000018cee7: add byte ptr [rsi - 0x7fab0007], ah; add al, byte ptr [rax]; xor al, 0x2a; stc; jmp rsp; 
0x0000000000074f9e: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x00000000000750b6: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x0000000000074dbe: add byte ptr [rsi - 1], bh; mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000079595: add byte ptr [rsi - 1], bh; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x0000000000074676: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000018d667: add byte ptr [rsi - 6], al; jmp rsp; 
0x00000000000e44af: add byte ptr [rsi - 9], ah; mov byte ptr [rax + 0x16b8ff], 0; add byte ptr [rsp + rax - 0xd], dh; ret; 
0x00000000001adbcb: add byte ptr [rsi], 0xd; adc ecx, dword ptr [rbx + 0xd1cfff5]; mov r13d, esi; jmp qword ptr [rdx]; 
0x00000000001ad0db: add byte ptr [rsi], 0xd; add byte ptr [rax + 0xd1cfff5], al; fdivr dword ptr [rbp - 0xb]; jmp qword ptr [rdx]; 
0x0000000000196b63: add byte ptr [rsi], 0xd; add byte ptr [rbp + 0xd1cffed], al; lodsd eax, dword ptr [rsi]; test ch, ch; jmp qword ptr [rdx]; 
0x00000000001a0d5b: add byte ptr [rsi], 0xd; add eax, dword ptr [rax + 0xd1cfff1]; fidivr word ptr [rsi - 0xf]; jmp qword ptr [rdx]; 
0x00000000001980cb: add byte ptr [rsi], 0xd; and bh, byte ptr [rsi + 0xd1cffed]; int1; stosd dword ptr [rdi], eax; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019ac7b: add byte ptr [rsi], 0xd; and dword ptr [rbx - 0x12], 0xffffffff; sbb al, 0xd; loope 0x19acae; out dx, al; jmp qword ptr [rdx]; 
0x0000000000192a33: add byte ptr [rsi], 0xd; cld; and eax, 0xd1cffeb; sahf; and al, 0xeb; jmp qword ptr [rdx]; 
0x00000000001acbb3: add byte ptr [rsi], 0xd; cmp dword ptr [rdx - 0xb], 0x3d0d1cff; jp 0x1acbb4; jmp qword ptr [rdx]; 
0x00000000001ad9e3: add byte ptr [rsi], 0xd; fild dword ptr [rdi + 0xd1cfff5]; push rax; xchg ebp, esi; jmp qword ptr [rdx]; 
0x00000000001a160b: add byte ptr [rsi], 0xd; fisttp dword ptr [rdx + 0xd1cfff1]; mov dh, 0x89; int1; jmp qword ptr [rdx]; 
0x00000000001b5883: add byte ptr [rsi], 0xd; idiv edi; sbb al, 0xd; mov dh, byte ptr [rdi + rsi*8]; jmp qword ptr [rdx]; 
0x0000000000196913: add byte ptr [rsi], 0xd; imul eax, dword ptr [rbp + 0xd1cffed], -0x11; test ch, ch; jmp qword ptr [rdx]; 
0x00000000001a98d3: add byte ptr [rsi], 0xd; imul ebp, edi, 0xd1cfff4; in eax, dx; hlt; jmp qword ptr [rdx]; 
0x000000000019775b: add byte ptr [rsi], 0xd; imul ecx, dword ptr [rdi + 0xd1cffed], -0x26; mov gs, ebp; jmp qword ptr [rdx]; 
0x0000000000199b6b: add byte ptr [rsi], 0xd; imul esi, esi, 0xd1cffed; in al, 0xf3; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001adceb: add byte ptr [rsi], 0xd; jp 0xd37dce9; mov r13, r14; jmp qword ptr [rdx]; 
0x000000000019ab5b: add byte ptr [rsi], 0xd; lea esp, dword ptr [rsi + rbp*8 - 1]; sbb al, 0xd; out dx, al; adc ch, dh; jmp qword ptr [rdx]; 
0x00000000001b5913: add byte ptr [rsi], 0xd; mov ah, 0x35; idiv edi; sbb al, 0xd; xor al, 0xf7; jmp qword ptr [rdx]; 
0x0000000000196ad3: add byte ptr [rsi], 0xd; mov al, byte ptr [rbp + 0xd1cffed]; mov ch, 0x84; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001ade2b: add byte ptr [rsi], 0xd; mov ecx, dword ptr [rdx + 0xd1cfff5]; mov bp, si; jmp qword ptr [rdx]; 
0x0000000000198803: add byte ptr [rsi], 0xd; movabs al, byte ptr [0xedbc800d1cffedbd]; jmp qword ptr [rdx]; 
0x00000000001ab593: add byte ptr [rsi], 0xd; movabs al, byte ptr [0xf55cf40d1cfff55d]; jmp qword ptr [rdx]; 
0x00000000001a9363: add byte ptr [rsi], 0xd; movabs byte ptr [0xf4ea900d1cfff4eb], al; jmp qword ptr [rdx]; 
0x00000000001ad5b3: add byte ptr [rsi], 0xd; movabs byte ptr [0xf582030d1cfff583], al; jmp qword ptr [rdx]; 
0x00000000001a9743: add byte ptr [rsi], 0xd; movabs dword ptr [0xf4ec060d1cfff4ec], eax; jmp qword ptr [rdx]; 
0x00000000001995cb: add byte ptr [rsi], 0xd; movabs eax, dword ptr [0xeddba10d1cffedfb]; jmp qword ptr [rdx]; 
0x000000000018fceb: add byte ptr [rsi], 0xd; outsb dx, byte ptr [rsi]; sbb eax, 0xd1cffea; push rbp; adc edx, ebp; jmp qword ptr [rdx]; 
0x000000000019884b: add byte ptr [rsi], 0xd; pop rbx; mov ebp, 0xd1cffed; test al, 0xbc; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001998e3: add byte ptr [rsi], 0xd; ret 0xedf8; 
0x000000000019a6db: add byte ptr [rsi], 0xd; ret 0xee68; 
0x00000000001a0da3: add byte ptr [rsi], 0xd; ret 0xf17f; 
0x00000000001ab2a3: add byte ptr [rsi], 0xd; ret 0xf55b; 
0x00000000001acb6b: add byte ptr [rsi], 0xd; ret 0xf57a; 
0x00000000001b257b: add byte ptr [rsi], 0xd; ret 0xf683; 
0x00000000001ab7b3: add byte ptr [rsi], 0xd; ret; 
0x00000000001ae013: add byte ptr [rsi], 0xd; sbb ecx, dword ptr [rbp + rsi*8 + 0x490d1cff]; mov dh, ch; jmp qword ptr [rdx]; 
0x000000000019ad53: add byte ptr [rsi], 0xd; shl byte ptr [rdx - 0x12], 0xff; sbb al, 0xd; cdq; xor dh, ch; jmp qword ptr [rdx]; 
0x0000000000198733: add byte ptr [rsi], 0xd; std; mov esp, 0xd1cffed; jno 0x1986fa; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019a693: add byte ptr [rsi], 0xd; sub dword ptr [rsp + rdi*8 - 1], edi; sbb al, 0xd; bnd jnp 0x19a69b; jmp qword ptr [rdx]; 
0x0000000000194193: add byte ptr [rsi], 0xd; sub eax, dword ptr [rax + 0xd1cffec]; fdivr dword ptr [rdi - 0x14]; jmp qword ptr [rdx]; 
0x00000000001969d3: add byte ptr [rsi], 0xd; xchg byte ptr [rbp + 0xd1cffed], al; ret 0xed84; 
0x00000000001ad76b: add byte ptr [rsi], 0xd; xor rbp, 0xffffffffffffffff; sbb al, 0xd; ret 0xf582; 
0x000000000018faf0: add byte ptr [rsi], 0xea; call qword ptr [rcx]; 
0x00000000001868d8: add byte ptr [rsi], 0xfc; jmp qword ptr [rax + 8]; 
0x00000000001907cb: add byte ptr [rsi], ah; add byte ptr [rax], al; adc byte ptr [rbx - 0x16], ah; call qword ptr [rax]; 
0x0000000000037849: add byte ptr [rsi], ah; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000001a87cb: add byte ptr [rsi], ah; add dword ptr [rax], eax; and byte ptr [rdi - 0xb], dl; call qword ptr [rdx]; 
0x0000000000186b44: add byte ptr [rsi], ah; cld; call qword ptr [rax + 0x27]; 
0x000000000015e49c: add byte ptr [rsi], al; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000018cfef: add byte ptr [rsi], bl; pop rbp; stc; dec dword ptr [rsi + rax*4 + 0x5d3d0002]; stc; call rsp; 
0x00000000001869d4: add byte ptr [rsi], ch; cld; jmp rax; 
0x000000000000fa17: add byte ptr [rsi], ch; sbb al, byte ptr [rax]; add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; call qword ptr [rax]; 
0x0000000000017f27: add byte ptr [rsi], cl; ret; 
0x00000000001998d6: add byte ptr [rsi], dl; adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xedf8; 
0x000000000019a6ce: add byte ptr [rsi], dl; adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xee68; 
0x00000000001a0d96: add byte ptr [rsi], dl; adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf17f; 
0x00000000001ab296: add byte ptr [rsi], dl; adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf55b; 
0x00000000001acb5e: add byte ptr [rsi], dl; adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf57a; 
0x00000000001b256e: add byte ptr [rsi], dl; adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf683; 
0x00000000001ab7a6: add byte ptr [rsi], dl; adc byte ptr [rdx], al; add byte ptr [rip + 0x1800e44], 0x16; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret; 
0x00000000000efcc9: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000003588f: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 3]; syscall; 
0x0000000000036c89: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000002e6d2: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; std; mov eax, 3; syscall; 
0x0000000000060a8b: add byte ptr [rsi], dl; add byte ptr [rax], al; add cl, ch; ret 0xffec; 
0x000000000018c957: add byte ptr [rsi], dl; insd dword ptr [rdi], dx; clc; dec dword ptr [rsi + rdx*2 + 0x6d350002]; clc; call rsp; 
0x00000000001717b7: add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000000e4bc1: add byte ptr [rsp + rax - 0x77], dh; ret 0xeeeb; 
0x00000000000af0ef: add byte ptr [rsp + rax - 0x7d], dh; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000e44b9: add byte ptr [rsp + rax - 0xd], dh; ret; 
0x000000000018bd4f: add byte ptr [rsp + rax*2 + 0x8b4fff7], dl; add al, byte ptr [rax]; test byte ptr [rcx - 9], cl; jmp rsp; 
0x000000000005bdf4: add byte ptr [rsp + rax*2 - 0x75], ah; and cl, byte ptr [rax - 0x39]; ret 0xfffe; 
0x000000000018b257: add byte ptr [rsp + rax*2 - 0xa], dl; call rsp; 
0x00000000001b65eb: add byte ptr [rsp + rax*4 + 2], al; add byte ptr [rax], dl; push rdi; call qword ptr [rcx]; 
0x00000000001aa65b: add byte ptr [rsp + rax*8 - 0x2a8fffff], dh; cmc; jmp qword ptr [rsi]; 
0x00000000001aa643: add byte ptr [rsp + rax*8 - 0x2aa7ffff], bl; cmc; jmp qword ptr [rsi]; 
0x00000000001aa62b: add byte ptr [rsp + rax*8 - 0x2abfffff], al; cmc; jmp qword ptr [rsi]; 
0x000000000018c2ff: add byte ptr [rsp + rax], al; clc; dec esp; sub eax, 0x4340002; clc; jmp rsp; 
0x000000000018c307: add byte ptr [rsp + rax], dh; clc; jmp rsp; 
0x0000000000198e33: add byte ptr [rsp + rbp*4 - 0xa080000], cl; in eax, dx; jmp qword ptr [rbx]; 
0x0000000000198e13: add byte ptr [rsp + rbp*4], ch; add byte ptr [rax - 0xb], ch; in eax, dx; jmp qword ptr [rcx]; 
0x000000000018810f: add byte ptr [rsp + rbp*8 - 0x16], ah; jmp rsp; 
0x000000000001b197: add byte ptr [rsp + rbx*2 + 0x18], bh; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], cl; ret; 
0x000000000001b137: add byte ptr [rsp + rbx*2 + 0x18], bl; add byte ptr [rax], al; add byte ptr [rax], al; add al, ch; ret 0x3b; 
0x000000000001b14f: add byte ptr [rsp + rbx*2 + 0x18], ch; add byte ptr [rax], al; add byte ptr [rax], al; add al, dh; ret 0x3b; 
0x000000000001b11f: add byte ptr [rsp + rbx*2 + 0x18], cl; add byte ptr [rax], al; add byte ptr [rax], al; add al, ah; ret 0x3b; 
0x00000000001a7e43: add byte ptr [rsp + rbx*4 + 0x31c80001], bl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7dfb: add byte ptr [rsp + rbx*4 + 1], dl; add byte ptr [rax + 0x31], dl; cmc; jmp qword ptr [rcx]; 
0x00000000001a7de3: add byte ptr [rsp + rbx*4], bh; add dword ptr [rax], eax; cmp byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001a7db3: add byte ptr [rsp + rbx*4], cl; add dword ptr [rax], eax; or byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x000000000019bdc3: add byte ptr [rsp + rbx*8], bl; add byte ptr [rax], al; cmp byte ptr [rax - 0x12], dh; call qword ptr [rsi]; 
0x000000000016dbbf: add byte ptr [rsp + rcx + 0xcbf0000], bh; add byte ptr [rax], al; ret 0xc; 
0x00000000000cbe2e: add byte ptr [rsp + rcx*2 - 0x75], ah; sub byte ptr [rcx - 0x75], cl; or byte ptr [r8 - 0x77], r9b; ret 0x8948; 
0x0000000000192dc3: add byte ptr [rsp + rcx*2], bl; add byte ptr [rax], al; or byte ptr [rdx - 0x15], bl; jmp qword ptr [rsi]; 
0x00000000001aae2b: add byte ptr [rsp + rcx*8 - 0x1f3fffff], al; cmc; call qword ptr [rax]; 
0x000000000018d3cf: add byte ptr [rsp + rcx*8], dl; stc; inc dword ptr [rax + rbp*4 - 0x326bfffe]; stc; call rsp; 
0x00000000001a1dfb: add byte ptr [rsp + rdi + 1], dl; add al, ah; int1; jmp qword ptr [rdx]; 
0x00000000001a5e03: add byte ptr [rsp + rdi*2 + 1], bl; add byte ptr [rax - 0x47], cl; hlt; call rdi; 
0x00000000001a5e53: add byte ptr [rsp + rdi*2 - 0x4627ffff], ch; hlt; jmp qword ptr [rsi]; 
0x000000000018cc7f: add byte ptr [rsp + rdi*4 - 8], ah; jmp rsp; 
0x000000000018cdc7: add byte ptr [rsp + rdi*8 - 8], dl; jmp rsp; 
0x000000000018d50f: add byte ptr [rsp + rdi*8], ah; stc; jmp rsp; 
0x000000000019de03: add byte ptr [rsp + rdi*8], bl; add byte ptr [rax], bl; pushfq; out dx, eax; jmp rdi; 
0x00000000001a1de3: add byte ptr [rsp + rdi], bh; add dword ptr [rax], eax; cwde; int1; call qword ptr [rbp]; 
0x000000000018c437: add byte ptr [rsp + rdx + 0x33bcfff8], al; add al, byte ptr [rax]; xchg eax, esp; adc al, 0xf8; call rsp; 
0x000000000005fbc7: add byte ptr [rsp + rdx - 0x7d], dh; mov ebp, 0xffffee94; adc byte ptr [rcx - 0x73], al; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x000000000004a5a1: add byte ptr [rsp + rdx - 0x7d], dh; mov ebp, 0xfffffa94; adc byte ptr [rcx - 0x73], al; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x000000000018cb7f: add byte ptr [rsp + rdx*4 - 8], dh; call qword ptr [rax + rbp*2 - 0x69cbfffe]; clc; call rsp; 
0x00000000001892f7: add byte ptr [rsp + rdx*8 - 0x12], al; push qword ptr [rdx + rax - 0x2b2bffff]; out dx, al; jmp rsp; 
0x000000000018c9af: add byte ptr [rsp + rsi*2 - 8], bl; jmp rsp; 
0x000000000019d5fb: add byte ptr [rsp + rsi*8], dl; add al, al; out dx, eax; jmp qword ptr [rcx]; 
0x000000000018b587: add byte ptr [rsp - 0xa], dl; jmp rsp; 
0x00000000001ac5ab: add byte ptr [rsp], al; add dword ptr [rax], eax; add ch, bh; cmc; jmp rsp; 
0x00000000001945f3: add byte ptr [rsp], cl; add byte ptr [rax], bl; movsb byte ptr [rdi], byte ptr [rsi]; in al, dx; call rdx; 
0x000000000018ddd7: add byte ptr [rsp], dh; cli; call rsp; 
0x0000000000176bb8: add byte ptr cs:[rax], al; add byte ptr [rdi], bl; add byte ptr [rax], al; insd dword ptr [rdi], dx; sar bh, 1; jmp qword ptr [rdi]; 
0x00000000000464d9: add byte ptr ds:[rax], al; add byte ptr [rax + 0x63], cl; sti; syscall; 
0x0000000000192055: add byte ptr ds:[rax], al; pop rax; mov al, 0xea; jmp qword ptr [rdx]; 
0x00000000000e54c8: add byte ptr ds:[rdi], cl; test byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000f4b10: add byte ptr ds:[rsi + rbx + 0x5b], dh; ret; 
0x00000000001907cd: add byte ptr es:[rax], al; adc byte ptr [rbx - 0x16], ah; call qword ptr [rax]; 
0x000000000003784a: add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000fc335: add byte ptr es:[rcx + rcx*4 - 0x31], cl; mov byte ptr [rbp - 0x689], 0x73; mov eax, 0x14; syscall; 
0x00000000001a1478: add byte ptr fs:[rax], al; add ah, dl; xor al, byte ptr [rcx]; add byte ptr [rax - 0x21], dl; int1; jmp qword ptr [rdi + 1]; 
0x00000000001a9760: add byte ptr fs:[rax], al; add byte ptr [rbp + rsi*4 + 0x6ed80001], bh; cmc; jmp qword ptr [rdi + 1]; 
0x00000000000f7feb: add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbaf02e], al; ret; 
0x00000000001a8cd0: add byte ptr fs:[rax], al; add byte ptr [rbx + rbp*4], ch; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xb], bl; jmp qword ptr [rdi + 1]; 
0x00000000001ab4b8: add byte ptr fs:[rax], al; add byte ptr [rbx + rdx*8], dl; add dword ptr [rax], eax; shl ch, 1; cmc; jmp rbx; 
0x00000000000b6fd5: add byte ptr fs:[rax], al; add byte ptr [rbx - 0x50f0ec18], al; ret 0x8941; 
0x00000000001aa160: add byte ptr fs:[rax], al; add byte ptr [rdi + rdi*4 - 0x7127ffff], bh; cmc; jmp qword ptr [rbx + 2]; 
0x00000000001b6438: add byte ptr fs:[rax], al; add byte ptr [rdx + rax*4 - 0xdeffffe], dl; cli; call rcx; 
0x00000000001ac840: add byte ptr fs:[rax], al; add byte ptr [rsi + 0x2880001], bl; idiv bh; ret 3; 
0x000000000007a330: add byte ptr gs:[rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000f23e0: add byte ptr gs:[rax], al; add bh, al; and al, 0xa8; sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000000ce98b: add byte ptr gs:[rax], al; add byte ptr [rcx], ch; ret 0x850f; 
0x0000000000113373: add byte ptr gs:[rbx + 0x5d], bl; pop r12; ret; 
0x000000000007a316: add byte ptr gs:[rbx + 0x78940c8], al; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x000000000005d121: add byte ptr ss:[rax - 0x75], cl; cmp al, ch; add eax, 0x48ffff75; add esp, 0xd8; ret; 
0x0000000000053934: add byte ptr ss:[rbp + 0x5c], dh; mov eax, edx; pop rbx; ret; 
0x000000000005d517: add byte ptr ss:[rbx + 0x5d], bl; ret; 
0x000000000005bdf3: add byte ptr ss:[rsp + rax*2 - 0x75], ah; and cl, byte ptr [rax - 0x39]; ret 0xfffe; 
0x0000000000112600: add ch, al; or dl, byte ptr [rbp - 8]; jmp qword ptr [rsi + 0x2e]; 
0x00000000000da8b7: add ch, al; ret; 
0x00000000000e0261: add ch, al; sbb edx, esi; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 5; 
0x00000000000d2324: add ch, al; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000000d2303: add ch, al; sti; lcall ptr [rbx + 0x5d]; xor eax, eax; pop r12; ret; 
0x00000000001ac5b0: add ch, bh; cmc; jmp rsp; 
0x0000000000179c63: add ch, bh; ljmp ptr [rdx]; add bh, bh; dec dword ptr [rdi]; cld; jmp qword ptr [rsi]; 
0x0000000000096bd2: add ch, bl; cmpsb byte ptr [rsi], byte ptr [rdi]; mov rcx, rax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x00000000000c6132: add ch, bl; cmpsb byte ptr [rsi], byte ptr [rdi]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000000368ff: add ch, bl; fpatan; ret; 
0x000000000019985c: add ch, bl; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001882c9: add ch, bl; jmp rsp; 
0x00000000000c6072: add ch, bl; xchg eax, esi; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000017695c: add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x000000000017695d: add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x00000000000529ac: add ch, byte ptr [rbx]; add byte ptr [rax], al; add cl, ch; sar ecx, -1; jmp qword ptr [rsi + 0x2e]; 
0x00000000001a6724: add ch, byte ptr [rcx - 0xc]; jmp qword ptr [rdx]; 
0x00000000000b22fa: add ch, byte ptr [rcx]; ret 0x48d; 
0x0000000000187630: add ch, byte ptr [rdi - 0x516d0004]; cld; jmp qword ptr [rdx]; 
0x00000000001ac794: add ch, byte ptr [rsi - 0xb]; jmp qword ptr [rdx]; 
0x000000000010be38: add ch, cl; ret 0xf807; 
0x0000000000058c9f: add ch, cl; ret; 
0x00000000000c49da: add ch, cl; xchg eax, edx; idiv edi; push rsi; ret; 
0x000000000018cb07: add cl, ah; mov bh, al; ljmp ptr [rsp - 0x74fbfffe]; clc; jmp rsp; 
0x0000000000193447: add cl, ah; ret; 
0x00000000000a1af8: add cl, al; call 0xfea9e0b; movsxd rsi, dword ptr [rdx + rax*4]; add rdx, rsi; jmp rdx; 
0x00000000000a1b38: add cl, al; call 0xfea9e4b; movsxd rsi, dword ptr [rcx + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000007129f: add cl, al; out dx, al; add al, 0x83; out 1, al; mov eax, esi; ret; 
0x0000000000022636: add cl, al; out dx, al; or byte ptr [rbx - 0x3ebef020], al; call 0xffffffffc51faf48; adc eax, 0xd89003a; ret; 
0x000000000011ffea: add cl, bh; add byte ptr [rax], al; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x00000000001898cf: add cl, bh; push rax; out dx, eax; dec dword ptr [rax + 0x51180001]; out dx, eax; call rsp; 
0x00000000000f9ec7: add cl, bl; ret 0xcad9; 
0x000000000019d190: add cl, bl; stc; call qword ptr [rax]; 
0x00000000000f7eb5: add cl, byte ptr [r8 + 0x39]; ret 0xf48; 
0x0000000000099b5c: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; ret; 
0x00000000000e3f09: add cl, byte ptr [rax + 0x16893847]; mov qword ptr [rsi + 8], rcx; mov qword ptr [rsi + 0x10], r8; ret; 
0x00000000000a3915: add cl, byte ptr [rax + 0x29]; ret 0x6fe9; 
0x00000000000a3889: add cl, byte ptr [rax + 0x29]; ret 0x8548; 
0x00000000000b0321: add cl, byte ptr [rax + 0x29]; ret 0x8948; 
0x00000000000a38fd: add cl, byte ptr [rax + 0x29]; ret 0x8aeb; 
0x000000000003e87f: add cl, byte ptr [rax + 0x29]; ret 0x8d48; 
0x00000000000759af: add cl, byte ptr [rax + 0x2b]; adc byte ptr [rcx + 0x5c], al; pop r13; pop r14; sar rax, 2; ret; 
0x0000000000117ad3: add cl, byte ptr [rax + 0x39]; rcr dword ptr [rcx], -0x40; ret; 
0x0000000000073e9a: add cl, byte ptr [rax + 0x39]; ret 0x5877; 
0x0000000000085496: add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000061999: add cl, byte ptr [rax + 0x39]; ret 0x8f0f; 
0x00000000000f7eb6: add cl, byte ptr [rax + 0x39]; ret 0xf48; 
0x000000000007709d: add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000116d53: add cl, byte ptr [rax + 0xf]; rol dword ptr [rax], 1; ror byte ptr [rax - 0x73], 5; pop rdi; ret 0x2a; 
0x000000000012a023: add cl, byte ptr [rax + 0xf]; rol dword ptr [rax], 1; ror byte ptr [rax - 0x7d], 0xda; add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0x4812; 
0x0000000000115920: add cl, byte ptr [rax + 0xf]; rol dword ptr [rax], 1; ror byte ptr [rax - 0x7d], 0xda; add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0xe801; 
0x000000000002c6f7: add cl, byte ptr [rax + 1]; ret 0x3b48; 
0x0000000000050434: add cl, byte ptr [rax + 1]; ret 0x8348; 
0x0000000000081699: add cl, byte ptr [rax + 9]; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 - 0x7d], cl; sub r9, qword ptr [rax]; add ebx, ebp; ret; 
0x000000000004ecac: add cl, byte ptr [rax - 0x73]; add eax, 0x127f4c; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004e831: add cl, byte ptr [rax - 0x73]; add eax, 0x128647; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000004e78e: add cl, byte ptr [rax - 0x73]; add eax, 0x1286ea; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004deb7: add cl, byte ptr [rax - 0x73]; add eax, 0x128e41; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004dd8b: add cl, byte ptr [rax - 0x73]; add eax, 0x128fed; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x000000000004d531: add cl, byte ptr [rax - 0x73]; add eax, 0x129947; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004ba98: add cl, byte ptr [rax - 0x73]; add eax, 0x12b3e0; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x0000000000108a04: add cl, byte ptr [rax - 0x73]; add eax, 0x47274; lea rdx, qword ptr [rip + 0x3f14d]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000008c444: add cl, byte ptr [rax - 0x73]; add eax, 0xc3844; lea rdx, qword ptr [rip + 0xbb71d]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000007fe51: add cl, byte ptr [rax - 0x73]; push rsp; ret; 
0x000000000015c935: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, qword ptr [rdx + 0xc]; ret; 
0x00000000001585a5: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000001584d5: add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000102085: add cl, byte ptr [rax - 0x75]; push rsp; and al, 0x18; mov rsi, qword ptr [rsp + 8]; call rax; 
0x0000000000099b5d: add cl, byte ptr [rax - 0x76b7fdbe]; clc; ret; 
0x00000000000967d7: add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000009467d: add cl, byte ptr [rax - 0x77]; fimul dword ptr [rdi]; test dh, al; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000187138: add cl, byte ptr [rax - 0x786d0004]; cld; jmp qword ptr [rdx]; 
0x000000000007c582: add cl, byte ptr [rax - 0x7b]; sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x00000000000f38c2: add cl, byte ptr [rax - 0x7b]; sal byte ptr [rbx + rcx + 0x48], 0x83; ret 0x4808; 
0x00000000000c606b: add cl, byte ptr [rax - 0x7d]; mov dword ptr [rcx], 0xeb02c883; xchg eax, esi; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000000c612b: add cl, byte ptr [rax - 0x7d]; mov dword ptr [rcx], 0xeb02ca83; cmpsb byte ptr [rsi], byte ptr [rdi]; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000027cdb: add cl, byte ptr [rax - 0x7d]; ret 0x4802; 
0x0000000000086c80: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x00000000000ae40d: add cl, byte ptr [rax - 0x7d]; ret 0x491e; 
0x00000000000c3b30: add cl, byte ptr [rax - 0x7d]; ret 0x8301; 
0x000000000001fc6b: add cl, byte ptr [rax - 0x7d]; ret 0x8304; 
0x00000000000c360d: add cl, byte ptr [rax - 0x7d]; ret 0x8401; 
0x000000000012e299: add cl, byte ptr [rax - 0x7d]; ret 0xb804; 
0x000000000006cca9: add cl, byte ptr [rax - 0x7d]; ret 0xe902; 
0x0000000000086ce3: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x000000000012e2c5: add cl, byte ptr [rax - 0x7d]; ret 0xf04; 
0x00000000001232bb: add cl, byte ptr [rax - 9]; fiadd dword ptr [rbx - 0x7bf0fc1e]; ret 1; 
0x000000000011adc9: add cl, byte ptr [rax]; add al, ch; out dx, eax; outsb dx, byte ptr [rsi]; cli; jmp qword ptr [rsi - 0x77]; 
0x000000000004977c: add cl, byte ptr [rbp + 0x39]; ret; 
0x000000000014cf72: add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000099bc8: add cl, byte ptr [rbx + 0x42890341]; add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x000000000015c8b5: add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000099c6c: add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000003e859: add cl, byte ptr [rcx + 0x29]; ret; 
0x00000000000a633c: add cl, byte ptr [rcx + 0x39]; ret; 
0x000000000005ec4c: add cl, byte ptr [rcx + rcx*4 - 0x16]; call qword ptr [rax + 0x38]; 
0x000000000005fa71: add cl, byte ptr [rcx + rcx*4 - 0x2e]; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x000000000011b208: add cl, byte ptr [rcx - 0x76b7bfbb]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000001252e2: add cl, byte ptr [rcx - 0x77]; ret 0xc148; 
0x000000000009d668: add cl, byte ptr [rcx - 0x7d]; call 0x7f971e73; add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x00000000000d7c0a: add cl, byte ptr [rcx - 0x7d]; ret 0x4510; 
0x0000000000047f00: add cl, byte ptr [rcx - 0x7d]; ret 0xe901; 
0x00000000000475f9: add cl, byte ptr [rcx - 0x7d]; ret 0xf01; 
0x00000000000cc6d4: add cl, byte ptr [rcx - 0xdf63]; inc dword ptr [rbp + 0x31]; rol byte ptr [rbx + 0xf4104f8], cl; xchg eax, esp; ret 0x8944; 
0x0000000000002bb8: add cl, byte ptr [rdi + 0x56c003e6]; call 0xfffffffff3f8f43c; ret; 
0x000000000002fd74: add cl, byte ptr [rdi]; mov bh, 0xc0; ret; 
0x00000000000d82c6: add cl, byte ptr [rdi]; mov es, word ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x00000000000d31e1: add cl, byte ptr [rdi]; test byte ptr [rcx], al; add eax, 0x438d0000; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000962de: add cl, byte ptr [rdi]; test byte ptr [rdi + 0xffffffd], bl; mov dh, 0x45; ret; 
0x0000000000075d5a: add cl, byte ptr [rdi]; test byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rbx - 0x7af0fe08], al; ret; 
0x0000000000021a15: add cl, byte ptr [rdi]; test byte ptr [rip + 0x5b000001], dl; pop rbp; pop r12; ret; 
0x000000000015e6c1: add cl, byte ptr [rdi]; test eax, ebx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000006d6a4: add cl, byte ptr [rdi]; xchg eax, ebp; ret 0x5389; 
0x00000000000cd91f: add cl, byte ptr [rdi]; xchg eax, ebp; ret; 
0x000000000013caab: add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000012dd47: add cl, byte ptr [rdi]; xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000099b5a: add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000015c873: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; lea eax, dword ptr [rdx + 4]; ret; 
0x0000000000099b88: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x0000000000099c0c: add cl, byte ptr [rdx + 0x42880841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000004b0: add cl, byte ptr [rdx]; add dword ptr [rax + rax*4], ecx; push rbx; add al, 4; ret 0x6080; 
0x0000000000050433: add cl, byte ptr es:[rax + 1]; ret 0x8348; 
0x00000000000d96fd: add cl, ch; cdq; idiv bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000045874: add cl, ch; cmp eax, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000022020: add cl, ch; ficom dword ptr [rsi + 0x2e66000c]; nop dword ptr [rax + rax]; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x00000000000446b0: add cl, ch; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000002e5e6: add cl, ch; mov ebp, 0x4cfffffc; mov edi, esi; mov ax, 3; syscall; 
0x000000000013cdcf: add cl, ch; mov ebx, edi; hlt; jmp qword ptr [rsi + 0x2e]; 
0x0000000000082def: add cl, ch; mov r9b, 0xff; jmp qword ptr [rsi + 0x66]; 
0x0000000000032ef1: add cl, ch; movsb byte ptr [rdi], byte ptr [rsi]; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000136a4f: add cl, ch; or esi, dword ptr [rbx - 5]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000058a3b: add cl, ch; push rdi; ret 0xffff; 
0x0000000000060a8f: add cl, ch; ret 0xffec; 
0x00000000000b7ea1: add cl, ch; ret 0xfff3; 
0x000000000010386f: add cl, ch; ret 0xfffd; 
0x00000000000c2d48: add cl, ch; ret 0xfffe; 
0x000000000002c344: add cl, ch; ret; 
0x00000000000529b0: add cl, ch; sar ecx, -1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000164b6c: add cl, ch; std; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000000ab250: add cl, ch; sti; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000003f9f9: add cl, ch; xor dl, 0xff; dec dword ptr [rax + 0x63]; ret 0x3ce9; 
0x000000000018d607: add cl, dh; and edi, edx; lcall ptr [rbp + rsi*4 + 0x24100002]; cli; jmp rsp; 
0x00000000001365d7: add cl, dh; jmp qword ptr [rsi + 0xf]; 
0x00000000001780a5: add cl, dh; jmp rax; 
0x0000000000178200: add dh, ah; int1; call qword ptr [rax]; 
0x0000000000046e13: add dh, al; add al, 0x10; add bl, dh; ret; 
0x000000000011a107: add dh, al; add al, byte ptr [rax]; pop rbx; ret; 
0x0000000000096bbf: add dh, al; add dword ptr [rax], eax; mov rcx, rdi; mov qword ptr [rdx], rcx; ret; 
0x000000000010d62a: add dh, al; add eax, 0x2b52fe; add ecx, ebp; ret; 
0x00000000001b6a83: add dh, al; add eax, 0x6b30000; add byte ptr [rax], al; fld dword ptr [rbx]; add byte ptr [rax], al; ret; 
0x00000000000d0b8f: add dh, al; or byte ptr [r8 + r15*4], r11b; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000d0b1f: add dh, al; or byte ptr [r9], r11b; mov eax, 1; ret; 
0x00000000001b18c1: add dh, bh; call qword ptr [rdi]; 
0x00000000001b18e1: add dh, bh; jmp qword ptr [rcx]; 
0x0000000000179c7b: add dh, bh; jmp rdi; 
0x0000000000170e27: add dh, bh; xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x000000000014d123: add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000036ee7: add dh, bl; ret; 
0x0000000000186634: add dh, bl; sti; jmp rax; 
0x00000000000a0c9b: add dh, byte ptr [rax]; in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x0000000000083453: add dh, byte ptr [rbp + 0x1a]; test byte ptr [rdi + rdx - 8], 1; lea rcx, qword ptr [rdx - 8]; cmovne rax, rcx; add rsp, 8; ret; 
0x000000000012e408: add dh, byte ptr [rbp + rbp + 0x48]; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000013340d: add dh, byte ptr [rbp + rdx - 0x7d]; cli; add al, 0xf; test byte ptr [rcx - 0x7d000000], bl; ret 0x8380; 
0x0000000000126832: add dh, byte ptr [rbx + rcx - 0x48]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000001931cd: add dh, byte ptr [rcx + 0xa]; ret; 
0x000000000012295a: add dh, byte ptr [rcx - 0x3f7b0000]; setne al; add rsp, 8; movzx eax, al; ret; 
0x00000000000dbb1d: add dh, byte ptr [rcx]; imul al; mov ecx, dword ptr [rcx]; sti; call rcx; 
0x00000000000fad62: add dh, byte ptr [rcx]; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a3895: add dh, byte ptr [rcx]; test byte ptr [rax - 0x77], 0xdf; call 0x8c4b0; lea rax, qword ptr [rbx - 4]; pop rbx; ret; 
0x000000000005dba4: add dh, byte ptr [rsi]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000005dbde: add dh, byte ptr [rsi]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x0000000000126831: add dh, byte ptr ds:[rbx + rcx - 0x48]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000001a1c90: add dh, ch; int1; call qword ptr [rdx]; 
0x00000000001867ac: add dh, cl; sti; call qword ptr [rax - 0x31]; 
0x00000000001ac7f9: add dh, dh; jmp qword ptr [rbx + 1]; 
0x0000000000179c73: add dh, dh; ljmp ptr [rcx - 0x3c000500]; add dh, bh; jmp rdi; 
0x00000000001356b2: add dh, dh; ret 0x7402; 
0x000000000008c628: add dh, dh; ret 0x7404; 
0x000000000006e25f: add dh, dh; ret 0x7420; 
0x00000000001621a7: add dh, dh; ret 0x7501; 
0x00000000001621b4: add dh, dh; ret 0x7502; 
0x00000000001621c1: add dh, dh; ret 0x7504; 
0x0000000000072ea6: add dh, dh; ret 0x7508; 
0x0000000000162179: add dh, dh; ret 0x7510; 
0x0000000000162186: add dh, dh; ret 0x7520; 
0x00000000000eb65f: add dh, dh; ret 0x7540; 
0x00000000000df851: add dh, dh; ret 0xf10; 
0x0000000000098362: add dh, dh; ret 0xf20; 
0x000000000004f675: add dh, dh; ret 0xf3f; 
0x000000000009836b: add dh, dh; ret 0xf40; 
0x00000000000819dc: add dh, dh; ret; 
0x00000000001aa6f0: add dh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000000b0079: add dil, r15b; ret; 
0x0000000000001587: add dl, al; add eax, 0; add byte ptr [rax], al; ret; 
0x000000000018c48f: add dl, al; sbb bh, al; jmp rsp; 
0x0000000000179c6f: add dl, bh; call qword ptr [rcx - 0x56000a00]; add bl, bh; inc ebx; add dh, bh; jmp rdi; 
0x0000000000186978: add dl, bh; sti; call qword ptr [rax - 5]; 
0x000000000000a9bf: add dl, bl; or al, 0; add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; ret 0xb; 
0x0000000000174d3a: add dl, byte ptr [rax + 0x38]; xor esi, dword ptr [rcx]; xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x000000000019f999: add dl, byte ptr [rax + 0x41100e0a]; ret; 
0x00000000001aef31: add dl, byte ptr [rbp + 0xa]; ret; 
0x00000000001afe36: add dl, byte ptr [rsi + 0x41380e0a]; ret; 
0x00000000001a6ca0: add dl, ch; hlt; call qword ptr [rax]; 
0x0000000000189b67: add dl, ch; shr bh, 1; jmp rsp; 
0x000000000003d027: add dl, dh; movups xmm0, xmmword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003d1b1: add dl, dh; movups xmmword ptr [rbp], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000108e48: add dword ptr [r13 - 0x6c], esi; nop dword ptr [rax]; mov rax, rdi; pop rbx; ret; 
0x000000000019d27c: add dword ptr [r14], 3; mov byte ptr [rcx], al; ret; 
0x00000000000f31a6: add dword ptr [r15], r9d; mov esi, 0x75d285d1; in eax, 0x49; mov ecx, esi; mov byte ptr [r9 - 1], 0; ret; 
0x0000000000070b33: add dword ptr [r8 - 0x77], ecx; sub byte ptr [rax - 0x78], al; cmp dword ptr [rax + 0xf], eax; mov dh, 0xc7; ret; 
0x000000000007361f: add dword ptr [r8 - 0x77], ecx; sub byte ptr [rax - 0x78], r8b; cmp dword ptr [rax + 0xf], eax; mov dh, 0xc7; ret; 
0x0000000000047e3e: add dword ptr [r8 - 0x7d], ecx; ret; 
0x0000000000025970: add dword ptr [r8 - 0x7d], r9d; ret 0x4d02; 
0x0000000000108ebf: add dword ptr [r8], eax; mov rax, rdi; pop rbx; ret; 
0x00000000001a24ad: add dword ptr [r8], eax; push rax; sbb edx, esi; call qword ptr [rdx]; 
0x00000000001899ed: add dword ptr [r8], eax; xor al, 0xa7; out dx, eax; call rsp; 
0x00000000001a2915: add dword ptr [r8], r8d; mov sil, dl; jmp qword ptr [rbp]; 
0x00000000000d1f74: add dword ptr [r9 + 0x39], r8d; ret; 
0x000000000002550e: add dword ptr [r9 + 0x39a57a05], ecx; add al, ch; add eax, 0xe9fffff4; ret; 
0x00000000000a17cf: add dword ptr [r9 + 0x5c], eax; ret; 
0x00000000000af0f2: add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000285e4: add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4806; 
0x00000000000d0b68: add dword ptr [rax + 0x1b807], ecx; add byte ptr [rax], al; ret; 
0x000000000015c821: add dword ptr [rax + 0x28d4802], ecx; ret; 
0x000000000004fd43: add dword ptr [rax + 0x29], ecx; ret 0x8944; 
0x00000000000f9663: add dword ptr [rax + 0x2c], ecx; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000c2c0e: add dword ptr [rax + 0x30c48348], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c0edc: add dword ptr [rax + 0x38], edi; syscall; 
0x0000000000047059: add dword ptr [rax + 0x39], ecx; fdiv dword ptr [rbp - 0xf]; pop rbx; ret; 
0x00000000000965d1: add dword ptr [rax + 0x39], ecx; ret 0x1a75; 
0x000000000009335e: add dword ptr [rax + 0x39], ecx; ret 0x860f; 
0x000000000009319d: add dword ptr [rax + 0x39], ecx; ret 0x870f; 
0x00000000000394dd: add dword ptr [rax + 0x39], ecx; ret 0x8948; 
0x00000000000ae962: add dword ptr [rax + 0x39], ecx; ret 0xe877; 
0x000000000003d82f: add dword ptr [rax + 0x39], ecx; ret 0xeb75; 
0x00000000000ad245: add dword ptr [rax + 0x39], ecx; ret 0xed77; 
0x0000000000098060: add dword ptr [rax + 0x39], ecx; ret 0xf077; 
0x000000000002847e: add dword ptr [rax + 0x39], ecx; ret; 
0x00000000000381cb: add dword ptr [rax + 0x39], ecx; sal byte ptr [rbp - 0x11], 1; xor eax, eax; ret; 
0x00000000000a078f: add dword ptr [rax + 0x6349000d], eax; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000123851: add dword ptr [rax + 0x63], ecx; ret 0xd285; 
0x0000000000041dd3: add dword ptr [rax + 0xf], ecx; mov esi, 0x6ce90168; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000044733: add dword ptr [rax + 0xf], ecx; mov esi, 0xdce90168; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000012e778: add dword ptr [rax + 0xf], ecx; ror byte ptr [rax - 0x7d], 1; in al, dx; or byte ptr [rax - 0x77], 0xd0; pop rbx; ret; 
0x000000000008b9d2: add dword ptr [rax + 0xf], ecx; ror dword ptr [r8 - 0x77], 1; adc eax, 0x335316; add rsp, 0x100; ret; 
0x000000000005baf2: add dword ptr [rax + 1], ecx; ret 0x148; 
0x000000000005a172: add dword ptr [rax + 1], ecx; ret; 
0x0000000000035496: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x00000000000d0ae3: add dword ptr [rax + 1], edi; ret; 
0x00000000000004b2: add dword ptr [rax + rax*4], ecx; push rbx; add al, 4; ret 0x6080; 
0x00000000000c60ae: add dword ptr [rax + rax*8 - 0x3fce1d8b], eax; cmp edx, 1; sete al; ret; 
0x00000000001465d6: add dword ptr [rax + rax], eax; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000f0826: add dword ptr [rax + rax], edx; mov rdi, rbx; mov eax, ebp; mov r13d, dword ptr fs:[r12]; syscall; 
0x00000000000f093e: add dword ptr [rax + rax], edx; movsxd rdi, edi; mov eax, ecx; syscall; 
0x0000000000031143: add dword ptr [rax - 0x6bf0d006], eax; ret 0xb60f; 
0x00000000000b4c5b: add dword ptr [rax - 0x7288aa06], eax; lea rdi, qword ptr [rip + 0xc402c]; movzx edx, dl; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000f7eb2: add dword ptr [rax - 0x73], ecx; add cl, byte ptr [r8 + 0x39]; ret 0xf48; 
0x000000000015a2fa: add dword ptr [rax - 0x73], ecx; add qword ptr [rdi], rcx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x0000000000117ace: add dword ptr [rax - 0x73], ecx; add r8b, byte ptr [rdx]; cmp rcx, rax; sbb eax, eax; ret; 
0x000000000008345a: add dword ptr [rax - 0x73], ecx; clc; cmovne rax, rcx; add rsp, 8; ret; 
0x00000000000a545f: add dword ptr [rax - 0x73], ecx; insb byte ptr [rdi], dx; ror byte ptr [rbp - 0x7bf0febe], 1; ret 0; 
0x0000000000086a9b: add dword ptr [rax - 0x75], ecx; outsb dx, byte ptr [rsi]; or byte ptr [rbp - 0x2a], dh; mov rdi, rsi; call qword ptr [rbx + 0x40]; 
0x000000000006de84: add dword ptr [rax - 0x75], ecx; sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x0000000000099b36: add dword ptr [rax - 0x776b7fe], ecx; ret; 
0x000000000015c932: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, qword ptr [rdx + 0xc]; ret; 
0x00000000001585a2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000001584d2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000158482: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000015c8b2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000158592: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000967ae: add dword ptr [rax - 0x77], ecx; clc; ret; 
0x0000000000056dc7: add dword ptr [rax - 0x77], ecx; dec byte ptr [rax - 0x7d]; ret 0xf01; 
0x00000000000ba06b: add dword ptr [rax - 0x77], ecx; fmul dword ptr [rbx - 0x7cb7fbc0]; ret; 
0x00000000000b8191: add dword ptr [rax - 0x77], ecx; fmul dword ptr [rdi]; mov dh, 0x40; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000011f56c: add dword ptr [rax - 0x77], ecx; out dx, eax; mov edx, dword ptr [rbx + 0x22c0]; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000000869de: add dword ptr [rax - 0x77], ecx; push rax; or byte ptr [rbp + 0x23], dh; mov rdi, r13; call qword ptr [rbx + 0x40]; 
0x000000000007b32b: add dword ptr [rax - 0x77], ecx; push rbx; or byte ptr [rdi], cl; mov dh, 0; pop rbx; ret; 
0x000000000004f9a1: add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x1a817], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000052aa1: add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x73617], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000000526e9: add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0xac517], ch; jmp qword ptr [rsi + 0x2e]; 
0x000000000007364d: add dword ptr [rax - 0x77], ecx; push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x00000000000c44c0: add dword ptr [rax - 0x77], ecx; ret 0x97e9; 
0x00000000000c4730: add dword ptr [rax - 0x77], ecx; ret 0x9aeb; 
0x000000000002c596: add dword ptr [rax - 0x77], ecx; ret 0xf41; 
0x0000000000088771: add dword ptr [rax - 0x77], ecx; ret; 
0x0000000000070b34: add dword ptr [rax - 0x77], ecx; sub byte ptr [rax - 0x78], al; cmp dword ptr [rax + 0xf], eax; mov dh, 0xc7; ret; 
0x0000000000073620: add dword ptr [rax - 0x77], ecx; sub byte ptr [rax - 0x78], r8b; cmp dword ptr [rax + 0xf], eax; mov dh, 0xc7; ret; 
0x000000000011128f: add dword ptr [rax - 0x77], ecx; xor byte ptr [r8 + 1], dil; pop rbx; ret; 
0x0000000000082dae: add dword ptr [rax - 0x7b], ecx; ret 0x2c75; 
0x0000000000082534: add dword ptr [rax - 0x7b], ecx; ret 0x7675; 
0x000000000007f400: add dword ptr [rax - 0x7b], ecx; ret 0x850f; 
0x00000000000d1b6d: add dword ptr [rax - 0x7cb7e9f4], ecx; ret 0x4401; 
0x0000000000097528: add dword ptr [rax - 0x7d], ecx; call 0xfffffffff3faea31; ret; 
0x0000000000110ce9: add dword ptr [rax - 0x7d], ecx; cli; add al, 0xf; xchg eax, esi; ret; 
0x000000000015e43a: add dword ptr [rax - 0x7d], ecx; fdivr st(7); ret; 
0x000000000009c77b: add dword ptr [rax - 0x7d], ecx; fdivr st(7); xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000000e4bbc: add dword ptr [rax - 0x7d], ecx; jns 0xe4bb9; add byte ptr [rsp + rax - 0x77], dh; ret 0xeeeb; 
0x0000000000097378: add dword ptr [rax - 0x7d], ecx; out dx, al; add dword ptr [rbp - 0xf], esi; xor eax, eax; ret; 
0x0000000000113b82: add dword ptr [rax - 0x7d], ecx; ret 0x3904; 
0x000000000004796c: add dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x00000000000ca26a: add dword ptr [rax - 0x7d], ecx; ret 0x4408; 
0x000000000003a9c9: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x00000000000936ab: add dword ptr [rax - 0x7d], ecx; ret 0x4901; 
0x000000000003aeff: add dword ptr [rax - 0x7d], ecx; ret 0x4c01; 
0x00000000000bca09: add dword ptr [rax - 0x7d], ecx; ret 0x4c48; 
0x0000000000025971: add dword ptr [rax - 0x7d], ecx; ret 0x4d02; 
0x00000000000a63e7: add dword ptr [rax - 0x7d], ecx; ret 0x7901; 
0x00000000000dcd1f: add dword ptr [rax - 0x7d], ecx; ret 0x8001; 
0x000000000002ea85: add dword ptr [rax - 0x7d], ecx; ret 0x8310; 
0x00000000000c379c: add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000006cbbc: add dword ptr [rax - 0x7d], ecx; ret 0x8502; 
0x000000000006d5bb: add dword ptr [rax - 0x7d], ecx; ret 0x8508; 
0x0000000000022832: add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x0000000000022852: add dword ptr [rax - 0x7d], ecx; ret 0xc601; 
0x00000000000ef86e: add dword ptr [rax - 0x7d], ecx; ret 0xe801; 
0x0000000000054f33: add dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x0000000000022fda: add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000d3c64: add dword ptr [rax - 0x7d], ecx; rol byte ptr [rcx], 0x83; ret 0x4001; 
0x00000000000d9a55: add dword ptr [rax - 0x7d], r9d; ret; 
0x00000000000942fb: add dword ptr [rax - 1], esi; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000000f3e0: add dword ptr [rax], 0; add byte ptr [rax], al; ret 0x34; 
0x0000000000108089: add dword ptr [rax], 0x1ba0000; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x00000000001962c5: add dword ptr [rax], 0xeda8c800; jmp rbx; 
0x0000000000196335: add dword ptr [rax], 0xeda94800; call rcx; 
0x00000000001281f2: add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x00000000000fcac4: add dword ptr [rax], 1; ret; 
0x000000000018af0e: add dword ptr [rax], eax; adc al, 0x41; cmc; inc dword ptr [rbx + rax*8 + 0x49940001]; cmc; call rsp; 
0x000000000018af7e: add dword ptr [rax], eax; adc al, 0xbf; cmc; call qword ptr [rdi + rax*8 - 0x405bffff]; cmc; call rsp; 
0x000000000019e71e: add dword ptr [rax], eax; adc byte ptr [rbp - 0x10], dl; call qword ptr [rsi]; 
0x00000000001a4c6e: add dword ptr [rax], eax; adc byte ptr [rbp - 0xc], ah; call qword ptr [rbp]; 
0x00000000001a4fae: add dword ptr [rax], eax; adc byte ptr [rbp - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001a7c4e: add dword ptr [rax], eax; adc byte ptr [rdi], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001a7e8e: add dword ptr [rax], eax; adc byte ptr [rdx], dh; cmc; call qword ptr [rsi]; 
0x00000000001a692e: add dword ptr [rax], eax; adc ch, bl; hlt; call qword ptr [rdx]; 
0x00000000001aa5fe: add dword ptr [rax], eax; adc ch, dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a110e: add dword ptr [rax], eax; adc dh, 0xf1; call rsp; 
0x000000000018df96: add dword ptr [rax], eax; add al, 1; cld; call rsp; 
0x00000000000eaf22: add dword ptr [rax], eax; add al, ch; hlt; jmp qword ptr [rsi + 0xf]; 
0x00000000001348b9: add dword ptr [rax], eax; add al, ch; lahf; mov bl, 0xef; jmp qword ptr [rsi + 0x66]; 
0x00000000000b39b4: add dword ptr [rax], eax; add al, ch; movsb byte ptr [rdi], byte ptr [rsi]; ret 0xfff7; 
0x00000000001232a2: add dword ptr [rax], eax; add al, ch; out 0xc1, al; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000000aa3ff: add dword ptr [rax], eax; add al, ch; pop rcx; pop rax; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000002ed96: add dword ptr [rax], eax; add al, ch; ret 0xe; 
0x00000000000438ba: add dword ptr [rax], eax; add al, ch; sahf; ret; 
0x00000000000a565f: add dword ptr [rax], eax; add al, ch; stc; movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000000c361b: add dword ptr [rax], eax; add bh, dh; ret; 
0x000000000006e35a: add dword ptr [rax], eax; add bl, dh; ret; 
0x00000000000b100c: add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret; 
0x000000000005e638: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret 0x3948; 
0x00000000000d6304: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret 0x8b48; 
0x000000000008a703: add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000012f1f8: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000000a70c6: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x00000000000f2cf4: add dword ptr [rax], eax; add byte ptr [rax - 0x3f7cb7f0], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000c42e6: add dword ptr [rax], eax; add byte ptr [rax - 0x6bf08406], al; ret 0xb60f; 
0x000000000003d11d: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x386c6f; add rsp, 8; ret; 
0x000000000008356b: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0xf4aab; movsxd rdx, dword ptr [rax + rdi*4]; add rax, rdx; jmp rax; 
0x00000000000c6449: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; cmp eax, 0xb3399; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000a1a5d: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; xor eax, 0xd6e59; movsxd rax, dword ptr [rsi + rdi*4]; add rsi, rax; jmp rsi; 
0x00000000000e23dd: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; adc byte ptr [r8 + 0x39], cl; ret; 
0x0000000000133851: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x28c035; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x00000000001337d4: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x28c0b2; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x000000000013375e: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x28c128; call qword ptr [rax]; 
0x000000000008094e: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x33d460; mov rdi, rcx; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x0000000000126a84: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 0x58; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000003d075: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x0000000000127872: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; jo 0x1278c2; mov esi, dword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000d804a: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x00000000000797bf: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x00000000000e54cd: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000094305: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x000000000002e9ed: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x0000000000092849: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x00000000000e2393: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xf7e9; 
0x00000000000bc857: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000002ad17: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ror dword ptr [rax - 0x77], 1; fimul word ptr [rax - 0x77]; ret 0x8948; 
0x0000000000074e78: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rsi + rsi*4 - 0xa]; ret 0x7508; 
0x000000000006e4c4: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x000000000015e8bd: add dword ptr [rax], eax; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000082afa: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000000f2991: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x3c01; 
0x000000000002691f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x00000000001085cd: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000000e6f93: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x00000000000d3dc0: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x0000000000137d6d: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000007d47a: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4d07; 
0x000000000008b140: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000013e20f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000137cc1: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000005c09a: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002bcd4: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x0000000000095dc6: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; stc; dec dword ptr [rcx - 0x77]; ret 0x840f; 
0x0000000000073ceb: add dword ptr [rax], eax; add byte ptr [rax - 0x7f], cl; ret; 
0x0000000000170e2a: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x000000000016ffda: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x000000000016fdfa: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x0000000000170592: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x000000000016fe02: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000136310: add dword ptr [rax], eax; add byte ptr [rax], al; add rdi, 0x1c; mov al, 0xca; mov esi, 0x81; syscall; 
0x00000000000f903a: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x000000000012d442: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000048a61: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f262f: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000cb1d2: add dword ptr [rax], eax; add byte ptr [rax], al; call 0xc9d70; add rsp, 0x18; ret; 
0x00000000000e4517: add dword ptr [rax], eax; add byte ptr [rax], al; call 0xe4530; add rsp, 0x18; ret; 
0x000000000012b1b3: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000012b1b3: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x000000000011f4ca: add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x00000000000f5c71: add dword ptr [rax], eax; add byte ptr [rax], al; call rbx; 
0x00000000001296b5: add dword ptr [rax], eax; add byte ptr [rax], al; cmovne eax, edx; sub rsp, -0x80; pop rbx; ret; 
0x000000000004baad: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x00000000000a3f66: add dword ptr [rax], eax; add byte ptr [rax], al; lea r9, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000020c6c: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [r9 + rcx*4], esi; inc dword ptr [rdi + 4]; ret; 
0x000000000005ef52: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x1118], 0; jmp rax; 
0x000000000005eff0: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x1118], 1; jmp rax; 
0x000000000005f0f7: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x1128], 0; jmp rax; 
0x000000000004ec60: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004ed70: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004e988: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000002e1f6: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rbp - 0xd8], 1; mov rdi, r14; mov eax, 3; syscall; 
0x0000000000039ce2: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], ecx; ret; 
0x000000000012b1ab: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0x18], 1; call qword ptr [rax + 0x18]; 
0x000000000012b1df: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x000000000012b1df: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x000000000010808e: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x00000000000c2bf3: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x0000000000123bcb: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000085d98: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, ebx; pop rbx; ret; 
0x00000000000c1096: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, dword ptr [rcx + 0x28]; mov eax, ebx; mov esi, 0x81; syscall; 
0x00000000000f0a81: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x5409; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000f0a3d: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x5409; movsxd rdi, edi; mov eax, 0x10; syscall; 
0x00000000000f5e59: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 1; mov rdi, r12; call rbx; 
0x00000000000f60d7: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 2; mov rdi, r12; call rbx; 
0x00000000001276ca: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rcx + 8], rax; mov qword ptr [rcx + 0x10], rdx; mov eax, 1; ret; 
0x00000000001276e9: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000120d2a: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000012b4bf: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x00000000000f5e5e: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x000000000012c16b: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x00000000000f5d2a: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x00000000000f5ca2: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x000000000002e200: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r14; mov eax, 3; syscall; 
0x000000000011fcde: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r15; call qword ptr [rax]; 
0x00000000000f60e8: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbp; call rbx; 
0x00000000001215c2: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000006cdf0: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x000000000003d362: add dword ptr [rax], eax; add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x00000000000739d1: add dword ptr [rax], eax; add byte ptr [rax], al; pop r12; ret; 
0x000000000005386e: add dword ptr [rax], eax; add byte ptr [rax], al; pop r13; ret; 
0x00000000000537a0: add dword ptr [rax], eax; add byte ptr [rax], al; pop r14; ret; 
0x0000000000074f0c: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000101c6e: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000f8fd3: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x000000000002c051: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000002fc0e: add dword ptr [rax], eax; add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003778e: add dword ptr [rax], eax; add byte ptr [rax], al; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000eb70a: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000005dcae: add dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000cb14d: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; call 0xcb0b0; add rsp, 0x18; ret; 
0x00000000000e3c8f: add dword ptr [rax], eax; add byte ptr [rax], al; xor r8d, r8d; call 0xe32d0; add rsp, 0x18; ret; 
0x00000000000f1aa3: add dword ptr [rax], eax; add byte ptr [rbp + 0x14490fc0], al; and al, 0x48; add esp, 0x18; mov eax, edx; ret; 
0x0000000000133a7c: add dword ptr [rax], eax; add byte ptr [rbp + 0x482d78c0], al; mov eax, dword ptr [rsp]; add rsp, 0x10; pop rbx; ret; 
0x000000000011065c: add dword ptr [rax], eax; add byte ptr [rbp + rcx*4 + 5], cl; ret 0x2b27; 
0x000000000010e60c: add dword ptr [rax], eax; add byte ptr [rbp + rcx*4 + 5], cl; ret 0x2b44; 
0x000000000011afab: add dword ptr [rax], eax; add byte ptr [rbp - 0x47e78701], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000d98b6: add dword ptr [rax], eax; add byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x0000000000070664: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; mov eax, edx; pop r12; ret; 
0x00000000000eb2e4: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000021a19: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000da19d: add dword ptr [rax], eax; add byte ptr [rbx + rcx*4 + 0x78], cl; or byte ptr [rax + 0x63], cl; ret 0xc148; 
0x00000000000efa57: add dword ptr [rax], eax; add byte ptr [rbx - 0x6117c385], cl; ret; 
0x0000000000075d5e: add dword ptr [rax], eax; add byte ptr [rbx - 0x7af0fe08], al; ret; 
0x000000000007d471: add dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fe1f], al; stosd dword ptr [rdi], eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4d07; 
0x00000000001a535e: add dword ptr [rax], eax; add byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x00000000001a824e: add dword ptr [rax], eax; add byte ptr [rbx], bh; cmc; jmp qword ptr [rcx]; 
0x00000000001a790e: add dword ptr [rax], eax; add byte ptr [rbx], ch; cmc; jmp qword ptr [rcx]; 
0x00000000000542a4: add dword ptr [rax], eax; add byte ptr [rcx + 0x1b802], cl; add byte ptr [rax], al; ret; 
0x0000000000045b1f: add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret 0x840f; 
0x00000000000323cf: add dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; cld; mov eax, 3; syscall; 
0x00000000000be6c7: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 0x18; ret; 
0x0000000000079035: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; call qword ptr [rax + 0x40]; 
0x00000000000852ff: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; call rax; 
0x000000000008550f: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rdi, r15; call rax; 
0x0000000000085091: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0xa], cl; call rax; 
0x000000000011f47c: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; cmp al, 0x24; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000012c424: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; sbb byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rbx + rcx*4 + 0x24], cl; ret 0x854d; 
0x0000000000094684: add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000024a4c: add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000012f78d: add dword ptr [rax], eax; add byte ptr [rcx], al; ret 0x894c; 
0x00000000000b24c3: add dword ptr [rax], eax; add byte ptr [rcx], bh; ror dword ptr [rdi], 1; xchg eax, esp; ret; 
0x00000000000b718e: add dword ptr [rax], eax; add byte ptr [rcx], ch; ret; 
0x00000000000e1898: add dword ptr [rax], eax; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000008aa60: add dword ptr [rax], eax; add byte ptr [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x0000000000047135: add dword ptr [rax], eax; add byte ptr [rcx], dh; sar byte ptr [rdi + 2], cl; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000047475: add dword ptr [rax], eax; add byte ptr [rdi + 2], bh; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000df85d: add dword ptr [rax], eax; add byte ptr [rdi], cl; xchg eax, esp; ret 0x3d; 
0x0000000000102082: add dword ptr [rax], eax; add byte ptr [rdx], al; mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x000000000000a1e1: add dword ptr [rax], eax; add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; ret 0x10; 
0x0000000000099abf: add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000096e8a: add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000746fb: add dword ptr [rax], eax; add byte ptr [rsi - 0x70], ah; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000074f9c: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000074dbc: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000074674: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000001ac5ae: add dword ptr [rax], eax; add ch, bh; cmc; jmp rsp; 
0x000000000013421b: add dword ptr [rax], eax; add cl, ch; ret 0xfffe; 
0x00000000001a1c8e: add dword ptr [rax], eax; add dh, ch; int1; call qword ptr [rdx]; 
0x00000000001621a5: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x00000000001621b2: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x00000000001621bf: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x0000000000162177: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000162184: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000162191: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x0000000000134384: add dword ptr [rax], eax; add dh, dh; ret; 
0x00000000001aa6ee: add dword ptr [rax], eax; add dh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a6c9e: add dword ptr [rax], eax; add dl, ch; hlt; call qword ptr [rax]; 
0x000000000003d025: add dword ptr [rax], eax; add dl, dh; movups xmm0, xmmword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f0aa4: add dword ptr [rax], eax; add rsp, 0x10; mov eax, ebx; pop rbx; ret; 
0x00000000000e4f0b: add dword ptr [rax], eax; add rsp, 0x18; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000f05a1: add dword ptr [rax], eax; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x0000000000054470: add dword ptr [rax], eax; add rsp, 0xd8; ret; 
0x000000000018aefe: add dword ptr [rax], eax; and al, 0x35; cmc; dec esp; ret 1; 
0x000000000018acfe: add dword ptr [rax], eax; and al, 0x3d; hlt; jmp rsp; 
0x000000000018a1c6: add dword ptr [rax], eax; and al, 0x87; int1; jmp rsp; 
0x00000000001a63be: add dword ptr [rax], eax; and bl, cl; hlt; jmp qword ptr [rdx]; 
0x00000000001a852e: add dword ptr [rax], eax; and byte ptr [rdi - 0xb], al; jmp rax; 
0x00000000001a87ce: add dword ptr [rax], eax; and byte ptr [rdi - 0xb], dl; call qword ptr [rdx]; 
0x00000000001a50be: add dword ptr [rax], eax; and byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001a73be: add dword ptr [rax], eax; and byte ptr [rsi], cl; cmc; jmp qword ptr [rcx]; 
0x00000000001a1c3e: add dword ptr [rax], eax; and ch, ch; int1; call qword ptr [rax]; 
0x00000000001aae7e: add dword ptr [rax], eax; and cl, ah; cmc; jmp qword ptr [rbx]; 
0x00000000001a1cbe: add dword ptr [rax], eax; and dh, ch; int1; jmp qword ptr [rcx]; 
0x00000000001a084e: add dword ptr [rax], eax; and dl, cl; int1; call qword ptr [rbx]; 
0x00000000001a7c36: add dword ptr [rax], eax; clc; cmc; jmp qword ptr [rcx]; 
0x00000000001aacf6: add dword ptr [rax], eax; clc; fcomi st(5); call qword ptr [rax]; 
0x000000000019eff6: add dword ptr [rax], eax; clc; fcompi st(0); jmp rax; 
0x00000000001a6a86: add dword ptr [rax], eax; clc; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001a7ff6: add dword ptr [rax], eax; clc; xor al, 0xf5; jmp qword ptr [rax]; 
0x00000000001a1f26: add dword ptr [rax], eax; cmp bh, dh; int1; jmp qword ptr [rax + 1]; 
0x00000000001a0b66: add dword ptr [rax], eax; cmp bl, dl; int1; call rsi; 
0x00000000001a7de6: add dword ptr [rax], eax; cmp byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001a8cd6: add dword ptr [rax], eax; cmp byte ptr [rdi - 0xb], bl; jmp qword ptr [rdi + 1]; 
0x00000000001a50d6: add dword ptr [rax], eax; cmp byte ptr [rdi - 0xc], ch; call qword ptr [rax + 6]; 
0x00000000001a7ba6: add dword ptr [rax], eax; cmp byte ptr [rsi], ch; cmc; jmp qword ptr [rax]; 
0x00000000001ac4ae: add dword ptr [rax], eax; cmp ch, 0xf5; call qword ptr [rax]; 
0x00000000001a1936: add dword ptr [rax], eax; cmp dl, ah; int1; jmp qword ptr [rdx]; 
0x000000000018acbe: add dword ptr [rax], eax; cmp esp, esi; call rsp; 
0x00000000001ac3c6: add dword ptr [rax], eax; cwde; cld; cmc; call qword ptr [rax]; 
0x00000000001a1de6: add dword ptr [rax], eax; cwde; int1; call qword ptr [rbp]; 
0x00000000001ab016: add dword ptr [rax], eax; cwde; loope 0x1ab010; jmp qword ptr [rcx + 0x4000001]; 
0x00000000001a4b96: add dword ptr [rax], eax; cwde; movsxd rsi, esp; jmp qword ptr [rax]; 
0x00000000001a8996: add dword ptr [rax], eax; cwde; pop rbp; cmc; call qword ptr [rdx]; 
0x00000000001aa8e6: add dword ptr [rax], eax; fcom st(6); cmc; jmp qword ptr [rsi]; 
0x000000000019fb66: add dword ptr [rax], eax; fcomp dword ptr [rax]; int1; jmp qword ptr [rax + 1]; 
0x00000000001a9a76: add dword ptr [rax], eax; fdiv dword ptr [rax - 0xb]; jmp qword ptr [rcx]; 
0x00000000001a7f06: add dword ptr [rax], eax; fdiv dword ptr [rdx]; cmc; jmp qword ptr [rcx]; 
0x00000000001a8326: add dword ptr [rax], eax; fdivr dword ptr [rbx]; cmc; jmp rbx; 
0x00000000001a4bc6: add dword ptr [rax], eax; fsub dword ptr [rbx - 0xc]; jmp qword ptr [rcx]; 
0x00000000001ab4a6: add dword ptr [rax], eax; fsub st(5); cmc; call qword ptr [rax]; 
0x00000000001a9766: add dword ptr [rax], eax; fsubr dword ptr [rsi - 0xb]; jmp qword ptr [rdi + 1]; 
0x00000000001a1c26: add dword ptr [rax], eax; fsubr st(4); int1; call qword ptr [rbx]; 
0x00000000001895e6: add dword ptr [rax], eax; hlt; adc al, 0xef; inc dword ptr [rdi + rdx + 0x17940001]; out dx, eax; call rsp; 
0x000000000018b9f6: add dword ptr [rax], eax; hlt; and dh, bh; call rsp; 
0x000000000018a03e: add dword ptr [rax], eax; hlt; ret 0xfff0; 
0x000000000018abe6: add dword ptr [rax], eax; hlt; ret; 
0x000000000018baae: add dword ptr [rax], eax; hlt; sub al, 0xf7; jmp rsp; 
0x000000000018969e: add dword ptr [rax], eax; in al, 0x33; out dx, eax; call rsp; 
0x00000000001898f6: add dword ptr [rax], eax; in al, 0x54; out dx, eax; jmp rsp; 
0x000000000018a31e: add dword ptr [rax], eax; in al, 0xcf; int1; jmp rsp; 
0x000000000018ae3e: add dword ptr [rax], eax; in al, 0xd2; hlt; jmp rsp; 
0x000000000018de36: add dword ptr [rax], eax; in al, 0xeb; cli; jmp rsp; 
0x00000000001aba96: add dword ptr [rax], eax; in eax, dx; cmc; jmp qword ptr [rax]; 
0x000000000018952e: add dword ptr [rax], eax; inc byte ptr [rdi]; out dx, eax; jmp rsp; 
0x00000000001adfa6: add dword ptr [rax], eax; jmp qword ptr [rdi]; 
0x00000000001a5d7e: add dword ptr [rax], eax; jo 0x1a5d39; hlt; call rdi; 
0x00000000001a5f7e: add dword ptr [rax], eax; jo 0x1a5f3e; hlt; jmp qword ptr [rcx]; 
0x00000000001a641e: add dword ptr [rax], eax; jo 0x1a63ee; hlt; jmp qword ptr [rcx]; 
0x00000000001a68ce: add dword ptr [rax], eax; jo 0x1a68ae; hlt; call qword ptr [rax]; 
0x00000000001a7cae: add dword ptr [rax], eax; jo 0x1a7ce1; cmc; jmp qword ptr [rcx]; 
0x00000000001a803e: add dword ptr [rax], eax; jo 0x1a8077; cmc; jmp qword ptr [rcx]; 
0x00000000001a811e: add dword ptr [rax], eax; jo 0x1a815a; cmc; jmp qword ptr [rax]; 
0x00000000001a9a5e: add dword ptr [rax], eax; jo 0x1a9a58; jmp qword ptr [rdx]; 
0x00000000001a9a8e: add dword ptr [rax], eax; jo 0x1a9b03; cmc; call rsp; 
0x00000000001aa65e: add dword ptr [rax], eax; jo 0x1aa637; cmc; jmp qword ptr [rsi]; 
0x00000000001ab93e: add dword ptr [rax], eax; jo 0x1ab92b; cmc; call qword ptr [rax]; 
0x00000000001ac12e: add dword ptr [rax], eax; jo 0x1ac12a; cmc; call qword ptr [rcx]; 
0x000000000008b8da: add dword ptr [rax], eax; lea rdx, qword ptr [rip - 0x5e3]; cmove rax, rdx; add rsp, 8; ret; 
0x00000000001a6436: add dword ptr [rax], eax; mov ah, cl; hlt; jmp qword ptr [rcx]; 
0x00000000001a7bee: add dword ptr [rax], eax; mov al, 0x2e; cmc; jmp qword ptr [rcx]; 
0x00000000001a8fee: add dword ptr [rax], eax; mov al, 0x63; cmc; call rsp; 
0x00000000001a6a3e: add dword ptr [rax], eax; mov al, 0xdf; hlt; jmp qword ptr [rcx]; 
0x00000000001a1cde: add dword ptr [rax], eax; mov al, 0xee; int1; jmp qword ptr [rcx]; 
0x00000000001ab726: add dword ptr [rax], eax; mov al, ch; cmc; call qword ptr [rax]; 
0x000000000018a266: add dword ptr [rax], eax; mov bh, 0xf1; push qword ptr [rdx + rbp*2 - 0x485bffff]; int1; jmp rsp; 
0x00000000001a0086: add dword ptr [rax], eax; mov byte ptr [rbx - 0xf], al; call rsi; 
0x00000000001a51e6: add dword ptr [rax], eax; mov byte ptr [rcx + rdi*8], dl; call qword ptr [rax]; 
0x00000000001a0156: add dword ptr [rax], eax; mov byte ptr [rdi - 0xf], bh; call qword ptr [rax]; 
0x00000000001a7cc6: add dword ptr [rax], eax; mov byte ptr [rdi], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001ac846: add dword ptr [rax], eax; mov byte ptr [rdx], al; idiv bh; ret 3; 
0x00000000001ac496: add dword ptr [rax], eax; mov ch, bh; cmc; call qword ptr [rax]; 
0x00000000001a1c66: add dword ptr [rax], eax; mov ch, ch; int1; call qword ptr [rsi]; 
0x00000000001aa676: add dword ptr [rax], eax; mov ch, dl; cmc; jmp qword ptr [rsi]; 
0x00000000001548c1: add dword ptr [rax], eax; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000096c95: add dword ptr [rax], eax; mov qword ptr [rdi], rdx; ret; 
0x00000000000eb6c0: add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x00000000000f4920: add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 0x1a; syscall; 
0x00000000000f1df0: add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 0x4a; syscall; 
0x00000000000f1e80: add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 0x4b; syscall; 
0x00000000000ebf70: add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 0x55; syscall; 
0x00000000000eb720: add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x00000000000eb4d0: add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x00000000000ebe20: add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 3; syscall; 
0x00000000000ecfd0: add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 7; syscall; 
0x00000000000f04e3: add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000f1c43: add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x17; syscall; 
0x00000000000f1283: add dword ptr [rax], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000108ec0: add dword ptr [rax], eax; mov rax, rdi; pop rbx; ret; 
0x0000000000096bc1: add dword ptr [rax], eax; mov rcx, rdi; mov qword ptr [rdx], rcx; ret; 
0x00000000001a2916: add dword ptr [rax], eax; mov sil, dl; jmp qword ptr [rbp]; 
0x000000000018b8e6: add dword ptr [rax], eax; movsb byte ptr [rdi], byte ptr [rsi]; add al, 0xf7; jmp rsp; 
0x000000000018a38e: add dword ptr [rax], eax; movsb byte ptr [rdi], byte ptr [rsi]; fyl2x; call rsp; 
0x000000000018a26e: add dword ptr [rax], eax; movsb byte ptr [rdi], byte ptr [rsi]; mov bh, 0xf1; jmp rsp; 
0x00000000001ac3de: add dword ptr [rax], eax; nop; cld; cmc; call qword ptr [rax]; 
0x000000000019f8ce: add dword ptr [rax], eax; nop; cld; jmp qword ptr [rbx]; 
0x00000000001a842e: add dword ptr [rax], eax; nop; cmc; call qword ptr [rax]; 
0x00000000001a82de: add dword ptr [rax], eax; nop; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001a4c9e: add dword ptr [rax], eax; nop; hlt; jmp qword ptr [rcx]; 
0x000000000019fffe: add dword ptr [rax], eax; nop; int1; jmp qword ptr [rcx]; 
0x00000000001a53ee: add dword ptr [rax], eax; nop; jnp 0x1a53e7; jmp qword ptr [rcx]; 
0x00000000001a505e: add dword ptr [rax], eax; nop; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rcx]; 
0x00000000001aa89e: add dword ptr [rax], eax; nop; salc; cmc; jmp qword ptr [rsi]; 
0x0000000000189bd6: add dword ptr [rax], eax; nop; shr bh, cl; call rsp; 
0x00000000001ac47e: add dword ptr [rax], eax; nop; std; cmc; call qword ptr [rax]; 
0x00000000001aa25e: add dword ptr [rax], eax; nop; xchg eax, esi; cmc; jmp qword ptr [rdi + 3]; 
0x00000000001a7d6e: add dword ptr [rax], eax; nop; xor ch, dh; jmp qword ptr [rcx]; 
0x00000000001a6ae6: add dword ptr [rax], eax; or al, ah; hlt; jmp rsp; 
0x00000000001a69c6: add dword ptr [rax], eax; or bh, bl; hlt; jmp qword ptr [rcx]; 
0x00000000001aa996: add dword ptr [rax], eax; or bh, dl; cmc; call qword ptr [rsi]; 
0x00000000001aa946: add dword ptr [rax], eax; or bh, dl; cmc; jmp qword ptr [rdi]; 
0x00000000001aa916: add dword ptr [rax], eax; or bh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a7f36: add dword ptr [rax], eax; or byte ptr [rbx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001a7db6: add dword ptr [rax], eax; or byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001a50a6: add dword ptr [rax], eax; or byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x000000000019e4ce: add dword ptr [rax], eax; or byte ptr [rdx - 0x10], 0xff; ret; 
0x00000000001a7b76: add dword ptr [rax], eax; or byte ptr [rsi], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001abb06: add dword ptr [rax], eax; out dx, eax; cmc; jmp qword ptr [rax]; 
0x000000000018985e: add dword ptr [rax], eax; out dx, eax; lcall ptr [rsp + rbx + 0x4f820001]; out dx, eax; jmp rsp; 
0x00000000001a5016: add dword ptr [rax], eax; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rcx]; 
0x00000000001a8206: add dword ptr [rax], eax; pop rax; cmp dh, ch; jmp qword ptr [rax]; 
0x00000000001a00d6: add dword ptr [rax], eax; pop rax; int1; call qword ptr [rdx]; 
0x000000000019f986: add dword ptr [rax], eax; pop rax; or esi, ecx; jmp rcx; 
0x00000000001a8936: add dword ptr [rax], eax; pop rax; pop rbp; cmc; call qword ptr [rcx]; 
0x00000000001a62c6: add dword ptr [rax], eax; pop rax; ret; 
0x00000000001ac27e: add dword ptr [rax], eax; push rax; cli; cmc; jmp qword ptr [rax]; 
0x00000000001abdee: add dword ptr [rax], eax; push rax; div ch; jmp qword ptr [rcx + 0x4000001]; 
0x00000000001a147e: add dword ptr [rax], eax; push rax; fcompi st(1); jmp qword ptr [rdi + 1]; 
0x00000000001aa92e: add dword ptr [rax], eax; push rax; ret 0xfff8; 
0x00000000001a24ae: add dword ptr [rax], eax; push rax; sbb edx, esi; call qword ptr [rdx]; 
0x00000000001a7dfe: add dword ptr [rax], eax; push rax; xor ebp, esi; jmp qword ptr [rcx]; 
0x00000000001a870e: add dword ptr [rax], eax; push rbp; cmc; call qword ptr [rcx]; 
0x00000000001898ee: add dword ptr [rax], eax; push rbx; out dx, eax; call qword ptr [rcx + rbp + 0x54e40001]; out dx, eax; jmp rsp; 
0x000000000018afae: add dword ptr [rax], eax; push rsp; ret 0xfff5; 
0x000000000018ae36: add dword ptr [rax], eax; push rsp; sal ah, cl; push qword ptr [rcx + rdi*4 - 0x2d1bffff]; hlt; jmp rsp; 
0x000000000018ae96: add dword ptr [rax], eax; push rsp; std; hlt; call rsp; 
0x00000000001a0ede: add dword ptr [rax], eax; rcl ah, 1; int1; jmp qword ptr [rbx]; 
0x000000000019e61e: add dword ptr [rax], eax; rcl byte ptr [rcx - 0x10], 1; jmp qword ptr [rdi]; 
0x00000000001aa6be: add dword ptr [rax], eax; rcl ch, 1; cmc; jmp qword ptr [rsi]; 
0x00000000001aa8ce: add dword ptr [rax], eax; rcl dh, 0xf5; jmp qword ptr [rsi]; 
0x000000000019fb4e: add dword ptr [rax], eax; rcr byte ptr [rax], 0xf1; jmp qword ptr [rcx]; 
0x00000000001a315e: add dword ptr [rax], eax; ret 0xe7da; 
0x000000000018a98e: add dword ptr [rax], eax; ret 0xf380; 
0x0000000000086b49: add dword ptr [rax], eax; ret; 
0x00000000001a611e: add dword ptr [rax], eax; rol al, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a634e: add dword ptr [rax], eax; rol ch, 0xf4; call qword ptr [rax + 5]; 
0x00000000001a7d9e: add dword ptr [rax], eax; sal byte ptr [rax], 0xf5; jmp qword ptr [rax]; 
0x00000000001a7eee: add dword ptr [rax], eax; sal byte ptr [rdx], 0xf5; jmp qword ptr [rcx]; 
0x00000000001aa856: add dword ptr [rax], eax; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001a830e: add dword ptr [rax], eax; sar byte ptr [rbx], 0xf5; jmp qword ptr [rcx]; 
0x00000000001a532e: add dword ptr [rax], eax; sar byte ptr [rdx - 0xc], 1; jmp qword ptr [rcx]; 
0x000000000019f36e: add dword ptr [rax], eax; sar dh, 0xf0; jmp qword ptr [rax + 3]; 
0x00000000001a6ede: add dword ptr [rax], eax; sar dh, 1; hlt; jmp rax; 
0x0000000000189466: add dword ptr [rax], eax; sar ebp, cl; out dx, al; jmp rsp; 
0x00000000001aad4e: add dword ptr [rax], eax; sbb ah, 0xf5; call qword ptr [rax]; 
0x00000000001a6a0e: add dword ptr [rax], eax; sbb bh, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a688e: add dword ptr [rax], eax; sbb bl, 0xf4; call qword ptr [rdi]; 
0x00000000001a8fd6: add dword ptr [rax], eax; sbb byte ptr [rbx - 0xb], ah; jmp qword ptr [rcx]; 
0x00000000001a8266: add dword ptr [rax], eax; sbb byte ptr [rbx], bh; cmc; jmp qword ptr [rcx]; 
0x00000000001a7926: add dword ptr [rax], eax; sbb byte ptr [rbx], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001898d6: add dword ptr [rax], eax; sbb byte ptr [rcx - 0x11], dl; call rsp; 
0x00000000001ad6de: add dword ptr [rax], eax; sbb byte ptr [rcx], 0xf6; call rdi; 
0x00000000001a4d66: add dword ptr [rax], eax; sbb byte ptr [rsi - 0xc], ah; jmp qword ptr [rcx]; 
0x00000000001a2036: add dword ptr [rax], eax; sbb ch, bh; int1; jmp qword ptr [rcx]; 
0x00000000001aa706: add dword ptr [rax], eax; sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a0836: add dword ptr [rax], eax; sbb dl, cl; int1; call qword ptr [rsi]; 
0x00000000001aae2e: add dword ptr [rax], eax; shl al, 0xf5; call qword ptr [rax]; 
0x00000000001a752e: add dword ptr [rax], eax; shl byte ptr [rax], 0xf5; jmp qword ptr [rsi]; 
0x00000000001add3e: add dword ptr [rax], eax; shl byte ptr [rdx], 0xf6; call rdi; 
0x00000000001ab4be: add dword ptr [rax], eax; shl ch, 1; cmc; jmp rbx; 
0x00000000001a194e: add dword ptr [rax], eax; shl dl, 1; int1; jmp qword ptr [rcx]; 
0x00000000001a488e: add dword ptr [rax], eax; shl rdi, 1; jmp qword ptr [rax]; 
0x00000000001a1c0e: add dword ptr [rax], eax; shr ah, 0xf1; jmp qword ptr [rcx]; 
0x00000000001abb8e: add dword ptr [rax], eax; shr bh, 0xf5; call qword ptr [rax]; 
0x00000000001a03e6: add dword ptr [rax], eax; sub bh, al; int1; jmp qword ptr [rbp]; 
0x00000000001ac366: add dword ptr [rax], eax; sub bl, bh; cmc; call qword ptr [rax]; 
0x000000000019e886: add dword ptr [rax], eax; sub byte ptr [rbx - 0x10], bl; jmp rsi; 
0x00000000001a7826: add dword ptr [rax], eax; sub byte ptr [rdx], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001a5186: add dword ptr [rax], eax; sub byte ptr [rsi - 0xc], dh; jmp qword ptr [rcx]; 
0x00000000001a7bbe: add dword ptr [rax], eax; sub byte ptr [rsi], 0xf5; jmp qword ptr [rcx]; 
0x00000000001aa616: add dword ptr [rax], eax; sub ch, dl; cmc; jmp qword ptr [rsi]; 
0x000000000018ba1e: add dword ptr [rax], eax; sub dil, r14b; jmp rsp; 
0x00000000001a0866: add dword ptr [rax], eax; sub dl, cl; int1; call qword ptr [rbx]; 
0x00000000001a7956: add dword ptr [rax], eax; sub rsi, rbp; jmp qword ptr [rcx]; 
0x00000000001a783e: add dword ptr [rax], eax; sub sil, bpl; jmp qword ptr [rcx]; 
0x00000000001a7b16: add dword ptr [rax], eax; test al, 0x2d; cmc; jmp qword ptr [rcx]; 
0x00000000001a7d86: add dword ptr [rax], eax; test al, 0x30; cmc; jmp qword ptr [rcx]; 
0x00000000001a82f6: add dword ptr [rax], eax; test al, 0x3b; cmc; jmp qword ptr [rcx]; 
0x00000000001a4cb6: add dword ptr [rax], eax; test al, 0x65; hlt; jmp qword ptr [rcx]; 
0x00000000001a5076: add dword ptr [rax], eax; test al, 0x6e; hlt; jmp qword ptr [rcx]; 
0x00000000001a5926: add dword ptr [rax], eax; test al, 0xac; hlt; call qword ptr [rbx]; 
0x00000000001a5ff6: add dword ptr [rax], eax; test al, 0xbd; hlt; jmp qword ptr [rcx]; 
0x00000000001a6106: add dword ptr [rax], eax; test al, 0xc0; hlt; jmp qword ptr [rcx]; 
0x00000000001aa8b6: add dword ptr [rax], eax; test al, 0xd6; cmc; jmp qword ptr [rsi]; 
0x00000000001a7346: add dword ptr [rax], eax; test al, 0xd; cmc; jmp qword ptr [rcx]; 
0x00000000001abb46: add dword ptr [rax], eax; test al, 0xef; cmc; call qword ptr [rdi]; 
0x000000000018b996: add dword ptr [rax], eax; test byte ptr [rbx], bl; idiv edi; mov esp, 0xb40001fa; sbb esi, edi; call rsp; 
0x000000000018a986: add dword ptr [rax], eax; test byte ptr [rdi - 0xd], bh; call rsp; 
0x000000000018a986: add dword ptr [rax], eax; test byte ptr [rdi - 0xd], bh; call rsp; pushfq; add dword ptr [rax], eax; ret 0xf380; 
0x0000000000189d0e: add dword ptr [rax], eax; test cl, ch; out dx, eax; call rsp; 
0x00000000001aa01e: add dword ptr [rax], eax; test ebp, esi; call qword ptr [rsi + 6]; 
0x000000000018af16: add dword ptr [rax], eax; xchg eax, esp; cmc; call rsp; 
0x000000000018af16: add dword ptr [rax], eax; xchg eax, esp; cmc; call rsp; ret; 
0x000000000018abde: add dword ptr [rax], eax; xchg eax, esp; ret; 
0x000000000018e0d6: add dword ptr [rax], eax; xchg eax, esp; xlatb; std; call rsp; 
0x0000000000189e7e: add dword ptr [rax], eax; xchg eax, esp; xor esi, eax; call rsp; 
0x00000000001aabfe: add dword ptr [rax], eax; xlatb; cmc; jmp qword ptr [rax + 1]; 
0x000000000018ad76: add dword ptr [rax], eax; xor al, 0x91; hlt; jmp rsp; 
0x00000000001899ee: add dword ptr [rax], eax; xor al, 0xa7; out dx, eax; call rsp; 
0x000000000018afa6: add dword ptr [rax], eax; xor al, 0xc2; cmc; call rsp; 
0x00000000001a7d56: add dword ptr [rax], eax; xor bpl, sil; jmp qword ptr [rax]; 
0x00000000001a7d3e: add dword ptr [rax], eax; xor byte ptr [rax], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001a538e: add dword ptr [rax], eax; xor byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x00000000001a827e: add dword ptr [rax], eax; xor byte ptr [rbx], bh; cmc; jmp qword ptr [rcx]; 
0x00000000001a793e: add dword ptr [rax], eax; xor byte ptr [rbx], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001a484e: add dword ptr [rax], eax; xor byte ptr [rcx], cl; hlt; jmp rdx; 
0x00000000001a4d7e: add dword ptr [rax], eax; xor byte ptr [rsi - 0xc], ah; jmp qword ptr [rcx]; 
0x00000000001a20ae: add dword ptr [rax], eax; xor dh, bh; int1; jmp qword ptr [rcx]; 
0x0000000000179344: add dword ptr [rax], ebx; hlt; jmp qword ptr [rbx]; 
0x0000000000091603: add dword ptr [rax], edi; ret 0x4788; 
0x000000000008b685: add dword ptr [rax], r8d; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000000c869b: add dword ptr [rbp + 0x1441204], ecx; ret 0xc8d; 
0x000000000009625b: add dword ptr [rbp + 0x19], eax; rol byte ptr [rcx - 0x7d], cl; ret 0x8305; 
0x00000000000f8163: add dword ptr [rbp + 0x2c], ebx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000077c71: add dword ptr [rbp + 0x2c], esi; mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000015fbdb: add dword ptr [rbp + 0x32], esi; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000120ce5: add dword ptr [rbp + 0x38], esi; mov dword ptr [rsi], 7; mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi + 8], eax; ret; 
0x00000000000d8183: add dword ptr [rbp + 0x39], eax; ret 0x677e; 
0x00000000000d3c23: add dword ptr [rbp + 0x39], eax; ret 0x8e0f; 
0x0000000000035a58: add dword ptr [rbp + 0x39], ecx; fimul word ptr [rdi]; xchg bl, al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000035b96: add dword ptr [rbp + 0x39], ecx; fimul word ptr [rdi]; xchg byte ptr [rbx], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x00000000000eb3ea: add dword ptr [rbp + 0x43], esi; mov edx, edx; movsxd rdi, edi; mov eax, 0x10c; syscall; 
0x0000000000077b5c: add dword ptr [rbp + 0x59], esi; mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000003763a: add dword ptr [rbp + 0xb], esi; xor eax, eax; nop; ret; 
0x0000000000108e9c: add dword ptr [rbp + 0xf], eax; mov dh, 0x42; dec dword ptr [rcx - 0x7d]; ret; 
0x00000000000b8e5e: add dword ptr [rbp + 1], ecx; ret; 
0x000000000012cfe2: add dword ptr [rbp - 0x14], esi; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax]; jmp rax; 
0x0000000000108c1b: add dword ptr [rbp - 0x16], esi; mov rax, rdi; add rsp, 8; ret; 
0x00000000000a31a7: add dword ptr [rbp - 0x1a], esi; mov rax, rbx; pop rbx; ret; 
0x0000000000097bc8: add dword ptr [rbp - 0x1b], esi; mov rax, rbx; pop rbx; ret; 
0x00000000000381f4: add dword ptr [rbp - 0x1f], esi; mov eax, 1; ret; 
0x0000000000108e49: add dword ptr [rbp - 0x6c], esi; nop dword ptr [rax]; mov rax, rdi; pop rbx; ret; 
0x000000000004876b: add dword ptr [rbp - 0x76b7fffb], esi; ret 0xffb8; 
0x000000000007d5af: add dword ptr [rbp - 0x77], ecx; ret; 
0x00000000000d1d74: add dword ptr [rbp - 0x79], esi; pop rbx; ret; 
0x000000000010bdd9: add dword ptr [rbp - 0x7b], eax; sal byte ptr [rbp - 0x17], 0xf3; ret; 
0x000000000009737c: add dword ptr [rbp - 0xf], esi; xor eax, eax; ret; 
0x000000000014cfe2: add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000012e695: add dword ptr [rbx + 0x28], ebp; mov qword ptr [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000095ca6: add dword ptr [rbx + 0x294803e0], eax; ret; 
0x00000000000026fe: add dword ptr [rbx + 0x2b], 0x821055b8; ret 0x617e; 
0x0000000000080bbb: add dword ptr [rbx + 0x33d60e05], ecx; add byte ptr [rcx], bh; ret 0xa7e; 
0x0000000000101e4e: add dword ptr [rbx + 0x38], ebp; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000002d50b: add dword ptr [rbx + 0x39], ebp; add byte ptr [rax - 0x73], cl; cmp eax, 0x3925ea; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000a3563: add dword ptr [rbx + rcx*4 + 4], eax; xchg dword ptr [rbp - 0x7b], eax; sal byte ptr [rbp - 0x35], 0xf3; ret; 
0x00000000000634da: add dword ptr [rbx + rcx*4 - 0x7b], eax; mov eax, 0xfffffee; test dword ptr [rdi + rax*8 + 0x6ae9ffff], esi; ret 0xffff; 
0x00000000000dbc5d: add dword ptr [rbx + rcx*4 - 0xa], esi; ret 0x7408; 
0x000000000010c4a2: add dword ptr [rbx + rdx + 0x48], esi; mov eax, dword ptr [rip + 0x2b6364]; add rsp, 0x28; jmp rax; 
0x0000000000112c41: add dword ptr [rbx - 0x2037b], ecx; dec dword ptr [rax + 0x39]; ret 0x870f; 
0x00000000000c612f: add dword ptr [rbx - 0x5914fd36], eax; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000000c606f: add dword ptr [rbx - 0x6914fd38], eax; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000001afe29: add dword ptr [rbx - 0x73f979f9], eax; add eax, 0x38e048d; pop qword ptr [rdx]; add dl, byte ptr [rsi + 0x41380e0a]; ret; 
0x000000000002ea82: add dword ptr [rbx - 0x7cb7fe39], eax; ret 0x8310; 
0x00000000000d0e08: add dword ptr [rbx - 0x7cb7fe3b], eax; ret; 
0x00000000000d33dd: add dword ptr [rbx - 0x7cb7fe40], eax; ret 0x4801; 
0x000000000007d347: add dword ptr [rbx - 0xd], ebx; ret; 
0x00000000000bf56b: add dword ptr [rbx], 0x89480030; ret 0xbae9; 
0x00000000001b0fb2: add dword ptr [rbx], eax; ret; 
0x0000000000127711: add dword ptr [rcx + 0x1b802], ecx; add byte ptr [rax], al; ret; 
0x000000000015c8a1: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; lea rax, qword ptr [rdx + 6]; ret; 
0x0000000000099bc6: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x00000000000d94be: add dword ptr [rcx + 0x39], eax; ret 0x267e; 
0x0000000000113b01: add dword ptr [rcx + 0x39], eax; ret 0xd975; 
0x00000000000d94e4: add dword ptr [rcx + 0x39], eax; ret 0xda7f; 
0x00000000000a369f: add dword ptr [rcx + 0x39], eax; ret; 
0x0000000000092188: add dword ptr [rcx + 0x39], ecx; ret; 
0x000000000002550f: add dword ptr [rcx + 0x39a57a05], ecx; add al, ch; add eax, 0xe9fffff4; ret; 
0x000000000015c881: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, qword ptr [rdx + 5]; ret; 
0x0000000000099ba6: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000015c871: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; lea rax, qword ptr [rdx + 4]; ret; 
0x0000000000099b86: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000000eb082: add dword ptr [rcx + 0x481977f0], ecx; movsxd rdi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000012d07c: add dword ptr [rcx + 0x48], esi; add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000a17d0: add dword ptr [rcx + 0x5c], eax; ret; 
0x000000000011d523: add dword ptr [rcx + 0x5d], eax; ret; 
0x000000000009fe0f: add dword ptr [rcx + 0x6349000d], ecx; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000979f3: add dword ptr [rcx + 0xf], eax; mov dh, 0x49; dec dword ptr [rcx - 0x7d]; ret 0x8401; 
0x0000000000040791: add dword ptr [rcx + 1], ecx; ret; 
0x0000000000028e75: add dword ptr [rcx + rcx*4 + 0x55], eax; add byte ptr [rcx], dh; ror byte ptr [rax + 0x39], cl; ret; 
0x000000000011a9fa: add dword ptr [rcx + rcx*4 - 0x5c], ecx; ret; 
0x00000000000b22bd: add dword ptr [rcx - 0x73], eax; push rax; add eax, dword ptr [rdi + rcx + 0x48]; ret 0x93ba; 
0x000000000002a7eb: add dword ptr [rcx - 0x75], eax; or ecx, dword ptr [rax - 0x77]; ret 0xc889; 
0x0000000000099b76: add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x0000000000123bb9: add dword ptr [rcx - 0x77], eax; add byte ptr [rax + 1], bh; ret; 
0x0000000000059f6a: add dword ptr [rcx - 0x77], ecx; push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rax - 0x7d], cl; ret; 
0x0000000000055df3: add dword ptr [rcx - 0x77], ecx; push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0x4101; 
0x0000000000055172: add dword ptr [rcx - 0x77], ecx; push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x0000000000055a33: add dword ptr [rcx - 0x77], ecx; push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0xe901; 
0x000000000005c662: add dword ptr [rcx - 0x77], ecx; ret 0x12e9; 
0x00000000000475f6: add dword ptr [rcx - 0x78], eax; add cl, byte ptr [rcx - 0x7d]; ret 0xf01; 
0x0000000000117e4f: add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x00000000000a77c3: add dword ptr [rcx - 0x7d], ecx; ret 0x4104; 
0x00000000000d87ff: add dword ptr [rcx - 0x7d], ecx; ret 0x4504; 
0x00000000000d16f9: add dword ptr [rcx - 0x7d], ecx; ret 0x6610; 
0x000000000002a9e5: add dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000000a189b: add dword ptr [rcx - 0x7f], eax; loope 0xa189f; add eax, dword ptr [rax]; add byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0x8341; 
0x00000000001a62c5: add dword ptr [rcx], 0xf4c35800; jmp qword ptr [rsi]; 
0x00000000001a634d: add dword ptr [rcx], 0xf4c5c000; call qword ptr [rax + 5]; 
0x00000000000a33db: add dword ptr [rcx], eax; add byte ptr [rax], al; lea rax, qword ptr [rdi - 0x10]; ret; 
0x0000000000114825: add dword ptr [rcx], eax; add byte ptr [rax], al; ret; 
0x00000000000eb55a: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000051f0c: add dword ptr [rcx], ebx; jmp qword ptr [rsi - 0x3f]; 
0x0000000000129c7f: add dword ptr [rcx], ebx; rol byte ptr [rbx - 0x177cfd20], 1; add rsp, 0x20; pop rbx; ret; 
0x000000000005429d: add dword ptr [rcx], ebx; sal byte ptr [rax], 0xc0; add eax, 0x107; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000117e15: add dword ptr [rcx], edi; bnd jb 0x117e04; mov eax, 0xffffffff; ret; 
0x00000000000e330c: add dword ptr [rcx], edi; ret 0x8c0f; 
0x00000000000472b3: add dword ptr [rcx], edi; ret 0xb87f; 
0x00000000000d776a: add dword ptr [rcx], edi; ret 0xd675; 
0x00000000000e351b: add dword ptr [rcx], edi; ret; 
0x0000000000097b93: add dword ptr [rcx], esi; imul al; adc eax, 0x48ffff49; mov eax, ebx; pop rbx; ret; 
0x000000000010880a: add dword ptr [rcx], esi; rol bl, 0x66; nop; movsxd rdi, edi; mov eax, 0xe5; syscall; 
0x0000000000075acd: add dword ptr [rcx], esi; ror byte ptr [rax - 0x7d], 0xc4; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000fbd63: add dword ptr [rcx], esp; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000012e5c0: add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000012e5d0: add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x000000000012e668: add dword ptr [rdi + 0x28], esi; mov rax, qword ptr [rdi + 0x18]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000022763: add dword ptr [rdi + 0x48640039], esi; add eax, dword ptr [0]; ret; 
0x00000000001653ba: add dword ptr [rdi + 3], esi; ret; 
0x00000000000940ac: add dword ptr [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bd887: add dword ptr [rdi], 0; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x00000000001aa2e9: add dword ptr [rdi], 3; add dword ptr [rdx], r9d; ret; 
0x00000000000faf63: add dword ptr [rdi], ebp; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000005db11: add dword ptr [rdi], ecx; adc al, 0x24; add rsp, 0x18; mov eax, edx; ret; 
0x0000000000118fa0: add dword ptr [rdi], ecx; add eax, 0x48c48348; pop rbx; pop rbp; ret; 
0x00000000000d0c96: add dword ptr [rdi], ecx; lahf; ret 0x82eb; 
0x00000000000d4eb6: add dword ptr [rdi], ecx; lahf; ret 0xee9; 
0x000000000002fe55: add dword ptr [rdi], ecx; mov bh, 0xc0; ret; 
0x0000000000049b6b: add dword ptr [rdi], ecx; mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x000000000011a620: add dword ptr [rdi], ecx; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret 0x3108; 
0x0000000000097ac0: add dword ptr [rdi], ecx; mov dh, 0x46; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000d8046: add dword ptr [rdi], ecx; mov es, word ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x00000000000f31a7: add dword ptr [rdi], ecx; mov esi, 0x75d285d1; in eax, 0x49; mov ecx, esi; mov byte ptr [r9 - 1], 0; ret; 
0x00000000000b731e: add dword ptr [rdi], ecx; sahf; ret 0x1fbf; 
0x0000000000106008: add dword ptr [rdi], ecx; test byte ptr [rcx + 0x31000000], bl; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000962cb: add dword ptr [rdi], ecx; test byte ptr [rdx + 0xffffffd], dh; mov dh, 0x45; ret 0x8349; 
0x000000000015a2fe: add dword ptr [rdi], ecx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000015e69e: add dword ptr [rdi], ecx; test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000c403f: add dword ptr [rdi], ecx; xchg byte ptr [rdi - 0xa000000], bh; ret; 
0x00000000000d4543: add dword ptr [rdi], ecx; xchg dword ptr [rsi + rdi*8 - 1], edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000047b71: add dword ptr [rdi], ecx; xchg eax, esp; ret 0x8341; 
0x0000000000111e1b: add dword ptr [rdi], ecx; xchg eax, esp; ret; 
0x000000000012e90e: add dword ptr [rdi], ecx; xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000012e7c4: add dword ptr [rdi], ecx; xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x0000000000099b34: add dword ptr [rdx + 0x48028801], ecx; mov eax, edi; ret; 
0x000000000009e32f: add dword ptr [rdx + 0x6349000d], esp; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000006de81: add dword ptr [rdx + 4], 1; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x000000000005dc38: add dword ptr [rdx + 4], 1; ret; 
0x000000000005dcb8: add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x00000000000fc80b: add dword ptr [rdx + rax*2], 1; ret; 
0x00000000001863f0: add dword ptr [rdx - 0x557e0003], ebp; std; call qword ptr [rcx]; 
0x00000000001903fd: add dword ptr [rdx], 0x44; ret; 
0x00000000001a04f4: add dword ptr [rdx], 0x4a; ret; 
0x000000000019c14c: add dword ptr [rdx], 0x51; ret; 
0x00000000001aab0d: add dword ptr [rdx], 0x57; ret; 
0x0000000000193074: add dword ptr [rdx], 0x63; ret; 
0x000000000019c155: add dword ptr [rdx], 0x65; ret; 
0x00000000001b62fd: add dword ptr [rdx], 0xf7f43000; call rcx; 
0x00000000001b634d: add dword ptr [rdx], 0xf7f5c000; call rdx; 
0x00000000001b639d: add dword ptr [rdx], 0xf7f85000; call qword ptr [rbx]; 
0x000000000019b684: add dword ptr [rdx], 2; clc; ret; 
0x00000000001aadfc: add dword ptr [rdx], 2; ret; 
0x00000000001960d4: add dword ptr [rdx], 2; xchg eax, edi; ret; 
0x00000000000eb463: add dword ptr [rdx], ebp; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018e3d0: add dword ptr [rdx], ecx; ret; 
0x00000000000fac63: add dword ptr [rdx], esi; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000012ac83: add dword ptr [rdx], esi; sub dword ptr [rax], eax; add rsp, 8; ret; 
0x00000000001aa2ec: add dword ptr [rdx], r9d; ret; 
0x000000000007c8d6: add dword ptr [rip + 0x3440e7], 1; ret; 
0x00000000000d31e4: add dword ptr [rip + 0x438d0000], eax; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000fa963: add dword ptr [rip - 0x2708ffd4], esi; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000aaf2e: add dword ptr [rip - 0x47b80000], eax; ret 0xffff; 
0x0000000000099b12: add dword ptr [rsi + 0xf], esp; adc cl, byte ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000099c08: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x0000000000099c28: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x0000000000099c48: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000099c68: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000099ac5: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; mov rax, rdi; ret; 
0x0000000000099c88: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099ca8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099cc8: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x000000000009c818: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c899: add dword ptr [rsi + 0xf], esp; adc eax, dword ptr [rdx]; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x000000000013cd89: add dword ptr [rsi + 0xf], esp; cmp byte ptr [rax], al; ret 0xf66; 
0x000000000007c14f: add dword ptr [rsi + rbx*2 + 0x48], esi; mov eax, dword ptr [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000018640c: add dword ptr [rsi - 0x51810003], ebp; std; call qword ptr [rsi]; 
0x000000000018640c: add dword ptr [rsi - 0x51810003], ebp; std; call qword ptr [rsi]; movsd dword ptr [rdi], dword ptr [rsi]; std; jmp rsi; 
0x0000000000099b47: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000099b57: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000019bb08: add dword ptr [rsi], 2; out 0xa, al; ret; 
0x000000000019c250: add dword ptr [rsi], 2; ret; 
0x000000000019d27d: add dword ptr [rsi], 3; mov byte ptr [rcx], al; ret; 
0x00000000001aa2a3: add dword ptr [rsi], ecx; cmp byte ptr [rbx - 0x73f979f9], al; add eax, 0x38e048d; pop qword ptr [rdx]; add ecx, dword ptr [rbx + 1]; ret; 
0x00000000001adbc7: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; adc ecx, dword ptr [rbx + 0xd1cfff5]; mov r13d, esi; jmp qword ptr [rdx]; 
0x00000000001ad0d7: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; add byte ptr [rax + 0xd1cfff5], al; fdivr dword ptr [rbp - 0xb]; jmp qword ptr [rdx]; 
0x00000000001a0d57: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; add eax, dword ptr [rax + 0xd1cfff1]; fidivr word ptr [rsi - 0xf]; jmp qword ptr [rdx]; 
0x00000000001acbaf: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; cmp dword ptr [rdx - 0xb], 0x3d0d1cff; jp 0x1acbb4; jmp qword ptr [rdx]; 
0x000000000019690f: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; imul eax, dword ptr [rbp + 0xd1cffed], -0x11; test ch, ch; jmp qword ptr [rdx]; 
0x0000000000197757: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; imul ecx, dword ptr [rdi + 0xd1cffed], -0x26; mov gs, ebp; jmp qword ptr [rdx]; 
0x00000000001adce7: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; jp 0xd37dce9; mov r13, r14; jmp qword ptr [rdx]; 
0x00000000001ade27: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; mov ecx, dword ptr [rdx + 0xd1cfff5]; mov bp, si; jmp qword ptr [rdx]; 
0x00000000001987ff: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xedbc800d1cffedbd]; jmp qword ptr [rdx]; 
0x00000000001ab58f: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs al, byte ptr [0xf55cf40d1cfff55d]; jmp qword ptr [rdx]; 
0x00000000001a935f: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf4ea900d1cfff4eb], al; jmp qword ptr [rdx]; 
0x00000000001ad5af: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs byte ptr [0xf582030d1cfff583], al; jmp qword ptr [rdx]; 
0x00000000001a973f: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs dword ptr [0xf4ec060d1cfff4ec], eax; jmp qword ptr [rdx]; 
0x00000000001995c7: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; movabs eax, dword ptr [0xeddba10d1cffedfb]; jmp qword ptr [rdx]; 
0x00000000001998df: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xedf8; 
0x000000000019a6d7: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xee68; 
0x00000000001a0d9f: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf17f; 
0x00000000001ab29f: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf55b; 
0x00000000001acb67: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf57a; 
0x00000000001b2577: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret 0xf683; 
0x00000000001ab7af: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; ret; 
0x00000000001ae00f: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; sbb ecx, dword ptr [rbp + rsi*8 + 0x490d1cff]; mov dh, ch; jmp qword ptr [rdx]; 
0x000000000019418f: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; sub eax, dword ptr [rax + 0xd1cffec]; fdivr dword ptr [rdi - 0x14]; jmp qword ptr [rdx]; 
0x00000000001969cf: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; xchg byte ptr [rbp + 0xd1cffed], al; ret 0xed84; 
0x00000000001ad767: add dword ptr [rsi], edx; adc byte ptr [rsi], cl; add byte ptr [rsi], 0xd; xor rbp, 0xffffffffffffffff; sbb al, 0xd; ret 0xf582; 
0x0000000000127983: add dword ptr [rsp + rax*8 + 0x49], esi; mov edi, dword ptr [rbp]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x00000000000f4a63: add dword ptr [rsp + rbp + 0x64d8f700], edx; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa263: add dword ptr [rsp + rbp], edi; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000123e72: add dword ptr [rsp + rdi*4 + 0x49], esi; mov edi, dword ptr [rbp]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x00000000000852fe: add dword ptr cs:[rax], eax; add byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; call rax; 
0x00000000001a2035: add dword ptr ds:[rax], eax; sbb ch, bh; int1; jmp qword ptr [rcx]; 
0x000000000013fca7: add dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001a084d: add dword ptr es:[rax], eax; and dl, cl; int1; call qword ptr [rbx]; 
0x00000000001a0835: add dword ptr es:[rax], eax; sbb dl, cl; int1; call qword ptr [rsi]; 
0x00000000001a0865: add dword ptr es:[rax], eax; sub dl, cl; int1; call qword ptr [rbx]; 
0x000000000018df95: add dword ptr fs:[rax], eax; add al, 1; cld; call rsp; 
0x00000000000f1c42: add dword ptr fs:[rax], eax; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x17; syscall; 
0x00000000000a70c5: add dword ptr ss:[rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x000000000000157d: add eax, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 5; 
0x0000000000004b09: add eax, 0; add byte ptr [rax], al; ret 0x26; 
0x0000000000001589: add eax, 0; add byte ptr [rax], al; ret; 
0x0000000000112f24: add eax, 0x1024448b; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000542a2: add eax, 0x107; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000009f78b: add eax, 0x10; lea r11, qword ptr [rip + 0xd8f3b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df7b: add eax, 0x10; lea r11, qword ptr [rip + 0xda56b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001176c6: add eax, 0x10; ret; 
0x0000000000088dc6: add eax, 0x10f35; ret; 
0x00000000000647fa: add eax, 0x113299; movsxd rdx, dword ptr [rax + r12*4]; add rax, rdx; jmp rax; 
0x0000000000086b46: add eax, 0x11595; ret; 
0x000000000005f139: add eax, 0x118542; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005f320: add eax, 0x1185db; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x000000000005f2d6: add eax, 0x118625; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f221: add eax, 0x1186da; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f09b: add eax, 0x1186e0; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f183: add eax, 0x118778; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005f05b: add eax, 0x1187a0; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; jmp rax; 
0x000000000005ef94: add eax, 0x118967; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000004ed5e: add eax, 0x127f1d; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004ecaf: add eax, 0x127f4c; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004ec4e: add eax, 0x12802d; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004e976: add eax, 0x128305; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004e834: add eax, 0x128647; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000004e791: add eax, 0x1286ea; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004deba: add eax, 0x128e41; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004dd8e: add eax, 0x128fed; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x000000000004d534: add eax, 0x129947; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004ba9b: add eax, 0x12b3e0; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000003d1ad: add eax, 0x148f66; movsd qword ptr [rbp], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000036083: add eax, 0x14f858; andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x000000000008b8d7: add eax, 0x15844; lea rdx, qword ptr [rip - 0x5e3]; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000022032: add eax, 0x15a154; ret; 
0x0000000000022042: add eax, 0x15c12b; ret; 
0x00000000000205dd: add eax, 0x1b8; add byte ptr [rbx - 0x76ff4783], al; ret; 
0x0000000000035a02: add eax, 0x1c8d4c00; sbb byte ptr [rax - 0x77], cl; ret 0x394d; 
0x000000000008be6c: add eax, 0x1f; ret; 
0x00000000001918b4: add eax, 0x2300e44; ret; 
0x000000000016500e: add eax, 0x25ae41; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000164bc9: add eax, 0x25af0e; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001651f5: add eax, 0x25bc52; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000001653cb: add eax, 0x25d44c; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000f2370: add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000136502: add eax, 0x287881; add rax, qword ptr fs:[0]; ret; 
0x00000000001365e2: add eax, 0x287881; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000135f62: add eax, 0x287ef9; call qword ptr [rax + 0xf0]; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000135d52: add eax, 0x288109; mov rax, qword ptr [rax + 0x108]; jmp rax; 
0x0000000000135ce4: add eax, 0x288177; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x0000000000135c83: add eax, 0x2881d8; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x0000000000135c52: add eax, 0x288209; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x00000000001336f0: add eax, 0x2883eb; mov rdi, rbx; pop rbx; mov qword ptr [rip + 0x28c190], rax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x0000000000133702: add eax, 0x2883f9; jmp rax; 
0x00000000001336b2: add eax, 0x288441; pop r12; jmp rax; 
0x0000000000133652: add eax, 0x288499; pop r12; jmp rax; 
0x00000000001335ec: add eax, 0x2884f7; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000001355e2: add eax, 0x288881; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000099b84: add eax, 0x289018b; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000013524e: add eax, 0x28a63d; call qword ptr [rax + 0x28]; 
0x0000000000135227: add eax, 0x28a664; call qword ptr [rax]; 
0x0000000000134e9c: add eax, 0x28a9ef; xor ebp, ebp; call qword ptr [rax + 0x28]; 
0x0000000000132eca: add eax, 0x28af99; mov dword ptr fs:[rax], 2; mov eax, 0xffffffff; ret; 
0x0000000000132db2: add eax, 0x28b0b1; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d92: add eax, 0x28b0d1; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d42: add eax, 0x28b121; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132cf2: add eax, 0x28b171; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000b8e96: add eax, 0x28bad029; add byte ptr [rax], al; add byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0x8d44; 
0x0000000000133bc1: add eax, 0x28bcca; mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x18]; 
0x0000000000133b1e: add eax, 0x28bd6d; mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x00000000001338c3: add eax, 0x28bfc8; call qword ptr [rax + 0x28]; 
0x0000000000133856: add eax, 0x28c035; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x00000000001337d9: add eax, 0x28c0b2; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x0000000000133763: add eax, 0x28c128; call qword ptr [rax]; 
0x00000000001336fb: add eax, 0x28c190; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000001336ab: add eax, 0x28c1e0; mov rax, qword ptr [rip + 0x288441]; pop r12; jmp rax; 
0x000000000013364b: add eax, 0x28c240; mov rax, qword ptr [rip + 0x288499]; pop r12; jmp rax; 
0x00000000001335e5: add eax, 0x28c2a6; mov rax, qword ptr [rip + 0x2884f7]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000136b62: add eax, 0x28d429; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136b32: add eax, 0x28d451; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136b02: add eax, 0x28d479; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136ad2: add eax, 0x28d4a1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136b9f: add eax, 0x28d4a4; mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000136aa2: add eax, 0x28d4c9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136a72: add eax, 0x28d4f1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000013437e: add eax, 0x28f7f9; add byte ptr [rcx], 0; add dh, dh; ret; 
0x0000000000133e49: add eax, 0x28fbb2; mov eax, 1; add rsp, 8; ret; 
0x000000000008ac06: add eax, 0x29000000; ret; 
0x000000000013351b: add eax, 0x2904b0; cmove rdx, rax; add rsp, 8; mov rax, rdx; ret; 
0x00000000000b7827: add eax, 0x2907fbc1; ret 0x8944; 
0x000000000012ac82: add eax, 0x293201; add rsp, 8; ret; 
0x000000000012ac52: add eax, 0x293299; add rsp, 8; ret; 
0x000000000012abf2: add eax, 0x293381; add rsp, 8; ret; 
0x000000000012ac22: add eax, 0x2933c1; add rsp, 8; ret; 
0x000000000012ab12: add eax, 0x293469; lea rdx, qword ptr [rip + 0x298d62]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000000b7965: add eax, 0x2941c229; ret; 
0x000000000002a297: add eax, 0x29480000; ret 0x8b49; 
0x000000000012abb8: add eax, 0x298c9f; add al, byte ptr [rax]; add byte ptr [rax], al; mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x000000000012a9d8: add eax, 0x29e3; lea rdx, qword ptr [rip - 0xa984]; mov esi, 3; mov rdi, r15; call qword ptr [rax]; 
0x00000000001b7559: add eax, 0x29f0000; add byte ptr [rax], al; ret; 
0x000000000011c412: add eax, 0x2a1bd9; mov rax, qword ptr fs:[rax]; ret; 
0x000000000011fa7a: add eax, 0x2a3cc1; add rsp, 8; ret; 
0x000000000011ee2a: add eax, 0x2a4871; pop rbx; ret; 
0x000000000011edf2: add eax, 0x2a48a9; pop rbx; ret; 
0x000000000011ed33: add eax, 0x2a4968; pop rbx; ret; 
0x000000000011bcc2: add eax, 0x2a8331; lea rsi, qword ptr [rip - 0x85e]; lea rdi, qword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001121b2: add eax, 0x2ad839; ret; 
0x0000000000112030: add eax, 0x2ad9b3; add rsp, 8; ret; 
0x000000000010c8c2: add eax, 0x2b1591; add rax, qword ptr fs:[0]; ret; 
0x0000000000112097: add eax, 0x2b1f5c; lea rsi, qword ptr [rip - 0x83]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000010a287: add eax, 0x2b3bdc; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x000000000010d62c: add eax, 0x2b52fe; add ecx, ebp; ret; 
0x00000000001088d2: add eax, 0x2b5591; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000108846: add eax, 0x2b55cd; mov rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010c4a7: add eax, 0x2b6364; add rsp, 0x28; jmp rax; 
0x00000000001086d0: add eax, 0x2ba0bb; add rsp, 0x1010; pop rbx; pop rbp; pop r12; ret; 
0x000000000010852f: add eax, 0x2bbb38; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000108529: add eax, 0x2bbb46; mov dword ptr [rip + 0x2bbb38], 1; pop rbx; ret; 
0x0000000000108032: add eax, 0x2bbfb1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000108002: add eax, 0x2bbfd9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107fd2: add eax, 0x2bc001; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107fa2: add eax, 0x2bc029; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f72: add eax, 0x2bc051; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f42: add eax, 0x2bc079; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f12: add eax, 0x2bc0a1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ee2: add eax, 0x2bc0c9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107eb2: add eax, 0x2bc0f1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107e52: add eax, 0x2bc109; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107e87: add eax, 0x2bc114; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000107e22: add eax, 0x2bc131; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107df2: add eax, 0x2bc159; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107dc2: add eax, 0x2bc181; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d92: add eax, 0x2bc1a9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d62: add eax, 0x2bc1d1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d32: add eax, 0x2bc1f9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d02: add eax, 0x2bc221; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107cd2: add eax, 0x2bc249; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ca2: add eax, 0x2bc271; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c72: add eax, 0x2bc299; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c42: add eax, 0x2bc2c1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c12: add eax, 0x2bc2e9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107be2: add eax, 0x2bc311; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107bb2: add eax, 0x2bc339; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b82: add eax, 0x2bc361; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b52: add eax, 0x2bc389; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b22: add eax, 0x2bc3b1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107af2: add eax, 0x2bc3d9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ac2: add eax, 0x2bc3f9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107a92: add eax, 0x2bc501; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000fd422: add eax, 0x2c0a39; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000000fc772: add eax, 0x2c1b85; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000fc720: add eax, 0x2c1bd7; add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000fb0a2: add eax, 0x2c2dc1; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f9662: add eax, 0x2c4801; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fcd0a: add eax, 0x2c4ce9; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000000fcaba: add eax, 0x2c4f39; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000f8fc6: add eax, 0x2c4fd5; mov qword ptr [rax], rbx; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000015a384: add eax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x00000000000f8282: add eax, 0x2c5be1; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000f7822: add eax, 0x2c6641; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f9d0f: add eax, 0x2c7b2c; add rsp, 0x18; ret; 
0x00000000000f9cac: add eax, 0x2c7bcf; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f9758: add eax, 0x2c8093; add rsp, 8; ret; 
0x00000000000f96f9: add eax, 0x2c8112; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f9501: add eax, 0x2c82b2; ret; 
0x00000000000f94f4: add eax, 0x2c82bb; mov dword ptr [rip + 0x2c82e5], eax; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f94fa: add eax, 0x2c82e5; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f94ee: add eax, 0x2c82ed; mov eax, dword ptr [rip + 0x2c82bb]; mov dword ptr [rip + 0x2c82e5], eax; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f9341: add eax, 0x2c8472; ret; 
0x00000000000f9334: add eax, 0x2c847b; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f933a: add eax, 0x2c84a5; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f932e: add eax, 0x2c84ad; mov eax, dword ptr [rip + 0x2c847b]; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f916e: add eax, 0x2c8645; add rsp, 8; ret; 
0x00000000000f9161: add eax, 0x2c864e; mov dword ptr [rip + 0x2c8678], eax; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000f9167: add eax, 0x2c8678; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000f915b: add eax, 0x2c8680; mov eax, dword ptr [rip + 0x2c864e]; mov dword ptr [rip + 0x2c8678], eax; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000f4c02: add eax, 0x2c9261; mov dword ptr fs:[rax], 0x16; pop rbx; ret; 
0x00000000000f4b22: add eax, 0x2c9341; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000000f3022: add eax, 0x2cae41; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2f8a: add eax, 0x2caed9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f22b2: add eax, 0x2cbbb1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2282: add eax, 0x2cbbe1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f19f2: add eax, 0x2cc471; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f1952: add eax, 0x2cc511; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f4ac6: add eax, 0x2ccc65; lea rcx, qword ptr [rsp + 8]; call 0xf4c10; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f11c2: add eax, 0x2ccca1; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f10f2: add eax, 0x2ccd71; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000f1112: add eax, 0x2ccda1; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000f1008: add eax, 0x2cce5b; neg edx; mov dword ptr fs:[rax], edx; or eax, 0xffffffff; ret; 
0x00000000000f09cb: add eax, 0x2cd498; neg edx; mov dword ptr fs:[rax], edx; or eax, 0xffffffff; ret; 
0x00000000000f2440: add eax, 0x2cd4db; add rsp, 8; ret; 
0x00000000000f0682: add eax, 0x2cd7e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f0622: add eax, 0x2cd841; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f395b: add eax, 0x2cdcd0; add rsp, 8; ret; 
0x00000000000f3934: add eax, 0x2cdcf3; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000f34d3: add eax, 0x2ce068; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000efcc2: add eax, 0x2ce1a1; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x00000000000ee2b2: add eax, 0x2cfbb1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ed3a2: add eax, 0x2d0ac1; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000ed38a: add eax, 0x2d0ad9; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000ed332: add eax, 0x2d0b31; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2492: add eax, 0x2d1b61; lea rsi, qword ptr [rip - 0x6e]; lea rdi, qword ptr [rip + 0x2cf08b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ebdaa: add eax, 0x2d20b9; mov dword ptr fs:[rax], 0x16; add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000ebb1c: add eax, 0x2d2347; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x00000000000f18ed: add eax, 0x2d2766; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f187d: add eax, 0x2d27d6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000eb432: add eax, 0x2d2a31; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x00000000000eb41a: add eax, 0x2d2a49; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb20a: add eax, 0x2d2c59; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb1b2: add eax, 0x2d2cb1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb152: add eax, 0x2d2d11; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb0f2: add eax, 0x2d2d71; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb0a2: add eax, 0x2d2dc1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb052: add eax, 0x2d2e11; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ebaf6: add eax, 0x2d59b1; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000e8a34: add eax, 0x2db5a7; xor esi, esi; mov edi, dword ptr [rsp + 0xe0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018c349: add eax, 0x2ea4fff8; add al, byte ptr [rax]; in al, 5; clc; call rsp; 
0x00000000000cb3b5: add eax, 0x2f2aae; neg r8d; mov dword ptr fs:[rax], r8d; or eax, 0xffffffff; ret; 
0x00000000000c26ea: add eax, 0x2fb779; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x00000000000c2682: add eax, 0x2fb7e1; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x00000000000c12b2: add eax, 0x2fcbb1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bf782: add eax, 0x2fe6e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bce2a: add eax, 0x301039; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bcddf: add eax, 0x301084; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000c20f6: add eax, 0x301f5d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c2086: add eax, 0x301fcd; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1e24: add eax, 0x30222f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1dc4: add eax, 0x30228f; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c10ca: add eax, 0x302f99; mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000019d27b: add eax, 0x3068345; mov byte ptr [rcx], al; ret; 
0x00000000000bc80a: add eax, 0x3077f9; lea rdi, qword ptr [rip + 0x3032ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc7ea: add eax, 0x307821; lea rdi, qword ptr [rip + 0x30330a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000bc70b: add eax, 0x3078f8; lea rdi, qword ptr [rip + 0x3033e9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc6e9: add eax, 0x307922; lea rdi, qword ptr [rip + 0x30340b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc502: add eax, 0x307b09; lea rdi, qword ptr [rip + 0x3035f2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc4d7: add eax, 0x307b2c; lea rdi, qword ptr [rip + 0x30361d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc38a: add eax, 0x307c79; lea rdi, qword ptr [rip + 0x30376a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc325: add eax, 0x307ce6; lea rdi, qword ptr [rip + 0x3037cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b42f2: add eax, 0x309b71; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b06b2: add eax, 0x30d7b1; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000b05b2: add eax, 0x30d8b1; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000b0668: add eax, 0x310733; add rsp, 0x28; ret; 
0x00000000000b2110: add eax, 0x311d03; add rsp, 8; ret; 
0x0000000000133234: add eax, 0x312b8964; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000aeffa: add eax, 0x315009; lea rdi, qword ptr [rip + 0x310afa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aef43: add eax, 0x3150c8; lea rdi, qword ptr [rip + 0x310bb1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001273cf: add eax, 0x31ff3100; ror byte ptr [rax - 0x7d], 0xc4; or cl, ch; adc bl, byte ptr [rbx - 0xc]; jmp qword ptr [rsi - 0x70]; 
0x000000000008aac5: add eax, 0x3361a6; add rsp, 8; ret; 
0x000000000008aabe: add eax, 0x3361bd; mov qword ptr [rip + 0x3361a6], rax; add rsp, 8; ret; 
0x000000000008aa83: add eax, 0x3361e8; ret; 
0x000000000008aa7c: add eax, 0x3361ff; mov qword ptr [rip + 0x3361e8], rax; ret; 
0x000000000008aa9d: add eax, 0x339576; lea rdi, qword ptr [rip + 0x336247]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000085acb: add eax, 0x33b07c; add dword ptr [rax], eax; add byte ptr [rax], al; pop r12; ret; 
0x0000000000082640: add eax, 0x33b88b; mov qword ptr [rax], rdi; ret; 
0x0000000000082636: add eax, 0x33b99d; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x33b88b]; mov qword ptr [rax], rdi; ret; 
0x000000000008131a: add eax, 0x33cb49; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000080a69: add eax, 0x33d34a; xor edi, edi; call qword ptr [rax]; 
0x0000000000080953: add eax, 0x33d460; mov rdi, rcx; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x0000000000080803: add eax, 0x33d5b0; mov qword ptr [rsp + 0x28], r14; mov rdi, r14; call qword ptr [rax]; 
0x0000000000082651: add eax, 0x33e3f6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000007deeb: add eax, 0x33fec8; xor edi, edi; mov qword ptr [rsp + 8], rcx; call qword ptr [rax]; 
0x000000000007de9a: add eax, 0x33ff19; xor edi, edi; mov r14, rdx; call qword ptr [rax]; 
0x000000000007e19c: add eax, 0x34288f; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000007c852: add eax, 0x342949; ret; 
0x000000000007d342: add eax, 0x343738; add dword ptr [rbx - 0xd], ebx; ret; 
0x000000000007c936: add eax, 0x344089; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000007840c: add eax, 0x345b2f; mov rdi, qword ptr [rax]; call 0x5eaf0; add rsp, 0xd8; ret; 
0x000000000007141a: add eax, 0x34ca49; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000006fffa: add eax, 0x34de69; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000064e25: add eax, 0x35f20e; xor esi, esi; lea rdi, qword ptr [rbp - 0xf0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000005d11e: add eax, 0x360e95; mov rdi, qword ptr [rax]; call 0x54630; add rsp, 0xd8; ret; 
0x000000000005d514: add eax, 0x363417; pop rbx; pop rbp; ret; 
0x000000000005d509: add eax, 0x363432; add rsp, 0x28; lea rax, qword ptr [rip + 0x363417]; pop rbx; pop rbp; ret; 
0x000000000015e735: add eax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000543cc: add eax, 0x369b6f; mov rdi, qword ptr [rax]; call 0x49c40; add rsp, 0xd8; ret; 
0x0000000000054d8f: add eax, 0x36f2a4; xor esi, esi; lea rdi, qword ptr [rbp - 0x170]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000047592: add eax, 0x376829; mov rax, qword ptr fs:[rax]; mov rdx, rax; call 0x475b0; add rsp, 0xd8; ret; 
0x00000000000491b2: add eax, 0x37ae29; lea rsi, qword ptr [rsp + 0x60]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049192: add eax, 0x37ae49; xor esi, esi; mov edi, dword ptr [rsp + 0x60]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049162: add eax, 0x37ae91; lea rsi, qword ptr [rip - 0x6ee]; lea rdi, qword ptr [rip + 0x37777b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000048905: add eax, 0x37b49a; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000003cd5a: add eax, 0x381109; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003ccb2: add eax, 0x3811b1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037b82: add eax, 0x3862e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037a82: add eax, 0x3863e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037bf4: add eax, 0x386497; mov eax, edx; ret; 
0x0000000000037bb1: add eax, 0x3864da; ret; 
0x0000000000037985: add eax, 0x3864de; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037ba1: add eax, 0x3864fa; ret; 
0x00000000000378e2: add eax, 0x386581; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000037842: add eax, 0x386621; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000037822: add eax, 0x386641; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000377e2: add eax, 0x386681; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000377a2: add eax, 0x3866c1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003776a: add eax, 0x3866f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000376ba: add eax, 0x3867a9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003d122: add eax, 0x386c6f; add rsp, 8; ret; 
0x0000000000036ebf: add eax, 0x386fa4; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x0000000000036c82: add eax, 0x3871e1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036bea: add eax, 0x387279; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000036990: add eax, 0x3874d3; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbx; ret; 
0x0000000000036654: add eax, 0x38780f; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000036388: add eax, 0x387adb; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000035883: add eax, 0x3885e0; mov ebp, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov rdi, rbx; mov eax, 3; syscall; 
0x0000000000036b42: add eax, 0x38d4a9; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000030112: add eax, 0x38dce9; add rax, qword ptr fs:[0]; ret; 
0x00000000000301b0: add eax, 0x38dd6b; add rdx, 0x200; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000030132: add eax, 0x38dda1; add rax, qword ptr fs:[0]; ret; 
0x00000000001afe2f: add eax, 0x38e048d; pop qword ptr [rdx]; add dl, byte ptr [rsi + 0x41380e0a]; ret; 
0x00000000001aa2ab: add eax, 0x38e048d; pop qword ptr [rdx]; add ecx, dword ptr [rbx + 1]; ret; 
0x000000000002fab2: add eax, 0x38e309; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000002fa6e: add eax, 0x38e365; mov qword ptr [rax], rdx; ret; 
0x000000000002f907: add eax, 0x38e5cc; mov qword ptr fs:[rax], rsi; cmp rdx, rcx; mov rax, -1; cmovne rax, rdx; ret; 
0x000000000002e6cb: add eax, 0x38f798; mov dword ptr fs:[rax], 0x16; movsxd rdi, r13d; mov eax, 3; syscall; 
0x00000000000340ea: add eax, 0x38ff21; lea rdi, qword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340c2: add eax, 0x38ff41; lea rdi, qword ptr [rip + 0x38bbb2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002ef83: add eax, 0x390c98; mov byte ptr [rip + 0x390cef], dl; ret; 
0x000000000002cd62: add eax, 0x391059; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x00000000000321a6: add eax, 0x391e65; lea rdi, qword ptr [rip + 0x38dbae]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003212f: add eax, 0x391ed4; lea rdi, qword ptr [rip + 0x38dc25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003204a: add eax, 0x391fc1; lea rdi, qword ptr [rip + 0x38dd0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032022: add eax, 0x391fd9; lea rdi, qword ptr [rip + 0x38dd32]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e35: add eax, 0x3921ce; lea rdi, qword ptr [rip + 0x38debf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031b91: add eax, 0x39247a; lea rdi, qword ptr [rip + 0x38e0e3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031af0: add eax, 0x39251b; lea rdi, qword ptr [rip + 0x38e204]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031ace: add eax, 0x39252d; lea rdi, qword ptr [rip + 0x38e1a6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aa3: add eax, 0x392558; lea rdi, qword ptr [rip + 0x38e051]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a81: add eax, 0x39257a; lea rdi, qword ptr [rip + 0x38e273]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318ef: add eax, 0x39271c; lea rdi, qword ptr [rip + 0x38e385]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318c8: add eax, 0x392743; lea rdi, qword ptr [rip + 0x38e22c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031465: add eax, 0x392ba6; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000313f2: add eax, 0x392c19; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000312c8: add eax, 0x392d3b; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030e6a: add eax, 0x3931a1; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030dbe: add eax, 0x39323d; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030d9b: add eax, 0x393270; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002c162: add eax, 0x393959; ret; 
0x00000000000305e2: add eax, 0x393a21; lea rdi, qword ptr [rip + 0x38f692]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000304fa: add eax, 0x393b11; lea rdi, qword ptr [rip + 0x38f77a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003039a: add eax, 0x393c69; lea rdi, qword ptr [rip + 0x38f8da]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f892: add eax, 0x394779; lea rdi, qword ptr [rip + 0x390262]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f872: add eax, 0x394791; lea rdi, qword ptr [rip + 0x390282]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7d2: add eax, 0x394839; lea rdi, qword ptr [rip + 0x390322]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7a7: add eax, 0x39485c; lea rdi, qword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f5cb: add eax, 0x394a40; lea rdi, qword ptr [rip + 0x390529]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f579: add eax, 0x394a92; lea rdi, qword ptr [rip + 0x39057b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f467: add eax, 0x394b9c; lea rdi, qword ptr [rip + 0x39068d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d74f: add eax, 0x3968bc; lea rdi, qword ptr [rip + 0x3923a5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d72d: add eax, 0x3968de; lea rdi, qword ptr [rip + 0x3923c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d50a: add eax, 0x396b01; lea rdi, qword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d4e2: add eax, 0x396b29; lea rdi, qword ptr [rip + 0x392612]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d496: add eax, 0x396b75; lea rdi, qword ptr [rip + 0x39265e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d282: add eax, 0x396d81; lea rdi, qword ptr [rip + 0x392872]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000022cb0: add eax, 0x39b1b3; mov dword ptr fs:[rax], 9; mov eax, edi; ret; 
0x0000000000022762: add eax, 0x39b701; add rax, qword ptr fs:[0]; ret; 
0x0000000000021f2d: add eax, 0x39bf76; mov rsi, qword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000021b1c: add eax, 0x39c70f; pop r12; ret; 
0x000000000002211e: add eax, 0x39d93d; mov rdi, qword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x000000000001f5f1: add eax, 0x3a045a; pop rax; pop rbx; pop rbp; ret; 
0x00000000000237e2: add eax, 0x3a0461; ret; 
0x00000000000237d2: add eax, 0x3a0481; ret; 
0x00000000000225f8: add eax, 0x3a1603; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x00000000000225f1: add eax, 0x3a1646; lea rax, qword ptr [rip + 0x3a1603]; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x000000000002246c: add eax, 0x3a178f; ret; 
0x0000000000022223: add eax, 0x3a19d8; pop rbx; ret; 
0x0000000000021f55: add eax, 0x3a20f6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e520e: add eax, 0x41000000; pop rsp; ret; 
0x0000000000104bcf: add eax, 0x41020000; call qword ptr [rbp + 0x28]; 
0x00000000001089c6: add eax, 0x41d15; ret; 
0x00000000000d31e5: add eax, 0x438d0000; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000108a66: add eax, 0x44745; ret; 
0x0000000000108a07: add eax, 0x47274; lea rdx, qword ptr [rip + 0x3f14d]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000003d312: add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; mov eax, 0xb; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x000000000003d2d1: add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x000000000006ebe1: add eax, 0x48000000; mov eax, edx; pop rbx; ret; 
0x000000000015c8b8: add eax, 0x48054289; lea eax, dword ptr [rdx + 8]; ret; 
0x0000000000158568: add eax, 0x48054289; mov eax, edi; ret; 
0x000000000014cc63: add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e4e6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009f326: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009cea6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x00000000000a0d96: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x0000000000118fa2: add eax, 0x48c48348; pop rbx; pop rbp; ret; 
0x00000000001250da: add eax, 0x48c48348; ret; 
0x000000000009680a: add eax, 0x48fb4789; mov eax, edi; ret; 
0x000000000005d127: add eax, 0x48ffff75; add esp, 0xd8; ret; 
0x0000000000037fc7: add eax, 0x48ffffef; add esp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000f6007: add eax, 0x4cffffee; mov edi, edi; mov edx, 4; mov esi, 1; call rbx; 
0x0000000000127eff: add eax, 0x541c0; mov esi, esi; movsxd rcx, dword ptr [rax + rsi*4]; add rax, rcx; jmp rax; 
0x000000000015c939: add eax, 0x5428948; lea rax, qword ptr [rdx + 0xc]; ret; 
0x00000000001585a9: add eax, 0x5428948; mov rax, rdi; ret; 
0x000000000012769f: add eax, 0x549e0; mov esi, esi; movsxd rsi, dword ptr [rax + rsi*4]; add rax, rsi; jmp rax; 
0x0000000000123ad2: add eax, 0x570f1; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x0000000000003613: add eax, 0x572808a8; call qword ptr [rsi + 0x6f]; 
0x000000000010ac55: add eax, 0x5b000000; pop r12; pop r13; pop rbp; ret; 
0x00000000000e583d: add eax, 0x5b000000; pop rbp; pop r12; pop r13; ret; 
0x00000000001719b1: add eax, 0x5ba0000; add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x000000000016d3e9: add eax, 0x5bd0000; add byte ptr [rax], al; ret 5; 
0x00000000001719bd: add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000000887c3: add eax, 0x5c415d5b; ret; 
0x0000000000137636: add eax, 0x633a0f66; add al, 0x16; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001461e6: add eax, 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000091643: add eax, 0x6878; ret; 
0x00000000001b6a85: add eax, 0x6b30000; add byte ptr [rax], al; fld dword ptr [rbx]; add byte ptr [rax], al; ret; 
0x0000000000186895: add eax, 0x710fffc; cld; push rax; or ah, bh; call rax; 
0x0000000000075045: add eax, 0x74fc7139; sbb eax, 0xd8938b48; add byte ptr [rax], al; add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x0000000000186875: add eax, 0x750fffc; cld; push qword ptr [rax]; or esp, edi; call qword ptr [rax]; 
0x0000000000186855: add eax, 0x780fffc; cld; jmp qword ptr [rax + 9]; 
0x000000000008cc42: add eax, 0x79; ret; 
0x0000000000103db3: add eax, 0x79c98545; iretd; mov eax, edx; sub eax, r9d; ret; 
0x0000000000103f35: add eax, 0x79c98545; xor eax, dword ptr [rcx + rcx*4 - 0x40]; sub eax, r9d; ret; 
0x0000000000186835: add eax, 0x7b0fffc; cld; call qword ptr [rax + 0x70fffc09]; or edi, esp; call qword ptr [rax + 0xd]; 
0x00000000001b8901: add eax, 0x7c10000; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000a60f3: add eax, 0x7c830000; and al, 8; adc byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0xf983; 
0x000000000009d6ae: add eax, 0x82b850f; add byte ptr [rax], al; ret; 
0x00000000000ec91b: add eax, 0x83480000; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000013795d: add eax, 0x83480000; ret 0x4910; 
0x000000000013a4b1: add eax, 0x83480000; ret 0xe910; 
0x00000000001378b1: add eax, 0x83480000; ret 0xeb10; 
0x00000000000eb376: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x5a], bh; syscall; 
0x00000000000c1d06: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x66], bh; syscall; 
0x00000000000c1d26: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x00000000000c1d16: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x00000000000c1d36: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x00000000000c1d46: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x73], bh; syscall; 
0x000000000015c8bb: add eax, 0x8428d48; ret; 
0x000000000013510c: add eax, 0x89480000; fcomp dword ptr [rbx + 0x5d]; ret; 
0x00000000000e250d: add eax, 0x89489066; ret; 
0x0000000000108973: add eax, 0x89c78944; ret; 
0x00000000000b21d9: add eax, 0x89d02944; ret; 
0x00000000000e7274: add eax, 0x932db; movsxd rdx, dword ptr [rax + r11*4]; add rax, rdx; jmp rax; 
0x000000000009ed52: add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x00000000000dc8f4: add eax, 0x9d8f3; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x000000000012ac46: add eax, 0xa0; add rsp, 8; ret; 
0x00000000000a94b6: add eax, 0xa2e80000; clc; jmp qword ptr [rsi - 0x70]; 
0x00000000000d43a5: add eax, 0xa5b16; movzx r13d, r13b; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x000000000012ac76: add eax, 0xa8; add rsp, 8; ret; 
0x0000000000091657: add eax, 0xb1174; ret; 
0x000000000008ad53: add eax, 0xb1f68; ret; 
0x000000000008a9c3: add eax, 0xb21d8; ret; 
0x0000000000088533: add eax, 0xb4528; ret; 
0x00000000000c3283: add eax, 0xb6510; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000c2bbe: add eax, 0xb67f9; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000c2864: add eax, 0xb6aff; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000aaf2f: add eax, 0xb8480000; ret 0xffff; 
0x00000000000f5f07: add eax, 0xbaffffef; add al, 0; add byte ptr [rax], al; mov esi, 2; mov rdi, r15; call rbx; 
0x00000000000a2c14: add eax, 0xbc9c7; ret; 
0x00000000000a37d0: add eax, 0xbdacb; ret; 
0x00000000000e7622: add eax, 0xbe0f4101; ret 0xe883; 
0x000000000013513e: add eax, 0xc0310000; pop rbx; pop rbp; ret; 
0x0000000000160cba: add eax, 0xc0310000; ret; 
0x00000000000a37d8: add eax, 0xc0383; ret; 
0x00000000000d33db: add eax, 0xc0830100; add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000008c5e6: add eax, 0xc0bd5; ret; 
0x0000000000000451: add eax, 0xc1c107c; ret 0x4412; 
0x000000000004876d: add eax, 0xc2894800; mov eax, 0xffffffff; test edx, edx; cmovns eax, edx; pop rbx; ret; 
0x00000000000b5fc8: add eax, 0xc2efb; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x000000000008c447: add eax, 0xc3844; lea rdx, qword ptr [rip + 0xbb71d]; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000b5303: add eax, 0xc3ae4; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x000000000015c93d: add eax, 0xc428d48; ret; 
0x000000000009e4ed: add eax, 0xc478d48; ret; 
0x000000000003292e: add eax, 0xc6834900; or byte ptr [rax + 1], cl; ret; 
0x00000000000a37bc: add eax, 0xc84f; ret; 
0x000000000008a6a6: add eax, 0xcdf55; ret; 
0x000000000008cad6: add eax, 0xce6a5; ret; 
0x0000000000088426: add eax, 0xcea25; ret; 
0x000000000008cbf6: add eax, 0xcfd95; ret; 
0x000000000008be80: add eax, 0xd3ddb; ret; 
0x000000000009f32d: add eax, 0xd478d48; ret; 
0x00000000000a2c0c: add eax, 0xd48f; ret; 
0x000000000008be88: add eax, 0xd6563; ret; 
0x000000000011ffe2: add eax, 0xd9; lea rdx, qword ptr [rip + 0xcf02]; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x0000000000086d33: add eax, 0xdb398; ret; 
0x00000000000968f8: add eax, 0xe193b; mov r9d, r9d; movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x0000000000096858: add eax, 0xe19b7; mov r9d, r9d; movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x0000000000091d52: add eax, 0xe6479; mov r8, rdx; and r8d, 7; movsxd r8, dword ptr [rax + r8*4]; add rax, r8; jmp rax; 
0x0000000000091ae2: add eax, 0xe66c9; mov rcx, rdx; and ecx, 7; movsxd rcx, dword ptr [rax + rcx*4]; add rax, rcx; jmp rax; 
0x00000000001273be: add eax, 0xe8000000; jns 0x127357; lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000088875: add eax, 0xe8000000; ret 0xfa7d; 
0x00000000000b7e9e: add eax, 0xe9000000; ret 0xfff3; 
0x0000000000025517: add eax, 0xe9fffff4; ret; 
0x000000000014cfca: add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000081ddd: add eax, 0xf05f883; test ah, al; add byte ptr [rax], al; add dh, dh; ret; 
0x000000000010a008: add eax, 0xf3c6b2e9; call qword ptr [rax - 0x18]; 
0x0000000000083570: add eax, 0xf4aab; movsxd rdx, dword ptr [rax + rdi*4]; add rax, rdx; jmp rax; 
0x00000000000f610c: add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x00000000000f6131: add eax, 0xf6310000; mov rdi, r13; call rbx; 
0x00000000000f627a: add eax, 0xf6310000; mov rdi, r14; call rbx; 
0x00000000000f6313: add eax, 0xf6310000; mov rdi, r15; call rbx; 
0x00000000000ec85f: add eax, 0xf7002d16; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x000000000014cfd3: add eax, 0xf7f0ff3; ret; 
0x00000000001089d4: add eax, 0xf838b6e9; call qword ptr [rax - 0x18]; 
0x000000000011480e: add eax, 0xf8832074; push qword ptr [rdx - 0x3dbbf0fe]; ret; 
0x000000000004e1bf: add eax, 0xf8834800; dec dword ptr [rcx - 0x77]; ret 0x840f; 
0x000000000004b9ce: add eax, 0xf8834800; dec dword ptr [rcx - 0x77]; ret 0x850f; 
0x0000000000108ef4: add eax, 0xf8eb26e9; call qword ptr [rax - 0x18]; 
0x0000000000108ee4: add eax, 0xf8ec26e9; call qword ptr [rax - 0x18]; 
0x000000000010c064: add eax, 0xf95c66e9; call qword ptr [rax - 0x18]; 
0x000000000010be94: add eax, 0xf97246e9; call qword ptr [rax - 0x18]; 
0x000000000010c074: add eax, 0xf977a6e9; call qword ptr [rax - 0x18]; 
0x000000000010c1f8: add eax, 0xf97ca2e9; call qword ptr [rax - 0x18]; 
0x000000000010c234: add eax, 0xf97e56e9; call qword ptr [rax - 0x18]; 
0x000000000010c244: add eax, 0xf97e76e9; call qword ptr [rax - 0x18]; 
0x000000000010c214: add eax, 0xf98196e9; call qword ptr [rax - 0x18]; 
0x000000000010c224: add eax, 0xf98476e9; call qword ptr [rax - 0x18]; 
0x000000000010a264: add eax, 0xfbf316e9; call qword ptr [rax - 0x18]; 
0x0000000000109f24: add eax, 0xfc1616e9; call qword ptr [rax - 0x18]; 
0x0000000000109f14: add eax, 0xfc1626e9; call qword ptr [rax - 0x18]; 
0x00000000000b23ce: add eax, 0xfd02944; scasd eax, dword ptr [rdi]; ret; 
0x0000000000109ff4: add eax, 0xfe2016e9; call qword ptr [rax - 0x18]; 
0x000000000010ab18: add eax, 0xfe2492e9; call qword ptr [rax - 0x18]; 
0x000000000010ab38: add eax, 0xfe24d2e9; call qword ptr [rax - 0x18]; 
0x000000000010a2a4: add eax, 0xfe2886e9; call qword ptr [rax - 0x18]; 
0x0000000000109fb4: add eax, 0xfe2f36e9; call qword ptr [rax - 0x18]; 
0x000000000010a2b4: add eax, 0xfe7806e9; call qword ptr [rax - 0x18]; 
0x000000000010a2c4: add eax, 0xfe78b6e9; call qword ptr [rax - 0x18]; 
0x00000000001087ea: add eax, 0xfff0003d; dec dword ptr [rax - 0x77]; ret 0x1376; 
0x00000000000fc626: add eax, 0xfff8d4e8; dec dword ptr [rax + 0x63]; fisttp dword ptr [rax - 0x77]; sbb eax, 0x2c1cca; pop rbx; ret; 
0x0000000000036eb7: add eax, 0xfffe03e9; dec dword ptr [rax - 0x75]; add eax, 0x386fa4; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x00000000001355d4: add eax, 0xffff86e9; call qword ptr [rax - 0x18]; 
0x0000000000133534: add eax, 0xffffa6e9; call qword ptr [rax - 0x18]; 
0x0000000000092ba3: add eax, 0xfffffad8; add rsp, 8; ret; 
0x0000000000092b8c: add eax, 0xfffffaef; ret; 
0x00000000000cb767: add eax, 0xffffffb4; lea rdx, qword ptr [rip - 0x123]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000011128d: add eax, 1; mov qword ptr [rbx + 0x30], rax; mov eax, 1; pop rbx; ret; 
0x000000000008ca7b: add eax, 1; ret; 
0x00000000000a2ea8: add eax, 2; ret; 
0x0000000000121024: add eax, 3; add edx, 3; and eax, 0xfffffffc; and edx, 0xfffffffc; lea esi, dword ptr [rax + rdx + 0x28]; call qword ptr [rcx + 0x30]; 
0x00000000000a2ec1: add eax, 3; ret; 
0x0000000000086f96: add eax, 5; ret; 
0x000000000008cca5: add eax, 6; ret; 
0x0000000000117f40: add eax, 8; ret; 
0x0000000000088e12: add eax, 9; ret; 
0x0000000000022769: add eax, dword ptr [0]; ret; 
0x0000000000150da7: add eax, dword ptr [eax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001a0d5e: add eax, dword ptr [rax + 0xd1cfff1]; fidivr word ptr [rsi - 0xf]; jmp qword ptr [rdx]; 
0x00000000001463d4: add eax, dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000aca95: add eax, dword ptr [rax]; add al, ch; ret; 
0x0000000000102bae: add eax, dword ptr [rax]; add al, ch; stosb byte ptr [rdi], al; sal dl, 1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000028e82: add eax, dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000dfbec: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x9a69e; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x00000000000f9d0a: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x2c7b2c; add rsp, 0x18; ret; 
0x00000000000f9753: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x2c8093; add rsp, 8; ret; 
0x000000000006d176: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; xor eax, 0x10ac74; movsxd rcx, dword ptr [rsi + rcx*4]; add rsi, rcx; jmp rsi; 
0x0000000000135222: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; add eax, 0x28a664; call qword ptr [rax]; 
0x00000000000d651a: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x000000000015e6a2: add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000113c08: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x0000000000137afd: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a651: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000137b21: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000025263: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000f8339: add eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000136657: add eax, dword ptr [rax]; add byte ptr [rax], al; call 0xe4530; add rsp, 0x18; ret; 
0x0000000000079e0b: add eax, dword ptr [rax]; add byte ptr [rax], al; mov edx, 2; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000079d5a: add eax, dword ptr [rax]; add byte ptr [rax], al; mov edx, 2; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000f5c9d: add eax, dword ptr [rax]; add byte ptr [rax], al; mov esi, 1; mov rdi, r14; call rbx; 
0x00000000000f5d16: add eax, dword ptr [rax]; add byte ptr [rax], al; mov esi, 2; mov rdi, r14; call rbx; 
0x0000000000112f43: add eax, dword ptr [rax]; add byte ptr [rax], al; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000f663d: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x00000000000f6694: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x00000000000f6714: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x000000000012a9e5: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call qword ptr [rax]; 
0x00000000000f6814: add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x00000000000f7f4e: add eax, dword ptr [rax]; add byte ptr [rax], al; movsxd rsi, eax; movsxd rdi, r12d; mov eax, edx; syscall; 
0x00000000001087f8: add eax, dword ptr [rax]; add byte ptr [rax], al; neg ecx; cmp edx, -0x16; cmovne eax, ecx; ret; 
0x00000000000f83b7: add eax, dword ptr [rax]; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000a2f03: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000001ff66: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000001136c4: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; ret; 
0x00000000000d3f11: add eax, dword ptr [rax]; add byte ptr [rbx + 0x394104c0], al; ret 0x697e; 
0x000000000011581e: add eax, dword ptr [rax]; add byte ptr [rbx - 0x7cb7db84], cl; call qword ptr [rax]; 
0x00000000001080a5: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000132153: add eax, dword ptr [rax]; add byte ptr [rcx], al; ret 0x59e9; 
0x000000000010aaf4: add eax, dword ptr [rax]; add byte ptr [rdi + 8], dh; mov rax, rdi; sar rax, 6; ret; 
0x00000000000c4488: add eax, dword ptr [rax]; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x00000000000a18a0: add eax, dword ptr [rax]; add byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0x8341; 
0x0000000000103086: add eax, dword ptr [rax]; add byte ptr [rdx], al; call qword ptr [rbx + 0x28]; 
0x0000000000108145: add eax, dword ptr [rax]; add byte ptr [rsi + 0x80], bh; syscall; 
0x0000000000108a11: add eax, dword ptr [rax]; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000cb563: add eax, dword ptr [rax]; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x11; syscall; 
0x00000000000cb5c3: add eax, dword ptr [rax]; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x12; syscall; 
0x00000000000498be: add eax, dword ptr [rax]; mov rax, rbx; add rsp, 0x440; pop rbx; ret; 
0x00000000000f2227: add eax, dword ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x0000000000146877: add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000a1ac0: add eax, dword ptr [rax]; pop rbx; ret; 
0x00000000000a1ae3: add eax, dword ptr [rax]; ret; 
0x000000000002e5f1: add eax, dword ptr [rax]; syscall; 
0x000000000019d275: add eax, dword ptr [rbp - 0x73]; add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x000000000007c639: add eax, dword ptr [rbx + 0x10]; mov qword ptr [rbx + 8], rax; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000007c604: add eax, dword ptr [rbx + 0x18]; mov qword ptr [rbx + 8], rax; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x00000000000d1d27: add eax, dword ptr [rbx + 0x1f0f01e0]; add byte ptr [rax], r8b; pop rbx; ret; 
0x0000000000028e8a: add eax, dword ptr [rbx + 0x394807e0]; ret; 
0x0000000000121029: add eax, dword ptr [rbx - 0x1d7c0320]; cld; lea esi, dword ptr [rax + rdx + 0x28]; call qword ptr [rcx + 0x30]; 
0x0000000000121026: add eax, dword ptr [rbx - 0x1f7cfc3e]; cld; and edx, 0xfffffffc; lea esi, dword ptr [rax + rdx + 0x28]; call qword ptr [rcx + 0x30]; 
0x00000000000d0c12: add eax, dword ptr [rbx - 0x6bf0f903]; ret 0xfd83; 
0x000000000003461e: add eax, dword ptr [rbx - 0x6bf0fc08]; ret 0x70e9; 
0x000000000001fc9d: add eax, dword ptr [rbx - 0x7cb70038]; ret 0xeb04; 
0x000000000015a349: add eax, dword ptr [rbx]; add byte ptr [rax], al; ret; 
0x0000000000099abe: add eax, dword ptr [rcx]; add byte ptr [rax], al; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x00000000000eb19b: add eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x0000000000035758: add eax, dword ptr [rdi + 0x20]; pop rbx; ret; 
0x0000000000079491: add eax, dword ptr [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000019e212: add eax, dword ptr [rdi + 0xe]; and byte ptr [rbx + 0xac90204], al; ret; 
0x00000000000b22c1: add eax, dword ptr [rdi + rcx + 0x48]; ret 0x93ba; 
0x00000000001365a0: add eax, dword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x0000000000135e68: add eax, dword ptr [rdx + 8]; add rsp, 0x58; ret; 
0x00000000001ae57d: add eax, dword ptr [rdx]; add al, al; sub al, 0xf6; jmp qword ptr [rdi]; 
0x000000000015a449: add eax, dword ptr [rdx]; add byte ptr [rax], al; ret; 
0x0000000000117d25: add eax, dword ptr [rdx]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fd5ba: add eax, dword ptr [rsi + rdx]; ret; 
0x000000000015e738: add eax, dword ptr fs:[rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000001510a7: add eax, dword ptr fs:[rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000a1b85: add eax, eax; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000006c75f: add eax, eax; jmp rax; 
0x000000000004f210: add eax, eax; mov eax, r8d; ret; 
0x0000000000002bbb: add eax, eax; push rsi; call 0xfffffffff3f8f43c; ret; 
0x00000000000970a8: add eax, eax; ret; 
0x0000000000107fd3: add eax, eax; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001306db: add eax, ebp; iretd; and dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000005f065: add eax, ebp; jmp rax; 
0x000000000005f143: add eax, ebp; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005ef4a: add eax, ebp; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 0; jmp rax; 
0x000000000005efe8: add eax, ebp; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 1; jmp rax; 
0x000000000005f1d7: add eax, ebp; mov dword ptr [rbp - 0x1100], 0x20; mov dword ptr [rbp - 0x10fc], 1; jmp rax; 
0x000000000005f18d: add eax, ebp; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005ef9e: add eax, ebp; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000005f22b: add eax, ebp; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f0a5: add eax, ebp; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f2e0: add eax, ebp; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f0ef: add eax, ebp; mov dword ptr [rbp - 0x1138], 1; mov dword ptr [rbp - 0x1128], 0; jmp rax; 
0x000000000005f32a: add eax, ebp; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x0000000000034ede: add eax, ebx; jmp rax; 
0x00000000000b15c5: add eax, ecx; cmp esi, 0x3b; cmova esi, r8d; imul esi, edx; add eax, esi; ret; 
0x0000000000091af2: add eax, ecx; jmp rax; 
0x00000000000368e6: add eax, ecx; or edx, 0x3ffe; mov word ptr [rsp - 0x10], dx; mov dword ptr [rdi], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000008bb9a: add eax, ecx; ret; 
0x00000000000970a5: add eax, edi; add rax, r8; ret; 
0x000000000008bb97: add eax, edi; add rax, rcx; ret; 
0x000000000018c289: add eax, edi; call rsp; 
0x000000000006d0bd: add eax, edi; jmp rax; 
0x000000000008a70b: add eax, edi; ret; 
0x000000000013caba: add eax, edi; sub rax, rsi; ret; 
0x0000000000121bfd: add eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000054b89: add eax, edx; jmp rax; 
0x0000000000121c1e: add eax, edx; ret; 
0x000000000003606d: add eax, edx; shr rax, 0x3f; ret; 
0x0000000000088b5e: add eax, edx; sub rax, rdi; ret; 
0x00000000000f2225: add eax, esi; add eax, dword ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x00000000001276ab: add eax, esi; jmp rax; 
0x00000000000b15d1: add eax, esi; ret; 
0x000000000004dd98: add eax, esp; jmp rax; 
0x000000000004d595: add eax, esp; mov byte ptr [rbp - 0x4fa], 0x20; mov dword ptr [rbp - 0x530], 1; jmp rax; 
0x000000000004ecb9: add eax, esp; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004ed68: add eax, esp; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004e980: add eax, esp; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004d53e: add eax, esp; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004baa5: add eax, esp; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000004e9e1: add eax, esp; mov dword ptr [rbp - 0x558], 1; jmp rax; 
0x000000000004dec4: add eax, esp; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004ec58: add eax, esp; mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004e79b: add eax, esp; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004e83e: add eax, esp; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000004f13f: add ebp, 0x30; pop rbx; mov eax, ebp; pop rbp; ret; 
0x000000000007c14d: add ebp, dword ptr [rax + 0x485e7401]; mov eax, dword ptr [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000121d4c: add ebp, dword ptr [rbx + 0x50]; sub edx, r14d; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x00000000000b0955: add ebp, dword ptr [rcx]; ret 0x48d; 
0x000000000011f061: add ebp, dword ptr [rcx]; ret 0x828d; 
0x00000000000d310b: add ebp, eax; outsd dx, dword ptr [rsi]; ret; 
0x0000000000107a93: add ebp, eax; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000148089: add ebp, ecx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000cb79b: add ebp, ecx; out dx, eax; cmp al, 0xf5; jmp qword ptr [rsi + 0x2e]; 
0x000000000018f6e1: add ebp, edx; call qword ptr [rdi]; 
0x000000000000314e: add ebp, esi; mov eax, 0xa1a3e95a; ret 0xba88; 
0x000000000014da89: add ebx, dword ptr [rax + 0x63490003]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000007b4d3: add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000fa2f4: add ebx, dword ptr [rbx + 0x5d]; ret; 
0x000000000014d789: add ebx, dword ptr [rbx + 0x63490003]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d489: add ebx, dword ptr [rsi + 0x63490003]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000056514: add ebx, ebp; ret 0x9d8b; 
0x0000000000026ffc: add ebx, ebp; ret; 
0x00000000000e2b53: add ebx, edx; jmp rbx; 
0x000000000014d193: add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000003cd40: add ecx, 0x3039; and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x0000000000117ef5: add ecx, 2; mov dword ptr [r8], edi; mov qword ptr [r9], rcx; ret; 
0x0000000000099bca: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; ret; 
0x000000000012a02d: add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0x4812; 
0x000000000011592a: add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0xe801; 
0x00000000001044bd: add ecx, dword ptr [rax + 0x29]; ret 0x394c; 
0x0000000000116d64: add ecx, dword ptr [rax + 0x29]; ret 0x7a8d; 
0x000000000007e7d4: add ecx, dword ptr [rax + 0x29]; ret; 
0x00000000000868c5: add ecx, dword ptr [rax + 1]; ret 0x6348; 
0x00000000000a37da: add ecx, dword ptr [rax + rax]; ret; 
0x0000000000081135: add ecx, dword ptr [rax - 0x3f]; call 0x40cf4248; mov byte ptr [rsi + rbx], bh; mov rax, rsi; pop rbx; ret; 
0x00000000000ecf04: add ecx, dword ptr [rax - 0x68]; ret; 
0x00000000001180dc: add ecx, dword ptr [rax - 0x68]; shr rax, 4; ret; 
0x000000000015e6e3: add ecx, dword ptr [rax - 0x73]; add rcx, qword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000f3134: add ecx, dword ptr [rax - 0x77]; adc bl, dh; ret; 
0x00000000000967ea: add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x0000000000093ec9: add ecx, dword ptr [rax - 0x77]; fisttp word ptr [rax + 0x29]; ret 0x2948; 
0x0000000000120f7f: add ecx, dword ptr [rax - 0x77]; out dx, eax; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x00000000000f794b: add ecx, dword ptr [rax - 0x7b]; ror byte ptr [rax + 0xf], 0x48; ret 0xc148; 
0x0000000000129d94: add ecx, dword ptr [rax - 0x7b]; sal byte ptr [rsp + rbx + 0x48], 0x8b; cmp byte ptr [rax - 0x7b], cl; push qword ptr [rdx + rcx + 0x48]; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000003aa36: add ecx, dword ptr [rax - 0x7d]; ret 0xf301; 
0x000000000006f28a: add ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000f5e81: add ecx, dword ptr [rax]; add byte ptr [rax], al; xor esi, esi; mov rdi, r13; call rbx; 
0x000000000010298f: add ecx, dword ptr [rbp - 0x77]; ret; 
0x000000000014cf02: add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000001aa2b2: add ecx, dword ptr [rbx + 1]; ret; 
0x000000000014e689: add ecx, dword ptr [rbx + rax + 0x14634900]; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000471f8: add ecx, dword ptr [rcx + 0x29]; ret; 
0x000000000009e454: add ecx, dword ptr [rcx + 0x357890f]; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000009f284: add ecx, dword ptr [rcx + 0x357890f]; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009ce44: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x00000000000a0cf4: add ecx, dword ptr [rcx + 0x357890f]; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x000000000002a9f9: add ecx, dword ptr [rcx + 0x39]; ret; 
0x000000000014e989: add ecx, dword ptr [rcx + 0x63490003]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000086810: add ecx, dword ptr [rcx + rcx*4 + 0x4b]; mov rdi, r9; call rcx; 
0x0000000000099bcb: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; ret; 
0x0000000000055acb: add ecx, dword ptr [rcx - 0x7d]; ret 0x4101; 
0x00000000000e1c7f: add ecx, dword ptr [rcx]; ret 0xf983; 
0x00000000001aa2af: add ecx, dword ptr [rdi + 0x14b0302]; ret; 
0x000000000014e389: add ecx, dword ptr [rdi + 0x63490003]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001352d1: add ecx, dword ptr [rdi]; call 0x12c5c2; jmp qword ptr [rsi + 0xf]; 
0x000000000008508d: add ecx, dword ptr [rdi]; test byte ptr [rcx + rax], bh; add byte ptr [rcx + rcx*4 - 0xa], cl; call rax; 
0x000000000009d670: add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x000000000015e6e7: add ecx, dword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000034621: add ecx, dword ptr [rdi]; xchg eax, esp; ret 0x70e9; 
0x000000000007069a: add ecx, dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x000000000019304c: add ecx, dword ptr [rdx - 0x15]; jmp qword ptr [rdx]; 
0x00000000000e3b21: add ecx, dword ptr [rdx]; add byte ptr [rsi + rdx*8 + 0x5b], dh; pop rbp; xor eax, eax; pop r12; ret; 
0x000000000013aa79: add ecx, eax; add al, byte ptr [rax]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000018dc70: add ecx, eax; cli; call rsp; 
0x0000000000054a5a: add ecx, eax; jmp rcx; 
0x0000000000041dd8: add ecx, ebp; insb byte ptr [rdi], dx; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000049668: add ecx, ebp; ret; 
0x000000000007966c: add ecx, ebp; sar esi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000013625d: add ecx, ebx; call rax; 
0x000000000015fc82: add ecx, ebx; jmp rcx; 
0x00000000000fa1c4: add ecx, ebx; ret; 
0x000000000018cdf9: add ecx, edi; jmp rsp; 
0x000000000006d298: add ecx, edx; jmp rcx; 
0x00000000000a1b44: add ecx, esi; jmp rcx; 
0x00000000000a0785: add edi, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8001]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe05: add edi, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8901]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e325: add edi, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0xda201]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd25: add edi, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0xdb62d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001245dd: add edi, 0x10; jmp rcx; 
0x00000000000a07ed: add edi, 0x10; lea r11, qword ptr [rip + 0xd7f9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe6d: add edi, 0x10; lea r11, qword ptr [rip + 0xd889d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f776: add edi, 0x10; lea r11, qword ptr [rip + 0xd8f50]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f757: add edi, 0x10; lea r11, qword ptr [rip + 0xd8f6f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e38d: add edi, 0x10; lea r11, qword ptr [rip + 0xda19d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df66: add edi, 0x10; lea r11, qword ptr [rip + 0xda580]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df47: add edi, 0x10; lea r11, qword ptr [rip + 0xda59f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000011f3d0: add edi, 0x18; xor eax, eax; pop rbp; jmp rcx; 
0x0000000000136315: add edi, 0x1c; mov al, 0xca; mov esi, 0x81; syscall; 
0x00000000000a0822: add edi, 0x20; lea r11, qword ptr [rip + 0xd7f68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fea2: add edi, 0x20; lea r11, qword ptr [rip + 0xd8868]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e3c2: add edi, 0x20; lea r11, qword ptr [rip + 0xda168]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001214fa: add edi, 0x23b0; xor eax, eax; jmp rcx; 
0x00000000001214b3: add edi, 0x23b0; xor eax, eax; pop rbp; jmp rcx; 
0x00000000000f964d: add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000108454: add edi, 0x28; mov eax, r9d; syscall; 
0x0000000000108142: add edi, 0x308; mov esi, 0x80; syscall; 
0x00000000000a06da: add edi, 0x30; lea r11, qword ptr [rip + 0xd80b0]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fd6f: add edi, 0x30; lea r11, qword ptr [rip + 0xd899b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e28f: add edi, 0x30; lea r11, qword ptr [rip + 0xda29b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cc8f: add edi, 0x30; lea r11, qword ptr [rip + 0xdb6c7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000127ed4: add edi, 0x58; jmp rcx; 
0x0000000000127624: add edi, 0x68; jmp rcx; 
0x0000000000123a47: add edi, 0xc8; jmp rcx; 
0x00000000000967ac: add edi, 1; mov rax, rdi; ret; 
0x0000000000097489: add edi, 1; xor eax, eax; test dl, dl; cmovne rax, rdi; ret; 
0x0000000000117d97: add edi, 2; call 0x8c4b0; mov eax, ebx; pop rbx; ret; 
0x00000000000967d5: add edi, 2; mov rax, rdi; ret; 
0x00000000000967e8: add edi, 3; mov rax, rdi; ret; 
0x00000000000967f5: add edi, 4; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x0000000000096808: add edi, 5; mov dword ptr [rdi - 5], eax; mov rax, rdi; ret; 
0x0000000000096822: add edi, 6; mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x000000000009683a: add edi, 7; mov byte ptr [rdi - 1], r8b; mov dword ptr [rdi - 7], eax; mov rax, rdi; ret; 
0x00000000000967bd: add edi, 8; mov dword ptr [rdi - 8], eax; mov eax, dword ptr [rsp + 0x18]; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x000000000007bb01: add edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000127099: add edi, eax; jmp rdi; 
0x00000000001b52c1: add edi, ebx; jmp qword ptr [rdx]; 
0x00000000000a08fe: add edi, ecx; add rsi, rcx; lea r11, qword ptr [rip + 0xd7f0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec2e: add edi, ecx; add rsi, rcx; lea r11, qword ptr [rip + 0xd9a06]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d58e: add edi, ecx; add rsi, rcx; lea r11, qword ptr [rip + 0xdaec6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000151461: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x36323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001512e1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x364a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151161: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x36623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150fe2: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x367a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150e61: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x36923]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150ce1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x36aa3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150b61: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x36c23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001509e1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x36da3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150861: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x36f23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001506e1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x370a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150561: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x37223]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001503e1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x373a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150261: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x37523]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001500e1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x376a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ff61: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x37823]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e981: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x38903]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e801: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x38a83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e681: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x38c03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e502: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x38d82]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e381: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x38f03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e201: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x39083]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e081: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x39203]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014df01: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x39383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dd81: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x39503]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dc01: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x39683]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014da81: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x39803]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d901: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x39983]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d781: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x39b03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d601: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x39c83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d481: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x39e03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014beb1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3aed3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bd31: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b053]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bbb1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b1d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ba32: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b352]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b8b1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b4d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b731: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b653]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b5b1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b431: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b2b1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3bad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b131: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3bc53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014afb1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3bdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ae31: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3bf53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014acb1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3c0d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ab31: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3c253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a9b1: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3c3d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147e67: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x3eb1d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145497: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x4132d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ac7: add edi, edx; add rsi, rdx; lea r11, qword ptr [rip + 0x43b3d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000161d01: add edi, edx; lea r11, qword ptr [rip + 0x247c6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161c87: add edi, edx; lea r11, qword ptr [rip + 0x24840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161bf8: add edi, edx; lea r11, qword ptr [rip + 0x248cf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001619ed: add edi, edx; lea r11, qword ptr [rip + 0x24ada]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001618bb: add edi, edx; lea r11, qword ptr [rip + 0x24c0c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001617f5: add edi, edx; lea r11, qword ptr [rip + 0x24cd2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161777: add edi, edx; lea r11, qword ptr [rip + 0x24d50]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001616e0: add edi, edx; lea r11, qword ptr [rip + 0x24de7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001614e4: add edi, edx; lea r11, qword ptr [rip + 0x24fe3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001613b3: add edi, edx; lea r11, qword ptr [rip + 0x25114]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001612b2: add edi, edx; lea r11, qword ptr [rip + 0x25215]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001606d1: add edi, edx; lea r11, qword ptr [rip + 0x25cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160657: add edi, edx; lea r11, qword ptr [rip + 0x25d30]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001605c8: add edi, edx; lea r11, qword ptr [rip + 0x25dbf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001603bd: add edi, edx; lea r11, qword ptr [rip + 0x25fca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016028b: add edi, edx; lea r11, qword ptr [rip + 0x260fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001601c5: add edi, edx; lea r11, qword ptr [rip + 0x261c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160147: add edi, edx; lea r11, qword ptr [rip + 0x26240]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001600b0: add edi, edx; lea r11, qword ptr [rip + 0x262d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015feb4: add edi, edx; lea r11, qword ptr [rip + 0x264d3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fd83: add edi, edx; lea r11, qword ptr [rip + 0x26604]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fc74: add edi, edx; lea r11, qword ptr [rip + 0x26713]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001516cc: add edi, edx; lea r11, qword ptr [rip + 0x360bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fe27: add edi, edx; lea r11, qword ptr [rip + 0x37960]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fccb: add edi, edx; lea r11, qword ptr [rip + 0x37abc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ebd8: add edi, edx; lea r11, qword ptr [rip + 0x386af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d347: add edi, edx; lea r11, qword ptr [rip + 0x39f40]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1d8: add edi, edx; lea r11, qword ptr [rip + 0x3a0af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c108: add edi, edx; lea r11, qword ptr [rip + 0x3ac7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a51a: add edi, edx; lea r11, qword ptr [rip + 0x3c46d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a877: add edi, edx; lea r11, qword ptr [rip + 0x3c510]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a705: add edi, edx; lea r11, qword ptr [rip + 0x3c682]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147d7b: add edi, edx; lea r11, qword ptr [rip + 0x3ec0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147cb6: add edi, edx; lea r11, qword ptr [rip + 0x3ecd1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001453ab: add edi, edx; lea r11, qword ptr [rip + 0x4141c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001452e6: add edi, edx; lea r11, qword ptr [rip + 0x414e1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001429db: add edi, edx; lea r11, qword ptr [rip + 0x43c2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142916: add edi, edx; lea r11, qword ptr [rip + 0x43cf1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000117ec5: add edi, edx; mov qword ptr [r9], rdi; ret; 
0x0000000000148a60: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3df22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146090: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40732]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001436c0: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42f42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a44c: add edi, edx; sfence; lea r11, qword ptr [rip + 0x3c538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147a64: add edi, edx; sfence; lea r11, qword ptr [rip + 0x3ed60]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145094: add edi, edx; sfence; lea r11, qword ptr [rip + 0x41570]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001b1831: add edi, esi; call qword ptr [rdi]; 
0x0000000000037406: add edi, esi; ret 0; 
0x0000000000186871: add edi, esp; push qword ptr [rax + 5]; cld; call qword ptr [rax + 7]; 
0x00000000001868b1: add edi, esp; push rax; add al, 0xfc; call rax; 
0x00000000000a07a8: add edx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xd7fdf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe28: add edx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xd88df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea88: add edx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xd9b2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e348: add edx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xda1df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3f8: add edx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xdafdb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd48: add edx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xdb60b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000301b6: add edx, 0x200; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000021fd4: add edx, 0x47; shl rdx, 4; lea rdi, qword ptr [r14 + rdx]; call rax; 
0x00000000000fccfb: add edx, 1; mov dword ptr [rax], edx; ret; 
0x00000000000fcaac: add edx, 1; mov word ptr [rax], dx; ret; 
0x0000000000118f9e: add edx, 1; syscall; 
0x0000000000118f9e: add edx, 1; syscall; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000117e51: add edx, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x0000000000121027: add edx, 3; and eax, 0xfffffffc; and edx, 0xfffffffc; lea esi, dword ptr [rax + rdx + 0x28]; call qword ptr [rcx + 0x30]; 
0x00000000000f38c9: add edx, 8; mov qword ptr [rip + 0x2cdd5d], rdx; add rsp, 8; ret; 
0x000000000014dd89: add edx, dword ptr [rbp + 0x63490003]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e089: add edx, dword ptr [rdx + 0x63490003]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000225f9: add edx, dword ptr [rsi]; cmp al, byte ptr [rax]; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x00000000000f2315: add edx, dword ptr [rsp + 0x38]; mov eax, edx; add rsp, 0x48; ret; 
0x0000000000022b71: add edx, eax; jmp rdx; 
0x0000000000039122: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x00000000000decd7: add edx, ecx; jmp rdx; 
0x0000000000034c75: add edx, edi; jmp rdx; 
0x0000000000117fe0: add edx, edi; mov qword ptr [rdx + 8], rax; mov rax, qword ptr [rsi + 8]; mov qword ptr [rdx + 0x10], rax; xor eax, eax; ret; 
0x00000000000fc105: add edx, edx; lea rsi, qword ptr [rbp - 0x430]; mov rdi, r9; movsxd rdx, edx; mov eax, 0x14; syscall; 
0x00000000000a1b04: add edx, esi; jmp rdx; 
0x00000000000a07e9: add esi, 0x10; add rdi, 0x10; lea r11, qword ptr [rip + 0xd7f9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe69: add esi, 0x10; add rdi, 0x10; lea r11, qword ptr [rip + 0xd889d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e389: add esi, 0x10; add rdi, 0x10; lea r11, qword ptr [rip + 0xda19d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a081e: add esi, 0x20; add rdi, 0x20; lea r11, qword ptr [rip + 0xd7f68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe9e: add esi, 0x20; add rdi, 0x20; lea r11, qword ptr [rip + 0xd8868]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e3be: add esi, 0x20; add rdi, 0x20; lea r11, qword ptr [rip + 0xda168]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a06d6: add esi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0xd80b0]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fd6b: add esi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0xd899b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e28b: add esi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0xda29b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cc8b: add esi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0xdb6c7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000126645: add esi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000000bf56c: add esi, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xbae9; 
0x00000000000a0cf9: add esi, dword ptr [rax]; in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x00000000001180bd: add esi, dword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000001298f6: add esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; pop rbx; pop rbp; ret; 
0x0000000000129d5e: add esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001312f5: add esi, dword ptr [rcx]; ror byte ptr [rbx + 0x453b0840], cl; or byte ptr [rdi], 0x94; ret 0xea83; 
0x00000000000886b6: add esi, dword ptr [rdi + rbx + 0x40]; movsx edx, dh; mov eax, edx; ret; 
0x00000000001211c2: add esi, dword ptr [rsi + 0xb]; mov eax, 2; ret; 
0x0000000000096c93: add esi, eax; add dword ptr [rax], eax; mov qword ptr [rdi], rdx; ret; 
0x000000000006c81f: add esi, eax; jmp rsi; 
0x000000000012e263: add esi, eax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x0000000000199299: add esi, ebp; jmp rax; 
0x0000000000198fb4: add esi, ebx; in eax, dx; jmp qword ptr [rdx]; 
0x000000000014d0b3: add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000000a0761: add esi, ecx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8026]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0744: add esi, ecx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8043]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fde1: add esi, ecx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8926]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fdc4: add esi, ecx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8943]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea31: add esi, ecx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd9b82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e301: add esi, ecx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xda226]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e2e4: add esi, ecx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xda243]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3a1: add esi, ecx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xdb032]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000006d185: add esi, ecx; jmp rsi; 
0x00000000000a094a: add esi, ecx; lea r11, qword ptr [rip + 0xd7ec1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a092a: add esi, ecx; lea r11, qword ptr [rip + 0xd7ee1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0901: add esi, ecx; lea r11, qword ptr [rip + 0xd7f0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec7a: add esi, ecx; lea r11, qword ptr [rip + 0xd99bd]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec5a: add esi, ecx; lea r11, qword ptr [rip + 0xd99dd]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec31: add esi, ecx; lea r11, qword ptr [rip + 0xd9a06]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d5da: add esi, ecx; lea r11, qword ptr [rip + 0xdae7d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d5ba: add esi, ecx; lea r11, qword ptr [rip + 0xdae9d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d591: add esi, ecx; lea r11, qword ptr [rip + 0xdaec6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000018b8e1: add esi, edi; inc esp; test dword ptr [rcx], 0xf704a400; jmp rsp; 
0x00000000000a1b9b: add esi, edi; int1; pop rbx; mov eax, eax; ret; 
0x0000000000161cfe: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x247c6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161c84: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x24840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161bf5: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x248cf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001619ea: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x24ada]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001618b8: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x24c0c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001617f2: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x24cd2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161774: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x24d50]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001616dd: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x24de7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001614e1: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x24fe3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001613b0: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x25114]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001612af: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x25215]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001606ce: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x25cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160654: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x25d30]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001605c5: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x25dbf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001603ba: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x25fca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160288: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x260fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001601c2: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x261c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160144: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x26240]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001600ad: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x262d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015feb1: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x264d3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fd80: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x26604]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fc71: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x26713]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001516c9: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x360bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fe24: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x37960]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fcc8: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x37abc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ebd5: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x386af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d344: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x39f40]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1d5: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x3a0af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c105: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x3ac7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a517: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x3c46d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a874: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x3c510]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a702: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x3c682]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147d78: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x3ec0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147cb3: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x3ecd1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001453a8: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x4141c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001452e3: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x414e1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001429d8: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x43c2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142913: add esi, edx; add rdi, rdx; lea r11, qword ptr [rip + 0x43cf1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151464: add esi, edx; lea r11, qword ptr [rip + 0x36323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001512e4: add esi, edx; lea r11, qword ptr [rip + 0x364a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151164: add esi, edx; lea r11, qword ptr [rip + 0x36623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150fe5: add esi, edx; lea r11, qword ptr [rip + 0x367a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150e64: add esi, edx; lea r11, qword ptr [rip + 0x36923]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150ce4: add esi, edx; lea r11, qword ptr [rip + 0x36aa3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150b64: add esi, edx; lea r11, qword ptr [rip + 0x36c23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001509e4: add esi, edx; lea r11, qword ptr [rip + 0x36da3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150864: add esi, edx; lea r11, qword ptr [rip + 0x36f23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001506e4: add esi, edx; lea r11, qword ptr [rip + 0x370a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150564: add esi, edx; lea r11, qword ptr [rip + 0x37223]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001503e4: add esi, edx; lea r11, qword ptr [rip + 0x373a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150264: add esi, edx; lea r11, qword ptr [rip + 0x37523]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001500e4: add esi, edx; lea r11, qword ptr [rip + 0x376a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ff64: add esi, edx; lea r11, qword ptr [rip + 0x37823]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e984: add esi, edx; lea r11, qword ptr [rip + 0x38903]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e804: add esi, edx; lea r11, qword ptr [rip + 0x38a83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e684: add esi, edx; lea r11, qword ptr [rip + 0x38c03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e505: add esi, edx; lea r11, qword ptr [rip + 0x38d82]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e384: add esi, edx; lea r11, qword ptr [rip + 0x38f03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e204: add esi, edx; lea r11, qword ptr [rip + 0x39083]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e084: add esi, edx; lea r11, qword ptr [rip + 0x39203]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014df04: add esi, edx; lea r11, qword ptr [rip + 0x39383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dd84: add esi, edx; lea r11, qword ptr [rip + 0x39503]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dc04: add esi, edx; lea r11, qword ptr [rip + 0x39683]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014da84: add esi, edx; lea r11, qword ptr [rip + 0x39803]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d904: add esi, edx; lea r11, qword ptr [rip + 0x39983]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d784: add esi, edx; lea r11, qword ptr [rip + 0x39b03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d604: add esi, edx; lea r11, qword ptr [rip + 0x39c83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d484: add esi, edx; lea r11, qword ptr [rip + 0x39e03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014beb4: add esi, edx; lea r11, qword ptr [rip + 0x3aed3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bd34: add esi, edx; lea r11, qword ptr [rip + 0x3b053]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bbb4: add esi, edx; lea r11, qword ptr [rip + 0x3b1d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ba35: add esi, edx; lea r11, qword ptr [rip + 0x3b352]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b8b4: add esi, edx; lea r11, qword ptr [rip + 0x3b4d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b734: add esi, edx; lea r11, qword ptr [rip + 0x3b653]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b5b4: add esi, edx; lea r11, qword ptr [rip + 0x3b7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b434: add esi, edx; lea r11, qword ptr [rip + 0x3b953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b2b4: add esi, edx; lea r11, qword ptr [rip + 0x3bad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b134: add esi, edx; lea r11, qword ptr [rip + 0x3bc53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014afb4: add esi, edx; lea r11, qword ptr [rip + 0x3bdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ae34: add esi, edx; lea r11, qword ptr [rip + 0x3bf53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014acb4: add esi, edx; lea r11, qword ptr [rip + 0x3c0d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ab34: add esi, edx; lea r11, qword ptr [rip + 0x3c253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a9b4: add esi, edx; lea r11, qword ptr [rip + 0x3c3d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149390: add esi, edx; lea r11, qword ptr [rip + 0x3d5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149240: add esi, edx; lea r11, qword ptr [rip + 0x3d747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001490f0: add esi, edx; lea r11, qword ptr [rip + 0x3d897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148fa0: add esi, edx; lea r11, qword ptr [rip + 0x3d9e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148e50: add esi, edx; lea r11, qword ptr [rip + 0x3db37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148d00: add esi, edx; lea r11, qword ptr [rip + 0x3dc87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148bb0: add esi, edx; lea r11, qword ptr [rip + 0x3ddd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148910: add esi, edx; lea r11, qword ptr [rip + 0x3e077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001487c0: add esi, edx; lea r11, qword ptr [rip + 0x3e1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148670: add esi, edx; lea r11, qword ptr [rip + 0x3e317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148520: add esi, edx; lea r11, qword ptr [rip + 0x3e467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001483d0: add esi, edx; lea r11, qword ptr [rip + 0x3e5b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148280: add esi, edx; lea r11, qword ptr [rip + 0x3e707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148130: add esi, edx; lea r11, qword ptr [rip + 0x3e857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147e6a: add esi, edx; lea r11, qword ptr [rip + 0x3eb1d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001469c0: add esi, edx; lea r11, qword ptr [rip + 0x3fe07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146870: add esi, edx; lea r11, qword ptr [rip + 0x3ff57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146720: add esi, edx; lea r11, qword ptr [rip + 0x400a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001465d0: add esi, edx; lea r11, qword ptr [rip + 0x401f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146480: add esi, edx; lea r11, qword ptr [rip + 0x40347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146330: add esi, edx; lea r11, qword ptr [rip + 0x40497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001461e0: add esi, edx; lea r11, qword ptr [rip + 0x405e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145f40: add esi, edx; lea r11, qword ptr [rip + 0x40887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145df0: add esi, edx; lea r11, qword ptr [rip + 0x409d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145ca0: add esi, edx; lea r11, qword ptr [rip + 0x40b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145b50: add esi, edx; lea r11, qword ptr [rip + 0x40c77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a00: add esi, edx; lea r11, qword ptr [rip + 0x40dc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001458b0: add esi, edx; lea r11, qword ptr [rip + 0x40f17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145760: add esi, edx; lea r11, qword ptr [rip + 0x41067]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014549a: add esi, edx; lea r11, qword ptr [rip + 0x4132d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ff0: add esi, edx; lea r11, qword ptr [rip + 0x42617]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ea0: add esi, edx; lea r11, qword ptr [rip + 0x42767]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143d50: add esi, edx; lea r11, qword ptr [rip + 0x428b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c00: add esi, edx; lea r11, qword ptr [rip + 0x42a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ab0: add esi, edx; lea r11, qword ptr [rip + 0x42b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143960: add esi, edx; lea r11, qword ptr [rip + 0x42ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143810: add esi, edx; lea r11, qword ptr [rip + 0x42df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143570: add esi, edx; lea r11, qword ptr [rip + 0x43097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143420: add esi, edx; lea r11, qword ptr [rip + 0x431e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001432d0: add esi, edx; lea r11, qword ptr [rip + 0x43337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143180: add esi, edx; lea r11, qword ptr [rip + 0x43487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143030: add esi, edx; lea r11, qword ptr [rip + 0x435d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ee0: add esi, edx; lea r11, qword ptr [rip + 0x43727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142d90: add esi, edx; lea r11, qword ptr [rip + 0x43877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142aca: add esi, edx; lea r11, qword ptr [rip + 0x43b3d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001ac751: add esi, esi; call qword ptr [rcx]; 
0x000000000003762a: add esi, esi; ret 0xf304; 
0x000000000008c3a0: add esi, esi; ret; 
0x000000000005d5b3: add esp, 0x1000; pop rbx; ret; 
0x000000000005d5c1: add esp, 0x1000; xor eax, eax; pop rbx; ret; 
0x000000000005d469: add esp, 0x1008; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000012a041: add esp, 0x100; pop rbx; pop rbp; pop r12; ret; 
0x000000000008b9df: add esp, 0x100; ret; 
0x00000000000885cd: add esp, 0x100; sub rax, rdx; ret; 
0x000000000008aa5d: add esp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000001086d6: add esp, 0x1010; pop rbx; pop rbp; pop r12; ret; 
0x000000000003719d: add esp, 0x108; ret; 
0x00000000000f96f4: add esp, 0x10; lea rax, qword ptr [rip + 0x2c8112]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f0bde: add esp, 0x10; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f214f: add esp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000f8fcf: add esp, 0x10; mov eax, 1; pop rbx; ret; 
0x0000000000085ba4: add esp, 0x10; mov eax, ebx; pop rbx; ret; 
0x0000000000111a91: add esp, 0x10; mov eax, edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000122004: add esp, 0x10; mov eax, edx; pop rbx; ret; 
0x000000000006c980: add esp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f9d4c: add esp, 0x10; mov rax, rbx; pop rbx; ret; 
0x0000000000070126: add esp, 0x10; mov rax, rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000006ffa7: add esp, 0x10; pop rbx; jmp rax; 
0x0000000000108271: add esp, 0x10; pop rbx; pop rbp; and eax, 0xc; pop r12; ret; 
0x000000000008678f: add esp, 0x10; pop rbx; pop rbp; mov eax, 1; pop r12; ret; 
0x000000000006cd4a: add esp, 0x10; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000034721: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000007c60e: add esp, 0x10; pop rbx; ret; 
0x0000000000121ab0: add esp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000007c641: add esp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000000ec75e: add esp, 0x120; pop rbx; ret; 
0x0000000000037433: add esp, 0x140; pop rbx; ret; 
0x0000000000036bdb: add esp, 0x148; ret; 
0x000000000012a334: add esp, 0x158; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000462e6: add esp, 0x170; pop rbx; pop rbp; pop r12; ret; 
0x0000000000022129: add esp, 0x18; jmp rax; 
0x000000000011210f: add esp, 0x18; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000005db17: add esp, 0x18; mov eax, edx; ret; 
0x00000000000e4f0e: add esp, 0x18; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000cb640: add esp, 0x18; mov rax, rdx; ret; 
0x000000000005db46: add esp, 0x18; movzx eax, al; neg eax; ret; 
0x000000000012e7c9: add esp, 0x18; movzx eax, al; ret; 
0x0000000000086978: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000003d1b8: add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000036fcb: add esp, 0x18; ret; 
0x00000000001201dc: add esp, 0x18; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000f1bcb: add esp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x00000000000eca53: add esp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000f9ca7: add esp, 0x20; lea rax, qword ptr [rip + 0x2c7bcf]; pop rbx; pop rbp; pop r12; ret; 
0x000000000006f781: add esp, 0x20; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ebdb7: add esp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000001201a1: add esp, 0x20; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f05a4: add esp, 0x20; mov eax, ebx; pop rbx; ret; 
0x000000000006e60b: add esp, 0x20; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000049b56: add esp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000024310: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000036953: add esp, 0x20; pop rbx; ret; 
0x00000000000bf706: add esp, 0x20; sar eax, 0x1f; pop rbx; ret; 
0x000000000006e593: add esp, 0x20; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000aedc1: add esp, 0x20; xor eax, eax; pop rbx; ret; 
0x0000000000038106: add esp, 0x240; pop rbx; pop rbp; pop r12; ret; 
0x0000000000073d8d: add esp, 0x248; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002217b: add esp, 0x28; jmp rax; 
0x000000000005d50f: add esp, 0x28; lea rax, qword ptr [rip + 0x363417]; pop rbx; pop rbp; ret; 
0x00000000000fa5ca: add esp, 0x28; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000000fb2fe: add esp, 0x28; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000b1334: add esp, 0x28; mov rax, rdx; ret; 
0x0000000000076939: add esp, 0x28; pop rbx; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000012d0d5: add esp, 0x28; pop rbx; movzx eax, al; pop rbp; ret; 
0x0000000000021dc9: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000045f26: add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000487f2: add esp, 0x28; ret; 
0x000000000010ad99: add esp, 0x28; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000011ee25: add esp, 0x30; lea rax, qword ptr [rip + 0x2a4871]; pop rbx; ret; 
0x000000000011eded: add esp, 0x30; lea rax, qword ptr [rip + 0x2a48a9]; pop rbx; ret; 
0x000000000011ed2e: add esp, 0x30; lea rax, qword ptr [rip + 0x2a4968]; pop rbx; ret; 
0x00000000000c2c11: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000011ed0b: add esp, 0x30; pop rbx; ret; 
0x0000000000112f61: add esp, 0x30; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000129bb8: add esp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000bdfda: add esp, 0x38; ret; 
0x000000000005d21c: add esp, 0x400; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f72c8: add esp, 0x408; ret; 
0x00000000000be85d: add esp, 0x40; mov eax, esi; pop rbx; ret; 
0x0000000000125fce: add esp, 0x40; pop rbx; pop rbp; movzx eax, al; pop r12; ret; 
0x000000000010d018: add esp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x00000000000374a9: add esp, 0x40; pop rbx; ret; 
0x00000000000fd4e8: add esp, 0x40; ret; 
0x0000000000125f04: add esp, 0x40; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000127501: add esp, 0x418; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000127104: add esp, 0x438; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000498a9: add esp, 0x440; pop rbx; ret; 
0x00000000000ecdf2: add esp, 0x48; movzx eax, al; ret; 
0x0000000000073558: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000118fa4: add esp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000f231c: add esp, 0x48; ret; 
0x0000000000135109: add esp, 0x518; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000013513b: add esp, 0x518; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000011fefe: add esp, 0x58; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000f1cd4: add esp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000135dbf: add esp, 0x58; ret; 
0x00000000000c9789: add esp, 0x60; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f0cdf: add esp, 0x60; mov rax, rbx; pop rbx; ret; 
0x00000000000c9712: add esp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x000000000011f6cb: add esp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000012b09c: add esp, 0x68; ret; 
0x0000000000084807: add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000000eb5b2: add esp, 0x70; pop rbx; ret; 
0x00000000000848c6: add esp, 0x70; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000132eb5: add esp, 0x88; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000003724d: add esp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000372d2: add esp, 0x88; ret; 
0x00000000000f476c: add esp, 0x90; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000114bb2: add esp, 0x90; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000002c26a: add esp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fbc42: add esp, 0x90; pop rbx; ret; 
0x0000000000078dad: add esp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001f58c: add esp, 0x98; pop rbx; pop rbp; ret; 
0x00000000001334f0: add esp, 0x98; ret; 
0x0000000000037559: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000003801d: add esp, 0xa8; ret; 
0x0000000000129407: add esp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000fc991: add esp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005e19a: add esp, 0xd0; mov eax, edx; pop rbx; ret; 
0x00000000000f75d3: add esp, 0xd0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b1505: add esp, 0xd0; pop rbx; ret; 
0x0000000000036dd1: add esp, 0xd0; ret; 
0x000000000005de55: add esp, 0xd8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000001094dc: add esp, 0xd8; mov eax, esi; pop rbx; pop rbp; ret; 
0x00000000000f70ce: add esp, 0xd8; pop rbx; pop rbp; ret; 
0x00000000000475a4: add esp, 0xd8; ret; 
0x0000000000105f4c: add esp, 0xe8; pop rbx; pop rbp; ret; 
0x000000000005e48d: add esp, 0xf8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000124863: add esp, 8; add eax, 2; ret; 
0x000000000004f13c: add esp, 8; add ebp, 0x30; pop rbx; mov eax, ebp; pop rbp; ret; 
0x000000000008ab0d: add esp, 8; jmp rax; 
0x0000000000117ddb: add esp, 8; lea eax, dword ptr [rbx + rbp]; pop rbx; pop rbp; ret; 
0x00000000000c6326: add esp, 8; lea rax, qword ptr [rbx + 2]; pop rbx; pop rbp; ret; 
0x00000000000c6226: add esp, 8; lea rax, qword ptr [rbx + 8]; pop rbx; pop rbp; ret; 
0x000000000011f3e1: add esp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x0000000000076c41: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000101c6a: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000000f83b3: add esp, 8; mov eax, 3; pop rbx; pop rbp; ret; 
0x0000000000106079: add esp, 8; mov eax, 7; pop rbx; pop rbp; ret; 
0x000000000004f0c2: add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000005e2f0: add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000006e058: add esp, 8; mov eax, esi; pop rbx; pop rbp; ret; 
0x000000000007346c: add esp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000003407b: add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000007e0eb: add esp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000084f94: add esp, 8; mov rax, rdx; ret; 
0x000000000003c356: add esp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x0000000000134ff6: add esp, 8; mov rdi, rbx; pop rbx; mov rsi, rbp; pop rbp; jmp rax; 
0x000000000012ce6c: add esp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000022ca5: add esp, 8; movzx eax, al; neg eax; ret; 
0x0000000000048a4f: add esp, 8; movzx eax, al; pop rbx; neg eax; pop rbp; ret; 
0x00000000000465b6: add esp, 8; movzx eax, al; ret; 
0x000000000011af8a: add esp, 8; movzx eax, ax; ret; 
0x00000000000d1c3b: add esp, 8; not eax; pop rbx; and eax, 2; pop rbp; ret; 
0x000000000007753d: add esp, 8; pop rbx; mov eax, ebp; pop rbp; ret; 
0x0000000000120b79: add esp, 8; pop rbx; mov rdi, rbp; xor eax, eax; pop rbp; jmp rdx; 
0x0000000000122879: add esp, 8; pop rbx; movzx eax, al; pop rbp; ret; 
0x0000000000121c19: add esp, 8; pop rbx; pop rbp; add eax, edx; ret; 
0x0000000000074490: add esp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000003cee2: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000237c1: add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000220a4: add esp, 8; ret; 
0x0000000000132ce1: add esp, 8; sar eax, 0x1f; ret; 
0x000000000012e8b4: add esp, 8; shr eax, 0x1f; ret; 
0x0000000000073481: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000122440: add esp, dword ptr [rbp + 0x50]; sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbp + 0x40]; 
0x000000000005fdee: add esp, dword ptr [rbp - 0x10b0]; mov rsi, qword ptr [r12 + 0x18]; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000121f48: add esp, dword ptr [rbx + 0x50]; sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x00000000000bcd98: add esp, dword ptr [rbx + rcx*4 + 0x32]; syscall; 
0x000000000019d271: add esp, dword ptr [rcx + rax - 0x72bafc72]; add al, 0x45; mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x0000000000031e09: add esp, dword ptr [rdx]; cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38deec]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000001349eb: add esp, dword ptr [rsi + 0x39]; ret 0x840f; 
0x0000000000099b54: add esp, dword ptr [rsi - 0x75]; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000018df99: add esp, edi; call rsp; 
0x00000000000d8045: add qword ptr [r15], r9; mov es, word ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x0000000000110ce8: add qword ptr [r8 - 0x7d], r9; cli; add al, 0xf; xchg eax, esi; ret; 
0x00000000000dbe4c: add qword ptr [r8 - 0x7d], rcx; ret; 
0x00000000001a315d: add qword ptr [r8], r8; ret 0xe7da; 
0x000000000003d0a1: add qword ptr [r8], rax; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x000000000008b9d1: add qword ptr [rax + 0xf], rcx; ror dword ptr [r8 - 0x77], 1; adc eax, 0x335316; add rsp, 0x100; ret; 
0x000000000002691e: add qword ptr [rax], r8; add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x0000000000189d0d: add qword ptr [rax], r8; test cl, ch; out dx, eax; call rsp; 
0x00000000000a1a5c: add qword ptr [rax], rax; add byte ptr [rax - 0x73], cl; xor eax, 0xd6e59; movsxd rax, dword ptr [rsi + rdi*4]; add rsi, rax; jmp rsi; 
0x000000000009361d: add qword ptr [rax], rax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000000323ce: add qword ptr [rax], rax; add byte ptr [rcx + 0x63], cl; cld; mov eax, 3; syscall; 
0x0000000000101e4d: add qword ptr [rbx + 0x38], rbp; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000015a2fd: add qword ptr [rdi], rcx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000015e69d: add qword ptr [rdi], rcx; test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000117e50: add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x000000000014d192: add r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x000000000012243f: add r12, qword ptr [rbp + 0x50]; sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbp + 0x40]; 
0x000000000005fded: add r12, qword ptr [rbp - 0x10b0]; mov rsi, qword ptr [r12 + 0x18]; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000121f47: add r12, qword ptr [rbx + 0x50]; sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x0000000000179c6a: add r12b, r15b; jmp qword ptr [rsi]; 
0x000000000014d122: add r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x000000000014d0b2: add r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x000000000009f78a: add r8, 0x10; lea r11, qword ptr [rip + 0xd8f3b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df7a: add r8, 0x10; lea r11, qword ptr [rip + 0xda56b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000013c6e0: add r8, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000138b74: add r8, qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000347e5: add r8b, byte ptr [r8]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000096944: add r8b, byte ptr [r8]; lea rax, qword ptr [rdi + 2]; ret; 
0x00000000000968a4: add r8b, byte ptr [r8]; mov rax, rdi; ret; 
0x00000000001614ea: add r8b, byte ptr [r8]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018c875: add r8b, byte ptr [r8]; pop rax; clc; call rsp; 
0x000000000018c83d: add r8b, byte ptr [r8]; push rax; clc; call rsp; 
0x000000000018c86d: add r8b, byte ptr [r8]; sbb eax, 0x4cfff858; add r8b, byte ptr [r8]; pop rax; clc; call rsp; 
0x000000000018c6dd: add r8b, byte ptr [rax]; clc; jmp rsp; 
0x00000000001617fb: add r8b, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000117ad1: add r8b, byte ptr [rdx]; cmp rcx, rax; sbb eax, eax; ret; 
0x0000000000146485: add r8d, dword ptr [r8 + r8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000117d24: add r8d, dword ptr [rdx]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000004f20f: add r8d, eax; mov eax, r8d; ret; 
0x000000000013625c: add r9, r11; call rax; 
0x00000000000d82c5: add r9b, byte ptr [r15]; mov es, word ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x00000000000c612a: add r9b, byte ptr [r8 - 0x7d]; mov dword ptr [rcx], 0xeb02ca83; cmpsb byte ptr [rsi], byte ptr [rdi]; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000003cd3f: add r9d, 0x3039; and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x000000000013f882: add rax, -0x7cb80000; ret 0xe910; 
0x00000000000f6279: add rax, -0x9cf0000; mov rdi, r14; call rbx; 
0x000000000015a383: add rax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x000000000015e734: add rax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000146283: add rax, 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000012ac45: add rax, 0xa0; add rsp, 8; ret; 
0x000000000012ac75: add rax, 0xa8; add rsp, 8; ret; 
0x000000000011128c: add rax, 1; mov qword ptr [rbx + 0x30], rax; mov eax, 1; pop rbx; ret; 
0x00000000000a2eb0: add rax, 1; ret; 
0x00000000000a2ea7: add rax, 2; ret; 
0x00000000000a2ec0: add rax, 3; ret; 
0x0000000000022768: add rax, qword ptr [0]; ret; 
0x000000000007c638: add rax, qword ptr [rbx + 0x10]; mov qword ptr [rbx + 8], rax; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000007c603: add rax, qword ptr [rbx + 0x18]; mov qword ptr [rbx + 8], rax; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000035757: add rax, qword ptr [rdi + 0x20]; pop rbx; ret; 
0x0000000000079490: add rax, qword ptr [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000013659f: add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x0000000000135e67: add rax, qword ptr [rdx + 8]; add rsp, 0x58; ret; 
0x0000000000022767: add rax, qword ptr fs:[0]; ret; 
0x000000000004dd97: add rax, r12; jmp rax; 
0x000000000004d594: add rax, r12; mov byte ptr [rbp - 0x4fa], 0x20; mov dword ptr [rbp - 0x530], 1; jmp rax; 
0x000000000004ecb8: add rax, r12; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004ed67: add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004e97f: add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004d53d: add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004baa4: add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000004e9e0: add rax, r12; mov dword ptr [rbp - 0x558], 1; jmp rax; 
0x000000000004dec3: add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004ec57: add rax, r12; mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004e79a: add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004e83d: add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000005f064: add rax, r13; jmp rax; 
0x000000000005f142: add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005ef49: add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 0; jmp rax; 
0x000000000005efe7: add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 1; jmp rax; 
0x000000000005f1d6: add rax, r13; mov dword ptr [rbp - 0x1100], 0x20; mov dword ptr [rbp - 0x10fc], 1; jmp rax; 
0x000000000005f18c: add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005ef9d: add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000005f22a: add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f0a4: add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f2df: add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f0ee: add rax, r13; mov dword ptr [rbp - 0x1138], 1; mov dword ptr [rbp - 0x1128], 0; jmp rax; 
0x000000000005f329: add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x000000000006c75e: add rax, r8; jmp rax; 
0x00000000000970a7: add rax, r8; ret; 
0x0000000000096864: add rax, r9; jmp rax; 
0x0000000000034edd: add rax, rbx; jmp rax; 
0x0000000000091af1: add rax, rcx; jmp rax; 
0x000000000008bb99: add rax, rcx; ret; 
0x00000000000970a4: add rax, rdi; add rax, r8; ret; 
0x000000000008bb96: add rax, rdi; add rax, rcx; ret; 
0x000000000006d0bc: add rax, rdi; jmp rax; 
0x000000000008a70a: add rax, rdi; ret; 
0x000000000013cab9: add rax, rdi; sub rax, rsi; ret; 
0x0000000000054b88: add rax, rdx; jmp rax; 
0x000000000003606c: add rax, rdx; shr rax, 0x3f; ret; 
0x0000000000088b5d: add rax, rdx; sub rax, rdi; ret; 
0x00000000001276aa: add rax, rsi; jmp rax; 
0x0000000000121d4b: add rbp, qword ptr [rbx + 0x50]; sub edx, r14d; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x00000000000e2b52: add rbx, r10; jmp rbx; 
0x0000000000117ef4: add rcx, 2; mov dword ptr [r8], edi; mov qword ptr [r9], rcx; ret; 
0x000000000002a9f8: add rcx, qword ptr [r9 + 0x39]; ret; 
0x000000000015e6e6: add rcx, qword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000015fc81: add rcx, r11; jmp rcx; 
0x0000000000054a59: add rcx, rax; jmp rcx; 
0x000000000006d297: add rcx, rdx; jmp rcx; 
0x00000000000a1b43: add rcx, rsi; jmp rcx; 
0x00000000000a0784: add rdi, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8001]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe04: add rdi, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8901]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e324: add rdi, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0xda201]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd24: add rdi, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0xdb62d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001245dc: add rdi, 0x10; jmp rcx; 
0x00000000000a07ec: add rdi, 0x10; lea r11, qword ptr [rip + 0xd7f9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe6c: add rdi, 0x10; lea r11, qword ptr [rip + 0xd889d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f775: add rdi, 0x10; lea r11, qword ptr [rip + 0xd8f50]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f756: add rdi, 0x10; lea r11, qword ptr [rip + 0xd8f6f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e38c: add rdi, 0x10; lea r11, qword ptr [rip + 0xda19d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df65: add rdi, 0x10; lea r11, qword ptr [rip + 0xda580]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df46: add rdi, 0x10; lea r11, qword ptr [rip + 0xda59f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000011f3cf: add rdi, 0x18; xor eax, eax; pop rbp; jmp rcx; 
0x0000000000136314: add rdi, 0x1c; mov al, 0xca; mov esi, 0x81; syscall; 
0x00000000000a0821: add rdi, 0x20; lea r11, qword ptr [rip + 0xd7f68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fea1: add rdi, 0x20; lea r11, qword ptr [rip + 0xd8868]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e3c1: add rdi, 0x20; lea r11, qword ptr [rip + 0xda168]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001214f9: add rdi, 0x23b0; xor eax, eax; jmp rcx; 
0x00000000001214b2: add rdi, 0x23b0; xor eax, eax; pop rbp; jmp rcx; 
0x0000000000108453: add rdi, 0x28; mov eax, r9d; syscall; 
0x0000000000108141: add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000000a06d9: add rdi, 0x30; lea r11, qword ptr [rip + 0xd80b0]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fd6e: add rdi, 0x30; lea r11, qword ptr [rip + 0xd899b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e28e: add rdi, 0x30; lea r11, qword ptr [rip + 0xda29b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cc8e: add rdi, 0x30; lea r11, qword ptr [rip + 0xdb6c7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000127ed3: add rdi, 0x58; jmp rcx; 
0x0000000000127623: add rdi, 0x68; jmp rcx; 
0x0000000000123a46: add rdi, 0xc8; jmp rcx; 
0x00000000000967ab: add rdi, 1; mov rax, rdi; ret; 
0x0000000000097488: add rdi, 1; xor eax, eax; test dl, dl; cmovne rax, rdi; ret; 
0x0000000000117d96: add rdi, 2; call 0x8c4b0; mov eax, ebx; pop rbx; ret; 
0x00000000000967d4: add rdi, 2; mov rax, rdi; ret; 
0x00000000000967e7: add rdi, 3; mov rax, rdi; ret; 
0x00000000000967f4: add rdi, 4; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x0000000000096807: add rdi, 5; mov dword ptr [rdi - 5], eax; mov rax, rdi; ret; 
0x0000000000096821: add rdi, 6; mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x0000000000096839: add rdi, 7; mov byte ptr [rdi - 1], r8b; mov dword ptr [rdi - 7], eax; mov rax, rdi; ret; 
0x00000000000967bc: add rdi, 8; mov dword ptr [rdi - 8], eax; mov eax, dword ptr [rsp + 0x18]; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x0000000000127098: add rdi, rax; jmp rdi; 
0x00000000000a08fd: add rdi, rcx; add rsi, rcx; lea r11, qword ptr [rip + 0xd7f0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec2d: add rdi, rcx; add rsi, rcx; lea r11, qword ptr [rip + 0xd9a06]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d58d: add rdi, rcx; add rsi, rcx; lea r11, qword ptr [rip + 0xdaec6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000151460: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x36323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001512e0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x364a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151160: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x36623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150fe1: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x367a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150e60: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x36923]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150ce0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x36aa3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150b60: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x36c23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001509e0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x36da3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150860: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x36f23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001506e0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x370a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150560: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x37223]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001503e0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x373a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150260: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x37523]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001500e0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x376a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ff60: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x37823]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e980: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x38903]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e800: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x38a83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e680: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x38c03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e501: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x38d82]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e380: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x38f03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e200: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x39083]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e080: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x39203]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014df00: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x39383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dd80: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x39503]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dc00: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x39683]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014da80: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x39803]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d900: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x39983]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d780: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x39b03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d600: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x39c83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d480: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x39e03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014beb0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3aed3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bd30: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b053]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bbb0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b1d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ba31: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b352]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b8b0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b4d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b730: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b653]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b5b0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b430: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3b953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b2b0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3bad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b130: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3bc53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014afb0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3bdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ae30: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3bf53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014acb0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3c0d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ab30: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3c253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a9b0: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3c3d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147e66: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x3eb1d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145496: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x4132d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ac6: add rdi, rdx; add rsi, rdx; lea r11, qword ptr [rip + 0x43b3d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000161d00: add rdi, rdx; lea r11, qword ptr [rip + 0x247c6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161c86: add rdi, rdx; lea r11, qword ptr [rip + 0x24840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161bf7: add rdi, rdx; lea r11, qword ptr [rip + 0x248cf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001619ec: add rdi, rdx; lea r11, qword ptr [rip + 0x24ada]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001618ba: add rdi, rdx; lea r11, qword ptr [rip + 0x24c0c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001617f4: add rdi, rdx; lea r11, qword ptr [rip + 0x24cd2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161776: add rdi, rdx; lea r11, qword ptr [rip + 0x24d50]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001616df: add rdi, rdx; lea r11, qword ptr [rip + 0x24de7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001614e3: add rdi, rdx; lea r11, qword ptr [rip + 0x24fe3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001613b2: add rdi, rdx; lea r11, qword ptr [rip + 0x25114]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001612b1: add rdi, rdx; lea r11, qword ptr [rip + 0x25215]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001606d0: add rdi, rdx; lea r11, qword ptr [rip + 0x25cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160656: add rdi, rdx; lea r11, qword ptr [rip + 0x25d30]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001605c7: add rdi, rdx; lea r11, qword ptr [rip + 0x25dbf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001603bc: add rdi, rdx; lea r11, qword ptr [rip + 0x25fca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016028a: add rdi, rdx; lea r11, qword ptr [rip + 0x260fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001601c4: add rdi, rdx; lea r11, qword ptr [rip + 0x261c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160146: add rdi, rdx; lea r11, qword ptr [rip + 0x26240]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001600af: add rdi, rdx; lea r11, qword ptr [rip + 0x262d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015feb3: add rdi, rdx; lea r11, qword ptr [rip + 0x264d3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fd82: add rdi, rdx; lea r11, qword ptr [rip + 0x26604]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fc73: add rdi, rdx; lea r11, qword ptr [rip + 0x26713]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001516cb: add rdi, rdx; lea r11, qword ptr [rip + 0x360bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fe26: add rdi, rdx; lea r11, qword ptr [rip + 0x37960]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fcca: add rdi, rdx; lea r11, qword ptr [rip + 0x37abc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ebd7: add rdi, rdx; lea r11, qword ptr [rip + 0x386af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d346: add rdi, rdx; lea r11, qword ptr [rip + 0x39f40]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1d7: add rdi, rdx; lea r11, qword ptr [rip + 0x3a0af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c107: add rdi, rdx; lea r11, qword ptr [rip + 0x3ac7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a519: add rdi, rdx; lea r11, qword ptr [rip + 0x3c46d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a876: add rdi, rdx; lea r11, qword ptr [rip + 0x3c510]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a704: add rdi, rdx; lea r11, qword ptr [rip + 0x3c682]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147d7a: add rdi, rdx; lea r11, qword ptr [rip + 0x3ec0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147cb5: add rdi, rdx; lea r11, qword ptr [rip + 0x3ecd1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001453aa: add rdi, rdx; lea r11, qword ptr [rip + 0x4141c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001452e5: add rdi, rdx; lea r11, qword ptr [rip + 0x414e1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001429da: add rdi, rdx; lea r11, qword ptr [rip + 0x43c2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142915: add rdi, rdx; lea r11, qword ptr [rip + 0x43cf1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000117ec4: add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x0000000000148a5f: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3df22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014608f: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40732]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001436bf: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42f42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a44b: add rdi, rdx; sfence; lea r11, qword ptr [rip + 0x3c538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147a63: add rdi, rdx; sfence; lea r11, qword ptr [rip + 0x3ed60]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145093: add rdi, rdx; sfence; lea r11, qword ptr [rip + 0x41570]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000a07a7: add rdx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xd7fdf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe27: add rdx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xd88df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea87: add rdx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xd9b2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e347: add rdx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xda1df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3f7: add rdx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xdafdb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd47: add rdx, 0x10; sub rdx, rcx; lea r11, qword ptr [rip + 0xdb60b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000301b5: add rdx, 0x200; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000021fd3: add rdx, 0x47; shl rdx, 4; lea rdi, qword ptr [r14 + rdx]; call rax; 
0x0000000000118f9d: add rdx, 1; syscall; 
0x0000000000118f9d: add rdx, 1; syscall; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000f38c8: add rdx, 8; mov qword ptr [rip + 0x2cdd5d], rdx; add rsp, 8; ret; 
0x0000000000039121: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000022b70: add rdx, rax; jmp rdx; 
0x00000000000decd6: add rdx, rcx; jmp rdx; 
0x0000000000034c74: add rdx, rdi; jmp rdx; 
0x0000000000117fdf: add rdx, rdi; mov qword ptr [rdx + 8], rax; mov rax, qword ptr [rsi + 8]; mov qword ptr [rdx + 0x10], rax; xor eax, eax; ret; 
0x00000000000a1b03: add rdx, rsi; jmp rdx; 
0x00000000000a07e8: add rsi, 0x10; add rdi, 0x10; lea r11, qword ptr [rip + 0xd7f9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe68: add rsi, 0x10; add rdi, 0x10; lea r11, qword ptr [rip + 0xd889d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e388: add rsi, 0x10; add rdi, 0x10; lea r11, qword ptr [rip + 0xda19d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a081d: add rsi, 0x20; add rdi, 0x20; lea r11, qword ptr [rip + 0xd7f68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe9d: add rsi, 0x20; add rdi, 0x20; lea r11, qword ptr [rip + 0xd8868]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e3bd: add rsi, 0x20; add rdi, 0x20; lea r11, qword ptr [rip + 0xda168]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a06d5: add rsi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0xd80b0]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fd6a: add rsi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0xd899b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e28a: add rsi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0xda29b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cc8a: add rsi, 0x30; add rdi, 0x30; lea r11, qword ptr [rip + 0xdb6c7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000126644: add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000006c81e: add rsi, rax; jmp rsi; 
0x000000000012e262: add rsi, rax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x00000000000a0760: add rsi, rcx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8026]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0743: add rsi, rcx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8043]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fde0: add rsi, rcx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8926]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fdc3: add rsi, rcx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8943]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea30: add rsi, rcx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd9b82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e300: add rsi, rcx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xda226]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e2e3: add rsi, rcx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xda243]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3a0: add rsi, rcx; bsf rdx, rdx; lea r11, qword ptr [rip + 0xdb032]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000006d184: add rsi, rcx; jmp rsi; 
0x00000000000a0949: add rsi, rcx; lea r11, qword ptr [rip + 0xd7ec1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0929: add rsi, rcx; lea r11, qword ptr [rip + 0xd7ee1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0900: add rsi, rcx; lea r11, qword ptr [rip + 0xd7f0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec79: add rsi, rcx; lea r11, qword ptr [rip + 0xd99bd]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec59: add rsi, rcx; lea r11, qword ptr [rip + 0xd99dd]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec30: add rsi, rcx; lea r11, qword ptr [rip + 0xd9a06]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d5d9: add rsi, rcx; lea r11, qword ptr [rip + 0xdae7d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d5b9: add rsi, rcx; lea r11, qword ptr [rip + 0xdae9d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d590: add rsi, rcx; lea r11, qword ptr [rip + 0xdaec6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000161cfd: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x247c6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161c83: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x24840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161bf4: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x248cf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001619e9: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x24ada]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001618b7: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x24c0c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001617f1: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x24cd2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161773: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x24d50]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001616dc: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x24de7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001614e0: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x24fe3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001613af: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x25114]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001612ae: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x25215]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001606cd: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x25cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160653: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x25d30]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001605c4: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x25dbf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001603b9: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x25fca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160287: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x260fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001601c1: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x261c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160143: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x26240]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001600ac: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x262d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015feb0: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x264d3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fd7f: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x26604]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fc70: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x26713]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001516c8: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x360bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fe23: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x37960]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fcc7: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x37abc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ebd4: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x386af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d343: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x39f40]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1d4: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x3a0af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c104: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x3ac7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a516: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x3c46d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a873: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x3c510]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a701: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x3c682]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147d77: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x3ec0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147cb2: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x3ecd1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001453a7: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x4141c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001452e2: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x414e1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001429d7: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x43c2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142912: add rsi, rdx; add rdi, rdx; lea r11, qword ptr [rip + 0x43cf1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151463: add rsi, rdx; lea r11, qword ptr [rip + 0x36323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001512e3: add rsi, rdx; lea r11, qword ptr [rip + 0x364a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151163: add rsi, rdx; lea r11, qword ptr [rip + 0x36623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150fe4: add rsi, rdx; lea r11, qword ptr [rip + 0x367a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150e63: add rsi, rdx; lea r11, qword ptr [rip + 0x36923]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150ce3: add rsi, rdx; lea r11, qword ptr [rip + 0x36aa3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150b63: add rsi, rdx; lea r11, qword ptr [rip + 0x36c23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001509e3: add rsi, rdx; lea r11, qword ptr [rip + 0x36da3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150863: add rsi, rdx; lea r11, qword ptr [rip + 0x36f23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001506e3: add rsi, rdx; lea r11, qword ptr [rip + 0x370a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150563: add rsi, rdx; lea r11, qword ptr [rip + 0x37223]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001503e3: add rsi, rdx; lea r11, qword ptr [rip + 0x373a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150263: add rsi, rdx; lea r11, qword ptr [rip + 0x37523]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001500e3: add rsi, rdx; lea r11, qword ptr [rip + 0x376a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ff63: add rsi, rdx; lea r11, qword ptr [rip + 0x37823]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e983: add rsi, rdx; lea r11, qword ptr [rip + 0x38903]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e803: add rsi, rdx; lea r11, qword ptr [rip + 0x38a83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e683: add rsi, rdx; lea r11, qword ptr [rip + 0x38c03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e504: add rsi, rdx; lea r11, qword ptr [rip + 0x38d82]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e383: add rsi, rdx; lea r11, qword ptr [rip + 0x38f03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e203: add rsi, rdx; lea r11, qword ptr [rip + 0x39083]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e083: add rsi, rdx; lea r11, qword ptr [rip + 0x39203]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014df03: add rsi, rdx; lea r11, qword ptr [rip + 0x39383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dd83: add rsi, rdx; lea r11, qword ptr [rip + 0x39503]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dc03: add rsi, rdx; lea r11, qword ptr [rip + 0x39683]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014da83: add rsi, rdx; lea r11, qword ptr [rip + 0x39803]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d903: add rsi, rdx; lea r11, qword ptr [rip + 0x39983]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d783: add rsi, rdx; lea r11, qword ptr [rip + 0x39b03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d603: add rsi, rdx; lea r11, qword ptr [rip + 0x39c83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d483: add rsi, rdx; lea r11, qword ptr [rip + 0x39e03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014beb3: add rsi, rdx; lea r11, qword ptr [rip + 0x3aed3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bd33: add rsi, rdx; lea r11, qword ptr [rip + 0x3b053]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bbb3: add rsi, rdx; lea r11, qword ptr [rip + 0x3b1d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ba34: add rsi, rdx; lea r11, qword ptr [rip + 0x3b352]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b8b3: add rsi, rdx; lea r11, qword ptr [rip + 0x3b4d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b733: add rsi, rdx; lea r11, qword ptr [rip + 0x3b653]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b5b3: add rsi, rdx; lea r11, qword ptr [rip + 0x3b7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b433: add rsi, rdx; lea r11, qword ptr [rip + 0x3b953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b2b3: add rsi, rdx; lea r11, qword ptr [rip + 0x3bad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b133: add rsi, rdx; lea r11, qword ptr [rip + 0x3bc53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014afb3: add rsi, rdx; lea r11, qword ptr [rip + 0x3bdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ae33: add rsi, rdx; lea r11, qword ptr [rip + 0x3bf53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014acb3: add rsi, rdx; lea r11, qword ptr [rip + 0x3c0d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ab33: add rsi, rdx; lea r11, qword ptr [rip + 0x3c253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a9b3: add rsi, rdx; lea r11, qword ptr [rip + 0x3c3d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014938f: add rsi, rdx; lea r11, qword ptr [rip + 0x3d5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014923f: add rsi, rdx; lea r11, qword ptr [rip + 0x3d747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001490ef: add rsi, rdx; lea r11, qword ptr [rip + 0x3d897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148f9f: add rsi, rdx; lea r11, qword ptr [rip + 0x3d9e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148e4f: add rsi, rdx; lea r11, qword ptr [rip + 0x3db37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148cff: add rsi, rdx; lea r11, qword ptr [rip + 0x3dc87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148baf: add rsi, rdx; lea r11, qword ptr [rip + 0x3ddd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014890f: add rsi, rdx; lea r11, qword ptr [rip + 0x3e077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001487bf: add rsi, rdx; lea r11, qword ptr [rip + 0x3e1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014866f: add rsi, rdx; lea r11, qword ptr [rip + 0x3e317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014851f: add rsi, rdx; lea r11, qword ptr [rip + 0x3e467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001483cf: add rsi, rdx; lea r11, qword ptr [rip + 0x3e5b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014827f: add rsi, rdx; lea r11, qword ptr [rip + 0x3e707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014812f: add rsi, rdx; lea r11, qword ptr [rip + 0x3e857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147e69: add rsi, rdx; lea r11, qword ptr [rip + 0x3eb1d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001469bf: add rsi, rdx; lea r11, qword ptr [rip + 0x3fe07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014686f: add rsi, rdx; lea r11, qword ptr [rip + 0x3ff57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014671f: add rsi, rdx; lea r11, qword ptr [rip + 0x400a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001465cf: add rsi, rdx; lea r11, qword ptr [rip + 0x401f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014647f: add rsi, rdx; lea r11, qword ptr [rip + 0x40347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014632f: add rsi, rdx; lea r11, qword ptr [rip + 0x40497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001461df: add rsi, rdx; lea r11, qword ptr [rip + 0x405e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145f3f: add rsi, rdx; lea r11, qword ptr [rip + 0x40887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145def: add rsi, rdx; lea r11, qword ptr [rip + 0x409d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145c9f: add rsi, rdx; lea r11, qword ptr [rip + 0x40b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145b4f: add rsi, rdx; lea r11, qword ptr [rip + 0x40c77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001459ff: add rsi, rdx; lea r11, qword ptr [rip + 0x40dc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001458af: add rsi, rdx; lea r11, qword ptr [rip + 0x40f17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014575f: add rsi, rdx; lea r11, qword ptr [rip + 0x41067]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145499: add rsi, rdx; lea r11, qword ptr [rip + 0x4132d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143fef: add rsi, rdx; lea r11, qword ptr [rip + 0x42617]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143e9f: add rsi, rdx; lea r11, qword ptr [rip + 0x42767]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143d4f: add rsi, rdx; lea r11, qword ptr [rip + 0x428b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143bff: add rsi, rdx; lea r11, qword ptr [rip + 0x42a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143aaf: add rsi, rdx; lea r11, qword ptr [rip + 0x42b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014395f: add rsi, rdx; lea r11, qword ptr [rip + 0x42ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014380f: add rsi, rdx; lea r11, qword ptr [rip + 0x42df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014356f: add rsi, rdx; lea r11, qword ptr [rip + 0x43097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014341f: add rsi, rdx; lea r11, qword ptr [rip + 0x431e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001432cf: add rsi, rdx; lea r11, qword ptr [rip + 0x43337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014317f: add rsi, rdx; lea r11, qword ptr [rip + 0x43487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014302f: add rsi, rdx; lea r11, qword ptr [rip + 0x435d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142edf: add rsi, rdx; lea r11, qword ptr [rip + 0x43727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142d8f: add rsi, rdx; lea r11, qword ptr [rip + 0x43877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ac9: add rsi, rdx; lea r11, qword ptr [rip + 0x43b3d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000005d5b2: add rsp, 0x1000; pop rbx; ret; 
0x000000000005d5c0: add rsp, 0x1000; xor eax, eax; pop rbx; ret; 
0x000000000005d468: add rsp, 0x1008; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000012a040: add rsp, 0x100; pop rbx; pop rbp; pop r12; ret; 
0x000000000008b9de: add rsp, 0x100; ret; 
0x00000000000885cc: add rsp, 0x100; sub rax, rdx; ret; 
0x000000000008aa5c: add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x00000000001086d5: add rsp, 0x1010; pop rbx; pop rbp; pop r12; ret; 
0x000000000003719c: add rsp, 0x108; ret; 
0x00000000000f96f3: add rsp, 0x10; lea rax, qword ptr [rip + 0x2c8112]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f0bdd: add rsp, 0x10; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f214e: add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000f8fce: add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x0000000000085ba3: add rsp, 0x10; mov eax, ebx; pop rbx; ret; 
0x0000000000111a90: add rsp, 0x10; mov eax, edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000122003: add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x000000000006c97f: add rsp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f9d4b: add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x0000000000070125: add rsp, 0x10; mov rax, rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000006ffa6: add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000108270: add rsp, 0x10; pop rbx; pop rbp; and eax, 0xc; pop r12; ret; 
0x000000000008678e: add rsp, 0x10; pop rbx; pop rbp; mov eax, 1; pop r12; ret; 
0x000000000006cd49: add rsp, 0x10; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000034720: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000007c60d: add rsp, 0x10; pop rbx; ret; 
0x0000000000121aaf: add rsp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000007c640: add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000000ec75d: add rsp, 0x120; pop rbx; ret; 
0x0000000000037432: add rsp, 0x140; pop rbx; ret; 
0x0000000000036bda: add rsp, 0x148; ret; 
0x000000000012a333: add rsp, 0x158; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000462e5: add rsp, 0x170; pop rbx; pop rbp; pop r12; ret; 
0x0000000000022128: add rsp, 0x18; jmp rax; 
0x000000000011210e: add rsp, 0x18; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000005db16: add rsp, 0x18; mov eax, edx; ret; 
0x00000000000e4f0d: add rsp, 0x18; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000cb63f: add rsp, 0x18; mov rax, rdx; ret; 
0x000000000005db45: add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x000000000012e7c8: add rsp, 0x18; movzx eax, al; ret; 
0x0000000000086977: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000003d1b7: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000036fca: add rsp, 0x18; ret; 
0x00000000001201db: add rsp, 0x18; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000f1bca: add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x00000000000eca52: add rsp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000f9ca6: add rsp, 0x20; lea rax, qword ptr [rip + 0x2c7bcf]; pop rbx; pop rbp; pop r12; ret; 
0x000000000006f780: add rsp, 0x20; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000000ebdb6: add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000001201a0: add rsp, 0x20; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f05a3: add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x000000000006e60a: add rsp, 0x20; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000049b55: add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x000000000002430f: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000036952: add rsp, 0x20; pop rbx; ret; 
0x00000000000bf705: add rsp, 0x20; sar eax, 0x1f; pop rbx; ret; 
0x000000000006e592: add rsp, 0x20; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000aedc0: add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x0000000000038105: add rsp, 0x240; pop rbx; pop rbp; pop r12; ret; 
0x0000000000073d8c: add rsp, 0x248; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002217a: add rsp, 0x28; jmp rax; 
0x000000000005d50e: add rsp, 0x28; lea rax, qword ptr [rip + 0x363417]; pop rbx; pop rbp; ret; 
0x00000000000fa5c9: add rsp, 0x28; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000000fb2fd: add rsp, 0x28; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000b1333: add rsp, 0x28; mov rax, rdx; ret; 
0x0000000000076938: add rsp, 0x28; pop rbx; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000012d0d4: add rsp, 0x28; pop rbx; movzx eax, al; pop rbp; ret; 
0x0000000000021dc8: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000045f25: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000487f1: add rsp, 0x28; ret; 
0x000000000010ad98: add rsp, 0x28; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000011ee24: add rsp, 0x30; lea rax, qword ptr [rip + 0x2a4871]; pop rbx; ret; 
0x000000000011edec: add rsp, 0x30; lea rax, qword ptr [rip + 0x2a48a9]; pop rbx; ret; 
0x000000000011ed2d: add rsp, 0x30; lea rax, qword ptr [rip + 0x2a4968]; pop rbx; ret; 
0x00000000000c2c10: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000011ed0a: add rsp, 0x30; pop rbx; ret; 
0x0000000000112f60: add rsp, 0x30; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000129bb7: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000bdfd9: add rsp, 0x38; ret; 
0x000000000005d21b: add rsp, 0x400; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f72c7: add rsp, 0x408; ret; 
0x00000000000be85c: add rsp, 0x40; mov eax, esi; pop rbx; ret; 
0x0000000000125fcd: add rsp, 0x40; pop rbx; pop rbp; movzx eax, al; pop r12; ret; 
0x000000000010d017: add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x00000000000374a8: add rsp, 0x40; pop rbx; ret; 
0x00000000000fd4e7: add rsp, 0x40; ret; 
0x0000000000125f03: add rsp, 0x40; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000127500: add rsp, 0x418; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000127103: add rsp, 0x438; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000498a8: add rsp, 0x440; pop rbx; ret; 
0x00000000000ecdf1: add rsp, 0x48; movzx eax, al; ret; 
0x0000000000073557: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000118fa3: add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000f231b: add rsp, 0x48; ret; 
0x0000000000135108: add rsp, 0x518; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000013513a: add rsp, 0x518; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000011fefd: add rsp, 0x58; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000f1cd3: add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000135dbe: add rsp, 0x58; ret; 
0x00000000000c9788: add rsp, 0x60; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f0cde: add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x00000000000c9711: add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x000000000011f6ca: add rsp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000012b09b: add rsp, 0x68; ret; 
0x0000000000084806: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000000eb5b1: add rsp, 0x70; pop rbx; ret; 
0x00000000000848c5: add rsp, 0x70; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000132eb4: add rsp, 0x88; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000003724c: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000372d1: add rsp, 0x88; ret; 
0x00000000000f476b: add rsp, 0x90; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000114bb1: add rsp, 0x90; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000002c269: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fbc41: add rsp, 0x90; pop rbx; ret; 
0x0000000000078dac: add rsp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001f58b: add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000001334ef: add rsp, 0x98; ret; 
0x0000000000037558: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x000000000003801c: add rsp, 0xa8; ret; 
0x0000000000129406: add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x00000000000fc990: add rsp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000005e199: add rsp, 0xd0; mov eax, edx; pop rbx; ret; 
0x00000000000f75d2: add rsp, 0xd0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b1504: add rsp, 0xd0; pop rbx; ret; 
0x0000000000036dd0: add rsp, 0xd0; ret; 
0x000000000005de54: add rsp, 0xd8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000001094db: add rsp, 0xd8; mov eax, esi; pop rbx; pop rbp; ret; 
0x00000000000f70cd: add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x00000000000475a3: add rsp, 0xd8; ret; 
0x0000000000105f4b: add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x000000000005e48c: add rsp, 0xf8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000124862: add rsp, 8; add eax, 2; ret; 
0x000000000004f13b: add rsp, 8; add ebp, 0x30; pop rbx; mov eax, ebp; pop rbp; ret; 
0x000000000008ab0c: add rsp, 8; jmp rax; 
0x0000000000117dda: add rsp, 8; lea eax, dword ptr [rbx + rbp]; pop rbx; pop rbp; ret; 
0x00000000000c6325: add rsp, 8; lea rax, qword ptr [rbx + 2]; pop rbx; pop rbp; ret; 
0x00000000000c6225: add rsp, 8; lea rax, qword ptr [rbx + 8]; pop rbx; pop rbp; ret; 
0x000000000011f3e0: add rsp, 8; mov eax, 0x10; pop rbx; pop rbp; ret; 
0x0000000000076c40: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000101c69: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000000f83b2: add rsp, 8; mov eax, 3; pop rbx; pop rbp; ret; 
0x0000000000106078: add rsp, 8; mov eax, 7; pop rbx; pop rbp; ret; 
0x000000000004f0c1: add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000005e2ef: add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000006e057: add rsp, 8; mov eax, esi; pop rbx; pop rbp; ret; 
0x000000000007346b: add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000003407a: add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000007e0ea: add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000084f93: add rsp, 8; mov rax, rdx; ret; 
0x000000000003c355: add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret; 
0x0000000000134ff5: add rsp, 8; mov rdi, rbx; pop rbx; mov rsi, rbp; pop rbp; jmp rax; 
0x000000000012ce6b: add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000022ca4: add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000048a4e: add rsp, 8; movzx eax, al; pop rbx; neg eax; pop rbp; ret; 
0x00000000000465b5: add rsp, 8; movzx eax, al; ret; 
0x000000000011af89: add rsp, 8; movzx eax, ax; ret; 
0x00000000000d1c3a: add rsp, 8; not eax; pop rbx; and eax, 2; pop rbp; ret; 
0x000000000007753c: add rsp, 8; pop rbx; mov eax, ebp; pop rbp; ret; 
0x0000000000120b78: add rsp, 8; pop rbx; mov rdi, rbp; xor eax, eax; pop rbp; jmp rdx; 
0x0000000000122878: add rsp, 8; pop rbx; movzx eax, al; pop rbp; ret; 
0x0000000000121c18: add rsp, 8; pop rbx; pop rbp; add eax, edx; ret; 
0x000000000007448f: add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000003cee1: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000237c0: add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000220a3: add rsp, 8; ret; 
0x0000000000132ce0: add rsp, 8; sar eax, 0x1f; ret; 
0x000000000012e8b3: add rsp, 8; shr eax, 0x1f; ret; 
0x0000000000073480: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000009169e: add sil, sil; ret 0x7404; 
0x00000000000d450e: add sil, sil; ret 0x7508; 
0x00000000000fcac3: add word ptr [rax], 1; ret; 
0x000000000018a1c5: add word ptr [rax], ax; and al, 0x87; int1; jmp rsp; 
0x00000000001a488d: add word ptr [rax], ax; shl rdi, 1; jmp qword ptr [rax]; 
0x00000000001a484d: add word ptr [rax], ax; xor byte ptr [rcx], cl; hlt; jmp rdx; 
0x00000000000fc80a: add word ptr [rdx + rax*2], 1; ret; 
0x0000000000186b35: and ah, bh; call qword ptr [rax]; 
0x0000000000186b35: and ah, bh; call qword ptr [rax]; and bh, ah; jmp qword ptr [rax + 0x23]; 
0x0000000000186650: and ah, bl; sti; jmp rax; 
0x0000000000186c14: and ah, byte ptr [rsi - 4]; push qword ptr [rdx + 0x42fffc65]; cld; call rdx; 
0x000000000009a381: and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000000cb169: and al, 0; add byte ptr [rax], al; add al, ch; cmp eax, 0x48ffffff; add esp, 0x18; ret; 
0x000000000002364a: and al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000007340: and al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000a3ff3: and al, 0; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; lea rcx, qword ptr [rax + 4]; call rbx; 
0x0000000000093efc: and al, 0; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000001a1c60: and al, 0; add byte ptr [rax], al; mov esp, 0x8800013a; in eax, dx; int1; call qword ptr [rsi]; 
0x00000000001aa940: and al, 0; add byte ptr [rax], al; pushfq; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rdi]; 
0x00000000000b4261: and al, 0; add byte ptr [rax], al; syscall; 
0x00000000000b9f2c: and al, 0; call 0xb80f0; add rsp, 0x18; ret; 
0x00000000000bc25c: and al, 0; call 0xb9fa0; add rsp, 0x18; ret; 
0x00000000001364dd: and al, 0x10; add byte ptr [rax], al; add byte ptr [rax], al; call 0x135f80; add rsp, 0x28; ret; 
0x00000000000487e6: and al, 0x10; add byte ptr [rax], al; add byte ptr [rax], al; call 0xa4090; add rsp, 0x28; ret; 
0x00000000000488b6: and al, 0x10; add byte ptr [rax], al; add byte ptr [rax], al; call 0xa40c0; add rsp, 0x28; ret; 
0x0000000000135ee5: and al, 0x10; add byte ptr [rbp + 0x1e], dh; add rsp, 0x48; ret; 
0x00000000000967f2: and al, 0x10; add rdi, 4; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x00000000000d4ad3: and al, 0x10; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000aedd6: and al, 0x10; add rsp, 0x20; pop rbx; ret; 
0x0000000000112f27: and al, 0x10; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000aedb9: and al, 0x10; call 0x246b0; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x0000000000127037: and al, 0x10; call qword ptr [rax + 0x10]; 
0x000000000008095e: and al, 0x10; call qword ptr [rax]; 
0x00000000000f544c: and al, 0x10; call rax; 
0x0000000000080a32: and al, 0x10; call rdx; 
0x0000000000036737: and al, 0x10; fld xword ptr [rsp + 8]; ret; 
0x0000000000135933: and al, 0x10; lea rdi, qword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x000000000012708b: and al, 0x10; lea rdi, qword ptr [rip + 0x54c0c]; movsxd rax, dword ptr [rdi + rax*4]; add rdi, rax; jmp rdi; 
0x0000000000096802: and al, 0x10; mov byte ptr [rdi + 4], cl; add rdi, 5; mov dword ptr [rdi - 5], eax; mov rax, rdi; ret; 
0x00000000000ed091: and al, 0x10; mov eax, 0x10f; mov rdi, qword ptr [rsp + 8]; syscall; 
0x00000000000c2bf0: and al, 0x10; mov edi, 1; mov eax, 0xe5; syscall; 
0x00000000000ebbbe: and al, 0x10; mov esi, 0x10; mov rdi, r9; mov eax, r8d; syscall; 
0x0000000000129423: and al, 0x10; mov esi, 6; call qword ptr [rax + 0x28]; 
0x00000000001293ed: and al, 0x10; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x00000000000c0b3c: and al, 0x10; mov esi, dword ptr [rsp + 0x18]; mov eax, 0xf7; mov edi, dword ptr [rsp + 0xc]; movsxd r10, ecx; syscall; 
0x000000000012d73d: and al, 0x10; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000bdc0a: and al, 0x10; mov qword ptr [rsp], rdx; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x0000000000022173: and al, 0x10; mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x00000000000cc9cd: and al, 0x10; mov rax, qword ptr [rbp - 0x120]; mov qword ptr [rsp], rax; call rbx; 
0x000000000012d742: and al, 0x10; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012dd7b: and al, 0x10; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d09c: and al, 0x10; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x000000000012dedb: and al, 0x10; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d15c: and al, 0x10; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x0000000000126766: and al, 0x10; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x00000000000fd47b: and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000fd4dc: and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x0000000000028733: and al, 0x10; mov rdi, qword ptr [rsp + 0x68]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x58]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000028132: and al, 0x10; mov rdi, qword ptr [rsp + 0x68]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x78]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000123d5d: and al, 0x10; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000012ddb7: and al, 0x10; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000012dd96: and al, 0x10; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000012d0c7: and al, 0x10; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000012d0f4: and al, 0x10; mov rdi, rbx; call qword ptr [rax]; 
0x00000000000f18e6: and al, 0x10; mov rdi, rsp; mov rax, qword ptr [rip + 0x2d2766]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f1876: and al, 0x10; mov rdi, rsp; mov rax, qword ptr [rip + 0x2d27d6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012269b: and al, 0x10; mov rdx, rbp; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000000461dc: and al, 0x10; mov rdx, rsp; xor esi, esi; mov edi, 0x100011; mov eax, 0x38; syscall; 
0x00000000000a42eb: and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000fbab6: and al, 0x10; mov rsi, qword ptr [rsp + 8]; mov eax, ebx; movsxd rdi, dword ptr [rsp + 4]; movsxd r10, ecx; syscall; 
0x00000000000fb2d8: and al, 0x10; mov rsi, qword ptr [rsp + 8]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; movsxd r10, ecx; syscall; 
0x000000000009681a: and al, 0x10; mov word ptr [rdi + 4], r11w; add rdi, 6; mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x00000000000eb624: and al, 0x10; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; syscall; 
0x00000000000fbb61: and al, 0x10; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ebx; movsxd r10, ecx; syscall; 
0x00000000000f1262: and al, 0x10; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x13; syscall; 
0x00000000000f1302: and al, 0x10; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x14; syscall; 
0x0000000000108960: and al, 0x10; movsxd rsi, dword ptr [rsp + 0xc]; mov rdi, rbx; mov eax, 0xe6; mov r10, rcx; syscall; 
0x00000000000f0580: and al, 0x10; movsxd rsi, dword ptr [rsp + 0xc]; movsxd rdi, dword ptr [rsp + 8]; mov eax, ebx; syscall; 
0x000000000011c45d: and al, 0x10; movsxd rsi, ebp; mov eax, 0x81; syscall; 
0x0000000000036712: and al, 0x10; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x00000000000bdfc8: and al, 0x10; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000046325: and al, 0x10; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x0000000000120995: and al, 0x10; sub al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; and al, 8; call rcx; 
0x0000000000054b7e: and al, 0x12; add byte ptr [rdi], cl; mov dh, 0xdb; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000a4c5c: and al, 0x13; add byte ptr [rdi], cl; test byte ptr [rbx], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a50fc: and al, 0x13; add byte ptr [rdi], cl; test byte ptr [rbx], dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000888cb: and al, 0x14; add byte ptr [rcx], ch; ret; 
0x0000000000129795: and al, 0x14; mov qword ptr [rbx], rax; xor eax, eax; add rsp, 0x30; pop rbx; ret; 
0x0000000000021f39: and al, 0x14; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000011c455: and al, 0x14; mov rdx, rsp; movsxd rdi, dword ptr [rsp + 0x10]; movsxd rsi, ebp; mov eax, 0x81; syscall; 
0x0000000000037f02: and al, 0x14; mov rdx, rsp; movsxd rsi, ebp; movsxd rdi, r12d; mov eax, 0x81; syscall; 
0x00000000000f1d25: and al, 0x14; syscall; 
0x000000000019f8cc: and al, 0x17; add dword ptr [rax], eax; nop; cld; jmp qword ptr [rbx]; 
0x00000000001296b1: and al, 0x18; add byte ptr [rdx + 1], bh; cmovne eax, edx; sub rsp, -0x80; pop rbx; ret; 
0x00000000000b100a: and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret; 
0x000000000012b1b1: and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000012b1b1: and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x000000000012b1dd: and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x0000000000047b6f: and al, 0x18; add dword ptr [rdi], ecx; xchg eax, esp; ret 0x8341; 
0x0000000000022178: and al, 0x18; add rsp, 0x28; jmp rax; 
0x0000000000108f76: and al, 0x18; call 0x108fa0; add rsp, 0xd8; ret; 
0x00000000001090c1: and al, 0x18; call 0x1090d0; add rsp, 0xd8; ret; 
0x000000000010a34b: and al, 0x18; call 0x10a360; add rsp, 0xd8; ret; 
0x000000000010a55b: and al, 0x18; call 0x10a570; add rsp, 0xd8; ret; 
0x000000000010c0f1: and al, 0x18; call 0x10c100; add rsp, 0xd8; ret; 
0x0000000000048726: and al, 0x18; call 0x475b0; add rsp, 0xd8; ret; 
0x0000000000054330: and al, 0x18; call 0x49c40; add rsp, 0xd8; ret; 
0x000000000005d080: and al, 0x18; call 0x5cfc0; add rsp, 0xd8; ret; 
0x000000000005e410: and al, 0x18; call 0x5e420; add rsp, 0xd8; ret; 
0x0000000000078350: and al, 0x18; call 0x5eaf0; add rsp, 0xd8; ret; 
0x0000000000078560: and al, 0x18; call 0x6c6c0; add rsp, 0xd8; ret; 
0x000000000005d1c0: and al, 0x18; call 0x70930; add rsp, 0xd8; ret; 
0x0000000000054590: and al, 0x18; call 0x72120; add rsp, 0xd8; ret; 
0x0000000000054620: and al, 0x18; call 0x72280; add rsp, 0xd8; ret; 
0x000000000005446b: and al, 0x18; call 0x72420; add rsp, 0xd8; ret; 
0x0000000000072830: and al, 0x18; call 0x72620; add rsp, 0xd8; ret; 
0x0000000000073bdb: and al, 0x18; call 0x73c60; add rsp, 0xd8; ret; 
0x0000000000073e20: and al, 0x18; call 0x73d20; add rsp, 0xd8; ret; 
0x00000000000af650: and al, 0x18; call 0xaf660; add rsp, 0xd8; ret; 
0x00000000000f4498: and al, 0x18; call 0xf3ec0; add rsp, 0xd8; ret; 
0x0000000000021f41: and al, 0x18; call rax; 
0x00000000000a42f0: and al, 0x18; call rbx; 
0x0000000000123f87: and al, 0x18; call rcx; 
0x000000000012a811: and al, 0x18; mov dword ptr [rax], 0xf; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000012a9fd: and al, 0x18; mov dword ptr [rax], 0xf; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000010726e: and al, 0x18; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; call rax; 
0x00000000001072ee: and al, 0x18; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; call rax; 
0x00000000000967c5: and al, 0x18; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x00000000000c0b40: and al, 0x18; mov eax, 0xf7; mov edi, dword ptr [rsp + 0xc]; movsxd r10, ecx; syscall; 
0x00000000000fb2e2: and al, 0x18; mov eax, ebx; movsxd r10, ecx; syscall; 
0x00000000000eb629: and al, 0x18; mov eax, ebx; syscall; 
0x0000000000102186: and al, 0x18; mov edi, 0x2000004; call rax; 
0x000000000013580b: and al, 0x18; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000012122b: and al, 0x18; mov esi, r13d; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000027930: and al, 0x18; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x00000000001287cb: and al, 0x18; mov r15, r14; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000012a853: and al, 0x18; mov rax, qword ptr [r13 + 8]; mov rdi, r13; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000010207b: and al, 0x18; mov rax, qword ptr [r15 + 0x28]; mov edi, 0x2000001; mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x000000000012aa43: and al, 0x18; mov rax, qword ptr [r15 + 8]; mov rdi, r15; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x0000000000123f2b: and al, 0x18; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000000c20f2: and al, 0x18; mov rax, qword ptr [rip + 0x301f5d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c2082: and al, 0x18; mov rax, qword ptr [rip + 0x301fcd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000078408: and al, 0x18; mov rax, qword ptr [rip + 0x345b2f]; mov rdi, qword ptr [rax]; call 0x5eaf0; add rsp, 0xd8; ret; 
0x000000000005d11a: and al, 0x18; mov rax, qword ptr [rip + 0x360e95]; mov rdi, qword ptr [rax]; call 0x54630; add rsp, 0xd8; ret; 
0x00000000000543c8: and al, 0x18; mov rax, qword ptr [rip + 0x369b6f]; mov rdi, qword ptr [rax]; call 0x49c40; add rsp, 0xd8; ret; 
0x00000000000bdc05: and al, 0x18; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp], rdx; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x000000000002761f: and al, 0x18; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a54f: and al, 0x18; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000011f46f: and al, 0x18; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000001203f4: and al, 0x18; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x000000000004aaa8: and al, 0x18; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000005fdf7: and al, 0x18; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x00000000000ed088: and al, 0x18; mov rdx, qword ptr [rsp]; mov rsi, qword ptr [rsp + 0x10]; mov eax, 0x10f; mov rdi, qword ptr [rsp + 8]; syscall; 
0x00000000000fbb5c: and al, 0x18; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ebx; movsxd r10, ecx; syscall; 
0x0000000000102089: and al, 0x18; mov rsi, qword ptr [rsp + 8]; call rax; 
0x00000000000f1d20: and al, 0x18; movsxd rdi, dword ptr [rsp + 0x14]; syscall; 
0x000000000008278d: and al, 0x18; pop rdx; pop rbx; pop rbp; jmp rax; 
0x000000000011fd88: and al, 0x1c; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x00000000000f125a: and al, 0x1c; mov r8d, eax; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x13; syscall; 
0x00000000000f12fa: and al, 0x1c; mov r8d, eax; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x14; syscall; 
0x00000000000eb61f: and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; syscall; 
0x000000000013174e: and al, 0x1d; add byte ptr [rax - 0x77], cl; fsubp st(0); xchg dword ptr [rcx + 0x2948fff1], eax; ret; 
0x0000000000000975: and al, 0x20; add byte ptr [rax], al; ret; 
0x000000000012001e: and al, 0x20; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000123d90: and al, 0x20; call rcx; 
0x00000000000f9d03: and al, 0x20; fstp xword ptr [rsp]; call 0xfa030; lea rax, qword ptr [rip + 0x2c7b2c]; add rsp, 0x18; ret; 
0x0000000000027f20: and al, 0x20; mov dword ptr [rsp + 8], esi; mov rsi, qword ptr [rsp + 0x50]; call rax; 
0x00000000000f1d16: and al, 0x20; mov eax, 0x10e; mov rsi, qword ptr [rsp + 0x18]; movsxd rdi, dword ptr [rsp + 0x14]; syscall; 
0x0000000000080a2d: and al, 0x20; mov qword ptr [rsp + 0x10], rcx; call rdx; 
0x000000000012b089: and al, 0x20; mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012279b: and al, 0x20; mov rcx, rbp; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000004aaad: and al, 0x20; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000005fdfc: and al, 0x20; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x000000000006fb34: and al, 0x20; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x00000000001907cc: and al, 0x26; add byte ptr [rax], al; adc byte ptr [rbx - 0x16], ah; call qword ptr [rax]; 
0x00000000000fc334: and al, 0x26; add byte ptr [rcx + rcx*4 - 0x31], cl; mov byte ptr [rbp - 0x689], 0x73; mov eax, 0x14; syscall; 
0x0000000000174aa4: and al, 0x26; outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x00000000000374a0: and al, 0x28; and edx, 1; mov dword ptr [rbx + 8], edx; add rsp, 0x40; pop rbx; ret; 
0x0000000000080844: and al, 0x28; call rax; 
0x00000000000a3f6d: and al, 0x28; call rbx; 
0x00000000000a3ffb: and al, 0x28; lea rcx, qword ptr [rax + 4]; call rbx; 
0x000000000012b092: and al, 0x28; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012b092: and al, 0x28; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x00000000000833b7: and al, 0x28; mov rdi, r12; call rax; 
0x000000000008080b: and al, 0x28; mov rdi, r14; call qword ptr [rax]; 
0x0000000000123d88: and al, 0x28; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x00000000000a3bac: and al, 0x28; mov rsi, r13; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000fa158: and al, 0x29; or byte ptr [rdi], 0x95; ret 0xcfeb; 
0x00000000000fb9d4: and al, 0x2c; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x000000000011a9f8: and al, 0x2c; add dword ptr [rcx + rcx*4 - 0x5c], ecx; ret; 
0x0000000000049020: and al, 0x30; add byte ptr [rcx + 0xf], al; xchg eax, ebp; ret 0x8348; 
0x00000000000462e3: and al, 0x30; add rsp, 0x170; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d015: and al, 0x30; add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a3a5b: and al, 0x30; lea r9, qword ptr [rsp + 0x38]; mov rsi, rbp; mov rdi, qword ptr [r12]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000008083f: and al, 0x30; mov dword ptr [rsp + 0x28], r11d; call rax; 
0x0000000000135f0b: and al, 0x30; mov dword ptr [rsp + 0xc], eax; call 0x1f4f0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x48; ret; 
0x000000000012e759: and al, 0x30; mov qword ptr [rsp + 8], rax; xor eax, eax; call rdx; 
0x000000000007f876: and al, 0x30; xor cl, byte ptr [rdi]; xchg eax, esp; ret 0x1589; 
0x000000000011dfda: and al, 0x30; xor edx, edx; mov rsi, r12; mov rdi, rbp; mov rcx, r13; call rbx; 
0x0000000000135dbb: and al, 0x31; ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x00000000000f0fba: and al, 0x31; ror byte ptr [rax - 0x7f], 0xc4; cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000126755: and al, 0x31; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rsp + 0x40], 0; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x00000000000a8f43: and al, 0x31; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x0000000000127981: and al, 0x34; add dword ptr [rsp + rax*8 + 0x49], esi; mov edi, dword ptr [rbp]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000123e70: and al, 0x34; add dword ptr [rsp + rdi*4 + 0x49], esi; mov edi, dword ptr [rbp]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000002fc0b: and al, 0x34; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018af00: and al, 0x35; cmc; dec esp; ret 1; 
0x00000000001734dc: and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000001293de: and al, 0x38; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x000000000004902a: and al, 0x38; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x854d; 
0x000000000010765e: and al, 0x38; mov dword ptr [rbp - 0x80], 0; mov qword ptr [rbp - 0x70], rdx; mov rdx, r14; call rax; 
0x00000000000f2317: and al, 0x38; mov eax, edx; add rsp, 0x48; ret; 
0x0000000000036e89: and al, 0x38; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x000000000012b084: and al, 0x38; mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x00000000000a449f: and al, 0x38; mov rcx, r13; mov rdi, rbp; call rbx; 
0x0000000000126973: and al, 0x38; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000a3a60: and al, 0x38; mov rsi, rbp; mov rdi, qword ptr [r12]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x0000000000031b66: and al, 0x39; add byte ptr [rax - 0x73], cl; cmp eax, 0x38df90; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031b93: and al, 0x39; add byte ptr [rax - 0x73], cl; cmp eax, 0x38e0e3; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018ad00: and al, 0x3d; hlt; jmp rsp; 
0x000000000012675d: and al, 0x40; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x0000000000025ae4: and al, 0x40; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000012b284: and al, 0x40; mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012e74f: and al, 0x40; mov qword ptr [rsp + 0x70], rax; lea rax, qword ptr [rsp + 0x30]; mov qword ptr [rsp + 8], rax; xor eax, eax; call rdx; 
0x0000000000123f7f: and al, 0x40; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x18]; call rcx; 
0x00000000000f1cbf: and al, 0x40; movsxd rdi, edi; mov eax, 0x10e; syscall; 
0x0000000000076a6d: and al, 0x41; call qword ptr [rbp + 8]; 
0x00000000001203ea: and al, 0x41; call qword ptr [rbx]; 
0x00000000001203ea: and al, 0x41; call qword ptr [rbx]; mov rdx, qword ptr [rbx + 8]; mov dword ptr [rsp + 0x18], eax; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x00000000000767dc: and al, 0x41; call qword ptr [rdi + 8]; 
0x000000000011dac6: and al, 0x41; call rsp; 
0x00000000000d9a54: and al, 0x44; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000116286: and al, 0x44; mov dword ptr [rsp + 4], ebx; call 0x115190; add rsp, 0x88; ret; 
0x000000000018d7d0: and al, 0x45; cli; jmp rsp; 
0x000000000011fee4: and al, 0x48; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r13; call qword ptr [rax]; 
0x0000000000133a26: and al, 0x48; add esp, 0x10; pop rbx; ret; 
0x000000000005db15: and al, 0x48; add esp, 0x18; mov eax, edx; ret; 
0x00000000000cb63e: and al, 0x48; add esp, 0x18; mov rax, rdx; ret; 
0x0000000000124f16: and al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000f09f9: and al, 0x48; add esp, 0x18; ret; 
0x000000000002430e: and al, 0x48; add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fd485: and al, 0x48; add esp, 0x38; ret; 
0x00000000000fd4e6: and al, 0x48; add esp, 0x40; ret; 
0x0000000000077f3d: and al, 0x48; add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000135e65: and al, 0x48; add rax, qword ptr [rdx + 8]; add rsp, 0x58; ret; 
0x000000000012676b: and al, 0x48; call qword ptr [rax + 0x28]; 
0x00000000000a3a68: and al, 0x48; lea ecx, dword ptr [rax + 1]; call rbx; 
0x000000000011fccf: and al, 0x48; lea rdx, qword ptr [rip + 0x388]; mov qword ptr [rsp + 8], rdi; mov esi, 1; mov rdi, r15; call qword ptr [rax]; 
0x000000000012d033: and al, 0x48; mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000012a7f6: and al, 0x48; mov dword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x000000000002851b: and al, 0x48; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000135c5d: and al, 0x48; mov eax, dword ptr [rax + 0xe8]; jmp rax; 
0x000000000013659b: and al, 0x48; mov eax, dword ptr [rax]; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000012db04: and al, 0x48; mov eax, dword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x000000000012e0c0: and al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e0c0: and al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; ret; 
0x0000000000121a59: and al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121a59: and al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000135ce1: and al, 0x48; mov eax, dword ptr [rip + 0x288177]; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x00000000000a35c4: and al, 0x48; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bdc0f: and al, 0x48; mov edx, dword ptr [rsp + 0x28]; call rax; 
0x00000000000ebbf4: and al, 0x48; mov edx, ebx; mov esi, 9; mov rdi, r9; mov eax, r8d; syscall; 
0x00000000001201fb: and al, 0x48; mov esi, dword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x00000000000ed08d: and al, 0x48; mov esi, dword ptr [rsp + 0x10]; mov eax, 0x10f; mov rdi, qword ptr [rsp + 8]; syscall; 
0x000000000011f482: and al, 0x48; mov esi, ebp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000012d477: and al, 0x48; mov esi, esp; call qword ptr [rax + 8]; 
0x0000000000027f1b: and al, 0x48; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rsp + 8], esi; mov rsi, qword ptr [rsp + 0x50]; call rax; 
0x0000000000025adf: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x00000000000f75c2: and al, 0x48; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000125f52: and al, 0x49; mov eax, dword ptr [rsp + 8]; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000110e20: and al, 0x49; mov eax, ebp; mov ecx, 0x400; mov rdx, r15; mov rdi, r12; call rax; 
0x00000000000fad38: and al, 0x49; mov edx, ecx; mov eax, 0x113; syscall; 
0x00000000000fadc8: and al, 0x49; mov edx, ecx; mov eax, 0x114; syscall; 
0x00000000000f04e8: and al, 0x49; mov edx, ecx; mov eax, 0x115; syscall; 
0x00000000000fae88: and al, 0x49; mov edx, ecx; mov eax, 0x116; syscall; 
0x00000000000cb568: and al, 0x49; mov edx, ecx; mov eax, 0x11; syscall; 
0x00000000000cb5c8: and al, 0x49; mov edx, ecx; mov eax, 0x12; syscall; 
0x00000000000f1c48: and al, 0x49; mov edx, ecx; mov eax, 0x17; syscall; 
0x00000000000fb518: and al, 0x49; mov edx, ecx; mov eax, 0x2c; syscall; 
0x00000000000fb348: and al, 0x49; mov edx, ecx; mov eax, 0x2d; syscall; 
0x00000000000fbc88: and al, 0x49; mov edx, ecx; mov eax, 0x45; syscall; 
0x00000000000fbce8: and al, 0x49; mov edx, ecx; mov eax, 0x46; syscall; 
0x00000000000faa08: and al, 0x49; mov edx, ecx; mov eax, 0xe8; syscall; 
0x000000000011f5d3: and al, 0x4c; mov esi, esi; mov r13d, 7; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000189820: and al, 0x4e; out dx, eax; dec esp; sub byte ptr [rcx], al; add byte ptr [rsi + rcx*2 - 0x11], dh; jmp rsp; 
0x0000000000027f29: and al, 0x50; call rax; 
0x000000000002762e: and al, 0x50; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a55e: and al, 0x50; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000012a7ed: and al, 0x50; mov rax, qword ptr [r13 + 8]; mov qword ptr [rsp], r15; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x0000000000028516: and al, 0x50; mov rdi, qword ptr [rsp + 0x48]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002793a: and al, 0x50; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000025fa7: and al, 0x50; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002a435: and al, 0x50; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000027814: and al, 0x58; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000028742: and al, 0x58; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000027f16: and al, 0x58; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rsp + 8], esi; mov rsi, qword ptr [rsp + 0x50]; call rax; 
0x0000000000126a8a: and al, 0x58; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000025ada: and al, 0x58; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x00000000000491ba: and al, 0x60; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002780f: and al, 0x60; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000004919b: and al, 0x60; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000186cdc: and al, 0x65; cld; push qword ptr [rsp + 0x6444fffc]; cld; call rsp; 
0x000000000012d394: and al, 0x66; mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x0000000000028738: and al, 0x68; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x58]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000028137: and al, 0x68; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x78]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000018d068: and al, 0x69; stc; call rsp; 
0x000000000018d078: and al, 0x6a; stc; jmp rsp; 
0x00000000001246c4: and al, 0x6e; add byte ptr [rax], al; add al, ch; imul edi, ebp, 0x89c085ff; ret; 
0x000000000018da00: and al, 0x6e; cli; jmp rsp; 
0x000000000012e754: and al, 0x70; lea rax, qword ptr [rsp + 0x30]; mov qword ptr [rsp + 8], rax; xor eax, eax; call rdx; 
0x0000000000027624: and al, 0x70; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a554: and al, 0x70; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002793f: and al, 0x70; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000043bbd: and al, 0x73; ror byte ptr [rax - 0x7d], 1; ret; 
0x00000000000ffb61: and al, 0x74; adc al, 0x5b; pop rbp; xor eax, eax; pop r12; ret; 
0x0000000000136c1b: and al, 0x74; ficomp dword ptr [rbx + 0x5d]; xor eax, eax; pop r12; ret; 
0x000000000003544b: and al, 0x74; ret 0x8d48; 
0x00000000001a0534: and al, 0x76; int1; jmp qword ptr [rdx]; 
0x0000000000028141: and al, 0x78; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000012681c: and al, 0x78; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000000c9014: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000d6b23: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000dc441: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000e0de9: and al, 0x80; add byte ptr [rax], al; add byte ptr [rbx + 0x3978244c], cl; ret 0x1372; 
0x00000000000a4194: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rdi, rbp; call rbx; 
0x00000000000a478f: and al, 0x80; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x17], cl; mov rdi, rbp; call rbx; 
0x00000000000ec4a7: and al, 0x84; sal byte ptr [rdx + rcx + 0x49], cl; movsxd rdi, ebp; mov eax, 3; syscall; 
0x00000000001306ad: and al, 0x85; ror byte ptr [rdi], 0x89; ret; 
0x00000000001a68cc: and al, 0x87; add dword ptr [rax], eax; jo 0x1a68ae; hlt; call qword ptr [rax]; 
0x000000000018a1c8: and al, 0x87; int1; jmp rsp; 
0x0000000000126b6b: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000007eded: and al, 0x89; adc al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000001145a9: and al, 0x89; ret 0xc148; 
0x00000000000b367e: and al, 0x89; ret; 
0x0000000000044edf: and al, 0x90; add byte ptr [rax], al; add bl, ch; ret 0x2e66; 
0x000000000004554d: and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret; 
0x0000000000045870: and al, 0x90; add byte ptr [rax], al; add cl, ch; cmp eax, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000003f9f5: and al, 0x90; add byte ptr [rax], al; add cl, ch; xor dl, 0xff; dec dword ptr [rax + 0x63]; ret 0x3ce9; 
0x00000000000485ea: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0xd7e9; 
0x00000000000ebaae: and al, 0x98; mov esi, 0x10; mov rdi, r10; mov eax, r9d; syscall; 
0x00000000000ebac6: and al, 0x9c; mov edx, eax; neg edx; cmp dword ptr [rsp - 0x68], 2; cmove eax, edx; ret; 
0x00000000000279ef: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x48; dec dword ptr [rcx - 0x7d]; ret; 
0x0000000000027a39: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4101; 
0x00000000000e1e85: and al, 0xa4; add byte ptr [rax], al; add byte ptr [rcx], bh; ret 0x8f0f; 
0x00000000001a87cc: and al, 0xa6; add dword ptr [rax], eax; and byte ptr [rdi - 0xb], dl; call qword ptr [rdx]; 
0x00000000000f0804: and al, 0xa8; mov eax, ebp; syscall; 
0x00000000000f23e6: and al, 0xa8; sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000187700: and al, 0xad; cld; push qword ptr [rsp + rbp*4 - 0x53bb0004]; cld; call rsp; 
0x0000000000165bf8: and al, 0xaf; and eax, 0xf31e7500; ret; 
0x00000000000eadb3: and al, 0xb0; add byte ptr [rax], al; add al, ch; ret; 
0x0000000000027487: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000003ffc8: and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000eb4d5: and al, 0xb8; add al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000eb6c5: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000001276ff: and al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x00000000000eb725: and al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000000ebe25: and al, 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000c0d95: and al, 0xb8; and al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000c0df5: and al, 0xb8; and eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000f23d8: and al, 0xb8; cmova r10, qword ptr [rax + 0x18]; mov eax, 0x65; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x00000000000fa2d8: and al, 0xb8; mov qword ptr [rsp - 0x40], rbp; mov al, 0x9c; mov qword ptr [rsp - 0x38], r8; mov qword ptr [rsp - 0x30], r9; syscall; 
0x00000000000fa3c5: and al, 0xb8; or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000000f4925: and al, 0xb8; sbb al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000fb175: and al, 0xb8; sub al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000fb0e5: and al, 0xb8; sub eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000fafd5: and al, 0xb8; xor byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x000000000018dbc0: and al, 0xbb; cli; jmp rsp; 
0x0000000000129b89: and al, 0xbe; add al, 0; add byte ptr [rax], al; mov qword ptr [rsp + 8], rdi; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000189238: and al, 0xbe; out dx, al; push qword ptr [rbp + rdi*8 - 0x416c0000]; out dx, al; jmp rsp; 
0x000000000012b526: and al, 0xc0; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x00000000000fa2dd: and al, 0xc0; mov al, 0x9c; mov qword ptr [rsp - 0x38], r8; mov qword ptr [rsp - 0x30], r9; syscall; 
0x000000000019a4cc: and al, 0xc3; add byte ptr [rax], al; jo 0x19a4fd; out dx, al; call qword ptr [rdx]; 
0x00000000000fbad8: and al, 0xc6; add byte ptr [rax], al; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x00000000000d0b0b: and al, 0xc6; or byte ptr [r9], r8b; mov byte ptr [rdi], 0x5b; mov eax, 1; ret; 
0x00000000001aa8cc: and al, 0xc7; add dword ptr [rax], eax; rcl dh, 0xf5; jmp qword ptr [rsi]; 
0x00000000000021c5: and al, 0xc7; jno 0x2212; ret 0x1dd4; 
0x00000000000f093b: and al, 0xc8; mov esi, 0x5401; movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000000fa2e4: and al, 0xc8; mov qword ptr [rsp - 0x30], r9; syscall; 
0x00000000000f0751: and al, 0xc8; syscall; 
0x0000000000125f95: and al, 0xc; add byte ptr [rax], al; add byte ptr [rsi + 8], bh; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000003cad9: and al, 0xc; add rsp, 0x18; ret; 
0x00000000000c0b66: and al, 0xc; add rsp, 0x28; ret; 
0x0000000000135f18: and al, 0xc; add rsp, 0x48; ret; 
0x00000000000c0b5d: and al, 0xc; call 0x108100; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000135f0f: and al, 0xc; call 0x1f4f0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x48; ret; 
0x00000000000f0a19: and al, 0xc; mov dword ptr [rsp + 0xc], esi; mov esi, 0x5410; call 0xf11e0; add rsp, 0x18; ret; 
0x00000000000ebc51: and al, 0xc; mov eax, 0x48; syscall; 
0x00000000000fbb66: and al, 0xc; mov eax, ebx; movsxd r10, ecx; syscall; 
0x00000000000f0a8d: and al, 0xc; mov eax, ecx; syscall; 
0x00000000000f0a1d: and al, 0xc; mov esi, 0x5410; call 0xf11e0; add rsp, 0x18; ret; 
0x00000000001294a1: and al, 0xc; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x00000000000700d5: and al, 0xc; mov rax, qword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000108965: and al, 0xc; mov rdi, rbx; mov eax, 0xe6; mov r10, rcx; syscall; 
0x00000000000c0a4a: and al, 0xc; mov rsi, qword ptr [rsp]; mov eax, ecx; movsxd rdi, dword ptr [rsp + 8]; syscall; 
0x00000000000c0b49: and al, 0xc; movsxd r10, ecx; syscall; 
0x00000000000f0585: and al, 0xc; movsxd rdi, dword ptr [rsp + 8]; mov eax, ebx; syscall; 
0x00000000000d9283: and al, 0xcc; add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax], al; add al, ch; jmp qword ptr [rcx - 0xc]; 
0x00000000000fa2e9: and al, 0xd0; syscall; 
0x000000000018dcf0: and al, 0xd5; cli; push qword ptr [rbp - 0x29ebfffe]; cli; jmp rsp; 
0x000000000006f5ef: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000749dc: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000007234c: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x10]; 
0x000000000006f5bb: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000018e140: and al, 0xdb; std; jmp rsp; 
0x00000000000e8a60: and al, 0xe0; add byte ptr [rax], al; add byte ptr [rdi + 1], bh; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003680e: and al, 0xe8; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000120717: and al, 0xe8; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax + 0x20]; 
0x00000000000f9d07: and al, 0xe8; and eax, dword ptr [rbx]; add byte ptr [rax], al; lea rax, qword ptr [rip + 0x2c7b2c]; add rsp, 0x18; ret; 
0x00000000000b077c: and al, 0xe8; fild qword ptr [rsp - 0x18]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000003679d: and al, 0xe8; fld st(0); fstp xword ptr [rdi]; fsubp st(1); ret; 
0x00000000000367dc: and al, 0xe8; fld xword ptr [rsp - 0x18]; fld st(0); fstp xword ptr [rdi]; fsubp st(1); ret; 
0x000000000003683b: and al, 0xe8; fstp xword ptr [rdi]; ret; 
0x00000000000b0780: and al, 0xe8; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000010aa92: and al, 0xe8; mov eax, 0x83; syscall; 
0x00000000000f2f5a: and al, 0xe8; mov rsi, rdi; mov r10d, 0x100; mov rdi, -0x64; mov eax, 0x118; syscall; 
0x00000000000369b6: and al, 0xe8; movsx eax, word ptr [rsp - 0x10]; and eax, 0x8000; ret; 
0x0000000000044458: and al, 0xe8; ret 0xfff1; 
0x000000000003681b: and al, 0xe8; ret; 
0x0000000000039e80: and al, 0xe8; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000b42dd: and al, 0xe8; sub eax, 0x48ffffd1; add esp, 0x18; ret; 
0x00000000000f9d45: and al, 0xe8; xor eax, 0x48fff5a7; add esp, 0x10; mov rax, rbx; pop rbx; ret; 
0x00000000000f2ffa: and al, 0xe8; xor r10d, r10d; xor esi, esi; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x0000000000192a3d: and al, 0xeb; jmp qword ptr [rdx]; 
0x000000000002ae5c: and al, 0xeb; ret 0x8948; 
0x0000000000036799: and al, 0xec; fld xword ptr [rsp - 0x18]; fld st(0); fstp xword ptr [rdi]; fsubp st(1); ret; 
0x0000000000039e88: and al, 0xec; fld xword ptr [rsp - 0x18]; ret; 
0x000000000019cfcc: and al, 0xee; add byte ptr [rax], al; xor dh, dh; out dx, al; call qword ptr [rdx + 4]; 
0x000000000019a1e1: and al, 0xee; call qword ptr [rsi]; 
0x0000000000073ce9: and al, 0xf0; add dword ptr [rax], eax; add byte ptr [rax - 0x7f], cl; ret; 
0x00000000000369bb: and al, 0xf0; and eax, 0x8000; ret; 
0x0000000000036837: and al, 0xf0; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000036817: and al, 0xf0; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000368f1: and al, 0xf0; mov dword ptr [rdi], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000b0786: and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000b078c: and al, 0xf0; ret; 
0x00000000001792e1: and al, 0xf4; call qword ptr [rdx + 0x22]; 
0x00000000001ae171: and al, 0xf6; jmp qword ptr [rcx]; 
0x0000000000039e41: and al, 0xf8; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000039e47: and al, 0xf8; ret; 
0x0000000000039a93: and al, 0xf; and r8, 0xfffffffffffffff0; call 0x39230; leave; ret; 
0x0000000000039ad1: and al, 0xf; and rcx, 0xfffffffffffffff0; call 0x39700; leave; ret; 
0x0000000000086325: and al, 0xf; test byte ptr [rax + rax - 0x76b80000], ah; out dx, al; mov rdi, rbx; call rax; 
0x00000000000e73ee: and al, 0xf; test byte ptr [rdx + 0x3c000015], dh; sub cl, byte ptr [rdi]; xchg eax, esp; ret 0x403c; 
0x000000000018d611: and al, 0xfa; jmp rsp; 
0x0000000000036862: and al, 0xfc; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000036866: and al, 0xfc; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000186b41: and al, 0xfc; inc dword ptr [rax]; cld; call qword ptr [rax + 0x27]; 
0x0000000000039dfb: and al, 0xfc; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000039e01: and al, 0xfc; ret; 
0x000000000018d510: and al, 0xfc; stc; jmp rsp; 
0x000000000010ab1b: and al, 0xfe; call qword ptr [rax - 0x18]; 
0x00000000000369e7: and al, 0xfe; fldcw word ptr [rsp - 2]; ret; 
0x00000000000369eb: and al, 0xfe; ret; 
0x00000000000a3f65: and al, 1; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x28; call rbx; 
0x00000000000ebec1: and al, 1; add byte ptr [rax], al; syscall; 
0x000000000019e4cc: and al, 3; add dword ptr [rax], eax; or byte ptr [rdx - 0x10], 0xff; ret; 
0x0000000000120f7e: and al, 3; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x000000000011628a: and al, 4; call 0x115190; add rsp, 0x88; ret; 
0x0000000000022169: and al, 4; mov rdx, qword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x00000000000b43dc: and al, 4; mov word ptr [rbx + 0xc], ax; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x00000000000fa5a9: and al, 4; movsxd r10, ecx; mov ecx, 0x119; mov eax, ecx; syscall; 
0x00000000000fbac2: and al, 4; movsxd r10, ecx; syscall; 
0x000000000009d7b8: and al, 7; add byte ptr [rax], al; ret; 
0x00000000000a60f8: and al, 8; adc byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0xf983; 
0x00000000001162d1: and al, 8; add byte ptr [rax], al; add byte ptr [rax], al; call 0x114d00; add rsp, 0x18; ret; 
0x000000000011f95c: and al, 8; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax]; 
0x000000000012e44e: and al, 8; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000022126: and al, 8; add rsp, 0x18; jmp rax; 
0x0000000000036fc8: and al, 8; add rsp, 0x18; ret; 
0x00000000000f1288: and al, 8; add rsp, 0x28; ret; 
0x000000000007decb: and al, 8; and rdi, rdx; neg rdi; call qword ptr [rax]; 
0x0000000000036fbf: and al, 8; call 0x108100; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f127e: and al, 8; call 0x108100; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000022115: and al, 8; call 0x1f595; mov rax, qword ptr [rip + 0x39d93d]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x000000000003d09e: and al, 8; call 0x3d1f0; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003d0ee: and al, 8; call 0x3d260; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f4ace: and al, 8; call 0xf4c10; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f5316: and al, 8; call 0xf4e90; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x000000000011f579: and al, 8; call qword ptr [rax + 0x18]; 
0x000000000007def5: and al, 8; call qword ptr [rax]; 
0x00000000000867c2: and al, 8; call qword ptr [rdx]; 
0x000000000010208e: and al, 8; call rax; 
0x0000000000025ae8: and al, 8; call rbx; 
0x00000000001209a0: and al, 8; call rcx; 
0x000000000003686a: and al, 8; fscale; fstp st(1); ret; 
0x00000000000369b2: and al, 8; fstp xword ptr [rsp - 0x18]; movsx eax, word ptr [rsp - 0x10]; and eax, 0x8000; ret; 
0x0000000000127859: and al, 8; lea r14d, dword ptr [rax - 1]; mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x000000000012604c: and al, 8; lea rsi, qword ptr [rbp + 0x18]; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000012d9d7: and al, 8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000012da1e: and al, 8; lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000003742b: and al, 8; mov dword ptr [rbx + 8], edx; xor eax, eax; add rsp, 0x140; pop rbx; ret; 
0x00000000000f1267: and al, 8; mov eax, 0x13; syscall; 
0x00000000000f1307: and al, 8; mov eax, 0x14; syscall; 
0x00000000000fa338: and al, 8; mov eax, 0x38; syscall; 
0x0000000000036fa9: and al, 8; mov eax, 0x82; syscall; 
0x00000000000fbabb: and al, 8; mov eax, ebx; movsxd rdi, dword ptr [rsp + 4]; movsxd r10, ecx; syscall; 
0x00000000000f058a: and al, 8; mov eax, ebx; syscall; 
0x0000000000021f35: and al, 8; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000011fcdb: and al, 8; mov esi, 1; mov rdi, r15; call qword ptr [rax]; 
0x0000000000125f56: and al, 8; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000013592e: and al, 8; mov qword ptr [rsp + 0x10], rcx; lea rdi, qword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x000000000011fedf: and al, 8; mov qword ptr [rsp + 0x48], 0; mov rdi, r13; call qword ptr [rax]; 
0x0000000000075b1e: and al, 8; mov rax, qword ptr [rax + 0x38]; mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x0000000000121ad1: and al, 8; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000bc4d3: and al, 8; mov rax, qword ptr [rip + 0x307b2c]; lea rdi, qword ptr [rip + 0x30361d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7a3: and al, 8; mov rax, qword ptr [rip + 0x39485c]; lea rdi, qword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f5447: and al, 8; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000027629: and al, 8; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a559: and al, 8; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000027935: and al, 8; mov rax, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002873d: and al, 8; mov rax, qword ptr [rsp + 0x58]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002813c: and al, 8; mov rax, qword ptr [rsp + 0x78]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x00000000000fd480: and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000fd4e1: and al, 8; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000002216e: and al, 8; mov rcx, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x00000000000f5320: and al, 8; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x000000000006e488: and al, 8; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x00000000000f532f: and al, 8; mov rdi, rax; call 0x1f4f0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000121af7: and al, 8; mov rdi, rbx; call qword ptr [rax + 8]; 
0x0000000000129b92: and al, 8; mov rdi, rbx; call qword ptr [rax]; 
0x000000000003d06e: and al, 8; mov rdi, rsi; call 0x3d1f0; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f234a: and al, 8; mov rdi, rsp; call 0xc0dd0; add rsp, 0x18; ret; 
0x000000000011ece9: and al, 8; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x0000000000027f24: and al, 8; mov rsi, qword ptr [rsp + 0x50]; call rax; 
0x000000000012601b: and al, 8; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000126031: and al, 8; mov rsi, rsp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x00000000000fb2dd: and al, 8; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; movsxd r10, ecx; syscall; 
0x00000000000fa5a4: and al, 8; movsxd rdi, dword ptr [rsp + 4]; movsxd r10, ecx; mov ecx, 0x119; mov eax, ecx; syscall; 
0x00000000000c09ba: and al, 8; or rdi, 0xffffffffffffffff; mov eax, ecx; syscall; 
0x000000000003673b: and al, 8; ret; 
0x00000000000c0a55: and al, 8; syscall; 
0x000000000012e75e: and al, 8; xor eax, eax; call rdx; 
0x0000000000036998: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 0x20; pop rbx; ret; 
0x0000000000036390: and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000c0d7a: and al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000011f569: and al, byte ptr [rax]; add byte ptr [rcx], al; mov rdi, rbp; mov edx, dword ptr [rbx + 0x22c0]; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000000452c: and al, byte ptr [rax]; or al, 0; push rax; ret 0xb; 
0x0000000000008954: and al, byte ptr [rax]; or al, 0; rol byte ptr [rbp + 8], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x00000000000d498d: and al, byte ptr [rbx + 0xd7403f8]; xor eax, eax; pop rbx; ret; 
0x000000000002f7da: and al, byte ptr [rbx]; cmp dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000746fa: and al, byte ptr [rcx]; add byte ptr [rax], al; nop; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000187140: and al, byte ptr [rdi - 0x794d0004]; cld; inc dword ptr [rdx - 0x7a]; cld; call rdx; 
0x00000000001b8914: and al, byte ptr [rdi]; add byte ptr [rax], al; jp 0x1b891c; add byte ptr [rax], al; ret 6; 
0x00000000000a60f2: and al, byte ptr [rip + 0x7c830000]; and al, 8; adc byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0xf983; 
0x0000000000086cfa: and al, byte ptr [rsp - 0xb7f68c]; ret 0xc148; 
0x00000000000da327: and al, ch; ret; 
0x000000000002fe72: and ax, 0x1000; movzx eax, ax; ret; 
0x000000000002fe52: and ax, 0x100; movzx eax, ax; ret; 
0x000000000002fe32: and ax, 0x2000; movzx eax, ax; ret; 
0x000000000002fdb2: and ax, 0x200; movzx eax, ax; ret; 
0x000000000002fdf2: and ax, 0x4000; movzx eax, ax; ret; 
0x000000000002fd52: and ax, 0x400; movzx eax, ax; ret; 
0x000000000002fdd2: and ax, 0x8000; movzx eax, ax; ret; 
0x000000000002fd92: and ax, 0x800; movzx eax, ax; ret; 
0x00000000000369de: and ax, 0xf0c0; or edi, eax; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x0000000000186b39: and bh, ah; jmp qword ptr [rax + 0x23]; 
0x00000000000529aa: and bh, al; add ch, byte ptr [rbx]; add byte ptr [rax], al; add cl, ch; sar ecx, -1; jmp qword ptr [rsi + 0x2e]; 
0x00000000000213a6: and bh, bh; ret 0x8948; 
0x00000000001aaa0d: and bh, bl; jmp qword ptr [rdx]; 
0x0000000000109f84: and bh, byte ptr [rax + 0x59]; syscall; 
0x0000000000002f60: and bh, byte ptr [rax - 0x52]; sub ebx, dword ptr [rsp + rax*2]; nop; ret 0x5bdb; 
0x00000000000bc6ea: and bh, byte ptr [rcx + 0x30]; add byte ptr [rax - 0x73], cl; cmp eax, 0x30340b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e0a: and bh, byte ptr [rcx]; add byte ptr [rax - 0x73], cl; cmp eax, 0x38deec; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000031dcc: and bh, byte ptr [rcx]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001980ce: and bh, byte ptr [rsi + 0xd1cffed]; int1; stosd dword ptr [rdi], eax; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001b0f24: and bh, byte ptr [rsi + rsi*8]; jmp qword ptr [rdx]; 
0x0000000000173a85: and bh, byte ptr [rsi - 0x5e0466e]; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x0000000000187348: and bh, byte ptr [rsp + rdi*8 - 1]; xchg eax, edx; jnp 0x18734b; jmp qword ptr [rdx]; 
0x00000000000723b1: and bh, dh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000148a6a: and bl, bh; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018625d: and bl, bh; jmp rax; 
0x0000000000186259: and bl, bh; push rax; and bl, bh; jmp rax; 
0x00000000000f9d04: and bl, bl; cmp al, 0x24; call 0xfa030; lea rax, qword ptr [rip + 0x2c7b2c]; add rsp, 0x18; ret; 
0x00000000001866f0: and bl, bl; sti; jmp rax; 
0x00000000000751ba: and bl, bpl; fbld dword ptr [rsi - 0x70]; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000174623: and bl, byte ptr [rdx + 0x7a]; pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000000751bb: and bl, ch; fbld dword ptr [rsi - 0x70]; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007a622: and bl, ch; ret 0x1f0f; 
0x00000000001a63c0: and bl, cl; hlt; jmp qword ptr [rdx]; 
0x000000000009dd8b: and bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x000000000009dd8a: and bl, r14b; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x000000000007d1ae: and byte ptr [r11 + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000096f52: and byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x317475c0], -0x40; ret; 
0x0000000000085581: and byte ptr [r8 + 0x31], r9b; ret 0x93be; 
0x000000000007f107: and byte ptr [r8 + 0x39], r9b; ret; 
0x000000000011f68e: and byte ptr [r8 - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x00000000000725da: and byte ptr [r8 - 0x75], r9b; sbb byte ptr [r8 + 0x29], cl; ret 0x8948; 
0x000000000011f4ac: and byte ptr [r8 - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x0000000000127f79: and byte ptr [r8 - 0x77], r9b; push rdi; sub byte ptr [rax + 1], bh; ret; 
0x00000000000a1016: and byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x000000000007b0a4: and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000011f550: and byte ptr [r9], sil; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000011f4c0: and byte ptr [r9], sil; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x00000000000f1d17: and byte ptr [rax + 0x10e], bh; mov rsi, qword ptr [rsp + 0x18]; movsxd rdi, dword ptr [rsp + 0x14]; syscall; 
0x000000000005fdfd: and byte ptr [rax + 0x29], cl; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x00000000000759cc: and byte ptr [rax + 0x2b], cl; sbb byte ptr [rcx + 0x5c], al; pop r13; pop r14; sar rax, 2; ret; 
0x00000000001034ed: and byte ptr [rax + 0x2b], cl; xor r9b, bpl; ret; 
0x00000000000850fb: and byte ptr [rax + 0x31], cl; ret 0x93be; 
0x000000000003c593: and byte ptr [rax + 0x39], cl; ret 0x1677; 
0x000000000003c5a9: and byte ptr [rax + 0x39], cl; ret 0xea76; 
0x000000000007f108: and byte ptr [rax + 0x39], cl; ret; 
0x00000000000782a8: and byte ptr [rax + 0x3b], cl; sub byte ptr [rbx + 0xb], sil; lea rsi, qword ptr [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000001201a3: and byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000096fd6: and byte ptr [rax + 1], cl; ret 0x347c; 
0x000000000007dbc3: and byte ptr [rax + 1], cl; ret; 
0x00000000000fbd94: and byte ptr [rax + rax], ch; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000187764: and byte ptr [rax - 0x504f0004], dh; cld; inc dword ptr [rax - 0x51]; cld; call rax; 
0x00000000001782d0: and byte ptr [rax - 0x5e0f0004], 0xfc; jmp qword ptr [rax - 0x5d]; 
0x000000000004dd85: and byte ptr [rax - 0x68], cl; movzx edx, byte ptr [rdx + rax]; lea rax, qword ptr [rip + 0x128fed]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x000000000017abf0: and byte ptr [rax - 0x6fc70006], dl; cli; call qword ptr [rax - 0x70]; 
0x00000000000f9ca9: and byte ptr [rax - 0x73], cl; add eax, 0x2c7bcf; pop rbx; pop rbp; pop r12; ret; 
0x000000000007f104: and byte ptr [rax - 0x73], cl; and byte ptr [r8 + 0x39], r9b; ret; 
0x00000000000f38bf: and byte ptr [rax - 0x75], cl; add cl, byte ptr [rax - 0x7b]; sal byte ptr [rbx + rcx + 0x48], 0x83; ret 0x4808; 
0x00000000000304f7: and byte ptr [rax - 0x75], cl; add eax, 0x393b11; lea rdi, qword ptr [rip + 0x38f77a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012b08a: and byte ptr [rax - 0x75], cl; cmp byte ptr [r8 - 0x77], r9b; and al, 0x28; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000011f68f: and byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x000000000007ff03: and byte ptr [rax - 0x75], cl; push rax; or dh, dh; ret 0xf04; 
0x00000000000725db: and byte ptr [rax - 0x75], cl; sbb byte ptr [r8 + 0x29], cl; ret 0x8948; 
0x000000000012d0a5: and byte ptr [rax - 0x77], cl; adc al, 0x24; call qword ptr [rax + 8]; 
0x0000000000080a2e: and byte ptr [rax - 0x77], cl; and al, 0x10; call rdx; 
0x00000000000725d7: and byte ptr [rax - 0x77], cl; and byte ptr [r8 - 0x75], r9b; sbb byte ptr [r8 + 0x29], cl; ret 0x8948; 
0x000000000006e60d: and byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000011fa40: and byte ptr [rax - 0x77], cl; fistp word ptr [rbx - 0x17]; cmpsb byte ptr [rsi], byte ptr [rdi]; cli; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000011f4ad: and byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000003ab3c: and byte ptr [rax - 0x77], cl; pop rax; or cl, ch; ret 0xfffa; 
0x00000000000f0494: and byte ptr [rax - 0x77], cl; pop rbx; ret; 
0x0000000000127f7a: and byte ptr [rax - 0x77], cl; push rdi; sub byte ptr [rax + 1], bh; ret; 
0x0000000000133860: and byte ptr [rax - 0x77], cl; ret 0x3d83; 
0x0000000000048301: and byte ptr [rax - 0x77], cl; ret 0x8949; 
0x000000000007ff36: and byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000004438f: and byte ptr [rax - 0x77], cl; ret; 
0x0000000000024866: and byte ptr [rax - 0x7d], cl; ret; 
0x00000000001785e4: and byte ptr [rax - 0xe], ch; call qword ptr [rax + 0x68]; 
0x000000000006f783: and byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000078d22: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000071403: and byte ptr [rax], al; add byte ptr [rax + rdx - 0x75], dh; jo 0x71391; sar byte ptr [rax + 9], 0xf3; ret; 
0x00000000000c2588: and byte ptr [rax], al; add byte ptr [rax], al; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x000000000005f1df: and byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rbp - 0x10fc], 1; jmp rax; 
0x0000000000120ee5: and byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000a1b6c: and byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000c2571: and byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000ebe61: and byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000000f7a9e: and byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000018694c: and byte ptr [rax], al; cld; jmp qword ptr [rax - 0x15]; 
0x000000000000044b: and byte ptr [rax], al; mov dword ptr [rcx + 0x7c05000c], eax; adc byte ptr [rsp + rcx], bl; ret 0x4412; 
0x000000000009eecc: and byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x0000000000186abc: and byte ptr [rax], dh; cld; call qword ptr [rax]; 
0x0000000000186abc: and byte ptr [rax], dh; cld; call qword ptr [rax]; xor bh, ah; jmp rax; 
0x00000000000a1017: and byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000001456b5: and byte ptr [rbp + rcx*4 + 0x1d], cl; adc edx, dword ptr [rcx]; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148085: and byte ptr [rbp + rcx*4 + 0x1d], cl; add ebp, ecx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ce5: and byte ptr [rbp + rcx*4 + 0x1d], cl; and edi, dword ptr [rcx]; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000005d856: and byte ptr [rbp + rcx*4 + 0x3d], cl; ret 0x127f; 
0x00000000000d0e05: and byte ptr [rbp - 0x3a7cfe8e], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000001879b0: and byte ptr [rbp - 0x5b5f0004], ah; cld; jmp qword ptr [rax]; 
0x00000000000fc272: and byte ptr [rbp - 0x7b], cl; ror byte ptr [rdi], cl; test dword ptr [rdi + rdi*8 - 1], eax; dec dword ptr [rcx + rcx*4 - 0x31]; mov eax, 3; syscall; 
0x0000000000114810: and byte ptr [rbx + 0x2b2fff8], al; cmove eax, edx; ret; 
0x0000000000086748: and byte ptr [rbx + 0x50], 0xfe; mov qword ptr [rbx + 0x38], rcx; mov qword ptr [rbx + 0x40], r8; mov qword ptr [rbx], rdi; mov dword ptr [rbx + 0x30], eax; call rcx; 
0x000000000012157c: and byte ptr [rbx + 0x5d], bl; mov eax, 1; pop r12; ret; 
0x0000000000034858: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000024312: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000019786d: and byte ptr [rbx + 0xa410204], al; ret; 
0x000000000019e215: and byte ptr [rbx + 0xac90204], al; ret; 
0x000000000008c9a3: and byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x0000000000036b21: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx; 
0x000000000019e231: and byte ptr [rbx - 0x73fc79fc], al; add ah, byte ptr [rdi + 0xa]; ret; 
0x0000000000035c2f: and byte ptr [rbx - 0x76b7f7a9], cl; or byte ptr [r8 + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8d4c; 
0x000000000010893e: and byte ptr [rbx - 0xd], bl; ret; 
0x0000000000027f21: and byte ptr [rcx + 0x48082474], cl; mov esi, dword ptr [rsp + 0x50]; call rax; 
0x000000000007b0a5: and byte ptr [rcx + 0x5bc03113], cl; ret; 
0x00000000000fa4da: and byte ptr [rcx + 0xfffe7], al; add byte ptr [rip - 0x1000], ah; or eax, edi; ret; 
0x000000000017a54d: and byte ptr [rcx + rbp], bl; add byte ptr [rax], al; add byte ptr [rbx + rdx*8 - 0xa], ch; call rdx; 
0x0000000000039e85: and byte ptr [rcx - 0x2413dbbc], cl; insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x000000000003c8c8: and byte ptr [rcx - 0x2ff6b740], cl; ret; 
0x0000000000187794: and byte ptr [rcx - 0x575f0004], ch; cld; call qword ptr [rax]; 
0x000000000012c57e: and byte ptr [rcx - 0x75], cl; sbb byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8348; 
0x000000000018726c: and byte ptr [rcx - 0x774f0004], cl; cld; inc dword ptr [rax - 0x78]; cld; call rax; 
0x00000000000e3bbb: and byte ptr [rcx - 0x77], al; ret 0x3145; 
0x00000000001785fc: and byte ptr [rcx - 0xe], ch; inc dword ptr [rax + 0x69]; bnd jmp qword ptr [rax + 0x69]; bnd call qword ptr [rax - 0x3f000d97]; imul esi, edx, 0xf269f0ff; jmp qword ptr [rax]; 
0x000000000007d4f6: and byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rsi], rax; mov rax, r8; ret; 
0x00000000000ec760: and byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000fb9c1: and byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x00000000001898d5: and byte ptr [rcx], al; add byte ptr [rax], bl; push rcx; out dx, eax; call rsp; 
0x00000000000c0edb: and byte ptr [rcx], al; mov eax, 0x38; syscall; 
0x0000000000031fde: and byte ptr [rcx], bh; add byte ptr [rax - 0x77], cl; ret; 
0x000000000017a548: and byte ptr [rcx], ch; and byte ptr [rdi + 0x72], ch; and byte ptr [rcx + rbp], bl; add byte ptr [rax], al; add byte ptr [rbx + rdx*8 - 0xa], ch; call rdx; 
0x000000000006e595: and byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000fa153: and byte ptr [rcx], dh; sal dh, cl; and al, 0x29; or byte ptr [rdi], 0x95; ret 0xcfeb; 
0x000000000011f551: and byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000011f4c1: and byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x00000000000bc888: and byte ptr [rcx], dh; test byte ptr [rcx - 0x7d], 0xc4; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000e3ee4: and byte ptr [rdi + 0x38], 0xf9; mov dword ptr [rsi], 0; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x000000000017a54a: and byte ptr [rdi + 0x72], ch; and byte ptr [rcx + rbp], bl; add byte ptr [rax], al; add byte ptr [rbx + rdx*8 - 0xa], ch; call rdx; 
0x00000000000f048e: and byte ptr [rdi + rcx + 0x48], dh; xor eax, 0x20; mov qword ptr [rbx + 0x48], rax; pop rbx; ret; 
0x00000000001879a0: and byte ptr [rdi - 0x595f0004], ah; cld; jmp qword ptr [rax]; 
0x00000000001a8530: and byte ptr [rdi - 0xb], al; jmp rax; 
0x00000000001a87d0: and byte ptr [rdi - 0xb], dl; call qword ptr [rdx]; 
0x00000000001a50c0: and byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x0000000000186278: and byte ptr [rdi], 0xfb; push qword ptr [rax + 0x28]; sti; jmp qword ptr [rax + 0x29]; 
0x00000000001862b8: and byte ptr [rdi], bh; sti; inc eax; sti; jmp qword ptr [rax + 0x42]; 
0x0000000000186a58: and byte ptr [rdi], ch; cld; inc dword ptr [rax]; xor esp, edi; jmp rax; 
0x0000000000186868: and byte ptr [rdi], cl; cld; jmp qword ptr [rax]; 
0x000000000002fe35: and byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x00000000000bc472: and byte ptr [rdi], cl; test bh, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xdb31; 
0x00000000000f2a4e: and byte ptr [rdi], cl; test bl, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x3c01; 
0x00000000000f2aa6: and byte ptr [rdi], cl; test byte ptr [rbx], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x3c01; 
0x00000000000f29ed: and byte ptr [rdi], cl; test byte ptr [rcx + rax - 0x7cb80000], bh; ret 0x3c01; 
0x00000000000f298d: and byte ptr [rdi], cl; test byte ptr [rcx + rax - 0x7cb80000], dl; ret 0x3c01; 
0x000000000009da89: and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x0000000000162180: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000007d535: and byte ptr [rdi], cl; xchg eax, ebp; ret 0x8441; 
0x0000000000194d24: and byte ptr [rdx - 0x13], dh; jmp qword ptr [rdx]; 
0x00000000001781c0: and byte ptr [rdx - 0x65c7000f], bl; int1; call qword ptr [rax - 0x67]; 
0x000000000001f6dc: and byte ptr [rdx - 0x7cb7fff2], cl; in al, dx; or byte ptr [rcx + 0x415d5bd8], 0x5c; ret; 
0x0000000000187458: and byte ptr [rdx - 0x7e6f0004], al; cld; call qword ptr [rax]; 
0x0000000000178614: and byte ptr [rdx - 0xe], ch; call qword ptr [rax + 0x6a]; 
0x0000000000178614: and byte ptr [rdx - 0xe], ch; call qword ptr [rax + 0x6a]; inc dword ptr [rax - 0x4f000d96]; push -0xe; jmp rax; 
0x00000000001b0285: and byte ptr [rdx], al; add byte ptr [rax + 0x51], bl; sti; call rsi; 
0x0000000000186298: and byte ptr [rdx], dh; sti; inc eax; xor edi, ebx; jmp qword ptr [rax + 0x35]; 
0x00000000000ebe4d: and byte ptr [rip + 0x64d8f700], ch; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000007bf49: and byte ptr [rsi + 0x1e], dh; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007bf48: and byte ptr [rsi + 0x1e], sil; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000015fd1a: and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000015fd15: and byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000096f53: and byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x317475c0], -0x40; ret; 
0x00000000001879a8: and byte ptr [rsi - 0x5a5f0004], ah; cld; jmp qword ptr [rax]; 
0x00000000001867d4: and byte ptr [rsi], al; cld; inc dword ptr [rax]; or ah, bh; jmp rax; 
0x0000000000186250: and byte ptr [rsi], bl; sti; call qword ptr [rax]; 
0x00000000001869b4: and byte ptr [rsi], ch; cld; inc dword ptr [rax]; xor ah, bh; jmp rax; 
0x00000000001868e8: and byte ptr [rsi], cl; cld; jmp qword ptr [rax]; 
0x00000000001a73c0: and byte ptr [rsi], cl; cmc; jmp qword ptr [rcx]; 
0x000000000005bdf2: and byte ptr [rsi], dh; add byte ptr [rsp + rax*2 - 0x75], ah; and cl, byte ptr [rax - 0x39]; ret 0xfffe; 
0x00000000000f3211: and byte ptr [rsp + rbp*8 + 0x41], dh; mov byte ptr [rcx - 1], 0; ret; 
0x000000000018758c: and byte ptr [rsp + rdi*8 - 0x3544901], ch; jmp qword ptr [rsi]; 
0x00000000001879b8: and byte ptr [rsp + rdi*8 - 0x35c5f01], ah; jmp qword ptr [rax]; 
0x0000000000187054: and byte ptr [rsp + rdi*8 - 0x3744f01], cl; inc dword ptr [rax - 0x75]; cld; call rax; 
0x0000000000186b68: and byte ptr [rsp + rdi*8 - 1], ah; mov al, 0x63; cld; inc dword ptr [rax + 0x63]; cld; call rax; 
0x00000000001869f0: and byte ptr [rsp + rdi*8], ch; jmp rax; 
0x00000000001868e4: and byte ptr [rsp + rdi*8], cl; jmp qword ptr [rax]; 
0x00000000000fbe26: and byte ptr ds:[rax + rax], ch; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000017a547: and byte ptr fs:[rcx], ch; and byte ptr [rdi + 0x72], ch; and byte ptr [rcx + rbp], bl; add byte ptr [rax], al; add byte ptr [rbx + rdx*8 - 0xa], ch; call rdx; 
0x000000000019288d: and ch, bl; jmp qword ptr [rdx]; 
0x00000000000fb542: and ch, byte ptr [rcx]; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eaf42: and ch, byte ptr [rdi]; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1dd3: and ch, byte ptr [rip + 0x10750000]; mov eax, 0x4a; syscall; 
0x00000000000f1e63: and ch, byte ptr [rip + 0x10750000]; mov eax, 0x4b; syscall; 
0x0000000000187638: and ch, byte ptr [rsi - 0x524d0004]; cld; inc dword ptr [rdx - 0x53]; cld; call rdx; 
0x00000000001a1c40: and ch, ch; int1; call qword ptr [rax]; 
0x00000000000d473d: and ch, cl; cmp esp, -1; push rdi; ret 0; 
0x00000000001a7531: and ch, dh; jmp qword ptr [rsi]; 
0x000000000018667c: and cl, 0xfb; jmp qword ptr [rax - 0x1d]; 
0x00000000001aae80: and cl, ah; cmc; jmp qword ptr [rbx]; 
0x00000000000548ff: and cl, byte ptr [rax - 0x39]; ret 0xfffe; 
0x000000000011f1cc: and cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x0000000000048c14: and cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000092190: and cl, byte ptr [rcx + rcx*4 - 0x28]; pop rbx; pop rbp; pop r12; ret; 
0x000000000008bf6d: and cl, byte ptr [rcx - 0x77]; ret; 
0x000000000002e9e9: and cl, byte ptr [rdi]; xchg al, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x0000000000052d16: and cl, ch; pop rbx; idiv bh; jmp qword ptr [rsi - 0x7b]; 
0x00000000000bc57b: and cl, ch; ret 0xfffe; 
0x000000000008194b: and cl, ch; sar ah, 0xff; jmp qword ptr [rsi + 0x66]; 
0x00000000000bc57a: and cl, r13b; ret 0xfffe; 
0x0000000000109ff7: and dh, bh; call qword ptr [rax - 0x18]; 
0x000000000018b9f9: and dh, bh; call rsp; 
0x00000000001a8a74: and dh, bl; hlt; jmp qword ptr [rdx]; 
0x000000000012e3f5: and dh, byte ptr [rcx]; sar byte ptr [rdx - 1], 0x48; mov esi, ebx; mov rdi, rbp; call rcx; 
0x00000000001a1cc0: and dh, ch; int1; jmp qword ptr [rcx]; 
0x000000000019a0a1: and dh, ch; jmp qword ptr [rcx + 1]; 
0x00000000001add41: and dh, dh; call rdi; 
0x00000000001add29: and dh, dh; jmp qword ptr [rcx]; 
0x00000000001afc6d: and dh, dh; jmp qword ptr [rdx]; 
0x000000000008c57b: and dh, dh; ret 0x7504; 
0x00000000000369d9: and di, 0xf3f; and ax, 0xf0c0; or edi, eax; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x0000000000186700: and dl, 0xfb; call qword ptr [rax - 0x1c]; 
0x000000000018feb9: and dl, ch; call qword ptr [rax]; 
0x000000000018fee9: and dl, ch; call qword ptr [rsi]; 
0x00000000001a0850: and dl, cl; int1; call qword ptr [rbx]; 
0x00000000000bc7eb: and dword ptr [rax + 0x30], edi; add byte ptr [rax - 0x73], cl; cmp eax, 0x30330a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000011b23f: and dword ptr [rax + 0x40], 0xfffffff9; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000769d2: and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000000bdf89: and dword ptr [rax + 0x74], edi; syscall; 
0x00000000000fbcb3: and dword ptr [rax + rax], ebp; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000003078d: and dword ptr [rax + rax], edx; movsxd rax, dword ptr [rdx + r12*4]; add rdx, rax; jmp rdx; 
0x0000000000022d82: and dword ptr [rax - 0x77], ecx; fimul word ptr [rax - 0x77]; ret 0x8348; 
0x0000000000023046: and dword ptr [rax - 0x77], ecx; ret 0x8948; 
0x00000000001026e6: and dword ptr [rax - 0x77], ecx; ret 0xf66; 
0x00000000000f2811: and dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x00000000001306de: and dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000000a130: and dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x15; 
0x00000000000098a8: and dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x47; 
0x00000000000ebe91: and dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000004ef2c: and dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000005544e: and dword ptr [rax], eax; add byte ptr [rcx - 0x22f7b], cl; jmp qword ptr [rsi + 0xf]; 
0x0000000000056ebe: and dword ptr [rax], eax; add byte ptr [rcx - 0x2877b], cl; jmp qword ptr [rsi + 0xf]; 
0x00000000001765c2: and dword ptr [rax], edx; jmp qword ptr [rdi]; 
0x00000000000bd798: and dword ptr [rax], esi; add byte ptr [rax - 0x77], cl; ret 0xeee9; 
0x00000000000fae43: and dword ptr [rax], esi; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb243: and dword ptr [rbp + 0x64d8f700], ebp; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000000360b: and dword ptr [rbp + 0x7a8c9b32], ecx; mov dh, 0x1b; add eax, 0x572808a8; call qword ptr [rsi + 0x6f]; 
0x000000000019ac7e: and dword ptr [rbx - 0x12], 0xffffffff; sbb al, 0xd; loope 0x19acae; out dx, al; jmp qword ptr [rdx]; 
0x000000000007505f: and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x00000000000fab43: and dword ptr [rbx], esi; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa6d6: and dword ptr [rcx + rcx*4 - 0x31], ecx; mov eax, 0x11c; syscall; 
0x0000000000132d43: and dword ptr [rcx - 0x389bffd8], esi; add byte ptr [rsi], ah; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000018969d: and dword ptr [rcx], eax; add ah, ah; xor ebp, edi; call rsp; 
0x0000000000189695: and dword ptr [rcx], eax; add byte ptr [rbx + rsi + 0x21bcffef], dh; add dword ptr [rax], eax; in al, 0x33; out dx, eax; call rsp; 
0x0000000000031e37: and dword ptr [rcx], edi; add byte ptr [rax - 0x73], cl; cmp eax, 0x38debf; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f0b31: and dword ptr [rdi + 0xc], 0xffff7fb4; mov byte ptr [rdi + 0x16], 0; and eax, 0xfffffecf; or eax, 0x30; mov dword ptr [rdi + 8], eax; ret; 
0x00000000000375f6: and dword ptr [rdi + rdx*8], eax; xor eax, eax; ret; 
0x00000000000f0659: and dword ptr [rdi], 0x7fffffff; and eax, 0xffffeff0; or eax, esi; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x00000000000735e0: and dword ptr [rdi], 0xffffffcf; ret; 
0x00000000000794e4: and dword ptr [rdi], eax; add byte ptr [rdx + 0x48], bl; cwde; ret; 
0x00000000000377d8: and dword ptr [rdi], eax; xor eax, eax; ret; 
0x00000000000cbe2c: and dword ptr [rdi], ebp; add byte ptr [rsp + rcx*2 - 0x75], ah; sub byte ptr [rcx - 0x75], cl; or byte ptr [r8 - 0x77], r9b; ret 0x8948; 
0x00000000000305e3: and dword ptr [rdx], edi; cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38f692]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ebcd4: and dword ptr [rip + 0x64d8f700], ebp; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f610b: and dword ptr [rip - 0x9cf0000], eax; mov rdi, r12; call rbx; 
0x00000000000f8043: and dword ptr [rsi + 0x2c], ebx; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000037843: and dword ptr [rsi + 0x38], esp; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000173679: and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x000000000009d8bb: and dword ptr [rsi], eax; add byte ptr [rax], al; ret; 
0x00000000000fa843: and dword ptr [rsi], esi; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001765c1: and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000001653a6: and eax, 0; add bl, dh; ret; 
0x000000000002276b: and eax, 0; ret; 
0x00000000000f05c3: and eax, 0x100f; ret; 
0x0000000000072f02: and eax, 0x200; ret; 
0x0000000000186271: and eax, 0x2690fffb; sti; inc dword ptr [rax + 0x70fffb27]; sub bl, bh; jmp qword ptr [rax + 0x29]; 
0x00000000000fa374: and eax, 0x2d0; pop rax; pop rdi; call rax; 
0x00000000000c1cf5: and eax, 0x2d0; ret; 
0x00000000000fa36c: and eax, 0x2d4; mov dword ptr fs:[0x2d0], eax; pop rax; pop rdi; call rax; 
0x00000000000c1148: and eax, 0x2d4; mov eax, 0x3a; syscall; 
0x000000000008ab07: and eax, 0x30; add rsp, 8; jmp rax; 
0x0000000000021f62: and eax, 0x30; call rax; 
0x00000000000bdfd2: and eax, 0x30; call rax; add rsp, 0x38; ret; 
0x0000000000031e1c: and eax, 0x30; call rdx; 
0x0000000000036b52: and eax, 0x30; jmp rax; 
0x00000000001120ab: and eax, 0x30; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000004632f: and eax, 0x30; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006f7e4: and eax, 0x30; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c084: and eax, 0x30; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c484: and eax, 0x30; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab6c: and eax, 0x30; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb40: and eax, 0x30; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007add4: and eax, 0x30; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x0000000000065aa5: and eax, 0x30; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x00000000000641ad: and eax, 0x30; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed31: and eax, 0x30; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fc7: and eax, 0x30; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efbd: and eax, 0x30; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e89: and eax, 0x30; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x00000000000475e7: and eax, 0x394d3674; ret 0x830f; 
0x00000000000a1abd: and eax, 0x3fc00; pop rbx; ret; 
0x00000000000a1ae0: and eax, 0x3fc00; ret; 
0x00000000000a1b80: and eax, 0x3ffc0000; add eax, eax; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000000a1b97: and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000000a1a9c: and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000032137: and eax, 0x480038dc; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000093d9e: and eax, 0x5c415d5b; pop r13; pop r14; ret; 
0x00000000000ff703: and eax, 0x5c6002c; ret; 
0x0000000000144094: and eax, 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001b079d: and eax, 0x65300002; clc; jmp qword ptr [rbx]; 
0x00000000001b0715: and eax, 0x65480002; clc; jmp qword ptr [rbx]; 
0x00000000001180b8: and eax, 0x7d884010; add esi, dword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000002ff42: and eax, 0x7f; ret; 
0x00000000000a1b20: and eax, 0x7ff80000; ret; 
0x000000000003672e: and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000039df0: and eax, 0x7fffff; or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000036404: and eax, 0x7fffffff; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000036467: and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000036490: and eax, 0x80000000; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x00000000000369bd: and eax, 0x8000; ret; 
0x0000000000072ed2: and eax, 0x804; ret; 
0x00000000000363a4: and eax, 0x80; ret; 
0x00000000000e6467: and eax, 0x85ffffff; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x0000000000077f07: and eax, 0x89ffffd1; ret 0x3f7; 
0x0000000000031aa5: and eax, 0x8d480039; cmp eax, 0x38e051; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031ad0: and eax, 0x8d480039; cmp eax, 0x38e1a6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031af2: and eax, 0x8d480039; cmp eax, 0x38e204; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a83: and eax, 0x8d480039; cmp eax, 0x38e273; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f476a: and eax, 0x90c48148; add byte ptr [rax], al; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x000000000018d661: and eax, 0xba9cfffa; add al, byte ptr [rax]; cli; jmp rsp; 
0x00000000000369df: and eax, 0xc709f0c0; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x0000000000165365: and eax, 0xc8c14800; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x00000000001a0745: and eax, 0xc9b80001; int1; jmp qword ptr [rbp]; 
0x0000000000108276: and eax, 0xc; pop r12; ret; 
0x0000000000192a37: and eax, 0xd1cffeb; sahf; and al, 0xeb; jmp qword ptr [rdx]; 
0x0000000000192a7f: and eax, 0xd1cffeb; xchg eax, ecx; and al, 0xeb; jmp qword ptr [rdx]; 
0x00000000000570f1: and eax, 0xe800000a; mov di, bp; jmp qword ptr [rsi + 0xf]; 
0x0000000000088697: and eax, 0xf000efa; xchg eax, esi; ret 0x144; 
0x0000000000165bfa: and eax, 0xf31e7500; ret; 
0x00000000000a1b3c: and eax, 0xf; movsxd rsi, dword ptr [rcx + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000a1afc: and eax, 0xf; movsxd rsi, dword ptr [rdx + rax*4]; add rdx, rsi; jmp rdx; 
0x0000000000164b6b: and eax, 0xfd2ee900; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000001653b5: and eax, 0xff834800; add dword ptr [rdi + 3], esi; ret; 
0x00000000000f1839: and eax, 0xff89f689; mov eax, 0x71; syscall; 
0x00000000000f18a9: and eax, 0xff89f689; mov eax, 0x72; syscall; 
0x0000000000161290: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x00000000001609c3: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000f0609: and eax, 0xffffeff0; or eax, esi; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x00000000000fa4e1: and eax, 0xfffff000; or eax, edi; ret; 
0x00000000000f0b3c: and eax, 0xfffffecf; or eax, 0x30; mov dword ptr [rdi + 8], eax; ret; 
0x000000000010c568: and eax, 0xffffff; ret; 
0x00000000000f236d: and eax, 0xfffffff0; add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000039a96: and eax, 0xfffffff0; call 0x39230; leave; ret; 
0x000000000007a310: and eax, 0xfffffff3; mov r12d, dword ptr fs:[rbp]; or eax, 0x40; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x00000000001176c3: and eax, 0xfffffff8; add eax, 0x10; ret; 
0x00000000000fbbed: and eax, 0xfffffff8; lea rcx, qword ptr [rsi + rax]; xor eax, eax; cmp rdx, rcx; cmovae rax, rsi; ret; 
0x000000000012102a: and eax, 0xfffffffc; and edx, 0xfffffffc; lea esi, dword ptr [rax + rdx + 0x28]; call qword ptr [rcx + 0x30]; 
0x00000000000d1d28: and eax, 1; nop dword ptr [rax + rax]; pop rbx; ret; 
0x000000000002fef2: and eax, 1; ret; 
0x000000000002fd72: and eax, 2; movzx eax, ax; ret; 
0x000000000011d51c: and eax, 2; pop r12; sub eax, 1; pop r13; ret; 
0x00000000000d1c41: and eax, 2; pop rbp; ret; 
0x0000000000129c82: and eax, 2; sub eax, 1; add rsp, 0x20; pop rbx; ret; 
0x000000000003851c: and eax, 2; sub eax, 1; ret; 
0x000000000002fe12: and eax, 4; movzx eax, ax; ret; 
0x0000000000091d5b: and eax, 7; movsxd r8, dword ptr [rax + r8*4]; add rax, r8; jmp rax; 
0x000000000002fd32: and eax, 8; movzx eax, ax; ret; 
0x0000000000036674: and eax, 8; ret; 
0x0000000000121574: and eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000012154b: and eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x28]; 
0x0000000000108f79: and eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x00000000000c0dda: and eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000f9d09: and eax, dword ptr [rbx]; add byte ptr [rax], al; lea rax, qword ptr [rip + 0x2c7b2c]; add rsp, 0x18; ret; 
0x000000000007084f: and eax, dword ptr [rcx + rcx*4 - 0x40]; pop rbx; ret; 
0x00000000000fa981: and eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000001b04dd: and eax, dword ptr [rdx]; add al, ah; clc; jmp qword ptr [rax]; 
0x000000000015a429: and eax, dword ptr [rdx]; add byte ptr [rax], al; ret; 
0x0000000000037a73: and eax, dword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000f1e43: and eax, eax; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036012: and eax, ecx; ret; 
0x00000000000360e2: and eax, edx; movq xmm0, rax; ret; 
0x000000000003614b: and eax, edx; movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000361bc: and eax, edx; or rdi, rax; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x00000000000366c1: and eax, edx; ret; 
0x0000000000039e36: and eax, esi; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x000000000003010d: and eax, esi; ret; 
0x0000000000057dc8: and ebp, 0x8348ffff; ret 0xeb08; 
0x00000000000fba76: and ebp, dword ptr [rax + rax]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000150b69: and ebp, dword ptr [rbx + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150e69: and ebp, dword ptr [rcx + 3]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150869: and ebp, dword ptr [rdi + 3]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000ebb04: and ebp, dword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebb1e: and ebp, dword ptr [rip + 0x64daf700]; mov dword ptr [rax], edx; mov eax, 0xffffffff; ret; 
0x00000000001a9844: and ebp, ebp; hlt; jmp qword ptr [rdx]; 
0x000000000019291d: and ebp, ebx; jmp qword ptr [rdx]; 
0x00000000000d47b3: and ebp, ecx; or eax, 0xf7fffffc; ret 0; 
0x0000000000075060: and ebp, edi; pop rbx; ret; 
0x00000000001a75d9: and ebp, esi; jmp qword ptr [rdx]; 
0x0000000000172981: and ebp, esp; call qword ptr [rax]; 
0x0000000000188399: and ebx, ebp; call rsp; 
0x0000000000186261: and ebx, edi; call rax; 
0x00000000001a3639: and ebx, esi; call qword ptr [rbx + 0xa]; 
0x00000000000f2f7a: and ebx, esi; ret; 
0x000000000003cd46: and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x0000000000161295: and ecx, 0xff; sub eax, ecx; ret; 
0x00000000000a17c6: and ecx, 0xfff; pop rbp; lea rax, qword ptr [r9 + 1]; pop r12; ret; 
0x00000000001609c8: and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000711a0: and ecx, 0xffffffcf; mov dword ptr [rdi], ecx; ret; 
0x0000000000039ad4: and ecx, 0xfffffff0; call 0x39700; leave; ret; 
0x0000000000091aea: and ecx, 7; movsxd rcx, dword ptr [rax + rcx*4]; add rax, rcx; jmp rax; 
0x00000000000d9209: and ecx, dword ptr [rax + 0x63]; ret 0x8d48; 
0x0000000000097abc: and ecx, dword ptr [rax - 0x7d]; mov byte ptr [rcx], 0xf; mov dh, 0x46; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000c1d89: and ecx, dword ptr [rcx + 0x69b8ff]; add byte ptr [rax], al; syscall; 
0x00000000000c1de9: and ecx, dword ptr [rcx + 0x6ab8ff]; add byte ptr [rax], al; syscall; 
0x00000000000869e4: and ecx, dword ptr [rcx + rcx*4 - 0x11]; call qword ptr [rbx + 0x40]; 
0x00000000000f07fe: and ecx, dword ptr [rcx + rcx*4 - 0x2e]; mov byte ptr [rsp - 0x58], al; mov eax, ebp; syscall; 
0x000000000007cbdc: and ecx, dword ptr [rdi]; mov dh, 0; ret; 
0x00000000000fd5b3: and ecx, dword ptr [rsi + 0x10]; lea rdx, qword ptr [rdx + rcx*4]; add eax, dword ptr [rsi + rdx]; ret; 
0x00000000000fa4db: and edi, 0xfff; and eax, 0xfffff000; or eax, edi; ret; 
0x000000000002ff52: and edi, 0xffffff80; sete al; ret; 
0x00000000000f964a: and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000000c26dc: and edi, dword ptr [rax + 1]; ret; 
0x000000000014ff69: and edi, dword ptr [rax + 3]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ce9: and edi, dword ptr [rcx]; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001accac: and edi, dword ptr [rdx - 0xb]; jmp qword ptr [rdx]; 
0x00000000000340eb: and edi, edi; cmp byte ptr [rax], al; lea rdi, qword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018d609: and edi, edx; lcall ptr [rbp + rsi*4 + 0x24100002]; cli; jmp rsp; 
0x000000000007dece: and edi, edx; neg rdi; call qword ptr [rax]; 
0x0000000000186b3d: and edi, esp; push qword ptr [rax + 0xfffc24]; cld; call qword ptr [rax + 0x27]; 
0x000000000003d007: and edx, 0x3ff; xor eax, edx; ret; 
0x0000000000125d6b: and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x00000000000363e9: and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x0000000000036728: and edx, 0x8000; and eax, 0x7fff; or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000000364f9: and edx, 0x807fffff; or eax, edx; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x0000000000051f05: and edx, 0x83667ff0; cli; add dword ptr [rcx], ebx; jmp qword ptr [rsi - 0x3f]; 
0x000000000010c579: and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000010c5f7: and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000dbc53: and edx, 0xe58303ff; add al, 0x74; add al, 0xa8; add dword ptr [rbx + rcx*4 - 0xa], esi; ret 0x7408; 
0x000000000012102d: and edx, 0xfffffffc; lea esi, dword ptr [rax + rdx + 0x28]; call qword ptr [rcx + 0x30]; 
0x00000000000374a2: and edx, 1; mov dword ptr [rbx + 8], edx; add rsp, 0x40; pop rbx; ret; 
0x000000000008a88e: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000003647a: and edx, eax; movd xmm1, edx; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000036114: and edx, eax; movq xmm1, rdx; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000107d03: and edx, eax; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000f0c43: and edx, edx; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010c5d3: and esi, 0xffffff; or eax, esi; bswap eax; ret; 
0x0000000000120f83: and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x00000000000712a3: and esi, 1; mov eax, esi; ret; 
0x000000000012ef32: and esi, 7; movsxd rcx, dword ptr [rax + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax; 
0x000000000011b1b5: and esi, dword ptr [rax + rdx - 0x80]; cli; sub al, 0x74; or ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000150269: and esi, dword ptr [rbp + 3]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000002f99c: and esi, dword ptr [rdi + 0x10]; lea rax, qword ptr [rdx + rsi*4]; mov eax, dword ptr [rdi + rax]; ret; 
0x0000000000150569: and esi, dword ptr [rdx + 3]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000178129: and esi, ecx; jmp rax; 
0x00000000001b2281: and esi, edi; call qword ptr [rdx]; 
0x00000000001afcb5: and esi, esi; jmp qword ptr [rdx]; 
0x0000000000174c12: and esp, dword ptr [rax + 0x52]; sub byte ptr [rsi + 0x33763bf6], ch; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000151469: and esp, dword ptr [rbx + 3]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151169: and esp, dword ptr [rsi + 3]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001326d6: and esp, edi; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret 0x9274; 
0x0000000000022d81: and qword ptr [rax - 0x77], rcx; fimul word ptr [rax - 0x77]; ret 0x8348; 
0x0000000000023045: and qword ptr [rax - 0x77], rcx; ret 0x8948; 
0x00000000000375f5: and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x00000000000377d7: and qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000ebb1d: and r13d, dword ptr [rip + 0x64daf700]; mov dword ptr [rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000039a95: and r8, 0xfffffffffffffff0; call 0x39230; leave; ret; 
0x0000000000091d5a: and r8d, 7; movsxd r8, dword ptr [rax + r8*4]; add rax, r8; jmp rax; 
0x00000000000a17c5: and r9d, 0xfff; pop rbp; lea rax, qword ptr [r9 + 1]; pop r12; ret; 
0x00000000000fbbec: and rax, 0xfffffffffffffff8; lea rcx, qword ptr [rsi + rax]; xor eax, eax; cmp rdx, rcx; cmovae rax, rsi; ret; 
0x0000000000037a72: and rax, qword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000360e1: and rax, rdx; movq xmm0, rax; ret; 
0x000000000003614a: and rax, rdx; movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000361bb: and rax, rdx; or rdi, rax; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x0000000000039e35: and rax, rsi; or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000039ad3: and rcx, 0xfffffffffffffff0; call 0x39700; leave; ret; 
0x000000000007decd: and rdi, rdx; neg rdi; call qword ptr [rax]; 
0x000000000008a88d: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x0000000000036113: and rdx, rax; movq xmm1, rdx; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000036080: andpd xmm0, xmmword ptr [rip + 0x14f858]; andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x0000000000036088: andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x0000000000036081: andps xmm0, xmmword ptr [rip + 0x14f858]; andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x0000000000036089: andps xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x0000000000178616: bnd call qword ptr [rax + 0x6a]; inc dword ptr [rax - 0x4f000d96]; push -0xe; jmp rax; 
0x0000000000178606: bnd call qword ptr [rax - 0x3f000d97]; imul esi, edx, 0xf269f0ff; jmp qword ptr [rax]; 
0x00000000001785ee: bnd call qword ptr [rax - 0x3f000d98]; push 0x68f0fff2; bnd jmp qword ptr [rax]; imul esi, edx, 0xf26940ff; jmp qword ptr [rax + 0x69]; 
0x000000000007361a: bnd jae 0x7362d; lea rax, qword ptr [rcx + 1]; mov qword ptr [rsi + 0x28], rax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x00000000000736ca: bnd jae 0x736dd; lea rax, qword ptr [rcx + 1]; mov qword ptr [rsi + 0x28], rax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x0000000000117e17: bnd jb 0x117e04; mov eax, 0xffffffff; ret; 
0x000000000019544c: bnd je 0x19543c; jmp qword ptr [rdx]; 
0x00000000000c091a: bnd je 0xc0928; xor eax, eax; cmp rdx, -1; cmovne rax, rdx; ret; 
0x0000000000178602: bnd jmp qword ptr [rax + 0x69]; bnd call qword ptr [rax - 0x3f000d97]; imul esi, edx, 0xf269f0ff; jmp qword ptr [rax]; 
0x00000000001785fa: bnd jmp qword ptr [rax]; imul esi, edx, 0xf26940ff; jmp qword ptr [rax + 0x69]; 
0x0000000000178612: bnd jmp qword ptr [rax]; push -0xe; call qword ptr [rax + 0x6a]; 
0x0000000000178612: bnd jmp qword ptr [rax]; push -0xe; call qword ptr [rax + 0x6a]; inc dword ptr [rax - 0x4f000d96]; push -0xe; jmp rax; 
0x0000000000178622: bnd jmp rax; push -0xe; call qword ptr [rax]; 
0x000000000019a69c: bnd jnp 0x19a69b; jmp qword ptr [rdx]; 
0x00000000000937fa: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000008bdd0: bsf eax, eax; add rax, rdi; ret; 
0x000000000008bde0: bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000008bdf0: bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x000000000008bdc0: bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x000000000008bd0f: bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x00000000000939f3: bsf eax, eax; lea rax, qword ptr [rdi + rax]; ret; 
0x0000000000086d83: bsf eax, eax; mov edx, 0; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000008ca75: bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x000000000008ca86: bsf eax, edi; cmove rax, rdx; add eax, 1; ret; 
0x00000000000889ed: bsf eax, edx; ret; 
0x0000000000097dba: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000097e80: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000097c4c: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000088b5a: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000a07c1: bsf edx, edx; lea r11, qword ptr [rip + 0xd7fc9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0789: bsf edx, edx; lea r11, qword ptr [rip + 0xd8001]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0764: bsf edx, edx; lea r11, qword ptr [rip + 0xd8026]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0747: bsf edx, edx; lea r11, qword ptr [rip + 0xd8043]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe41: bsf edx, edx; lea r11, qword ptr [rip + 0xd88c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe09: bsf edx, edx; lea r11, qword ptr [rip + 0xd8901]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fde4: bsf edx, edx; lea r11, qword ptr [rip + 0xd8926]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fdc7: bsf edx, edx; lea r11, qword ptr [rip + 0xd8943]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea34: bsf edx, edx; lea r11, qword ptr [rip + 0xd9b82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e361: bsf edx, edx; lea r11, qword ptr [rip + 0xda1c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e329: bsf edx, edx; lea r11, qword ptr [rip + 0xda201]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e304: bsf edx, edx; lea r11, qword ptr [rip + 0xda226]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e2e7: bsf edx, edx; lea r11, qword ptr [rip + 0xda243]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3cd: bsf edx, edx; lea r11, qword ptr [rip + 0xdb009]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3a4: bsf edx, edx; lea r11, qword ptr [rip + 0xdb032]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd29: bsf edx, edx; lea r11, qword ptr [rip + 0xdb62d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000883b1: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000093b10: bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x0000000000086ea0: bsf rax, rax; mov edx, 0; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000008ca85: bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x0000000000088a3a: bsf rax, rdx; ret; 
0x0000000000097db9: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000097e7f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000097c4b: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000088b59: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000a07c0: bsf rdx, rdx; lea r11, qword ptr [rip + 0xd7fc9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0788: bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8001]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0763: bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8026]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0746: bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8043]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe40: bsf rdx, rdx; lea r11, qword ptr [rip + 0xd88c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe08: bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8901]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fde3: bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8926]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fdc6: bsf rdx, rdx; lea r11, qword ptr [rip + 0xd8943]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea33: bsf rdx, rdx; lea r11, qword ptr [rip + 0xd9b82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e360: bsf rdx, rdx; lea r11, qword ptr [rip + 0xda1c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e328: bsf rdx, rdx; lea r11, qword ptr [rip + 0xda201]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e303: bsf rdx, rdx; lea r11, qword ptr [rip + 0xda226]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e2e6: bsf rdx, rdx; lea r11, qword ptr [rip + 0xda243]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3cc: bsf rdx, rdx; lea r11, qword ptr [rip + 0xdb009]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3a3: bsf rdx, rdx; lea r11, qword ptr [rip + 0xdb032]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd28: bsf rdx, rdx; lea r11, qword ptr [rip + 0xdb62d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000883b0: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000970a1: bsr eax, eax; add rax, rdi; add rax, r8; ret; 
0x000000000008a707: bsr eax, eax; add rax, rdi; ret; 
0x0000000000096f70: bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x0000000000096f80: bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x0000000000096f90: bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x30]; ret; 
0x000000000008a98b: bsr eax, esi; add rax, rdi; ret; 
0x000000000008a899: bsr esi, esi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000008a795: bsr esi, esi; lea rax, qword ptr [rdi + rsi]; ret; 
0x000000000008a706: bsr rax, rax; add rax, rdi; ret; 
0x000000000008a98a: bsr rax, rsi; add rax, rdi; ret; 
0x000000000008a898: bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000008a794: bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x0000000000121fff: bswap eax; mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x0000000000127756: bswap eax; mov dword ptr [rcx + 0x48], eax; mov eax, 1; ret; 
0x00000000001276b3: bswap eax; mov dword ptr [rcx + 0x54], eax; mov eax, 1; ret; 
0x0000000000127783: bswap eax; mov dword ptr [rcx + 0x58], eax; mov eax, 1; ret; 
0x0000000000123c06: bswap eax; mov dword ptr [rcx + 0xa8], eax; mov eax, 1; ret; 
0x0000000000123aeb: bswap eax; mov dword ptr [rcx + 0xb4], eax; mov eax, 1; ret; 
0x0000000000123c33: bswap eax; mov dword ptr [rcx + 0xb8], eax; mov eax, 1; ret; 
0x0000000000127ffd: bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000122610: bswap eax; mov dword ptr [rdx], eax; mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x0000000000123bee: bswap eax; mov eax, eax; mov qword ptr [r8], rax; mov eax, 1; ret; 
0x0000000000127743: bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000010c542: bswap eax; ret; 
0x00000000001221d6: bswap ecx; mov dword ptr [rdx], ecx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x000000000012803a: bswap edx; mov dword ptr [rax + 0x10], edx; mov eax, 1; ret; 
0x0000000000127f1a: bswap edx; mov dword ptr [rax + 0xc], edx; mov eax, 1; ret; 
0x0000000000123d43: bswap esi; call qword ptr [rax + 0x18]; 
0x0000000000123d42: bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000127742: bswap rax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000088d2b: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000088d2a: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000105fc2: call 0x105db0; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000010307a: call 0x107970; mov rsi, r13; mov rdx, rax; mov edi, 0x2000003; call qword ptr [rbx + 0x28]; 
0x00000000000eb6bd: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x00000000000fafcd: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x130; syscall; 
0x00000000000f491d: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x1a; syscall; 
0x00000000000c0d8d: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x22; syscall; 
0x00000000000c0ded: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x23; syscall; 
0x00000000000fb16d: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x2a; syscall; 
0x00000000000fb0dd: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x2b; syscall; 
0x00000000000fb4ad: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x2e; syscall; 
0x00000000000fb39d: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x2f; syscall; 
0x00000000000f1ded: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x4a; syscall; 
0x00000000000f1e7d: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x4b; syscall; 
0x00000000000ebf6d: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x55; syscall; 
0x00000000000eb71d: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x00000000000eb4cd: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x00000000000ebe1d: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 3; syscall; 
0x00000000000ecfcd: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 7; syscall; 
0x00000000000fa3bd: call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 8; syscall; 
0x00000000000fad30: call 0x1080a0; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x113; syscall; 
0x00000000000fadc0: call 0x1080a0; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000f04e0: call 0x1080a0; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000fae80: call 0x1080a0; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000cb560: call 0x1080a0; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x11; syscall; 
0x00000000000cb5c0: call 0x1080a0; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x12; syscall; 
0x00000000000f1c40: call 0x1080a0; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x17; syscall; 
0x00000000000fb510: call 0x1080a0; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x2c; syscall; 
0x00000000000fbc80: call 0x1080a0; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000fbce0: call 0x1080a0; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000c09d2: call 0x108100; add rsp, 0x10; mov eax, ebx; pop rbx; ret; 
0x00000000000f059e: call 0x108100; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x00000000000fa5c4: call 0x108100; add rsp, 0x28; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000000fb468: call 0x108100; add rsp, 0x28; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000c0b5f: call 0x108100; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000036fc1: call 0x108100; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f1280: call 0x108100; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000108f78: call 0x108fa0; add rsp, 0xd8; ret; 
0x00000000001090c3: call 0x1090d0; add rsp, 0xd8; ret; 
0x00000000001355db: call 0x109a80; mov rax, qword ptr [rip + 0x288881]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010a34d: call 0x10a360; add rsp, 0xd8; ret; 
0x000000000010a55d: call 0x10a570; add rsp, 0xd8; ret; 
0x000000000010c0f3: call 0x10c100; add rsp, 0xd8; ret; 
0x0000000000132152: call 0x113215a; ret 0x59e9; 
0x000000000012929b: call 0x114510; add rsp, 0x10; pop rbx; ret; 
0x00000000001162d7: call 0x114d00; add rsp, 0x18; ret; 
0x000000000011628c: call 0x115190; add rsp, 0x88; ret; 
0x000000000011620e: call 0x115190; sub rsp, -0x80; pop rbx; ret; 
0x0000000000115f2e: call 0x1154d0; add rsp, 0x18; ret; 
0x000000000011685b: call 0x1162f0; add rsp, 0x18; ret; 
0x000000000011c2ce: call 0x11a4a0; add rsp, 0x90; pop rbx; ret; 
0x000000000011c3a0: call 0x11af70; add rsp, 0x90; pop rbx; ret; 
0x000000000011bcac: call 0x11b470; or dword ptr [rip + 0x2a7718], 2; add rsp, 8; ret; 
0x000000000011ece1: call 0x120ba0; mov rax, qword ptr [rsp + 8]; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x0000000000124858: call 0x1224c0; cmp eax, 1; sbb eax, eax; add rsp, 8; add eax, 2; ret; 
0x000000000012482e: call 0x122590; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000122609: call 0x123312; add byte ptr [rax + 0x289c80f], al; mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x000000000012e9a8: call 0x12ac60; mov dword ptr [rax], 0; pop rbx; ret; 
0x000000000011f4b9: call 0x12b750; mov rax, qword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x00000000001352d4: call 0x12c5c2; jmp qword ptr [rsi + 0xf]; 
0x0000000000122959: call 0x12da60; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000121645: call 0x12e3c0; lea rax, qword ptr [rbx + 0x2260]; pop rbx; ret; 
0x00000000001334ea: call 0x133250; add rsp, 0x98; ret; 
0x0000000000135103: call 0x133890; add rsp, 0x518; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000bd885: call 0x135c70; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x00000000000bd9fc: call 0x135c70; mov rax, rbx; call rax; 
0x0000000000023fe8: call 0x135c70; mov rdi, r14; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x000000000002cb01: call 0x135ea0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000001364e3: call 0x135f80; add rsp, 0x28; ret; 
0x00000000000d7511: call 0x1498bd1c; ret 0x1b8; 
0x0000000000110e23: call 0x150ee1; add byte ptr [rcx + rcx*4 - 6], cl; mov rdi, r12; call rax; 
0x0000000000111183: call 0x151241; add byte ptr [rcx + rcx*4 - 6], cl; mov rdi, r12; call rax; 
0x0000000000117f87: call 0x155078f; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000732f5: call 0x184ebc42; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x00000000000f7e11: call 0x18d4015e; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000735f3: call 0x1e7b8fc; ret; 
0x0000000000073603: call 0x1e7b90d; ret; 
0x00000000000d1d26: call 0x1eda02e; nop dword ptr [rax + rax]; pop rbx; ret; 
0x00000000001079f8: call 0x1f0fd0b; ret; 
0x0000000000112029: call 0x1f490; mov qword ptr [rip + 0x2ad9b3], rax; add rsp, 8; ret; 
0x00000000000f2439: call 0x1f490; mov qword ptr [rip + 0x2cd4db], rax; add rsp, 8; ret; 
0x000000000005d3d9: call 0x1f4f0; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e40f5: call 0x1f4f0; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000135f11: call 0x1f4f0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x48; ret; 
0x00000000000c3e3e: call 0x1f4f0; mov qword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012e63c: call 0x1f4f0; mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x00000000000e3a45: call 0x1f4f0; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000012e99c: call 0x1f4f0; mov qword ptr [rbx], 0; call 0x12ac60; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000000f4bec: call 0x1f4f0; mov qword ptr [rbx], 0; pop rbx; ret; 
0x00000000001651ee: call 0x1f4f0; mov qword ptr [rip + 0x25bc52], 0; pop rbx; ret; 
0x0000000000165dfd: call 0x1f4f0; mov qword ptr fs:[rbp], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f536a: call 0x1f4f0; mov rdi, qword ptr [r12]; call rbx; 
0x00000000000f4f74: call 0x1f4f0; mov rdi, qword ptr [r13]; call rbx; 
0x00000000000f4f67: call 0x1f4f0; mov rdi, qword ptr [r14]; call rbx; 
0x00000000000f5334: call 0x1f4f0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000000f50a9: call 0x1f4f0; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000000357a9: call 0x1f4f0; mov rdi, rbx; call 0x1f4f0; xor eax, eax; pop rbx; ret; 
0x000000000006da20: call 0x1f4f0; pop rbx; mov eax, ebp; pop rbp; pop r12; ret; 
0x00000000000ef5d8: call 0x1f4f0; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000357b1: call 0x1f4f0; xor eax, eax; pop rbx; ret; 
0x0000000000022117: call 0x1f595; mov rax, qword ptr [rip + 0x39d93d]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x0000000000039e81: call 0x20ec5fce; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000092b9c: call 0x22180; lea rax, qword ptr [rip - 0x528]; add rsp, 8; ret; 
0x0000000000039e84: call 0x244827a9; in al, dx; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000aedbb: call 0x246b0; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000000b0778: call 0x247f90c5; call 0xffffffffe82f7461; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000072348: call 0x248bae95; fadd dword ptr [rax]; add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x00000000000bdf54: call 0x28d062a1; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000eaf25: call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0x3c; syscall; 
0x00000000000b1405: call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000f2ffb: call 0x31e16145; test byte ptr [rax + 0x63], 0xff; mov eax, 0x118; syscall; 
0x000000000003680f: call 0x36814; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000003682f: call 0x36834; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000038017: call 0x36eb0; add rsp, 0xa8; ret; 
0x0000000000037f76: call 0x36ed0; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000037247: call 0x36f60; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000372cc: call 0x36f60; add rsp, 0x88; ret; 
0x0000000000039aa0: call 0x39130; leave; ret; 
0x0000000000039a99: call 0x39230; leave; ret; 
0x0000000000039ab9: call 0x39620; leave; ret; 
0x0000000000039ad7: call 0x39700; leave; ret; 
0x0000000000039dac: call 0x3a078; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000003b8c8: call 0x3b940; lea rsp, qword ptr [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x0000000000107e80: call 0x3c1e0; mov rax, qword ptr [rip + 0x2bc114]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003cfb4: call 0x3ca70; add rsp, 8; ret; 
0x000000000003d023: call 0x3d150; movsd xmm0, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003d073: call 0x3d1f0; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003d0c3: call 0x3d260; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003d11b: call 0x3d2e0; lea rax, qword ptr [rip + 0x386c6f]; add rsp, 8; ret; 
0x0000000000039eab: call 0x3d3e0; add rsp, 8; ret; 
0x000000000003679e: call 0x3fdf287c; fsubp st(1); ret; 
0x00000000000367e1: call 0x3fdf28bf; fsubp st(1); ret; 
0x0000000000081138: call 0x40cf4248; mov byte ptr [rsi + rbx], bh; mov rax, rsi; pop rbx; ret; 
0x000000000006cfea: call 0x4163114a; pop rbp; pop rbp; ret; 
0x000000000006d00d: call 0x4163116d; pop rbp; pop rbp; ret; 
0x000000000006f60a: call 0x4163376c; pop rbp; ret; 
0x0000000000073b52: call 0x41637cb4; pop rbp; ret; 
0x00000000000a3de4: call 0x41667f46; pop rbp; pop r14; ret; 
0x00000000000c0cb5: call 0x41684e17; pop rbp; ret; 
0x00000000000c0ccb: call 0x41684e2d; pop rbp; ret; 
0x00000000000c1024: call 0x41685184; pop rbp; pop r14; pop rbp; ret; 
0x00000000000c10b6: call 0x41685216; pop rbp; pop r14; pop rbp; ret; 
0x00000000000f3bd6: call 0x416b7d36; pop rbp; pop rbp; ret; 
0x00000000000792f7: call 0x41e7bc48; pop rsp; pop r13; pop r14; ret; 
0x00000000000793a5: call 0x41e7bcf6; pop rsp; pop r13; pop r14; ret; 
0x00000000000f2f5b: call 0x420db8a8; mov edx, 0x100; mov rdi, -0x64; mov eax, 0x118; syscall; 
0x00000000000465ab: call 0x460c0; test eax, eax; sete al; add rsp, 8; movzx eax, al; ret; 
0x000000000004759e: call 0x475b0; add rsp, 0xd8; ret; 
0x00000000000f2343: call 0x480f234b; mov dword ptr [rsp + 8], edi; mov rdi, rsp; call 0xc0dd0; add rsp, 0x18; ret; 
0x0000000000086d04: call 0x48f15819; mov eax, edi; ret; 
0x0000000000088504: call 0x48f17019; mov eax, edi; ret; 
0x000000000008cbb4: call 0x48f1b6c9; mov eax, edx; ret; 
0x000000000012dafa: call 0x48f96447; mov edi, ebp; mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x000000000012dc5a: call 0x48f965a7; mov edi, ebp; mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x000000000012a7e6: call 0x49023137; mov dword ptr [rsp + 0x50], eax; mov rax, qword ptr [r13 + 8]; mov qword ptr [rsp], r15; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x00000000000c39f9: call 0x490c39f9; mov edi, dword ptr [rbp - 0x3f8]; call qword ptr [rax + 0x28]; 
0x00000000000c3d5d: call 0x490c3d5d; lea esi, dword ptr [rbp - 0x360]; mov rdi, r14; call qword ptr [rax + 0x40]; 
0x0000000000054332: call 0x49c40; add rsp, 0xd8; ret; 
0x000000000015a103: call 0x4aa2e918; adc byte ptr [rdi], cl; test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x000000000015a2f9: call 0x4aa2eaff; add dword ptr [rdi], ecx; test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000015a37f: call 0x4aa2eb89; add eax, 0x2c5850f; add byte ptr [rax], al; ret; 
0x000000000015a3e1: call 0x4aa2ebef; or dword ptr [rdi], ecx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x000000000015a401: call 0x4aa2ec10; or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x000000000015a463: call 0x4aa2ec75; or eax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x000000000015e6e2: call 0x4aa32eea; add ecx, dword ptr [rdi]; test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000015e70a: call 0x4aa32f13; add al, 0xf; test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000015e730: call 0x4aa32f3a; add eax, 0x364850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015e7f2: call 0x4aa33001; or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000015e884: call 0x4aa33096; or eax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000120718: call 0x4c12071d; mov edi, esi; call qword ptr [rax + 0x20]; 
0x00000000000f655a: call 0x4ca655e; add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x00000000000f65d3: call 0x4ca65d7; add byte ptr [rax], al; add byte ptr [rsi + 2], bh; mov rdi, r15; call rbx; 
0x0000000000160d95: call 0x4e851d8d; call 0xf7cf651; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000161f65: call 0x4e852f5d; call 0xf7d0821; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000014c710: call 0x4f04d707; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014f1e0: call 0x4f0501d7; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000151d00: call 0x4f052cf7; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000bf700: call 0x542b0; add rsp, 0x20; sar eax, 0x1f; pop rbx; ret; 
0x00000000000f9d46: call 0x54480; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x00000000000f978e: call 0x54480; mov rax, rbx; pop rbx; ret; 
0x000000000005d126: call 0x54630; add rsp, 0xd8; ret; 
0x000000000007fe50: call 0x54954657; ret; 
0x000000000007febf: call 0x549546c6; ret; 
0x0000000000105f4e: call 0x5b105f53; pop rbp; ret; 
0x000000000006edc6: call 0x5c484b26; pop r13; ret; 
0x000000000006f5dd: call 0x5c48533d; pop r13; ret; 
0x0000000000070914: call 0x5c486674; pop r13; ret; 
0x0000000000073b25: call 0x5c489885; pop r13; ret; 
0x00000000000758ff: call 0x5c48b65f; pop r13; pop r14; ret; 
0x0000000000092c5d: call 0x5c4a89bd; pop r13; pop r14; ret; 
0x00000000000c0c25: call 0x5c4d6985; pop r13; ret; 
0x00000000000c978e: call 0x5c4df4ee; ret; 
0x00000000000c98d0: call 0x5c4df630; ret; 
0x00000000000e4f98: call 0x5c4facf8; pop r13; ret; 
0x00000000000e50b7: call 0x5c4fae17; pop r13; ret; 
0x00000000000f4e71: call 0x5c50abd1; jmp rax; 
0x0000000000101e53: call 0x5c517bb3; ret; 
0x00000000001099b2: call 0x5c51f712; pop r13; ret; 
0x0000000000109d76: call 0x5c51fad6; pop r13; ret; 
0x000000000010bbf6: call 0x5c521956; pop r13; ret; 
0x000000000010c671: call 0x5c5223d1; pop r13; pop r14; ret; 
0x0000000000114bba: call 0x5c52a91a; ret; 
0x000000000011cf97: call 0x5c532cf7; pop r13; ret; 
0x000000000011d030: call 0x5c532d90; pop r13; ret; 
0x0000000000124116: call 0x5c539e76; pop r13; ret; 
0x0000000000127afe: call 0x5c53d85e; pop r13; ret; 
0x000000000012bbc6: call 0x5c541926; pop r13; ret; 
0x000000000012bdb3: call 0x5c541b13; pop r13; pop r14; ret; 
0x000000000012ca02: call 0x5c542762; pop r13; pop r14; ret; 
0x000000000012ca44: call 0x5c5427a4; pop r13; pop r14; ret; 
0x000000000013219e: call 0x5c547efe; pop r13; pop r14; ret; 
0x0000000000134f2b: call 0x5c54ac8b; pop r13; ret; 
0x00000000001351cc: call 0x5c54af2c; pop r13; pop r14; ret; 
0x00000000000b0781: call 0x5ce8f164; and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000005d082: call 0x5cfc0; add rsp, 0xd8; ret; 
0x00000000001206d0: call 0x5d240; mov edi, r15d; call 0xebe00; mov rdx, qword ptr [rbx + 0x38]; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x000000000007394b: call 0x5d624cd9; pop r12; ret; 
0x0000000000077a9b: call 0x5d628e29; pop r12; ret; 
0x0000000000105f46: call 0x5dcc0; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000000021b15: call 0x5dfaec62; mov qword ptr [rip + 0x39c70f], rax; pop r12; ret; 
0x000000000005e412: call 0x5e420; add rsp, 0xd8; ret; 
0x000000000007b7fe: call 0x5e491544; ret; 
0x00000000000aed3a: call 0x5e4c4a80; ret; 
0x0000000000078352: call 0x5eaf0; add rsp, 0xd8; ret; 
0x00000000000c9710: call 0x60d11a5d; pop rbx; pop rbp; pop r12; ret; 
0x000000000007f87f: call 0x634ff8b7; stc; mov eax, 3; syscall; 
0x0000000000148136: call 0x635d813e; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000784c6: call 0x64230; add rsp, 0xd8; ret; 
0x000000000012e0a1: call 0x6636e531; mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000012e101: call 0x6636e591; mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x0000000000078562: call 0x6c6c0; add rsp, 0xd8; ret; 
0x00000000000f72c2: call 0x6cef0; add rsp, 0x408; ret; 
0x00000000000f2629: call 0x6d8d0; mov eax, 1; add rsp, 8; ret; 
0x000000000012e8c8: call 0x6eb20; add rsp, 8; ret; 
0x000000000008304c: call 0x6ff3a; jmp qword ptr [rsi + 0xf]; 
0x000000000005d1c2: call 0x70930; add rsp, 0xd8; ret; 
0x00000000000749d4: call 0x70f10; mov rax, qword ptr [r12 + 0xd8]; mov esi, r14d; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000012e8ac: call 0x718d0; not eax; add rsp, 8; shr eax, 0x1f; ret; 
0x00000000000f3620: call 0x71fc0; mov eax, 1; add rsp, 8; ret; 
0x0000000000054592: call 0x72120; add rsp, 0xd8; ret; 
0x0000000000054622: call 0x72280; add rsp, 0xd8; ret; 
0x000000000005446d: call 0x72420; add rsp, 0xd8; ret; 
0x0000000000072832: call 0x72620; add rsp, 0xd8; ret; 
0x0000000000073bdd: call 0x73c60; add rsp, 0xd8; ret; 
0x0000000000073e22: call 0x73d20; add rsp, 0xd8; ret; 
0x0000000000073a5c: call 0x74130; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000103d82: call 0x74d0c1a6; sub byte ptr [rcx + rcx*4 - 0x38], al; sub eax, edx; ret; 
0x00000000000a2e85: call 0x74dcb28c; adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x0000000000103f2b: call 0x75d0c34f; cmp eax, 0x78c08545; add eax, 0x79c98545; xor eax, dword ptr [rcx + rcx*4 - 0x40]; sub eax, r9d; ret; 
0x0000000000161278: call 0x75de4a8d; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000f70c8: call 0x780e0; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000079add: call 0x7abf0; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007d073: call 0x7cfa0; or dword ptr [rbx], 8; pop rbx; ret; 
0x00000000000833af: call 0x7d680; mov rsi, qword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x000000000009d66b: call 0x7f971e73; add ecx, dword ptr [rdi]; test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x000000000009d686: call 0x7f971e8f; add al, 0xf; test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x000000000009d6a9: call 0x7f971eb3; add eax, 0x82b850f; add byte ptr [rax], al; ret; 
0x000000000009d76e: call 0x7f971f7e; or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x000000000009d78e: call 0x7f971f9f; or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x000000000009d7b0: call 0x7f971fc2; or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x000000000009d8b3: call 0x7f9720cd; adc eax, 0x621850f; add byte ptr [rax], al; ret; 
0x000000000009d96a: call 0x7f972189; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x000000000009d9f4: call 0x7f972216; sbb eax, 0x4e0850f; add byte ptr [rax], al; ret; 
0x000000000009da84: call 0x7f9722a9; and byte ptr [rdi], cl; test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x000000000009ed4d: call 0x7f973557; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x000000000009ee64: call 0x7f973676; or eax, 0x880850f; add byte ptr [rax], al; ret; 
0x000000000009ef94: call 0x7f9737ad; adc al, 0xf; test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x000000000009efc7: call 0x7f9737e1; adc eax, 0x71d850f; add byte ptr [rax], al; ret; 
0x000000000009f089: call 0x7f9738a7; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x000000000009f148: call 0x7f97396a; sbb eax, 0x59c850f; add byte ptr [rax], al; ret; 
0x000000000002cb25: call 0x846542b; pop rbx; ret; 
0x0000000000024384: call 0x86fa0; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000005d5ad: call 0x88710; add rsp, 0x1000; pop rbx; ret; 
0x0000000000097a94: call 0x8c4b0; lea rax, qword ptr [rbx - 1]; pop rbx; ret; 
0x00000000000a389b: call 0x8c4b0; lea rax, qword ptr [rbx - 4]; pop rbx; ret; 
0x0000000000117d9a: call 0x8c4b0; mov eax, ebx; pop rbx; ret; 
0x0000000000097b96: call 0x8c4b0; mov rax, rbx; pop rbx; ret; 
0x000000000005ea55: call 0x8ca6da2; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000007946b: call 0x8cc17b8; pop rbx; pop rbp; ret; 
0x0000000000120f9c: call 0x91670; mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000d2304: call 0x91670; pop rbx; pop rbp; xor eax, eax; pop r12; ret; 
0x0000000000113308: call 0x97b10; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000498a3: call 0x97b10; add rsp, 0x440; pop rbx; ret; 
0x00000000000fa4f9: call 0x9cfd50a; clc; ret; 
0x00000000000c2c22: call 0xa1bd0; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000010bd94: call 0xa3ea0; add rsp, 8; ret; 
0x00000000000488dd: call 0xa3ea0; pop rbx; ret; 
0x00000000000487ec: call 0xa4090; add rsp, 0x28; ret; 
0x00000000000488bc: call 0xa40c0; add rsp, 0x28; ret; 
0x00000000000af652: call 0xaf660; add rsp, 0xd8; ret; 
0x00000000000b0756: call 0xb04e0; add rsp, 0x40; pop rbx; ret; 
0x00000000000b42de: call 0xb1410; add rsp, 0x18; ret; 
0x00000000000b9f2e: call 0xb80f0; add rsp, 0x18; ret; 
0x00000000000bc25e: call 0xb9fa0; add rsp, 0x18; ret; 
0x00000000000bd3a4: call 0xbcca0; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000f234f: call 0xc0dd0; add rsp, 0x18; ret; 
0x000000000011af84: call 0xc1cc0; add rsp, 8; movzx eax, ax; ret; 
0x00000000000cb4e6: call 0xc1cc0; mov rdx, r14; movsxd rdi, eax; mov rsi, r15; mov eax, 0xcc; syscall; 
0x00000000000e4a71: call 0xc1d10; mov rdx, -1; mov esi, eax; mov eax, 0x75; mov rdi, rdx; syscall; 
0x000000000012945f: call 0xc1d20; mov dword ptr [rbx + 0xc], eax; mov rax, qword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000000e4a9e: call 0xc1d30; mov rdx, -1; mov esi, eax; mov eax, 0x77; mov rdi, rdx; syscall; 
0x00000000000c2839: call 0xc23a0; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c2805: call 0xc24e0; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c27e0: call 0xc2620; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c2885: call 0xc26d0; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000000cb193: call 0xc9d70; add rsp, 0x18; ret; 
0x00000000000cb133: call 0xcb0b0; add rsp, 0x18; ret; 
0x00000000000e3c96: call 0xe32d0; add rsp, 0x18; ret; 
0x00000000000e3f35: call 0xe3b60; test eax, eax; sete al; add rsp, 8; movzx eax, al; ret; 
0x00000000000e44fb: call 0xe4530; add rsp, 0x18; ret; 
0x00000000000eafe9: call 0xeb120; add rsp, 0x18; ret; 
0x00000000000eb01b: call 0xeb180; add rsp, 0x18; ret; 
0x00000000000f7f48: call 0xeb6a9; mov edx, 3; movsxd rsi, eax; movsxd rdi, r12d; mov eax, edx; syscall; 
0x00000000000f1f6a: call 0xeb6a9; movsxd rdi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x00000000000794e2: call 0xeb6a9; pop rdx; cdqe; ret; 
0x00000000000f2115: call 0xeb709; movsxd rdi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x00000000000ebd80: call 0xebb40; add rsp, 0x20; pop rbx; ret; 
0x0000000000132cdb: call 0xebb40; add rsp, 8; sar eax, 0x1f; ret; 
0x00000000001206d8: call 0xebe00; mov rdx, qword ptr [rbx + 0x38]; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x00000000000ee0a5: call 0xebfe0; movsxd rdi, r13d; mov eax, 3; syscall; 
0x00000000000ec758: call 0xec010; add rsp, 0x120; pop rbx; ret; 
0x00000000000f04a6: call 0xefe50; cdqe; mov qword ptr [rbx + 0x48], rax; pop rbx; ret; 
0x00000000000f06ff: call 0xf05f0; pop rbx; pop rbp; xor eax, eax; pop r12; ret; 
0x00000000000ecde7: call 0xf0930; test eax, eax; sete al; add rsp, 0x48; movzx eax, al; ret; 
0x00000000000f0df1: call 0xf0c30; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f0a24: call 0xf11e0; add rsp, 0x18; ret; 
0x00000000001132e8: call 0xf11e0; movsxd rdi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x000000000011fa74: call 0xf1a90; mov dword ptr [rip + 0x2a3cc1], eax; add rsp, 8; ret; 
0x00000000000f3954: call 0xf36b0; mov qword ptr [rip + 0x2cdcd0], rax; add rsp, 8; ret; 
0x00000000000f449a: call 0xf3ec0; add rsp, 0xd8; ret; 
0x000000000002eb97: call 0xf48a0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x00000000000f4ad0: call 0xf4c10; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f5c88: call 0xf4e10; mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x00000000000f5c63: call 0xf4e10; mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x00000000000f5318: call 0xf4e90; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000000f4ee1: call 0xf4e90; mov rdi, qword ptr [r14]; call rbx; 
0x00000000000f4f22: call 0xf4e90; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000160d9a: call 0xf7cf651; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000161f6a: call 0xf7d0821; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000f9751: call 0xf9a60; lea rax, qword ptr [rip + 0x2c8093]; add rsp, 8; ret; 
0x00000000000f9d08: call 0xfa030; lea rax, qword ptr [rip + 0x2c7b2c]; add rsp, 0x18; ret; 
0x00000000000fc627: call 0xfbf00; movsxd rbx, ebx; mov qword ptr [rip + 0x2c1cca], rbx; pop rbx; ret; 
0x00000000000a1afa: call 0xfea9e0b; movsxd rsi, dword ptr [rdx + rax*4]; add rdx, rsi; jmp rdx; 
0x00000000000a1b3a: call 0xfea9e4b; movsxd rsi, dword ptr [rcx + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000067870: call 0xffffffff834f7874; ret 0xeb08; 
0x00000000000dfe2c: call 0xffffffff890dfe31; ret 0xe083; 
0x000000000003710e: call 0xffffffff894b7622; ret 0xc189; 
0x0000000000123c04: call 0xffffffff89da4b0a; sub dword ptr [rax - 0x48000000], 1; ret; 
0x0000000000127ffb: call 0xffffffff89da8f01; add bh, byte ptr [rax + 1]; ret; 
0x00000000000b3008: call 0xffffffff89e8b955; ret; 
0x00000000000d636e: call 0xffffffff8e1d39ac; imul eax, dword ptr [rcx], 0x63480000; ret 0x8b48; 
0x000000000009a37c: call 0xffffffffa78fb291; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000019c9ed: call 0xffffffffba09c9f2; out dx, al; call qword ptr [rax]; 
0x000000000019ca4d: call 0xffffffffbb09ca52; out dx, al; call qword ptr [rdi]; 
0x000000000019ca6d: call 0xffffffffbb89ca72; out dx, al; jmp qword ptr [rdx]; 
0x000000000009d3ca: call 0xffffffffbc191bdf; ror byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rax + 0x6349000d], esi; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a2fff: call 0xffffffffbc7ef989; mov dword ptr [rsi + 4], 0; ret; 
0x000000000002263f: call 0xffffffffc51faf48; adc eax, 0xd89003a; ret; 
0x000000000018672d: call 0xffffffffdab9672d; sti; call qword ptr [rax - 0x24]; 
0x000000000018672d: call 0xffffffffdab9672d; sti; call qword ptr [rax - 0x24]; sti; jmp qword ptr [rax]; 
0x00000000001866ed: call 0xffffffffdb3966ed; sti; jmp rax; 
0x00000000001866cd: call 0xffffffffdb7966cd; sti; jmp qword ptr [rax]; 
0x00000000000367dd: call 0xffffffffe827d4bd; fld st(0); fstp xword ptr [rdi]; fsubp st(1); ret; 
0x00000000000b077d: call 0xffffffffe82f7461; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000012a136: call 0xffffffffe8d471c4; adc bh, dh; ret 0x8080; 
0x000000000012a300: call 0xffffffffe8d4738e; adc bh, dh; ret 0x8080; 
0x000000000012a3ad: call 0xffffffffe8d4743b; adc bh, dh; ret 0x8080; 
0x0000000000115951: call 0xffffffffeed32fdf; adc bh, dh; ret 0x8080; 
0x0000000000144213: call 0xfffffffff072cd64; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000146be3: call 0xfffffffff072f734; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001495b3: call 0xfffffffff0732104; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001440e3: call 0xfffffffff073ca34; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144121: call 0xfffffffff073ca72; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144159: call 0xfffffffff073caaa; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144197: call 0xfffffffff073cae8; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001441cf: call 0xfffffffff073cb20; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001441f7: call 0xfffffffff073cb48; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014421f: call 0xfffffffff073cb70; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000146ab3: call 0xfffffffff073f404; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000146af1: call 0xfffffffff073f442; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000146b29: call 0xfffffffff073f47a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000146b67: call 0xfffffffff073f4b8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000146b9f: call 0xfffffffff073f4f0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000146bc7: call 0xfffffffff073f518; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000146bef: call 0xfffffffff073f540; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000149483: call 0xfffffffff0741dd4; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001494c1: call 0xfffffffff0741e12; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001494f9: call 0xfffffffff0741e4a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000149537: call 0xfffffffff0741e88; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014956f: call 0xfffffffff0741ec0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000149597: call 0xfffffffff0741ee8; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001495bf: call 0xfffffffff0741f10; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000000c242e: call 0xfffffffff3d59a30; ret; 
0x0000000000002bbe: call 0xfffffffff3f8f43c; ret; 
0x000000000009752b: call 0xfffffffff3faea31; ret; 
0x00000000000c4b04: call 0xfffffffff80c4afe; ret; 
0x00000000000a1a9a: call 0xfffffffffc0a3fa5; inc dword ptr [rbx]; pop rbx; ret; 
0x00000000000a1abb: call 0xfffffffffc0a3fce; add eax, dword ptr [rax]; pop rbx; ret; 
0x00000000000a1b95: call 0xfffffffffc0a40a0; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000000df310: call 0xfffffffffd918600; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x00000000000fa4d9: call 0xfffffffffff725fe; sldt word ptr [rax]; and eax, 0xfffff000; or eax, edi; ret; 
0x00000000000526cc: call 0xfffffffffff98aba; jmp qword ptr [rsi + 0xf]; 
0x0000000000048210: call 0xfffffffffff9a6fe; jmp qword ptr [rsi + 0x2e]; 
0x00000000001203eb: call qword ptr [r11]; mov rdx, qword ptr [rbx + 8]; mov dword ptr [rsp + 0x18], eax; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x0000000000135cec: call qword ptr [rax + 0x100]; 
0x000000000006d97c: call qword ptr [rax + 0x10]; 
0x000000000018684b: call qword ptr [rax + 0x11]; 
0x000000000018684b: call qword ptr [rax + 0x11]; cld; jmp rax; 
0x000000000007467f: call qword ptr [rax + 0x18]; 
0x000000000012b098: call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x000000000018623b: call qword ptr [rax + 0x19]; 
0x000000000018623b: call qword ptr [rax + 0x19]; sti; jmp qword ptr [rax]; 
0x000000000006e012: call qword ptr [rax + 0x20]; 
0x00000000000797c9: call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000012157a: call qword ptr [rax + 0x20]; pop rbx; pop rbp; mov eax, 1; pop r12; ret; 
0x000000000018664b: call qword ptr [rax + 0x20fffbe9]; fdiv st(3), st(0); jmp rax; 
0x00000000001869eb: call qword ptr [rax + 0x20fffc39]; sub al, 0xfc; jmp rax; 
0x0000000000186b63: call qword ptr [rax + 0x20fffc64]; cld; push qword ptr [rax + 0x40fffc63]; movsxd rdi, esp; call rax; 
0x0000000000187267: call qword ptr [rax + 0x20fffc89]; mov esp, edi; push qword ptr [rax + 0x40fffc88]; mov ah, bh; call rax; 
0x000000000018775f: call qword ptr [rax + 0x20fffcb0]; mov al, 0xfc; push qword ptr [rax + 0x40fffcaf]; scasd eax, dword ptr [rdi]; cld; call rax; 
0x0000000000186b47: call qword ptr [rax + 0x27]; 
0x00000000000c3a04: call qword ptr [rax + 0x28]; 
0x00000000001294a8: call qword ptr [rax + 0x28]; mov rax, qword ptr [rbx]; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000186283: call qword ptr [rax + 0x2a]; 
0x00000000000750bc: call qword ptr [rax + 0x30]; 
0x0000000000040bde: call qword ptr [rax + 0x31d18948]; shr cl, cl; fcos; jmp qword ptr [rsi + 0xf]; 
0x0000000000186a1f: call qword ptr [rax + 0x33]; 
0x0000000000049bed: call qword ptr [rax + 0x38]; 
0x0000000000078da9: call qword ptr [rax + 0x40]; 
0x000000000012e5be: call qword ptr [rax + 0x4284783]; mov eax, 1; ret; 
0x00000000000700e6: call qword ptr [rax + 0x48]; 
0x000000000012e0c5: call qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; ret; 
0x0000000000178393: call qword ptr [rax + 0x4b]; 
0x0000000000177c1b: call qword ptr [rax + 0x4c]; 
0x000000000017813b: call qword ptr [rax + 0x54]; 
0x000000000017813b: call qword ptr [rax + 0x54]; int1; jmp qword ptr [rax + 0x56]; 
0x0000000000177eb7: call qword ptr [rax + 0x56]; 
0x00000000001784a3: call qword ptr [rax + 0x57]; 
0x00000000000704a7: call qword ptr [rax + 0x58]; 
0x0000000000178517: call qword ptr [rax + 0x59]; 
0x0000000000186f57: call qword ptr [rax + 0x5c]; 
0x00000000001862f7: call qword ptr [rax + 0x5d]; 
0x000000000018750f: call qword ptr [rax + 0x5e]; 
0x000000000006de8f: call qword ptr [rax + 0x60]; 
0x0000000000186d6b: call qword ptr [rax + 0x63]; 
0x0000000000186d6b: call qword ptr [rax + 0x63]; cld; jmp rax; 
0x0000000000186b53: call qword ptr [rax + 0x66]; 
0x0000000000186b53: call qword ptr [rax + 0x66]; cld; jmp rax; 
0x00000000000706f7: call qword ptr [rax + 0x68]; 
0x0000000000178617: call qword ptr [rax + 0x6a]; 
0x0000000000178617: call qword ptr [rax + 0x6a]; inc dword ptr [rax - 0x4f000d96]; push -0xe; jmp rax; 
0x000000000017865f: call qword ptr [rax + 0x6c]; 
0x0000000000178683: call qword ptr [rax + 0x6d]; 
0x00000000001786a3: call qword ptr [rax + 0x6e]; 
0x00000000001786c3: call qword ptr [rax + 0x6f]; 
0x0000000000075cbc: call qword ptr [rax + 0x70]; 
0x00000000001862ef: call qword ptr [rax + 0x70fffb59]; pop rbx; sti; call qword ptr [rax + 0x5d]; 
0x000000000018683b: call qword ptr [rax + 0x70fffc09]; or edi, esp; call qword ptr [rax + 0xd]; 
0x0000000000186a97: call qword ptr [rax + 0x70fffc2e]; xor ah, bh; jmp qword ptr [rax + 0x32]; 
0x0000000000186a17: call qword ptr [rax + 0x70fffc2f]; xor esp, edi; call qword ptr [rax + 0x33]; 
0x000000000017719b: call qword ptr [rax + 0x75]; 
0x000000000017719b: call qword ptr [rax + 0x75]; out dx, al; call qword ptr [rax]; 
0x00000000001355ce: call qword ptr [rax + 0x77d63948]; add eax, 0xffff86e9; call qword ptr [rax - 0x18]; 
0x000000000007969c: call qword ptr [rax + 0x78]; 
0x000000000017817f: call qword ptr [rax + 0x7a]; 
0x000000000018633b: call qword ptr [rax + 0x7b]; 
0x00000000001874cb: call qword ptr [rax + 0x7b]; cld; push rax; pop rbp; cld; call qword ptr [rax]; 
0x0000000000166393: call qword ptr [rax + 0x7c]; 
0x0000000000166393: call qword ptr [rax + 0x7c]; in al, dx; inc dword ptr [rax + 0x7d]; in al, dx; jmp qword ptr [rax]; 
0x00000000001868df: call qword ptr [rax + 0xa]; 
0x00000000001868df: call qword ptr [rax + 0xa]; cld; jmp qword ptr [rax]; 
0x0000000000186843: call qword ptr [rax + 0xd]; 
0x000000000013593c: call qword ptr [rax + 0xf08]; 
0x0000000000135d3f: call qword ptr [rax + 0xf0]; mov qword ptr [rbx + 0x10], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000135f67: call qword ptr [rax + 0xf0]; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000186847: call qword ptr [rax + 0xf]; 
0x0000000000186847: call qword ptr [rax + 0xf]; cld; call qword ptr [rax + 0x11]; cld; jmp rax; 
0x000000000009534e: call qword ptr [rax + 0xfc9394c]; xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x894c; 
0x00000000001a33e3: call qword ptr [rax + 1]; 
0x00000000001aac63: call qword ptr [rax + 2]; 
0x00000000001867ef: call qword ptr [rax + 4]; 
0x00000000001867ef: call qword ptr [rax + 4]; cld; call qword ptr [rax]; 
0x00000000001a6353: call qword ptr [rax + 5]; 
0x00000000001a50db: call qword ptr [rax + 6]; 
0x0000000000186877: call qword ptr [rax + 7]; 
0x0000000000186877: call qword ptr [rax + 7]; cld; push qword ptr [rax]; or esp, edi; call qword ptr [rax]; 
0x00000000001b51f3: call qword ptr [rax + 8]; 
0x0000000000121a5e: call qword ptr [rax + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000018c61b: call qword ptr [rax + rax*2 + 0x30840002]; clc; call rsp; 
0x000000000018ceeb: call qword ptr [rax + rax*4 + 2]; add byte ptr [rdx + rbp], dh; stc; jmp rsp; 
0x000000000018cb83: call qword ptr [rax + rbp*2 - 0x69cbfffe]; clc; call rsp; 
0x0000000000186ef7: call qword ptr [rax + rbx*2 - 4]; call rsp; 
0x00000000001871f3: call qword ptr [rax + rcx*4 - 4]; jmp rsp; 
0x00000000001089d9: call qword ptr [rax - 0x18]; 
0x00000000001355d9: call qword ptr [rax - 0x18]; movabs al, byte ptr [0x8881058b48fffd44]; sub byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010be1d: call qword ptr [rax - 0x18]; pop rsp; fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x000000000018670b: call qword ptr [rax - 0x18]; sti; jmp rax; 
0x0000000000186707: call qword ptr [rax - 0x1a]; 
0x0000000000186707: call qword ptr [rax - 0x1a]; sti; call qword ptr [rax - 0x18]; sti; jmp rax; 
0x0000000000186703: call qword ptr [rax - 0x1c]; 
0x000000000018669b: call qword ptr [rax - 0x1f]; 
0x000000000018671b: call qword ptr [rax - 0x20]; 
0x000000000018671b: call qword ptr [rax - 0x20]; sti; inc dword ptr [rax - 0x1e]; sti; call qword ptr [rax]; 
0x0000000000186733: call qword ptr [rax - 0x24]; 
0x0000000000186733: call qword ptr [rax - 0x24]; sti; jmp qword ptr [rax]; 
0x00000000001867af: call qword ptr [rax - 0x31]; 
0x000000000018675b: call qword ptr [rax - 0x38]; 
0x000000000003618e: call qword ptr [rax - 0x3d]; 
0x000000000018678f: call qword ptr [rax - 0x3d]; sti; jmp qword ptr [rax]; 
0x0000000000178607: call qword ptr [rax - 0x3f000d97]; imul esi, edx, 0xf269f0ff; jmp qword ptr [rax]; 
0x00000000001785ef: call qword ptr [rax - 0x3f000d98]; push 0x68f0fff2; bnd jmp qword ptr [rax]; imul esi, edx, 0xf26940ff; jmp qword ptr [rax + 0x69]; 
0x000000000018754b: call qword ptr [rax - 0x4100038c]; stosd dword ptr [rdi], eax; cld; inc dword ptr [rax - 0x4e]; cld; call rax; 
0x00000000001865cf: call qword ptr [rax - 0x45]; 
0x0000000000178277: call qword ptr [rax - 0x4f00037d]; test ah, bh; call rax; 
0x00000000001781db: call qword ptr [rax - 0x4f000e64]; pushfq; int1; call rax; 
0x000000000018648f: call qword ptr [rax - 0x52]; 
0x0000000000187577: call qword ptr [rax - 0x52]; cld; jmp rax; 
0x000000000018648f: call qword ptr [rax - 0x52]; std; jmp rax; 
0x00000000001864bb: call qword ptr [rax - 0x55]; 
0x00000000001864bb: call qword ptr [rax - 0x55]; std; jmp rax; 
0x000000000017a00f: call qword ptr [rax - 0x59]; 
0x000000000017a00f: call qword ptr [rax - 0x59]; cmc; call rbx; 
0x0000000000179f27: call qword ptr [rax - 0x5a]; 
0x0000000000179f27: call qword ptr [rax - 0x5a]; cmc; call rbx; 
0x00000000001781cb: call qword ptr [rax - 0x66]; 
0x00000000001781cb: call qword ptr [rax - 0x66]; int1; jmp qword ptr [rax]; 
0x00000000001781c7: call qword ptr [rax - 0x67]; 
0x00000000001781c7: call qword ptr [rax - 0x67]; int1; call qword ptr [rax - 0x66]; int1; jmp qword ptr [rax]; 
0x00000000001788d7: call qword ptr [rax - 0x6e]; 
0x00000000001869e7: call qword ptr [rax - 0x6f0003c9]; cmp esp, edi; jmp qword ptr [rax]; 
0x00000000001866e7: call qword ptr [rax - 0x6f00041a]; call 0xffffffffdb3966ed; sti; jmp rax; 
0x0000000000186643: call qword ptr [rax - 0x6f00041b]; out 0xfb, eax; call qword ptr [rax + 0x20fffbe9]; fdiv st(3), st(0); jmp rax; 
0x0000000000177f03: call qword ptr [rax - 0x6f0010aa]; push rsi; out dx, eax; call qword ptr [rax]; 
0x0000000000177f6f: call qword ptr [rax - 0x6f0010aa]; push rsi; out dx, eax; call rax; 
0x0000000000177f27: call qword ptr [rax - 0x6f0010aa]; push rsi; out dx, eax; jmp qword ptr [rax + 0x56]; 
0x000000000017abf7: call qword ptr [rax - 0x70]; 
0x000000000017abcf: call qword ptr [rax - 0x71]; 
0x0000000000187257: call qword ptr [rax - 0x75]; 
0x0000000000187257: call qword ptr [rax - 0x75]; cld; jmp rax; 
0x000000000017828f: call qword ptr [rax - 0x76]; 
0x000000000018707f: call qword ptr [rax - 0x79]; 
0x000000000018707f: call qword ptr [rax - 0x79]; cld; jmp rax; 
0x000000000018724f: call qword ptr [rax - 0x7b]; 
0x000000000017826f: call qword ptr [rax - 0x7f]; 
0x0000000000186927: call qword ptr [rax - 0xc]; 
0x000000000017802b: call qword ptr [rax - 0xf000f4a]; mov ch, 0xf0; call qword ptr [rax]; 
0x0000000000186d07: call qword ptr [rax - 4]; jmp rsp; 
0x000000000018697b: call qword ptr [rax - 5]; 
0x0000000000002307: call qword ptr [rax]; 
0x0000000000186217: call qword ptr [rax]; adc bh, bl; call rax; 
0x000000000018682f: call qword ptr [rax]; add al, 0xfc; call rax; 
0x0000000000186b37: call qword ptr [rax]; and bh, ah; jmp qword ptr [rax + 0x23]; 
0x000000000018672b: call qword ptr [rax]; call 0xffffffffdab9672d; sti; call qword ptr [rax - 0x24]; 
0x000000000018672b: call qword ptr [rax]; call 0xffffffffdab9672d; sti; call qword ptr [rax - 0x24]; sti; jmp qword ptr [rax]; 
0x0000000000179f4f: call qword ptr [rax]; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call rbx; 
0x000000000018678b: call qword ptr [rax]; fdivr st(3); call qword ptr [rax - 0x3d]; 
0x000000000018678b: call qword ptr [rax]; fdivr st(3); call qword ptr [rax - 0x3d]; sti; jmp qword ptr [rax]; 
0x000000000018696b: call qword ptr [rax]; idiv bl; jmp qword ptr [rax - 9]; 
0x000000000017816f: call qword ptr [rax]; jno 0x178164; jmp qword ptr [rax + 0x73]; 
0x0000000000178287: call qword ptr [rax]; mov ah, bh; push qword ptr [rax]; mov esp, edi; call qword ptr [rax - 0x76]; 
0x0000000000129b97: call qword ptr [rax]; mov ebp, eax; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000011feed: call qword ptr [rax]; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000017abeb: call qword ptr [rax]; nop; cli; jmp qword ptr [rax]; 
0x00000000001868fb: call qword ptr [rax]; or ah, bh; inc dword ptr [rax]; or bh, ah; call rax; 
0x000000000018687f: call qword ptr [rax]; or edi, esp; jmp rax; 
0x0000000000186727: call qword ptr [rax]; out 0xfb, al; call qword ptr [rax]; call 0xffffffffdab9672d; sti; call qword ptr [rax - 0x24]; 
0x0000000000186917: call qword ptr [rax]; out dx, eax; sti; jmp qword ptr [rax - 0x10]; 
0x0000000000177f3b: call qword ptr [rax]; push rsi; out dx, eax; jmp qword ptr [rax + 0x56]; 
0x0000000000186ae3: call qword ptr [rax]; sbb edi, esp; jmp qword ptr [rax + 0x1c]; 
0x0000000000186997: call qword ptr [rax]; xor ah, bh; push rax; xor esp, edi; call rax; 
0x0000000000186abf: call qword ptr [rax]; xor bh, ah; jmp rax; 
0x0000000000075b2b: call qword ptr [rbp + 0x18]; 
0x0000000000075a98: call qword ptr [rbp + 0x20]; 
0x00000000001729af: call qword ptr [rbp + 0x27]; 
0x0000000000104bd4: call qword ptr [rbp + 0x28]; 
0x00000000001352ef: call qword ptr [rbp + 0x31]; 
0x000000000012244a: call qword ptr [rbp + 0x40]; 
0x0000000000002063: call qword ptr [rbp + 0x41]; 
0x000000000005e433: call qword ptr [rbp + 0x48]; 
0x000000000003bdb4: call qword ptr [rbp + 0x53]; 
0x0000000000186cd7: call qword ptr [rbp + 0x6524fffc]; cld; push qword ptr [rsp + 0x6444fffc]; cld; call rsp; 
0x00000000001b28db: call qword ptr [rbp + 1]; 
0x00000000001a384b: call qword ptr [rbp + 3]; 
0x00000000000c9aeb: call qword ptr [rbp + 4]; 
0x00000000001a4ad3: call qword ptr [rbp + 6]; 
0x000000000002a3cf: call qword ptr [rbp + 8]; 
0x00000000001876fb: call qword ptr [rbp + rbp*4 - 0x52db0004]; cld; push qword ptr [rsp + rbp*4 - 0x53bb0004]; cld; call rsp; 
0x00000000000920d8: call qword ptr [rbp - 0x43]; 
0x0000000000179503: call qword ptr [rbp - 0x64]; 
0x000000000017895f: call qword ptr [rbp - 0x6e]; 
0x000000000001f51f: call qword ptr [rbp - 0x77]; 
0x0000000000027634: call qword ptr [rbp]; 
0x00000000001221dc: call qword ptr [rbx + 0x10]; 
0x0000000000120208: call qword ptr [rbx + 0x18]; 
0x0000000000120208: call qword ptr [rbx + 0x18]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000010308a: call qword ptr [rbx + 0x28]; 
0x00000000000868ed: call qword ptr [rbx + 0x38]; 
0x00000000000869e8: call qword ptr [rbx + 0x40]; 
0x0000000000034a52: call qword ptr [rbx + 0x48]; 
0x0000000000048742: call qword ptr [rbx + 0x74]; 
0x00000000000488d2: call qword ptr [rbx + 0x74]; adc cl, byte ptr [rax - 0x73]; adc eax, 0x37b4cb; call 0xa3ea0; pop rbx; ret; 
0x0000000000048742: call qword ptr [rbx + 0x74]; cmp dh, byte ptr [rcx]; rol byte ptr [rax + 0x375003f], 0x5b; ret; 
0x0000000000174d40: call qword ptr [rbx + 0x7c]; 
0x00000000001a363b: call qword ptr [rbx + 0xa]; 
0x000000000004b6f6: call qword ptr [rbx + 0xf]; 
0x00000000001a3fd3: call qword ptr [rbx + 1]; 
0x000000000019e1a3: call qword ptr [rbx + 4]; 
0x00000000000274de: call qword ptr [rbx + 8]; 
0x0000000000186edf: call qword ptr [rbx + rbx*2 - 4]; call rsp; 
0x000000000018d67b: call qword ptr [rbx + rdi*4 + 0x2bc40002]; cli; jmp rsp; 
0x00000000001793cb: call qword ptr [rbx - 0x65]; 
0x00000000001793cb: call qword ptr [rbx - 0x65]; hlt; lcall ptr [rdi - 0x65]; hlt; call rsi; 
0x000000000011814a: call qword ptr [rbx - 0x77]; 
0x000000000000355e: call qword ptr [rbx]; 
0x00000000001203ec: call qword ptr [rbx]; mov rdx, qword ptr [rbx + 8]; mov dword ptr [rsp + 0x18], eax; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x000000000019276b: call qword ptr [rcx + 0x21]; 
0x0000000000121034: call qword ptr [rcx + 0x30]; 
0x0000000000001ca7: call qword ptr [rcx + 0x77]; 
0x00000000001b05ab: call qword ptr [rcx + 1]; 
0x00000000000c9721: call qword ptr [rcx + 4]; 
0x000000000018f173: call qword ptr [rcx + 5]; 
0x00000000001898f3: call qword ptr [rcx + rbp + 0x54e40001]; out dx, eax; jmp rsp; 
0x0000000000186eef: call qword ptr [rcx + rbx*2 - 4]; call rsp; 
0x000000000018d2cb: call qword ptr [rcx - 0x533bfffe]; stc; jmp rsp; 
0x0000000000179c71: call qword ptr [rcx - 0x56000a00]; add bl, bh; inc ebx; add dh, bh; jmp rdi; 
0x000000000017462d: call qword ptr [rcx - 0x66]; 
0x000000000000afe1: call qword ptr [rcx]; 
0x00000000000762cb: call qword ptr [rdi + 0x20]; 
0x0000000000076709: call qword ptr [rdi + 0x30]; 
0x000000000019579b: call qword ptr [rdi + 0x4000001]; 
0x00000000000c4c83: call qword ptr [rdi + 0x40]; 
0x00000000001a74c3: call qword ptr [rdi + 1]; 
0x000000000019eb4b: call qword ptr [rdi + 2]; 
0x0000000000179137: call qword ptr [rdi + 4]; 
0x00000000001af743: call qword ptr [rdi + 5]; 
0x0000000000025a88: call qword ptr [rdi + 8]; 
0x000000000018af83: call qword ptr [rdi + rax*8 - 0x405bffff]; cmc; call rsp; 
0x000000000018c373: call qword ptr [rdi + rbp + 2]; add byte ptr [rdi + rax], dl; clc; ljmp ptr [rax + rsi + 0x8640002]; clc; jmp rsp; 
0x00000000001876eb: call qword ptr [rdi + rbp*4 - 4]; jmp rsp; 
0x000000000018ca4b: call qword ptr [rdi + rbx*2 - 0x7f5cfffe]; clc; inc dword ptr [rdi + rbx*2]; add al, byte ptr [rax]; ret 0xf880; 
0x0000000000178d13: call qword ptr [rdi - 0x3a]; 
0x0000000000179403: call qword ptr [rdi - 0x66]; 
0x0000000000179403: call qword ptr [rdi - 0x66]; hlt; jmp qword ptr [rcx - 0x66]; 
0x000000000004dee8: call qword ptr [rdi]; 
0x0000000000187a7b: call qword ptr [rdi]; add byte ptr [rdx + rdi*2 + 0x687cffe9], dh; add byte ptr [rax], al; sub dword ptr [rbx - 0x17], edi; call rsp; 
0x000000000017a57b: call qword ptr [rdi]; sal esi, 1; call rdx; 
0x000000000012b54e: call qword ptr [rdx + 0x18]; 
0x00000000001203f9: call qword ptr [rdx + 0x20]; 
0x00000000001792e3: call qword ptr [rdx + 0x22]; 
0x000000000018713b: call qword ptr [rdx + 0x22fffc87]; xchg esp, edi; push qword ptr [rdx + 0x42fffc86]; xchg ah, bh; call rdx; 
0x0000000000105557: call qword ptr [rdx + 0x28]; 
0x0000000000075057: call qword ptr [rdx + 0x30]; 
0x000000000004a427: call qword ptr [rdx + 0x38]; 
0x0000000000186e4f: call qword ptr [rdx + 0x55]; 
0x0000000000186e47: call qword ptr [rdx + 0x56]; 
0x0000000000186c3f: call qword ptr [rdx + 0x61]; 
0x0000000000186c3f: call qword ptr [rdx + 0x61]; cld; jmp rdx; 
0x0000000000190d5b: call qword ptr [rdx + 1]; 
0x000000000019cfd3: call qword ptr [rdx + 4]; 
0x0000000000186ee7: call qword ptr [rdx + rbx*2 - 4]; call rsp; 
0x000000000018c8d3: call qword ptr [rdx + rdx*2 + 2]; add byte ptr [rbx + 0x63], ah; clc; lcall ptr [rdx + rdx*2 + 0x63820002]; clc; jmp rsp; 
0x000000000018da3b: call qword ptr [rdx + rdx*8 + 0x70a40002]; cli; jmp rsp; 
0x0000000000002b2b: call qword ptr [rdx - 0x19]; 
0x0000000000187623: call qword ptr [rdx - 0x50]; 
0x0000000000187623: call qword ptr [rdx - 0x50]; cld; jmp rdx; 
0x000000000018712b: call qword ptr [rdx - 0x77]; 
0x000000000018712b: call qword ptr [rdx - 0x77]; cld; jmp rdx; 
0x0000000000187317: call qword ptr [rdx - 0x7e]; 
0x000000000004c9ac: call qword ptr [rdx]; 
0x000000000019d11b: call qword ptr [rsi + 0x16]; 
0x0000000000187097: call qword ptr [rsi + 0x26fffc8b]; mov edi, esp; push qword ptr [rsi + 0x46fffc8a]; mov bh, ah; call rsi; 
0x000000000017637f: call qword ptr [rsi + 0x30]; 
0x00000000000edafa: call qword ptr [rsi + 0x40]; 
0x00000000001863af: call qword ptr [rsi + 0x42fffda4]; movsd dword ptr [rdi], dword ptr [rsi]; std; call qword ptr [rdx]; 
0x0000000000186b9b: call qword ptr [rsi + 0x65]; 
0x0000000000186b9b: call qword ptr [rsi + 0x65]; cld; jmp rsi; 
0x0000000000003618: call qword ptr [rsi + 0x6f]; 
0x00000000001063d1: call qword ptr [rsi + 0x74]; 
0x00000000001063d1: call qword ptr [rsi + 0x74]; or edi, dword ptr [rax + 7]; ret; 
0x00000000001b2633: call qword ptr [rsi + 0xb]; 
0x0000000000190e43: call qword ptr [rsi + 1]; 
0x00000000001991fb: call qword ptr [rsi + 2]; 
0x00000000001b6593: call qword ptr [rsi + 4]; 
0x00000000001aa023: call qword ptr [rsi + 6]; 
0x0000000000025f50: call qword ptr [rsi + 8]; 
0x0000000000178f37: call qword ptr [rsi - 0x2d]; 
0x00000000001875bf: call qword ptr [rsi - 0x53]; 
0x00000000001875bf: call qword ptr [rsi - 0x53]; cld; jmp rsi; 
0x00000000001877cf: call qword ptr [rsi - 0x5f]; 
0x0000000000179463: call qword ptr [rsi - 0x67]; 
0x0000000000179463: call qword ptr [rsi - 0x67]; hlt; jmp qword ptr [rax - 0x67]; 
0x00000000001870c7: call qword ptr [rsi - 0x7a]; 
0x00000000001870c7: call qword ptr [rsi - 0x7a]; cld; jmp rsi; 
0x000000000001ffe5: call qword ptr [rsi]; 
0x0000000000186413: call qword ptr [rsi]; movsd dword ptr [rdi], dword ptr [rsi]; std; jmp rsi; 
0x000000000018e13b: call qword ptr [rsp + rdx*8]; add al, byte ptr [rax]; and al, 0xdb; std; jmp rsp; 
0x000000000001f835: call rax; 
0x0000000000186833: call rax; add eax, 0x7b0fffc; cld; call qword ptr [rax + 0x70fffc09]; or edi, esp; call qword ptr [rax + 0xd]; 
0x000000000007ab49: call rax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000011ee22: call rax; add rsp, 0x30; lea rax, qword ptr [rip + 0x2a4871]; pop rbx; ret; 
0x000000000011ed08: call rax; add rsp, 0x30; pop rbx; ret; 
0x00000000000bdfd7: call rax; add rsp, 0x38; ret; 
0x00000000000f75d0: call rax; add rsp, 0xd0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000034103: call rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000001866cb: call rax; call 0xffffffffdb7966cd; sti; jmp qword ptr [rax]; 
0x00000000000b9f70: call rax; cmp eax, 0xfffff000; setbe al; add rsp, 8; movzx eax, al; ret; 
0x00000000001869ab: call rax; cmp esp, edi; jmp qword ptr [rax + 0x2c]; 
0x000000000017815b: call rax; int1; jmp rax; 
0x000000000018631b: call rax; jo 0x18631a; jmp qword ptr [rax]; 
0x000000000018705f: call rax; mov bh, ah; jmp qword ptr [rax - 0x76]; 
0x0000000000187557: call rax; mov cl, 0xfc; jmp qword ptr [rax - 0x4f]; 
0x000000000011ede3: call rax; or dword ptr [rip + 0x2a4894], 2; add rsp, 0x30; lea rax, qword ptr [rip + 0x2a48a9]; pop rbx; ret; 
0x00000000001866c7: call rax; out 0xfb, al; call rax; call 0xffffffffdb7966cd; sti; jmp qword ptr [rax]; 
0x0000000000186f53: call rax; pop rsp; cld; call qword ptr [rax + 0x5c]; 
0x000000000018677b: call rax; sar bl, cl; jmp qword ptr [rax]; 
0x0000000000186b27: call rax; sbb al, 0xfc; jmp qword ptr [rax]; 
0x000000000018776f: call rax; scasb al, byte ptr [rdi]; cld; jmp qword ptr [rax - 0x52]; 
0x0000000000186307: call rax; sti; inc dword ptr [rax]; sti; jmp rax; 
0x000000000017827f: call rax; test esp, edi; push rax; xchg ah, bh; call qword ptr [rax]; 
0x0000000000179387: call rax; xchg eax, ebp; hlt; jmp rsi; 
0x0000000000187277: call rax; xchg esp, edi; jmp qword ptr [rax - 0x79]; 
0x00000000001869a3: call rax; xor eax, 0x37d0fffc; cld; call rax; cmp esp, edi; jmp qword ptr [rax + 0x2c]; 
0x0000000000025aea: call rbx; 
0x000000000017a00b: call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax - 0x59]; 
0x0000000000179f23: call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax - 0x5a]; 
0x0000000000179f4b: call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax]; 
0x0000000000179f8f: call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp qword ptr [rax]; 
0x0000000000023426: call rcx; 
0x0000000000023970: call rdi; 
0x0000000000179593: call rdi; popfq; hlt; jmp rcx; 
0x0000000000031e21: call rdx; 
0x000000000012cee3: call rdx; add rsp, 0x38; ret; 
0x0000000000186c1f: call rdx; cld; jmp qword ptr [rdx + 0x64]; 
0x0000000000187643: call rdx; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rdx - 0x54]; 
0x0000000000025be4: call rsi; 
0x000000000018759f: call rsi; mov al, 0xfc; jmp qword ptr [rsi - 0x50]; 
0x00000000001870a7: call rsi; mov esp, edi; jmp qword ptr [rsi - 0x77]; 
0x0000000000028ba7: call rsp; 
0x000000000018a98b: call rsp; pushfq; add dword ptr [rax], eax; ret 0xf380; 
0x000000000018d7b3: call rsp; ret 2; 
0x000000000018af1b: call rsp; ret; 
0x000000000004d536: cdq; adc al, byte ptr [rax]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x0000000000197b7d: cdq; add byte ptr [rax], al; adc al, cl; in eax, dx; call qword ptr [rbx]; 
0x000000000010600b: cdq; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001a7ba5: cdq; add dword ptr [rax], eax; cmp byte ptr [rsi], ch; cmc; jmp qword ptr [rax]; 
0x00000000001a7b75: cdq; add dword ptr [rax], eax; or byte ptr [rsi], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001a7b15: cdq; add dword ptr [rax], eax; test al, 0x2d; cmc; jmp qword ptr [rcx]; 
0x000000000014d6c7: cdq; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001aa299: cdq; cmc; call rsp; 
0x0000000000148ef3: cdq; fiadd dword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000017945d: cdq; hlt; dec dword ptr [rcx]; sahf; hlt; call qword ptr [rsi - 0x67]; 
0x0000000000179465: cdq; hlt; jmp qword ptr [rax - 0x67]; 
0x00000000000f4593: cdq; idiv bh; dec dword ptr [rax - 0x77]; ret; 
0x00000000000d96ff: cdq; idiv bh; jmp qword ptr [rsi + 0x66]; 
0x000000000003c8c2: cdq; idiv esi; shl rdx, 0x20; mov eax, eax; or rax, rdx; ret; 
0x000000000003c8d4: cdq; idiv rsi; ret; 
0x0000000000175e20: cdq; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000001781c9: cdq; int1; call qword ptr [rax - 0x66]; 
0x00000000001781c9: cdq; int1; call qword ptr [rax - 0x66]; int1; jmp qword ptr [rax]; 
0x00000000001781b1: cdq; int1; jmp rax; 
0x0000000000175e1b: cdq; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x0000000000188f91: cdq; out dx, al; jmp rsp; 
0x0000000000038799: cdq; pop r14; idiv r9; pop r15; ret; 
0x0000000000128bf3: cdq; push -0x76b70011; ret; 
0x000000000001e210: cdq; ret 0x17; 
0x0000000000107c73: cdq; ret 0x2b; 
0x0000000000132ecb: cdq; scasd eax, dword ptr [rdi]; sub byte ptr [rax], al; mov dword ptr fs:[rax], 2; mov eax, 0xffffffff; ret; 
0x00000000000eeff2: cdq; stc; dec dword ptr [rax + 0x39]; ret; 
0x00000000000804e3: cdq; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000133653: cdq; test byte ptr [rax], ch; add byte ptr [rcx + 0x5c], al; jmp rax; 
0x0000000000001b5a: cdq; xchg eax, esp; pop rdx; int 0x4f; jmp rdx; 
0x0000000000143373: cdq; xor al, byte ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000019ad5c: cdq; xor dh, ch; jmp qword ptr [rdx]; 
0x00000000000647fb: cdq; xor dl, byte ptr [rcx]; add byte ptr [rdx + 0x63], cl; adc al, 0xa0; add rax, rdx; jmp rax; 
0x00000000000c644f: cdq; xor ecx, dword ptr [rbx]; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x00000000000f04ab: cdqe; mov qword ptr [rbx + 0x48], rax; pop rbx; ret; 
0x000000000012207e: cdqe; mov qword ptr [rbx], rax; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x00000000000d0b5f: cdqe; movzx eax, byte ptr [rdx + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000004dd86: cdqe; movzx edx, byte ptr [rdx + rax]; lea rax, qword ptr [rip + 0x128fed]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x00000000000d1ecd: cdqe; or qword ptr [rdi + 0x90], rax; xor eax, eax; ret; 
0x00000000000794e8: cdqe; ret; 
0x00000000001180dd: cdqe; shr rax, 4; ret; 
0x0000000000036085: clc; adc al, 0; andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x000000000003608d: clc; adc al, 0; orpd xmm0, xmm1; ret; 
0x0000000000128751: clc; adc byte ptr [rdi], cl; test dword ptr [rsp + rdi*8 - 1], edi; jmp qword ptr [rsi - 0x7d]; 
0x0000000000113886: clc; adc byte ptr [rsi + rbx*2 + 0x31], dh; jmp qword ptr [rsi + 0x41]; 
0x00000000000a546f: clc; adc esi, dword ptr [rbp + rcx - 0x77]; ret 0xc9eb; 
0x00000000000800d8: clc; add al, 0x74; cmp al, 0x89; ret 0xb48b; 
0x0000000000048c89: clc; add al, 0x89; ret; 
0x00000000000dc8e8: clc; add al, 0xf; xchg dword ptr [rax - 0x76fffff4], esi; ret 0x8d48; 
0x00000000000dfbc5: clc; add al, 0xf; xchg eax, ebp; ret 0x2041; 
0x00000000000af501: clc; add al, 0xf; xchg eax, ebp; ret 0xc0e9; 
0x00000000000af355: clc; add al, 0xf; xchg eax, ebp; ret 0xf883; 
0x000000000005e48f: clc; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000019d9f5: clc; add byte ptr [rax], al; fdivr dword ptr [rdi - 0x11]; jmp qword ptr [rcx + 0xd]; 
0x00000000000c2472: clc; add byte ptr [rcx], al; sbb dword ptr [rbp + rsi*2 - 0x7e], edx; mov eax, 0x7d00; ret; 
0x00000000000e4bc0: clc; add byte ptr [rsp + rax - 0x77], dh; ret 0xeeeb; 
0x00000000000a3914: clc; add cl, byte ptr [rax + 0x29]; ret 0x6fe9; 
0x00000000000a3888: clc; add cl, byte ptr [rax + 0x29]; ret 0x8548; 
0x00000000000a38fc: clc; add cl, byte ptr [rax + 0x29]; ret 0x8aeb; 
0x0000000000073e99: clc; add cl, byte ptr [rax + 0x39]; ret 0x5877; 
0x0000000000061998: clc; add cl, byte ptr [rax + 0x39]; ret 0x8f0f; 
0x000000000007709c: clc; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000004977b: clc; add cl, byte ptr [rbp + 0x39]; ret; 
0x00000000000a633b: clc; add cl, byte ptr [rcx + 0x39]; ret; 
0x0000000000075d59: clc; add cl, byte ptr [rdi]; test byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rbx - 0x7af0fe08], al; ret; 
0x0000000000021a14: clc; add cl, byte ptr [rdi]; test byte ptr [rip + 0x5b000001], dl; pop rbp; pop r12; ret; 
0x00000000000cd91e: clc; add cl, byte ptr [rdi]; xchg eax, ebp; ret; 
0x0000000000083459: clc; add dword ptr [rax - 0x73], ecx; clc; cmovne rax, rcx; add rsp, 8; ret; 
0x0000000000120ce4: clc; add dword ptr [rbp + 0x38], esi; mov dword ptr [rsi], 7; mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi + 8], eax; ret; 
0x000000000012cfe1: clc; add dword ptr [rbp - 0x14], esi; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax]; jmp rax; 
0x000000000010c4a1: clc; add dword ptr [rbx + rdx + 0x48], esi; mov eax, dword ptr [rip + 0x2b6364]; add rsp, 0x28; jmp rax; 
0x00000000000940ab: clc; add dword ptr [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret; 
0x000000000005db10: clc; add dword ptr [rdi], ecx; adc al, 0x24; add rsp, 0x18; mov eax, edx; ret; 
0x0000000000106007: clc; add dword ptr [rdi], ecx; test byte ptr [rcx + 0x31000000], bl; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001176c5: clc; add eax, 0x10; ret; 
0x00000000000b8e95: clc; add eax, 0x28bad029; add byte ptr [rax], al; add byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0x8d44; 
0x00000000000b7826: clc; add eax, 0x2907fbc1; ret 0x8944; 
0x00000000000b21d8: clc; add eax, 0x89d02944; ret; 
0x00000000000b23cd: clc; add eax, 0xfd02944; scasd eax, dword ptr [rdi]; ret; 
0x00000000000868c4: clc; add ecx, dword ptr [rax + 1]; ret 0x6348; 
0x0000000000034620: clc; add ecx, dword ptr [rdi]; xchg eax, esp; ret 0x70e9; 
0x00000000001211c1: clc; add esi, dword ptr [rsi + 0xb]; mov eax, 2; ret; 
0x00000000000970a6: clc; add rax, r8; ret; 
0x000000000008bb98: clc; add rax, rcx; ret; 
0x0000000000108c20: clc; add rsp, 8; ret; 
0x000000000007d534: clc; and byte ptr [rdi], cl; xchg eax, ebp; ret 0x8441; 
0x000000000002ff41: clc; and eax, 0x7f; ret; 
0x000000000010c567: clc; and eax, 0xffffff; ret; 
0x00000000000c0919: clc; bnd je 0xc0928; xor eax, eax; cmp rdx, -1; cmovne rax, rdx; ret; 
0x000000000010c541: clc; bswap eax; ret; 
0x000000000018c61a: clc; call qword ptr [rax + rax*2 + 0x30840002]; clc; call rsp; 
0x000000000018cb82: clc; call qword ptr [rax + rbp*2 - 0x69cbfffe]; clc; call rsp; 
0x00000000001089d8: clc; call qword ptr [rax - 0x18]; 
0x000000000010be1c: clc; call qword ptr [rax - 0x18]; pop rsp; fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x000000000018ca4a: clc; call qword ptr [rdi + rbx*2 - 0x7f5cfffe]; clc; inc dword ptr [rdi + rbx*2]; add al, byte ptr [rax]; ret 0xf880; 
0x000000000018c28a: clc; call rsp; 
0x00000000001ac131: clc; cmc; call qword ptr [rcx]; 
0x0000000000198e38: clc; cmc; in eax, dx; jmp qword ptr [rbx]; 
0x00000000001a7c38: clc; cmc; jmp qword ptr [rcx]; 
0x000000000004971a: clc; cmovae rax, rsi; pop rbx; ret; 
0x00000000000497f6: clc; cmovae rax, rsi; ret; 
0x000000000008345e: clc; cmovne rax, rcx; add rsp, 8; ret; 
0x00000000000303a3: clc; cmp byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000973b5: clc; cmp eax, 0x8445f174; sal byte ptr [rbp - 0x63], 0x48; mov eax, edi; ret; 
0x00000000000973a6: clc; cmp eax, 0x89480f75; clc; ret; 
0x0000000000003aaa: clc; cmp eax, ecx; mov bl, 0xf7; adc bh, byte ptr [rax]; cwde; ret; 
0x000000000003c8d2: clc; cqo; idiv rsi; ret; 
0x0000000000092b9f: clc; dec dword ptr [rax - 0x73]; add eax, 0xfffffad8; add rsp, 8; ret; 
0x0000000000080ad4: clc; dec dword ptr [rax - 0x77]; ret 0x840f; 
0x00000000001326db: clc; dec dword ptr [rax - 0x77]; ret 0x9274; 
0x000000000006ed9f: clc; dec dword ptr [rax - 0x77]; ret 0xf40; 
0x000000000002fbb6: clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ae1aa: clc; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000010378f: clc; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x95; ret; 
0x000000000018cd0a: clc; dec dword ptr [rbx + rsi*2 - 0x18bbfffe]; clc; call rsp; 
0x000000000012f1f1: clc; dec dword ptr [rcx - 0x647bf03f]; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000004e1c3: clc; dec dword ptr [rcx - 0x77]; ret 0x840f; 
0x000000000004b9d2: clc; dec dword ptr [rcx - 0x77]; ret 0x850f; 
0x0000000000060341: clc; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x000000000018c872: clc; dec dword ptr [rdi + rcx*2 + 2]; add byte ptr [rax + rbx*2 - 8], al; call rsp; 
0x000000000018c5fa: clc; dec dword ptr [rdi + rdi + 0x2bd40002]; clc; call rsp; 
0x00000000001143f0: clc; dec dword ptr [rdi]; test bl, ah; add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x840f; 
0x000000000006dc4f: clc; dec dword ptr [rdi]; test byte ptr [rcx - 0x76ffffff], cl; ret 0xe283; 
0x00000000000fb74d: clc; dec dword ptr [rdi]; test dword ptr [rbx], ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000007194b: clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x000000000018c9da: clc; dec dword ptr [rdx + rbx*2 + 0x76ea0002]; clc; call rsp; 
0x000000000018c95a: clc; dec dword ptr [rsi + rdx*2 + 0x6d350002]; clc; call rsp; 
0x000000000018ca12: clc; dec dword ptr [rsp + rbx*2 + 0x78f90002]; clc; call rsp; 
0x000000000018c5d2: clc; dec esp; add al, byte ptr ds:[rax]; push rsp; sub al, bh; jmp rsp; 
0x000000000018c302: clc; dec esp; sub eax, 0x4340002; clc; jmp rsp; 
0x00000000001aacf8: clc; fcomi st(5); call qword ptr [rax]; 
0x000000000019eff8: clc; fcompi st(0); jmp rax; 
0x00000000001a6a88: clc; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001946e9: clc; in al, dx; call qword ptr [rax]; 
0x000000000018cb7a: clc; inc dword ptr [rax + rbp*2 + 2]; add byte ptr [rsp + rdx*4 - 8], dh; call qword ptr [rax + rbp*2 - 0x69cbfffe]; clc; call rsp; 
0x00000000000ae4a5: clc; inc dword ptr [rbp + 0x79c789c0]; ret; 
0x000000000018cc1a: clc; inc dword ptr [rbp*2 - 0x5a2bfffe]; clc; lcall ptr [rbp*2 - 0x594bfffe]; clc; jmp rsp; 
0x000000000018cd02: clc; inc dword ptr [rbx + rsi*2 + 2]; add byte ptr [rsi + 0x738cfff8], dl; add al, byte ptr [rax]; out 0xf8, eax; call rsp; 
0x000000000018ca52: clc; inc dword ptr [rdi + rbx*2]; add al, byte ptr [rax]; ret 0xf880; 
0x000000000018c4c2: clc; inc dword ptr [rdi + rsi + 0x1ca40002]; clc; jmp rsp; 
0x00000000001b04e2: clc; jmp qword ptr [rax]; 
0x00000000001b071a: clc; jmp qword ptr [rbx]; 
0x00000000000a4694: clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000f6da2: clc; jmp qword ptr [rsi + 0x66]; 
0x00000000000a1bc5: clc; jmp qword ptr [rsi + 0xf]; 
0x00000000000a94bc: clc; jmp qword ptr [rsi - 0x70]; 
0x00000000001aa722: clc; jmp qword ptr [rsi]; 
0x000000000006d0be: clc; jmp rax; 
0x000000000018c30a: clc; jmp rsp; 
0x00000000000b0662: clc; jno 0xb06dc; sub cl, byte ptr [rax - 0x73]; add eax, 0x310733; add rsp, 0x28; ret; 
0x000000000018c92a: clc; lcall ptr [rbp + rdx*2 + 0x6a980002]; clc; jmp rsp; 
0x000000000018cc22: clc; lcall ptr [rbp*2 - 0x594bfffe]; clc; jmp rsp; 
0x000000000018ca0a: clc; lcall ptr [rbx*2 + 0x78da0002]; clc; dec dword ptr [rsp + rbx*2 + 0x78f90002]; clc; call rsp; 
0x000000000018c8da: clc; lcall ptr [rdx + rdx*2 + 0x63820002]; clc; jmp rsp; 
0x000000000014a606: clc; lea r11, qword ptr [rip + 0x3c382]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a450: clc; lea r11, qword ptr [rip + 0x3c538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147b42: clc; lea r11, qword ptr [rip + 0x3ec86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147a68: clc; lea r11, qword ptr [rip + 0x3ed60]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145172: clc; lea r11, qword ptr [rip + 0x41496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145098: clc; lea r11, qword ptr [rip + 0x41570]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000049b4f: clc; lea rbx, qword ptr [rax + rbx + 1]; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x00000000000fbbef: clc; lea rcx, qword ptr [rsi + rax]; xor eax, eax; cmp rdx, rcx; cmovae rax, rsi; ret; 
0x00000000001287c7: clc; lea rsi, qword ptr [r12 + 0x18]; mov r15, r14; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000018c37a: clc; ljmp ptr [rax + rsi + 0x8640002]; clc; jmp rsp; 
0x000000000018cb0a: clc; ljmp ptr [rsp - 0x74fbfffe]; clc; jmp rsp; 
0x00000000000f322b: clc; mov byte ptr [r9 - 1], 0; ret; 
0x00000000000968e8: clc; mov byte ptr [rdi + 6], 0; ret; 
0x0000000000174a82: clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000001afd78: clc; mov dh, 0xf6; call qword ptr [rdi]; 
0x0000000000131c43: clc; mov eax, 3; syscall; 
0x00000000000967c2: clc; mov eax, dword ptr [rsp + 0x18]; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x0000000000144237: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144b8b: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144d8b: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f8b: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014421b: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144b5f: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144d5f: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f5f: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001441ef: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144ba7: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c4a7: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144da7: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c417: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144fa7: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c387: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144253: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000012a587: clc; mov rcx, r14; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax; 
0x00000000000ed28c: clc; mov rdx, rsi; mov eax, 0x11d; xor esi, esi; syscall; 
0x00000000000cb4f0: clc; mov rsi, r15; mov eax, 0xcc; syscall; 
0x00000000000eb089: clc; mov rsi, rdx; mov eax, 5; syscall; 
0x0000000000039e42: clc; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000eb1ec: clc; movsxd r10, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000008bf82: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000000fa4f2: clc; movzx edi, dil; shr rax, 0xc; xor al, al; or eax, edi; ret; 
0x000000000010c5aa: clc; movzx esi, sil; shl eax, 8; or eax, esi; bswap eax; ret; 
0x00000000001b44d8: clc; nop; idiv edi; ret; 
0x00000000000a89ff: clc; or dword ptr [rdi], ecx; xchg dword ptr [rax + rdx - 0x7cb80000], ebx; ret; 
0x000000000019ba78: clc; out dx, al; call rsp; 
0x0000000000021b18: clc; pop rbp; mov qword ptr [rip + 0x39c70f], rax; pop r12; ret; 
0x0000000000101dfd: clc; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000108e52: clc; pop rbx; ret; 
0x00000000001ab224: clc; pop rdx; cmc; jmp qword ptr [rdx]; 
0x000000000002209f: clc; push qword ptr [rax + 0x48]; add esp, 8; ret; 
0x00000000000fa61c: clc; push qword ptr [rax + rcx + 0x5b]; pop rbp; ret; 
0x000000000006e494: clc; push qword ptr [rax + rdx + 0x48]; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000bd38d: clc; push qword ptr [rax + rsi - 0x77]; ret 0xe283; 
0x00000000000769ca: clc; push qword ptr [rbp + 2]; pop rbx; ret; 
0x0000000000132f8f: clc; push qword ptr [rbp + rcx + 0x48]; add esp, 8; ret; 
0x000000000007bdc0: clc; push qword ptr [rbp - 0x1a]; pop rbx; ret; 
0x00000000000fb9a4: clc; push qword ptr [rbx + rax - 0x75]; add al, 0x24; add rsp, 0x18; ret; 
0x000000000007505b: clc; push qword ptr [rbx + rax - 0x7d]; and ebp, edi; pop rbx; ret; 
0x000000000018c7ca: clc; push qword ptr [rbx + rcx*2 + 2]; add byte ptr [rdx + rcx*2], al; clc; call rsp; 
0x00000000000739e1: clc; push qword ptr [rcx + rdx*8 + 0x5b]; pop rbp; mov eax, 0xffffffff; pop r12; ret; 
0x000000000018c9aa: clc; push qword ptr [rdx + rbx*2 + 2]; add byte ptr [rsp + rsi*2 - 8], bl; jmp rsp; 
0x0000000000131c3d: clc; push qword ptr [rdx + rcx + 0x48]; movsxd rdi, eax; mov eax, 3; syscall; 
0x0000000000114812: clc; push qword ptr [rdx - 0x3dbbf0fe]; ret; 
0x000000000018cafa: clc; push rsp; add al, byte ptr fs:[rax]; ret 0xf88a; 
0x000000000001b170: clc; ret 0x3b; 
0x00000000001858f2: clc; ret 0x6e1f; 
0x0000000000022cbd: clc; ret; 
0x000000000010c551: clc; ror ax, 8; ret; 
0x000000000004c5e4: clc; sar bh, cl; dec dword ptr [rax - 0x77]; ret 0x31eb; 
0x000000000003c873: clc; sar edx, 0x1f; xor eax, edx; sub eax, edx; ret; 
0x000000000010aafb: clc; sar rax, 6; ret; 
0x000000000003c885: clc; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x00000000000b0573: clc; sbb dword ptr [rdi + 0x19], esi; mov rax, rbx; add rsp, 0x20; pop rbx; ret; 
0x0000000000199f38: clc; sbb ebp, esi; jmp qword ptr [rbx]; 
0x0000000000038b0a: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000010c5e7: clc; shr eax, 0x18; ret; 
0x0000000000186975: clc; sti; inc dword ptr [rax]; cli; sti; call qword ptr [rax - 5]; 
0x000000000019431e: clc; sub ah, 0xff; sbb al, 0xd; xor al, 0x80; in al, dx; jmp qword ptr [rdx]; 
0x000000000019a458: clc; sub ch, dh; call qword ptr [rsi]; 
0x000000000006d0ad: clc; sub dword ptr [rdi + 0x39], esi; nop dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000103f61: clc; sub eax, esi; ret; 
0x000000000013cabb: clc; sub rax, rsi; ret; 
0x00000000001087e8: clc; syscall; 
0x000000000017939c: clc; xchg eax, ebp; hlt; jmp rsi; 
0x00000000001a7ff8: clc; xor al, 0xf5; jmp qword ptr [rax]; 
0x00000000001765b8: cld; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000000c24c2: cld; add byte ptr [rax], al; ret; 
0x000000000018b9f5: cld; add dword ptr [rax], eax; hlt; and dh, bh; call rsp; 
0x00000000000a1abf: cld; add eax, dword ptr [rax]; pop rbx; ret; 
0x00000000000a1ae2: cld; add eax, dword ptr [rax]; ret; 
0x0000000000192a36: cld; and eax, 0xd1cffeb; sahf; and al, 0xeb; jmp qword ptr [rdx]; 
0x000000000012102c: cld; and edx, 0xfffffffc; lea esi, dword ptr [rax + rdx + 0x28]; call qword ptr [rcx + 0x30]; 
0x000000000018684a: cld; call qword ptr [rax + 0x11]; 
0x000000000018684a: cld; call qword ptr [rax + 0x11]; cld; jmp rax; 
0x0000000000186af2: cld; call qword ptr [rax + 0x20]; 
0x00000000001869ea: cld; call qword ptr [rax + 0x20fffc39]; sub al, 0xfc; jmp rax; 
0x0000000000186b62: cld; call qword ptr [rax + 0x20fffc64]; cld; push qword ptr [rax + 0x40fffc63]; movsxd rdi, esp; call rax; 
0x0000000000187266: cld; call qword ptr [rax + 0x20fffc89]; mov esp, edi; push qword ptr [rax + 0x40fffc88]; mov ah, bh; call rax; 
0x0000000000186b46: cld; call qword ptr [rax + 0x27]; 
0x0000000000120f85: cld; call qword ptr [rax + 0x30]; 
0x0000000000186a1e: cld; call qword ptr [rax + 0x33]; 
0x0000000000186f56: cld; call qword ptr [rax + 0x5c]; 
0x000000000018750e: cld; call qword ptr [rax + 0x5e]; 
0x0000000000186d6a: cld; call qword ptr [rax + 0x63]; 
0x0000000000186d6a: cld; call qword ptr [rax + 0x63]; cld; jmp rax; 
0x0000000000186b52: cld; call qword ptr [rax + 0x66]; 
0x0000000000186b52: cld; call qword ptr [rax + 0x66]; cld; jmp rax; 
0x000000000018683a: cld; call qword ptr [rax + 0x70fffc09]; or edi, esp; call qword ptr [rax + 0xd]; 
0x0000000000186a96: cld; call qword ptr [rax + 0x70fffc2e]; xor ah, bh; jmp qword ptr [rax + 0x32]; 
0x0000000000186a16: cld; call qword ptr [rax + 0x70fffc2f]; xor esp, edi; call qword ptr [rax + 0x33]; 
0x00000000001874ca: cld; call qword ptr [rax + 0x7b]; 
0x00000000001872c6: cld; call qword ptr [rax + 0x7c]; 
0x00000000001868de: cld; call qword ptr [rax + 0xa]; 
0x00000000001868de: cld; call qword ptr [rax + 0xa]; cld; jmp qword ptr [rax]; 
0x0000000000186842: cld; call qword ptr [rax + 0xd]; 
0x0000000000186846: cld; call qword ptr [rax + 0xf]; 
0x0000000000186846: cld; call qword ptr [rax + 0xf]; cld; call qword ptr [rax + 0x11]; cld; jmp rax; 
0x00000000001867ee: cld; call qword ptr [rax + 4]; 
0x00000000001867ee: cld; call qword ptr [rax + 4]; cld; call qword ptr [rax]; 
0x0000000000186876: cld; call qword ptr [rax + 7]; 
0x0000000000186876: cld; call qword ptr [rax + 7]; cld; push qword ptr [rax]; or esp, edi; call qword ptr [rax]; 
0x0000000000186ef6: cld; call qword ptr [rax + rbx*2 - 4]; call rsp; 
0x00000000001871f2: cld; call qword ptr [rax + rcx*4 - 4]; jmp rsp; 
0x0000000000109f18: cld; call qword ptr [rax - 0x18]; 
0x0000000000178276: cld; call qword ptr [rax - 0x4f00037d]; test ah, bh; call rax; 
0x0000000000187576: cld; call qword ptr [rax - 0x52]; 
0x0000000000187576: cld; call qword ptr [rax - 0x52]; cld; jmp rax; 
0x00000000001782ba: cld; call qword ptr [rax - 0x67]; 
0x00000000001869e6: cld; call qword ptr [rax - 0x6f0003c9]; cmp esp, edi; jmp qword ptr [rax]; 
0x0000000000187256: cld; call qword ptr [rax - 0x75]; 
0x0000000000187256: cld; call qword ptr [rax - 0x75]; cld; jmp rax; 
0x000000000017828e: cld; call qword ptr [rax - 0x76]; 
0x000000000018707e: cld; call qword ptr [rax - 0x79]; 
0x000000000018707e: cld; call qword ptr [rax - 0x79]; cld; jmp rax; 
0x000000000018724e: cld; call qword ptr [rax - 0x7b]; 
0x000000000017826e: cld; call qword ptr [rax - 0x7f]; 
0x0000000000186d06: cld; call qword ptr [rax - 4]; jmp rsp; 
0x0000000000178266: cld; call qword ptr [rax]; 
0x000000000018682e: cld; call qword ptr [rax]; add al, 0xfc; call rax; 
0x0000000000186b36: cld; call qword ptr [rax]; and bh, ah; jmp qword ptr [rax + 0x23]; 
0x0000000000178286: cld; call qword ptr [rax]; mov ah, bh; push qword ptr [rax]; mov esp, edi; call qword ptr [rax - 0x76]; 
0x00000000001868fa: cld; call qword ptr [rax]; or ah, bh; inc dword ptr [rax]; or bh, ah; call rax; 
0x000000000018687e: cld; call qword ptr [rax]; or edi, esp; jmp rax; 
0x0000000000186ae2: cld; call qword ptr [rax]; sbb edi, esp; jmp qword ptr [rax + 0x1c]; 
0x0000000000186996: cld; call qword ptr [rax]; xor ah, bh; push rax; xor esp, edi; call rax; 
0x0000000000186abe: cld; call qword ptr [rax]; xor bh, ah; jmp rax; 
0x0000000000186cd6: cld; call qword ptr [rbp + 0x6524fffc]; cld; push qword ptr [rsp + 0x6444fffc]; cld; call rsp; 
0x00000000001876fa: cld; call qword ptr [rbp + rbp*4 - 0x52db0004]; cld; push qword ptr [rsp + rbp*4 - 0x53bb0004]; cld; call rsp; 
0x0000000000186ede: cld; call qword ptr [rbx + rbx*2 - 4]; call rsp; 
0x0000000000186eee: cld; call qword ptr [rcx + rbx*2 - 4]; call rsp; 
0x00000000001876ea: cld; call qword ptr [rdi + rbp*4 - 4]; jmp rsp; 
0x000000000018713a: cld; call qword ptr [rdx + 0x22fffc87]; xchg esp, edi; push qword ptr [rdx + 0x42fffc86]; xchg ah, bh; call rdx; 
0x0000000000186e4e: cld; call qword ptr [rdx + 0x55]; 
0x0000000000186e46: cld; call qword ptr [rdx + 0x56]; 
0x0000000000186c3e: cld; call qword ptr [rdx + 0x61]; 
0x0000000000186c3e: cld; call qword ptr [rdx + 0x61]; cld; jmp rdx; 
0x0000000000186ee6: cld; call qword ptr [rdx + rbx*2 - 4]; call rsp; 
0x0000000000187622: cld; call qword ptr [rdx - 0x50]; 
0x0000000000187622: cld; call qword ptr [rdx - 0x50]; cld; jmp rdx; 
0x000000000018712a: cld; call qword ptr [rdx - 0x77]; 
0x000000000018712a: cld; call qword ptr [rdx - 0x77]; cld; jmp rdx; 
0x0000000000187316: cld; call qword ptr [rdx - 0x7e]; 
0x0000000000186c2e: cld; call qword ptr [rdx]; 
0x0000000000187096: cld; call qword ptr [rsi + 0x26fffc8b]; mov edi, esp; push qword ptr [rsi + 0x46fffc8a]; mov bh, ah; call rsi; 
0x0000000000186b9a: cld; call qword ptr [rsi + 0x65]; 
0x0000000000186b9a: cld; call qword ptr [rsi + 0x65]; cld; jmp rsi; 
0x00000000001875be: cld; call qword ptr [rsi - 0x53]; 
0x00000000001875be: cld; call qword ptr [rsi - 0x53]; cld; jmp rsi; 
0x00000000001877ce: cld; call qword ptr [rsi - 0x5f]; 
0x00000000001870c6: cld; call qword ptr [rsi - 0x7a]; 
0x00000000001870c6: cld; call qword ptr [rsi - 0x7a]; cld; jmp rsi; 
0x0000000000186bca: cld; call qword ptr [rsi]; 
0x000000000017827e: cld; call rax; 
0x00000000001869aa: cld; call rax; cmp esp, edi; jmp qword ptr [rax + 0x2c]; 
0x000000000018705e: cld; call rax; mov bh, ah; jmp qword ptr [rax - 0x76]; 
0x0000000000187556: cld; call rax; mov cl, 0xfc; jmp qword ptr [rax - 0x4f]; 
0x0000000000186f52: cld; call rax; pop rsp; cld; call qword ptr [rax + 0x5c]; 
0x0000000000186b26: cld; call rax; sbb al, 0xfc; jmp qword ptr [rax]; 
0x000000000018776e: cld; call rax; scasb al, byte ptr [rdi]; cld; jmp qword ptr [rax - 0x52]; 
0x000000000017827e: cld; call rax; test esp, edi; push rax; xchg ah, bh; call qword ptr [rax]; 
0x0000000000187276: cld; call rax; xchg esp, edi; jmp qword ptr [rax - 0x79]; 
0x0000000000186c1e: cld; call rdx; 
0x0000000000186c1e: cld; call rdx; cld; jmp qword ptr [rdx + 0x64]; 
0x0000000000187642: cld; call rdx; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rdx - 0x54]; 
0x0000000000186bba: cld; call rsi; 
0x000000000018759e: cld; call rsi; mov al, 0xfc; jmp qword ptr [rsi - 0x50]; 
0x00000000001870a6: cld; call rsi; mov esp, edi; jmp qword ptr [rsi - 0x77]; 
0x0000000000186ce6: cld; call rsp; 
0x00000000001a7ba4: cld; cdq; add dword ptr [rax], eax; cmp byte ptr [rsi], ch; cmc; jmp qword ptr [rax]; 
0x000000000018cdc9: cld; clc; jmp rsp; 
0x00000000001ac3c9: cld; cmc; call qword ptr [rax]; 
0x00000000000b3128: cld; dec dword ptr [rax + 0x39]; ret; 
0x00000000000c419e: cld; dec dword ptr [rax - 0x77]; ret 0x19eb; 
0x00000000001326d7: cld; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret 0x9274; 
0x00000000000bd304: cld; dec dword ptr [rdi]; mov bh, 0x43; adc byte ptr [rax + rcx*4 + 0x63], al; adc cl, byte ptr [rax + 1]; ret; 
0x0000000000186b4e: cld; dec esi; pop rdi; cld; call qword ptr [rax + 0x66]; 
0x0000000000036863: cld; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000036867: cld; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000001a6db1: cld; hlt; call qword ptr [rcx]; 
0x000000000019a775: cld; in eax, dx; jmp qword ptr [rdx]; 
0x000000000018682a: cld; inc dword ptr [rax + 0x10fffc11]; add al, 0xfc; call rax; 
0x00000000001869ce: cld; inc dword ptr [rax + 0x2c]; cld; inc dword ptr [rax]; cld; jmp rax; 
0x0000000000186a52: cld; inc dword ptr [rax + 0x2d]; cld; jmp qword ptr [rax]; 
0x0000000000186ab6: cld; inc dword ptr [rax + 0x2e]; cld; jmp qword ptr [rax]; 
0x0000000000186a3a: cld; inc dword ptr [rax + 0x31]; cld; jmp qword ptr [rax]; 
0x0000000000186d86: cld; inc dword ptr [rax + 0x60]; cld; call rax; 
0x00000000001868d6: cld; inc dword ptr [rax + 0x60fffc06]; or ah, bh; call qword ptr [rax + 0xa]; 
0x00000000001868d6: cld; inc dword ptr [rax + 0x60fffc06]; or ah, bh; call qword ptr [rax + 0xa]; cld; jmp qword ptr [rax]; 
0x0000000000186856: cld; inc dword ptr [rax + 0x60fffc07]; or esp, edi; inc dword ptr [rax + 0xb]; cld; jmp qword ptr [rax]; 
0x0000000000186b6e: cld; inc dword ptr [rax + 0x63]; cld; call rax; 
0x000000000018685e: cld; inc dword ptr [rax + 0xb]; cld; jmp qword ptr [rax]; 
0x0000000000186b22: cld; inc dword ptr [rax - 0x2f0003e5]; sbb al, 0xfc; jmp qword ptr [rax]; 
0x000000000018690e: cld; inc dword ptr [rax - 0x3f000417]; in eax, dx; sti; call qword ptr [rax]; 
0x0000000000187552: cld; inc dword ptr [rax - 0x4e]; cld; call rax; 
0x0000000000187552: cld; inc dword ptr [rax - 0x4e]; cld; call rax; mov cl, 0xfc; jmp qword ptr [rax - 0x4f]; 
0x000000000018776a: cld; inc dword ptr [rax - 0x51]; cld; call rax; 
0x000000000018705a: cld; inc dword ptr [rax - 0x75]; cld; call rax; 
0x000000000018705a: cld; inc dword ptr [rax - 0x75]; cld; call rax; mov bh, ah; jmp qword ptr [rax - 0x76]; 
0x0000000000187272: cld; inc dword ptr [rax - 0x78]; cld; call rax; 
0x0000000000187272: cld; inc dword ptr [rax - 0x78]; cld; call rax; xchg esp, edi; jmp qword ptr [rax - 0x79]; 
0x0000000000186826: cld; inc dword ptr [rax - 0x7f0003f1]; adc esp, edi; call qword ptr [rax]; 
0x0000000000186826: cld; inc dword ptr [rax - 0x7f0003f1]; adc esp, edi; call qword ptr [rax]; add al, 0xfc; call rax; 
0x0000000000186822: cld; inc dword ptr [rax - 0x7f0003f3]; paddb mm7, mm7; adc byte ptr [rcx], 0xfc; call qword ptr [rax]; 
0x0000000000187482: cld; inc dword ptr [rax - 0xf000384]; jnp 0x187487; jmp qword ptr [rax + 0x7b]; 
0x0000000000186dc6: cld; inc dword ptr [rax - 0xf0003aa]; push rbp; cld; jmp qword ptr [rsi + 0x55]; 
0x0000000000186b42: cld; inc dword ptr [rax]; cld; call qword ptr [rax + 0x27]; 
0x00000000001869d2: cld; inc dword ptr [rax]; cld; jmp rax; 
0x00000000001867d6: cld; inc dword ptr [rax]; or ah, bh; jmp rax; 
0x00000000001868fe: cld; inc dword ptr [rax]; or bh, ah; call rax; 
0x00000000001869b6: cld; inc dword ptr [rax]; xor ah, bh; jmp rax; 
0x0000000000186a5a: cld; inc dword ptr [rax]; xor esp, edi; jmp rax; 
0x00000000000a1b99: cld; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000000a1a9e: cld; inc dword ptr [rbx]; pop rbx; ret; 
0x0000000000114078: cld; inc dword ptr [rcx]; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000186c1a: cld; inc dword ptr [rdx + 0x65]; cld; call rdx; 
0x0000000000186c1a: cld; inc dword ptr [rdx + 0x65]; cld; call rdx; cld; jmp qword ptr [rdx + 0x64]; 
0x000000000018763e: cld; inc dword ptr [rdx - 0x53]; cld; call rdx; 
0x0000000000187146: cld; inc dword ptr [rdx - 0x7a]; cld; call rdx; 
0x0000000000186bb6: cld; inc dword ptr [rsi + 0x62]; cld; call rsi; 
0x000000000018759a: cld; inc dword ptr [rsi - 0x4f]; cld; call rsi; 
0x000000000018759a: cld; inc dword ptr [rsi - 0x4f]; cld; call rsi; mov al, 0xfc; jmp qword ptr [rsi - 0x50]; 
0x00000000001870a2: cld; inc dword ptr [rsi - 0x76]; cld; call rsi; 
0x00000000001870a2: cld; inc dword ptr [rsi - 0x76]; cld; call rsi; mov esp, edi; jmp qword ptr [rsi - 0x77]; 
0x0000000000187706: cld; inc dword ptr [rsp + rbp*4 - 4]; call rsp; 
0x0000000000186ce2: cld; inc dword ptr [rsp - 4]; call rsp; 
0x00000000001867ea: cld; inc eax; adc esp, edi; call qword ptr [rax + 4]; 
0x00000000001867ea: cld; inc eax; adc esp, edi; call qword ptr [rax + 4]; cld; call qword ptr [rax]; 
0x0000000000186b32: cld; inc eax; and ah, bh; call qword ptr [rax]; 
0x0000000000186b32: cld; inc eax; and ah, bh; call qword ptr [rax]; and bh, ah; jmp qword ptr [rax + 0x23]; 
0x0000000000187252: cld; inc eax; mov edi, esp; call qword ptr [rax - 0x75]; 
0x0000000000187252: cld; inc eax; mov edi, esp; call qword ptr [rax - 0x75]; cld; jmp rax; 
0x0000000000186d66: cld; inc eax; movsxd rdi, esp; call qword ptr [rax + 0x63]; 
0x0000000000186d66: cld; inc eax; movsxd rdi, esp; call qword ptr [rax + 0x63]; cld; jmp rax; 
0x00000000001867e6: cld; inc eax; paddb mm7, mm7; rcl byte ptr [rcx], 0xfc; call qword ptr [rax + 4]; 
0x0000000000186ade: cld; inc eax; sbb esp, edi; call qword ptr [rax]; 
0x0000000000186ade: cld; inc eax; sbb esp, edi; call qword ptr [rax]; sbb edi, esp; jmp qword ptr [rax + 0x1c]; 
0x0000000000187572: cld; inc eax; scasb al, byte ptr [rdi]; cld; call qword ptr [rax - 0x52]; 
0x000000000018778a: cld; inc eax; stosd dword ptr [rdi], eax; cld; jmp qword ptr [rax - 0x5f]; 
0x0000000000186a92: cld; inc eax; sub al, 0xfc; call qword ptr [rax + 0x70fffc2e]; xor ah, bh; jmp qword ptr [rax + 0x32]; 
0x000000000018707a: cld; inc eax; xchg esp, edi; call qword ptr [rax - 0x79]; 
0x000000000018707a: cld; inc eax; xchg esp, edi; call qword ptr [rax - 0x79]; cld; jmp rax; 
0x000000000018761e: cld; inc edx; mov al, 0xfc; call qword ptr [rdx - 0x50]; 
0x000000000018761e: cld; inc edx; mov al, 0xfc; call qword ptr [rdx - 0x50]; cld; jmp rdx; 
0x0000000000187126: cld; inc edx; mov esp, edi; call qword ptr [rdx - 0x77]; 
0x0000000000187126: cld; inc edx; mov esp, edi; call qword ptr [rdx - 0x77]; cld; jmp rdx; 
0x0000000000186e4a: cld; inc edx; push rbp; cld; call qword ptr [rdx + 0x55]; 
0x0000000000186b96: cld; inc esi; cld; call qword ptr [rsi + 0x65]; 
0x0000000000186b96: cld; inc esi; cld; call qword ptr [rsi + 0x65]; cld; jmp rsi; 
0x00000000001875ba: cld; inc esi; lodsd eax, dword ptr [rsi]; cld; call qword ptr [rsi - 0x53]; 
0x00000000001870c2: cld; inc esi; xchg ah, bh; call qword ptr [rsi - 0x7a]; 
0x00000000001870c2: cld; inc esi; xchg ah, bh; call qword ptr [rsi - 0x7a]; cld; jmp rsi; 
0x00000000001871ee: cld; inc esp; mov ah, bh; call qword ptr [rax + rcx*4 - 4]; jmp rsp; 
0x00000000001876e6: cld; inc esp; scasd eax, dword ptr [rdi]; cld; call qword ptr [rdi + rbp*4 - 4]; jmp rsp; 
0x00000000001868ca: cld; jmp qword ptr [rax + 0x10]; 
0x0000000000186ae6: cld; jmp qword ptr [rax + 0x1c]; 
0x0000000000186b3a: cld; jmp qword ptr [rax + 0x23]; 
0x00000000001869ae: cld; jmp qword ptr [rax + 0x2c]; 
0x0000000000186a36: cld; jmp qword ptr [rax + 0x2f]; 
0x0000000000186a9e: cld; jmp qword ptr [rax + 0x32]; 
0x0000000000186a02: cld; jmp qword ptr [rax + 0x35]; 
0x0000000000186a06: cld; jmp qword ptr [rax + 0x37]; 
0x0000000000186a0a: cld; jmp qword ptr [rax + 0x39]; 
0x0000000000186b76: cld; jmp qword ptr [rax + 0x62]; 
0x000000000018748a: cld; jmp qword ptr [rax + 0x7b]; 
0x00000000001868c2: cld; jmp qword ptr [rax + 0xc]; 
0x00000000001868c6: cld; jmp qword ptr [rax + 0xe]; 
0x00000000001868f2: cld; jmp qword ptr [rax + 4]; 
0x00000000001868da: cld; jmp qword ptr [rax + 8]; 
0x000000000018685a: cld; jmp qword ptr [rax + 9]; 
0x000000000018694e: cld; jmp qword ptr [rax - 0x15]; 
0x000000000018755a: cld; jmp qword ptr [rax - 0x4f]; 
0x0000000000187772: cld; jmp qword ptr [rax - 0x52]; 
0x00000000001782de: cld; jmp qword ptr [rax - 0x59]; 
0x00000000001782d6: cld; jmp qword ptr [rax - 0x5d]; 
0x000000000018778e: cld; jmp qword ptr [rax - 0x5f]; 
0x0000000000187062: cld; jmp qword ptr [rax - 0x76]; 
0x000000000018727a: cld; jmp qword ptr [rax - 0x79]; 
0x00000000001782a6: cld; jmp qword ptr [rax]; 
0x000000000019e18a: cld; jmp qword ptr [rbx + 0x17]; 
0x000000000019f8d2: cld; jmp qword ptr [rbx]; 
0x0000000000199baa: cld; jmp qword ptr [rcx]; 
0x0000000000186c22: cld; jmp qword ptr [rdx + 0x64]; 
0x0000000000187646: cld; jmp qword ptr [rdx - 0x54]; 
0x000000000018781e: cld; jmp qword ptr [rdx - 0x59]; 
0x0000000000187826: cld; jmp qword ptr [rdx - 0x5a]; 
0x000000000018782e: cld; jmp qword ptr [rdx - 0x5b]; 
0x0000000000187836: cld; jmp qword ptr [rdx - 0x5c]; 
0x000000000018783e: cld; jmp qword ptr [rdx - 0x5d]; 
0x0000000000186c12: cld; jmp qword ptr [rdx]; 
0x000000000006d041: cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000186dce: cld; jmp qword ptr [rsi + 0x55]; 
0x0000000000186bbe: cld; jmp qword ptr [rsi + 0x61]; 
0x0000000000070011: cld; jmp qword ptr [rsi + 0x66]; 
0x00000000000c3548: cld; jmp qword ptr [rsi + 0xf]; 
0x00000000001875a2: cld; jmp qword ptr [rsi - 0x50]; 
0x00000000001870aa: cld; jmp qword ptr [rsi - 0x77]; 
0x0000000000124627: cld; jmp qword ptr [rsi - 0x7d]; 
0x0000000000186bae: cld; jmp qword ptr [rsi]; 
0x00000000001782b6: cld; jmp rax; 
0x0000000000186c42: cld; jmp rdx; 
0x0000000000186b9e: cld; jmp rsi; 
0x0000000000186d0a: cld; jmp rsp; 
0x000000000018730a: cld; lcall ptr [rbx + rdi*2 + 0x7b2cfffc]; cld; call rdx; 
0x0000000000186f4a: cld; lcall ptr [rdx + 0x2afffc55]; push rbp; cld; call rax; 
0x000000000012102f: cld; lea esi, dword ptr [rax + rdx + 0x28]; call qword ptr [rcx + 0x30]; 
0x000000000018698e: cld; ljmp ptr [rax + 0x2c]; cld; push qword ptr [rax]; cld; call qword ptr [rax]; 
0x000000000018730e: cld; ljmp ptr [rbx + rdi*2]; cld; call rdx; 
0x0000000000186f4e: cld; ljmp ptr [rdx]; push rbp; cld; call rax; 
0x0000000000186eca: cld; ljmp ptr [rsi + 0x3efffc55]; push rbp; cld; jmp rsp; 
0x0000000000187306: cld; ljmp ptr [rsp + rdi*2]; cld; lcall ptr [rbx + rdi*2 + 0x7b2cfffc]; cld; call rdx; 
0x00000000001449c2: cld; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144bc5: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144dc5: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144fc5: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000037f0c: cld; mov eax, 0x81; syscall; 
0x00000000000323d4: cld; mov eax, 3; syscall; 
0x00000000000f7f57: cld; mov eax, edx; syscall; 
0x0000000000199ba4: cld; mov ecx, 0xb5180000; cld; jmp qword ptr [rcx]; 
0x00000000001443fa: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001445da: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001447ba: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014499a: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001445be: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014479e: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014497e: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001445f6: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c636: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001447d6: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c5b6: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001449b6: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c536: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144416: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c6b6: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000005ec45: cld; mov r13, r12; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000000967c9: cld; mov rax, rdi; ret; 
0x0000000000039dfc: cld; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000019b26c: cld; out dx, al; jmp qword ptr [rdx]; 
0x00000000001a50a4: cld; outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; or byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x000000000019492c: cld; outsb dx, byte ptr [rsi]; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000a38a3: cld; pop rbx; ret; 
0x0000000000186ada: cld; push qword ptr [rax + 0x18]; cld; inc eax; sbb esp, edi; call qword ptr [rax]; 
0x0000000000186b2e: cld; push qword ptr [rax + 0x1f]; cld; inc eax; and ah, bh; call qword ptr [rax]; 
0x0000000000186ab2: cld; push qword ptr [rax + 0x2c]; cld; inc dword ptr [rax + 0x2e]; cld; jmp qword ptr [rax]; 
0x0000000000186a9a: cld; push qword ptr [rax + 0x30]; cld; jmp qword ptr [rax + 0x32]; 
0x0000000000186a1a: cld; push qword ptr [rax + 0x31]; cld; call qword ptr [rax + 0x33]; 
0x0000000000186b6a: cld; push qword ptr [rax + 0x40fffc63]; movsxd rdi, esp; call rax; 
0x000000000018726e: cld; push qword ptr [rax + 0x40fffc88]; mov ah, bh; call rax; 
0x0000000000187056: cld; push qword ptr [rax + 0x40fffc8b]; mov edi, esp; call rax; 
0x0000000000187766: cld; push qword ptr [rax + 0x40fffcaf]; scasd eax, dword ptr [rdi]; cld; call rax; 
0x00000000001874c2: cld; push qword ptr [rax + 0x7c]; cld; jmp rax; 
0x00000000001872be: cld; push qword ptr [rax + 0x7d]; cld; jmp rax; 
0x000000000018683e: cld; push qword ptr [rax + 0xb]; cld; call qword ptr [rax + 0xd]; 
0x0000000000186b3e: cld; push qword ptr [rax + 0xfffc24]; cld; call qword ptr [rax + 0x27]; 
0x0000000000186872: cld; push qword ptr [rax + 5]; cld; call qword ptr [rax + 7]; 
0x000000000018774e: cld; push qword ptr [rax - 0x55]; cld; jmp rax; 
0x00000000001877c6: cld; push qword ptr [rax - 0x5e]; cld; jmp rax; 
0x00000000001879ca: cld; push qword ptr [rax - 0x5f]; cld; call rax; 
0x00000000001782b2: cld; push qword ptr [rax - 0x6a]; cld; jmp rax; 
0x00000000001868ba: cld; push qword ptr [rax - 0x6f0003f8]; or bh, ah; jmp qword ptr [rax + 0xc]; 
0x0000000000186836: cld; push qword ptr [rax - 0x6f0003f9]; or esp, edi; push qword ptr [rax + 0xb]; cld; call qword ptr [rax + 0xd]; 
0x00000000001782da: cld; push qword ptr [rax - 0x72]; cld; jmp qword ptr [rax - 0x59]; 
0x0000000000178272: cld; push qword ptr [rax - 0x7e]; cld; call qword ptr [rax - 0x4f00037d]; test ah, bh; call rax; 
0x00000000001868ae: cld; push qword ptr [rax]; add edi, esp; push rax; add al, 0xfc; call rax; 
0x0000000000186992: cld; push qword ptr [rax]; cld; call qword ptr [rax]; 
0x0000000000186d62: cld; push qword ptr [rax]; cld; inc eax; movsxd rdi, esp; call qword ptr [rax + 0x63]; 
0x0000000000187076: cld; push qword ptr [rax]; mov ah, bh; inc eax; xchg esp, edi; call qword ptr [rax - 0x79]; 
0x000000000017828a: cld; push qword ptr [rax]; mov esp, edi; call qword ptr [rax - 0x76]; 
0x000000000018687a: cld; push qword ptr [rax]; or esp, edi; call qword ptr [rax]; 
0x000000000018687a: cld; push qword ptr [rax]; or esp, edi; call qword ptr [rax]; or edi, esp; jmp rax; 
0x0000000000186b1e: cld; push qword ptr [rax]; sbb bh, ah; inc dword ptr [rax - 0x2f0003e5]; sbb al, 0xfc; jmp qword ptr [rax]; 
0x0000000000186c0e: cld; push qword ptr [rdx + 0x22fffc5f]; cld; push qword ptr [rdx + 0x42fffc65]; cld; call rdx; 
0x0000000000186c16: cld; push qword ptr [rdx + 0x42fffc65]; cld; call rdx; 
0x0000000000187142: cld; push qword ptr [rdx + 0x42fffc86]; xchg ah, bh; call rdx; 
0x000000000018763a: cld; push qword ptr [rdx + 0x42fffcad]; lodsd eax, dword ptr [rsi]; cld; call rdx; 
0x0000000000186e3e: cld; push qword ptr [rdx + 0x57]; cld; jmp rdx; 
0x00000000000d0242: cld; push qword ptr [rdx + rcx + 0x49]; movsxd rdi, esp; mov eax, 3; syscall; 
0x0000000000187816: cld; push qword ptr [rdx - 0x58]; cld; jmp rdx; 
0x0000000000187122: cld; push qword ptr [rdx]; mov bh, ah; inc edx; mov esp, edi; call qword ptr [rdx - 0x77]; 
0x000000000018761a: cld; push qword ptr [rdx]; mov cl, 0xfc; inc edx; mov al, 0xfc; call qword ptr [rdx - 0x50]; 
0x000000000018758e: cld; push qword ptr [rsi + 0x26fffcab]; mov dl, 0xfc; push qword ptr [rsi + 0x46fffcb1]; mov cl, 0xfc; call rsi; 
0x000000000018709e: cld; push qword ptr [rsi + 0x46fffc8a]; mov bh, ah; call rsi; 
0x0000000000187596: cld; push qword ptr [rsi + 0x46fffcb1]; mov cl, 0xfc; call rsi; 
0x0000000000186b92: cld; push qword ptr [rsi]; cld; inc esi; cld; call qword ptr [rsi + 0x65]; 
0x00000000001870be: cld; push qword ptr [rsi]; xchg esp, edi; inc esi; xchg ah, bh; call qword ptr [rsi - 0x7a]; 
0x0000000000186cde: cld; push qword ptr [rsp + 0x6444fffc]; cld; call rsp; 
0x0000000000187702: cld; push qword ptr [rsp + rbp*4 - 0x53bb0004]; cld; call rsp; 
0x00000000001868b2: cld; push rax; add al, 0xfc; call rax; 
0x0000000000187486: cld; push rax; jnp 0x187487; jmp qword ptr [rax + 0x7b]; 
0x000000000018689a: cld; push rax; or ah, bh; call rax; 
0x00000000001874ce: cld; push rax; pop rbp; cld; call qword ptr [rax]; 
0x0000000000186dca: cld; push rax; push rbp; cld; jmp qword ptr [rsi + 0x55]; 
0x0000000000178282: cld; push rax; xchg ah, bh; call qword ptr [rax]; 
0x000000000018699a: cld; push rax; xor esp, edi; call rax; 
0x0000000000187812: cld; push rdx; test al, 0xfc; push qword ptr [rdx - 0x58]; cld; jmp rdx; 
0x0000000000188a5c: cld; ret 0; 
0x0000000000039e02: cld; ret; 
0x00000000001ab4a4: cld; rol byte ptr [rcx], cl; add al, bl; in eax, 0xf5; call qword ptr [rax]; 
0x000000000019d101: cld; stc; call qword ptr [rax]; 
0x000000000019d119: cld; stc; call qword ptr [rsi + 0x16]; 
0x000000000018d511: cld; stc; jmp rsp; 
0x00000000001a0aa4: cld; sub byte ptr [rcx], al; add byte ptr [rax - 0x33], ch; int1; jmp qword ptr [rax]; 
0x0000000000173f36: cld; test al, 0x97; xchg eax, esp; ret; 
0x000000000019b9a4: cld; xlatb; add byte ptr [rax], al; xor rbp, rsi; call qword ptr [rsi]; 
0x000000000003cdd5: cli; adc byte ptr [rcx], ch; ret 0xc269; 
0x00000000000b14ec: cli; adc cl, byte ptr [rax + 0x29]; ret 0x6948; 
0x00000000000b1471: cli; adc cl, byte ptr [rax + 0x29]; ret 0x8948; 
0x0000000000118f9b: cli; add al, 0x48; add edx, 1; syscall; 
0x00000000000cb601: cli; add al, 0x74; adc ecx, dword ptr [rax + 0x63]; sar byte ptr [rax + 0x1c], cl; syscall; 
0x00000000000efcb1: cli; add al, 0x77; or esp, dword ptr [rsi - 0x77]; push rsi; xor ax, ax; ret; 
0x0000000000133411: cli; add al, 0xf; test byte ptr [rcx - 0x7d000000], bl; ret 0x8380; 
0x0000000000110cec: cli; add al, 0xf; xchg eax, esi; ret; 
0x000000000019dc0d: cli; add byte ptr [rax], al; jo 0x19db92; cld; jmp qword ptr [rax]; 
0x00000000000c1cc9: cli; add byte ptr [rcx - 0xcfd8130], cl; ret; 
0x00000000000b22f9: cli; add ch, byte ptr [rcx]; ret 0x48d; 
0x00000000000b89ca: cli; add cl, byte ptr [rax + 0x29]; ret 0x8948; 
0x000000000003e87e: cli; add cl, byte ptr [rax + 0x29]; ret 0x8d48; 
0x000000000005fa70: cli; add cl, byte ptr [rcx + rcx*4 - 0x2e]; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x00000000000d31e0: cli; add cl, byte ptr [rdi]; test byte ptr [rcx], al; add eax, 0x438d0000; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000013340c: cli; add dh, byte ptr [rbp + rdx - 0x7d]; cli; add al, 0xf; test byte ptr [rcx - 0x7d000000], bl; ret 0x8380; 
0x00000000000285e3: cli; add dword ptr [rax + 0x19], ecx; ror byte ptr [rax - 0x7d], cl; ret 0x4806; 
0x000000000012d07b: cli; add dword ptr [rcx + 0x48], esi; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000051f0b: cli; add dword ptr [rcx], ebx; jmp qword ptr [rsi - 0x3f]; 
0x00000000000d4542: cli; add dword ptr [rdi], ecx; xchg dword ptr [rsi + rdi*8 - 1], edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000b0954: cli; add ebp, dword ptr [rcx]; ret 0x48d; 
0x000000000012d0a4: cli; and byte ptr [rax - 0x77], cl; adc al, 0x24; call qword ptr [rax + 8]; 
0x00000000000f3210: cli; and byte ptr [rsp + rbp*8 + 0x41], dh; mov byte ptr [rcx - 1], 0; ret; 
0x000000000011b1b4: cli; and esi, dword ptr [rax + rdx - 0x80]; cli; sub al, 0x74; or ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000075cbb: cli; call qword ptr [rax + 0x70]; 
0x000000000017abf6: cli; call qword ptr [rax - 0x70]; 
0x000000000017abce: cli; call qword ptr [rax - 0x71]; 
0x000000000017abc2: cli; call qword ptr [rax]; 
0x000000000017abea: cli; call qword ptr [rax]; nop; cli; jmp qword ptr [rax]; 
0x000000000018d67a: cli; call qword ptr [rbx + rdi*4 + 0x2bc40002]; cli; jmp rsp; 
0x0000000000179c70: cli; call qword ptr [rcx - 0x56000a00]; add bl, bh; inc ebx; add dh, bh; jmp rdi; 
0x000000000018da3a: cli; call qword ptr [rdx + rdx*8 + 0x70a40002]; cli; jmp rsp; 
0x00000000000857ba: cli; call rax; 
0x00000000001b6442: cli; call rcx; 
0x000000000018d7b2: cli; call rsp; 
0x000000000018d7b2: cli; call rsp; ret 2; 
0x00000000000804e2: cli; cdq; sti; jmp qword ptr [rsi + 0x2e]; 
0x00000000001ac281: cli; cmc; jmp qword ptr [rax]; 
0x0000000000037ba2: cli; cmp byte ptr fs:[rax], al; ret; 
0x0000000000097484: cli; cmp eax, 0x8348f075; mov dword ptr [rcx], 0xd284c031; cmovne rax, rdi; ret; 
0x00000000000ed92b: cli; dec dword ptr [rax + 0x39]; ret; 
0x00000000000721f9: cli; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000018dc6a: cli; dec dword ptr [rcx - 0x3efefffe]; cli; call rsp; 
0x0000000000032a99: cli; dec dword ptr [rdi]; xchg eax, ebp; ret 0xd284; 
0x000000000017c0ae: cli; dec esp; mov dh, 0xfa; jmp rsp; 
0x000000000018d7ca: cli; dec esp; ret; 
0x000000000019a6e5: cli; in eax, dx; jmp qword ptr [rdx]; 
0x000000000017abe6: cli; inc dword ptr [rax]; nop; cli; call qword ptr [rax]; 
0x000000000018dbba: cli; inc dword ptr [rbp + rbx*8 - 0x44dbfffe]; cli; jmp rsp; 
0x00000000000e47c4: cli; inc dword ptr [rbx + rcx*4 + 0x65]; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000018d7aa: cli; inc dword ptr [rdx + rax*8 + 0x41640002]; cli; call rsp; 
0x000000000018ddca: cli; inc dword ptr [rdx + rbp*8 - 0x1c6bfffe]; cli; ljmp ptr [rdx + rbp*8 - 0x1bcbfffe]; cli; call rsp; 
0x000000000018d9fa: cli; inc esp; rol dword ptr [rdx], 1; add byte ptr [rsi + rbp*2], ah; cli; jmp rsp; 
0x000000000017abee: cli; jmp qword ptr [rax]; 
0x0000000000192b52: cli; jmp qword ptr [rcx]; 
0x000000000019df4a: cli; jmp qword ptr [rdi + 0x2b]; 
0x000000000007613f: cli; jmp qword ptr [rsi + 0x66]; 
0x000000000008abe8: cli; jmp qword ptr [rsi + 0xf]; 
0x000000000011adcf: cli; jmp qword ptr [rsi - 0x77]; 
0x000000000017abb6: cli; jmp rax; 
0x0000000000034c76: cli; jmp rdx; 
0x000000000017c0b2: cli; jmp rsp; 
0x00000000000c42ea: cli; jnp 0xc42fc; xchg eax, esp; ret 0xb60f; 
0x00000000000c451a: cli; jnp 0xc452c; xchg eax, esp; ret 0xb60f; 
0x00000000000c4786: cli; jnp 0xc4798; xchg eax, esp; ret 0xb60f; 
0x000000000018d60a: cli; lcall ptr [rbp + rsi*4 + 0x24100002]; cli; jmp rsp; 
0x000000000018d662: cli; lcall ptr [rdx + rdi*4 + 0x26440002]; cli; jmp rsp; 
0x000000000018d65a: cli; ljmp ptr [rax + rdi*4 + 2]; add byte ptr [rbp - 6], dl; lcall ptr [rdx + rdi*4 + 0x26440002]; cli; jmp rsp; 
0x000000000018ddd2: cli; ljmp ptr [rdx + rbp*8 - 0x1bcbfffe]; cli; call rsp; 
0x000000000017c0a6: cli; ljmp ptr [rsi + rsi*4 - 0x49430006]; cli; dec esp; mov dh, 0xfa; jmp rsp; 
0x000000000018db92: cli; ljmp ptr [rsp + rbx*8 - 0x481bfffe]; cli; call rsp; 
0x0000000000144dc8: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000003c871: cli; mov eax, edi; sar edx, 0x1f; xor eax, edx; sub eax, edx; ret; 
0x000000000011b11d: cli; mov eax, r12d; syscall; 
0x0000000000165d16: cli; mov eax, r13d; syscall; 
0x000000000010aa8a: cli; mov ebx, esi; xor edi, edi; lea rsi, qword ptr [rsp - 0x18]; mov eax, 0x83; syscall; 
0x0000000000144dc2: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000117fe1: cli; mov qword ptr [rdx + 8], rax; mov rax, qword ptr [rsi + 8]; mov qword ptr [rdx + 0x10], rax; xor eax, eax; ret; 
0x0000000000096827: cli; mov rax, rdi; ret; 
0x000000000003c882: cli; mov rax, rdi; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x0000000000110e2b: cli; mov rdi, r12; call rax; 
0x000000000008bf88: cli; movzx edx, dl; sub eax, edx; ret; 
0x00000000001383c6: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000296d3: cli; or byte ptr [rdi], 0x94; ret 0xb60f; 
0x00000000000b015d: cli; or cl, byte ptr [rax + 0x29]; ret 0x5589; 
0x00000000000f9e19: cli; or dword ptr [rdi], ecx; xchg dword ptr [rdi], ebx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000f9859: cli; or dword ptr [rdi], ecx; xchg dword ptr [rdi], edx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a7823: cli; or dword ptr [rdi], ecx; xchg ecx, esi; add al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000acc23: cli; or dword ptr [rdi], ecx; xchg edi, esp; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000019d041: cli; out dx, al; call qword ptr [rcx]; 
0x000000000011fa47: cli; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000000fccf7: cli; push qword ptr [rbp + rax - 0x7d]; ret 0x8901; 
0x000000000018dcf2: cli; push qword ptr [rbp - 0x29ebfffe]; cli; jmp rsp; 
0x000000000011b117: cli; push qword ptr [rbx + rbx + 0x48]; movsxd rdi, edx; mov eax, r12d; syscall; 
0x0000000000165d10: cli; push qword ptr [rbx + rbx + 0x48]; movsxd rdi, edx; mov eax, r13d; syscall; 
0x00000000000fa6b1: cli; push qword ptr [rbx + rcx - 0xd]; ret; 
0x000000000018de32: cli; push qword ptr [rbx + rcx*8 - 0x141bffff]; cli; jmp rsp; 
0x000000000018db0a: cli; push qword ptr [rcx + rbx*8 - 0x56cbfffe]; cli; jmp rsp; 
0x00000000000c2b72: cli; push qword ptr [rdx + rbx*8 + 0x49]; movsxd rdi, esp; mov eax, 3; syscall; 
0x000000000006ebc2: cli; push qword ptr [rdx + rcx + 0x48]; mov eax, edx; pop rbx; ret; 
0x00000000000fcaa8: cli; push qword ptr [rsi + rax - 0x7d]; ret 0x6601; 
0x00000000001aaa9c: cli; push rax; cmc; jmp qword ptr [rdx]; 
0x00000000000b148f: cli; ret 0x10; 
0x0000000000023862: cli; ret; 
0x0000000000055fbe: cli; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x00000000000321f2: cli; sar dh, cl; jmp qword ptr [rsi + 0x2e]; 
0x0000000000107a7b: cli; setae al; ret; 
0x0000000000186979: cli; sti; call qword ptr [rax - 5]; 
0x00000000000c4781: cli; sub al, 0x74; cmp eax, dword ptr [rax - 0x6bf08406]; ret 0xb60f; 
0x000000000011b1b9: cli; sub al, 0x74; or ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000c42e1: cli; sub al, 0xf; test bh, dh; add dword ptr [rax], eax; add byte ptr [rax - 0x6bf08406], al; ret 0xb60f; 
0x0000000000173a8a: cli; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x0000000000088658: cli; xor byte ptr [rbp + rcx*4 + 0x48], al; rol byte ptr [rcx + 0xf], 1; xchg eax, esp; ret 0x8341; 
0x000000000012ced6: cli; xor eax, eax; mov dword ptr [rsp], 2; mov rdi, rsp; call rdx; 
0x000000000019d78d: cmc; add byte ptr [rax], al; adc byte ptr [rdi - 0x11], ah; jmp qword ptr [rsi]; 
0x000000000013c938: cmc; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000005356f: cmc; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001ad6dd: cmc; add dword ptr [rax], eax; sbb byte ptr [rcx], 0xf6; call rdi; 
0x0000000000121d4a: cmc; add rbp, qword ptr [rbx + 0x50]; sub edx, r14d; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x0000000000165c6a: cmc; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001aac62: cmc; call qword ptr [rax + 2]; 
0x000000000017a00e: cmc; call qword ptr [rax - 0x59]; 
0x000000000017a00e: cmc; call qword ptr [rax - 0x59]; cmc; call rbx; 
0x0000000000179f26: cmc; call qword ptr [rax - 0x5a]; 
0x0000000000179f26: cmc; call qword ptr [rax - 0x5a]; cmc; call rbx; 
0x0000000000179f4e: cmc; call qword ptr [rax]; 
0x0000000000179f4e: cmc; call qword ptr [rax]; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call rbx; 
0x00000000001ab6da: cmc; call qword ptr [rbx]; 
0x00000000001a78ca: cmc; call qword ptr [rcx]; 
0x00000000001a74c2: cmc; call qword ptr [rdi + 1]; 
0x000000000018af82: cmc; call qword ptr [rdi + rax*8 - 0x405bffff]; cmc; call rsp; 
0x00000000001abb4a: cmc; call qword ptr [rdi]; 
0x00000000001a87d2: cmc; call qword ptr [rdx]; 
0x00000000001aa022: cmc; call qword ptr [rsi + 6]; 
0x00000000001a7e92: cmc; call qword ptr [rsi]; 
0x0000000000179ec2: cmc; call rbx; 
0x000000000017a00a: cmc; call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax - 0x59]; 
0x0000000000179f22: cmc; call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax - 0x5a]; 
0x0000000000179f4a: cmc; call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax]; 
0x0000000000179f8e: cmc; call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp qword ptr [rax]; 
0x00000000001a9432: cmc; call rcx; 
0x000000000017a172: cmc; call rsp; 
0x000000000018af1a: cmc; call rsp; ret; 
0x0000000000092b9e: cmc; clc; dec dword ptr [rax - 0x73]; add eax, 0xfffffad8; add rsp, 8; ret; 
0x000000000017a094: cmc; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp rcx; 
0x0000000000131a59: cmc; dec dword ptr [rax - 0x77]; ret 0x854d; 
0x000000000018af02: cmc; dec esp; ret 1; 
0x000000000018ae91: cmc; hlt; inc dword ptr [rbp + rdi*4 - 0x2abffff]; hlt; call rsp; 
0x00000000000ab40a: cmc; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000198e39: cmc; in eax, dx; jmp qword ptr [rbx]; 
0x0000000000198e19: cmc; in eax, dx; jmp qword ptr [rcx]; 
0x000000000017a002: cmc; inc dword ptr [rax - 0x59]; cmc; call rbx; 
0x000000000010b546: cmc; inc dword ptr [rbp - 0x7b]; in al, 0x89; ret 0x87e; 
0x000000000018af12: cmc; inc dword ptr [rbx + rax*8 + 0x49940001]; cmc; call rsp; 
0x0000000000179f3a: cmc; inc eax; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp rax; 
0x000000000017a086: cmc; inc eax; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp rax; 
0x00000000001aba4a: cmc; jmp qword ptr [rax + 1]; 
0x0000000000179f92: cmc; jmp qword ptr [rax]; 
0x00000000001aa16a: cmc; jmp qword ptr [rbx + 2]; 
0x00000000001aae82: cmc; jmp qword ptr [rbx]; 
0x00000000001ab01a: cmc; jmp qword ptr [rcx + 0x4000001]; 
0x00000000001a72ea: cmc; jmp qword ptr [rcx]; 
0x00000000001a7102: cmc; jmp qword ptr [rdi + 1]; 
0x00000000001aa262: cmc; jmp qword ptr [rdi + 3]; 
0x00000000001aa94a: cmc; jmp qword ptr [rdi]; 
0x000000000017a1de: cmc; jmp qword ptr [rdx - 0x5a]; 
0x00000000001a75da: cmc; jmp qword ptr [rdx]; 
0x00000000000cb79f: cmc; jmp qword ptr [rsi + 0x2e]; 
0x00000000001a7532: cmc; jmp qword ptr [rsi]; 
0x0000000000179f3e: cmc; jmp rax; 
0x00000000001a832a: cmc; jmp rbx; 
0x000000000017a096: cmc; jmp rcx; 
0x00000000001a844a: cmc; jmp rdi; 
0x000000000018affa: cmc; jmp rsp; 
0x0000000000179f36: cmc; ljmp ptr [rax - 0x3f000a5a]; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp rax; 
0x000000000017a16e: cmc; ljmp ptr [rcx]; test al, 0xf5; call rsp; 
0x000000000017a1da: cmc; ljmp ptr [rcx]; test al, 0xf5; jmp qword ptr [rdx - 0x5a]; 
0x000000000017a16a: cmc; ljmp ptr [rcx]; test al, 0xf5; ljmp ptr [rcx]; test al, 0xf5; call rsp; 
0x000000000017a1d6: cmc; ljmp ptr [rcx]; test al, 0xf5; ljmp ptr [rcx]; test al, 0xf5; jmp qword ptr [rdx - 0x5a]; 
0x00000000001767c9: cmc; mov ch, 0xab; ret; 
0x000000000009cd67: cmc; mov ch, 0xd; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000014c5ba: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014464e: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x000000000011c461: cmc; mov eax, 0x81; syscall; 
0x000000000014c5b3: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001447b7: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001447d3: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000004a718: cmc; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000037f09: cmc; movsxd rdi, r12d; mov eax, 0x81; syscall; 
0x0000000000163663: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000000825e5: cmc; or al, byte ptr [rax]; add al, ch; xchg eax, edx; mov al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000006ed76: cmc; pop rbp; pop r12; pop r13; ret; 
0x0000000000073881: cmc; pop rbp; pop r12; ret; 
0x0000000000173677: cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000179f42: cmc; push rax; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x000000000017a092: cmc; push rbp; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp rcx; 
0x000000000007b978: cmc; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x60]; 
0x0000000000163667: cmc; sub eax, edx; ret; 
0x00000000001a141c: cmc; xchg ecx, esi; jmp qword ptr [rdx]; 
0x0000000000175e05: cmc; xlatb; ret 0x4e27; 
0x0000000000093e78: cmova ebx, eax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000f23db: cmova edx, dword ptr [rax + 0x18]; mov eax, 0x65; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x000000000003cd14: cmova edx, eax; xor eax, eax; mov qword ptr [rdi + 8], rdx; ret; 
0x00000000000ed0f8: cmova edx, ecx; mov eax, edx; ret; 
0x00000000000b15cb: cmova esi, eax; imul esi, edx; add eax, esi; ret; 
0x00000000000b15ca: cmova esi, r8d; imul esi, edx; add eax, esi; ret; 
0x00000000000f23da: cmova r10, qword ptr [rax + 0x18]; mov eax, 0x65; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x0000000000093e77: cmova rbx, rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000003cd13: cmova rdx, r8; xor eax, eax; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000007d089: cmovae eax, dword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000075870: cmovae eax, dword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000004971c: cmovae eax, esi; pop rbx; ret; 
0x00000000000497f8: cmovae eax, esi; ret; 
0x000000000007d088: cmovae rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000007586f: cmovae rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000004971b: cmovae rax, rsi; pop rbx; ret; 
0x00000000000497f7: cmovae rax, rsi; ret; 
0x00000000000cb7f0: cmovbe eax, edx; ret; 
0x00000000000cb37b: cmovbe esi, ecx; mov eax, ecx; syscall; 
0x00000000000cb37a: cmovbe rsi, r9; mov eax, ecx; syscall; 
0x00000000000cce10: cmove eax, dword ptr [rbp - 0xa8]; mov rdi, rax; call rbx; 
0x000000000007416b: cmove eax, eax; mov dword ptr [rbx + 0x74], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000a376d: cmove eax, ecx; ret; 
0x000000000008ca78: cmove eax, edx; add eax, 1; ret; 
0x000000000010adb0: cmove eax, edx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000008b8e4: cmove eax, edx; add rsp, 8; ret; 
0x0000000000049838: cmove eax, edx; mov qword ptr [rax], rcx; mov byte ptr [rax + 8], 0; ret; 
0x000000000008aa68: cmove eax, edx; ret; 
0x0000000000079bf5: cmove eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000079bf4: cmove eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000007416a: cmove eax, r8d; mov dword ptr [rbx + 0x74], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000f0d90: cmove ebx, eax; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x0000000000096881: cmove ecx, dword ptr [rcx - 0x76b7fbb9]; clc; ret; 
0x000000000005db12: cmove edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x00000000000cb63b: cmove edx, dword ptr [rsp]; add rsp, 0x18; mov rax, rdx; ret; 
0x0000000000133521: cmove edx, eax; add rsp, 8; mov rax, rdx; ret; 
0x000000000007b42d: cmove edx, eax; mov dword ptr [rbx], edx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000012e77a: cmove edx, eax; sub rsp, -0x80; mov rax, rdx; pop rbx; ret; 
0x0000000000094556: cmove edx, ebx; mov rax, rdx; pop rbx; ret; 
0x00000000000c1142: cmove edx, ecx; mov dword ptr fs:[0x2d4], edx; mov eax, 0x3a; syscall; 
0x00000000000f7ebb: cmove edx, ecx; mov rax, rbx; mov byte ptr [rdx], 0; pop rbx; ret; 
0x00000000000cce0f: cmove rax, qword ptr [rbp - 0xa8]; mov rdi, rax; call rbx; 
0x00000000000a376c: cmove rax, rcx; ret; 
0x000000000008ca89: cmove rax, rdx; add eax, 1; ret; 
0x000000000008b8e3: cmove rax, rdx; add rsp, 8; ret; 
0x0000000000049837: cmove rax, rdx; mov qword ptr [rax], rcx; mov byte ptr [rax + 8], 0; ret; 
0x000000000008aa67: cmove rax, rdx; ret; 
0x00000000000f0d8f: cmove rbx, rax; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x00000000000cb63a: cmove rdx, qword ptr [rsp]; add rsp, 0x18; mov rax, rdx; ret; 
0x0000000000133520: cmove rdx, rax; add rsp, 8; mov rax, rdx; ret; 
0x000000000012e779: cmove rdx, rax; sub rsp, -0x80; mov rax, rdx; pop rbx; ret; 
0x0000000000094555: cmove rdx, rbx; mov rax, rdx; pop rbx; ret; 
0x00000000000f7eba: cmove rdx, rcx; mov rax, rbx; mov byte ptr [rdx], 0; pop rbx; ret; 
0x0000000000079955: cmovg eax, edx; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x0000000000079024: cmovg eax, edx; sub r14, r12; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x0000000000079954: cmovg rax, rdx; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x0000000000079023: cmovg rax, rdx; sub r14, r12; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x00000000000f9788: cmovle edx, edi; mov rdi, rbx; call 0x54480; mov rax, rbx; pop rbx; ret; 
0x0000000000083460: cmovne eax, ecx; add rsp, 8; ret; 
0x0000000000036dae: cmovne eax, ecx; mov ecx, 0xd; mov rsi, rax; mov eax, ecx; syscall; 
0x0000000000070b61: cmovne eax, ecx; ret; 
0x0000000000097491: cmovne eax, edi; ret; 
0x000000000002f91b: cmovne eax, edx; ret; 
0x00000000001296b9: cmovne eax, edx; sub rsp, -0x80; pop rbx; ret; 
0x0000000000072346: cmovne ebp, eax; mov rax, qword ptr [rsp + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000007049e: cmovne ebp, edx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x0000000000093e8f: cmovne ebx, edi; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000f0d1a: cmovne ebx, edx; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x000000000008a891: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x00000000000b1330: cmovne edx, eax; add rsp, 0x28; mov rax, rdx; ret; 
0x0000000000084f90: cmovne edx, eax; add rsp, 8; mov rax, rdx; ret; 
0x000000000002ef7e: cmovne edx, eax; lea rax, qword ptr [rip + 0x390c98]; mov byte ptr [rip + 0x390cef], dl; ret; 
0x000000000010acd4: cmovne edx, eax; mov qword ptr [rip + 0x2b7ae2], rdx; pop rbp; ret; 
0x0000000000107a74: cmovne edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000008bad3: cmovne edx, ecx; mov qword ptr [r9], rdx; add rsp, 0x100; ret; 
0x000000000008b9d4: cmovne edx, ecx; mov qword ptr [rip + 0x335316], rdx; add rsp, 0x100; ret; 
0x000000000008a895: cmovne esi, edx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x0000000000070b60: cmovne r8, rcx; ret; 
0x000000000008345f: cmovne rax, rcx; add rsp, 8; ret; 
0x0000000000036dad: cmovne rax, rcx; mov ecx, 0xd; mov rsi, rax; mov eax, ecx; syscall; 
0x0000000000097490: cmovne rax, rdi; ret; 
0x000000000002f91a: cmovne rax, rdx; ret; 
0x000000000007049d: cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x0000000000093e8e: cmovne rbx, rdi; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000f0d19: cmovne rbx, rdx; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x000000000008a890: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x00000000000b132f: cmovne rdx, rax; add rsp, 0x28; mov rax, rdx; ret; 
0x0000000000084f8f: cmovne rdx, rax; add rsp, 8; mov rax, rdx; ret; 
0x000000000010acd3: cmovne rdx, rax; mov qword ptr [rip + 0x2b7ae2], rdx; pop rbp; ret; 
0x0000000000107a73: cmovne rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000008bad2: cmovne rdx, rcx; mov qword ptr [r9], rdx; add rsp, 0x100; ret; 
0x000000000008b9d3: cmovne rdx, rcx; mov qword ptr [rip + 0x335316], rdx; add rsp, 0x100; ret; 
0x000000000008a894: cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x000000000002263c: cmovno eax, ecx; call 0xffffffffc51faf48; adc eax, 0xd89003a; ret; 
0x0000000000101f9f: cmovns eax, dword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000039a94: cmovns eax, dword ptr [rbx - 0x6d170f20]; idiv edi; dec ecx; ret; 
0x0000000000036bd2: cmovns eax, dword ptr [rsp + 0xa0]; add rsp, 0x148; ret; 
0x0000000000048779: cmovns eax, edx; pop rbx; ret; 
0x000000000002586c: cmovns eax, edx; ret; 
0x00000000000f1aa8: cmovns edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x0000000000101f9e: cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000036bd1: cmovns rax, qword ptr [rsp + 0xa0]; add rsp, 0x148; ret; 
0x00000000000886b2: cmovo eax, dword ptr [rax + 0x1f7403fe]; movsx edx, sil; mov eax, edx; ret; 
0x000000000005f3d8: cmovs eax, dword ptr [rbx + 0x149f0e0]; ret 0x8b48; 
0x0000000000101c68: cmovs eax, dword ptr [rbx + 0x1b808c4]; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000012d0b0: cmovs eax, dword ptr [rbx - 0x3fced73c]; pop rbx; pop rbp; ret; 
0x0000000000120c70: cmovs eax, dword ptr [rbx - 0x3fcef73c]; pop rbx; pop rbp; ret; 
0x00000000000f0490: cmovs eax, dword ptr [rbx - 0x76b7df10]; pop rbx; ret; 
0x00000000000967d3: cmovs eax, dword ptr [rbx - 0x76b7fd39]; clc; ret; 
0x000000000009eec5: cmovs ecx, dword ptr [rbp - 0x7af0f081]; and byte ptr [rax], cl; add byte ptr [rax], al; ret; 
0x000000000009d7f1: cmovs ecx, dword ptr [rbp - 0x7af0f081]; in al, 6; add byte ptr [rax], al; ret; 
0x000000000015e8e5: cmovs ecx, dword ptr [rbp - 0x7af0f0b6]; mov al, 1; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000009ed46: cmovs ecx, dword ptr [rbp - 0x7cb6fbb9]; call 0x7f973557; add eax, 0x997850f; add byte ptr [rax], al; ret; 
0x00000000000a0dd9: cmovs ecx, dword ptr [rcx - 0x12cff8a9]; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000a0db9: cmovs ecx, dword ptr [rcx - 0x12cff9a9]; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000a0d99: cmovs ecx, dword ptr [rcx - 0x12cffaa9]; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000009d7a9: cmovs ecx, dword ptr [rcx - 0x7cb6faa9]; call 0x7f971fc2; or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x00000000000a1b3e: cmovs esp, dword ptr [rbx + 0x34]; or dword ptr [rax + 1], 0xb8e1fff1; adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000187325: cmp ah, 0xff; cmp spl, 0xff; ret 0xfc7f; 
0x0000000000187329: cmp ah, 0xff; ret 0xfc7f; 
0x000000000013caca: cmp ah, byte ptr [rbx - 0x25]; cmp cl, byte ptr [rax + 0x63]; ror dword ptr [rax + 1], -8; sub rax, rsi; ret; 
0x000000000013caa8: cmp ah, byte ptr [rbx - 0x35]; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000013cb07: cmp ah, byte ptr [rbx - 0x37]; cmp ch, byte ptr [rcx]; ret 0xca39; 
0x000000000013ccfa: cmp ah, byte ptr [rbx - 0x38]; adc dh, byte ptr [rbx - 0x10]; movsxd rcx, ecx; lea rax, qword ptr [rdi + rcx]; sub rax, rdx; ret; 
0x0000000000139e2a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013a98a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013a16a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000013994a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000013a4aa: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000139c8a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013946a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000013a64a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x00000000001397aa: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001398e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a5e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a100: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a920: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000139c20: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000139740: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a440: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x00000000000c2446: cmp ah, byte ptr [rsi]; mov rdx, -1; cmovne rax, rdx; ret; 
0x000000000019a098: cmp al, 0; add byte ptr [rax], al; hlt; mov esi, 0x20000000; out dx, al; jmp qword ptr [rcx + 1]; 
0x00000000001a0b60: cmp al, 0; add byte ptr [rax], al; mov esp, 0x38000129; sal ecx, cl; call rsi; 
0x000000000019d260: cmp al, 0; add byte ptr [rax], al; mov esp, 0x80000f0; out dx, eax; jmp qword ptr [rbp + 4]; 
0x00000000000eaf31: cmp al, 0; add byte ptr [rax], al; syscall; 
0x00000000001b3928: cmp al, 0; add byte ptr [rax], al; test byte ptr [rdi + 2], dl; add byte ptr [rax + 0x76], dl; idiv edi; ret 0; 
0x00000000001a9428: cmp al, 0; add byte ptr [rax], al; test byte ptr [rdx + 0x69e00001], dh; cmc; call rcx; 
0x0000000000021fdd: cmp al, 0x16; call rax; 
0x000000000018fee4: cmp al, 0x1d; add byte ptr [rax], al; pop rax; and dl, ch; call qword ptr [rsi]; 
0x000000000008113e: cmp al, 0x1e; mov rax, rsi; pop rbx; ret; 
0x00000000001a03e4: cmp al, 0x22; add dword ptr [rax], eax; sub bh, al; int1; jmp qword ptr [rbp]; 
0x00000000000a8ce1: cmp al, 0x24; adc byte ptr [rdi], cl; test byte ptr [rdx], ah; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000135db7: cmp al, 0x24; add byte ptr [rbp + 0x24], dh; xor eax, eax; add rsp, 0x58; ret; 
0x0000000000135e71: cmp al, 0x24; add byte ptr [rbp + 0xa], dh; xor eax, eax; add rsp, 0x58; ret; 
0x00000000000f9d44: cmp al, 0x24; call 0x54480; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x00000000000f9d06: cmp al, 0x24; call 0xfa030; lea rax, qword ptr [rip + 0x2c7b2c]; add rsp, 0x18; ret; 
0x00000000000f5371: cmp al, 0x24; call rbx; 
0x00000000000a3a67: cmp al, 0x24; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000012a7f5: cmp al, 0x24; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x0000000000135c5c: cmp al, 0x24; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x000000000011f5d2: cmp al, 0x24; mov rsi, r14; mov r13d, 7; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000011f481: cmp al, 0x24; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000f75c1: cmp al, 0x24; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001906e4: cmp al, 0x25; add byte ptr [rax], al; sub byte ptr [rdx - 0x16], ah; call qword ptr [rdx]; 
0x000000000011ce8f: cmp al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000010eeb7: cmp al, 0x2b; add byte ptr [rbp + 0x28], dh; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x000000000010ef94: cmp al, 0x2b; add byte ptr [rdi], cl; test dword ptr [rcx + 0x64000001], edi; mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x00000000000fa264: cmp al, 0x2c; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000003039c: cmp al, 0x39; add byte ptr [rax - 0x73], cl; cmp eax, 0x38f8da; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030374: cmp al, 0x39; add byte ptr [rax - 0x73], cl; cmp eax, 0x38f902; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001a1de4: cmp al, 0x3c; add dword ptr [rax], eax; cwde; int1; call qword ptr [rbp]; 
0x0000000000174a80: cmp al, 0x46; clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000018c83c: cmp al, 0x4d; add al, byte ptr [rax]; push rax; clc; call rsp; 
0x0000000000177ea8: cmp al, 0x57; out dx, eax; lcall ptr [rsp + rdx*2 - 0x11]; jmp qword ptr [rax + 0x56]; 
0x00000000000732a0: cmp al, 0x6c; cld; jmp qword ptr [rsi + 0x66]; 
0x00000000001a51e4: cmp al, 0x70; add dword ptr [rax], eax; mov byte ptr [rcx + rdi*8], dl; call qword ptr [rax]; 
0x0000000000174628: cmp al, 0x7b; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000001a1034: cmp al, 0x80; int1; jmp qword ptr [rdx]; 
0x00000000001a6ae4: cmp al, 0x89; add dword ptr [rax], eax; or al, ah; hlt; jmp rsp; 
0x00000000000800db: cmp al, 0x89; ret 0xb48b; 
0x00000000001a7de4: cmp al, 0x9c; add dword ptr [rax], eax; cmp byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x000000000018abe4: cmp al, 0xaa; add dword ptr [rax], eax; hlt; ret; 
0x00000000001765b5: cmp al, 0xaa; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000001aa8e4: cmp al, 0xc7; add dword ptr [rax], eax; fcom st(6); cmc; jmp qword ptr [rsi]; 
0x00000000001af07c: cmp al, 0xe1; cmc; jmp qword ptr [rdx]; 
0x00000000000efa5c: cmp al, 0xe8; sahf; ret; 
0x00000000001734e3: cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x000000000019b14d: cmp al, 0xee; jmp qword ptr [rdx]; 
0x00000000000cb79e: cmp al, 0xf5; jmp qword ptr [rsi + 0x2e]; 
0x00000000001b0f25: cmp al, 0xf6; jmp qword ptr [rdx]; 
0x000000000018ca51: cmp al, 0xff; add al, 0x5f; add al, byte ptr [rax]; ret 0xf880; 
0x000000000002ef7c: cmp al, 0xff; cmovne edx, eax; lea rax, qword ptr [rip + 0x390c98]; mov byte ptr [rip + 0x390cef], dl; ret; 
0x000000000018ca61: cmp al, 0xff; fcomp qword ptr [rdi + 2]; add byte ptr [rbx + rax*4 - 8], dh; call rsp; 
0x00000000001a1dfd: cmp al, 1; add al, ah; int1; jmp qword ptr [rdx]; 
0x0000000000161e63: cmp al, 2; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000014291c: cmp al, 4; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000009d9a0: cmp al, 5; add byte ptr [rax], al; ret; 
0x00000000000803dc: cmp al, 8; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000019cd28: cmp al, ah; out dx, al; call qword ptr [rdi]; 
0x00000000001089d7: cmp al, bh; call qword ptr [rax - 0x18]; 
0x0000000000142b3a: cmp al, byte ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000022752: cmp al, byte ptr [rax]; add al, 0xe9; paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x00000000000c114e: cmp al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000225f4: cmp al, byte ptr [rax]; lea rax, qword ptr [rip + 0x3a1603]; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x00000000000225fb: cmp al, byte ptr [rax]; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x00000000000225ed: cmp al, byte ptr [rax]; mov dword ptr [rip + 0x3a1646], r8d; lea rax, qword ptr [rip + 0x3a1603]; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x000000000002221f: cmp al, byte ptr [rax]; mov dword ptr [rip + 0x3a19d8], r8d; pop rbx; ret; 
0x0000000000022219: cmp al, byte ptr [rax]; mov dword ptr [rip + 0x3a1a1b], edi; mov dword ptr [rip + 0x3a19d8], r8d; pop rbx; ret; 
0x000000000001f5ed: cmp al, byte ptr [rax]; mov qword ptr [rip + 0x3a045a], rax; pop rax; pop rbx; pop rbp; ret; 
0x000000000001f5f4: cmp al, byte ptr [rax]; pop rax; pop rbx; pop rbp; ret; 
0x0000000000022226: cmp al, byte ptr [rax]; pop rbx; ret; 
0x000000000002246f: cmp al, byte ptr [rax]; ret; 
0x0000000000021f58: cmp al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001a1c0d: cmp al, byte ptr [rcx]; add al, al; in al, dx; int1; jmp qword ptr [rcx]; 
0x00000000001a1c25: cmp al, byte ptr [rcx]; add al, bl; in al, dx; int1; call qword ptr [rbx]; 
0x00000000001a1c3d: cmp al, byte ptr [rcx]; add byte ptr [rax], ah; in eax, dx; int1; call qword ptr [rax]; 
0x00000000001a1c8d: cmp al, byte ptr [rcx]; add byte ptr [rax], al; out dx, al; int1; call qword ptr [rdx]; 
0x0000000000189c5d: cmp al, byte ptr [rcx]; add byte ptr [rsi - 0x2c], bh; out dx, eax; lcall ptr [rdx + rdi - 0x2b66ffff]; out dx, eax; jmp rsp; 
0x00000000000e6463: cmp al, byte ptr [rdi + rcx]; test byte ptr [rip - 0x7a000001], ah; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x00000000001a1c0c: cmp al, byte ptr fs:[rcx]; add al, al; in al, dx; int1; jmp qword ptr [rcx]; 
0x000000000005d125: cmp al, ch; add eax, 0x48ffff75; add esp, 0xd8; ret; 
0x0000000000023128: cmp al, ch; ret 0xffc3; 
0x0000000000086717: cmp al, ch; ret; 
0x000000000019e329: cmp al, dh; call qword ptr [rdi]; 
0x000000000008bdc6: cmp al, dh; ret; 
0x000000000008bdc5: cmp al, r14b; ret; 
0x000000000019e110: cmp bh, 0xef; jmp qword ptr [rdi + 6]; 
0x0000000000036716: cmp bh, 0xff; inc eax; shr eax, 0x1f; ret; 
0x000000000010765f: cmp bh, al; add byte ptr [r8], 0; add byte ptr [rax], al; mov qword ptr [rbp - 0x70], rdx; mov rdx, r14; call rax; 
0x00000000001862ad: cmp bh, bl; jmp rax; 
0x00000000000305e4: cmp bh, byte ptr [rcx]; add byte ptr [rax - 0x73], cl; cmp eax, 0x38f692; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001a0dac: cmp bh, byte ptr [rdi - 0xf]; jmp qword ptr [rdx]; 
0x00000000001a1f28: cmp bh, dh; int1; jmp qword ptr [rax + 1]; 
0x0000000000192b51: cmp bh, dl; jmp qword ptr [rcx]; 
0x000000000019d130: cmp bl, 0xee; call qword ptr [rax]; 
0x00000000001862a9: cmp bl, bh; inc dword ptr [rax + 0x3a]; sti; jmp rax; 
0x00000000000357b2: cmp bl, byte ptr [rbp - 0x3fce0002]; pop rbx; ret; 
0x0000000000091e5b: cmp bl, dh; ret; 
0x00000000001a0b68: cmp bl, dl; int1; call rsi; 
0x00000000000fa423: cmp bpl, byte ptr [r8 + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000376bc: cmp byte ptr [eax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000a2bb6: cmp byte ptr [r11], r15b; cmp byte ptr [rbp + 0x13], r14b; ret; 
0x00000000000f8336: cmp byte ptr [r8 + 3], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ed637: cmp byte ptr [r8 - 0x73], cl; sub byte ptr [r8 - 0x75], cl; jnp 0xed659; mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x00000000001034e8: cmp byte ptr [r8 - 0x75], cl; push rbx; and byte ptr [rax + 0x2b], cl; xor r9b, bpl; ret; 
0x0000000000075ff3: cmp byte ptr [r8 - 0x77], cl; ret 0x348; 
0x000000000012b08d: cmp byte ptr [r8 - 0x77], r9b; and al, 0x28; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012b08d: cmp byte ptr [r8 - 0x77], r9b; and al, 0x28; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x0000000000120d98: cmp byte ptr [r8 - 0x77], r9b; or byte ptr [rax - 0x75], r9b; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000e2792: cmp byte ptr [r8 - 0x77], r9b; ret 0x8948; 
0x0000000000101ebb: cmp byte ptr [r8 - 0x78], al; sub al, byte ptr [rax + 0xf]; mov esi, 0xc48348c5; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000e325e: cmp byte ptr [r8], cl; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000008674e: cmp byte ptr [r9 + r9*4 + 0x43], cl; mov qword ptr [rbx], rdi; mov dword ptr [rbx + 0x30], eax; call rcx; 
0x0000000000086805: cmp byte ptr [r9 + r9*4 + 0x43], cl; mov rsi, rax; mov qword ptr [rbx], rax; mov qword ptr [rbx + 0x48], r9; mov rdi, r9; call rcx; 
0x00000000000dc0b1: cmp byte ptr [rax + 0x63], cl; ret; 
0x00000000000f7fe9: cmp byte ptr [rax + 0x64], bh; test edx, edx; cmovne eax, edx; ret; 
0x000000000008c9af: cmp byte ptr [rax + 0xf], cl; ret; 
0x000000000011ad4c: cmp byte ptr [rax + 0xffffff], 0xf; shr r9b, 1; ret 0xfffe; 
0x0000000000127f47: cmp byte ptr [rax + 1], bh; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000127f36: cmp byte ptr [rax + 1], bh; ret; 
0x000000000008be07: cmp byte ptr [rax + 1], cl; clc; ret; 
0x00000000000f8337: cmp byte ptr [rax + 3], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000127106: cmp byte ptr [rax + rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000142d96: cmp byte ptr [rax + rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000008c449: cmp byte ptr [rax + rax], cl; lea rdx, qword ptr [rip + 0xbb71d]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000008c448: cmp byte ptr [rax + rax], r9b; lea rdx, qword ptr [rip + 0xbb71d]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000019bdc8: cmp byte ptr [rax - 0x12], dh; call qword ptr [rsi]; 
0x00000000000d0b5e: cmp byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdx + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000d0b5d: cmp byte ptr [rax - 0x68], r9b; movzx eax, byte ptr [rdx + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000ed638: cmp byte ptr [rax - 0x73], cl; sub byte ptr [r8 - 0x75], cl; jnp 0xed659; mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x00000000000d52a7: cmp byte ptr [rax - 0x75], cl; adc byte ptr [rax + 0x39], cl; ret; 
0x0000000000126910: cmp byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x00000000001034e9: cmp byte ptr [rax - 0x75], cl; push rbx; and byte ptr [rax + 0x2b], cl; xor r9b, bpl; ret; 
0x000000000012b085: cmp byte ptr [rax - 0x77], cl; and al, 0x20; mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012b08e: cmp byte ptr [rax - 0x77], cl; and al, 0x28; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012b08e: cmp byte ptr [rax - 0x77], cl; and al, 0x28; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x00000000000f5324: cmp byte ptr [rax - 0x77], cl; and al, 8; call rbx; 
0x0000000000101e50: cmp byte ptr [rax - 0x77], cl; call 0x5c517bb3; ret; 
0x000000000012ced3: cmp byte ptr [rax - 0x77], cl; cli; xor eax, eax; mov dword ptr [rsp], 2; mov rdi, rsp; call rdx; 
0x0000000000120d99: cmp byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x75], r9b; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000a3a61: cmp byte ptr [rax - 0x77], cl; out dx, al; mov rdi, qword ptr [r12]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x0000000000126974: cmp byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x0000000000075b23: cmp byte ptr [rax - 0x77], cl; out dx, eax; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x00000000001275fe: cmp byte ptr [rax - 0x77], cl; push rsi; or byte ptr [rax - 0x75], cl; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000105574: cmp byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x0000000000075ff4: cmp byte ptr [rax - 0x77], cl; ret 0x348; 
0x000000000006d363: cmp byte ptr [rax - 0x77], cl; ret 0x778d; 
0x00000000000e2793: cmp byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000006c8ab: cmp byte ptr [rax - 0x77], cl; ret 0xef83; 
0x00000000000dce4a: cmp byte ptr [rax - 0x77], cl; ret; 
0x0000000000105573: cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x0000000000101ebc: cmp byte ptr [rax - 0x78], al; sub al, byte ptr [rax + 0xf]; mov esi, 0xc48348c5; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000129d9c: cmp byte ptr [rax - 0x7b], cl; push qword ptr [rdx + rcx + 0x48]; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000011f693: cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x0000000000126723: cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], cl; mov edi, ebp; call rdx; 
0x0000000000121262: cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x4c], cl; mov edi, esp; call rdx; 
0x0000000000123a7e: cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0xc8; call rax; 
0x000000000012765b: cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rax + 0x48], 0x8d; jnp 0x1276cd; call rax; 
0x000000000012808b: cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rax + 0x48], 0x8d; jnp 0x1280ed; call rax; 
0x000000000006ed9c: cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf40; 
0x00000000000f9652: cmp byte ptr [rax - 1], bh; ret; 
0x00000000001b3a18: cmp byte ptr [rax - 9], bh; call qword ptr [rax]; 
0x000000000015e438: cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000009c779: cmp byte ptr [rax], 1; sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000008bdf6: cmp byte ptr [rax], ah; ret; 
0x000000000012f085: cmp byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001211b7: cmp byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; sbb byte ptr [r11 + 0xb7603f8], r8b; mov eax, 2; ret; 
0x000000000010386b: cmp byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x00000000000461e9: cmp byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000191a35: cmp byte ptr [rax], al; add byte ptr [rax], bl; test al, 0xea; jmp qword ptr [rcx + 1]; 
0x0000000000030115: cmp byte ptr [rax], al; add rax, qword ptr fs:[0]; ret; 
0x00000000000301b3: cmp byte ptr [rax], al; add rdx, 0x200; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000034135: cmp byte ptr [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000003d125: cmp byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000340ed: cmp byte ptr [rax], al; lea rdi, qword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340c5: cmp byte ptr [rax], al; lea rdi, qword ptr [rip + 0x38bbb2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036c85: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036bed: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000002e6ce: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; movsxd rdi, r13d; mov eax, 3; syscall; 
0x0000000000036ec2: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x0000000000036993: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbx; ret; 
0x000000000003638b: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000037845: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000035765: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x2a; mov rax, rcx; pop rbx; ret; 
0x00000000000357d5: cmp byte ptr [rax], al; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000037bf7: cmp byte ptr [rax], al; mov eax, edx; ret; 
0x0000000000035886: cmp byte ptr [rax], al; mov ebp, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov rdi, rbx; mov eax, 3; syscall; 
0x000000000002fa71: cmp byte ptr [rax], al; mov qword ptr [rax], rdx; ret; 
0x000000000002f90a: cmp byte ptr [rax], al; mov qword ptr fs:[rax], rsi; cmp rdx, rcx; mov rax, -1; cmovne rax, rdx; ret; 
0x0000000000036b45: cmp byte ptr [rax], al; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000002fab5: cmp byte ptr [rax], al; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000002fee5: cmp byte ptr [rax], al; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x0000000000036f15: cmp byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036c62: cmp byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013cd8c: cmp byte ptr [rax], al; ret 0xf66; 
0x0000000000037ba4: cmp byte ptr [rax], al; ret; 
0x000000000003037c: cmp byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e12: cmp byte ptr [rax], al; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000000e325f: cmp byte ptr [rax], cl; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086d90: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x0000000000096f96: cmp byte ptr [rax], dh; ret; 
0x0000000000179340: cmp byte ptr [rax], dl; hlt; inc dword ptr [rcx]; sbb ah, dh; jmp qword ptr [rbx]; 
0x000000000008bde6: cmp byte ptr [rax], dl; ret; 
0x000000000008bde5: cmp byte ptr [rax], r10b; ret; 
0x000000000008bdf5: cmp byte ptr [rax], r12b; ret; 
0x0000000000096f95: cmp byte ptr [rax], r14b; ret; 
0x0000000000086d8f: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000a2bba: cmp byte ptr [rbp + 0x13], dh; ret; 
0x00000000000a2bb9: cmp byte ptr [rbp + 0x13], r14b; ret; 
0x0000000000094bd0: cmp byte ptr [rbp + 0x29], cl; ret 0x8b46; 
0x0000000000094ecb: cmp byte ptr [rbp + 0x31], al; ror byte ptr [rbp + 0x29], cl; ret 0x8b46; 
0x00000000000d0fac: cmp byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x00000000001874bc: cmp byte ptr [rbp - 4], 0xff; add byte ptr [rbp - 4], bh; push qword ptr [rax + 0x7c]; cld; jmp rax; 
0x0000000000108530: cmp byte ptr [rbx + 0x1002b], bh; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000129bba: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000132039: cmp byte ptr [rbx + 0xf], dh; test byte ptr [rip + 0x48ffffff], ch; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000174627: cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000192654: cmp byte ptr [rbx - 0x5ff1b8f9], al; or dword ptr [rbx], eax; ret 0xa03; 
0x00000000001b0fac: cmp byte ptr [rbx - 0x6ff1b9f9], al; add dword ptr [rbx], eax; ret; 
0x00000000001aa2a5: cmp byte ptr [rbx - 0x73f979f9], al; add eax, 0x38e048d; pop qword ptr [rdx]; add ecx, dword ptr [rbx + 1]; ret; 
0x00000000001b2b58: cmp byte ptr [rbx - 9], cl; call qword ptr [rbx]; 
0x00000000000a2bb7: cmp byte ptr [rbx], bh; cmp byte ptr [rbp + 0x13], r14b; ret; 
0x000000000019b104: cmp byte ptr [rbx], bh; out dx, al; jmp qword ptr [rdx]; 
0x0000000000074f07: cmp byte ptr [rcx + 0x1b87443], cl; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000074e40: cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000008674f: cmp byte ptr [rcx + rcx*4 + 0x43], cl; mov qword ptr [rbx], rdi; mov dword ptr [rbx + 0x30], eax; call rcx; 
0x0000000000086806: cmp byte ptr [rcx + rcx*4 + 0x43], cl; mov rsi, rax; mov qword ptr [rbx], rax; mov qword ptr [rbx + 0x48], r9; mov rdi, r9; call rcx; 
0x000000000007b4cd: cmp byte ptr [rcx + rcx*4 + 0x63], cl; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a44a0: cmp byte ptr [rcx + rcx*4 - 0x17], cl; mov rdi, rbp; call rbx; 
0x0000000000025fa0: cmp byte ptr [rcx + rcx*4 - 7], cl; mov rdx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000051ea8: cmp byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x0000000000121cb9: cmp byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x2948; 
0x00000000000922f8: cmp byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000015e439: cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000009c77a: cmp byte ptr [rcx], al; sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000002c232: cmp byte ptr [rcx], bh; add byte ptr [rax + 0x39], cl; ret 0x7773; 
0x000000000009edb4: cmp byte ptr [rcx], cl; add byte ptr [rax], al; ret; 
0x00000000001a7de8: cmp byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001b1d78: cmp byte ptr [rdi + rsi*8], cl; call qword ptr [rbx]; 
0x0000000000002044: cmp byte ptr [rdi - 0x19ade7f3], dl; ret; 
0x00000000001a8cd8: cmp byte ptr [rdi - 0xb], bl; jmp qword ptr [rdi + 1]; 
0x00000000001a50d8: cmp byte ptr [rdi - 0xc], ch; call qword ptr [rax + 6]; 
0x00000000000e22ab: cmp byte ptr [rdi], cl; mov dh, 0x48; xor byte ptr [rax - 0x77], cl; ret 0xf980; 
0x000000000007b42c: cmp byte ptr [rdi], cl; ror byte ptr [rcx - 0x3b7cb7ed], 1; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000da199: cmp byte ptr [rdi], cl; test bl, ch; add dword ptr [rax], eax; add byte ptr [rbx + rcx*4 + 0x78], cl; or byte ptr [rax + 0x63], cl; ret 0xc148; 
0x0000000000045b1b: cmp byte ptr [rdi], cl; test byte ptr [rcx], dl; add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret 0x840f; 
0x00000000000409a2: cmp byte ptr [rdi], cl; test byte ptr [rdi + rbx*8 - 1], bl; dec dword ptr [rax + 0x39]; ret; 
0x000000000007d343: cmp byte ptr [rdi], dh; xor al, 0; add dword ptr [rbx - 0xd], ebx; ret; 
0x0000000000161220: cmp byte ptr [rdi], dl; ret 0x2373; 
0x0000000000161209: cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000001611f2: cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000015fcae: cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016070d: cmp byte ptr [rdi], dl; ret; 
0x00000000001781c4: cmp byte ptr [rdx - 0x66af000f], bl; int1; call qword ptr [rax - 0x66]; int1; jmp qword ptr [rax]; 
0x00000000001aeab8: cmp byte ptr [rdx - 0xa], bl; call qword ptr [rdi]; 
0x0000000000192b50: cmp byte ptr [rdx], 0xfa; jmp qword ptr [rcx]; 
0x00000000001862b4: cmp byte ptr [rip + 0x3f20fffb], 0xfb; inc eax; sti; jmp qword ptr [rax + 0x42]; 
0x00000000000f0608: cmp byte ptr [rip - 0x1010], ah; or eax, esi; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x00000000000f09c2: cmp byte ptr [rsi + 0x41], ah; mov dword ptr [rax + 0x21], esi; ret; 
0x00000000000c2689: cmp byte ptr [rsi], ah; sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x00000000001b4f58: cmp byte ptr [rsi], al; sti; jmp qword ptr [rdx]; 
0x00000000001a7ba8: cmp byte ptr [rsi], ch; cmc; jmp qword ptr [rax]; 
0x00000000001296af: cmp byte ptr [rsp + 0x18], 0; mov edx, 1; cmovne eax, edx; sub rsp, -0x80; pop rbx; ret; 
0x000000000007f874: cmp byte ptr [rsp + 0x30], 0x32; sete dl; mov dword ptr [rip + 0x33e8de], edx; movsxd rdi, ecx; mov eax, 3; syscall; 
0x0000000000187484: cmp byte ptr [rsp + rdi*8 - 1], 0xf0; jnp 0x187487; jmp qword ptr [rax + 0x7b]; 
0x0000000000032571: cmp byte ptr [rsp + rsi*2], al; fmul qword ptr [rcx + 0x63]; cld; mov eax, 3; syscall; 
0x0000000000037987: cmp byte ptr fs:[rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037bf6: cmp byte ptr fs:[rax], al; mov eax, edx; ret; 
0x0000000000037ba3: cmp byte ptr fs:[rax], al; ret; 
0x00000000000378e4: cmp byte ptr gs:[rax], al; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000001ac4b0: cmp ch, 0xf5; call qword ptr [rax]; 
0x0000000000186944: cmp ch, 0xfb; call rax; 
0x00000000000b2db6: cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000014a454: cmp ch, al; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001999c4: cmp ch, bh; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000fa389: cmp ch, byte ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1832: cmp ch, byte ptr [rax]; sub eax, 0x75c08500; and eax, 0xff89f689; mov eax, 0x71; syscall; 
0x000000000013cb0a: cmp ch, byte ptr [rcx]; ret 0xca39; 
0x00000000001a8121: cmp ch, dh; jmp qword ptr [rax]; 
0x000000000019af9d: cmp ch, dh; jmp qword ptr [rdx]; 
0x00000000001a8161: cmp ch, dh; jmp qword ptr [rsi]; 
0x000000000008bacb: cmp cl, 0; lea rcx, qword ptr [rdx + 1]; cmovne rdx, rcx; mov qword ptr [r9], rdx; add rsp, 0x100; ret; 
0x00000000001a8db4: cmp cl, ah; hlt; jmp qword ptr [rdx]; 
0x00000000000e3ee6: cmp cl, bh; mov dword ptr [rsi], 0; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x0000000000073445: cmp cl, byte ptr [rax + 0x29]; ret 0x8948; 
0x000000000013cacd: cmp cl, byte ptr [rax + 0x63]; ror dword ptr [rax + 1], -8; sub rax, rsi; ret; 
0x00000000000b5305: cmp cl, byte ptr [rax + rax]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000bf3b1: cmp cl, byte ptr [rax - 0x7f]; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x48c; 
0x00000000000c08b0: cmp cl, byte ptr [rax - 0x7f]; in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x0000000000083df1: cmp cl, byte ptr [rbx + rcx*4 + 0x47]; or byte ptr [rbp - 0x77], cl; ret; 
0x00000000000f5fea: cmp cl, byte ptr [rcx]; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000000d94dd: cmp cl, byte ptr [rdi]; test dword ptr [rax - 0x7d], 0x394101c0; ret 0xda7f; 
0x0000000000048c3c: cmp cl, byte ptr [rdi]; xchg eax, esp; ret; 
0x00000000001281eb: cmp dh, 0xff; dec dword ptr [rcx + rcx*4 - 0x11]; add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x0000000000074061: cmp dh, 0xff; jmp qword ptr [rsi + 0x66]; 
0x00000000001319e6: cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000000ba13e: cmp dh, al; or eax, dword ptr [rax]; mov eax, esi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000ff86b: cmp dh, byte ptr [rbx + rcx - 0x7c]; ror byte ptr [rdi], cl; test edx, eax; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000ff93b: cmp dh, byte ptr [rbx + rcx - 0x7c]; ror byte ptr [rdi], cl; test edx, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000048745: cmp dh, byte ptr [rcx]; rol byte ptr [rax + 0x375003f], 0x5b; ret; 
0x00000000001a8209: cmp dh, ch; jmp qword ptr [rax]; 
0x00000000001a8239: cmp dh, ch; jmp qword ptr [rcx]; 
0x0000000000039719: cmp dh, dh; ret 0x7401; 
0x0000000000098345: cmp dh, dh; ret 0x7501; 
0x0000000000025d05: cmp dh, dh; ret 0x8b01; 
0x00000000000ee365: cmp dh, dh; ret; 
0x00000000001862ac: cmp dil, bl; jmp rax; 
0x00000000001a1938: cmp dl, ah; int1; jmp qword ptr [rdx]; 
0x00000000000f1f6b: cmp dl, byte ptr [rdi + 0x6348ffff]; sti; mov edx, eax; mov eax, 3; syscall; 
0x0000000000002b62: cmp dl, byte ptr [rdi]; ret; 
0x0000000000127402: cmp dl, byte ptr [rdx - 0x76b70010]; ret 0xbfeb; 
0x00000000001900f9: cmp dl, ch; call qword ptr [rdx]; 
0x0000000000190095: cmp dl, ch; jmp qword ptr [rdx]; 
0x000000000002fc06: cmp dword ptr [r8], eax; mov dword ptr [rsp + 0x34], ecx; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f894: cmp dword ptr [r8], r8d; lea rdi, qword ptr [rip + 0x390262]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f874: cmp dword ptr [r8], r8d; lea rdi, qword ptr [rip + 0x390282]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000136503: cmp dword ptr [rax + 0x28], 0x3486400; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000002f7d3: cmp dword ptr [rax + 0x39], ecx; add byte ptr [rax - 0x73], cl; cmp eax, 0x390322; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000121572: cmp dword ptr [rax + 0x48000023], -0x77; out dx, eax; call qword ptr [rax + 0x20]; 
0x0000000000123c19: cmp dword ptr [rax + 0xf000000], 0x49c089c8; mov dword ptr [rax], eax; mov eax, 1; ret; 
0x0000000000070b3b: cmp dword ptr [rax + 0xf], eax; mov dh, 0xc7; ret; 
0x0000000000142cea: cmp dword ptr [rax + rax], eax; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000fa484: cmp dword ptr [rax + rax], ebp; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa55d: cmp dword ptr [rax + rax], ebp; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000123c36: cmp dword ptr [rax - 0x48000000], 1; ret; 
0x00000000000c2688: cmp dword ptr [rax], 0x26; sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x0000000000055b12: cmp dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000022765: cmp dword ptr [rax], eax; add rax, qword ptr fs:[0]; ret; 
0x0000000000030d9e: cmp dword ptr [rax], eax; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000321a9: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38dbae]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032132: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38dc25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003204d: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38dd0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032025: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38dd32]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e38: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38debf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e0b: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38deec]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000031b67: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38df90]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aa6: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38e051]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031b94: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38e0e3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031ad1: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38e1a6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031af3: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38e204]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318cb: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38e22c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a84: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38e273]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318f2: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38e385]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000305e5: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38f692]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000304fd: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38f77a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003039d: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38f8da]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030375: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38f902]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f895: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x390262]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f875: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x390282]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7d5: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x390322]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7aa: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f5ce: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x390529]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f57c: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x39057b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f46a: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x39068d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d752: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x3923a5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d730: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x3923c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d50d: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d4e5: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x392612]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d499: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x39265e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d285: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x392872]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d115: cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x3929e2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000024585: cmp dword ptr [rax], eax; lea rsi, qword ptr [rip + 0xab2]; lea rdi, qword ptr [rip + 0x39b4db]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002439d: cmp dword ptr [rax], eax; lea rsi, qword ptr [rip + 0xc9a]; lea rdi, qword ptr [rip + 0x39b6c3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002ef86: cmp dword ptr [rax], eax; mov byte ptr [rip + 0x390cef], dl; ret; 
0x000000000002fc07: cmp dword ptr [rax], eax; mov dword ptr [rsp + 0x34], ecx; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000022cb3: cmp dword ptr [rax], eax; mov dword ptr fs:[rax], 9; mov eax, edi; ret; 
0x000000000002cd65: cmp dword ptr [rax], eax; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000022121: cmp dword ptr [rax], eax; mov rdi, qword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x0000000000021f30: cmp dword ptr [rax], eax; mov rsi, qword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000021b1f: cmp dword ptr [rax], eax; pop r12; ret; 
0x000000000002c165: cmp dword ptr [rax], eax; ret; 
0x00000000000243ab: cmp dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bce2b: cmp dword ptr [rax], edx; xor byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003cd42: cmp dword ptr [rax], esi; add byte ptr [rax], al; and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x0000000000101f9a: cmp dword ptr [rbx + 0x28], 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000014c0f8: cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x00000000001a1b75: cmp dword ptr [rcx], eax; add al, ch; out 0xf1, eax; jmp rsi; 
0x0000000000145e93: cmp dword ptr [rcx], ecx; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000007d085: cmp dword ptr [rdi + 0x28], eax; cmovae rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000000fcabb: cmp dword ptr [rdi + 0x2c], ecx; add byte ptr [rax - 0x75], cl; sbb byte ptr [rsi - 0x7d], spl; add byte ptr [rcx], al; ret; 
0x00000000000cb7e5: cmp dword ptr [rdi + 4], eax; mov eax, 0xffffffff; setne dl; cmovbe eax, edx; ret; 
0x00000000000a3769: cmp dword ptr [rdi + 8], esi; cmove rax, rcx; ret; 
0x000000000007586c: cmp dword ptr [rdx + 0x20], eax; cmovae rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000010ad56: cmp dword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000019b38c: cmp dword ptr [rdx - 0x12], eax; jmp qword ptr [rdx]; 
0x0000000000002b55: cmp dword ptr [rdx - 0x254e376e], ecx; fnsave dword ptr [rdx - 0x6b]; test word ptr [rbx - 0x2e], bp; cmp dl, byte ptr [rdi]; ret; 
0x00000000001793f8: cmp dword ptr [rdx - 0x65bc000c], ebx; hlt; dec dword ptr [rbp - 0x66]; hlt; call qword ptr [rdi - 0x66]; 
0x00000000001acbb6: cmp dword ptr [rdx - 0xb], 0x3d0d1cff; jp 0x1acbb4; jmp qword ptr [rdx]; 
0x00000000000c2445: cmp dword ptr [rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000fd423: cmp dword ptr [rdx], ecx; sub al, 0; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000001430d3: cmp dword ptr [rip + 0x63490004], esi; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000c1fe3: cmp dword ptr [rsi - 0x2708ffd1], 0x48018964; or eax, 0xffffffff; ret; 
0x00000000000037f6: cmp dword ptr [rsi], ecx; pop rsp; ret; 
0x00000000000ebacc: cmp dword ptr [rsp - 0x68], 2; cmove eax, edx; ret; 
0x000000000002d49f: cmp dword ptr es:[rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c2687: cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x00000000000c2444: cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000f0d16: cmp eax, -1; cmovne rbx, rdx; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x0000000000084f8c: cmp eax, -1; cmovne rdx, rax; add rsp, 8; mov rax, rdx; ret; 
0x0000000000045876: cmp eax, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000114811: cmp eax, -1; mov dl, 2; cmove eax, edx; ret; 
0x00000000001147d7: cmp eax, -1; mov edx, 0x104; cmove eax, edx; ret; 
0x0000000000003b5b: cmp eax, 0x12c401fe; mov cl, 0x22; xchg eax, ebp; ret; 
0x000000000000389d: cmp eax, 0x139cf347; push rbp; movabs dword ptr [0x7972d6f857775fc9], eax; cmpsq qword ptr [rsi], qword ptr [rdi]; ret 0x49ec; 
0x0000000000034c6b: cmp eax, 0x13dd10; movsxd rdx, dword ptr [rdi + rsi*4]; add rdx, rdi; jmp rdx; 
0x00000000001651e9: cmp eax, 0x25bc62; call 0x1f4f0; mov qword ptr [rip + 0x25bc52], 0; pop rbx; ret; 
0x000000000012ab90: cmp eax, 0x298ccb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ee10: cmp eax, 0x2a486b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011bcd0: cmp eax, 0x2a76fb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001120b2: cmp eax, 0x2b0ec9; call rax; 
0x00000000001117e7: cmp eax, 0x2b1734; call rax; 
0x000000000010ad78: cmp eax, 0x2b7a23; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000fbcc1: cmp eax, 0x2c83ad; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000fbc61: cmp eax, 0x2c840d; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000fb4f1: cmp eax, 0x2c8b7d; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x2c; syscall; 
0x00000000000fb491: cmp eax, 0x2c8bdd; add byte ptr [rbp + 0x10], dh; mov eax, 0x2e; syscall; 
0x00000000000fb381: cmp eax, 0x2c8ced; add byte ptr [rbp + 0x10], dh; mov eax, 0x2f; syscall; 
0x00000000000fb321: cmp eax, 0x2c8d4d; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x2d; syscall; 
0x00000000000fb151: cmp eax, 0x2c8f1d; add byte ptr [rbp + 0x10], dh; mov eax, 0x2a; syscall; 
0x00000000000fb0c1: cmp eax, 0x2c8fad; add byte ptr [rbp + 0x10], dh; mov eax, 0x2b; syscall; 
0x00000000000fafb1: cmp eax, 0x2c90bd; add byte ptr [rbp + 0x10], dh; mov eax, 0x130; syscall; 
0x00000000000fae61: cmp eax, 0x2c920d; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000fada1: cmp eax, 0x2c92cd; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000fa9e1: cmp eax, 0x2c968d; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0xe8; syscall; 
0x00000000000fa3a1: cmp eax, 0x2c9ccd; add byte ptr [rbp + 0x10], dh; mov eax, 8; syscall; 
0x00000000000f24a0: cmp eax, 0x2cf08b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f4901: cmp eax, 0x2cf76d; add byte ptr [rbp + 0x10], dh; mov eax, 0x1a; syscall; 
0x00000000000f1e61: cmp eax, 0x2d220d; add byte ptr [rbp + 0x10], dh; mov eax, 0x4b; syscall; 
0x00000000000f1dd1: cmp eax, 0x2d229d; add byte ptr [rbp + 0x10], dh; mov eax, 0x4a; syscall; 
0x00000000000f1c21: cmp eax, 0x2d244d; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x17; syscall; 
0x00000000000f04c1: cmp eax, 0x2d3bad; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000ecfb1: cmp eax, 0x2d70bd; add byte ptr [rbp + 0x10], dh; mov eax, 7; syscall; 
0x00000000000ebf51: cmp eax, 0x2d811d; add byte ptr [rbp + 0x10], dh; mov eax, 0x55; syscall; 
0x00000000000ebe01: cmp eax, 0x2d826d; add byte ptr [rbp + 0x10], dh; mov eax, 3; syscall; 
0x00000000000eb701: cmp eax, 0x2d896d; add byte ptr [rbp + 0x10], dh; mov eax, 1; syscall; 
0x00000000000eb6a1: cmp eax, 0x2d89cd; add byte ptr [rbp + 0x10], dh; mov eax, 0; syscall; 
0x00000000000eb4b1: cmp eax, 0x2d8bbd; add byte ptr [rbp + 0x10], dh; mov eax, 2; syscall; 
0x00000000000d0490: cmp eax, 0x2f0f2b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cb5a1: cmp eax, 0x2f8acd; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x12; syscall; 
0x00000000000cb541: cmp eax, 0x2f8b2d; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x11; syscall; 
0x00000000000c0dd1: cmp eax, 0x30329d; add byte ptr [rbp + 0x10], dh; mov eax, 0x23; syscall; 
0x00000000000bc811: cmp eax, 0x3032ea; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c0d71: cmp eax, 0x3032fd; add byte ptr [rbp + 0x10], dh; mov eax, 0x22; syscall; 
0x00000000000bc7f1: cmp eax, 0x30330a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000bc712: cmp eax, 0x3033e9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc6f0: cmp eax, 0x30340b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc509: cmp eax, 0x3035f2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc4de: cmp eax, 0x30361d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc391: cmp eax, 0x30376a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc32c: cmp eax, 0x3037cf; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000af001: cmp eax, 0x310afa; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aef4a: cmp eax, 0x310bb1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c530a: cmp eax, 0x31ffffff; fisttp dword ptr [rax - 0x77]; fmul dword ptr [rcx + 3]; adc byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000008aca8: cmp eax, 0x335fb3; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008acf0: cmp eax, 0x335ffb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008ac7a: cmp eax, 0x336071; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008aaa4: cmp eax, 0x336247; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049170: cmp eax, 0x37777b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340f1: cmp eax, 0x38bb8a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340c9: cmp eax, 0x38bbb2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000321ad: cmp eax, 0x38dbae; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032136: cmp eax, 0x38dc25; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032051: cmp eax, 0x38dd0a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032029: cmp eax, 0x38dd32; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e3c: cmp eax, 0x38debf; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e0f: cmp eax, 0x38deec; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000031b6b: cmp eax, 0x38df90; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aaa: cmp eax, 0x38e051; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031b98: cmp eax, 0x38e0e3; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031ad5: cmp eax, 0x38e1a6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031af7: cmp eax, 0x38e204; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318cf: cmp eax, 0x38e22c; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a88: cmp eax, 0x38e273; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318f6: cmp eax, 0x38e385; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000305e9: cmp eax, 0x38f692; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030501: cmp eax, 0x38f77a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000303a1: cmp eax, 0x38f8da; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030379: cmp eax, 0x38f902; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f899: cmp eax, 0x390262; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f879: cmp eax, 0x390282; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7d9: cmp eax, 0x390322; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7ae: cmp eax, 0x39034d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f5d2: cmp eax, 0x390529; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f580: cmp eax, 0x39057b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f46e: cmp eax, 0x39068d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d756: cmp eax, 0x3923a5; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d734: cmp eax, 0x3923c7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d511: cmp eax, 0x3925ea; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d4e9: cmp eax, 0x392612; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d49d: cmp eax, 0x39265e; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d289: cmp eax, 0x392872; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d119: cmp eax, 0x3929e2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000024590: cmp eax, 0x39b4db; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000243a8: cmp eax, 0x39b6c3; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000225fe: cmp eax, 0x3a15fd; pop rbx; ret; 
0x000000000002221c: cmp eax, 0x3a1a1b; mov dword ptr [rip + 0x3a19d8], r8d; pop rbx; ret; 
0x00000000001862b5: cmp eax, 0x3f20fffb; sti; inc eax; sti; jmp qword ptr [rax + 0x42]; 
0x000000000002211f: cmp eax, 0x480039d9; mov edi, dword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x00000000000bc25f: cmp eax, 0x48ffffdd; add esp, 0x18; ret; 
0x00000000000cb16f: cmp eax, 0x48ffffff; add esp, 0x18; ret; 
0x00000000000bc705: cmp eax, 0x48ffffff; mov eax, dword ptr [rip + 0x3078f8]; lea rdi, qword ptr [rip + 0x3033e9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030dbf: cmp eax, 0x49003932; lea edi, dword ptr [rsp + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001793c4: cmp eax, 0x49fff49b; wait; hlt; call qword ptr [rbx - 0x65]; 
0x000000000012708f: cmp eax, 0x54c0c; movsxd rax, dword ptr [rdi + rax*4]; add rdi, rax; jmp rdi; 
0x0000000000174961: cmp eax, 0x7170d773; mov ebp, 0xfb67d10d; ret; 
0x000000000017495e: cmp eax, 0x733db8a1; xlatb; jo 0x1749d7; mov ebp, 0xfb67d10d; ret; 
0x0000000000103f30: cmp eax, 0x78c08545; add eax, 0x79c98545; xor eax, dword ptr [rcx + rcx*4 - 0x40]; sub eax, r9d; ret; 
0x000000000006717c: cmp eax, 0x83000005; ret 0x8308; 
0x000000000006033c: cmp eax, 0x83480004; clc; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000080acf: cmp eax, 0x83480007; clc; dec dword ptr [rax - 0x77]; ret 0x840f; 
0x0000000000097485: cmp eax, 0x8348f075; mov dword ptr [rcx], 0xd284c031; cmovne rax, rdi; ret; 
0x00000000000fb99f: cmp eax, 0x83ffff58; clc; push qword ptr [rbx + rax - 0x75]; add al, 0x24; add rsp, 0x18; ret; 
0x00000000000973b6: cmp eax, 0x8445f174; sal byte ptr [rbp - 0x63], 0x48; mov eax, edi; ret; 
0x00000000000ee387: cmp eax, 0x89000001; sal dword ptr [rcx], 1; rol cl, 0xe9; add esi, esi; ret 0xf304; 
0x000000000004629f: cmp eax, 0x890037a4; ret; 
0x000000000011b982: cmp eax, 0x89480006; ret 0x1be; 
0x00000000000973a7: cmp eax, 0x89480f75; clc; ret; 
0x00000000000c7c0f: cmp eax, 0xb1cc8; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000c644e: cmp eax, 0xb3399; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000ba13d: cmp eax, 0xbf03a; mov eax, esi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000b827a: cmp eax, 0xc0d11; movzx edx, sil; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000b4c63: cmp eax, 0xc402c; movzx edx, dl; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000b13fb: cmp eax, 0xce8e0; mov edx, 0x1f; call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x000000000009749a: cmp eax, 0xeb000000; ret; 
0x000000000013cdb3: cmp eax, 0xf3ffffff; ret; 
0x0000000000108827: cmp eax, 0xf7002b56; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x00000000001a1f25: cmp eax, 0xf7380001; int1; jmp qword ptr [rax + 1]; 
0x00000000000833a5: cmp eax, 0xfefae; mov edx, 0xc97; call 0x7d680; mov rsi, qword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x00000000000ed0f3: cmp eax, 0xfffff000; cmova edx, ecx; mov eax, edx; ret; 
0x00000000000b9f72: cmp eax, 0xfffff000; setbe al; add rsp, 8; movzx eax, al; ret; 
0x000000000010ad3f: cmp eax, 0xfffffe8c; call rax; 
0x000000000005db0f: cmp eax, 1; cmove edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x000000000012485d: cmp eax, 1; sbb eax, eax; add rsp, 8; add eax, 2; ret; 
0x0000000000121a21: cmp eax, 2; sete al; movzx eax, al; add rsp, 0x10; pop rbx; ret; 
0x000000000012cfd1: cmp eax, 2; sete al; movzx eax, al; ret; 
0x0000000000142ad0: cmp eax, dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000c4784: cmp eax, dword ptr [rax - 0x6bf08406]; ret 0xb60f; 
0x00000000000c11e1: cmp eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000ecde9: cmp eax, dword ptr [rax]; add byte ptr [rbp - 0x3f6bf040], al; add rsp, 0x48; movzx eax, al; ret; 
0x00000000001335a1: cmp eax, dword ptr [rbp - 0x76b7ffd8]; adc eax, 0x28c2e4; add rsp, 8; ret; 
0x00000000001147b3: cmp eax, dword ptr [rbx + 0x19741cfe]; cmp esi, 0x14; mov edx, 0x107; cmove eax, edx; ret; 
0x00000000001a1cbd: cmp eax, dword ptr [rcx]; add byte ptr [rax], ah; out dx, al; int1; jmp qword ptr [rcx]; 
0x000000000008094d: cmp eax, dword ptr [rcx]; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x33d460]; mov rdi, rcx; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x00000000000f4ad1: cmp eax, dword ptr [rcx]; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000070b5e: cmp eax, dword ptr [rdx + 0x4c]; cmovne eax, ecx; ret; 
0x00000000001b1d75: cmp eax, dword ptr [rdx]; add byte ptr [rax], bh; or al, 0xf7; call qword ptr [rbx]; 
0x00000000001b1d05: cmp eax, dword ptr [rdx]; add byte ptr [rax], cl; or al, 0xf7; call qword ptr [rsi]; 
0x00000000001121b3: cmp eax, ebx; sub al, byte ptr [rax]; ret; 
0x0000000000003aab: cmp eax, ecx; mov bl, 0xf7; adc bh, byte ptr [rax]; cwde; ret; 
0x0000000000163b43: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x00000000000f685e: cmp ebp, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000000fa294: cmp ebp, dword ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f04c3: cmp ebp, dword ptr [rip + 0x13750000]; mov r10, rcx; mov eax, 0x115; syscall; 
0x000000000012cceb: cmp ebp, eax; jmp qword ptr [rdi]; 
0x0000000000148c53: cmp ebp, ebx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000192b11: cmp ebp, ebx; jmp qword ptr [rcx + 5]; 
0x000000000019b105: cmp ebp, esi; jmp qword ptr [rdx]; 
0x0000000000107bb3: cmp ebx, eax; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000cb36e: cmp ecx, 0x7fffffff; mov r10, rdx; movsxd rdi, edi; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x00000000001293e9: cmp ecx, dword ptr [rax - 0x73]; push rsp; and al, 0x10; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x000000000011fa34: cmp ecx, dword ptr [rax - 0x7b]; push qword ptr [rdi + rax + 0x48]; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x00000000000a63a6: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000ebadc: cmp ecx, dword ptr [rcx + rcx*4 - 0x3e]; mov esi, 9; mov rdi, r10; mov eax, r9d; syscall; 
0x0000000000121d47: cmp ecx, dword ptr [rcx + rcx*4 - 0xb]; add rbp, qword ptr [rbx + 0x50]; sub edx, r14d; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x000000000009f791: cmp ecx, dword ptr [rdi + 0x634b000d]; or al, 0x83; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000003cd11: cmp ecx, eax; cmova rdx, r8; xor eax, eax; mov qword ptr [rdi + 8], rdx; ret; 
0x0000000000038518: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000117ad5: cmp ecx, eax; sbb eax, eax; ret; 
0x00000000000b0070: cmp ecx, eax; setg al; movzx eax, al; lea eax, dword ptr [rax + rax - 1]; ret; 
0x00000000000cb561: cmp ecx, ebx; add eax, dword ptr [rax]; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000121bb3: cmp ecx, ebx; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000097b03: cmp edi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000000fd925: cmp edi, 9; setbe al; ret; 
0x00000000000304fc: cmp edi, dword ptr [rcx]; add byte ptr [rax - 0x73], cl; cmp eax, 0x38f77a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001087fe: cmp edx, -0x16; cmovne eax, ecx; ret; 
0x00000000000c0920: cmp edx, -1; cmovne rax, rdx; ret; 
0x00000000000f66af: cmp edx, 0x3beffff; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rbx; 
0x000000000010c57f: cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000c60b5: cmp edx, 1; sete al; ret; 
0x00000000000f7eb8: cmp edx, eax; cmove rdx, rcx; mov rax, rbx; mov byte ptr [rdx], 0; pop rbx; ret; 
0x00000000001900dd: cmp edx, ebp; jmp qword ptr [rdx]; 
0x00000000000fbbf7: cmp edx, ecx; cmovae rax, rsi; ret; 
0x000000000002f911: cmp edx, ecx; mov rax, -1; cmovne rax, rdx; ret; 
0x0000000000107a7a: cmp edx, edi; setae al; ret; 
0x00000000000b9f0d: cmp esi, -1; jmp qword ptr [rsi + 0x66]; 
0x00000000001147b9: cmp esi, 0x14; mov edx, 0x107; cmove eax, edx; ret; 
0x00000000000b15c7: cmp esi, 0x3b; cmova esi, r8d; imul esi, edx; add eax, esi; ret; 
0x000000000007067d: cmp esi, dword ptr [rax + 0x48]; mov edx, ebp; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000174c18: cmp esi, dword ptr [rsi + 0x33]; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000001a8251: cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001a8329: cmp esi, ebp; jmp rbx; 
0x0000000000175e04: cmp esi, ebp; xlatb; ret 0x4e27; 
0x000000000018bca1: cmp esi, edi; jmp rsp; 
0x0000000000049716: cmp esi, edi; mov rax, rdi; cmovae rax, rsi; pop rbx; ret; 
0x00000000000497f2: cmp esi, edi; mov rax, rdi; cmovae rax, rsi; ret; 
0x0000000000178279: cmp esp, -1; mov al, 0x84; cld; call rax; 
0x00000000000d473f: cmp esp, -1; push rdi; ret 0; 
0x0000000000187461: cmp esp, 0xfc8090ff; call qword ptr [rax]; 
0x0000000000178271: cmp esp, 0xfc8270ff; call qword ptr [rax - 0x4f00037d]; test ah, bh; call rax; 
0x00000000001869cd: cmp esp, edi; inc dword ptr [rax + 0x2c]; cld; inc dword ptr [rax]; cld; jmp rax; 
0x00000000001869ad: cmp esp, edi; jmp qword ptr [rax + 0x2c]; 
0x00000000001869ed: cmp esp, edi; jmp qword ptr [rax]; 
0x000000000018acc1: cmp esp, esi; call rsp; 
0x000000000002f469: cmp qword ptr [r8], rax; lea rdi, qword ptr [rip + 0x39068d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7d4: cmp qword ptr [rax], rax; lea rdi, qword ptr [rip + 0x390322]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7a9: cmp qword ptr [rax], rax; lea rdi, qword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f5cd: cmp qword ptr [rax], rax; lea rdi, qword ptr [rip + 0x390529]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f57b: cmp qword ptr [rax], rax; lea rdi, qword ptr [rip + 0x39057b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000101f99: cmp qword ptr [rbx + 0x28], 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000007d084: cmp qword ptr [rdi + 0x28], rax; cmovae rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000007586b: cmp qword ptr [rdx + 0x20], rax; cmovae rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x000000000010ad55: cmp qword ptr [rdx + rcx*8 - 8], 1; sbb eax, 0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000091e5a: cmp r11b, r14b; ret; 
0x00000000000ee364: cmp r14b, r14b; ret; 
0x00000000001147d6: cmp r8d, -1; mov edx, 0x104; cmove eax, edx; ret; 
0x00000000000ecde8: cmp r8d, dword ptr [rax]; add byte ptr [rbp - 0x3f6bf040], al; add rsp, 0x48; movzx eax, al; ret; 
0x00000000000cb36d: cmp r9, 0x7fffffff; mov r10, rdx; movsxd rdi, edi; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x000000000003cd10: cmp r9, r8; cmova rdx, r8; xor eax, eax; mov qword ptr [rdi + 8], rdx; ret; 
0x00000000000f0d15: cmp rax, -1; cmovne rbx, rdx; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x0000000000084f8b: cmp rax, -1; cmovne rdx, rax; add rsp, 8; mov rax, rdx; ret; 
0x000000000000389c: cmp rax, 0x139cf347; push rbp; movabs dword ptr [0x7972d6f857775fc9], eax; cmpsq qword ptr [rsi], qword ptr [rdi]; ret 0x49ec; 
0x000000000005db0e: cmp rax, 1; cmove edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x0000000000070b5d: cmp rax, qword ptr [rdx + 0x4c]; cmovne eax, ecx; ret; 
0x0000000000038517: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000117ad4: cmp rcx, rax; sbb eax, eax; ret; 
0x00000000000c091f: cmp rdx, -1; cmovne rax, rdx; ret; 
0x00000000000f7eb7: cmp rdx, rax; cmove rdx, rcx; mov rax, rbx; mov byte ptr [rdx], 0; pop rbx; ret; 
0x00000000000fbbf6: cmp rdx, rcx; cmovae rax, rsi; ret; 
0x000000000002f910: cmp rdx, rcx; mov rax, -1; cmovne rax, rdx; ret; 
0x0000000000107a79: cmp rdx, rdi; setae al; ret; 
0x0000000000049715: cmp rsi, rdi; mov rax, rdi; cmovae rax, rsi; pop rbx; ret; 
0x00000000000497f1: cmp rsi, rdi; mov rax, rdi; cmovae rax, rsi; ret; 
0x0000000000187328: cmp spl, 0xff; ret 0xfc7f; 
0x000000000013e927: cmpsb byte ptr [rsi], byte ptr [rdi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013ec27: cmpsb byte ptr [rsi], byte ptr [rdi]; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000006f854: cmpsb byte ptr [rsi], byte ptr [rdi]; add al, 0; add bl, dh; ret; 
0x000000000013fb27: cmpsb byte ptr [rsi], byte ptr [rdi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000952e6: cmpsb byte ptr [rsi], byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000001a87cd: cmpsb byte ptr [rsi], byte ptr [rdi]; add dword ptr [rax], eax; and byte ptr [rdi - 0xb], dl; call qword ptr [rdx]; 
0x000000000013f827: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0x83480000; ret 0x4910; 
0x0000000000160cb9: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x0000000000150da6: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, dword ptr [eax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001510a6: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, dword ptr fs:[rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018cc29: cmpsb byte ptr [rsi], byte ptr [rdi]; clc; jmp rsp; 
0x00000000001877a9: cmpsb byte ptr [rsi], byte ptr [rdi]; cld; call qword ptr [rax]; 
0x00000000001879a5: cmpsb byte ptr [rsi], byte ptr [rdi]; cld; jmp qword ptr [rax]; 
0x0000000000187825: cmpsb byte ptr [rsi], byte ptr [rdi]; cld; jmp qword ptr [rdx - 0x5a]; 
0x0000000000187829: cmpsb byte ptr [rsi], byte ptr [rdi]; cld; jmp rdx; 
0x000000000011fa46: cmpsb byte ptr [rsi], byte ptr [rdi]; cli; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x0000000000179ec1: cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x0000000000179f39: cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; inc eax; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp rax; 
0x0000000000179f3d: cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp rax; 
0x0000000000179f41: cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; push rax; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x00000000001507a6: cmpsb byte ptr [rsi], byte ptr [rdi]; insd dword ptr [rdi], dx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000057eee: cmpsb byte ptr [rsi], byte ptr [rdi]; int 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000001504a6: cmpsb byte ptr [rsi], byte ptr [rdi]; jo 0x1504ac; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000186444: cmpsb byte ptr [rsi], byte ptr [rdi]; lodsb al, byte ptr [rsi]; std; inc dword ptr [rsi - 0x53]; std; jmp rsi; 
0x0000000000096bd4: cmpsb byte ptr [rsi], byte ptr [rdi]; mov rcx, rax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x000000000013cfd6: cmpsb byte ptr [rsi], byte ptr [rdi]; movabs byte ptr [0x91148b81048b0002], al; sub eax, edx; ret; 
0x00000000000c6134: cmpsb byte ptr [rsi], byte ptr [rdi]; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000139f66: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013f527: cmpsb byte ptr [rsi], byte ptr [rdi]; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000dfbf3: cmpsb byte ptr [rsi], byte ptr [rdi]; or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000013f227: cmpsb byte ptr [rsi], byte ptr [rdi]; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000d2746: cmpsb byte ptr [rsi], byte ptr [rdi]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000150aa6: cmpsb byte ptr [rsi], byte ptr [rdi]; push 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001335e6: cmpsb byte ptr [rsi], byte ptr [rdi]; ret 0x28; 
0x00000000000f6ce6: cmpsb byte ptr [rsi], byte ptr [rdi]; sar edx, cl; dec dword ptr [rax + 0x39]; ret; 
0x0000000000136e6e: cmpsb byte ptr [rsi], byte ptr [rdi]; shr byte ptr [rax], cl; add bl, ch; vminsd xmm15, xmm4, qword ptr [rax - 1]; pop r12; ret; 
0x00000000001863b9: cmpsb byte ptr [rsi], byte ptr [rdi]; std; call qword ptr [rdx]; 
0x000000000018641d: cmpsb byte ptr [rsi], byte ptr [rdi]; std; jmp rsi; 
0x0000000000135250: cmpsb byte ptr [rsi], byte ptr [rdi]; sub byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x0000000000135229: cmpsb byte ptr [rsi], byte ptr [rdi]; sub byte ptr [rax], al; call qword ptr [rax]; 
0x0000000000135232: cmpsb byte ptr [rsi], byte ptr [rdi]; sub byte ptr [rax], al; mov rdi, rbp; mov rdx, rsp; lea rsi, qword ptr [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x0000000000135228: cmpsb byte ptr fs:[rsi], byte ptr [rdi]; sub byte ptr [rax], al; call qword ptr [rax]; 
0x0000000000146725: cmpsd dword ptr [rsi], dword ptr [rdi]; add byte ptr [rax + rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000c4515: cmpsd dword ptr [rsi], dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x6bf08406], al; ret 0xb60f; 
0x00000000001a8995: cmpsd dword ptr [rsi], dword ptr [rdi]; add dword ptr [rax], eax; cwde; pop rbp; cmc; call qword ptr [rdx]; 
0x00000000001a8935: cmpsd dword ptr [rsi], dword ptr [rdi]; add dword ptr [rax], eax; pop rax; pop rbp; cmc; call qword ptr [rcx]; 
0x000000000011581d: cmpsd dword ptr [rsi], dword ptr [rdi]; add eax, dword ptr [rax]; add byte ptr [rbx - 0x7cb7db84], cl; call qword ptr [rax]; 
0x000000000009a380: cmpsd dword ptr [rsi], dword ptr [rdi]; and al, 0; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x00000000001877a1: cmpsd dword ptr [rsi], dword ptr [rdi]; cld; call qword ptr [rax]; 
0x000000000018799d: cmpsd dword ptr [rsi], dword ptr [rdi]; cld; jmp qword ptr [rax]; 
0x000000000018781d: cmpsd dword ptr [rsi], dword ptr [rdi]; cld; jmp qword ptr [rdx - 0x59]; 
0x0000000000187821: cmpsd dword ptr [rsi], dword ptr [rdi]; cld; jmp rdx; 
0x000000000018db09: cmpsd dword ptr [rsi], dword ptr [rdi]; cli; push qword ptr [rcx + rbx*8 - 0x56cbfffe]; cli; jmp rsp; 
0x000000000017a00d: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax - 0x59]; 
0x000000000017a00d: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax - 0x59]; cmc; call rbx; 
0x0000000000179f25: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax - 0x5a]; 
0x0000000000179f25: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax - 0x5a]; cmc; call rbx; 
0x0000000000179f4d: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax]; 
0x0000000000179f4d: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax]; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call rbx; 
0x0000000000179ec5: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call rbx; 
0x000000000017a009: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax - 0x59]; 
0x0000000000179f21: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax - 0x5a]; 
0x0000000000179f49: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call qword ptr [rax]; 
0x0000000000179f8d: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call rbx; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp qword ptr [rax]; 
0x000000000017a001: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; inc dword ptr [rax - 0x59]; cmc; call rbx; 
0x000000000017a085: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; inc eax; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp rax; 
0x0000000000179f91: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp qword ptr [rax]; 
0x000000000017a089: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp rax; 
0x000000000017a095: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp rcx; 
0x0000000000179f35: cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; ljmp ptr [rax - 0x3f000a5a]; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp rax; 
0x000000000015ed25: cmpsd dword ptr [rsi], dword ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000120293: cmpsd dword ptr [rsi], dword ptr [rdi]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000082789: cmpsd dword ptr [rsi], dword ptr [rdi]; mov rsi, qword ptr [rsp + 0x18]; pop rdx; pop rbx; pop rbp; jmp rax; 
0x00000000001899f1: cmpsd dword ptr [rsi], dword ptr [rdi]; out dx, eax; call rsp; 
0x0000000000199a54: cmpsd dword ptr [rsi], dword ptr [rdi]; out dx, eax; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000038ae: cmpsd dword ptr [rsi], dword ptr [rdi]; ret 0x49ec; 
0x00000000001863ad: cmpsd dword ptr [rsi], dword ptr [rdi]; std; call qword ptr [rsi + 0x42fffda4]; movsd dword ptr [rdi], dword ptr [rsi]; std; call qword ptr [rdx]; 
0x00000000001782e1: cmpsd dword ptr [rsi], dword ptr [rdi]; std; jmp qword ptr [rax - 0x57]; 
0x0000000000186421: cmpsd dword ptr [rsi], dword ptr [rdi]; std; jmp qword ptr [rsi - 0x58]; 
0x00000000001863bd: cmpsd dword ptr [rsi], dword ptr [rdi]; std; push qword ptr [rax + 0x60fffda4]; movsd dword ptr [rdi], dword ptr [rsi]; std; call qword ptr [rax - 0x5a]; 
0x00000000001aac29: cmpsd dword ptr [rsi], dword ptr [rdi]; sti; jmp qword ptr [rsi]; 
0x0000000000143965: cmpsd dword ptr [rsi], dword ptr [rdi]; sub al, 4; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000176955: cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x000000000019ae34: cmpsd dword ptr [rsi], dword ptr [rdi]; xor ebp, esi; jmp qword ptr [rdx]; 
0x00000000000038ad: cmpsq qword ptr [rsi], qword ptr [rdi]; ret 0x49ec; 
0x00000000000d0492: comiss xmm0, xmmword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000017945c: cqo; hlt; dec dword ptr [rcx]; sahf; hlt; call qword ptr [rsi - 0x67]; 
0x000000000003c8d3: cqo; idiv rsi; ret; 
0x0000000000038798: cqo; pop r14; idiv r9; pop r15; ret; 
0x00000000000ece74: cvtps2pi mm0, qword ptr [rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecea8: cvtps2pi mm0, qword ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018d17d: cwde; add al, byte ptr [rax]; mov ah, 0x87; stc; jmp rsp; 
0x000000000018d175: cwde; add al, byte ptr [rax]; xchg ecx, r15d; ljmp ptr [rax + rbx*4 - 0x784bfffe]; stc; jmp rsp; 
0x0000000000075a91: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000127c4f: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000078daf: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000001f58e: cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000485eb: cwde; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0xd7e9; 
0x0000000000022fd9: cwde; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000003d0c4: cwde; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x00000000000eca55: cwde; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000014d847: cwde; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000054b87: cwde; add rax, rdx; jmp rax; 
0x00000000001aff24: cwde; and dh, dh; jmp qword ptr [rdx]; 
0x0000000000023425: cwde; call rcx; 
0x00000000001ac3c8: cwde; cld; cmc; call qword ptr [rax]; 
0x0000000000178f5c: cwde; fpatan; jmp qword ptr [rsi]; 
0x0000000000179435: cwde; hlt; jmp rsp; 
0x00000000001955f1: cwde; in eax, dx; jmp rsi; 
0x00000000001a1de8: cwde; int1; call qword ptr [rbp]; 
0x00000000001ab018: cwde; loope 0x1ab010; jmp qword ptr [rcx + 0x4000001]; 
0x00000000000ebaaf: cwde; mov esi, 0x10; mov rdi, r10; mov eax, r9d; syscall; 
0x00000000000f04ac: cwde; mov qword ptr [rbx + 0x48], rax; pop rbx; ret; 
0x000000000012207f: cwde; mov qword ptr [rbx], rax; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x00000000001a4b98: cwde; movsxd rsi, esp; jmp qword ptr [rax]; 
0x00000000000d0b60: cwde; movzx eax, byte ptr [rdx + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000004dd87: cwde; movzx edx, byte ptr [rdx + rax]; lea rax, qword ptr [rip + 0x128fed]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x000000000010bfc7: cwde; nop dword ptr [rax + rax]; mov rax, rdi; add rsp, 8; ret; 
0x00000000000d1ece: cwde; or qword ptr [rdi + 0x90], rax; xor eax, eax; ret; 
0x000000000007ffc4: cwde; out 0x33, eax; add byte ptr [rax + 0x39], cl; ror dword ptr [rdi], cl; xchg eax, ebp; ret 0x8348; 
0x000000000019c5c1: cwde; out dx, al; call qword ptr [rbx]; 
0x000000000019c5e1: cwde; out dx, al; call qword ptr [rdx]; 
0x00000000001a8998: cwde; pop rbp; cmc; call qword ptr [rdx]; 
0x000000000018c930: cwde; push -8; jmp rsp; 
0x000000000001b050: cwde; ret 0x3b; 
0x0000000000003ab1: cwde; ret; 
0x00000000001180de: cwde; shr rax, 4; ret; 
0x0000000000186389: cwde; sti; jmp qword ptr [rax]; 
0x00000000000fb3cc: cwde; sub ch, byte ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001797e0: cwde; wait; hlt; call rsi; 
0x000000000017937c: cwde; xchg eax, ebp; hlt; call rax; 
0x0000000000194e88: cwde; xchg eax, ebp; in eax, dx; jmp qword ptr [rax]; 
0x00000000000fb39e: dec ah; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0x2f; syscall; 
0x000000000005f8bc: dec byte ptr [r15]; xchg eax, esp; ret 0xd284; 
0x000000000009b8c9: dec byte ptr [r8 + 0x29]; ret 0x149; 
0x00000000000998b1: dec byte ptr [r8 + 0x29]; ret 0x280f; 
0x000000000009b8ca: dec byte ptr [rax + 0x29]; ret 0x149; 
0x00000000000998b2: dec byte ptr [rax + 0x29]; ret 0x280f; 
0x0000000000085d75: dec byte ptr [rax + 0x39]; ret 0x3574; 
0x0000000000135c59: dec byte ptr [rax - 0x75]; cmp al, 0x24; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x000000000008557e: dec byte ptr [rax - 0x77]; and byte ptr [r8 + 0x31], r9b; ret 0x93be; 
0x00000000000850f7: dec byte ptr [rax - 0x77]; and byte ptr [rax + 0x31], cl; ret 0x93be; 
0x0000000000049717: dec byte ptr [rax - 0x77]; clc; cmovae rax, rsi; pop rbx; ret; 
0x00000000000497f3: dec byte ptr [rax - 0x77]; clc; cmovae rax, rsi; ret; 
0x000000000008674b: dec byte ptr [rax - 0x77]; cmp byte ptr [r9 + r9*4 + 0x43], cl; mov qword ptr [rbx], rdi; mov dword ptr [rbx + 0x30], eax; call rcx; 
0x0000000000075cb5: dec byte ptr [rax - 0x77]; fisttp word ptr [rcx + rbp - 6]; call qword ptr [rax + 0x70]; 
0x00000000000399ff: dec byte ptr [rax - 0x77]; ret 0x8948; 
0x00000000000419ad: dec byte ptr [rax - 0x77]; ret; 
0x0000000000056dca: dec byte ptr [rax - 0x7d]; ret 0xf01; 
0x00000000000c39d8: dec byte ptr [rax - 0x7d]; ret; 
0x00000000000f024e: dec byte ptr [rcx + 0xfa6f3d8]; xchg eax, edi; ror dword ptr [rdi], -0x6e; ret 0xcc80; 
0x00000000000fc0ce: dec byte ptr [rcx + rcx*4 - 0x31]; mov eax, 0x14; syscall; 
0x000000000012b54a: dec byte ptr [rcx + rcx*4 - 9]; call qword ptr [rdx + 0x18]; 
0x000000000005ec3f: dec byte ptr [rcx + rcx*4 - 9]; sub r12, r15; mov r13, r12; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000000f3c50: dec byte ptr [rcx]; add byte ptr [rax], al; ret; 
0x000000000004a5ae: dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x000000000009540b: dec dword ptr [r13 - 0x77]; ret; 
0x0000000000049b6e: dec dword ptr [r8 - 0x7d]; ret 0x8801; 
0x000000000009683f: dec dword ptr [r9 - 0x76b706b9]; clc; ret; 
0x000000000009ba4a: dec dword ptr [rax + 0x29]; ret 0x149; 
0x00000000000999f2: dec dword ptr [rax + 0x29]; ret 0x280f; 
0x00000000000388f1: dec dword ptr [rax + 0x29]; ret 0x8948; 
0x00000000000a9849: dec dword ptr [rax + 0x29]; ret 0x894c; 
0x00000000000c43f7: dec dword ptr [rax + 0x29]; ret 0x8d48; 
0x0000000000094099: dec dword ptr [rax + 0x29]; ret; 
0x0000000000078895: dec dword ptr [rax + 0x39]; ret 0x830f; 
0x00000000000b28ff: dec dword ptr [rax + 0x39]; ret 0x840f; 
0x0000000000112c47: dec dword ptr [rax + 0x39]; ret 0x870f; 
0x0000000000028063: dec dword ptr [rax + 0x39]; ret; 
0x00000000001898d3: dec dword ptr [rax + 0x51180001]; out dx, eax; call rsp; 
0x00000000000fc62b: dec dword ptr [rax + 0x63]; fisttp dword ptr [rax - 0x77]; sbb eax, 0x2c1cca; pop rbx; ret; 
0x000000000003f9fe: dec dword ptr [rax + 0x63]; ret 0x3ce9; 
0x00000000000e48ea: dec dword ptr [rax + 0x63]; ret 0x8d48; 
0x00000000000427a1: dec dword ptr [rax + 0x63]; ret 0xf9e9; 
0x00000000000ddbd7: dec dword ptr [rax + 0x63]; ret; 
0x00000000000f4860: dec dword ptr [rax + 0x63]; std; mov eax, 3; syscall; 
0x00000000000edccd: dec dword ptr [rax + 0x63]; sti; mov al, 3; syscall; 
0x0000000000118c70: dec dword ptr [rax + 0x63]; sti; mov eax, 3; syscall; 
0x00000000000f1f6e: dec dword ptr [rax + 0x63]; sti; mov edx, eax; mov eax, 3; syscall; 
0x000000000008a989: dec dword ptr [rax + 0xf]; mov ebp, 0xf80148c6; ret; 
0x000000000008ca84: dec dword ptr [rax + 0xf]; mov esp, 0x440f48c7; ret 0xc083; 
0x0000000000036dac: dec dword ptr [rax + 0xf]; sar dword ptr [r9 + 0xd], 0x48; mov esi, eax; mov eax, ecx; syscall; 
0x0000000000059cdc: dec dword ptr [rax + 1]; ret; 
0x000000000018660f: dec dword ptr [rax - 0x24]; sti; call qword ptr [rax]; 
0x000000000012ae59: dec dword ptr [rax - 0x2d]; ret 0x2148; 
0x00000000000377d3: dec dword ptr [rax - 0x2d]; ror byte ptr [rax + 0x21], 7; xor eax, eax; ret; 
0x000000000005b94e: dec dword ptr [rax - 0x39]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x42e8; 
0x000000000016500b: dec dword ptr [rax - 0x39]; add eax, 0x25ae41; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000164bc6: dec dword ptr [rax - 0x39]; add eax, 0x25af0e; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001651f2: dec dword ptr [rax - 0x39]; add eax, 0x25bc52; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000001653c8: dec dword ptr [rax - 0x39]; add eax, 0x25d44c; add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000cca8d: dec dword ptr [rax - 0x39]; mov r8b, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000037747: dec dword ptr [rax - 0x39]; push -1; mov qword ptr [rdi + 0x70], -1; mov qword ptr [rdi + 0x78], -1; ret; 
0x00000000000e4a75: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000005a6e7: dec dword ptr [rax - 0x39]; ret; 
0x00000000000fa4f6: dec dword ptr [rax - 0x3f]; call 0x9cfd50a; clc; ret; 
0x00000000000f04aa: dec dword ptr [rax - 0x68]; mov qword ptr [rbx + 0x48], rax; pop rbx; ret; 
0x00000000000f25d4: dec dword ptr [rax - 0x73]; adc cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x00000000000cb76b: dec dword ptr [rax - 0x73]; adc eax, 0xfffffedd; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000a1b1a: dec dword ptr [rax - 0x73]; add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000000bcb30: dec dword ptr [rax - 0x73]; add al, 0xd0; add rsp, 0x10; pop rbx; ret; 
0x0000000000092ba0: dec dword ptr [rax - 0x73]; add eax, 0xfffffad8; add rsp, 8; ret; 
0x000000000006d009: dec dword ptr [rax - 0x73]; call 0x4163116d; pop rbp; pop rbp; ret; 
0x00000000000a389f: dec dword ptr [rax - 0x73]; cld; pop rbx; ret; 
0x00000000000bf3ae: dec dword ptr [rax - 0x73]; cmp cl, byte ptr [rax - 0x7f]; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x48c; 
0x00000000000c08ad: dec dword ptr [rax - 0x73]; cmp cl, byte ptr [rax - 0x7f]; in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x000000000012ab8d: dec dword ptr [rax - 0x73]; cmp eax, 0x298ccb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ee0d: dec dword ptr [rax - 0x73]; cmp eax, 0x2a486b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011bccd: dec dword ptr [rax - 0x73]; cmp eax, 0x2a76fb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000010ad75: dec dword ptr [rax - 0x73]; cmp eax, 0x2b7a23; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f249d: dec dword ptr [rax - 0x73]; cmp eax, 0x2cf08b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d048d: dec dword ptr [rax - 0x73]; cmp eax, 0x2f0f2b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008aca5: dec dword ptr [rax - 0x73]; cmp eax, 0x335fb3; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000004916d: dec dword ptr [rax - 0x73]; cmp eax, 0x37777b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000004a000: dec dword ptr [rax - 0x73]; lea eax, dword ptr [rax + 0x48fffffb]; mov dword ptr [rbp - 0x5b0], ecx; jmp rax; 
0x0000000000047d38: dec dword ptr [rax - 0x73]; lodsd eax, dword ptr [rsi]; add byte ptr [rax + 0x63], cl; ror byte ptr [rax - 0x7d], cl; ret; 
0x0000000000112c3d: dec dword ptr [rax - 0x73]; push rax; add dword ptr [rbx - 0x2037b], ecx; dec dword ptr [rax + 0x39]; ret 0x870f; 
0x00000000000df25b: dec dword ptr [rax - 0x75]; adc byte ptr [r8 + 0x39], cl; ret 0x574; 
0x0000000000123d33: dec dword ptr [rax - 0x75]; adc eax, 0; add byte ptr [rax], al; mov dword ptr [rbx + 0xa8], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x00000000000869ef: dec dword ptr [rax - 0x75]; adc eax, 0x337551; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x0000000000031e05: dec dword ptr [rax - 0x75]; adc eax, 0x392203; lea rdi, qword ptr [rip + 0x38deec]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000004bf2c: dec dword ptr [rax - 0x75]; add byte ptr [rcx - 0x77], cl; add bl, ch; ret; 
0x000000000015a80a: dec dword ptr [rax - 0x75]; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000001355df: dec dword ptr [rax - 0x75]; add eax, 0x288881; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000010a284: dec dword ptr [rax - 0x75]; add eax, 0x2b3bdc; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x0000000000107e84: dec dword ptr [rax - 0x75]; add eax, 0x2bc114; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000fd41f: dec dword ptr [rax - 0x75]; add eax, 0x2c0a39; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000000bcddc: dec dword ptr [rax - 0x75]; add eax, 0x301084; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000c10c7: dec dword ptr [rax - 0x75]; add eax, 0x302f99; mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc708: dec dword ptr [rax - 0x75]; add eax, 0x3078f8; lea rdi, qword ptr [rip + 0x3033e9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc6e6: dec dword ptr [rax - 0x75]; add eax, 0x307922; lea rdi, qword ptr [rip + 0x30340b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000080a66: dec dword ptr [rax - 0x75]; add eax, 0x33d34a; xor edi, edi; call qword ptr [rax]; 
0x0000000000036ebc: dec dword ptr [rax - 0x75]; add eax, 0x386fa4; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x0000000000031e32: dec dword ptr [rax - 0x75]; add eax, 0x3921ce; lea rdi, qword ptr [rip + 0x38debf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031b8e: dec dword ptr [rax - 0x75]; add eax, 0x39247a; lea rdi, qword ptr [rip + 0x38e0e3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aed: dec dword ptr [rax - 0x75]; add eax, 0x39251b; lea rdi, qword ptr [rip + 0x38e204]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031acb: dec dword ptr [rax - 0x75]; add eax, 0x39252d; lea rdi, qword ptr [rip + 0x38e1a6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aa0: dec dword ptr [rax - 0x75]; add eax, 0x392558; lea rdi, qword ptr [rip + 0x38e051]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a7e: dec dword ptr [rax - 0x75]; add eax, 0x39257a; lea rdi, qword ptr [rip + 0x38e273]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031462: dec dword ptr [rax - 0x75]; add eax, 0x392ba6; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000312c5: dec dword ptr [rax - 0x75]; add eax, 0x392d3b; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030e67: dec dword ptr [rax - 0x75]; add eax, 0x3931a1; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030dbb: dec dword ptr [rax - 0x75]; add eax, 0x39323d; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030d98: dec dword ptr [rax - 0x75]; add eax, 0x393270; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f5c8: dec dword ptr [rax - 0x75]; add eax, 0x394a40; lea rdi, qword ptr [rip + 0x390529]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f576: dec dword ptr [rax - 0x75]; add eax, 0x394a92; lea rdi, qword ptr [rip + 0x39057b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f464: dec dword ptr [rax - 0x75]; add eax, 0x394b9c; lea rdi, qword ptr [rip + 0x39068d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d74c: dec dword ptr [rax - 0x75]; add eax, 0x3968bc; lea rdi, qword ptr [rip + 0x3923a5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d72a: dec dword ptr [rax - 0x75]; add eax, 0x3968de; lea rdi, qword ptr [rip + 0x3923c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d493: dec dword ptr [rax - 0x75]; add eax, 0x396b75; lea rdi, qword ptr [rip + 0x39265e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002211b: dec dword ptr [rax - 0x75]; add eax, 0x39d93d; mov rdi, qword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x0000000000021f52: dec dword ptr [rax - 0x75]; add eax, 0x3a20f6; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f531c: dec dword ptr [rax - 0x75]; and al, 8; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x000000000012e995: dec dword ptr [rax - 0x75]; cmp byte ptr [rax - 0x77], cl; ret; 
0x0000000000083dee: dec dword ptr [rax - 0x75]; cmp cl, byte ptr [rbx + rcx*4 + 0x47]; or byte ptr [rbp - 0x77], cl; ret; 
0x0000000000086a07: dec dword ptr [rax - 0x75]; jnp 0x86a54; mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x000000000012785e: dec dword ptr [rax - 0x75]; jo 0x1278a8; mov dword ptr [rbx + 0x48], esi; bswap r14d; call qword ptr [rax + 0x18]; 
0x00000000000c39fc: dec dword ptr [rax - 0x75]; mov ebp, 0xfffffc08; call qword ptr [rax + 0x28]; 
0x00000000000cc5fd: dec dword ptr [rax - 0x75]; mov ebp, 0xffffff58; call rbx; 
0x0000000000120fa0: dec dword ptr [rax - 0x75]; or byte ptr [r14 + 8], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000012941b: dec dword ptr [rax - 0x75]; or byte ptr [r8 - 0x73], r9b; push rsp; and al, 0x10; mov esi, 6; call qword ptr [rax + 0x28]; 
0x00000000001202e7: dec dword ptr [rax - 0x75]; or byte ptr [r9 + r9*4 - 0xa], al; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x00000000000fa384: dec dword ptr [rax - 0x75]; or eax, 0x2c3adc; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000003c814: dec dword ptr [rax - 0x75]; push rbx; sbb byte ptr [rax - 0x75], cl; jnp 0x3c825; mov qword ptr [rax + 0x60], rdx; call qword ptr [rbx]; 
0x00000000000706ec: dec dword ptr [rax - 0x75]; sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000000738d1: dec dword ptr [rax - 0x75]; sbb eax, 0x48000000; mov esi, edi; mov rdx, rbp; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x00000000000af110: dec dword ptr [rax - 0x75]; sub r11b, r13b; test eax, 0xe2058d48; ret 0x30; 
0x0000000000076010: dec dword ptr [rax - 0x75]; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000073ce5: dec dword ptr [rax - 0x75]; xchg eax, esp; and al, 0xf0; add dword ptr [rax], eax; add byte ptr [rax - 0x7f], cl; ret; 
0x00000000000cc9d5: dec dword ptr [rax - 0x77]; add al, 0x24; call rbx; 
0x000000000011202d: dec dword ptr [rax - 0x77]; add eax, 0x2ad9b3; add rsp, 8; ret; 
0x00000000000f243d: dec dword ptr [rax - 0x77]; add eax, 0x2cd4db; add rsp, 8; ret; 
0x00000000000f3958: dec dword ptr [rax - 0x77]; add eax, 0x2cdcd0; add rsp, 8; ret; 
0x00000000000cc9c9: dec dword ptr [rax - 0x77]; and al, 0x10; mov rax, qword ptr [rbp - 0x120]; mov qword ptr [rsp], rax; call rbx; 
0x0000000000080a29: dec dword ptr [rax - 0x77]; and al, 0x20; mov qword ptr [rsp + 0x10], rcx; call rdx; 
0x00000000000f23d4: dec dword ptr [rax - 0x77]; and al, 0xb8; cmova r10, qword ptr [rax + 0x18]; mov eax, 0x65; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x000000000007def1: dec dword ptr [rax - 0x77]; and al, 8; call qword ptr [rax]; 
0x00000000000c970d: dec dword ptr [rax - 0x77]; call 0x60d11a5d; pop rbx; pop rbp; pop r12; ret; 
0x000000000008c728: dec dword ptr [rax - 0x77]; clc; ret; 
0x00000000000f8333: dec dword ptr [rax - 0x77]; cmp byte ptr [r8 + 3], dil; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f1196: dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000085fb4: dec dword ptr [rax - 0x77]; fimul dword ptr [rcx + rcx*4 - 0x12]; call rax; 
0x000000000012e3fc: dec dword ptr [rax - 0x77]; fimul word ptr [rax - 0x77]; out dx, eax; call rcx; 
0x0000000000121bad: dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; cmp ecx, ebx; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000000865f4: dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; sal byte ptr [rdx - 2], cl; jmp qword ptr [rsi - 0x70]; 
0x00000000000ba280: dec dword ptr [rax - 0x77]; fmul dword ptr [rax - 0x7d]; ret; 
0x00000000000213e3: dec dword ptr [rax - 0x77]; fmul dword ptr [rax - 1]; ret; 
0x00000000000357ad: dec dword ptr [rax - 0x77]; fucompi st(0); cmp bl, byte ptr [rbp - 0x3fce0002]; pop rbx; ret; 
0x00000000000cd2c0: dec dword ptr [rax - 0x77]; or r9b, r13b; ret 0xfff8; 
0x000000000007959a: dec dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rax + 0x18]; 
0x0000000000045549: dec dword ptr [rax - 0x77]; pushfq; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret; 
0x00000000001087ef: dec dword ptr [rax - 0x77]; ret 0x1376; 
0x00000000000c419f: dec dword ptr [rax - 0x77]; ret 0x19eb; 
0x000000000004c74b: dec dword ptr [rax - 0x77]; ret 0x1beb; 
0x00000000000c4fc7: dec dword ptr [rax - 0x77]; ret 0x1e73; 
0x00000000000c5016: dec dword ptr [rax - 0x77]; ret 0x1f73; 
0x0000000000105bd6: dec dword ptr [rax - 0x77]; ret 0x2b49; 
0x00000000000f10d1: dec dword ptr [rax - 0x77]; ret 0x2d77; 
0x00000000000e8a86: dec dword ptr [rax - 0x77]; ret 0x2e9; 
0x000000000004c5e7: dec dword ptr [rax - 0x77]; ret 0x31eb; 
0x0000000000072a0c: dec dword ptr [rax - 0x77]; ret 0x38b; 
0x000000000008275d: dec dword ptr [rax - 0x77]; ret 0x3d83; 
0x00000000000e81ce: dec dword ptr [rax - 0x77]; ret 0x3ee9; 
0x00000000000c5d23: dec dword ptr [rax - 0x77]; ret 0x4164; 
0x00000000000e7ca8: dec dword ptr [rax - 0x77]; ret 0x44c6; 
0x00000000000ededd: dec dword ptr [rax - 0x77]; ret 0x4574; 
0x00000000000e6e7e: dec dword ptr [rax - 0x77]; ret 0x4c6; 
0x00000000000fa6aa: dec dword ptr [rax - 0x77]; ret 0x5077; 
0x00000000000e6ee5: dec dword ptr [rax - 0x77]; ret 0x52e9; 
0x0000000000067ba3: dec dword ptr [rax - 0x77]; ret 0x54e8; 
0x00000000000c0911: dec dword ptr [rax - 0x77]; ret 0x676; 
0x00000000000c2e96: dec dword ptr [rax - 0x77]; ret 0x6b8; 
0x00000000000f094e: dec dword ptr [rax - 0x77]; ret 0x7577; 
0x0000000000080ad5: dec dword ptr [rax - 0x77]; ret 0x840f; 
0x0000000000131a5a: dec dword ptr [rax - 0x77]; ret 0x854d; 
0x0000000000050ae0: dec dword ptr [rax - 0x77]; ret 0x858b; 
0x0000000000036dc2: dec dword ptr [rax - 0x77]; ret 0x870f; 
0x00000000000721fa: dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000004a41c: dec dword ptr [rax - 0x77]; ret 0x894c; 
0x0000000000105548: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000004dd31: dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000c4f62: dec dword ptr [rax - 0x77]; ret 0x8d49; 
0x00000000000e8dca: dec dword ptr [rax - 0x77]; ret 0x8de9; 
0x00000000001326dc: dec dword ptr [rax - 0x77]; ret 0x9274; 
0x000000000005d7b3: dec dword ptr [rax - 0x77]; ret 0x98e9; 
0x000000000005d7ab: dec dword ptr [rax - 0x77]; ret 0xa0e9; 
0x0000000000051332: dec dword ptr [rax - 0x77]; ret 0xa9e9; 
0x00000000000b3eaf: dec dword ptr [rax - 0x77]; ret 0xb8e9; 
0x00000000000febbf: dec dword ptr [rax - 0x77]; ret 0xb9; 
0x0000000000127405: dec dword ptr [rax - 0x77]; ret 0xbfeb; 
0x00000000000847d1: dec dword ptr [rax - 0x77]; ret 0xcb8; 
0x00000000000f0ff3: dec dword ptr [rax - 0x77]; ret 0xd77; 
0x0000000000092f36: dec dword ptr [rax - 0x77]; ret 0xf0e9; 
0x000000000006eda0: dec dword ptr [rax - 0x77]; ret 0xf40; 
0x000000000005090e: dec dword ptr [rax - 0x77]; ret 0xf4a; 
0x0000000000121bda: dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x00000000000202e8: dec dword ptr [rax - 0x77]; ret; 
0x0000000000050a2c: dec dword ptr [rax - 0x77]; ror byte ptr [rax - 0x7d], 1; ret 0x4803; 
0x0000000000095a03: dec dword ptr [rax - 0x7b]; fisttp dword ptr [rax - 0x77]; ret 0x1e75; 
0x000000000009590a: dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000010accf: dec dword ptr [rax - 0x7b]; ror byte ptr [rax + 0xf], 0x45; ror byte ptr [rax - 0x77], 1; adc eax, 0x2b7ae2; pop rbp; ret; 
0x00000000000f4bac: dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 3; setne al; movzx eax, al; pop rbx; ret; 
0x000000000010e3f4: dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 5; xchg eax, ecx; adc eax, 0x8948002b; ret 0xb9; 
0x00000000000942fe: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000ddfb6: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 0; 
0x00000000000e0266: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 5; 
0x00000000000e9ef6: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x000000000015ed1f: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; cmpsd dword ptr [rsi], dword ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000015ecd9: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; in eax, dx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000009bd6e: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x0000000000021431: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x95; ret; 
0x00000000000f7c94: dec dword ptr [rax - 0x7b]; sal byte ptr [rbp - 0x3a], 0x49; movsxd rdi, edi; mov eax, 3; syscall; 
0x00000000000f7d66: dec dword ptr [rax - 0x7b]; sal byte ptr [rbp - 0x3c], 0x49; movsxd rdi, edi; mov al, 3; syscall; 
0x000000000012ab6a: dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rdx*8 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x00000000000a2c4b: dec dword ptr [rax - 0x7b]; sal byte ptr [rdi + 0x48], 0x89; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000001326d8: dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret 0x9274; 
0x0000000000132181: dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000022fd5: dec dword ptr [rax - 0x7d]; cwde; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000012aca3: dec dword ptr [rax - 0x7d]; mov eax, 0xe0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000c5331: dec dword ptr [rax - 0x7d]; mov ebp, 0xfffffe30; add byte ptr [rax - 0x77], cl; ret 0x775; 
0x0000000000026b49: dec dword ptr [rax - 0x7d]; ret 0x4101; 
0x000000000004c778: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x00000000000e7fbc: dec dword ptr [rax - 0x7d]; ret 0x4803; 
0x000000000012866a: dec dword ptr [rax - 0x7d]; ret 0x4807; 
0x0000000000038e91: dec dword ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000049b6f: dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x00000000000c70af: dec dword ptr [rax - 0x7d]; ret 0x8804; 
0x00000000000d4266: dec dword ptr [rax - 0x7d]; ret 0x8d01; 
0x0000000000067698: dec dword ptr [rax - 0x7d]; ret 0xe908; 
0x00000000000d7601: dec dword ptr [rax - 0x7d]; ret 0xeb01; 
0x000000000006cb5d: dec dword ptr [rax - 0x7d]; ret 0xeb02; 
0x000000000001fca0: dec dword ptr [rax - 0x7d]; ret 0xeb04; 
0x0000000000057dcb: dec dword ptr [rax - 0x7d]; ret 0xeb08; 
0x000000000002f271: dec dword ptr [rax - 0x7d]; ret; 
0x000000000011128b: dec dword ptr [rax - 0x7d]; rol byte ptr [rcx], 0x48; mov dword ptr [rbx + 0x30], eax; mov eax, 1; pop rbx; ret; 
0x000000000002d5fb: dec dword ptr [rax - 0x7d]; rol byte ptr [rcx], 0x83; ret 0x8301; 
0x0000000000057dc2: dec dword ptr [rax - 0x7d]; ror dword ptr [rax], -0x17; and ebp, 0x8348ffff; ret 0xeb08; 
0x000000000014c0fc: dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000072498: dec dword ptr [rax - 0x7f]; ret; 
0x000000000017a08f: dec dword ptr [rax]; test al, 0xf5; push rbp; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp rcx; 
0x0000000000066674: dec dword ptr [rbp + 0xf]; ror byte ptr [rbp + 1], 1; ret 0x8d4a; 
0x000000000005ffe1: dec dword ptr [rbp + rcx*4 + 0x14]; xchg eax, ebp; add byte ptr [rax], 0; add byte ptr [rcx + 1], cl; ret 0x3145; 
0x000000000009ec0d: dec dword ptr [rbp + rcx*4 + 0x1d]; sub ebx, dword ptr [rdx + 0x634b000d]; or al, 0x83; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000618aa: dec dword ptr [rbp + rcx*4 + 0x2d]; ret; 
0x000000000006189e: dec dword ptr [rbp + rcx*4 + 0x55]; rol byte ptr [rbp + 0x31], 1; in al, 0xe9; out 0xff, eax; dec dword ptr [rbp + rcx*4 + 0x2d]; ret; 
0x000000000003ffc4: dec dword ptr [rbp + rcx*4 - 0x6c]; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000189bd3: dec dword ptr [rbp + rsi - 0x2d6fffff]; out dx, eax; call rsp; 
0x00000000001793ff: dec dword ptr [rbp - 0x66]; hlt; call qword ptr [rdi - 0x66]; 
0x00000000001793ff: dec dword ptr [rbp - 0x66]; hlt; call qword ptr [rdi - 0x66]; hlt; jmp qword ptr [rcx - 0x66]; 
0x00000000000a74e9: dec dword ptr [rbp - 0x77]; fmul qword ptr [rcx - 0x77]; ret 0x23eb; 
0x000000000009540c: dec dword ptr [rbp - 0x77]; ret; 
0x00000000000ba3a6: dec dword ptr [rbp - 0x7b]; test byte ptr [rdi], 0x84; ret; 
0x00000000000ef124: dec dword ptr [rbp - 0x7bf0fea8]; ret 1; 
0x00000000000d8908: dec dword ptr [rbp - 0x7cb7febd]; ret; 
0x00000000000efade: dec dword ptr [rbx + 0x19e83c7d]; ret; 
0x0000000000105a21: dec dword ptr [rbx + 0x2b89643d]; add al, ch; ret; 
0x0000000000034615: dec dword ptr [rbx + 0x315c2444]; rol byte ptr [rbx - 0x77cfc20], cl; add ecx, dword ptr [rdi]; xchg eax, esp; ret 0x70e9; 
0x0000000000092b7f: dec dword ptr [rbx + 0x33107a05]; add byte ptr [rbp + 0x480e74c0], al; lea eax, dword ptr [rip - 0x511]; ret; 
0x000000000008aad8: dec dword ptr [rbx + 0x33959105]; add byte ptr [rbp + 0x480d75c0], al; add esp, 8; ret; 
0x00000000000d945d: dec dword ptr [rbx + 0x438d0455]; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000135f15: dec dword ptr [rbx + 0x480c2444]; add esp, 0x48; ret; 
0x000000000012b8d1: dec dword ptr [rbx + 0x527e83b]; cld; jmp qword ptr [rsi - 0x7d]; 
0x0000000000189b93: dec dword ptr [rbx + rsi + 1]; add byte ptr [rcx + rdx*8 + 0x3394ffef], ah; add dword ptr [rax], eax; ret; 
0x000000000018cd0b: dec dword ptr [rbx + rsi*2 - 0x18bbfffe]; clc; call rsp; 
0x00000000001794ff: dec dword ptr [rbx - 0x64]; hlt; call qword ptr [rbp - 0x64]; 
0x00000000000caccf: dec dword ptr [rbx - 0x76be77bb]; ret 0xdb84; 
0x00000000000c8a3c: dec dword ptr [rbx - 0x7aa7dbac]; ror byte ptr [rdi], cl; test byte ptr [rbx + rsi*8 + 0x2ae9ffff], al; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x00000000000ae2b2: dec dword ptr [rbx - 0x7aba4bab]; rol byte ptr [rcx + 0xf], cl; xchg eax, ebp; ret; 
0x00000000000ae2ac: dec dword ptr [rbx - 0xbb4b]; dec dword ptr [rbx - 0x7aba4bab]; rol byte ptr [rcx + 0xf], cl; xchg eax, ebp; ret; 
0x00000000000b3755: dec dword ptr [rcx + 0x29]; ret; 
0x000000000004b801: dec dword ptr [rcx + 0x39]; ret 0x850f; 
0x00000000000f716d: dec dword ptr [rcx + 0x506be8df]; hlt; jmp qword ptr [rsi + 0x66]; 
0x00000000000f714d: dec dword ptr [rcx + 0x508be8df]; hlt; jmp qword ptr [rsi + 0x66]; 
0x00000000000ee0a9: dec dword ptr [rcx + 0x63]; std; mov eax, 3; syscall; 
0x00000000000838be: dec dword ptr [rcx + 0x63]; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x00000000000e4a7c: dec dword ptr [rcx + 0x75b8c6]; add byte ptr [rax], al; mov rdi, rdx; syscall; 
0x00000000000f1925: dec dword ptr [rcx + 0x75b8fe]; add byte ptr [rax], al; mov rdi, rdx; syscall; 
0x00000000000e4aa9: dec dword ptr [rcx + 0x77b8c6]; add byte ptr [rax], al; mov rdi, rdx; syscall; 
0x00000000000f19c5: dec dword ptr [rcx + 0x77b8fe]; add byte ptr [rax], al; mov rdi, rdx; syscall; 
0x00000000000cb379: dec dword ptr [rcx + 0xf]; int1; mov eax, ecx; syscall; 
0x0000000000096612: dec dword ptr [rcx + 1]; ret; 
0x000000000017945b: dec dword ptr [rcx + rbx*4 - 0xc]; dec dword ptr [rcx]; sahf; hlt; call qword ptr [rsi - 0x67]; 
0x00000000001443de: dec dword ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001281ee: dec dword ptr [rcx + rcx*4 - 0x11]; add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x0000000000128221: dec dword ptr [rcx + rcx*4 - 0x11]; mov rcx, qword ptr [rbp - 0x168]; call rcx; 
0x0000000000060da2: dec dword ptr [rcx + rcx*4 - 0x12]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000004b7ea: dec dword ptr [rcx + rcx*4 - 0x12]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000cc5e9: dec dword ptr [rcx + rcx*4 - 0x17]; mov r8, qword ptr [rbp - 0xc0]; mov rdx, r14; mov rsi, qword ptr [rbp - 0xb0]; mov rdi, qword ptr [rbp - 0xa8]; call rbx; 
0x000000000002eb90: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, r14; call 0xf48a0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x00000000000fc27b: dec dword ptr [rcx + rcx*4 - 0x31]; mov eax, 3; syscall; 
0x00000000000fc10d: dec dword ptr [rcx + rcx*4 - 0x31]; movsxd rdx, edx; mov eax, 0x14; syscall; 
0x000000000006041d: dec dword ptr [rcx + rcx*4 - 0x3a]; mov qword ptr [rbp - 0x10e8], r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000062e07: dec dword ptr [rcx + rcx*4 - 0x3a]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000050a59: dec dword ptr [rcx + rcx*4 - 0x3e]; mov qword ptr [rbp - 0xb0], r8; mov rdi, rbx; call rax; 
0x00000000000cc5f3: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, qword ptr [rbp - 0xb0]; mov rdi, qword ptr [rbp - 0xa8]; call rbx; 
0x00000000000cb4ea: dec dword ptr [rcx + rcx*4 - 0xe]; movsxd rdi, eax; mov rsi, r15; mov eax, 0xcc; syscall; 
0x0000000000065a99: dec dword ptr [rcx + rcx*4 - 0xe]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x000000000005ed25: dec dword ptr [rcx + rcx*4 - 0xe]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000074dc3: dec dword ptr [rcx + rcx*4 - 1]; call qword ptr [rax + 0x18]; 
0x00000000000f5c67: dec dword ptr [rcx + rcx*4 - 1]; mov edx, 4; mov esi, 1; call rbx; 
0x0000000000055fbb: dec dword ptr [rcx + rcx*4 - 6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x00000000001287c4: dec dword ptr [rcx + rcx*4 - 8]; lea rsi, qword ptr [r12 + 0x18]; mov r15, r14; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000060427: dec dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x00000000000c3d67: dec dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x40]; 
0x000000000002e5eb: dec dword ptr [rcx + rcx*4 - 9]; mov ax, 3; syscall; 
0x0000000000136252: dec dword ptr [rcx + rcx*4 - 9]; mov r9d, dword ptr [rdx]; mov rdx, r12; add r9, r11; call rax; 
0x00000000000fcee2: dec dword ptr [rcx - 0x1077b]; jmp qword ptr [rsi + 0xf]; 
0x000000000019b464: dec dword ptr [rcx - 0x12]; jmp qword ptr [rdx]; 
0x00000000000c464c: dec dword ptr [rcx - 0x1c77b]; inc dword ptr [rbx - 0x1c773]; jmp qword ptr [rax]; 
0x000000000012f6c4: dec dword ptr [rcx - 0x39]; ret 0xffff; 
0x00000000000507b3: dec dword ptr [rcx - 0x39]; ret; 
0x000000000018dc6b: dec dword ptr [rcx - 0x3efefffe]; cli; call rsp; 
0x000000000005fa6d: dec dword ptr [rcx - 0x3f]; cli; add cl, byte ptr [rcx + rcx*4 - 0x2e]; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x000000000012f1f2: dec dword ptr [rcx - 0x647bf03f]; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000001793c7: dec dword ptr [rcx - 0x65]; hlt; call qword ptr [rbx - 0x65]; 
0x0000000000126048: dec dword ptr [rcx - 0x75]; and al, 8; lea rsi, qword ptr [rbp + 0x18]; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000012602d: dec dword ptr [rcx - 0x75]; and al, 8; mov rsi, rsp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x00000000000f536e: dec dword ptr [rcx - 0x75]; cmp al, 0x24; call rbx; 
0x0000000000105617: dec dword ptr [rcx - 0x75]; cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x000000000012b4e3: dec dword ptr [rcx - 0x75]; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x28]; 
0x00000000001027d6: dec dword ptr [rcx - 0x75]; push rdi; sbb byte ptr [rax - 0x77], cl; ret; 
0x00000000000cfee3: dec dword ptr [rcx - 0x75]; push rdi; sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000000749d8: dec dword ptr [rcx - 0x75]; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000096840: dec dword ptr [rcx - 0x76b706b9]; clc; ret; 
0x00000000000232d7: dec dword ptr [rcx - 0x77]; fmul qword ptr [rax - 0x77]; ret; 
0x0000000000095fd8: dec dword ptr [rcx - 0x77]; ret 0x5be9; 
0x00000000000ae871: dec dword ptr [rcx - 0x77]; ret 0x5ee9; 
0x000000000004e1c4: dec dword ptr [rcx - 0x77]; ret 0x840f; 
0x000000000004b9d3: dec dword ptr [rcx - 0x77]; ret 0x850f; 
0x0000000000056670: dec dword ptr [rcx - 0x77]; ret 0x8b48; 
0x0000000000060342: dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x000000000005738e: dec dword ptr [rcx - 0x77]; ret 0xfae9; 
0x000000000007dea0: dec dword ptr [rcx - 0x77]; salc; call qword ptr [rax]; 
0x000000000010a602: dec dword ptr [rcx - 0x7b74b73b]; and al, 0xd8; add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x10]; 
0x0000000000068f21: dec dword ptr [rcx - 0x7cb769fc]; ret 0x4801; 
0x00000000000e54c5: dec dword ptr [rcx - 0x7d]; add byte ptr ds:[rdi], cl; test byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000c801f: dec dword ptr [rcx - 0x7d]; ret 0x4101; 
0x00000000000a643a: dec dword ptr [rcx - 0x7d]; ret 0x4104; 
0x00000000000979f8: dec dword ptr [rcx - 0x7d]; ret 0x8401; 
0x00000000000c914e: dec dword ptr [rcx - 0x7d]; ret 0xe901; 
0x00000000000279f7: dec dword ptr [rcx - 0x7d]; ret; 
0x00000000000fcedc: dec dword ptr [rcx - 0xff6b]; dec dword ptr [rcx - 0x1077b]; jmp qword ptr [rsi + 0xf]; 
0x000000000018780f: dec dword ptr [rcx - 4]; push rdx; test al, 0xfc; push qword ptr [rdx - 0x58]; cld; jmp rdx; 
0x00000000000fa4e5: dec dword ptr [rcx]; clc; ret; 
0x00000000001052eb: dec dword ptr [rcx]; ret; 
0x000000000017945f: dec dword ptr [rcx]; sahf; hlt; call qword ptr [rsi - 0x67]; 
0x000000000017945f: dec dword ptr [rcx]; sahf; hlt; call qword ptr [rsi - 0x67]; hlt; jmp qword ptr [rax - 0x67]; 
0x00000000000fd926: dec dword ptr [rcx]; setbe al; ret; 
0x000000000018af7b: dec dword ptr [rdi + rax*8 + 1]; add byte ptr [rdi + rdi*4], dl; cmc; call qword ptr [rdi + rax*8 - 0x405bffff]; cmc; call rsp; 
0x000000000018ca5b: dec dword ptr [rdi + rbx*2 + 2]; add ah, ah; cmp al, 0xff; fcomp qword ptr [rdi + 2]; add byte ptr [rbx + rax*4 - 8], dh; call rsp; 
0x000000000018c873: dec dword ptr [rdi + rcx*2 + 2]; add byte ptr [rax + rbx*2 - 8], al; call rsp; 
0x000000000018d063: dec dword ptr [rdi + rcx*4 + 2]; add byte ptr [rcx + rbp*2], ah; stc; call rsp; 
0x000000000018c5fb: dec dword ptr [rdi + rdi + 0x2bd40002]; clc; call rsp; 
0x000000000017955f: dec dword ptr [rdi - 0x63]; hlt; lcall ptr [rbx - 0x63]; hlt; jmp qword ptr [rbp - 0x63]; 
0x00000000000fa4dd: dec dword ptr [rdi]; add byte ptr [rax], al; and eax, 0xfffff000; or eax, edi; ret; 
0x00000000000a17c8: dec dword ptr [rdi]; add byte ptr [rax], al; pop rbp; lea rax, qword ptr [r9 + 1]; pop r12; ret; 
0x0000000000179c69: dec dword ptr [rdi]; cld; jmp qword ptr [rsi]; 
0x00000000000bd305: dec dword ptr [rdi]; mov bh, 0x43; adc byte ptr [rax + rcx*4 + 0x63], al; adc cl, byte ptr [rax + 1]; ret; 
0x0000000000118cbc: dec dword ptr [rdi]; mov bh, 0x4a; adc cl, byte ptr [rbp - 0x2ff4f]; jmp qword ptr [rsi - 0x7d]; 
0x0000000000047e3b: dec dword ptr [rdi]; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000964f9: dec dword ptr [rdi]; mov dh, 0x45; ret 0x8348; 
0x00000000000962d1: dec dword ptr [rdi]; mov dh, 0x45; ret 0x8349; 
0x00000000000962e4: dec dword ptr [rdi]; mov dh, 0x45; ret; 
0x000000000006cd82: dec dword ptr [rdi]; mov dh, 0x53; or al, 0xf6; ret 0x7404; 
0x00000000000b5fc2: dec dword ptr [rdi]; mov dh, 0xd0; lea rax, qword ptr [rip + 0xc2efb]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000b52fd: dec dword ptr [rdi]; mov dh, 0xd0; lea rax, qword ptr [rip + 0xc3ae4]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000970a0: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, r8; ret; 
0x000000000008ca74: dec dword ptr [rdi]; mov esp, 0xc2440fc7; add eax, 1; ret; 
0x00000000001794e7: dec dword ptr [rdi]; pushfq; hlt; ljmp ptr [rcx - 0x65]; hlt; jmp qword ptr [rbx]; 
0x000000000002ef7d: dec dword ptr [rdi]; ror byte ptr [r8 - 0x73], 1; add eax, 0x390c98; mov byte ptr [rip + 0x390cef], dl; ret; 
0x0000000000061657: dec dword ptr [rdi]; test al, ch; out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x00000000001143f1: dec dword ptr [rdi]; test bl, ah; add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x840f; 
0x0000000000030446: dec dword ptr [rdi]; test bl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7bf0ffc1], al; ret 0; 
0x00000000000d8902: dec dword ptr [rdi]; test byte ptr [rbx - 0x72000003], bh; add dword ptr [r8 - 0x7d], ecx; ret; 
0x000000000006dc50: dec dword ptr [rdi]; test byte ptr [rcx - 0x76ffffff], cl; ret 0xe283; 
0x0000000000113c04: dec dword ptr [rdi]; test byte ptr [rdx], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x00000000000210cc: dec dword ptr [rdi]; test dl, bl; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x894c; 
0x00000000000fb74e: dec dword ptr [rdi]; test dword ptr [rbx], ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000587f0: dec dword ptr [rdi]; test dword ptr [rbx], ebp; ret; 
0x00000000000634e1: dec dword ptr [rdi]; test dword ptr [rdi + rax*8 + 0x6ae9ffff], esi; ret 0xffff; 
0x00000000001639d0: dec dword ptr [rdi]; test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000597ce: dec dword ptr [rdi]; xchg dword ptr [rcx - 0x77000000], edi; ret 0x348; 
0x0000000000058e90: dec dword ptr [rdi]; xchg dword ptr [rdi - 0x77000000], ebp; ret 0x348; 
0x0000000000059009: dec dword ptr [rdi]; xchg dword ptr [rsi - 0x77000000], esp; ret 0x348; 
0x00000000000cb7ec: dec dword ptr [rdi]; xchg eax, ebp; ret 0x460f; 
0x0000000000032dfa: dec dword ptr [rdi]; xchg eax, ebp; ret 0x9be9; 
0x0000000000048f07: dec dword ptr [rdi]; xchg eax, ebp; ret 0xc031; 
0x0000000000032a9a: dec dword ptr [rdi]; xchg eax, ebp; ret 0xd284; 
0x00000000000b9f76: dec dword ptr [rdi]; xchg eax, esi; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000000eea30: dec dword ptr [rdi]; xchg eax, esp; ret 0x7c83; 
0x00000000000c3e83: dec dword ptr [rdi]; xchg eax, esp; ret 0x8548; 
0x000000000007194c: dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x000000000007faf9: dec dword ptr [rdi]; xchg eax, esp; ret 0xee9; 
0x000000000004d62e: dec dword ptr [rdi]; xchg eax, esp; shr eax, -0x57; ret 0xffff; 
0x000000000018d7a3: dec dword ptr [rdx + rax*8 + 2]; add ah, dh; cli; inc dword ptr [rdx + rax*8 + 0x41640002]; cli; call rsp; 
0x000000000018a263: dec dword ptr [rdx + rbp*2 - 0x489bffff]; int1; push qword ptr [rdx + rbp*2 - 0x485bffff]; int1; jmp rsp; 
0x000000000018c9db: dec dword ptr [rdx + rbx*2 + 0x76ea0002]; clc; call rsp; 
0x000000000005042f: dec dword ptr [rdx - 0x73]; push rsp; add cl, byte ptr es:[rax + 1]; ret 0x8348; 
0x000000000018cff3: dec dword ptr [rsi + rax*4 + 0x5d3d0002]; stc; call rsp; 
0x0000000000188be3: dec dword ptr [rsi + rcx*8 + 0x608f0000]; out dx, al; call rsp; 
0x000000000018c95b: dec dword ptr [rsi + rdx*2 + 0x6d350002]; clc; call rsp; 
0x0000000000189ad3: dec dword ptr [rsp + rbp - 0x311cffff]; out dx, eax; call rsp; 
0x000000000018ca13: dec dword ptr [rsp + rbx*2 + 0x78f90002]; clc; call rsp; 
0x000000000018888b: dec dword ptr [rsp + rsi*4 + 0x195f0000]; in al, dx; call rsp; 
0x00000000001781af: dec eax; cdq; int1; jmp rax; 
0x000000000018648b: dec ebx; lodsd eax, dword ptr [rsi]; std; call qword ptr [rax - 0x52]; 
0x000000000018648b: dec ebx; lodsd eax, dword ptr [rsi]; std; call qword ptr [rax - 0x52]; std; jmp rax; 
0x0000000000039a9d: dec ecx; ret; 
0x00000000001794cb: dec ecx; wait; hlt; call rbx; 
0x0000000000179143: dec edx; add al, 0xf4; call qword ptr [rdi]; 
0x000000000018774b: dec edx; stosd dword ptr [rdi], eax; cld; push qword ptr [rax - 0x55]; cld; jmp rax; 
0x0000000000186b4f: dec esi; pop rdi; cld; call qword ptr [rax + 0x66]; 
0x0000000000186b4f: dec esi; pop rdi; cld; call qword ptr [rax + 0x66]; cld; jmp rax; 
0x000000000018c5d3: dec esp; add al, byte ptr ds:[rax]; push rsp; sub al, bh; jmp rsp; 
0x000000000018a1c3: dec esp; add word ptr [rax], ax; and al, 0x87; int1; jmp rsp; 
0x000000000018b403: dec esp; fiadd word ptr [rcx]; add ah, dl; mov esi, esi; jmp rsp; 
0x000000000018b583: dec esp; in eax, 1; add byte ptr [rsp - 0xa], dl; jmp rsp; 
0x000000000018baab: dec esp; inc dword ptr [rcx]; add ah, dh; sub al, 0xf7; jmp rsp; 
0x000000000018ad73: dec esp; mov bl, 1; add byte ptr [rcx + rdx*4], dh; hlt; jmp rsp; 
0x000000000017c0af: dec esp; mov dh, 0xfa; jmp rsp; 
0x000000000018810b: dec esp; mov eax, dword ptr [rax]; add byte ptr [rsp + rbp*8 - 0x16], ah; jmp rsp; 
0x000000000018a31b: dec esp; outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; in al, 0xcf; int1; jmp rsp; 
0x000000000018af03: dec esp; ret 1; 
0x0000000000188a73: dec esp; ret; 
0x000000000018ba1b: dec esp; std; add dword ptr [rax], eax; sub dil, r14b; jmp rsp; 
0x000000000018c233: dec esp; sub al, byte ptr [rdx]; add byte ptr [rdi + rdi*8 - 9], al; jmp rsp; 
0x0000000000189823: dec esp; sub byte ptr [rcx], al; add byte ptr [rsi + rcx*2 - 0x11], dh; jmp rsp; 
0x000000000018c303: dec esp; sub eax, 0x4340002; clc; jmp rsp; 
0x000000000018a6ab: dec esp; xchg byte ptr [rcx], al; add byte ptr [rsi + rax - 0xd], dh; jmp rsp; 
0x000000000018d0bb: dec esp; xchg eax, ebx; add al, byte ptr [rax]; in al, 0x71; stc; jmp rsp; 
0x000000000009ba49: dec qword ptr [r8 + 0x29]; ret 0x149; 
0x00000000000999f1: dec qword ptr [r8 + 0x29]; ret 0x280f; 
0x00000000000979f7: dec qword ptr [r9 - 0x7d]; ret 0x8401; 
0x000000000009bd6d: dec qword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x0000000000027a40: dec qword ptr [rax - 0x7d]; ret 0x4101; 
0x00000000000279f6: dec qword ptr [rcx - 0x7d]; ret; 
0x0000000000178085: div al; jmp rax; 
0x00000000000b185d: div byte ptr [rax]; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x3145; 
0x0000000000003144: div byte ptr [rax]; lodsb al, byte ptr [rsi]; xor dh, bh; xor byte ptr [rdx + rsi - 0x11fc0c82], ch; mov eax, 0xa1a3e95a; ret 0xba88; 
0x0000000000036c11: div byte ptr [rbp + 0x34]; mov eax, 0xba; syscall; 
0x0000000000088b72: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000002cb11: div byte ptr [rbp + rax*8 + 0x5b]; ret; 
0x000000000003212a: div byte ptr [rbp + rbx + 0x48]; mov eax, dword ptr [rip + 0x391ed4]; lea rdi, qword ptr [rip + 0x38dc25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000096bb1: div byte ptr [rbp - 0x14]; mov qword ptr [rdx], rcx; ret; 
0x00000000000f3052: div byte ptr [rbx + rbp + 0x48]; movsxd rdi, edi; mov eax, 0x105; syscall; 
0x00000000000ed302: div byte ptr [rbx + rbp + 0x4c]; movsxd rdx, ecx; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x00000000001365d2: div byte ptr [rbx + rcx - 0x17]; out 0, al; int1; jmp qword ptr [rsi + 0xf]; 
0x00000000000c3542: div byte ptr [rcx + rbx - 0x17]; xchg eax, esi; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000047101: div byte ptr [rcx]; inc dword ptr [rcx - 0x46]; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x00000000001abdf1: div ch; jmp qword ptr [rcx + 0x4000001]; 
0x00000000001b1519: div dh; call qword ptr [rsi]; 
0x00000000001b1481: div dh; jmp qword ptr [rdx]; 
0x0000000000003148: div dword ptr [rax]; lodsb al, byte ptr [rsi]; xor bh, byte ptr [rsi - 0xd]; add ebp, esi; mov eax, 0xa1a3e95a; ret 0xba88; 
0x00000000001059d4: div dword ptr [rcx]; shr al, 0x24; ret; 
0x0000000000105a9a: div dword ptr [rcx]; shr al, 0x5e; ret 0xffff; 
0x0000000000049712: div dword ptr [rdx - 0x5d]; cmp rsi, rdi; mov rax, rdi; cmovae rax, rsi; pop rbx; ret; 
0x0000000000178089: div eax; jmp qword ptr [rax]; 
0x000000000006ed75: div ebp; pop rbp; pop r12; pop r13; ret; 
0x0000000000073880: div ebp; pop rbp; pop r12; ret; 
0x00000000000738bc: div ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000372c5: div ebx; stosq qword ptr [rdi], rax; mov rdi, rsp; call 0x36f60; add rsp, 0x88; ret; 
0x000000000004f20d: div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000001a1f29: div ecx; jmp qword ptr [rax + 1]; 
0x00000000000a1b87: div ecx; pop rbx; mov eax, eax; ret; 
0x00000000001b1589: div esi; call qword ptr [rbx]; 
0x000000000006ed74: div rbp; pop rbp; pop r12; pop r13; ret; 
0x000000000007387f: div rbp; pop rbp; pop r12; ret; 
0x00000000000738bb: div rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000001b1588: div rsi; call qword ptr [rbx]; 
0x000000000019ba75: fadd dword ptr [rax]; add al, bh; out dx, al; call rsp; 
0x00000000000797c5: fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x000000000007a320: fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x48]; 
0x000000000007369c: fadd dword ptr [rax]; add byte ptr [rax], al; call qword ptr [rax + 0x60]; 
0x000000000005de57: fadd dword ptr [rax]; add byte ptr [rax], al; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000001094de: fadd dword ptr [rax]; add byte ptr [rax], al; mov eax, esi; pop rbx; pop rbp; ret; 
0x00000000000700da: fadd dword ptr [rax]; add byte ptr [rax], al; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000007ba93: fadd dword ptr [rax]; add byte ptr [rax], al; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000006f5bc: fadd dword ptr [rax]; add byte ptr [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000076014: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000000750b3: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000079592: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000007b233: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007504e: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x00000000000749dd: fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, r14d; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000007995b: fadd dword ptr [rax]; add byte ptr [rax], al; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000007902d: fadd dword ptr [rax]; add byte ptr [rax], al; mov qword ptr [rcx + 0x140], rdx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x0000000000078850: fadd dword ptr [rax]; add byte ptr [rax], al; mov qword ptr [rdx + 0x140], rdi; pop rbx; ret; 
0x000000000007b137: fadd dword ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000007b683: fadd dword ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000074434: fadd dword ptr [rax]; add byte ptr [rax], al; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000007b97d: fadd dword ptr [rax]; add byte ptr [rax], al; mov rbx, rdi; call qword ptr [rax + 0x60]; 
0x0000000000074d54: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000007b7c7: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000007bd67: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000006de88: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x00000000000706f0: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000007c533: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000074823: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000074628: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000004a70f: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbx; sub r13, rsi; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000004c1f9: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006ed8d: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r12; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006e6e4: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078d9c: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000004a18f: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x598]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007968f: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000006fdfa: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x000000000007a3cc: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000004aaa1: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, qword ptr [r12 + 0x18]; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000070686: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000000792ac: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000075caf: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, r15; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x00000000000738d5: fadd dword ptr [rax]; add byte ptr [rax], al; mov rsi, rdi; mov rdx, rbp; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000005ea6b: fadd dword ptr [rax]; add byte ptr [rax], al; movsxd r12, edx; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000049be3: fadd dword ptr [rax]; add byte ptr [rax], al; movsxd r13, edx; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000004ef00: fadd dword ptr [rax]; add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006f5f0: fadd dword ptr [rax]; add byte ptr [rax], al; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000007b5fa: fadd dword ptr [rax]; add byte ptr [rax], al; movzx esi, byte ptr [rbp]; mov rdi, r12; lea r13, qword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x00000000000f70d0: fadd dword ptr [rax]; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000475a6: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000f49c4: fadd dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000007c155: fadd dword ptr [rax]; add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000006d973: fadd dword ptr [rax]; add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000010ad5c: fadd dword ptr [rax]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000c7bce: fadd dword ptr [rbp - 0x77]; ror dword ptr [rcx - 0x77], cl; ret 0x1f0f; 
0x00000000001311c9: fadd dword ptr [rbx + 0x14807e0]; ret 0x3b48; 
0x000000000015e6c4: fadd dword ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001490f6: fadd dword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000004d8c1: fadd dword ptr [rcx + 0x39]; ret 0x860f; 
0x000000000007a42b: fadd dword ptr [rcx + 0x5d]; ret; 
0x00000000000a4e04: fadd dword ptr [rcx + 0x5f]; ret; 
0x0000000000135c84: fadd dword ptr [rcx - 0x76b7ffd8]; dec byte ptr [rax - 0x75]; cmp al, 0x24; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x00000000000b7907: fadd dword ptr [rcx - 0x77]; ret; 
0x00000000001aba95: fadd dword ptr [rcx]; add byte ptr [rax - 0x13], cl; cmc; jmp qword ptr [rax]; 
0x00000000001b4e88: fadd dword ptr [rsi]; sti; jmp qword ptr [rdx]; 
0x00000000000fa3bf: fadd qword ptr [rax]; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 8; syscall; 
0x00000000000ebb97: fadd qword ptr [rax]; add byte ptr [rax], al; add rsp, 0x70; pop rbx; ret; 
0x000000000011f4a6: fadd qword ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000fbe14: fadd qword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000019bdc5: fadd qword ptr [rax]; add byte ptr [rax], bh; jo 0x19bdb9; call qword ptr [rsi]; 
0x0000000000148d06: fadd qword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ed70: fadd qword ptr [rdx + 0x63490003]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018db95: fadd qword ptr [rdx]; add ah, ah; mov bh, 0xfa; call rsp; 
0x000000000018db8d: fadd qword ptr [rdx]; add byte ptr [rdi + rsi*4 - 0x23530006], dl; add al, byte ptr [rax]; in al, 0xb7; cli; call rsp; 
0x000000000019e884: fadd qword ptr [rsi]; add dword ptr [rax], eax; sub byte ptr [rbx - 0x10], bl; jmp rsi; 
0x000000000019a384: fadd st(1), st(0); add byte ptr [rax], al; sub byte ptr [rax], ch; out dx, al; call qword ptr [rsi]; 
0x00000000000fa757: fadd st(3); nop dword ptr [rax]; mov r10, rcx; mov eax, 0x12e; syscall; 
0x00000000000f7ec0: fadd st(6); add al, byte ptr [rax]; pop rbx; ret; 
0x000000000009e351: fbld dword ptr [rcx + 0x6349000d]; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001608b1: fbld dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000751bd: fbld dword ptr [rsi - 0x70]; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000030625: fbstp dword ptr [rbp + rax - 0x18]; ret; 
0x00000000001608af: fbstp dword ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000b791d: fcmovb st(0), st(1); cli; add ch, byte ptr [rcx]; ret 0x48d; 
0x00000000000fadc1: fcmovnbe st(0), st(2); add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000f2441: fcmovnbe st(0), st(4); sub al, 0; add rsp, 8; ret; 
0x00000000000cb5c1: fcmovne st(0), st(2); add eax, dword ptr [rax]; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x12; syscall; 
0x00000000001a7984: fcom qword ptr [rdi + 0x2b680001]; cmc; call qword ptr [rax]; 
0x000000000019f984: fcom qword ptr [rdi]; add dword ptr [rax], eax; pop rax; or esi, ecx; jmp rcx; 
0x00000000001aa8e8: fcom st(6); cmc; jmp qword ptr [rsi]; 
0x000000000019fc55: fcomi st(0); jmp qword ptr [rdx]; 
0x00000000001a6891: fcomi st(4); call qword ptr [rdi]; 
0x00000000001aacf9: fcomi st(5); call qword ptr [rax]; 
0x00000000001b5a71: fcomi st(7); call qword ptr [rbx]; 
0x00000000001b5aa9: fcomi st(7); call qword ptr [rcx]; 
0x00000000001b5b51: fcomi st(7); jmp qword ptr [rbx]; 
0x00000000001b5a59: fcomi st(7); jmp qword ptr [rcx]; 
0x000000000019fb68: fcomp dword ptr [rax]; int1; jmp qword ptr [rax + 1]; 
0x0000000000035516: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000002cc77: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000001f6e5: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000034080: fcomp dword ptr [rbx + 0x5d]; ret; 
0x000000000005db80: fcomp dword ptr [rbx - 0x3d]; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x52; syscall; 
0x0000000000022224: fcomp dword ptr [rcx]; cmp al, byte ptr [rax]; pop rbx; ret; 
0x0000000000176979: fcomp dword ptr [rdx + 0x21]; ret; 
0x0000000000105614: fcomp dword ptr [rsi - 0x74b6000f]; cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x00000000001a7a84: fcomp qword ptr [rax + 0x2d380001]; cmc; jmp qword ptr [rcx]; 
0x0000000000197e84: fcomp qword ptr [rax + rax - 0x122a9800]; call rcx; 
0x00000000001a7d84: fcomp qword ptr [rbx + 0x30a80001]; cmc; jmp qword ptr [rcx]; 
0x000000000018ca64: fcomp qword ptr [rdi + 2]; add byte ptr [rbx + rax*4 - 8], dh; call rsp; 
0x00000000001a0084: fcomp qword ptr [rsi]; add dword ptr [rax], eax; mov byte ptr [rbx - 0xf], al; call rsi; 
0x000000000019efb1: fcompi st(0); call qword ptr [rax]; 
0x000000000019efe1: fcompi st(0); jmp qword ptr [rdx]; 
0x000000000019eff9: fcompi st(0); jmp rax; 
0x00000000001a1481: fcompi st(1); jmp qword ptr [rdi + 1]; 
0x00000000000a1c60: fcompi st(3); ret; 
0x00000000001a69c9: fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001a8c75: fcompi st(4); jmp qword ptr [rdx]; 
0x000000000013cdd2: fcompi st(4); jmp qword ptr [rsi + 0x2e]; 
0x0000000000092b9d: fcompi st(5); clc; dec dword ptr [rax - 0x73]; add eax, 0xfffffad8; add rsp, 8; ret; 
0x0000000000040be7: fcos; jmp qword ptr [rsi + 0xf]; 
0x00000000001b0d79: fdecstp; call qword ptr [rcx + 5]; 
0x00000000001a9a78: fdiv dword ptr [rax - 0xb]; jmp qword ptr [rcx]; 
0x00000000000b3678: fdiv dword ptr [rax]; add byte ptr [rcx - 0x76dbdbbc], cl; ret; 
0x000000000004705c: fdiv dword ptr [rbp - 0xf]; pop rbx; ret; 
0x0000000000160d7f: fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000001a7f08: fdiv dword ptr [rdx]; cmc; jmp qword ptr [rcx]; 
0x00000000001b1584: fdiv qword ptr [rbx]; add al, byte ptr [rax]; div rsi; call qword ptr [rbx]; 
0x0000000000160b7f: fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000198a08: fdiv st(0); in eax, dx; jmp qword ptr [rdx]; 
0x0000000000186611: fdiv st(3), st(0); call qword ptr [rax]; 
0x0000000000186631: fdiv st(3), st(0); inc dword ptr [rax]; fdivp st(3); jmp rax; 
0x0000000000186735: fdiv st(3), st(0); jmp qword ptr [rax]; 
0x0000000000186651: fdiv st(3), st(0); jmp rax; 
0x0000000000186715: fdiv st(3), st(0); push qword ptr [rax - 0x22]; sti; call qword ptr [rax - 0x20]; 
0x00000000000cb7d4: fdiv st(3); ret; 
0x00000000001aac61: fdiv st(5); call qword ptr [rax + 2]; 
0x0000000000058515: fdiv st(7), st(0); dec dword ptr [rax - 0x7d]; ret 0xeb08; 
0x000000000012485a: fdiv st(7), st(0); inc dword ptr [rbx - 0x3fe6fe08]; add rsp, 8; add eax, 2; ret; 
0x000000000010bda0: fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x00000000000acd62: fdiv st(7), st(0); jmp qword ptr [rsi + 0x66]; 
0x000000000010bde7: fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x0000000000186719: fdivp st(3); call qword ptr [rax - 0x20]; 
0x0000000000186719: fdivp st(3); call qword ptr [rax - 0x20]; sti; inc dword ptr [rax - 0x1e]; sti; call qword ptr [rax]; 
0x00000000000caacf: fdivp st(3); dec dword ptr [rax + 1]; ret; 
0x0000000000186635: fdivp st(3); jmp rax; 
0x00000000001132ea: fdivp st(5); dec dword ptr [rax + 0x63]; sti; mov edx, eax; mov eax, 3; syscall; 
0x0000000000045ed7: fdivp st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000001acfac: fdivr dword ptr [rbp - 0xb]; jmp qword ptr [rdx]; 
0x00000000001a8328: fdivr dword ptr [rbx]; cmc; jmp rbx; 
0x00000000000d8797: fdivr dword ptr [rcx]; ret 0xc189; 
0x00000000000dac07: fdivr dword ptr [rcx]; ret 0xc789; 
0x000000000019d9f8: fdivr dword ptr [rdi - 0x11]; jmp qword ptr [rcx + 0xd]; 
0x000000000019419c: fdivr dword ptr [rdi - 0x14]; jmp qword ptr [rdx]; 
0x00000000000c109e: fdivr dword ptr [rsi + 0x81]; syscall; 
0x00000000000c0f90: fdivr qword ptr [rax - 0x76b70005]; ret; 
0x0000000000030114: fdivr qword ptr [rax]; add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000010a288: fdivr qword ptr [rbx]; sub eax, dword ptr [rax]; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x00000000001a5c84: fdivr qword ptr [rdx + 1]; add byte ptr [rax], bh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x00000000000fa388: fdivr qword ptr [rdx]; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001960ac: fdivr qword ptr [rsi - 0x13]; jmp qword ptr [rdx]; 
0x00000000000c5fe8: fdivr st(3), st(0); ret; 
0x000000000018678d: fdivr st(3); call qword ptr [rax - 0x3d]; 
0x000000000018678d: fdivr st(3); call qword ptr [rax - 0x3d]; sti; jmp qword ptr [rax]; 
0x00000000001867cd: fdivr st(3); lcall ptr [rax + 4]; cld; jmp qword ptr [rax]; 
0x00000000001a68d1: fdivr st(4), st(0); call qword ptr [rax]; 
0x000000000019d118: fdivr st(4); stc; call qword ptr [rsi + 0x16]; 
0x0000000000173f35: fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x00000000001aad51: fdivr st(5), st(0); call qword ptr [rax]; 
0x00000000000d8c5a: fdivr st(7); dec dword ptr [rax - 0x77]; ret; 
0x0000000000067951: fdivr st(7); dec dword ptr [rax - 0x7d]; ret 0xeb08; 
0x0000000000057dc0: fdivr st(7); dec dword ptr [rax - 0x7d]; ror dword ptr [rax], -0x17; and ebp, 0x8348ffff; ret 0xeb08; 
0x0000000000061493: fdivr st(7); jmp qword ptr [rsi + 0x2e]; 
0x000000000010c1db: fdivr st(7); jmp qword ptr [rsi - 0x70]; 
0x000000000015e43d: fdivr st(7); ret; 
0x000000000009c77e: fdivr st(7); xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000001a69b1: fdivrp st(4); jmp qword ptr [rcx]; 
0x00000000001a8a2d: fdivrp st(4); jmp qword ptr [rdx]; 
0x00000000001b0e91: fdivrp st(6); jmp qword ptr [rcx]; 
0x00000000001b5c91: fdivrp st(7); call qword ptr [rcx]; 
0x00000000001b5d69: fdivrp st(7); call rdi; 
0x00000000000c4591: fiadd dword ptr [rax + 0xf00017a]; test byte ptr [rdi*8 - 0x7cb70001], al; ret 0xeb02; 
0x00000000000a5190: fiadd dword ptr [rbp + 0x450f48c9]; ret 0x8348; 
0x000000000003dab2: fiadd dword ptr [rbp + 0x450f48ff]; ret 0x8348; 
0x00000000000ebacb: fiadd dword ptr [rbx + 0x298247c]; cmove eax, edx; ret; 
0x00000000001232be: fiadd dword ptr [rbx - 0x7bf0fc1e]; ret 1; 
0x0000000000148ef4: fiadd dword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000459f3: fiadd dword ptr [rcx - 0x77]; ret; 
0x00000000001abbe5: fiadd dword ptr [rcx]; add al, ch; out dx, eax; cmc; call qword ptr [rax]; 
0x0000000000085e24: fiadd dword ptr [rdi]; add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x000000000005f222: fiadd dword ptr [rsi + 0x63480011]; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000019bfad: fiadd word ptr [rax]; add al, dh; jnp 0x19bfa1; call qword ptr [rbp]; 
0x00000000001338f9: fiadd word ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000148b04: fiadd word ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018b405: fiadd word ptr [rcx]; add ah, dl; mov esi, esi; jmp rsp; 
0x000000000003d311: fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; mov eax, 0xb; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x000000000003d2d0: fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000135f12: ficom dword ptr [rbp + 0x448bffee]; and al, 0xc; add rsp, 0x48; ret; 
0x0000000000034ed6: ficom dword ptr [rbx]; add byte ptr [rax + 0x63], cl; add al, 0x83; add rax, rbx; jmp rax; 
0x0000000000022022: ficom dword ptr [rsi + 0x2e66000c]; nop dword ptr [rax + rax]; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x00000000000f4886: ficom word ptr [rbp - 0x2708ffd4]; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000011105d: ficomp dword ptr [rbx + 0x5d]; xor eax, eax; mov byte ptr [rdx], 0; pop r12; ret; 
0x0000000000136c1d: ficomp dword ptr [rbx + 0x5d]; xor eax, eax; pop r12; ret; 
0x00000000000f56d9: ficomp word ptr [rbx + 0x5d]; xor eax, eax; pop r12; ret; 
0x00000000001767c6: ficomp word ptr [rdx - 0x19]; cmc; mov ch, 0xab; ret; 
0x0000000000080caa: fidiv dword ptr [rbx]; add byte ptr [rax + 0x39], cl; ror dword ptr [rdi], cl; xchg eax, ebp; ret 0x8348; 
0x0000000000001b0b: fidiv dword ptr [rbx]; push rdx; test dword ptr [rbx + 0x59e7c8ee], esi; pop rbx; ret 0x2a63; 
0x000000000001ff5f: fidiv dword ptr [rdx + rdx*8 + 0x49]; movsxd rdi, ebp; mov eax, 3; syscall; 
0x0000000000160c7f: fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000006fffc: fidiv word ptr [rax + rax]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000001b5c26: fidiv word ptr [rbx]; idiv edi; sbb al, 0xd; nop; xor esi, edi; jmp qword ptr [rdx]; 
0x00000000000faa86: fidiv word ptr [rbx]; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000016097f: fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000135c35: fidivr dword ptr [rax + 1]; ret; 
0x000000000018ca10: fidivr dword ptr [rax - 8]; dec dword ptr [rsp + rbx*2 + 0x78f90002]; clc; call rsp; 
0x00000000000e3555: fidivr dword ptr [rcx]; ret 0x3173; 
0x00000000000d87ed: fidivr dword ptr [rcx]; ret 0xc189; 
0x00000000000ebbf7: fidivr dword ptr [rsi + 9]; mov rdi, r9; mov eax, r8d; syscall; 
0x0000000000037c36: fidivr word ptr [rax + 0x80]; syscall; 
0x00000000001a0d64: fidivr word ptr [rsi - 0xf]; jmp qword ptr [rdx]; 
0x0000000000048c38: fild dword ptr [rax + 0xf3a007d]; xchg eax, esp; ret; 
0x000000000019bd65: fild dword ptr [rax]; add byte ptr [rax + 0x6d], bh; out dx, al; call qword ptr [rdi]; 
0x00000000000fa588: fild dword ptr [rax]; add byte ptr [rbx - 0x76ebdbb4], cl; ret; 
0x00000000000ba087: fild dword ptr [rbp + 0x31]; ror byte ptr [rax - 0x7d], cl; ret; 
0x00000000000bc31e: fild dword ptr [rbp + 0x48b174c0]; mov eax, dword ptr [rip + 0x307ce6]; lea rdi, qword ptr [rip + 0x3037cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000005f321: fild dword ptr [rbp + 0x63480011]; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x00000000000d9405: fild dword ptr [rbp - 0x14ea802e]; imul ecx, dword ptr [rdi], 0x8d00401f; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000cd91c: fild dword ptr [rbx - 0x6af0fd08]; ret; 
0x0000000000148da4: fild dword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000111e17: fild dword ptr [rcx - 0x7d]; std; add dword ptr [rdi], ecx; xchg eax, esp; ret; 
0x00000000001ad9e6: fild dword ptr [rdi + 0xd1cfff5]; push rax; xchg ebp, esi; jmp qword ptr [rdx]; 
0x000000000018db6d: fild dword ptr [rdx]; add byte ptr [rbx + rsi*4 - 6], ah; call rsp; 
0x0000000000036864: fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000b077e: fild qword ptr [rsp - 0x18]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000019c13d: fild word ptr [rax]; add byte ptr [rax - 0x7a], dl; out dx, al; call qword ptr [rdi]; 
0x000000000007655d: fild word ptr [rax]; add byte ptr [rax], al; mov rdx, r14; mov rdi, rbx; call rax; 
0x00000000000797a6: fild word ptr [rbp + 0x4f0f48c9]; ret 0x8948; 
0x0000000000048dff: fild word ptr [rbx]; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; add al, 0; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x00000000001489b4: fild word ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000ad5ba: fild word ptr [rcx + 0x29]; ret; 
0x00000000000f0676: fild word ptr [rcx + 0xf]; xor byte ptr [rcx], 0xc0; ret; 
0x000000000004f1f8: fild word ptr [rcx + rcx*4 - 0x40]; ret; 
0x0000000000048dfe: fild word ptr ds:[rbx]; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; add al, 0; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x000000000002618b: fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x0000000000065d9f: fimul dword ptr [rax + 0x39]; ret 0x830f; 
0x000000000003fec5: fimul dword ptr [rax + 0x39]; ret 0xf48; 
0x00000000000819d3: fimul dword ptr [rax + 0x39]; ror dword ptr [rdi], cl; xchg dword ptr [rcx - 0x9fffffb], edi; ret; 
0x000000000013cbf5: fimul dword ptr [rax + 0x63]; ror dword ptr [rax + 1], -8; ret; 
0x000000000013cab5: fimul dword ptr [rax + 0x63]; ror dword ptr [rax + 1], -8; sub rax, rsi; ret; 
0x00000000000ebb81: fimul dword ptr [rax + 0x63]; test byte ptr [rax + 0x63], 0xff; mov eax, 0x48; syscall; 
0x0000000000088d2d: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000001381e6: fimul dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000000a9c0: fimul dword ptr [rax + rax]; add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; ret 0xb; 
0x000000000012a030: fimul dword ptr [rax - 0x7d]; ret 0x4812; 
0x000000000011592d: fimul dword ptr [rax - 0x7d]; ret 0xe801; 
0x000000000002081f: fimul dword ptr [rax - 1]; ret 0x4eb; 
0x00000000000a6631: fimul dword ptr [rax - 9]; fimul dword ptr [rax + 0x39]; ret 0xf48; 
0x000000000008c752: fimul dword ptr [rax - 9]; ret 0xfff8; 
0x00000000000f13a5: fimul dword ptr [rcx + 0x39]; ret 0x820f; 
0x00000000000c2b75: fimul dword ptr [rcx + 0x63]; cld; mov eax, 3; syscall; 
0x00000000000c4975: fimul dword ptr [rcx + 3]; push rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000007dec4: fimul dword ptr [rcx + rbp - 0x19]; mov qword ptr [rsp + 8], rcx; and rdi, rdx; neg rdi; call qword ptr [rax]; 
0x0000000000085fb7: fimul dword ptr [rcx + rcx*4 - 0x12]; call rax; 
0x0000000000086173: fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, r12; call rax; 
0x00000000000cb421: fimul dword ptr [rcx + rcx*4 - 0x1a]; movsxd rdi, r13d; mov eax, 0xcb; syscall; 
0x00000000000366ef: fimul dword ptr [rcx]; ret 0xb70f; 
0x00000000000c1141: fimul dword ptr [rdi]; shl dword ptr [rcx + rcx*4 + 0x14], 1; and eax, 0x2d4; mov eax, 0x3a; syscall; 
0x0000000000094680: fimul dword ptr [rdi]; test dh, al; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000001619f2: fimul dword ptr [rdx + 2]; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000144461: fimul word ptr [r9 + r9*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000e3ad3: fimul word ptr [rax - 0x75]; or cl, byte ptr [rax - 0x77]; ret 0x1e8; 
0x000000000012e3ff: fimul word ptr [rax - 0x77]; out dx, eax; call rcx; 
0x0000000000022d85: fimul word ptr [rax - 0x77]; ret 0x8348; 
0x000000000002ad1f: fimul word ptr [rax - 0x77]; ret 0x8948; 
0x0000000000041a40: fimul word ptr [rax - 0x77]; ret; 
0x00000000000829a1: fimul word ptr [rax - 0x7d]; ret 0x4810; 
0x0000000000051248: fimul word ptr [rax - 0x7d]; ret; 
0x0000000000144462: fimul word ptr [rcx + rcx*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000086089: fimul word ptr [rcx + rcx*4 - 0x11]; call rdx; 
0x000000000012b30e: fimul word ptr [rcx + rcx*4 - 1]; call qword ptr [rax]; 
0x0000000000035a5b: fimul word ptr [rdi]; xchg bl, al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000035b99: fimul word ptr [rdi]; xchg byte ptr [rbx], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x00000000000aebdc: fistp dword ptr [rbx + 0x41]; sub esp, eax; pop rbp; mov eax, r12d; pop r12; ret; 
0x00000000000fa64a: fistp qword ptr [rax + 0x11a]; syscall; 
0x0000000000108969: fistp qword ptr [rax + 0xe6]; mov r10, rcx; syscall; 
0x0000000000108922: fistp qword ptr [rax + 0xe6]; syscall; 
0x00000000000c60f7: fistp qword ptr [rax + 1]; ret; 
0x0000000000035896: fistp qword ptr [rax + 3]; syscall; 
0x00000000000d62e0: fistp qword ptr [rcx]; ret 0xc189; 
0x00000000000a07b1: fistp qword ptr [rdi + 0xd]; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000007c539: fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x00000000001336f7: fistp word ptr [rbx + 0x48]; mov dword ptr [rip + 0x28c190], eax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000000769d9: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000074829: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x000000000007462e: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x0000000000134ffb: fistp word ptr [rbx + 0x48]; mov esi, ebp; pop rbp; jmp rax; 
0x000000000012ce71: fistp word ptr [rbx + 0x5d]; jmp rax; 
0x0000000000121bb0: fistp word ptr [rbx - 0x17]; cmp ecx, ebx; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000011fa43: fistp word ptr [rbx - 0x17]; cmpsb byte ptr [rsi], byte ptr [rdi]; cli; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000000865f7: fistp word ptr [rbx - 0x17]; sal byte ptr [rdx - 2], cl; jmp qword ptr [rsi - 0x70]; 
0x00000000000bcbb6: fistp word ptr [rbx - 0x17]; xor ebp, dword ptr [rcx]; idiv bh; nop dword ptr [rax]; pop rbx; ret; 
0x000000000011edbd: fistp word ptr [rip - 0x74b80000]; and al, 8; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x00000000000854de: fisttp dword ptr [rax + 0x21]; ret; 
0x0000000000054b83: fisttp dword ptr [rax + 0x63]; adc al, 0x98; add rax, rdx; jmp rax; 
0x000000000002cd25: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x00000000000c522d: fisttp dword ptr [rax - 0x77]; fmul dword ptr [rcx + 3]; adc byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000095a06: fisttp dword ptr [rax - 0x77]; ret 0x1e75; 
0x0000000000039081: fisttp dword ptr [rax - 0x77]; ret; 
0x00000000000fc62e: fisttp dword ptr [rax - 0x77]; sbb eax, 0x2c1cca; pop rbx; ret; 
0x000000000013051a: fisttp dword ptr [rax - 0x7d]; in al, dx; sbb byte ptr [rbx - 0x6bf0f502], al; ret; 
0x0000000000027a2d: fisttp dword ptr [rax - 0x7d]; ret 0x4801; 
0x00000000000a1a96: fisttp dword ptr [rcx + 0x6e8c1c8]; and eax, 0x3fffc00; pop rbx; ret; 
0x00000000000459f0: fisttp dword ptr [rcx - 0x77]; fiadd dword ptr [rcx - 0x77]; ret; 
0x000000000003909b: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000105414: fisttp dword ptr [rcx - 0x7d]; ret 0x4d30; 
0x000000000005ab86: fisttp dword ptr [rdi]; test byte ptr [rax + rax - 0x76b40000], ah; ret 0x894c; 
0x00000000000f543a: fisttp dword ptr [rdi]; test byte ptr [rdi + 0x48000000], ch; mov esi, dword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000009590d: fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x00000000001a160e: fisttp dword ptr [rdx + 0xd1cfff1]; mov dh, 0x89; int1; jmp qword ptr [rdx]; 
0x0000000000109161: fisttp dword ptr [rdx]; hlt; dec dword ptr [rax - 0x7f]; ret; 
0x0000000000144641: fisttp qword ptr [r9 + r9*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000003ebde: fisttp qword ptr [rax - 0x77]; ret; 
0x00000000000c81ea: fisttp qword ptr [rax - 0x7d]; ret; 
0x000000000008b9ba: fisttp qword ptr [rax - 1]; ret 0xff48; 
0x00000000000885c2: fisttp qword ptr [rax - 1]; ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000fb492: fisttp qword ptr [rbx + 0x7500002c]; adc byte ptr [rax + 0x2e], bh; syscall; 
0x000000000012b5c3: fisttp qword ptr [rcx + 0xf]; fisttp qword ptr [rax - 0x7d]; ret; 
0x0000000000144642: fisttp qword ptr [rcx + rcx*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000059a59: fisttp qword ptr [rcx - 0x7c09ce35]; ret; 
0x00000000000f5c27: fisttp qword ptr [rdx]; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x0000000000144291: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014438d: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442d9: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000093ecc: fisttp word ptr [rax + 0x29]; ret 0x2948; 
0x000000000009fe31: fisttp word ptr [rax + 0x6349000d]; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000b1167: fisttp word ptr [rax + 1]; ret 0x8948; 
0x0000000000094838: fisttp word ptr [rax + 1]; ret; 
0x000000000008a6a8: fisttp word ptr [rax + rax]; ret; 
0x0000000000120276: fisttp word ptr [rax - 0x39]; add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x0000000000035522: fisttp word ptr [rax - 0x39]; ret; 
0x00000000000f074d: fisttp word ptr [rax - 0x73]; push rsp; and al, 0xc8; syscall; 
0x000000000006ffa1: fisttp word ptr [rax - 0x75]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000135814: fisttp word ptr [rax - 0x75]; and al, 0x10; call rax; 
0x000000000012099c: fisttp word ptr [rax - 0x75]; and al, 8; call rcx; 
0x00000000000f4e6e: fisttp word ptr [rax - 0x77]; call 0x5c50abd1; jmp rax; 
0x00000000000f074a: fisttp word ptr [rax - 0x77]; fisttp word ptr [rax - 0x73]; push rsp; and al, 0xc8; syscall; 
0x00000000000ec3b5: fisttp word ptr [rax - 0x77]; ret 0x14c; 
0x000000000005008a: fisttp word ptr [rax - 0x77]; ret; 
0x0000000000035af1: fisttp word ptr [rax - 0x7d]; ret 0xf01; 
0x000000000003911f: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000049d06: fisttp word ptr [rbp + 0x29]; hlt; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x00000000000f5de5: fisttp word ptr [rbx]; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000004a715: fisttp word ptr [rcx + 0x29]; cmc; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000095d00: fisttp word ptr [rcx + 1]; ret; 
0x0000000000075cb8: fisttp word ptr [rcx + rbp - 6]; call qword ptr [rax + 0x70]; 
0x0000000000144292: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014438e: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442da: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000857b7: fisttp word ptr [rcx + rcx*4 - 6]; call rax; 
0x00000000000fa607: fisttp word ptr [rcx - 0x2076b738]; syscall; 
0x00000000000f082c: fisttp word ptr [rcx - 0x74ba9b18]; sub al, 0x24; syscall; 
0x000000000011dbd3: fisttp word ptr [rcx - 0x77]; in eax, 0x41; call rdi; 
0x000000000013d5ed: fisttp word ptr [rip - 0x7cb80000]; ret 0x4910; 
0x0000000000037bb2: fisub dword ptr [rax + rdi]; ret; 
0x00000000000ebb22: fisub dword ptr [rcx + rcx*4 + 0x10]; mov eax, 0xffffffff; ret; 
0x00000000000f110c: fisub dword ptr [rcx + rcx*4 + 0x10]; mov rax, qword ptr [rip + 0x2ccda1]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000f09d1: fisub dword ptr [rcx + rcx*4 + 0x10]; or eax, 0xffffffff; ret; 
0x0000000000160c81: fisub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000006adfc: fisub dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; mul dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000016212f: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000010abbd: fisub dword ptr [rsi - 0x70]; push rbp; xor eax, eax; mov rbp, rsp; pop rbp; ret; 
0x0000000000037986: fisub word ptr [rax + rdi]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000160981: fisub word ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000002d72e: fisubr word ptr [rax + 0x39]; add byte ptr [rax - 0x73], cl; cmp eax, 0x3923c7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f3765: fisubr word ptr [rax + rax]; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000162171: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000000fb086: fisubr word ptr [rip - 0x2708ffd4]; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000149043: fld dword ptr [r11]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000011ffe3: fld dword ptr [rax]; add byte ptr [rax], al; lea rdx, qword ptr [rip + 0xcf02]; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x0000000000121705: fld dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbx]; 
0x00000000001b6a8c: fld dword ptr [rbx]; add byte ptr [rax], al; ret; 
0x0000000000148fa6: fld dword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001abb8d: fld dword ptr [rcx]; add al, al; out dx, eax; cmc; call qword ptr [rax]; 
0x00000000001abb05: fld dword ptr [rcx]; add byte ptr [rax - 0x11], cl; cmc; jmp qword ptr [rax]; 
0x000000000018db0d: fld dword ptr [rdx]; add byte ptr [rcx + rbp*4], dh; cli; jmp rsp; 
0x00000000000a1e2f: fld qword ptr [rax]; add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x000000000002c209: fld qword ptr [rax]; add byte ptr [rax], al; mov rdi, rbp; mov eax, 3; syscall; 
0x00000000000ed0e7: fld qword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000148bb6: fld qword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018dbbd: fld qword ptr [rdx]; add byte ptr [rbx + rdi*4], ah; cli; jmp rsp; 
0x0000000000174c21: fld qword ptr [rsi + 0x32]; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x000000000003679f: fld st(0); fstp xword ptr [rdi]; fsubp st(1); ret; 
0x0000000000107af3: fld st(3); sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000f1321: fld xword ptr [rbp + 1]; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x000000000009d401: fld xword ptr [rdi + 0x6349000d]; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000036868: fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x00000000000369b0: fld xword ptr [rsp + 8]; fstp xword ptr [rsp - 0x18]; movsx eax, word ptr [rsp - 0x10]; and eax, 0x8000; ret; 
0x0000000000036739: fld xword ptr [rsp + 8]; ret; 
0x000000000003679b: fld xword ptr [rsp - 0x18]; fld st(0); fstp xword ptr [rdi]; fsubp st(1); ret; 
0x0000000000036839: fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000036819: fld xword ptr [rsp - 0x18]; ret; 
0x00000000000f0513: fldcw word ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0547: fldcw word ptr [rax + rax]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000176951: fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000000f2f8b: fldcw word ptr [rsi - 0x389bffd4]; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000369e9: fldcw word ptr [rsp - 2]; ret; 
0x000000000006af9f: fldenv dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x0000000000160d01: fldenv dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000008bbf1: fldenv dword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000007b22d: fldenv dword ptr [rsi - 0x70]; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000188049: fldl2e; call rsp; 
0x000000000003839d: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000039b2d: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000000384e4: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000085d6b: fmul dword ptr [rax + 0x39]; ret 0x2f74; 
0x0000000000049555: fmul dword ptr [rax + 0x39]; ret; 
0x00000000000c3e22: fmul dword ptr [rax + 3]; adc byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000000d4ab2: fmul dword ptr [rax - 0x77]; ror dword ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 0x39], cl; ret 0x574; 
0x0000000000091f68: fmul dword ptr [rax - 0x77]; sbb byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; ret; 
0x000000000006b101: fmul dword ptr [rax - 0x7d]; ret; 
0x00000000000213e6: fmul dword ptr [rax - 1]; ret; 
0x00000000000fb2e5: fmul dword ptr [rbx - 0x2f]; syscall; 
0x00000000000ba06e: fmul dword ptr [rbx - 0x7cb7fbc0]; ret; 
0x00000000000b371e: fmul dword ptr [rcx + 0x39]; ret; 
0x00000000000c5230: fmul dword ptr [rcx + 3]; adc byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000193004: fmul dword ptr [rcx - 0x15]; jmp qword ptr [rdx]; 
0x000000000005957c: fmul dword ptr [rcx - 0x77]; ret; 
0x00000000000dc8f6: fmul dword ptr [rcx]; add byte ptr [rax + 0x63], cl; adc al, 0x90; add rax, rdx; jmp rax; 
0x00000000000b8194: fmul dword ptr [rdi]; mov dh, 0x40; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000144831: fmul qword ptr [r9 + r9*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000004528: fmul qword ptr [rax + rax]; add byte ptr [rdx], ah; add byte ptr [rax + rax], cl; push rax; ret 0xb; 
0x00000000001a6a84: fmul qword ptr [rax - 0x2007ffff]; hlt; jmp qword ptr [rcx]; 
0x0000000000093f4b: fmul qword ptr [rax - 0x39]; add byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000006cfe6: fmul qword ptr [rax - 0x73]; call 0x4163114a; pop rbp; pop rbp; ret; 
0x00000000000232da: fmul qword ptr [rax - 0x77]; ret; 
0x00000000000c4573: fmul qword ptr [rax - 0x7d]; ret 0x3c01; 
0x00000000000bd3fb: fmul qword ptr [rax - 0x7d]; ret; 
0x0000000000032574: fmul qword ptr [rcx + 0x63]; cld; mov eax, 3; syscall; 
0x0000000000144832: fmul qword ptr [rcx + rcx*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000000a74ec: fmul qword ptr [rcx - 0x77]; ret 0x23eb; 
0x0000000000087179: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000008d07f: fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x00000000000eb6be: fmulp st(1); add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x00000000000439d8: fmulp st(1); ret; 
0x0000000000160a7f: fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000002b5b: fnsave dword ptr [rdx - 0x6b]; test word ptr [rbx - 0x2e], bp; cmp dl, byte ptr [rdi]; ret; 
0x00000000000dad3e: fnstcw word ptr [rcx]; rol byte ptr [rcx - 0x77], 1; ret; 
0x0000000000187ab8: fnstcw word ptr [rdi - 0x17]; jmp rsp; 
0x00000000000ed0f2: fnstcw word ptr [rip - 0x1000]; cmova edx, ecx; mov eax, edx; ret; 
0x0000000000142e33: fnstenv dword ptr [rdi]; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000002516: fnstenv dword ptr [rdx + rdx - 0x38975393]; ret; 
0x0000000000160cff: fnstenv dword ptr [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000030134: fnstsw dword ptr [rax]; add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000301b2: fnstsw dword ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x0000000000178f8d: fpatan; jmp qword ptr [rbx - 0xd]; 
0x0000000000178f5d: fpatan; jmp qword ptr [rsi]; 
0x00000000000354b5: fpatan; ret; 
0x00000000000c1cf1: frstor dword ptr [rcx + rcx*4 + 0x34]; and eax, 0x2d0; ret; 
0x0000000000160a81: frstor dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000003686c: fscale; fstp st(1); ret; 
0x000000000004ef4e: fst dword ptr [rax - 0x776c74b8]; add byte ptr [rax], al; add byte ptr [rbx + 0x7501046a], al; ret; 
0x0000000000034c6d: fst qword ptr [rbx]; add byte ptr [rax + 0x63], cl; adc al, 0xb7; add rdx, rdi; jmp rdx; 
0x000000000011f3ca: fstp dword ptr [rbx + 0x48]; mov esi, ebp; add rdi, 0x18; xor eax, eax; pop rbp; jmp rcx; 
0x00000000001214ad: fstp dword ptr [rbx + 0x48]; mov esi, ebp; add rdi, 0x23b0; xor eax, eax; pop rbp; jmp rcx; 
0x0000000000174907: fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x00000000000940ae: fstp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000011c413: fstp dword ptr [rbx]; sub al, byte ptr [rax]; mov rax, qword ptr fs:[rax]; ret; 
0x0000000000032023: fstp dword ptr [rdi]; cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38dd32]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000114bee: fstp qword ptr [rbx + 0x48]; mov eax, ebp; pop rbp; pop r12; ret; 
0x000000000009ec5f: fstp qword ptr [rcx + 0x634b000d]; or al, 0x83; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000b0784: fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000174c80: fstp st(0); ret 0xde5d; 
0x0000000000036950: fstp st(1); add rsp, 0x20; pop rbx; ret; 
0x000000000003686e: fstp st(1); ret; 
0x0000000000034ed5: fstp st(2), st(0); adc eax, dword ptr [rax]; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000000367a1: fstp xword ptr [rdi]; fsubp st(1); ret; 
0x000000000003683d: fstp xword ptr [rdi]; ret; 
0x0000000000036389: fstp xword ptr [rdx + 0x38]; add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001865c0: fstp xword ptr [rdx - 0x440e0003]; std; push rcx; mov ebx, 0xbbf1fffd; std; call qword ptr [rax - 0x45]; 
0x000000000013cacc: fstp xword ptr [rdx]; movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x000000000010ad36: fstp xword ptr [rsi + 0xd]; lea rsi, qword ptr [rbp - 0x30]; lea rdi, qword ptr [rip - 0x174]; call rax; 
0x000000000006f5e9: fstp xword ptr [rsi - 0x15]; mov rax, qword ptr [r12 + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000369b4: fstp xword ptr [rsp - 0x18]; movsx eax, word ptr [rsp - 0x10]; and eax, 0x8000; ret; 
0x00000000000f9d43: fstp xword ptr [rsp]; call 0x54480; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x00000000000f9d05: fstp xword ptr [rsp]; call 0xfa030; lea rax, qword ptr [rip + 0x2c7b2c]; add rsp, 0x18; ret; 
0x00000000001489b3: fstpnce st(7), st(0); add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001a4bc8: fsub dword ptr [rbx - 0xc]; jmp qword ptr [rcx]; 
0x0000000000036f18: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000010886d: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; add rsp, 8; ret; 
0x00000000000c0993: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, rdi; ret; 
0x0000000000036c65: fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa6ea: fsub dword ptr [rcx + rcx*4 + 6]; or rax, 0xffffffffffffffff; ret; 
0x000000000008a9c4: fsub dword ptr [rcx]; or eax, dword ptr [rax]; ret; 
0x0000000000160d81: fsub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000098724: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x00000000001b0284: fsub qword ptr [rax]; add al, byte ptr [rax]; pop rax; push rcx; sti; call rsi; 
0x000000000018caf4: fsub qword ptr [rbx + 2]; add byte ptr [rcx + rcx*4 + 0x64f4fff8], al; add al, byte ptr [rax]; ret 0xf88a; 
0x0000000000160b81: fsub qword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000086efc: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x0000000000121a4d: fsub qword ptr [rsi - 0x70]; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000871bf: fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000019973d: fsub st(5), st(0); jmp qword ptr [rdx]; 
0x00000000001ab4a8: fsub st(5); cmc; call qword ptr [rax]; 
0x00000000000f6005: fsubp st(0); add eax, 0x4cffffee; mov edi, edi; mov edx, 4; mov esi, 1; call rbx; 
0x0000000000131753: fsubp st(0); xchg dword ptr [rcx + 0x2948fff1], eax; ret; 
0x00000000000f5d87: fsubp st(0); xor eax, 0xffffffff; dec dword ptr [rcx + rcx*4 - 1]; mov edx, 4; mov esi, 1; call rbx; 
0x000000000007f87e: fsubp st(0); xor eax, dword ptr [rax]; movsxd rdi, ecx; mov eax, 3; syscall; 
0x00000000000b0782: fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000367a3: fsubp st(1); ret; 
0x0000000000172955: fsubp st(3); inc dword ptr [rax + 0x73ffebde]; fsubp st(3); jmp qword ptr [rsi - 0x22]; 
0x000000000017295d: fsubp st(3); jmp qword ptr [rsi - 0x22]; 
0x000000000017294d: fsubp st(3); lcall ptr [rdx - 0x72001422]; fsubp st(3); inc dword ptr [rax + 0x73ffebde]; fsubp st(3); jmp qword ptr [rsi - 0x22]; 
0x0000000000198fb5: fsubp st(5); jmp qword ptr [rdx]; 
0x00000000000f0623: fsubr dword ptr [r8 + rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f0624: fsubr dword ptr [rax + rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000001b3658: fsubr dword ptr [rdi - 9]; jmp qword ptr [rbp]; 
0x00000000001a9768: fsubr dword ptr [rsi - 0xb]; jmp qword ptr [rdi + 1]; 
0x00000000000f3936: fsubr qword ptr [rax + rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000f395d: fsubr qword ptr [rax + rax]; add rsp, 8; ret; 
0x0000000000194e84: fsubr qword ptr [rax + rax]; cwde; xchg eax, ebp; in eax, dx; jmp qword ptr [rax]; 
0x00000000001b4e84: fsubr qword ptr [rdx + rax]; fadd dword ptr [rsi]; sti; jmp qword ptr [rdx]; 
0x000000000018f1c1: fsubr st(1); call qword ptr [rdx]; 
0x0000000000053866: fsubr st(3); mov eax, 0x5c415d5b; mov eax, 1; pop r13; ret; 
0x00000000001a1c28: fsubr st(4); int1; call qword ptr [rbx]; 
0x000000000010378b: fucomi st(0); scasd eax, dword ptr [rdi]; xor eax, 0x8548fff8; ror byte ptr [rdi], 0x95; ret; 
0x000000000012143f: fucomi st(1); adc eax, 0x66fffffe; nop word ptr cs:[rax + rax]; mov eax, 2; ret; 
0x00000000000407aa: fucomi st(1); ret; 
0x000000000019457d: fucomi st(4); jmp qword ptr [rdx]; 
0x00000000001995d5: fucomi st(5); jmp qword ptr [rdx]; 
0x00000000000eaeb8: fucomp st(0); xor al, byte ptr [rsi - 0xd]; jmp qword ptr [rsi - 0x70]; 
0x0000000000198f6d: fucomp st(5); jmp qword ptr [rdx]; 
0x00000000000a389a: fucompi st(0); adc byte ptr [rsi + rdi*8 + 0x438d48ff], cl; cld; pop rbx; ret; 
0x00000000000c2975: fucompi st(0); adc eax, 0x89000289; ret 0xc748; 
0x0000000000077f05: fucompi st(0); and eax, 0x89ffffd1; ret 0x3f7; 
0x00000000000357b0: fucompi st(0); cmp bl, byte ptr [rbp - 0x3fce0002]; pop rbx; ret; 
0x00000000000f714f: fucompi st(0); mov edx, dword ptr [rax - 0xc]; jmp qword ptr [rsi + 0x66]; 
0x0000000000133a19: fucompi st(0); movabs eax, dword ptr [0x482d78c085000000]; mov eax, dword ptr [rsp]; add rsp, 0x10; pop rbx; ret; 
0x0000000000073345: fucompi st(0); movsd dword ptr [rdi], dword ptr [rsi]; sar edx, -1; xor eax, eax; pop rbx; ret; 
0x00000000000421db: fucompi st(0); pminsw mm7, mm7; dec dword ptr [rax - 0x77]; ret; 
0x00000000000498a2: fucompi st(0); push 0x480004e2; add esp, 0x440; pop rbx; ret; 
0x00000000000c6436: fucompi st(0); push rsp; jns 0xc643e; add byte ptr [rcx - 0x77], al; ret; 
0x00000000001115c8: fucompi st(0); ret 0x201; 
0x000000000012ca38: fucompi st(0); ret 0xfbf3; 
0x0000000000118bb7: fucompi st(0); ret; 
0x000000000003fc04: fucompi st(0); salc; loope 0x3fc08; dec dword ptr [rax - 0x77]; ret; 
0x000000000010bba4: fucompi st(0); salc; ret 0xfff6; 
0x000000000007803d: fucompi st(0); sbb eax, 0x89ffffc4; ret 0xbceb; 
0x0000000000044f89: fucompi st(0); xchg eax, ecx; out 0xff, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000012c7c8: fucompi st(0); xor dh, dh; sti; jmp qword ptr [rsi - 0x70]; 
0x00000000001314fb: fucompi st(6); jmp qword ptr [rsi - 0x70]; 
0x000000000018a391: fyl2x; call rsp; 
0x000000000019d191: fyl2xp1; call qword ptr [rax]; 
0x00000000001895e8: hlt; adc al, 0xef; inc dword ptr [rdi + rdx + 0x17940001]; out dx, eax; call rsp; 
0x000000000018cafc: hlt; add al, byte ptr fs:[rax]; ret 0xf88a; 
0x00000000001890bd: hlt; add byte ptr [rax], al; mov ah, 0xa9; out dx, al; jmp rsp; 
0x00000000001882c8: hlt; add ch, bl; jmp rsp; 
0x000000000011afaa: hlt; add dword ptr [rax], eax; add byte ptr [rbp - 0x47e78701], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000001b639c: hlt; add dword ptr [rdx], 0xf7f85000; call qword ptr [rbx]; 
0x000000000018b9f8: hlt; and dh, bh; call rsp; 
0x00000000001b079c: hlt; and eax, 0x65300002; clc; jmp qword ptr [rbx]; 
0x00000000001a6352: hlt; call qword ptr [rax + 5]; 
0x00000000001a50da: hlt; call qword ptr [rax + 6]; 
0x00000000001a68d2: hlt; call qword ptr [rax]; 
0x00000000001a4ad2: hlt; call qword ptr [rbp + 6]; 
0x0000000000179502: hlt; call qword ptr [rbp - 0x64]; 
0x00000000001a4c5a: hlt; call qword ptr [rbp]; 
0x00000000001793ca: hlt; call qword ptr [rbx - 0x65]; 
0x00000000001793ca: hlt; call qword ptr [rbx - 0x65]; hlt; lcall ptr [rdi - 0x65]; hlt; call rsi; 
0x00000000001a592a: hlt; call qword ptr [rbx]; 
0x00000000001794aa: hlt; call qword ptr [rcx]; 
0x0000000000179402: hlt; call qword ptr [rdi - 0x66]; 
0x0000000000179402: hlt; call qword ptr [rdi - 0x66]; hlt; jmp qword ptr [rcx - 0x66]; 
0x0000000000179146: hlt; call qword ptr [rdi]; 
0x00000000001792e2: hlt; call qword ptr [rdx + 0x22]; 
0x00000000001a6932: hlt; call qword ptr [rdx]; 
0x0000000000179462: hlt; call qword ptr [rsi - 0x67]; 
0x0000000000179462: hlt; call qword ptr [rsi - 0x67]; hlt; jmp qword ptr [rax - 0x67]; 
0x00000000001a5cda: hlt; call qword ptr [rsi]; 
0x000000000017937e: hlt; call rax; 
0x0000000000179386: hlt; call rax; xchg eax, ebp; hlt; jmp rsi; 
0x00000000001794ce: hlt; call rbx; 
0x0000000000179592: hlt; call rdi; 
0x0000000000179592: hlt; call rdi; popfq; hlt; jmp rcx; 
0x00000000001793d2: hlt; call rsi; 
0x000000000018acc2: hlt; call rsp; 
0x000000000018d7a8: hlt; cli; inc dword ptr [rdx + rax*8 + 0x41640002]; cli; call rsp; 
0x0000000000109163: hlt; dec dword ptr [rax - 0x7f]; ret; 
0x00000000001793fe: hlt; dec dword ptr [rbp - 0x66]; hlt; call qword ptr [rdi - 0x66]; 
0x00000000001793fe: hlt; dec dword ptr [rbp - 0x66]; hlt; call qword ptr [rdi - 0x66]; hlt; jmp qword ptr [rcx - 0x66]; 
0x00000000001794fe: hlt; dec dword ptr [rbx - 0x64]; hlt; call qword ptr [rbp - 0x64]; 
0x000000000017945a: hlt; dec dword ptr [rcx + rbx*4 - 0xc]; dec dword ptr [rcx]; sahf; hlt; call qword ptr [rsi - 0x67]; 
0x00000000001793c6: hlt; dec dword ptr [rcx - 0x65]; hlt; call qword ptr [rbx - 0x65]; 
0x000000000017945e: hlt; dec dword ptr [rcx]; sahf; hlt; call qword ptr [rsi - 0x67]; 
0x000000000017955e: hlt; dec dword ptr [rdi - 0x63]; hlt; lcall ptr [rbx - 0x63]; hlt; jmp qword ptr [rbp - 0x63]; 
0x00000000001794ca: hlt; dec ecx; wait; hlt; call rbx; 
0x0000000000179142: hlt; dec edx; add al, 0xf4; call qword ptr [rdi]; 
0x000000000018ad72: hlt; dec esp; mov bl, 1; add byte ptr [rcx + rdx*4], dh; hlt; jmp rsp; 
0x000000000018ae92: hlt; inc dword ptr [rbp + rdi*4 - 0x2abffff]; hlt; call rsp; 
0x00000000001092b6: hlt; inc dword ptr [rbp - 0x7b]; in al, 0x89; ret 0x87e; 
0x00000000001793fa: hlt; inc dword ptr [rbx - 0x66]; hlt; dec dword ptr [rbp - 0x66]; hlt; call qword ptr [rdi - 0x66]; 
0x00000000001798ca: hlt; inc dword ptr [rcx - 0x32]; hlt; inc dword ptr [rcx - 0x32]; hlt; jmp rsp; 
0x00000000001798ce: hlt; inc dword ptr [rcx - 0x32]; hlt; jmp rsp; 
0x00000000001794fa: hlt; inc dword ptr [rcx - 0x64]; hlt; dec dword ptr [rbx - 0x64]; hlt; call qword ptr [rbp - 0x64]; 
0x0000000000179342: hlt; inc dword ptr [rcx]; sbb ah, dh; jmp qword ptr [rbx]; 
0x0000000000179542: hlt; inc dword ptr [rdi]; popfq; hlt; call qword ptr [rcx]; 
0x000000000017929a: hlt; inc dword ptr [rdi]; sbb esp, esi; jmp rsp; 
0x00000000001a4f32: hlt; jmp qword ptr [rax + 1]; 
0x0000000000179466: hlt; jmp qword ptr [rax - 0x67]; 
0x00000000001a4b9a: hlt; jmp qword ptr [rax]; 
0x0000000000179566: hlt; jmp qword ptr [rbp - 0x63]; 
0x00000000001a52ca: hlt; jmp qword ptr [rbx + 2]; 
0x0000000000179346: hlt; jmp qword ptr [rbx]; 
0x0000000000179406: hlt; jmp qword ptr [rcx - 0x66]; 
0x00000000001a4bca: hlt; jmp qword ptr [rcx]; 
0x00000000001a4dca: hlt; jmp qword ptr [rdi]; 
0x00000000001a63c2: hlt; jmp qword ptr [rdx]; 
0x000000000013cdd3: hlt; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d1de0: hlt; jmp qword ptr [rsi + 0x66]; 
0x00000000000d5298: hlt; jmp qword ptr [rsi + 0xf]; 
0x00000000001273dc: hlt; jmp qword ptr [rsi - 0x70]; 
0x00000000001a62ca: hlt; jmp qword ptr [rsi]; 
0x00000000001a6ee2: hlt; jmp rax; 
0x0000000000179596: hlt; jmp rcx; 
0x00000000001794d6: hlt; jmp rdi; 
0x00000000001a4852: hlt; jmp rdx; 
0x0000000000179366: hlt; jmp rsi; 
0x000000000017929e: hlt; jmp rsp; 
0x00000000001797da: hlt; lcall ptr [rax - 0x67000b65]; wait; hlt; call rsi; 
0x0000000000179376: hlt; lcall ptr [rax - 0x67000b6b]; xchg eax, ebp; hlt; call rax; 
0x0000000000179562: hlt; lcall ptr [rbx - 0x63]; hlt; jmp qword ptr [rbp - 0x63]; 
0x00000000001793ce: hlt; lcall ptr [rdi - 0x65]; hlt; call rsi; 
0x00000000001793aa: hlt; ljmp ptr [rax - 0x57000b6b]; xchg eax, ebp; hlt; jmp rsi; 
0x00000000001797be: hlt; ljmp ptr [rax]; wait; hlt; call rsi; 
0x000000000018ae32: hlt; ljmp ptr [rcx + rdi*4 + 1]; add byte ptr [rdx + rdx*8 - 0xc], dl; push qword ptr [rcx + rdi*4 - 0x2d1bffff]; hlt; jmp rsp; 
0x00000000001794a6: hlt; ljmp ptr [rcx - 0x65]; hlt; call qword ptr [rcx]; 
0x000000000017958e: hlt; ljmp ptr [rcx - 0x65]; hlt; call rdi; 
0x0000000000179792: hlt; ljmp ptr [rcx - 0x65]; hlt; call rsi; 
0x00000000001794ea: hlt; ljmp ptr [rcx - 0x65]; hlt; jmp qword ptr [rbx]; 
0x00000000001794a2: hlt; ljmp ptr [rcx - 0x65]; hlt; ljmp ptr [rcx - 0x65]; hlt; call qword ptr [rcx]; 
0x000000000017978e: hlt; ljmp ptr [rcx - 0x65]; hlt; ljmp ptr [rcx - 0x65]; hlt; call rsi; 
0x0000000000179296: hlt; ljmp ptr [rsi]; sbb esp, esi; inc dword ptr [rdi]; sbb esp, esi; jmp rsp; 
0x000000000018d328: hlt; mov al, 0xf9; jmp rsp; 
0x00000000001aa89c: hlt; mov byte ptr [rcx], 0; nop; salc; cmc; jmp qword ptr [rsi]; 
0x000000000014c53a: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014483e: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c533: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144997: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001449b3: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000019a09c: hlt; mov esi, 0x20000000; out dx, al; jmp qword ptr [rcx + 1]; 
0x00000000000c11b0: hlt; mov rdi, rdx; mov eax, r9d; syscall; 
0x0000000000049d09: hlt; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000163653: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000000269c: hlt; out 0xdf, eax; syscall; 
0x00000000001ab59c: hlt; pop rsp; cmc; jmp qword ptr [rdx]; 
0x000000000017933a: hlt; push qword ptr [rax + 0x38fff41a]; adc ah, dh; inc dword ptr [rcx]; sbb ah, dh; jmp qword ptr [rbx]; 
0x000000000018ae3a: hlt; push qword ptr [rcx + rdi*4 - 0x2d1bffff]; hlt; jmp rsp; 
0x000000000017913e: hlt; push rsi; add al, 0xf4; dec edx; add al, 0xf4; call qword ptr [rdi]; 
0x000000000019a8ac: hlt; ret 0; 
0x000000000018a040: hlt; ret 0xfff0; 
0x00000000001031f8: hlt; ret 0xfff1; 
0x00000000001aa49c: hlt; ret 1; 
0x00000000000a34e3: hlt; ret; 
0x000000000019919c: hlt; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; adc ch, bh; in eax, dx; call qword ptr [rax]; 
0x0000000000186969: hlt; sti; call qword ptr [rax]; 
0x0000000000186969: hlt; sti; call qword ptr [rax]; idiv bl; jmp qword ptr [rax - 9]; 
0x000000000018bab0: hlt; sub al, 0xf7; jmp rsp; 
0x0000000000163657: hlt; sub eax, edx; ret; 
0x0000000000187e00: hlt; sub edx, 0x7cacff; add byte ptr [rdx + rax*4 - 0x16], al; call rsp; 
0x0000000000003c8d: hlt; test al, 0x35; push rbx; or byte ptr fs:[rbx + 0x4e], ch; ret 0x6bba; 
0x00000000001a7d9c: hlt; wait; add dword ptr [rax], eax; sal byte ptr [rax], 0xf5; jmp qword ptr [rax]; 
0x00000000001a1a84: hlt; xchg eax, ecx; int1; jmp qword ptr [rdx]; 
0x000000000018cd59: idiv al; jmp rsp; 
0x000000000017a5ba: idiv bh; adc ah, 0xf6; call rdx; 
0x00000000001776dd: idiv bh; call rdi; 
0x00000000000f4594: idiv bh; dec dword ptr [rax - 0x77]; ret; 
0x00000000000d4264: idiv bh; dec dword ptr [rax - 0x7d]; ret 0x8d01; 
0x00000000000c8a3a: idiv bh; dec dword ptr [rbx - 0x7aa7dbac]; ror byte ptr [rdi], cl; test byte ptr [rbx + rsi*8 + 0x2ae9ffff], al; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x00000000000b3753: idiv bh; dec dword ptr [rcx + 0x29]; ret; 
0x0000000000039aa2: idiv bh; dec ecx; ret; 
0x000000000007b7bd: idiv bh; inc dword ptr [rbp + 0x483175c0]; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000121560: idiv bh; inc dword ptr [rbp + 0x5b0975c0]; pop rbp; xor eax, eax; pop r12; ret; 
0x000000000017a55a: idiv bh; insb byte ptr [rdi], dx; sal esi, cl; call rdx; 
0x00000000000ab253: idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000000d9700: idiv bh; jmp qword ptr [rsi + 0x66]; 
0x00000000000255f7: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000041ddb: idiv bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000052d19: idiv bh; jmp qword ptr [rsi - 0x7b]; 
0x00000000001216ee: idiv bh; mov rax, qword ptr [r13 + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x00000000000f22a9: idiv bh; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2cbbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f227b: idiv bh; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2cbbe1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bcbbb: idiv bh; nop dword ptr [rax]; pop rbx; ret; 
0x000000000017a2f6: idiv bh; ret 0xf68a; 
0x00000000001ac84a: idiv bh; ret 3; 
0x000000000017a572: idiv bh; sal r14b, cl; call rdx; 
0x00000000001b0f20: idiv bh; sbb al, 0xd; and bh, byte ptr [rsi + rsi*8]; jmp qword ptr [rdx]; 
0x00000000001aff20: idiv bh; sbb al, 0xd; cwde; and dh, dh; jmp qword ptr [rdx]; 
0x00000000001afc68: idiv bh; sbb al, 0xd; nop; and dh, dh; jmp qword ptr [rdx]; 
0x0000000000179c74: idiv bh; test eax, 0xc3fffb00; add dh, bh; jmp rdi; 
0x000000000011c49e: idiv bh; xor eax, eax; ret; 
0x000000000018696d: idiv bl; jmp qword ptr [rax - 9]; 
0x000000000012c7cb: idiv bl; jmp qword ptr [rsi - 0x70]; 
0x00000000000ece92: idiv byte ptr [rax + 0x10a]; syscall; 
0x0000000000025866: idiv byte ptr [rax - 1]; cmovns eax, edx; ret; 
0x0000000000079e09: idiv byte ptr [rcx + 3]; mov edx, 2; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000079d58: idiv byte ptr [rcx + 3]; mov edx, 2; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000461e2: idiv byte ptr [rdi + 0x100011]; mov eax, 0x38; syscall; 
0x00000000000c0ed7: idiv byte ptr [rdi + 0x1200011]; mov eax, 0x38; syscall; 
0x0000000000186580: idiv byte ptr [rdx - 0x440e0003]; std; push rcx; mov ebx, 0xbbf1fffd; std; jmp qword ptr [rdi - 0x45]; 
0x000000000006e001: idiv byte ptr [rsi + 0x5c]; mov qword ptr [rbp], rax; mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x000000000019a8dc: idiv dh; in eax, dx; jmp qword ptr [rdx]; 
0x000000000002e206: idiv dword ptr [rax + 3]; syscall; 
0x000000000010823d: idiv dword ptr [rbx + 0x3948002b]; ret 0xda75; 
0x0000000000186971: idiv ebx; push qword ptr [rax + 0xfffbf8]; cli; sti; call qword ptr [rax - 5]; 
0x000000000003879d: idiv ecx; pop r15; ret; 
0x000000000008080f: idiv edi; adc byte ptr [rax - 0x77], cl; ret 0x58b; 
0x00000000000aedbe: idiv edi; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000000f72c5: idiv edi; add rsp, 0x408; ret; 
0x0000000000117dd8: idiv edi; add rsp, 8; lea eax, dword ptr [rbx + rbp]; pop rbx; pop rbp; ret; 
0x000000000011bccb: idiv edi; dec dword ptr [rax - 0x73]; cmp eax, 0x2a76fb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000011bae9: idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ca94f: idiv edi; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000ab1db: idiv edi; dec dword ptr [rcx - 0x7d]; ret 0x4104; 
0x0000000000039a9b: idiv edi; dec ecx; ret; 
0x000000000011bcae: idiv edi; inc dword ptr [rbx + 0x2a77180d]; add byte ptr [rdx], al; add rsp, 8; ret; 
0x000000000003b121: idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000000a285e: idiv edi; jmp qword ptr [rsi + 0x66]; 
0x0000000000032ef4: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000ab40b: idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000018b8da: idiv edi; lodsb al, byte ptr [rsi]; test dword ptr [rcx], 0xf703e400; inc esp; test dword ptr [rcx], 0xf704a400; jmp rsp; 
0x000000000018b9f2: idiv edi; mov ah, 0xfc; add dword ptr [rax], eax; hlt; and dh, bh; call rsp; 
0x000000000018bd52: idiv edi; mov ah, 8; add al, byte ptr [rax]; test byte ptr [rcx - 9], cl; jmp rsp; 
0x00000000000f262c: idiv edi; mov eax, 1; add rsp, 8; ret; 
0x0000000000117d9d: idiv edi; mov eax, ebx; pop rbx; ret; 
0x000000000018b99a: idiv edi; mov esp, 0xb40001fa; sbb esi, edi; call rsp; 
0x0000000000120f9f: idiv edi; mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000aed7a: idiv edi; nop dword ptr [rax]; pop rbx; ret; 
0x00000000000b1408: idiv edi; nop word ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x000000000004814d: idiv edi; push qword ptr [rcx]; shr cl, 0x25; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000c49dd: idiv edi; push rsi; ret; 
0x000000000018bf72: idiv edi; pushfq; adc eax, dword ptr [rdx]; add byte ptr [rdi], ah; jp 0x18bf72; jmp rsp; 
0x00000000001b3932: idiv edi; ret 0; 
0x00000000001b44da: idiv edi; ret; 
0x00000000001b5888: idiv edi; sbb al, 0xd; mov dh, byte ptr [rdi + rsi*8]; jmp qword ptr [rdx]; 
0x00000000001b5c28: idiv edi; sbb al, 0xd; nop; xor esi, edi; jmp qword ptr [rdx]; 
0x00000000001b5c70: idiv edi; sbb al, 0xd; pop rsi; xor esi, edi; jmp qword ptr [rdx]; 
0x00000000001b5918: idiv edi; sbb al, 0xd; xor al, 0xf7; jmp qword ptr [rdx]; 
0x00000000001b5960: idiv edi; sbb al, 0xd; xor byte ptr [rdi + rsi*8], dh; jmp qword ptr [rdx]; 
0x00000000001b5cd0: idiv edi; sbb al, 0xd; xor esi, r15d; jmp qword ptr [rdx]; 
0x000000000003c8d6: idiv esi; ret; 
0x000000000003c8c3: idiv esi; shl rdx, 0x20; mov eax, eax; or rax, rdx; ret; 
0x00000000000c8a39: idiv r15b; dec dword ptr [rbx - 0x7aa7dbac]; ror byte ptr [rdi], cl; test byte ptr [rbx + rsi*8 + 0x2ae9ffff], al; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x00000000000b3763: idiv r15b; dec dword ptr [rcx + 0x29]; ret; 
0x00000000000d42ea: idiv r15b; jmp qword ptr [rsi - 0x70]; 
0x0000000000117d9c: idiv r15d; mov eax, ebx; pop rbx; ret; 
0x000000000003879c: idiv r9; pop r15; ret; 
0x000000000003c8d5: idiv rsi; ret; 
0x0000000000097b95: imul al; adc eax, 0x48ffff49; mov eax, ebx; pop rbx; ret; 
0x00000000000dbb1f: imul al; mov ecx, dword ptr [rcx]; sti; call rcx; 
0x00000000000320b8: imul al; ret 1; 
0x0000000000080acc: imul al; sahf; cmp eax, 0x83480007; clc; dec dword ptr [rax - 0x77]; ret 0x840f; 
0x00000000001887d9: imul bl; call rsp; 
0x0000000000193afd: imul bl; jmp qword ptr [rdx]; 
0x0000000000085e1e: imul byte ptr [rbp - 0x7af0ffcd]; fiadd dword ptr [rdi]; add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x00000000001875a8: imul byte ptr [rdi - 0x50790004]; cld; call qword ptr [rsi]; 
0x0000000000186438: imul byte ptr [rdx - 0x54790003]; std; call qword ptr [rsi]; 
0x00000000000fa401: imul cl; or dword ptr [rax], eax; add byte ptr [rax], al; nop word ptr [rax + rax]; mov eax, 0xa6; syscall; 
0x000000000009bf78: imul cl; ret 8; 
0x000000000019cfd1: imul dh; call qword ptr [rdx + 4]; 
0x00000000000f4903: imul dword ptr [rax + rax]; add byte ptr [rbp + 0x10], dh; mov eax, 0x1a; syscall; 
0x0000000000134380: imul dword ptr [rax]; add byte ptr [rax - 0x9ffffff], al; ret; 
0x00000000000eb56d: imul dword ptr [rax]; sub eax, 0x64d8f700; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000007d875: imul dword ptr [rdi + 7]; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000001102c4: imul dword ptr [rdx]; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000143815: imul dword ptr [rip + 0x63490004]; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000cbb0d: imul eax, dword ptr [rax], 0x450f0000; ret 0x84e9; 
0x0000000000196916: imul eax, dword ptr [rbp + 0xd1cffed], -0x11; test ch, ch; jmp qword ptr [rdx]; 
0x0000000000150c27: imul eax, dword ptr [rbx], 0x14634900; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000037e27: imul eax, dword ptr [rcx - 0x46], 8; xor edx, edx; mov rsi, rbx; mov eax, 0x80; syscall; 
0x000000000003d0f1: imul eax, dword ptr [rcx], 0; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x00000000001621b1: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x00000000001a4d65: imul eax, dword ptr [rcx], 0; sbb byte ptr [rsi - 0xc], ah; jmp qword ptr [rcx]; 
0x00000000001a4cb5: imul eax, dword ptr [rcx], 0; test al, 0x65; hlt; jmp qword ptr [rcx]; 
0x00000000001a4d7d: imul eax, dword ptr [rcx], 0; xor byte ptr [rsi - 0xc], ah; jmp qword ptr [rcx]; 
0x00000000000d6373: imul eax, dword ptr [rcx], 0x63480000; ret 0x8b48; 
0x00000000001337d3: imul eax, dword ptr [rcx], 0x8b480000; add eax, 0x28c0b2; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x00000000001a4acd: imul eax, dword ptr [rcx], 0xf445e000; call qword ptr [rbp + 6]; 
0x00000000001a4b95: imul eax, dword ptr [rcx], 0xf4639800; jmp qword ptr [rax]; 
0x0000000000150c26: imul eax, dword ptr es:[rbx], 0x14634900; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000002eb96: imul eax; add al, 0x5d; or al, 0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000011baf3: imul eax; idiv bh; dec dword ptr [rax - 0x77]; ret; 
0x00000000000f527e: imul eax; insb byte ptr [rdi], dx; movabs byte ptr [0x854d10758b4dfff2], al; test byte ptr [rdi], 0x84; ret 0; 
0x00000000000671e0: imul eax; mov edx, 0x890000d2; ret; 
0x00000000000f51dd: imul eax; or eax, 0x49fff2a3; mov edi, dword ptr [rbp]; call rbx; 
0x00000000001058ef: imul eax; pop rbx; ret; 
0x00000000000ba2f8: imul eax; ret 0xfe79; 
0x0000000000105c88: imul eax; ret 0xffbf; 
0x0000000000039417: imul eax; ret; 
0x000000000010599b: imul eax; scasd eax, dword ptr [rdi]; ret 0xffff; 
0x000000000003d022: imul eax; sub byte ptr [rcx], al; add byte ptr [rax], al; movsd xmm0, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000006bbf1: imul eax; test eax, 0x89000088; ret; 
0x000000000012e696: imul ebp, dword ptr [rax], 0x4c; mov dword ptr [rbx + 0x20], esp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000143ca3: imul ebp, dword ptr [rcx], 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001a98d6: imul ebp, edi, 0xd1cfff4; in eax, dx; hlt; jmp qword ptr [rdx]; 
0x000000000019a607: imul ebp, esi, 0xa00d1cff; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000101f75: imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000007d799: imul ebx, dword ptr [rax], 0x48; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000072551: imul ebx, dword ptr [rax], 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000001097d2: imul ebx, dword ptr [rbx + 0x5d], 0x5c41f089; ret; 
0x00000000001794c4: imul ebx, dword ptr [rbx - 0x6440000c], 0x9bc9fff4; hlt; call rbx; 
0x00000000001793bc: imul ebx, dword ptr [rbx - 0x648a000c], 0x9b3dfff4; hlt; dec dword ptr [rcx - 0x65]; hlt; call qword ptr [rbx - 0x65]; 
0x00000000001794c0: imul ebx, dword ptr [rbx - 0x6496000c], 0x9bbffff4; hlt; dec ecx; wait; hlt; call rbx; 
0x00000000000301b1: imul ebx, ebp, 0x38; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x000000000011ee11: imul ecx, dword ptr [rax + 0x2a], 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000101f15: imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000019775e: imul ecx, dword ptr [rdi + 0xd1cffed], -0x26; mov gs, ebp; jmp qword ptr [rdx]; 
0x00000000000d940b: imul ecx, dword ptr [rdi], 0x8d00401f; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000001206d1: imul ecx, ebx, -0xd; inc dword ptr [rcx + rcx*4 - 1]; call 0xebe00; mov rdx, qword ptr [rbx + 0x38]; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x000000000011c041: imul ecx, ecx, -0xa; dec dword ptr [rax + 0x39]; ret; 
0x0000000000101e4f: imul edi, dword ptr [rax], 0x48; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000000374d4: imul edi, dword ptr [rax], 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000007b42b: imul edi, dword ptr [rax], 0xf; ror byte ptr [rcx - 0x3b7cb7ed], 1; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000002d50c: imul edi, dword ptr [rcx], 0; lea rdi, qword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d4e4: imul edi, dword ptr [rcx], 0; lea rdi, qword ptr [rip + 0x392612]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d498: imul edi, dword ptr [rcx], 0; lea rdi, qword ptr [rip + 0x39265e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000109ef9: imul edi, dword ptr [rdi], 0x2b; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x0000000000146a63: imul edi, ebp, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001246cb: imul edi, ebp, 0x89c085ff; ret; 
0x00000000000262c6: imul edi, ebx, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000018d071: imul edi, ecx, 0x2905cff; add byte ptr [rdx + rbp*2], ah; stc; jmp rsp; 
0x0000000000092b7c: imul edi, edi, -1; dec dword ptr [rbx + 0x33107a05]; add byte ptr [rbp + 0x480e74c0], al; lea eax, dword ptr [rip - 0x511]; ret; 
0x000000000007488d: imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000012baea: imul edi, edi, 0x1f883ff; sbb eax, eax; add rsp, 8; add eax, 2; ret; 
0x00000000000f2341: imul edi, edi, 0x3e8; mov qword ptr [rsp + 8], rdi; mov rdi, rsp; call 0xc0dd0; add rsp, 0x18; ret; 
0x00000000000c61df: imul edi, edi, 0x8348ffff; ret; 
0x00000000001874f5: imul edi, esp, -1; nop; insb byte ptr [rdi], dx; cld; call qword ptr [rax]; 
0x0000000000121d4d: imul edx, dword ptr [rax + 0x44], 0x29; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x000000000012c164: imul edx, dword ptr [rax], 0x31; test bh, 0x43; adc byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x0000000000101f45: imul edx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000dfe4f: imul edx, eax, 0xfff44fe9; jmp qword ptr [rsi + 0x2e]; 
0x00000000000fad31: imul edx, ebx, 0; add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x113; syscall; 
0x0000000000002b60: imul edx, edx, 0x3a; adc al, 0xe7; ret; 
0x00000000000b0707: imul edx; sar rdx, 7; sub rdx, rcx; lea rax, qword ptr [rsi + rdx]; add rsp, 0x18; ret; 
0x00000000000474f4: imul esi, dword ptr [rdi], 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000179134: imul esi, ebx, -0xd; call qword ptr [rdi + 4]; 
0x00000000001790a4: imul esi, ebx, -0xd; call rsi; 
0x0000000000178641: imul esi, edx, -1; shr byte ptr [rbx - 0xe], 0xff; shr byte ptr [rbx - 0xe], 1; jmp rax; 
0x0000000000178645: imul esi, edx, -1; shr byte ptr [rbx - 0xe], 1; jmp rax; 
0x00000000001785fd: imul esi, edx, 0xf26940ff; jmp qword ptr [rax + 0x69]; 
0x0000000000178601: imul esi, edx, 0xf26960ff; call qword ptr [rax - 0x3f000d97]; imul esi, edx, 0xf269f0ff; jmp qword ptr [rax]; 
0x0000000000178605: imul esi, edx, 0xf26990ff; inc eax; imul esi, edx, 0xf269f0ff; jmp qword ptr [rax]; 
0x0000000000178609: imul esi, edx, 0xf269c0ff; push rax; imul esi, edx, 0xf26a20ff; call qword ptr [rax + 0x6a]; 
0x000000000017860d: imul esi, edx, 0xf269f0ff; jmp qword ptr [rax]; 
0x0000000000178611: imul esi, edx, 0xf26a20ff; call qword ptr [rax + 0x6a]; 
0x0000000000178611: imul esi, edx, 0xf26a20ff; call qword ptr [rax + 0x6a]; inc dword ptr [rax - 0x4f000d96]; push -0xe; jmp rax; 
0x00000000000b15ce: imul esi, edx; add eax, esi; ret; 
0x00000000000a10d1: imul esi, esi, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000199b6e: imul esi, esi, 0xd1cffed; in al, 0xf3; in eax, dx; jmp qword ptr [rdx]; 
0x000000000009ccbc: imul esp, dword ptr [rsi + 0xf], 0x74; ret 0xff3; 
0x0000000000135621: imul esp, edx, -1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000148323: imul esp, esi, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000f2340: imul rdi, rdi, 0x3e8; mov qword ptr [rsp + 8], rdi; mov rdi, rsp; call 0xc0dd0; add rsp, 0x18; ret; 
0x00000000000b0706: imul rdx; sar rdx, 7; sub rdx, rcx; lea rax, qword ptr [rsi + rdx]; add rsp, 0x18; ret; 
0x000000000019c5dd: in al, 0; add byte ptr [rax - 0x68], ah; out dx, al; call qword ptr [rdx]; 
0x000000000019c5bd: in al, 0; add byte ptr [rax], ah; cwde; out dx, al; call qword ptr [rbx]; 
0x0000000000164078: in al, 0; add byte ptr [rax], al; ret; 
0x00000000000fa7f1: in al, 0; add byte ptr [rax], al; syscall; 
0x00000000000fa7f1: in al, 0; add byte ptr [rax], al; syscall; ret; 
0x000000000005e66a: in al, 0x11; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000001888b0: in al, 0x19; in al, dx; jmp rsp; 
0x00000000001b0e8c: in al, 0x2c; add al, byte ptr [rax]; sbb dh, 0xf6; jmp qword ptr [rcx]; 
0x000000000018c618: in al, 0x2f; clc; call qword ptr [rax + rax*2 + 0x30840002]; clc; call rsp; 
0x00000000000802ed: in al, 0x33; add byte ptr [rbx - 0x7d], cl; sub al, 8; add dword ptr [rax + 0x39], ecx; ret; 
0x00000000001896a0: in al, 0x33; out dx, eax; call rsp; 
0x00000000001a1c8c: in al, 0x3a; add dword ptr [rax], eax; add dh, ch; int1; call qword ptr [rdx]; 
0x00000000000b5304: in al, 0x3a; or al, 0; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x0000000000144836: in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001898f8: in al, 0x54; out dx, eax; jmp rsp; 
0x00000000001a488c: in al, 0x66; add dword ptr [rax], eax; shl rdi, 1; jmp qword ptr [rax]; 
0x00000000001a538c: in al, 0x71; add dword ptr [rax], eax; xor byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x000000000018d0c0: in al, 0x71; stc; jmp rsp; 
0x0000000000086cfc: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x00000000000e143f: in al, 0x83; mov byte ptr [rcx], 0x83; ret 0x4840; 
0x00000000001a688c: in al, 0x86; add dword ptr [rax], eax; sbb bl, 0xf4; call qword ptr [rdi]; 
0x0000000000070497: in al, 0x89; or ecx, dword ptr [rcx + rcx*4 - 0x1a]; cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x00000000001092ba: in al, 0x89; ret 0x87e; 
0x00000000001a7e8c: in al, 0x9c; add dword ptr [rax], eax; adc byte ptr [rdx], dh; cmc; call qword ptr [rsi]; 
0x000000000018db98: in al, 0xb7; cli; call rsp; 
0x00000000001a9a8c: in al, 0xb8; add dword ptr [rax], eax; jo 0x1a9b03; cmc; call rsp; 
0x000000000019a48c: in al, 0xc2; add byte ptr [rax], al; adc byte ptr [rbx], ch; out dx, al; call qword ptr [rsi]; 
0x00000000001335a8: in al, 0xc2; sub byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000f5cc0: in al, 0xc; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000018a320: in al, 0xcf; int1; jmp rsp; 
0x000000000018ae40: in al, 0xd2; hlt; jmp rsp; 
0x000000000018dce0: in al, 0xd4; cli; jmp rsp; 
0x00000000001abb8c: in al, 0xd9; add dword ptr [rax], eax; shr bh, 0xf5; call qword ptr [rax]; 
0x00000000001a8f14: in al, 0xe2; hlt; jmp qword ptr [rdx]; 
0x00000000000618a5: in al, 0xe9; out 0xff, eax; dec dword ptr [rbp + rcx*4 + 0x2d]; ret; 
0x000000000018de38: in al, 0xeb; cli; jmp rsp; 
0x0000000000193925: in al, 0xeb; jmp qword ptr [rdx]; 
0x0000000000097ad3: in al, 0xeb; mov ah, 0x66; nop dword ptr cs:[rax + rax]; mov rax, rbx; pop rbx; ret; 
0x000000000012ab0a: in al, 0xeb; mov edi, 0x48001f0f; mov eax, dword ptr [rip + 0x293469]; lea rdx, qword ptr [rip + 0x298d62]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000000c75f2: in al, 0xeb; ret; 
0x0000000000177129: in al, 0xed; call qword ptr [rbx]; 
0x000000000019d18c: in al, 0xef; add byte ptr [rax], al; add cl, bl; stc; call qword ptr [rax]; 
0x0000000000199b74: in al, 0xf3; in eax, dx; jmp qword ptr [rdx]; 
0x000000000014c51a: in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000019d78c: in al, 0xf5; add byte ptr [rax], al; adc byte ptr [rdi - 0x11], ah; jmp qword ptr [rsi]; 
0x000000000018ddd9: in al, 0xfa; call rsp; 
0x0000000000186705: in al, 0xfb; call qword ptr [rax - 0x1a]; 
0x0000000000186705: in al, 0xfb; call qword ptr [rax - 0x1a]; sti; call qword ptr [rax - 0x18]; sti; jmp rax; 
0x00000000001866e5: in al, 0xfb; call qword ptr [rax - 0x6f00041a]; call 0xffffffffdb3966ed; sti; jmp rax; 
0x0000000000186725: in al, 0xfb; call qword ptr [rax]; 
0x00000000001866c5: in al, 0xfb; call rax; 
0x0000000000082c9e: in al, 0xff; dec dword ptr [rax - 0x77]; ret 0x3d83; 
0x00000000000a781f: in al, 0xff; inc dword ptr [rbx - 0x78f0f606]; int1; add al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000135642: in al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x000000000007211b: in al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000001ac5ad: in al, 1; add byte ptr [rax], al; std; cmc; jmp rsp; 
0x0000000000148526: in al, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018c350: in al, 5; clc; call rsp; 
0x000000000009d7f8: in al, 6; add byte ptr [rax], al; ret; 
0x000000000018f394: in al, dx; adc dword ptr [rax], eax; add byte ptr [rax + 0x58], cl; std; jmp qword ptr [rax]; 
0x0000000000129e47: in al, dx; add byte ptr [rax], 0; add al, ch; jmp rcx; 
0x00000000000bf3b4: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x48c; 
0x00000000000afcb4: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x583; 
0x000000000003a1b4: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0xcde; 
0x000000000007c983: in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x0000000000188fad: in al, dx; add byte ptr [rax], al; adc al, 0x9b; out dx, al; jmp rsp; 
0x00000000000a545e: in al, dx; add dword ptr [rax - 0x73], ecx; insb byte ptr [rdi], dx; ror byte ptr [rbp - 0x7bf0febe], 1; ret 0; 
0x00000000001378b0: in al, dx; add eax, 0x83480000; ret 0xeb10; 
0x0000000000147b47: in al, dx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000166392: in al, dx; call qword ptr [rax + 0x7c]; 
0x0000000000166392: in al, dx; call qword ptr [rax + 0x7c]; in al, dx; inc dword ptr [rax + 0x7d]; in al, dx; jmp qword ptr [rax]; 
0x0000000000166382: in al, dx; call qword ptr [rax]; 
0x00000000001729ae: in al, dx; call qword ptr [rbp + 0x27]; 
0x0000000000172a72: in al, dx; call rax; 
0x00000000001945fa: in al, dx; call rdx; 
0x0000000000188892: in al, dx; call rsp; 
0x0000000000108ee7: in al, dx; clc; call qword ptr [rax - 0x18]; 
0x0000000000039718: in al, dx; cmp dh, dh; ret 0x7401; 
0x000000000018888a: in al, dx; dec dword ptr [rsp + rsi*4 + 0x195f0000]; in al, dx; call rsp; 
0x00000000001aba94: in al, dx; fadd dword ptr [rcx]; add byte ptr [rax - 0x13], cl; cmc; jmp qword ptr [rax]; 
0x000000000003d2cf: in al, dx; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x000000000003679a: in al, dx; fld xword ptr [rsp - 0x18]; fld st(0); fstp xword ptr [rdi]; fsubp st(1); ret; 
0x0000000000039e89: in al, dx; fld xword ptr [rsp - 0x18]; ret; 
0x00000000001a974d: in al, dx; hlt; jmp qword ptr [rdx]; 
0x00000000001a4b94: in al, dx; imul eax, dword ptr [rcx], 0xf4639800; jmp qword ptr [rax]; 
0x0000000000166396: in al, dx; inc dword ptr [rax + 0x7d]; in al, dx; jmp qword ptr [rax]; 
0x0000000000172a9a: in al, dx; inc dword ptr [rax + rbp + 0x2710ffec]; in al, dx; lcall ptr [rbx + 0x58ffec27]; sub ah, ch; jmp rcx; 
0x0000000000172a96: in al, dx; inc dword ptr [rax + rbp + 0x2884ffec]; in al, dx; call qword ptr [rax]; 
0x0000000000172a8e: in al, dx; inc dword ptr [rax + rbp + 0x2884ffec]; in al, dx; inc dword ptr [rax + rbp + 0x2884ffec]; in al, dx; call qword ptr [rax]; 
0x00000000001a1c29: in al, dx; int1; call qword ptr [rbx]; 
0x00000000001a1c11: in al, dx; int1; jmp qword ptr [rcx]; 
0x000000000016639a: in al, dx; jmp qword ptr [rax]; 
0x0000000000193bd2: in al, dx; jmp qword ptr [rbx]; 
0x0000000000193eaa: in al, dx; jmp qword ptr [rcx]; 
0x0000000000193f06: in al, dx; jmp qword ptr [rdx]; 
0x0000000000164268: in al, dx; jmp qword ptr [rsi + 0xf]; 
0x0000000000166386: in al, dx; jmp rax; 
0x0000000000172aaa: in al, dx; jmp rcx; 
0x00000000001888b2: in al, dx; jmp rsp; 
0x00000000000eb586: in al, dx; jo 0xeb57f; ret 0x4840; 
0x0000000000172aa6: in al, dx; lcall ptr [rax + 0x28]; in al, dx; jmp rcx; 
0x0000000000172aa2: in al, dx; lcall ptr [rbx + 0x58ffec27]; sub ah, ch; jmp rcx; 
0x000000000014c910: in al, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000172aae: in al, dx; ljmp ptr [rax + rbp]; in al, dx; call qword ptr [rax]; 
0x00000000001888aa: in al, dx; ljmp ptr [rbp + rsi*4 + 0x19e40000]; in al, dx; jmp rsp; 
0x0000000000199294: in al, dx; mov al, 0; add byte ptr [rax + 1], bl; out dx, al; jmp rax; 
0x00000000000f3213: in al, dx; mov byte ptr [r9 - 1], 0; ret; 
0x00000000001aa994: in al, dx; mov dword ptr [rcx], 0xf5d70800; call qword ptr [rsi]; 
0x000000000014483a: in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000096bb3: in al, dx; mov qword ptr [rdx], rcx; ret; 
0x000000000012cfe4: in al, dx; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax]; jmp rax; 
0x00000000000497ea: in al, dx; mov rax, rsi; nop; ret; 
0x000000000014c91a: in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000f7bf3: in al, dx; movsxd rdi, dword ptr [rbp - 0x6c]; mov eax, 3; syscall; 
0x00000000000fb0db: in al, dx; or al, ch; mov esi, 0x480000cf; mov dword ptr [rsp], eax; mov eax, 0x2b; syscall; 
0x00000000000f2627: in al, dx; or al, ch; movabs byte ptr [0x1b8fff7b2], al; add rsp, 8; ret; 
0x00000000000ebf6b: in al, dx; or al, ch; rol dword ptr cs:[rcx], 0; mov qword ptr [rsp], rax; mov eax, 0x55; syscall; 
0x000000000010bde3: in al, dx; or al, ch; xchg eax, esi; fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x000000000008314a: in al, dx; or byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000012e77f: in al, dx; or byte ptr [rax - 0x77], 0xd0; pop rbx; ret; 
0x000000000008138a: in al, dx; or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000001385d4: in al, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000001f6e2: in al, dx; or byte ptr [rcx + 0x415d5bd8], 0x5c; ret; 
0x0000000000112022: in al, dx; or byte ptr [rdi + 0x400], bh; call 0x1f490; mov qword ptr [rip + 0x2ad9b3], rax; add rsp, 8; ret; 
0x0000000000039ea2: in al, dx; or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0x3d3e0; add rsp, 8; ret; 
0x000000000019ce79: in al, dx; out dx, al; call qword ptr [rax]; 
0x00000000000a3ae1: in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000000a394f: in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000013051d: in al, dx; sbb byte ptr [rbx - 0x6bf0f502], al; ret; 
0x00000000001adfa4: in al, dx; stc; add dword ptr [rax], eax; jmp qword ptr [rdi]; 
0x00000000001b0a94: in al, dx; sub byte ptr [rdx], al; add byte ptr [rax + 0x64], bl; clc; jmp qword ptr [rbx]; 
0x00000000001968d4: in al, dx; test ch, ch; jmp qword ptr [rdx]; 
0x0000000000082ded: in al, dx; verw cx; mov r9b, 0xff; jmp qword ptr [rsi + 0x66]; 
0x0000000000116222: in al, dx; xor byte ptr [rcx], 0xc0; pop rbx; ret; 
0x000000000007a1d2: in eax, 0; adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000008bd07: in eax, 0; add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x00000000000c2bf8: in eax, 0; add byte ptr [rax], al; syscall; 
0x000000000005e51a: in eax, 0x11; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000174aa3: in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x0000000000176953: in eax, 0x2d; cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x00000000000801fb: in eax, 0x33; add byte ptr [rcx - 0x7d], cl; sub al, 8; add dword ptr [rax + 0x39], ecx; ret; 
0x00000000000e4288: in eax, 0x39; ret; 
0x000000000011dbd6: in eax, 0x41; call rdi; 
0x00000000000a30ca: in eax, 0x44; sub eax, eax; nop; ret; 
0x0000000000097bca: in eax, 0x48; mov eax, ebx; pop rbx; ret; 
0x000000000008c67a: in eax, 0x48; mov eax, edi; ret; 
0x0000000000049922: in eax, 0x48; mov eax, esi; ret; 
0x00000000000f31ae: in eax, 0x49; mov ecx, esi; mov byte ptr [r9 - 1], 0; ret; 
0x000000000005ec48: in eax, 0x49; sar ebp, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000144646: in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001ab33c: in eax, 0x5a; cmc; jmp qword ptr [rdx]; 
0x000000000010abc5: in eax, 0x5d; ret; 
0x0000000000173d39: in eax, 0x6a; mov eax, 0x45155e93; ret 0x591c; 
0x00000000000f94fb: in eax, 0x82; sub al, 0; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x000000000018dc68: in eax, 0xc0; cli; dec dword ptr [rcx - 0x3efefffe]; cli; call rsp; 
0x0000000000176959: in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000121fa8: in eax, 0xe8; ret 0xf6f6; 
0x00000000001781fd: in eax, 0xf1; inc dword ptr [rax]; out 0xf1, al; call qword ptr [rax]; 
0x00000000001781f5: in eax, 0xf1; jmp rax; 
0x00000000001781f9: in eax, 0xf1; push rax; in eax, 0xf1; inc dword ptr [rax]; out 0xf1, al; call qword ptr [rax]; 
0x000000000014c59a: in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000000916ea: in eax, 0xf3; ret; 
0x00000000001ab4a9: in eax, 0xf5; call qword ptr [rax]; 
0x00000000001ab4c1: in eax, 0xf5; jmp rbx; 
0x00000000001b10d9: in eax, 0xf6; call qword ptr [rdi]; 
0x000000000018cd01: in eax, 0xf8; inc dword ptr [rbx + rsi*2 + 2]; add byte ptr [rsi + 0x738cfff8], dl; add al, byte ptr [rax]; out 0xf8, eax; call rsp; 
0x00000000001866a5: in eax, 0xfb; call qword ptr [rax]; 
0x0000000000186685: in eax, 0xfb; inc dword ptr [rax - 0x19]; sti; inc dword ptr [rax - 0x17]; sti; call rax; 
0x0000000000057dc9: in eax, 0xff; dec dword ptr [rax - 0x7d]; ret 0xeb08; 
0x00000000000a7b91: in eax, 0xff; jmp qword ptr [rsi + 0x66]; 
0x0000000000175e21: in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000018b585: in eax, 1; add byte ptr [rsp - 0xa], dl; jmp rsp; 
0x000000000018dced: in eax, 2; add byte ptr [rdx*8 - 0x1a4b0006], ah; add al, byte ptr [rax]; adc al, 0xd6; cli; jmp rsp; 
0x000000000018dcf5: in eax, 2; add byte ptr [rsi + rdx*8], dl; cli; jmp rsp; 
0x00000000001483d6: in eax, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000028456: in eax, dx; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax + 0x39], cl; ret; 
0x0000000000147a6d: in eax, dx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000134ea2: in eax, dx; call qword ptr [rax + 0x28]; 
0x0000000000194a6a: in eax, dx; call qword ptr [rax]; 
0x0000000000194852: in eax, dx; call qword ptr [rbx + 1]; 
0x000000000017712a: in eax, dx; call qword ptr [rbx]; 
0x0000000000196b8a: in eax, dx; call qword ptr [rcx]; 
0x000000000019579a: in eax, dx; call qword ptr [rdi + 0x4000001]; 
0x0000000000196e82: in eax, dx; call qword ptr [rdi + 1]; 
0x00000000001948ca: in eax, dx; call qword ptr [rdx]; 
0x00000000001991fa: in eax, dx; call qword ptr [rsi + 2]; 
0x000000000019754a: in eax, dx; call qword ptr [rsi]; 
0x0000000000195c72: in eax, dx; call rbx; 
0x000000000019633a: in eax, dx; call rcx; 
0x0000000000188a32: in eax, dx; call rsp; 
0x00000000001aba99: in eax, dx; cmc; jmp qword ptr [rax]; 
0x0000000000188a72: in eax, dx; dec esp; ret; 
0x0000000000198ffc: in eax, dx; fsubp st(5); jmp qword ptr [rdx]; 
0x00000000001a9845: in eax, dx; hlt; jmp qword ptr [rdx]; 
0x000000000015ecdf: in eax, dx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000015ee0f: in eax, dx; idiv edi; jmp qword ptr [rsi + 0x66]; 
0x00000000001998a5: in eax, dx; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000188aea: in eax, dx; inc dword ptr [rdi + rax*8]; add byte ptr [rax + 0x6cffed65], ch; mov byte ptr [rax], 0; ret; 
0x00000000001a1c41: in eax, dx; int1; call qword ptr [rax]; 
0x00000000001a1c69: in eax, dx; int1; call qword ptr [rsi]; 
0x0000000000194e8a: in eax, dx; jmp qword ptr [rax]; 
0x000000000019782a: in eax, dx; jmp qword ptr [rbp]; 
0x0000000000198e3a: in eax, dx; jmp qword ptr [rbx]; 
0x0000000000194cca: in eax, dx; jmp qword ptr [rcx + 0x4000001]; 
0x0000000000198e1a: in eax, dx; jmp qword ptr [rcx]; 
0x000000000019746a: in eax, dx; jmp qword ptr [rdi]; 
0x000000000019492e: in eax, dx; jmp qword ptr [rdx]; 
0x0000000000173132: in eax, dx; jmp rax; 
0x00000000001962ca: in eax, dx; jmp rbx; 
0x000000000019480a: in eax, dx; jmp rcx; 
0x00000000001955f2: in eax, dx; jmp rsi; 
0x0000000000188a7a: in eax, dx; jmp rsp; 
0x0000000000188a2a: in eax, dx; lcall ptr [rcx + rax*8 + 0x57d40000]; in eax, dx; call rsp; 
0x0000000000177002: in eax, dx; lcall ptr [rcx + rsi*8]; in eax, dx; jmp rax; 
0x0000000000176ffe: in eax, dx; lcall ptr [rcx + rsi*8]; in eax, dx; lcall ptr [rcx + rsi*8]; in eax, dx; jmp rax; 
0x000000000014c990: in eax, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000a1432: in eax, dx; lea rax, qword ptr [rcx - 1]; ret; 
0x00000000000f3357: in eax, dx; loope 0xf3386; add byte ptr [rax - 0x76b7ffc8], al; ret; 
0x00000000000a0df9: in eax, dx; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000a0e0f: in eax, dx; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000a0e31: in eax, dx; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000a0e4f: in eax, dx; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000a0e6f: in eax, dx; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000a0e95: in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000a0eb1: in eax, dx; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000a0ed1: in eax, dx; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000a0ef1: in eax, dx; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000a0f17: in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000a0f39: in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000a0f57: in eax, dx; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000a0f77: in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000a0f93: in eax, dx; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000a0fb3: in eax, dx; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000a0fd3: in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000a0ff3: in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000a1019: in eax, dx; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000a1069: in eax, dx; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000a0d3f: in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000a0d5d: in eax, dx; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000a0d7d: in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000a0d9f: in eax, dx; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000a0dbf: in eax, dx; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000a0ddf: in eax, dx; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000a0c75: in eax, dx; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000a0c87: in eax, dx; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000a0c9d: in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000a0cb5: in eax, dx; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000a0ccb: in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000a0cdd: in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000a0cfb: in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000a0d07: in eax, dx; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000a0d1d: in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000a0c61: in eax, dx; mov byte ptr [rdi], ch; ret; 
0x00000000000c1ce1: in eax, dx; mov ecx, 0x27; mov eax, ecx; syscall; 
0x000000000014464a: in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000096b02: in eax, dx; mov rax, rdi; ret; 
0x00000000000fb382: in eax, dx; mov word ptr [rax + rax], gs; add byte ptr [rbp + 0x10], dh; mov eax, 0x2f; syscall; 
0x000000000014c99a: in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000d43ad: in eax, dx; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x000000000013c140: in eax, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001ab3bc: in eax, dx; pop rdx; cmc; jmp qword ptr [rdx]; 
0x000000000017312e: in eax, dx; push qword ptr [rax + 0x41]; in eax, dx; jmp rax; 
0x00000000000a1212: in eax, dx; ret; 
0x0000000000186915: in eax, dx; sti; call qword ptr [rax]; 
0x0000000000186915: in eax, dx; sti; call qword ptr [rax]; out dx, eax; sti; jmp qword ptr [rax - 0x10]; 
0x00000000000a1582: in eax, dx; sub rax, 1; ret; 
0x0000000000086a42: in eax, dx; xor eax, eax; ret; 
0x00000000000e404d: inc byte ptr [r11 + 0x37401e2]; mov byte ptr [rdi], 0; xor eax, eax; ret; 
0x00000000000e329c: inc byte ptr [rax - 0xa]; mov dword ptr [rdi + rcx], 0xffff0d84; jmp qword ptr [rsi + 0xf]; 
0x00000000000faaa1: inc byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000e404e: inc byte ptr [rbx + 0x37401e2]; mov byte ptr [rdi], 0; xor eax, eax; ret; 
0x0000000000113afe: inc byte ptr [rbx + 0x394101c0]; ret 0xd975; 
0x0000000000146914: inc byte ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000f2f5e: inc byte ptr [rcx - 0x46]; add byte ptr [rcx], al; add byte ptr [rax], al; mov rdi, -0x64; mov eax, 0x118; syscall; 
0x0000000000189530: inc byte ptr [rdi]; out dx, eax; jmp rsp; 
0x00000000000f31b4: inc dword ptr [r8]; ret; 
0x000000000018682b: inc dword ptr [rax + 0x10fffc11]; add al, 0xfc; call rax; 
0x0000000000186213: inc dword ptr [rax + 0x11]; sti; call qword ptr [rax]; 
0x0000000000186213: inc dword ptr [rax + 0x11]; sti; call qword ptr [rax]; adc bh, bl; call rax; 
0x0000000000186227: inc dword ptr [rax + 0x15]; sti; call qword ptr [rax]; 
0x0000000000186293: inc dword ptr [rax + 0x20fffb30]; xor bh, bl; inc eax; xor edi, ebx; jmp qword ptr [rax + 0x35]; 
0x0000000000186287: inc dword ptr [rax + 0x2b]; sti; push qword ptr [rax + 0x1d]; sti; jmp rax; 
0x00000000001869cf: inc dword ptr [rax + 0x2c]; cld; inc dword ptr [rax]; cld; jmp rax; 
0x0000000000186a53: inc dword ptr [rax + 0x2d]; cld; jmp qword ptr [rax]; 
0x0000000000186ab7: inc dword ptr [rax + 0x2e]; cld; jmp qword ptr [rax]; 
0x00000000000e325c: inc dword ptr [rax + 0x3108384b]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000186a3b: inc dword ptr [rax + 0x31]; cld; jmp qword ptr [rax]; 
0x00000000001862ab: inc dword ptr [rax + 0x3a]; sti; jmp rax; 
0x0000000000186a4f: inc dword ptr [rax + 0x40fffc2b]; sub eax, 0x2f20fffc; cld; inc dword ptr [rax]; xor esp, edi; jmp rax; 
0x0000000000186237: inc dword ptr [rax + 0x50fffb18]; sbb ebx, edi; jmp qword ptr [rax]; 
0x0000000000178137: inc dword ptr [rax + 0x52]; int1; call qword ptr [rax + 0x54]; 
0x0000000000178137: inc dword ptr [rax + 0x52]; int1; call qword ptr [rax + 0x54]; int1; jmp qword ptr [rax + 0x56]; 
0x00000000001867cb: inc dword ptr [rax + 0x58fffbd8]; add al, 0xfc; jmp qword ptr [rax]; 
0x0000000000186d87: inc dword ptr [rax + 0x60]; cld; call rax; 
0x00000000001862d3: inc dword ptr [rax + 0x60fffb4c]; sti; push qword ptr [rax]; push rax; sti; call qword ptr [rax]; 
0x00000000001868d7: inc dword ptr [rax + 0x60fffc06]; or ah, bh; call qword ptr [rax + 0xa]; 
0x00000000001868d7: inc dword ptr [rax + 0x60fffc06]; or ah, bh; call qword ptr [rax + 0xa]; cld; jmp qword ptr [rax]; 
0x0000000000186857: inc dword ptr [rax + 0x60fffc07]; or esp, edi; inc dword ptr [rax + 0xb]; cld; jmp qword ptr [rax]; 
0x0000000000186b6f: inc dword ptr [rax + 0x63]; cld; call rax; 
0x00000000001785ff: inc dword ptr [rax + 0x69]; bnd jmp qword ptr [rax + 0x69]; bnd call qword ptr [rax - 0x3f000d97]; imul esi, edx, 0xf269f0ff; jmp qword ptr [rax]; 
0x0000000000186277: inc dword ptr [rax + 0x70fffb27]; sub bl, bh; jmp qword ptr [rax + 0x29]; 
0x0000000000172957: inc dword ptr [rax + 0x73ffebde]; fsubp st(3); jmp qword ptr [rsi - 0x22]; 
0x0000000000166397: inc dword ptr [rax + 0x7d]; in al, dx; jmp qword ptr [rax]; 
0x0000000000186347: inc dword ptr [rax + 0x7f]; sti; call rax; 
0x000000000018685f: inc dword ptr [rax + 0xb]; cld; jmp qword ptr [rax]; 
0x0000000000172a9b: inc dword ptr [rax + rbp + 0x2710ffec]; in al, dx; lcall ptr [rbx + 0x58ffec27]; sub ah, ch; jmp rcx; 
0x0000000000172a97: inc dword ptr [rax + rbp + 0x2884ffec]; in al, dx; call qword ptr [rax]; 
0x0000000000172a8f: inc dword ptr [rax + rbp + 0x2884ffec]; in al, dx; inc dword ptr [rax + rbp + 0x2884ffec]; in al, dx; call qword ptr [rax]; 
0x000000000018cb7b: inc dword ptr [rax + rbp*2 + 2]; add byte ptr [rsp + rdx*4 - 8], dh; call qword ptr [rax + rbp*2 - 0x69cbfffe]; clc; call rsp; 
0x000000000018d3d3: inc dword ptr [rax + rbp*4 - 0x326bfffe]; stc; call rsp; 
0x000000000005fbf3: inc dword ptr [rax - 0x10b943]; jmp qword ptr [rax]; 
0x000000000005105d: inc dword ptr [rax - 0x12f43]; jmp qword ptr [rdi + 0xf]; 
0x000000000018668b: inc dword ptr [rax - 0x17]; sti; call rax; 
0x0000000000186687: inc dword ptr [rax - 0x19]; sti; inc dword ptr [rax - 0x17]; sti; call rax; 
0x000000000018671f: inc dword ptr [rax - 0x1e]; sti; call qword ptr [rax]; 
0x00000000001866b7: inc dword ptr [rax - 0x21]; sti; jmp qword ptr [rax]; 
0x000000000018662f: inc dword ptr [rax - 0x24]; sti; inc dword ptr [rax]; fdivp st(3); jmp rax; 
0x0000000000186b23: inc dword ptr [rax - 0x2f0003e5]; sbb al, 0xfc; jmp qword ptr [rax]; 
0x0000000000186777: inc dword ptr [rax - 0x2f00042f]; sar bl, cl; jmp qword ptr [rax]; 
0x0000000000186317: inc dword ptr [rax - 0x2f000491]; jo 0x18631a; jmp qword ptr [rax]; 
0x000000000018690f: inc dword ptr [rax - 0x3f000417]; in eax, dx; sti; call qword ptr [rax]; 
0x0000000000187553: inc dword ptr [rax - 0x4e]; cld; call rax; 
0x0000000000187553: inc dword ptr [rax - 0x4e]; cld; call rax; mov cl, 0xfc; jmp qword ptr [rax - 0x4f]; 
0x000000000017861b: inc dword ptr [rax - 0x4f000d96]; push -0xe; jmp rax; 
0x000000000004a5cd: inc dword ptr [rax - 0x4f943]; jmp qword ptr [rax]; 
0x000000000004b116: inc dword ptr [rax - 0x4fb43]; jmp qword ptr [rax]; 
0x000000000018776b: inc dword ptr [rax - 0x51]; cld; call rax; 
0x000000000018776b: inc dword ptr [rax - 0x51]; cld; call rax; scasb al, byte ptr [rdi]; cld; jmp qword ptr [rax - 0x52]; 
0x000000000017a003: inc dword ptr [rax - 0x59]; cmc; call rbx; 
0x000000000018705b: inc dword ptr [rax - 0x75]; cld; call rax; 
0x000000000018705b: inc dword ptr [rax - 0x75]; cld; call rax; mov bh, ah; jmp qword ptr [rax - 0x76]; 
0x0000000000187273: inc dword ptr [rax - 0x78]; cld; call rax; 
0x0000000000187273: inc dword ptr [rax - 0x78]; cld; call rax; xchg esp, edi; jmp qword ptr [rax - 0x79]; 
0x0000000000186827: inc dword ptr [rax - 0x7f0003f1]; adc esp, edi; call qword ptr [rax]; 
0x0000000000186827: inc dword ptr [rax - 0x7f0003f1]; adc esp, edi; call qword ptr [rax]; add al, 0xfc; call rax; 
0x0000000000186823: inc dword ptr [rax - 0x7f0003f3]; paddb mm7, mm7; adc byte ptr [rcx], 0xfc; call qword ptr [rax]; 
0x0000000000186823: inc dword ptr [rax - 0x7f0003f3]; paddb mm7, mm7; adc byte ptr [rcx], 0xfc; call qword ptr [rax]; add al, 0xfc; call rax; 
0x0000000000187483: inc dword ptr [rax - 0xf000384]; jnp 0x187487; jmp qword ptr [rax + 0x7b]; 
0x0000000000186dc7: inc dword ptr [rax - 0xf0003aa]; push rbp; cld; jmp qword ptr [rsi + 0x55]; 
0x0000000000189285: inc dword ptr [rax]; add ah, al; ret; 
0x000000000019e185: inc dword ptr [rax]; add byte ptr [rax + 0x42], ch; cld; jmp qword ptr [rbx + 0x17]; 
0x000000000004dd1a: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; test dword ptr [rax - 0x16000006], ebx; ret; 
0x000000000004b72a: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8b44; 
0x0000000000062123: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x00000000000cd96a: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x0000000000161291: inc dword ptr [rax]; add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000016405d: inc dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000161297: inc dword ptr [rax]; add byte ptr [rax], al; sub eax, ecx; ret; 
0x00000000000fab31: inc dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000186257: inc dword ptr [rax]; and bl, bh; push rax; and bl, bh; jmp rax; 
0x0000000000186b43: inc dword ptr [rax]; cld; call qword ptr [rax + 0x27]; 
0x00000000001869d3: inc dword ptr [rax]; cld; jmp rax; 
0x0000000000186977: inc dword ptr [rax]; cli; sti; call qword ptr [rax - 5]; 
0x0000000000186633: inc dword ptr [rax]; fdivp st(3); jmp rax; 
0x000000000017863b: inc dword ptr [rax]; insb byte ptr [rdi], dx; push qword ptr [rax - 0x3f000d95]; imul esi, edx, -1; shr byte ptr [rbx - 0xe], 1; jmp rax; 
0x0000000000186337: inc dword ptr [rax]; jp 0x186336; call qword ptr [rax + 0x7b]; 
0x000000000017abe7: inc dword ptr [rax]; nop; cli; call qword ptr [rax]; 
0x00000000001867d7: inc dword ptr [rax]; or ah, bh; jmp rax; 
0x00000000001868ff: inc dword ptr [rax]; or bh, ah; call rax; 
0x000000000010c5d7: inc dword ptr [rax]; or eax, esi; bswap eax; ret; 
0x00000000001781ff: inc dword ptr [rax]; out 0xf1, al; call qword ptr [rax]; 
0x0000000000177f37: inc dword ptr [rax]; push rsi; out dx, eax; call qword ptr [rax]; 
0x00000000000f31b5: inc dword ptr [rax]; ret; 
0x0000000000186923: inc dword ptr [rax]; sti; call qword ptr [rax - 0xc]; 
0x000000000018630b: inc dword ptr [rax]; sti; jmp rax; 
0x00000000001782af: inc dword ptr [rax]; xchg eax, ebp; cld; push qword ptr [rax - 0x6a]; cld; jmp rax; 
0x00000000001869b7: inc dword ptr [rax]; xor ah, bh; jmp rax; 
0x0000000000186a5b: inc dword ptr [rax]; xor esp, edi; jmp rax; 
0x00000000000cc6da: inc dword ptr [rbp + 0x31]; rol byte ptr [rbx + 0xf4104f8], cl; xchg eax, esp; ret 0x8944; 
0x00000000000cd440: inc dword ptr [rbp + 0x31]; rol byte ptr [rbx + 0xf4104f8], cl; xchg eax, esp; ret 0xd5e9; 
0x00000000000cfa1d: inc dword ptr [rbp + 0x39ee74f1]; ret 0x8e0f; 
0x0000000000126a7e: inc dword ptr [rbp + 0x42840fc0]; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 0x58; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000cb637: inc dword ptr [rbp + 0x440f48c0]; adc al, 0x24; add rsp, 0x18; mov rax, rdx; ret; 
0x0000000000135570: inc dword ptr [rbp + 0x480b78c0]; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000007b193: inc dword ptr [rbp + 0x481d75c0]; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000007b2e3: inc dword ptr [rbp + 0x481d75c0]; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000112f16: inc dword ptr [rbp + 0x481d78c0]; movsxd rdi, ebx; mov eax, 3; syscall; 
0x00000000000f1165: inc dword ptr [rbp + 0x482678c0]; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000007b7bf: inc dword ptr [rbp + 0x483175c0]; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000012070f: inc dword ptr [rbp + 0x488b74c0]; mov eax, dword ptr [rsp + 0xe8]; mov rdi, r14; call qword ptr [rax + 0x20]; 
0x0000000000126b63: inc dword ptr [rbp + 0x48a174c0]; mov eax, dword ptr [rsp + 0x88]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000126814: inc dword ptr [rbp + 0x48ae74c0]; mov eax, dword ptr [rsp + 0x78]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000124436: inc dword ptr [rbp + 0x497574c0]; mov eax, dword ptr [rsi + 0xd0]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x0000000000121562: inc dword ptr [rbp + 0x5b0975c0]; pop rbp; xor eax, eax; pop r12; ret; 
0x0000000000064cb4: inc dword ptr [rbp + 0x6f850fc0]; sub byte ptr [rax], al; add byte ptr [rbx - 0x10f6b], cl; inc dword ptr [rbx - 0x7cf0cf06]; ret; 
0x00000000000ae4a6: inc dword ptr [rbp + 0x79c789c0]; ret; 
0x00000000001349be: inc dword ptr [rbp + 0x9880fc0]; add al, 0; add byte ptr [rax + 0x63], cl; std; mov eax, 3; syscall; 
0x0000000000117cc4: inc dword ptr [rbp + 1]; ret 0x3941; 
0x000000000018dbbb: inc dword ptr [rbp + rbx*8 - 0x44dbfffe]; cli; jmp rsp; 
0x000000000018ae93: inc dword ptr [rbp + rdi*4 - 0x2abffff]; hlt; call rsp; 
0x0000000000189bcb: inc dword ptr [rbp + rsi + 1]; add byte ptr [rbp - 0x2e], dh; out dx, eax; dec dword ptr [rbp + rsi - 0x2d6fffff]; out dx, eax; call rsp; 
0x0000000000127cfc: inc dword ptr [rbp - 0x147bf040]; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; jo 0x127d56; mov edi, esp; call qword ptr [rax + 0x20]; 
0x00000000001347aa: inc dword ptr [rbp - 0x2277f040]; add byte ptr [rax], al; add dh, dh; ret; 
0x00000000000f2221: inc dword ptr [rbp - 0x39fc8640]; add eax, dword ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x0000000000048776: inc dword ptr [rbp - 0x3db6f02e]; pop rbx; ret; 
0x00000000000465af: inc dword ptr [rbp - 0x3f6bf040]; add rsp, 8; movzx eax, al; ret; 
0x000000000011873e: inc dword ptr [rbp - 0x467bf040]; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + 0x63], 0xfe; mov eax, 3; syscall; 
0x00000000000efa51: inc dword ptr [rbp - 0x497af040]; add dword ptr [rax], eax; add byte ptr [rbx - 0x6117c385], cl; ret; 
0x00000000001092b7: inc dword ptr [rbp - 0x7b]; in al, 0x89; ret 0x87e; 
0x000000000009554d: inc dword ptr [rbp - 0x7b]; rol byte ptr [rcx + 0xf], cl; xchg eax, ebp; ret 0x5474; 
0x00000000000f3bbf: inc dword ptr [rbp - 0x7ce38b40]; ret; 
0x00000000000f3c0a: inc dword ptr [rbp - 0x7cee8b40]; ret; 
0x000000000018cc1b: inc dword ptr [rbp*2 - 0x5a2bfffe]; clc; lcall ptr [rbp*2 - 0x594bfffe]; clc; jmp rsp; 
0x000000000011bcb0: inc dword ptr [rbx + 0x2a77180d]; add byte ptr [rdx], al; add rsp, 8; ret; 
0x00000000000fb9a2: inc dword ptr [rbx + 0x374fff8]; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000002274d: inc dword ptr [rbx + 0x3a14eb0d]; add byte ptr [rcx + rbp*8], al; paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x0000000000132f8d: inc dword ptr [rbx + 0xd74fff8]; add rsp, 8; ret; 
0x0000000000032df6: inc dword ptr [rbx + 0xfff0878]; xchg eax, ebp; ret 0x9be9; 
0x000000000018af13: inc dword ptr [rbx + rax*8 + 0x49940001]; cmc; call rsp; 
0x00000000000e47c5: inc dword ptr [rbx + rcx*4 + 0x65]; adc byte ptr [rax - 0x77], cl; ret; 
0x000000000018cd03: inc dword ptr [rbx + rsi*2 + 2]; add byte ptr [rsi + 0x738cfff8], dl; add al, byte ptr [rax]; out 0xf8, eax; call rsp; 
0x000000000005f8da: inc dword ptr [rbx - 0x10ff43]; jmp qword ptr [rax]; 
0x00000000000c485c: inc dword ptr [rbx - 0x1af73]; jmp qword ptr [rax]; 
0x00000000000c4652: inc dword ptr [rbx - 0x1c773]; jmp qword ptr [rax]; 
0x000000000005f8d4: inc dword ptr [rbx - 0x2e7cfe08]; inc dword ptr [rbx - 0x10ff43]; jmp qword ptr [rax]; 
0x000000000007bda9: inc dword ptr [rbx - 0x3ca410dd]; nop; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000012485c: inc dword ptr [rbx - 0x3fe6fe08]; add rsp, 8; add eax, 2; ret; 
0x00000000000c49d4: inc dword ptr [rbx - 0x49f0fb37]; add ch, cl; xchg eax, edx; idiv edi; push rsi; ret; 
0x00000000000d2741: inc dword ptr [rbx - 0x598afb1a]; pop rbx; pop rbp; pop r12; ret; 
0x00000000001793fb: inc dword ptr [rbx - 0x66]; hlt; dec dword ptr [rbp - 0x66]; hlt; call qword ptr [rdi - 0x66]; 
0x000000000004bf23: inc dword ptr [rbx - 0x6a76f73e]; movabs al, byte ptr [0x8949008b48fffffb]; add bl, ch; ret; 
0x0000000000061733: inc dword ptr [rbx - 0x6a76f73e]; shr bh, 0xff; dec dword ptr [rax - 0x75]; add byte ptr [rcx - 0x77], cl; add bl, ch; ret; 
0x0000000000080246: inc dword ptr [rbx - 0x73]; sub eax, 0x448d48fe; ret; 
0x00000000001222ad: inc dword ptr [rbx - 0x76b79c03]; ret; 
0x00000000000a7821: inc dword ptr [rbx - 0x78f0f606]; int1; add al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000006ceb7: inc dword ptr [rbx - 0x7bf09608]; ret 0xfffe; 
0x0000000000064cc2: inc dword ptr [rbx - 0x7cf0cf06]; ret; 
0x00000000001144ff: inc dword ptr [rbx - 0xc8b0a08]; pop rbx; ret; 
0x000000000003d009: inc dword ptr [rbx]; add byte ptr [rax], al; xor eax, edx; ret; 
0x0000000000146876: inc dword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000a1b9a: inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000000a1a9f: inc dword ptr [rbx]; pop rbx; ret; 
0x0000000000060e54: inc dword ptr [rcx + 0x29]; ret 0x3945; 
0x000000000004db79: inc dword ptr [rcx + 0x39]; ret 0x870f; 
0x000000000004b7bc: inc dword ptr [rcx + 0x39]; ret; 
0x00000000000c98f7: inc dword ptr [rcx + 0x464ff]; add byte ptr [rax + rdx - 0x7f], dh; jmp qword ptr [rbp + 4]; 
0x00000000000739eb: inc dword ptr [rcx + 0x5c]; ret; 
0x00000000001177f3: inc dword ptr [rcx + 0x5e]; ret; 
0x0000000000178047: inc dword ptr [rcx + 0x5efff0b8]; mov bh, 0xf0; jmp rdi; 
0x0000000000075e89: inc dword ptr [rcx + 0x5f]; ret; 
0x00000000000f354c: inc dword ptr [rcx + 0x800008]; add byte ptr [rax - 0x77], cl; ret 0x5e9; 
0x00000000000df307: inc dword ptr [rcx + 0x8000fd]; add byte ptr [rdi], cl; call 0xfffffffffd918600; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x000000000010c578: inc dword ptr [rcx + 0xe2]; rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x000000000005025c: inc dword ptr [rcx + 0xf]; mov dh, 0x56; or al, 0x85; sal byte ptr [rbp + 5], 0xf6; ret 0x7450; 
0x0000000000039d8f: inc dword ptr [rcx + rbp - 0x40]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000ee0a1: inc dword ptr [rcx + rcx*4 - 0x11]; call 0xebfe0; movsxd rdi, r13d; mov eax, 3; syscall; 
0x00000000001206d4: inc dword ptr [rcx + rcx*4 - 1]; call 0xebe00; mov rdx, qword ptr [rbx + 0x38]; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x00000000000c8b7e: inc dword ptr [rcx - 0x1e]; add byte ptr [rax + 0x63], cl; ret 0xb60f; 
0x00000000001798cb: inc dword ptr [rcx - 0x32]; hlt; inc dword ptr [rcx - 0x32]; hlt; jmp rsp; 
0x00000000001798cf: inc dword ptr [rcx - 0x32]; hlt; jmp rsp; 
0x000000000002f5ec: inc dword ptr [rcx - 0x42]; or eax, 0xe9000000; ret; 
0x0000000000047103: inc dword ptr [rcx - 0x46]; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x00000000001794fb: inc dword ptr [rcx - 0x64]; hlt; dec dword ptr [rbx - 0x64]; hlt; call qword ptr [rbp - 0x64]; 
0x000000000004ff67: inc dword ptr [rcx - 0x77]; popfq; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000c6499: inc dword ptr [rcx - 0x77]; ret; 
0x000000000002a9f5: inc dword ptr [rcx - 0x78]; add rcx, qword ptr [r9 + 0x39]; ret; 
0x000000000010a0ca: inc dword ptr [rcx - 9]; add al, 0x24; add byte ptr [rax - 0x76b80000], al; ret 0x3875; 
0x000000000018baad: inc dword ptr [rcx]; add ah, dh; sub al, 0xf7; jmp rsp; 
0x0000000000114079: inc dword ptr [rcx]; add byte ptr [rax + 0x29], cl; ret; 
0x000000000004e987: inc dword ptr [rcx]; add byte ptr [rax], al; add bh, al; test dword ptr [rdx + rdi*8 + 0x1ffff], edx; add byte ptr [rax], al; jmp rax; 
0x000000000004ed6f: inc dword ptr [rcx]; add byte ptr [rax], al; add bh, al; test dword ptr [rdx + rdi*8 + 0xffff], edx; add byte ptr [rax], al; jmp rax; 
0x00000000000ca7aa: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000002e1ff: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; mov eax, 3; syscall; 
0x00000000001b66f9: inc dword ptr [rcx]; or ebp, edx; add dword ptr [rbx], eax; ret; 
0x0000000000179343: inc dword ptr [rcx]; sbb ah, dh; jmp qword ptr [rbx]; 
0x0000000000020c74: inc dword ptr [rdi + 4]; ret; 
0x0000000000188aeb: inc dword ptr [rdi + rax*8]; add byte ptr [rax + 0x6cffed65], ch; mov byte ptr [rax], 0; ret; 
0x000000000018ca53: inc dword ptr [rdi + rbx*2]; add al, byte ptr [rax]; ret 0xf880; 
0x000000000004820c: inc dword ptr [rdi + rcx + 0x44]; call 0xfffffffffff9a6fe; jmp qword ptr [rsi + 0x2e]; 
0x00000000001895eb: inc dword ptr [rdi + rdx + 0x17940001]; out dx, eax; call rsp; 
0x00000000001895e3: inc dword ptr [rdi + rdx + 1]; add ah, dh; adc al, 0xef; inc dword ptr [rdi + rdx + 0x17940001]; out dx, eax; call rsp; 
0x000000000018c4c3: inc dword ptr [rdi + rsi + 0x1ca40002]; clc; jmp rsp; 
0x0000000000105b91: inc dword ptr [rdi - 0x76b7ffd5]; ret 0x2b49; 
0x00000000001b867c: inc dword ptr [rdi]; add byte ptr [rax], al; ret 3; 
0x0000000000179543: inc dword ptr [rdi]; popfq; hlt; call qword ptr [rcx]; 
0x000000000017929b: inc dword ptr [rdi]; sbb esp, esi; jmp rsp; 
0x0000000000186c1b: inc dword ptr [rdx + 0x65]; cld; call rdx; 
0x0000000000186c1b: inc dword ptr [rdx + 0x65]; cld; call rdx; cld; jmp qword ptr [rdx + 0x64]; 
0x000000000018d7ab: inc dword ptr [rdx + rax*8 + 0x41640002]; cli; call rsp; 
0x000000000018ddcb: inc dword ptr [rdx + rbp*8 - 0x1c6bfffe]; cli; ljmp ptr [rdx + rbp*8 - 0x1bcbfffe]; cli; call rsp; 
0x000000000010c844: inc dword ptr [rdx + rdx*8 - 0x76be738b]; xor cl, byte ptr [rcx - 0x7d]; ret 0x4d04; 
0x000000000018763f: inc dword ptr [rdx - 0x53]; cld; call rdx; 
0x000000000018763f: inc dword ptr [rdx - 0x53]; cld; call rdx; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rdx - 0x54]; 
0x00000000001863b3: inc dword ptr [rdx - 0x5b]; std; call qword ptr [rdx]; 
0x0000000000187147: inc dword ptr [rdx - 0x7a]; cld; call rdx; 
0x000000000011480d: inc dword ptr [rip - 0x77cdf8c]; push qword ptr [rdx - 0x3dbbf0fe]; ret; 
0x000000000013ddcd: inc dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x0000000000186bb7: inc dword ptr [rsi + 0x62]; cld; call rsi; 
0x000000000018759b: inc dword ptr [rsi - 0x4f]; cld; call rsi; 
0x000000000018759b: inc dword ptr [rsi - 0x4f]; cld; call rsi; mov al, 0xfc; jmp qword ptr [rsi - 0x50]; 
0x0000000000186447: inc dword ptr [rsi - 0x53]; std; jmp rsi; 
0x00000000001870a3: inc dword ptr [rsi - 0x76]; cld; call rsi; 
0x00000000001870a3: inc dword ptr [rsi - 0x76]; cld; call rsi; mov esp, edi; jmp qword ptr [rsi - 0x77]; 
0x0000000000187707: inc dword ptr [rsp + rbp*4 - 4]; call rsp; 
0x0000000000188883: inc dword ptr [rsp + rsi*4]; add byte ptr [rax + 0x19], al; in al, dx; dec dword ptr [rsp + rsi*4 + 0x195f0000]; in al, dx; call rsp; 
0x0000000000186ce3: inc dword ptr [rsp - 4]; call rsp; 
0x00000000001867eb: inc eax; adc esp, edi; call qword ptr [rax + 4]; 
0x00000000001867eb: inc eax; adc esp, edi; call qword ptr [rax + 4]; cld; call qword ptr [rax]; 
0x00000000000885ca: inc eax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000186b33: inc eax; and ah, bh; call qword ptr [rax]; 
0x0000000000186b33: inc eax; and ah, bh; call qword ptr [rax]; and bh, ah; jmp qword ptr [rax + 0x23]; 
0x0000000000179f3b: inc eax; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp rax; 
0x000000000017a087: inc eax; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp rax; 
0x0000000000186967: inc eax; hlt; sti; call qword ptr [rax]; 
0x0000000000186967: inc eax; hlt; sti; call qword ptr [rax]; idiv bl; jmp qword ptr [rax - 9]; 
0x0000000000178643: inc eax; imul esi, edx, -1; shr byte ptr [rbx - 0xe], 1; jmp rax; 
0x000000000017860b: inc eax; imul esi, edx, 0xf269f0ff; jmp qword ptr [rax]; 
0x0000000000186913: inc eax; in eax, dx; sti; call qword ptr [rax]; 
0x00000000000885c7: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000885c4: inc eax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000187253: inc eax; mov edi, esp; call qword ptr [rax - 0x75]; 
0x0000000000187253: inc eax; mov edi, esp; call qword ptr [rax - 0x75]; cld; jmp rax; 
0x0000000000186d67: inc eax; movsxd rdi, esp; call qword ptr [rax + 0x63]; 
0x0000000000186d67: inc eax; movsxd rdi, esp; call qword ptr [rax + 0x63]; cld; jmp rax; 
0x00000000001867e3: inc eax; or eax, 0xfc0fffc; cld; inc eax; adc esp, edi; call qword ptr [rax + 4]; 
0x00000000001867e7: inc eax; paddb mm7, mm7; rcl byte ptr [rcx], 0xfc; call qword ptr [rax + 4]; 
0x00000000001867e7: inc eax; paddb mm7, mm7; rcl byte ptr [rcx], 0xfc; call qword ptr [rax + 4]; cld; call qword ptr [rax]; 
0x00000000001785f3: inc eax; push 0x68f0fff2; bnd jmp qword ptr [rax]; imul esi, edx, 0xf26940ff; jmp qword ptr [rax + 0x69]; 
0x0000000000186787: inc eax; salc; sti; call qword ptr [rax]; 
0x0000000000186787: inc eax; salc; sti; call qword ptr [rax]; fdivr st(3); call qword ptr [rax - 0x3d]; 
0x0000000000186247: inc eax; sbb edi, ebx; jmp rax; 
0x0000000000186adf: inc eax; sbb esp, edi; call qword ptr [rax]; 
0x0000000000186adf: inc eax; sbb esp, edi; call qword ptr [rax]; sbb edi, esp; jmp qword ptr [rax + 0x1c]; 
0x0000000000187573: inc eax; scasb al, byte ptr [rdi]; cld; call qword ptr [rax - 0x52]; 
0x0000000000187573: inc eax; scasb al, byte ptr [rdi]; cld; call qword ptr [rax - 0x52]; cld; jmp rax; 
0x0000000000036719: inc eax; shr eax, 0x1f; ret; 
0x00000000001862bb: inc eax; sti; jmp qword ptr [rax + 0x42]; 
0x00000000001864b7: inc eax; stosb byte ptr [rdi], al; std; call qword ptr [rax - 0x55]; 
0x00000000001864b7: inc eax; stosb byte ptr [rdi], al; std; call qword ptr [rax - 0x55]; std; jmp rax; 
0x000000000018778b: inc eax; stosd dword ptr [rdi], eax; cld; jmp qword ptr [rax - 0x5f]; 
0x0000000000186a93: inc eax; sub al, 0xfc; call qword ptr [rax + 0x70fffc2e]; xor ah, bh; jmp qword ptr [rax + 0x32]; 
0x000000000018707b: inc eax; xchg esp, edi; call qword ptr [rax - 0x79]; 
0x000000000018707b: inc eax; xchg esp, edi; call qword ptr [rax - 0x79]; cld; jmp rax; 
0x000000000018629b: inc eax; xor edi, ebx; jmp qword ptr [rax + 0x35]; 
0x0000000000179c79: inc ebx; add dh, bh; jmp rdi; 
0x00000000000fadfe: inc ebx; mov eax, 0x110; syscall; 
0x00000000000faebe: inc ebx; mov eax, 0x11b; syscall; 
0x00000000000fbd1e: inc ebx; mov eax, 0x44; syscall; 
0x00000000000fad6e: inc ebx; mov eax, 0x63; syscall; 
0x00000000000eaf9e: inc ebx; mov eax, 0x84; syscall; 
0x00000000000faa3e: inc ebx; mov eax, 0xb1; syscall; 
0x00000000000fb54e: inc ebx; mov r10, rcx; mov eax, 0x36; syscall; 
0x0000000000036ef9: inc ebx; nop dword ptr [rax + rax]; mov eax, 0x3e; syscall; 
0x00000000000ecf76: inc ebx; nop dword ptr [rax + rax]; mov eax, 0x54; syscall; 
0x00000000000eb22b: inc ebx; nop dword ptr [rax]; mov eax, 0x89; syscall; 
0x00000000000f1eb8: inc ebx; nop word ptr [rax + rax]; mov eax, 0x132; syscall; 
0x00000000000fb008: inc ebx; nop word ptr [rax + rax]; mov eax, 0x134; syscall; 
0x00000000000eb758: inc ebx; nop word ptr [rax + rax]; mov eax, 0x15; syscall; 
0x00000000000f4958: inc ebx; nop word ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x00000000000ebe58: inc ebx; nop word ptr [rax + rax]; mov eax, 0x20; syscall; 
0x00000000000fb118: inc ebx; nop word ptr [rax + rax]; mov eax, 0x31; syscall; 
0x00000000000fb1a8: inc ebx; nop word ptr [rax + rax]; mov eax, 0x34; syscall; 
0x00000000000ebfa8: inc ebx; nop word ptr [rax + rax]; mov eax, 0x50; syscall; 
0x00000000000f1e28: inc ebx; nop word ptr [rax + rax]; mov eax, 0xa2; syscall; 
0x00000000000f11d4: inc ebx; nop word ptr cs:[rax + rax]; mov eax, 0x10; syscall; 
0x00000000000f1014: inc ebx; nop word ptr cs:[rax + rax]; mov eax, 0x8d; syscall; 
0x00000000000fa96f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x00000000000ebeaf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x00000000000ebf0f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x00000000000faaef: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x00000000000faf3f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x00000000000fa8af: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x00000000000ebedf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x00000000000cb28f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x00000000000f497f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x00000000000fbe8f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1d; syscall; 
0x00000000000fbebf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1f; syscall; 
0x00000000000ebe7f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000b427f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x00000000000fb59f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x00000000000fb1cf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x00000000000fbd9f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x40; syscall; 
0x00000000000fbd6f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x41; syscall; 
0x00000000000fbe5f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x43; syscall; 
0x00000000000fbd3f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x47; syscall; 
0x00000000000f30af: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x4d; syscall; 
0x00000000000ebfcf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x00000000000eb39f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x00000000000ec7cf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x00000000000ec7ff: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000f0c4f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x62; syscall; 
0x00000000000fab4f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000c1eff: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000c1f2f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000c1f8f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000c1fbf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000c1fef: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x00000000000fa45f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7a; syscall; 
0x00000000000fa48f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x00000000000fa84f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x00000000000fa87f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x00000000000fae1f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x00000000000fac0f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x87; syscall; 
0x00000000000eb24f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000000cb1ff: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000000cb22f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x00000000000cb25f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x00000000000cb2bf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000000cb2ef: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000000cb31f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x00000000000f4a0f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x00000000000f4a3f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x00000000000f4a6f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x00000000000fa7af: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x00000000000fac3f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000000f0c1f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa0; syscall; 
0x00000000000f1d8f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x00000000000f219f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000000f21cf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x00000000000f48bf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x00000000000fa26f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x00000000000fa8df: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x00000000000fa90f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x00000000000fa42f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x00000000000f816f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x00000000000f804f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x00000000000fa93f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x00000000000fa7df: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x00000000000faabf: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x00000000000fab1f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x00000000000faf12: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x11f; syscall; 
0x00000000000fbe32: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x1e; syscall; 
0x00000000000fb572: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x30; syscall; 
0x00000000000fb232: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x32; syscall; 
0x00000000000eb442: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x53; syscall; 
0x00000000000eceb3: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x59; syscall; 
0x00000000000f49e2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x95; syscall; 
0x00000000000fa782: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x9e; syscall; 
0x00000000000fa822: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x9f; syscall; 
0x00000000000fabe2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xb4; syscall; 
0x00000000000f4892: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xb; syscall; 
0x00000000000f80e2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc2; syscall; 
0x00000000000f8142: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc3; syscall; 
0x00000000000f8022: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc4; syscall; 
0x00000000000f81d2: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc5; syscall; 
0x00000000000faa92: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0xfe; syscall; 
0x00000000000ece5c: inc ebx; nop; mov eax, 0x58; syscall; 
0x0000000000036ecd: inc ebx; nop; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x000000000017958b: inc ebx; popfq; hlt; ljmp ptr [rcx - 0x65]; hlt; call rdi; 
0x0000000000186403: inc ecx; lodsb al, byte ptr [rsi]; std; jmp qword ptr [rcx - 0x53]; 
0x000000000018761f: inc edx; mov al, 0xfc; call qword ptr [rdx - 0x50]; 
0x000000000018761f: inc edx; mov al, 0xfc; call qword ptr [rdx - 0x50]; cld; jmp rdx; 
0x0000000000187127: inc edx; mov esp, edi; call qword ptr [rdx - 0x77]; 
0x0000000000187127: inc edx; mov esp, edi; call qword ptr [rdx - 0x77]; cld; jmp rdx; 
0x0000000000186e4b: inc edx; push rbp; cld; call qword ptr [rdx + 0x55]; 
0x0000000000056dc3: inc esi; add al, 7; add dword ptr [rax - 0x77], ecx; dec byte ptr [rax - 0x7d]; ret 0xf01; 
0x0000000000186b97: inc esi; cld; call qword ptr [rsi + 0x65]; 
0x0000000000186b97: inc esi; cld; call qword ptr [rsi + 0x65]; cld; jmp rsi; 
0x00000000001875bb: inc esi; lodsd eax, dword ptr [rsi]; cld; call qword ptr [rsi - 0x53]; 
0x00000000001875bb: inc esi; lodsd eax, dword ptr [rsi]; cld; call qword ptr [rsi - 0x53]; cld; jmp rsi; 
0x00000000001870c3: inc esi; xchg ah, bh; call qword ptr [rsi - 0x7a]; 
0x00000000001870c3: inc esi; xchg ah, bh; call qword ptr [rsi - 0x7a]; cld; jmp rsi; 
0x000000000018955b: inc esp; adc eax, dword ptr [rcx]; add byte ptr [rdx + rcx - 0x11], dh; jmp rsp; 
0x00000000001871ef: inc esp; mov ah, bh; call qword ptr [rax + rcx*4 - 4]; jmp rsp; 
0x0000000000177913: inc esp; out 0xff, eax; jmp qword ptr [rcx]; 
0x000000000018d9fb: inc esp; rol dword ptr [rdx], 1; add byte ptr [rsi + rbp*2], ah; cli; jmp rsp; 
0x000000000018acfb: inc esp; scasd eax, dword ptr [rdi]; add dword ptr [rax], eax; and al, 0x3d; hlt; jmp rsp; 
0x00000000001876e7: inc esp; scasd eax, dword ptr [rdi]; cld; call qword ptr [rdi + rbp*4 - 4]; jmp rsp; 
0x000000000018b8e3: inc esp; test dword ptr [rcx], 0xf704a400; jmp rsp; 
0x000000000002a9f4: inc qword ptr [rcx - 0x78]; add rcx, qword ptr [r9 + 0x39]; ret; 
0x00000000000885c9: inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000885c6: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000885c3: inc rax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000001955ec: insb byte ptr [rdi], dx; adc eax, 0x98a00000; in eax, dx; jmp rsi; 
0x0000000000059e7e: insb byte ptr [rdi], dx; add al, 0; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000007c914: insb byte ptr [rdi], dx; add al, byte ptr [rax]; add bl, dh; ret; 
0x00000000001b4e85: insb byte ptr [rdi], dx; add al, byte ptr [rax]; fadd dword ptr [rsi]; sti; jmp qword ptr [rdx]; 
0x0000000000194e85: insb byte ptr [rdi], dx; add byte ptr [rax], al; cwde; xchg eax, ebp; in eax, dx; jmp qword ptr [rax]; 
0x00000000001a2914: insb byte ptr [rdi], dx; add dword ptr [r8], r8d; mov sil, dl; jmp qword ptr [rbp]; 
0x0000000000138d54: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000135221: insb byte ptr [rdi], dx; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; add eax, 0x28a664; call qword ptr [rax]; 
0x0000000000150927: insb byte ptr [rdi], dx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000127980: insb byte ptr [rdi], dx; and al, 0x34; add dword ptr [rsp + rax*8 + 0x49], esi; mov edi, dword ptr [rbp]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000123e6f: insb byte ptr [rdi], dx; and al, 0x34; add dword ptr [rsp + rdi*4 + 0x49], esi; mov edi, dword ptr [rbp]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x00000000000fa2dc: insb byte ptr [rdi], dx; and al, 0xc0; mov al, 0x9c; mov qword ptr [rsp - 0x38], r8; mov qword ptr [rsp - 0x30], r9; syscall; 
0x000000000003679c: insb byte ptr [rdi], dx; and al, 0xe8; fld st(0); fstp xword ptr [rdi]; fsubp st(1); ret; 
0x000000000003683a: insb byte ptr [rdi], dx; and al, 0xe8; fstp xword ptr [rdi]; ret; 
0x00000000000b077f: insb byte ptr [rdi], dx; and al, 0xe8; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x000000000003681a: insb byte ptr [rdi], dx; and al, 0xe8; ret; 
0x00000000000369ea: insb byte ptr [rdi], dx; and al, 0xfe; ret; 
0x0000000000036869: insb byte ptr [rdi], dx; and al, 8; fscale; fstp st(1); ret; 
0x00000000000369b1: insb byte ptr [rdi], dx; and al, 8; fstp xword ptr [rsp - 0x18]; movsx eax, word ptr [rsp - 0x10]; and eax, 0x8000; ret; 
0x000000000003673a: insb byte ptr [rdi], dx; and al, 8; ret; 
0x00000000001b0714: insb byte ptr [rdi], dx; and eax, 0x65480002; clc; jmp qword ptr [rbx]; 
0x000000000019291c: insb byte ptr [rdi], dx; and ebp, ebx; jmp qword ptr [rdx]; 
0x00000000001a7b14: insb byte ptr [rdi], dx; cdq; add dword ptr [rax], eax; test al, 0x2d; cmc; jmp qword ptr [rcx]; 
0x00000000001874f9: insb byte ptr [rdi], dx; cld; call qword ptr [rax]; 
0x00000000000732a1: insb byte ptr [rdi], dx; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000003d124: insb byte ptr [rdi], dx; cmp byte ptr [rax], al; add rsp, 8; ret; 
0x000000000006af9e: insb byte ptr [rdi], dx; fldenv dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x00000000001a676d: insb byte ptr [rdi], dx; hlt; jmp qword ptr [rdx]; 
0x0000000000041dda: insb byte ptr [rdi], dx; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000017695e: insb byte ptr [rdi], dx; insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x0000000000188af4: insb byte ptr [rdi], dx; mov byte ptr [rax], 0; ret; 
0x00000000001aa914: insb byte ptr [rdi], dx; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rsi]; 
0x000000000018d65c: insb byte ptr [rdi], dx; mov eax, 0x25540002; cli; lcall ptr [rdx + rdi*4 + 0x26440002]; cli; jmp rsp; 
0x00000000000d62f4: insb byte ptr [rdi], dx; mov eax, 0x39c77f04; ret 0xc189; 
0x00000000000d62dc: insb byte ptr [rdi], dx; mov eax, 0x39df7f04; ret 0xc189; 
0x0000000000123bac: insb byte ptr [rdi], dx; mov eax, 1; ret; 
0x000000000018ae34: insb byte ptr [rdi], dx; mov ecx, 0xd2540001; hlt; push qword ptr [rcx + rdi*4 - 0x2d1bffff]; hlt; jmp rsp; 
0x00000000000f5280: insb byte ptr [rdi], dx; movabs byte ptr [0x854d10758b4dfff2], al; test byte ptr [rdi], 0x84; ret 0; 
0x000000000019d114: insb byte ptr [rdi], dx; out dx, eax; add byte ptr [rax], al; fdivr st(4); stc; call qword ptr [rsi + 0x16]; 
0x0000000000128864: insb byte ptr [rdi], dx; out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x00000000001a5014: insb byte ptr [rdi], dx; outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rcx]; 
0x00000000001b3a14: insb byte ptr [rdi], dx; pop rax; add al, byte ptr [rax]; cmp byte ptr [rax - 9], bh; call qword ptr [rax]; 
0x000000000017863d: insb byte ptr [rdi], dx; push qword ptr [rax - 0x3f000d95]; imul esi, edx, -1; shr byte ptr [rbx - 0xe], 1; jmp rax; 
0x0000000000188a44: insb byte ptr [rdi], dx; ret 0; 
0x000000000006ad24: insb byte ptr [rdi], dx; ret 0xf66; 
0x000000000006fb99: insb byte ptr [rdi], dx; ret 7; 
0x000000000006ac37: insb byte ptr [rdi], dx; ret; 
0x00000000000a5462: insb byte ptr [rdi], dx; ror byte ptr [rbp - 0x7bf0febe], 1; ret 0; 
0x000000000017a554: insb byte ptr [rdi], dx; sal esi, cl; call rdx; 
0x0000000000196d0c: insb byte ptr [rdi], dx; test ebp, ebp; jmp qword ptr [rdx]; 
0x00000000001b1514: insb byte ptr [rdi], dx; xor eax, dword ptr [rdx]; add al, bl; div dh; call qword ptr [rsi]; 
0x000000000013b9c0: insd dword ptr [rdi], dx; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001b4f55: insd dword ptr [rdi], dx; add al, byte ptr [rax]; cmp byte ptr [rsi], al; sti; jmp qword ptr [rdx]; 
0x000000000018cc25: insd dword ptr [rdi], dx; add al, byte ptr [rax]; mov ah, 0xa6; clc; jmp rsp; 
0x000000000002487c: insd dword ptr [rdi], dx; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000013c8c0: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000093605: insd dword ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000000f1322: insd dword ptr [rdi], dx; add dword ptr [rax], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000001507a7: insd dword ptr [rdi], dx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000005e198: insd dword ptr [rdi], dx; add rsp, 0xd0; mov eax, edx; pop rbx; ret; 
0x0000000000192964: insd dword ptr [rdi], dx; and ebp, ebx; jmp qword ptr [rdx]; 
0x000000000018c961: insd dword ptr [rdi], dx; clc; call rsp; 
0x000000000018c959: insd dword ptr [rdi], dx; clc; dec dword ptr [rsi + rdx*2 + 0x6d350002]; clc; call rsp; 
0x000000000002d284: insd dword ptr [rdi], dx; cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x392872]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001a4fb1: insd dword ptr [rdi], dx; hlt; jmp qword ptr [rcx]; 
0x00000000000f4902: insd dword ptr [rdi], dx; imul dword ptr [rax + rax]; add byte ptr [rbp + 0x10], dh; mov eax, 0x1a; syscall; 
0x00000000000eb702: insd dword ptr [rdi], dx; mov dword ptr [rip + 0x10750000], ebp; mov eax, 1; syscall; 
0x0000000000133b1f: insd dword ptr [rdi], dx; mov ebp, 0x894c0028; salc; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x00000000000a1b36: insd dword ptr [rdi], dx; or eax, 0xce8c100; and eax, 0xf; movsxd rsi, dword ptr [rcx + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000a1af6: insd dword ptr [rdi], dx; or eax, 0xce8c100; and eax, 0xf; movsxd rsi, dword ptr [rdx + rax*4]; add rdx, rsi; jmp rdx; 
0x000000000003d2cd: insd dword ptr [rdi], dx; out 0xec, al; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x000000000019bd69: insd dword ptr [rdi], dx; out dx, al; call qword ptr [rdi]; 
0x000000000017695f: insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x0000000000001bf0: insd dword ptr [rdi], dx; ret 0x1bb7; 
0x0000000000174d0d: insd dword ptr [rdi], dx; ret 0xb9b9; 
0x000000000000028e: insd dword ptr [rdi], dx; ret; 
0x0000000000176bc0: insd dword ptr [rdi], dx; sar bh, 1; jmp qword ptr [rdi]; 
0x0000000000175c1f: insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000000fb342: int 0; add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x2d; syscall; 
0x000000000012933f: int 0; add byte ptr [rax], al; mov rax, qword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000012028d: int 0; add byte ptr [rbp + 0x48a774c0], al; mov eax, dword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000000c2087: int 0x1f; xor byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f10f4: int 0x2c; add byte ptr [rdi + rax*8], ah; or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000012e428: int 0x48; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a0872: int 0x4c; lea ebx, dword ptr [rip + 0xd7f9a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009eba2: int 0x4c; lea ebx, dword ptr [rip + 0xd9a96]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d502: int 0x4c; lea ebx, dword ptr [rip + 0xdaf56]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000001b5d: int 0x4f; jmp rdx; 
0x0000000000108847: int 0x55; sub eax, dword ptr [rax]; mov rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000176084: int 0x6b; ret; 
0x0000000000195734: int 0x77; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000175de7: int 0x80; 
0x00000000001ad8ac: int 0x84; cmc; jmp qword ptr [rdx]; 
0x00000000000eb6a2: int 0x89; sub eax, 0x10750000; mov eax, 0; syscall; 
0x000000000013e6af: int 0x8b; add al, byte ptr [rax]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000fada2: int 0x92; sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000fa3a2: int 0x9c; sub al, 0; add byte ptr [rbp + 0x10], dh; mov eax, 8; syscall; 
0x000000000007000f: int 0x9e; cld; jmp qword ptr [rsi + 0x66]; 
0x0000000000173f33: int 0xe0; fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x0000000000165e21: int 0xeb; call qword ptr [rax]; 
0x00000000001a0aa9: int 0xf1; jmp qword ptr [rax]; 
0x00000000001b53e9: int 0xf7; call qword ptr [rcx]; 
0x000000000018d3d9: int 0xf9; call rsp; 
0x000000000018676d: int 0xfb; jmp rax; 
0x00000000000776e1: int 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000057eef: int 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000001609bf: int 8; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000004b6ed: int1; add al, byte ptr [rax]; add byte ptr [rax - 0x50743], al; call qword ptr [rbx + 0xf]; 
0x00000000000a7827: int1; add al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000010307b: int1; add byte ptr [rax], al; mov rsi, r13; mov rdx, rax; mov edi, 0x2000003; call qword ptr [rbx + 0x28]; 
0x0000000000108a10: int1; add eax, dword ptr [rax]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000004f20e: int1; add r8d, eax; mov eax, r8d; ret; 
0x000000000008c3ee: int1; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000018d608: int1; and edi, edx; lcall ptr [rbp + rsi*4 + 0x24100002]; cli; jmp rsp; 
0x0000000000097db8: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000017813a: int1; call qword ptr [rax + 0x54]; 
0x000000000017813a: int1; call qword ptr [rax + 0x54]; int1; jmp qword ptr [rax + 0x56]; 
0x000000000017817e: int1; call qword ptr [rax + 0x7a]; 
0x00000000001781da: int1; call qword ptr [rax - 0x4f000e64]; pushfq; int1; call rax; 
0x00000000001781ca: int1; call qword ptr [rax - 0x66]; 
0x00000000001781ca: int1; call qword ptr [rax - 0x66]; int1; jmp qword ptr [rax]; 
0x00000000001781c6: int1; call qword ptr [rax - 0x67]; 
0x00000000001781c6: int1; call qword ptr [rax - 0x67]; int1; call qword ptr [rax - 0x66]; int1; jmp qword ptr [rax]; 
0x000000000017816e: int1; call qword ptr [rax]; 
0x000000000017816e: int1; call qword ptr [rax]; jno 0x178164; jmp qword ptr [rax + 0x73]; 
0x00000000001a1dea: int1; call qword ptr [rbp]; 
0x00000000001a0852: int1; call qword ptr [rbx]; 
0x000000000019fa8a: int1; call qword ptr [rcx]; 
0x00000000001a00da: int1; call qword ptr [rdx]; 
0x00000000001a083a: int1; call qword ptr [rsi]; 
0x000000000017815a: int1; call rax; 
0x000000000017815a: int1; call rax; int1; jmp rax; 
0x00000000001a008a: int1; call rsi; 
0x000000000018a372: int1; call rsp; 
0x00000000001af6dd: int1; cmc; jmp qword ptr [rdx]; 
0x000000000014291b: int1; cmp al, 4; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000ece73: int1; cvtps2pi mm0, qword ptr [rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000131757: int1; dec dword ptr [rax + 0x29]; ret; 
0x000000000010a44b: int1; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000010e3f3: int1; dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x77], 5; xchg eax, ecx; adc eax, 0x8948002b; ret 0xb9; 
0x0000000000105616: int1; dec dword ptr [rcx - 0x75]; cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x000000000018a262: int1; dec dword ptr [rdx + rbp*2 - 0x489bffff]; int1; push qword ptr [rdx + rbp*2 - 0x485bffff]; int1; jmp rsp; 
0x00000000001781ae: int1; dec eax; cdq; int1; jmp rax; 
0x000000000018a1c2: int1; dec esp; add word ptr [rax], ax; and al, 0x87; int1; jmp rsp; 
0x0000000000177005: int1; in eax, dx; jmp rax; 
0x0000000000177001: int1; in eax, dx; lcall ptr [rcx + rsi*8]; in eax, dx; jmp rax; 
0x0000000000178136: int1; inc dword ptr [rax + 0x52]; int1; call qword ptr [rax + 0x54]; 
0x0000000000178136: int1; inc dword ptr [rax + 0x52]; int1; call qword ptr [rax + 0x54]; int1; jmp qword ptr [rax + 0x56]; 
0x00000000001781fe: int1; inc dword ptr [rax]; out 0xf1, al; call qword ptr [rax]; 
0x000000000017813e: int1; jmp qword ptr [rax + 0x56]; 
0x0000000000178172: int1; jmp qword ptr [rax + 0x73]; 
0x00000000001a1f2a: int1; jmp qword ptr [rax + 1]; 
0x000000000017812e: int1; jmp qword ptr [rax]; 
0x00000000001a03ea: int1; jmp qword ptr [rbp]; 
0x00000000001a0ee2: int1; jmp qword ptr [rbx]; 
0x000000000019fa0a: int1; jmp qword ptr [rcx]; 
0x00000000001a1482: int1; jmp qword ptr [rdi + 1]; 
0x00000000001a0536: int1; jmp qword ptr [rdx]; 
0x000000000011ebdf: int1; jmp qword ptr [rsi + 0x2e]; 
0x00000000001114cf: int1; jmp qword ptr [rsi + 0x66]; 
0x00000000001178a8: int1; jmp qword ptr [rsi + 0xf]; 
0x0000000000126bcc: int1; jmp qword ptr [rsi - 0x70]; 
0x00000000001780a6: int1; jmp rax; 
0x00000000000a1b45: int1; jmp rcx; 
0x00000000001a1b7a: int1; jmp rsi; 
0x000000000018a1ca: int1; jmp rsp; 
0x0000000000123ad3: int1; jo 0x123adb; add byte ptr [rcx + 0x146348f6], cl; mov al, 0x48; add eax, edx; jmp rax; 
0x00000000000f31b1: int1; mov byte ptr [r9 - 1], 0; ret; 
0x0000000000003a57: int1; mov dl, 0x1e; ret; 
0x00000000000cb37d: int1; mov eax, ecx; syscall; 
0x00000000001865c8: int1; mov ebx, 0xbbf1fffd; std; call qword ptr [rax - 0x45]; 
0x0000000000186518: int1; mov ebx, 0xbbf1fffd; std; call qword ptr [rcx]; 
0x0000000000186608: int1; mov ebx, 0xbbf1fffd; std; dec dword ptr [rax - 0x24]; sti; call qword ptr [rax]; 
0x0000000000186588: int1; mov ebx, 0xbbf1fffd; std; jmp qword ptr [rdi - 0x45]; 
0x000000000018660c: int1; mov ebx, 0xdc48fffd; sti; call qword ptr [rax]; 
0x000000000014c38b: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144e0f: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000121b6a: int1; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000010799e: int1; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000014c383: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144f87: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144fa3: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000012a58a: int1; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax; 
0x00000000000cb41e: int1; mov rdx, rbx; mov rsi, r12; movsxd rdi, r13d; mov eax, 0xcb; syscall; 
0x0000000000163623: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000000d0bb4: int1; or byte ptr [rsi + 0x32], 8; xor eax, eax; ret; 
0x00000000000ed373: int1; or ch, byte ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a1b88: int1; pop rbx; mov eax, eax; ret; 
0x000000000004705e: int1; pop rbx; ret; 
0x0000000000108072: int1; pop rdx; pop r10; ret; 
0x000000000018a26a: int1; push qword ptr [rdx + rbp*2 - 0x485bffff]; int1; jmp rsp; 
0x00000000001781fa: int1; push rax; in eax, 0xf1; inc dword ptr [rax]; out 0xf1, al; call qword ptr [rax]; 
0x00000000000d1b0b: int1; ret 0x2e; 
0x00000000000025eb: int1; ret; 
0x0000000000107eb3: int1; shr byte ptr [rbx], 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000f0c73: int1; shr dword ptr [rax + rax], 1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000186921: int1; sti; inc dword ptr [rax]; sti; call qword ptr [rax - 0xc]; 
0x00000000001980d4: int1; stosd dword ptr [rdi], eax; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000eb773: int1; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000163627: int1; sub eax, edx; ret; 
0x00000000000eb273: int1; sub ebp, dword ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fab73: int1; xor ch, byte ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa873: int1; xor eax, 0xd8f7002c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001245d6: int1; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x00000000001245f6: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x0000000000127ec6: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x0000000000127616: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x0000000000123a36: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x000000000009737e: int1; xor eax, eax; ret; 
0x000000000011ce8a: iretd; adc dword ptr [rax + rcx*2 + 0x33], esp; cmp al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000013d1fd: iretd; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000adc95: iretd; add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x894c; 
0x0000000000161bfd: iretd; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000013fcfe: iretd; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000011ffeb: iretd; add byte ptr [rax], al; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x00000000000fb16f: iretd; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0x2a; syscall; 
0x00000000000fb0df: iretd; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0x2b; syscall; 
0x0000000000053933: iretd; add byte ptr ss:[rbp + 0x5c], dh; mov eax, edx; pop rbx; ret; 
0x00000000000a08ff: iretd; add rsi, rcx; lea r11, qword ptr [rip + 0xd7f0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec2f: iretd; add rsi, rcx; lea r11, qword ptr [rip + 0xd9a06]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d58f: iretd; add rsi, rcx; lea r11, qword ptr [rip + 0xdaec6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001306dd: iretd; and dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000fbad6: iretd; call 0x108100; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x0000000000133b28: iretd; call qword ptr [rax + 0x10]; 
0x0000000000133bcb: iretd; call qword ptr [rax + 0x18]; 
0x00000000000738e1: iretd; call qword ptr [rax + 0x38]; 
0x0000000000086817: iretd; call rcx; 
0x000000000008a893: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x0000000000082c9d: iretd; in al, 0xff; dec dword ptr [rax - 0x77]; ret 0x3d83; 
0x000000000018a321: iretd; int1; jmp rsp; 
0x00000000000f9cad: iretd; jnp 0xf9cdc; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000fc339: iretd; mov byte ptr [rbp - 0x689], 0x73; mov eax, 0x14; syscall; 
0x00000000000711a2: iretd; mov dword ptr [rdi], ecx; ret; 
0x00000000000c0b5a: iretd; mov dword ptr [rsp + 0xc], eax; call 0x108100; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000000fa6d9: iretd; mov eax, 0x11c; syscall; 
0x00000000000fc0d1: iretd; mov eax, 0x14; syscall; 
0x00000000000fc27e: iretd; mov eax, 3; syscall; 
0x00000000000fc246: iretd; mov eax, ebx; syscall; 
0x0000000000103db8: iretd; mov eax, edx; sub eax, r9d; ret; 
0x0000000000037073: iretd; mov eax, r8d; syscall; 
0x00000000000fc1ce: iretd; mov qword ptr [rbp - 0x6d0], rax; mov eax, ebx; syscall; 
0x000000000008095a: iretd; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x00000000000361c5: iretd; movapd xmm0, xmm1; ret; 
0x0000000000174aa1: iretd; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x00000000000fc110: iretd; movsxd rdx, edx; mov eax, 0x14; syscall; 
0x00000000000fa69d: iretd; movsxd rsi, esi; mov eax, ecx; syscall; 
0x0000000000097e82: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000175ead: iretd; ret 0x8b36; 
0x000000000008cc1d: iretd; ret 0xa; 
0x00000000000630bd: iretd; ret; 
0x00000000000c10d1: iretd; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001868cb: jmp qword ptr [rax + 0x10]; 
0x0000000000186ae7: jmp qword ptr [rax + 0x1c]; 
0x0000000000186b3b: jmp qword ptr [rax + 0x23]; 
0x000000000018627f: jmp qword ptr [rax + 0x29]; 
0x00000000001869af: jmp qword ptr [rax + 0x2c]; 
0x0000000000186a37: jmp qword ptr [rax + 0x2f]; 
0x0000000000186a9f: jmp qword ptr [rax + 0x32]; 
0x000000000018629f: jmp qword ptr [rax + 0x35]; 
0x0000000000186a07: jmp qword ptr [rax + 0x37]; 
0x0000000000186a0b: jmp qword ptr [rax + 0x39]; 
0x00000000001862bf: jmp qword ptr [rax + 0x42]; 
0x0000000000178397: jmp qword ptr [rax + 0x4b]; 
0x0000000000177c13: jmp qword ptr [rax + 0x4c]; 
0x00000000001862d7: jmp qword ptr [rax + 0x4e]; 
0x00000000001783e3: jmp qword ptr [rax + 0x52]; 
0x0000000000178403: jmp qword ptr [rax + 0x53]; 
0x0000000000178423: jmp qword ptr [rax + 0x54]; 
0x0000000000177eaf: jmp qword ptr [rax + 0x56]; 
0x00000000001784a7: jmp qword ptr [rax + 0x57]; 
0x00000000001784cb: jmp qword ptr [rax + 0x58]; 
0x000000000017851b: jmp qword ptr [rax + 0x59]; 
0x0000000000186b77: jmp qword ptr [rax + 0x62]; 
0x00000000001785cb: jmp qword ptr [rax + 0x67]; 
0x0000000000178603: jmp qword ptr [rax + 0x69]; 
0x0000000000178663: jmp qword ptr [rax + 0x6c]; 
0x00000000001786ef: jmp qword ptr [rax + 0x6f]; 
0x0000000000178173: jmp qword ptr [rax + 0x73]; 
0x000000000018632f: jmp qword ptr [rax + 0x77]; 
0x000000000018748b: jmp qword ptr [rax + 0x7b]; 
0x00000000001868c3: jmp qword ptr [rax + 0xc]; 
0x00000000001868c7: jmp qword ptr [rax + 0xe]; 
0x000000000018e42b: jmp qword ptr [rax + 1]; 
0x000000000019f373: jmp qword ptr [rax + 3]; 
0x00000000000c97b9: jmp qword ptr [rax + 4]; 
0x00000000001868db: jmp qword ptr [rax + 8]; 
0x000000000018685b: jmp qword ptr [rax + 9]; 
0x000000000017806f: jmp qword ptr [rax - 0x10]; 
0x000000000018694f: jmp qword ptr [rax - 0x15]; 
0x000000000018667f: jmp qword ptr [rax - 0x1d]; 
0x00000000001866b3: jmp qword ptr [rax - 0x23]; 
0x00000000001866cf: jmp qword ptr [rax - 0x25]; 
0x00000000001867a3: jmp qword ptr [rax - 0x35]; 
0x0000000000178317: jmp qword ptr [rax - 0x3d]; 
0x0000000000178313: jmp qword ptr [rax - 0x3f]; 
0x000000000017830f: jmp qword ptr [rax - 0x41]; 
0x000000000017830b: jmp qword ptr [rax - 0x43]; 
0x0000000000178307: jmp qword ptr [rax - 0x45]; 
0x0000000000178303: jmp qword ptr [rax - 0x47]; 
0x00000000001782ff: jmp qword ptr [rax - 0x49]; 
0x0000000000178043: jmp qword ptr [rax - 0x4b]; 
0x00000000001782f7: jmp qword ptr [rax - 0x4d]; 
0x00000000001782f3: jmp qword ptr [rax - 0x4f]; 
0x00000000001782ef: jmp qword ptr [rax - 0x51]; 
0x0000000000187773: jmp qword ptr [rax - 0x52]; 
0x00000000001782eb: jmp qword ptr [rax - 0x53]; 
0x00000000001782e7: jmp qword ptr [rax - 0x55]; 
0x00000000001782e3: jmp qword ptr [rax - 0x57]; 
0x00000000001782df: jmp qword ptr [rax - 0x59]; 
0x00000000001863c3: jmp qword ptr [rax - 0x5b]; 
0x00000000001782d7: jmp qword ptr [rax - 0x5d]; 
0x000000000018778f: jmp qword ptr [rax - 0x5f]; 
0x0000000000179467: jmp qword ptr [rax - 0x67]; 
0x0000000000187063: jmp qword ptr [rax - 0x76]; 
0x000000000018727b: jmp qword ptr [rax - 0x79]; 
0x000000000017807f: jmp qword ptr [rax - 0xb]; 
0x000000000017809f: jmp qword ptr [rax - 1]; 
0x000000000017808f: jmp qword ptr [rax - 6]; 
0x000000000018696f: jmp qword ptr [rax - 9]; 
0x0000000000047908: jmp qword ptr [rax]; 
0x0000000000041d6b: jmp qword ptr [rbp + 0x75]; 
0x000000000019c233: jmp qword ptr [rbp + 2]; 
0x00000000000c9901: jmp qword ptr [rbp + 4]; 
0x00000000000557fd: jmp qword ptr [rbp - 0x3a]; 
0x0000000000179567: jmp qword ptr [rbp - 0x63]; 
0x0000000000065509: jmp qword ptr [rbp]; 
0x000000000019e18b: jmp qword ptr [rbx + 0x17]; 
0x00000000001a2e73: jmp qword ptr [rbx + 1]; 
0x000000000019de73: jmp qword ptr [rbx + 2]; 
0x00000000001911ab: jmp qword ptr [rbx + 3]; 
0x00000000000c9799: jmp qword ptr [rbx + 4]; 
0x00000000001734e6: jmp qword ptr [rbx - 0x40]; 
0x0000000000178f8f: jmp qword ptr [rbx - 0xd]; 
0x0000000000002547: jmp qword ptr [rbx]; 
0x000000000008aa7d: jmp qword ptr [rcx + 0x33]; 
0x0000000000194ccb: jmp qword ptr [rcx + 0x4000001]; 
0x0000000000001feb: jmp qword ptr [rcx + 0x7f]; 
0x000000000019d9fb: jmp qword ptr [rcx + 0xd]; 
0x000000000019a0a3: jmp qword ptr [rcx + 1]; 
0x00000000001b618b: jmp qword ptr [rcx + 2]; 
0x00000000000c97c5: jmp qword ptr [rcx + 4]; 
0x0000000000192b13: jmp qword ptr [rcx + 5]; 
0x0000000000186407: jmp qword ptr [rcx - 0x53]; 
0x0000000000179407: jmp qword ptr [rcx - 0x66]; 
0x0000000000173e43: jmp qword ptr [rcx - 0x69]; 
0x00000000000d928d: jmp qword ptr [rcx - 0xc]; 
0x00000000000c6f5c: jmp qword ptr [rcx]; 
0x000000000019df4b: jmp qword ptr [rdi + 0x2b]; 
0x00000000000fbf7b: jmp qword ptr [rdi + 0x6d]; 
0x0000000000051063: jmp qword ptr [rdi + 0xf]; 
0x000000000019e2b3: jmp qword ptr [rdi + 1]; 
0x00000000001aa263: jmp qword ptr [rdi + 3]; 
0x000000000019e113: jmp qword ptr [rdi + 6]; 
0x000000000018658f: jmp qword ptr [rdi - 0x45]; 
0x000000000018644f: jmp qword ptr [rdi - 0x52]; 
0x00000000000b4e4d: jmp qword ptr [rdi]; 
0x0000000000186c23: jmp qword ptr [rdx + 0x64]; 
0x0000000000190153: jmp qword ptr [rdx + 1]; 
0x00000000001b3f33: jmp qword ptr [rdx + 2]; 
0x00000000001b030b: jmp qword ptr [rdx + 3]; 
0x00000000000c97a5: jmp qword ptr [rdx + 4]; 
0x0000000000187647: jmp qword ptr [rdx - 0x54]; 
0x000000000018781f: jmp qword ptr [rdx - 0x59]; 
0x000000000017a1df: jmp qword ptr [rdx - 0x5a]; 
0x000000000018782f: jmp qword ptr [rdx - 0x5b]; 
0x0000000000187837: jmp qword ptr [rdx - 0x5c]; 
0x000000000018783f: jmp qword ptr [rdx - 0x5d]; 
0x0000000000173e90: jmp qword ptr [rdx - 0x71]; 
0x0000000000175fb3: jmp qword ptr [rdx - 0x78]; 
0x00000000001776db: jmp qword ptr [rdx - 0xa]; 
0x00000000000cc61e: jmp qword ptr [rdx]; 
0x0000000000022405: jmp qword ptr [rsi + 0x2e]; 
0x00000000000bdb6d: jmp qword ptr [rsi + 0x30]; 
0x000000000006b42a: jmp qword ptr [rsi + 0x41]; 
0x000000000006aa4f: jmp qword ptr [rsi + 0x44]; 
0x000000000006aba4: jmp qword ptr [rsi + 0x45]; 
0x0000000000186dcf: jmp qword ptr [rsi + 0x55]; 
0x0000000000186bbf: jmp qword ptr [rsi + 0x61]; 
0x0000000000022450: jmp qword ptr [rsi + 0x66]; 
0x00000000001a2ca3: jmp qword ptr [rsi + 0xc]; 
0x0000000000021e06: jmp qword ptr [rsi + 0xf]; 
0x00000000000c98ed: jmp qword ptr [rsi + 4]; 
0x00000000001b2d63: jmp qword ptr [rsi + 7]; 
0x0000000000118d8d: jmp qword ptr [rsi - 0x10]; 
0x0000000000176bdb: jmp qword ptr [rsi - 0x11]; 
0x000000000017295f: jmp qword ptr [rsi - 0x22]; 
0x00000000001320c3: jmp qword ptr [rsi - 0x39]; 
0x0000000000051f0e: jmp qword ptr [rsi - 0x3f]; 
0x00000000001875a3: jmp qword ptr [rsi - 0x50]; 
0x0000000000186433: jmp qword ptr [rsi - 0x56]; 
0x000000000018642b: jmp qword ptr [rsi - 0x57]; 
0x0000000000186423: jmp qword ptr [rsi - 0x58]; 
0x00000000000223dd: jmp qword ptr [rsi - 0x70]; 
0x000000000004cfe0: jmp qword ptr [rsi - 0x77]; 
0x0000000000052d1b: jmp qword ptr [rsi - 0x7b]; 
0x000000000002c73f: jmp qword ptr [rsi - 0x7d]; 
0x000000000011f017: jmp qword ptr [rsi - 0x7f]; 
0x000000000010501b: jmp qword ptr [rsi - 9]; 
0x000000000007276d: jmp qword ptr [rsi]; 
0x000000000002210c: jmp rax; 
0x00000000000e2b55: jmp rbx; 
0x000000000004cdac: jmp rcx; 
0x000000000012709b: jmp rdi; 
0x0000000000001b5f: jmp rdx; 
0x000000000002e324: jmp rsi; 
0x0000000000002a4d: jmp rsp; 
0x0000000000107ca3: jno 0x107c67; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000011ee2b: jno 0x11ee75; sub al, byte ptr [rax]; pop rbx; ret; 
0x00000000001276e2: jno 0x1276ec; mov rdi, qword ptr [rcx + 0x10]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x00000000001276fa: jno 0x127718; mov rdi, qword ptr [rcx + 0x24]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x000000000012eb82: jno 0x12eb83; jmp qword ptr [rsi + 0x66]; 
0x0000000000132cf3: jno 0x132ca6; sub byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000160aee: jno 0x160af7; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000174959: jno 0x1748ef; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0x1749d7; mov ebp, 0xfb67d10d; ret; 
0x0000000000178171: jno 0x178164; jmp qword ptr [rax + 0x73]; 
0x0000000000187545: jno 0x187543; call qword ptr [rax]; 
0x000000000018d0c1: jno 0x18d0bc; jmp rsp; 
0x0000000000190e41: jno 0x190e2d; call qword ptr [rsi + 1]; 
0x00000000001931ce: jno 0x1931da; ret; 
0x0000000000194b1d: jno 0x194b0c; jmp qword ptr [rdx]; 
0x0000000000194b65: jno 0x194b54; jmp qword ptr [rdx]; 
0x0000000000194bad: jno 0x194b9c; jmp qword ptr [rdx]; 
0x0000000000194c1d: jno 0x194c0c; jmp qword ptr [rdx]; 
0x0000000000194c65: jno 0x194c54; jmp qword ptr [rdx]; 
0x000000000019873c: jno 0x1986fa; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a52c5: jno 0x1a52c8; add byte ptr [rax + 0x78], ch; hlt; jmp qword ptr [rbx + 2]; 
0x00000000001a532d: jno 0x1a5330; add al, dl; jp 0x1a5327; jmp qword ptr [rcx]; 
0x00000000001a535d: jno 0x1a5360; add byte ptr [rax], al; jnp 0x1a5357; jmp qword ptr [rcx]; 
0x00000000001a538d: jno 0x1a5390; add byte ptr [rax], dh; jnp 0x1a5387; jmp qword ptr [rcx]; 
0x00000000001a9a91: jno 0x1a9a88; call rsp; 
0x00000000001af64c: jno 0x1af63e; cmc; jmp qword ptr [rdx]; 
0x00000000001b52bd: jno 0x1b52c1; add byte ptr [rax + 3], ah; sti; jmp qword ptr [rdx]; 
0x00000000000021c7: jno 0x2212; ret 0x1dd4; 
0x0000000000038a64: jno 0x38aaf; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000003c176: jno 0x3c188; mov edi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000005dfbd: jno 0x5e01a; pop rbp; mov eax, edx; pop r12; ret; 
0x00000000000782b1: jno 0x782b7; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000007d75d: jno 0x7d766; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000008ac7b: jno 0x8acdd; xor eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008cacb: jno 0x8cb00; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xce6a5]; ret; 
0x00000000000afc3d: jno 0xafc9a; pop rbp; mov eax, edx; pop r12; ret; 
0x00000000000b0663: jno 0xb06dc; sub cl, byte ptr [rax - 0x73]; add eax, 0x310733; add rsp, 0x28; ret; 
0x00000000000b42f3: jno 0xb4290; xor byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b624c: jno 0xb61d7; ret 0xe283; 
0x00000000000b6326: jno 0xb62b1; ret 0xe283; 
0x00000000000b63fe: jno 0xb6389; ret 0xe283; 
0x00000000000b64de: jno 0xb6469; ret 0xe283; 
0x00000000000b65fe: jno 0xb6589; ret 0xe283; 
0x00000000000b66df: jno 0xb666a; ret 0xe283; 
0x00000000000b6776: jno 0xb6701; ret 0xe283; 
0x00000000000b75d9: jno 0xb7564; ret 0xe283; 
0x00000000000b7dd9: jno 0xb7d64; ret 0xe283; 
0x00000000000b7eda: jno 0xb7e65; ret 0xe283; 
0x00000000000b8003: jno 0xb7f8e; ret 0xe283; 
0x00000000000ebff3: jno 0xec013; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec7f3: jno 0xec80b; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f10f3: jno 0xf10c2; sub al, 0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000f11f3: jno 0xf11c1; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f183f: jno 0xf1841; add byte ptr [rax], al; syscall; 
0x00000000000f19f3: jno 0xf19b9; sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f21f3: jno 0xf21b1; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f81f3: jno 0xf8251; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb1f3: jno 0xfb221; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000127663: jnp 0x1276cd; call rax; 
0x0000000000128093: jnp 0x1280ed; call rax; 
0x00000000001344e1: jnp 0x13449a; out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x00000000001747e5: jnp 0x1747a0; ret; 
0x000000000017607e: jnp 0x176096; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x0000000000179364: jnp 0x179385; hlt; jmp rsi; 
0x000000000018730d: jnp 0x18730b; ljmp ptr [rbx + rdi*2]; cld; call rdx; 
0x0000000000187311: jnp 0x18730f; call rdx; 
0x000000000018734d: jnp 0x18734b; jmp qword ptr [rdx]; 
0x0000000000187489: jnp 0x187487; jmp qword ptr [rax + 0x7b]; 
0x00000000001874c9: jnp 0x1874c7; call qword ptr [rax + 0x7b]; 
0x00000000001874cd: jnp 0x1874cb; push rax; pop rbp; cld; call qword ptr [rax]; 
0x0000000000187a89: jnp 0x187a74; call rsp; 
0x000000000019a69d: jnp 0x19a69b; jmp qword ptr [rdx]; 
0x000000000019bfb1: jnp 0x19bfa1; call qword ptr [rbp]; 
0x00000000001a2ab5: jnp 0x1a2aa9; jmp qword ptr [rdx]; 
0x00000000001a2afd: jnp 0x1a2af1; jmp qword ptr [rdx]; 
0x00000000001a5361: jnp 0x1a5357; jmp qword ptr [rcx]; 
0x00000000001a5391: jnp 0x1a5387; jmp qword ptr [rcx]; 
0x00000000001a53c1: jnp 0x1a53b7; jmp qword ptr [rcx]; 
0x00000000001a53f1: jnp 0x1a53e7; jmp qword ptr [rcx]; 
0x00000000001a5cd5: jnp 0x1a5cd8; add al, ch; mov ah, 0xf4; call qword ptr [rsi]; 
0x00000000001a5ced: jnp 0x1a5cf0; add al, dh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a5d05: jnp 0x1a5d08; add byte ptr [rax], cl; mov ch, 0xf4; call qword ptr [rbx]; 
0x00000000001a5d7d: jnp 0x1a5d80; add byte ptr [rax - 0x49], dh; hlt; call rdi; 
0x00000000001abe5c: jnp 0x1abec7; cmc; jmp qword ptr [rdx]; 
0x00000000001ace65: jnp 0x1ace5c; jmp qword ptr [rdx]; 
0x00000000001b5d65: jnp 0x1b5d69; add al, bl; fdivrp st(7); call rdi; 
0x000000000002376b: jnp 0x23785; call rax; 
0x00000000000274d0: jnp 0x274ea; mov r8, r12; mov rcx, rbp; mov rdx, qword ptr [r14]; mov rsi, r13; call qword ptr [rbx + 8]; 
0x0000000000027ea0: jnp 0x27eba; mov r8, r12; mov rcx, rbp; mov rdx, qword ptr [r14]; mov rsi, r13; call qword ptr [rbx + 8]; 
0x000000000002f581: jnp 0x2f588; cmp dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003c81b: jnp 0x3c825; mov qword ptr [rax + 0x60], rdx; call qword ptr [rbx]; 
0x000000000007edec: jnp 0x7ee12; mov dword ptr [rbx + 0x14], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000086a0a: jnp 0x86a54; mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x0000000000086a7a: jnp 0x86ac4; call qword ptr [rbx + 0x40]; 
0x00000000000bc4d9: jnp 0xbc50b; add byte ptr [rax - 0x73], cl; cmp eax, 0x30361d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc504: jnp 0xbc536; add byte ptr [rax - 0x73], cl; cmp eax, 0x3035f2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bcc07: jnp 0xbcc11; mov qword ptr [rbx + 0x18], rdx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000c42eb: jnp 0xc42fc; xchg eax, esp; ret 0xb60f; 
0x00000000000c451b: jnp 0xc452c; xchg eax, esp; ret 0xb60f; 
0x00000000000c4787: jnp 0xc4798; xchg eax, esp; ret 0xb60f; 
0x00000000000e3a3b: jnp 0xe3a65; mov qword ptr [rbx + 0x20], 0; call 0x1f4f0; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x00000000000ed63f: jnp 0xed659; mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x00000000000f04e2: jnp 0xf04e5; add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000f1281: jnp 0xf12f1; add dword ptr [rax], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000f9335: jnp 0xf92bb; sub al, 0; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f9cae: jnp 0xf9cdc; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000fa4a1: jnp 0xfa4a3; add byte ptr [rax], al; syscall; 
0x0000000000103db7: jns 0x103d88; mov eax, edx; sub eax, r9d; ret; 
0x0000000000103d06: jns 0x103d90; sub ecx, eax; mov eax, ecx; ret; 
0x0000000000103f39: jns 0x103f6e; mov eax, r8d; sub eax, r9d; ret; 
0x0000000000107f43: jns 0x107f05; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001273c3: jns 0x127357; lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000001275dd: jns 0x1275e4; add byte ptr [rax - 0x77], cl; ret 0xff31; 
0x00000000001276e6: jns 0x1276f8; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x00000000001276fe: jns 0x127724; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000136b03: jns 0x136ad9; sub byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000013d0a7: jns 0x13d10c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d0f8: jns 0x13d15d; rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013d1f7: jns 0x13d25c; rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d396: jns 0x13d3fb; rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013d5e7: jns 0x13d64c; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000013d788: jns 0x13d7ed; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013d887: jns 0x13d8ec; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d8d8: jns 0x13d93d; rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013d9d7: jns 0x13da3c; rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013ddc7: jns 0x13de2c; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000013e0b8: jns 0x13e11d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013e1b7: jns 0x13e21c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000144093: jns 0x1440ba; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145953: jns 0x145963; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148713: jns 0x1486f7; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fe2d: jns 0x14fe32; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001738ee: jns 0x173882; ret 0xf869; 
0x0000000000187a79: jns 0x187a64; call qword ptr [rdi]; add byte ptr [rdx + rdi*2 + 0x687cffe9], dh; add byte ptr [rax], al; sub dword ptr [rbx - 0x17], edi; call rsp; 
0x000000000018a919: jns 0x18a90e; call rsp; 
0x000000000018c928: jns 0x18c994; clc; lcall ptr [rbp + rdx*2 + 0x6a980002]; clc; jmp rsp; 
0x000000000018cded: jns 0x18cdf1; add byte ptr [rax + rax + 0x79ccfff9], dh; add al, byte ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; add ecx, edi; jmp rsp; 
0x00000000001958dd: jns 0x1958cc; jmp qword ptr [rdx]; 
0x000000000019961c: jns 0x1995f9; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001997cc: jns 0x1997aa; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019ae7c: jns 0x19aeb5; out dx, al; jmp qword ptr [rdx]; 
0x00000000001a5b2d: jns 0x1a5b30; add al, dl; mov al, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a5b45: jns 0x1a5b48; add al, ch; mov al, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a5b5d: jns 0x1a5b60; add byte ptr [rax], al; mov cl, 0xf4; jmp qword ptr [rcx]; 
0x0000000000001b29: jns 0x1b32; ret; 
0x00000000001b5b4d: jns 0x1b5b51; add al, ah; fcomi st(7); jmp qword ptr [rbx]; 
0x000000000002f893: jns 0x2f8dc; cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x390262]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000003237: jns 0x3210; ret 0x5a51; 
0x0000000000036beb: jns 0x36c5f; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000036dce: jns 0x36de0; add rsp, 0xd0; ret; 
0x00000000000038ab: jns 0x38fa; cmpsq qword ptr [rsi], qword ptr [rdi]; ret 0x49ec; 
0x0000000000022276: jns 0x3a1bb991; add byte ptr [rbx - 0x76bef019], al; ret 0xb8; 
0x000000000003c196: jns 0x3c1a8; mov esi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049836: jns 0x49880; cmove eax, edx; mov qword ptr [rax], rcx; mov byte ptr [rax + 8], 0; ret; 
0x000000000006c813: jns 0x6c7c9; adc byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x0000000000082584: jns 0x82581; jmp qword ptr [rsi + 0xf]; 
0x0000000000086086: jns 0x860d0; mov esi, ebx; mov rdi, r13; call rdx; 
0x000000000008cc43: jns 0x8cc45; add byte ptr [rax], al; ret; 
0x000000000008ef33: jns 0x8ef35; add byte ptr [rax], al; ret; 
0x0000000000097b92: jns 0x97b95; xor esi, esi; call 0x8c4b0; mov rax, rbx; pop rbx; ret; 
0x00000000000a4342: jns 0xa4375; add byte ptr [rax + 0x39], cl; ret; 
0x00000000000ae4a3: jns 0xae4b9; clc; inc dword ptr [rbp + 0x79c789c0]; ret; 
0x00000000000ba13a: jns 0xba184; lea edi, dword ptr [rip + 0xbf03a]; mov eax, esi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000bc38b: jns 0xbc409; xor byte ptr [rax], al; lea rdi, qword ptr [rip + 0x30376a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc6eb: jns 0xbc71d; add byte ptr [rax - 0x73], cl; cmp eax, 0x30340b; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c109b: jns 0xc10c5; mov eax, ebx; mov esi, 0x81; syscall; 
0x00000000000c1ee1: jns 0xc1ee3; add byte ptr [rax], al; syscall; 
0x00000000000c6439: jns 0xc643e; add byte ptr [rcx - 0x77], al; ret; 
0x00000000000e4bbf: jns 0xe4bb9; add byte ptr [rsp + rax - 0x77], dh; ret 0xeeeb; 
0x00000000000f2224: jns 0xf2229; mov byte ptr [rbx], 0; mov rax, rbx; pop rbx; ret; 
0x000000000009d768: jns 0xffffffff8352dec5; call 0x7f971f7e; or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x00000000000a0cf6: jns 0xffffffffed3a1053; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000a0d58: jns 0xffffffffed3a14b5; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000a0d78: jns 0xffffffffed3a15d5; mov byte ptr [rdi + 0xc], ch; ret; 
0x0000000000123ad4: jo 0x123adb; add byte ptr [rcx + 0x146348f6], cl; mov al, 0x48; add eax, edx; jmp rax; 
0x0000000000123d32: jo 0x123d33; mov rax, qword ptr [rbx + 0xd0]; mov dword ptr [rbx + 0xa8], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x000000000012426e: jo 0x1242cb; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000124b4b: jo 0x124ba8; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000012785d: jo 0x12785e; mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000127862: jo 0x1278a8; mov dword ptr [rbx + 0x48], esi; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000127878: jo 0x1278c2; mov esi, dword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000127d08: jo 0x127d56; mov edi, esp; call qword ptr [rax + 0x20]; 
0x0000000000129267: jo 0x1291f4; push rax; adc dh, dh; ret 0x7401; 
0x000000000012e755: jo 0x12e79f; lea eax, dword ptr [rsp + 0x30]; mov qword ptr [rsp + 8], rax; xor eax, eax; call rdx; 
0x000000000014509c: jo 0x1450b3; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001504a7: jo 0x1504ac; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001506ea: jo 0x1506ef; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000173130: jo 0x173173; in eax, dx; jmp rax; 
0x0000000000174964: jo 0x1749d7; mov ebp, 0xfb67d10d; ret; 
0x00000000001771b4: jo 0x17722b; out dx, al; call qword ptr [rax]; 
0x0000000000178274: jo 0x1781f8; cld; call qword ptr [rax - 0x4f00037d]; test ah, bh; call rax; 
0x00000000001781ac: jo 0x17821d; int1; dec eax; cdq; int1; jmp rax; 
0x00000000001782b4: jo 0x17824c; cld; jmp rax; 
0x00000000001782dc: jo 0x17826c; cld; jmp qword ptr [rax - 0x59]; 
0x00000000001785ec: jo 0x178656; bnd call qword ptr [rax - 0x3f000d98]; push 0x68f0fff2; bnd jmp qword ptr [rax]; imul esi, edx, 0xf26940ff; jmp qword ptr [rax + 0x69]; 
0x0000000000186210: jo 0x186222; sti; inc dword ptr [rax + 0x11]; sti; call qword ptr [rax]; 
0x0000000000186224: jo 0x18623a; sti; inc dword ptr [rax + 0x15]; sti; call qword ptr [rax]; 
0x000000000018627c: jo 0x1862a6; sti; jmp qword ptr [rax + 0x29]; 
0x000000000018628c: jo 0x1862ab; sti; jmp rax; 
0x000000000018631d: jo 0x18631a; jmp qword ptr [rax]; 
0x0000000000186388: jo 0x186322; sti; jmp qword ptr [rax]; 
0x00000000001862f4: jo 0x186351; sti; call qword ptr [rax + 0x5d]; 
0x00000000001863ac: jo 0x186355; std; call qword ptr [rsi + 0x42fffda4]; movsd dword ptr [rdi], dword ptr [rsi]; std; call qword ptr [rdx]; 
0x00000000001864c4: jo 0x186472; std; call qword ptr [rax]; 
0x0000000000186698: jo 0x186679; sti; call qword ptr [rax - 0x1f]; 
0x0000000000186718: jo 0x1866f8; sti; call qword ptr [rax - 0x20]; 
0x0000000000186784: jo 0x18675b; sti; inc eax; salc; sti; call qword ptr [rax]; 
0x0000000000186840: jo 0x18684d; cld; call qword ptr [rax + 0xd]; 
0x0000000000186874: jo 0x18687b; cld; call qword ptr [rax + 7]; 
0x0000000000186964: jo 0x186959; sti; inc eax; hlt; sti; call qword ptr [rax]; 
0x0000000000186a1c: jo 0x186a4f; cld; call qword ptr [rax + 0x33]; 
0x0000000000186a9c: jo 0x186ace; cld; jmp qword ptr [rax + 0x32]; 
0x0000000000186ab4: jo 0x186ae2; cld; inc dword ptr [rax + 0x2e]; cld; jmp qword ptr [rax]; 
0x0000000000186adc: jo 0x186af6; cld; inc eax; sbb esp, edi; call qword ptr [rax]; 
0x0000000000186b30: jo 0x186b51; cld; inc eax; and ah, bh; call qword ptr [rax]; 
0x00000000001872c0: jo 0x18733f; cld; jmp rax; 
0x00000000001874c4: jo 0x187542; cld; jmp rax; 
0x0000000000187750: jo 0x1876fd; cld; jmp rax; 
0x00000000001877c8: jo 0x18776c; cld; jmp rax; 
0x00000000001879cc: jo 0x18796f; cld; call rax; 
0x000000000018a385: jo 0x18a388; add byte ptr [rcx + rbx*8 + 0x70bcfff1], dl; add dword ptr [rax], eax; movsb byte ptr [rdi], byte ptr [rsi]; fyl2x; call rsp; 
0x000000000018da41: jo 0x18da3d; jmp rsp; 
0x0000000000190d59: jo 0x190d45; call qword ptr [rdx + 1]; 
0x000000000019a4d0: jo 0x19a4fd; out dx, al; call qword ptr [rdx]; 
0x000000000019bdc9: jo 0x19bdb9; call qword ptr [rsi]; 
0x000000000019ca70: jo 0x19ca2d; out dx, al; jmp qword ptr [rdx]; 
0x000000000019dc10: jo 0x19db92; cld; jmp qword ptr [rax]; 
0x00000000001a51b5: jo 0x1a51b8; add byte ptr [rax + 0x76], bl; hlt; jmp qword ptr [rcx]; 
0x00000000001a5d80: jo 0x1a5d39; hlt; call rdi; 
0x00000000001a5f80: jo 0x1a5f3e; hlt; jmp qword ptr [rcx]; 
0x00000000001a6420: jo 0x1a63ee; hlt; jmp qword ptr [rcx]; 
0x00000000001a68d0: jo 0x1a68ae; hlt; call qword ptr [rax]; 
0x00000000001a7cb0: jo 0x1a7ce1; cmc; jmp qword ptr [rcx]; 
0x00000000001a8040: jo 0x1a8077; cmc; jmp qword ptr [rcx]; 
0x00000000001a8120: jo 0x1a815a; cmc; jmp qword ptr [rax]; 
0x00000000001a9a61: jo 0x1a9a58; jmp qword ptr [rdx]; 
0x00000000001a9a79: jo 0x1a9a70; jmp qword ptr [rcx]; 
0x00000000001a9a90: jo 0x1a9b03; cmc; call rsp; 
0x00000000001aa660: jo 0x1aa637; cmc; jmp qword ptr [rsi]; 
0x00000000001ab940: jo 0x1ab92b; cmc; call qword ptr [rax]; 
0x00000000001ac130: jo 0x1ac12a; cmc; call qword ptr [rcx]; 
0x00000000001b0a10: jo 0x1b0a76; clc; jmp qword ptr [rbx]; 
0x00000000001b51d5: jo 0x1b51d9; add byte ptr [rax], bl; add al, 0xfb; jmp qword ptr [rdx]; 
0x0000000000027625: jo 0x2766f; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x0000000000027940: jo 0x2798a; mov dword ptr [rsp], eax; call qword ptr [rbx]; 
0x000000000002a555: jo 0x2a59f; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002a88e: jo 0x2a8d8; mov dword ptr [rsp], eax; call qword ptr [rbx]; 
0x000000000002b6a5: jo 0x2b6ef; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002b9de: jo 0x2ba28; mov dword ptr [rsp], eax; call qword ptr [rbx]; 
0x00000000000300d3: jo 0x3011d; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x0000000000030d9c: jo 0x30dd0; cmp dword ptr [rax], eax; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000462e8: jo 0x462eb; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000007140a: jo 0x71391; sar byte ptr [rax + 9], 0xf3; ret; 
0x000000000007411a: jo 0x7412c; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000075b19: jo 0x75b73; mov qword ptr [rsp + 8], rdi; mov rax, qword ptr [rax + 0x38]; mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x000000000007655a: jo 0x7656b; test bh, bl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rdi, rbx; call rax; 
0x0000000000077bac: jo 0x77c09; pop rbp; mov eax, edx; pop r12; ret; 
0x00000000000794d8: jo 0x794c3; ret 0x721; 
0x00000000000794e1: jo 0x794cb; ret 0x721; 
0x0000000000079ae4: jo 0x79b2e; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000084809: jo 0x84866; pop rbp; pop r12; ret; 
0x00000000000848c8: jo 0x848fb; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000008cbeb: jo 0x8cc20; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xcfd95]; ret; 
0x00000000000942fc: jo 0x942fd; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000c1fa1: jo 0xc1fa3; add byte ptr [rax], al; syscall; 
0x00000000000c2777: jo 0xc2749; movsxd rsi, esi; nop dword ptr [rax]; movsxd rdi, ebx; mov eax, 3; syscall; 
0x00000000000d1f3e: jo 0xd1f60; xor eax, eax; ret; 
0x00000000000e43f6: jo 0xe4440; mov eax, dword ptr [rdi + 0x80]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x00000000000e4480: jo 0xe44ca; mov edx, dword ptr [rsi + 0x70]; mov qword ptr [rdi + 0x78], rdx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x80], rdx; ret; 
0x00000000000e4484: jo 0xe44ce; mov dword ptr [rdi + 0x78], edx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x80], rdx; ret; 
0x00000000000e4d03: jo 0xe4d4d; mov eax, dword ptr [rdi + 0x100]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x00000000000e4dde: jo 0xe4e28; mov dword ptr [rdi + 0xf8], edx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x100], rdx; ret; 
0x00000000000eb587: jo 0xeb57f; ret 0x4840; 
0x00000000000eb5b4: jo 0xeb611; ret; 
0x00000000000ebb9e: jo 0xebbfb; ret; 
0x00000000000ed035: jo 0xed064; add byte ptr [rbp + 0x412875c0], al; mov eax, 8; mov eax, 0x10f; syscall; 
0x00000000000f09c6: jo 0xf09e9; ret; 
0x00000000000f2ef4: jo 0xf2ea5; sub al, 0; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001063f5: jp 0x106447; mov rsi, rdx; call rax; 
0x000000000010a282: jp 0x10a27f; dec dword ptr [rax - 0x75]; add eax, 0x2b3bdc; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x0000000000121b6d: jp 0x121bc7; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000001276f2: jp 0x1276fc; ret; 
0x000000000012770a: jp 0x127714; ret; 
0x0000000000127f52: jp 0x127f5c; ret; 
0x0000000000127f6a: jp 0x127f74; ret; 
0x0000000000127f9a: jp 0x127fa4; ret; 
0x000000000014fcd1: jp 0x14fcd6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000174625: jp 0x174680; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000186339: jp 0x186336; call qword ptr [rax + 0x7b]; 
0x000000000018b3b1: jp 0x18b3a9; jmp rsp; 
0x000000000018bf79: jp 0x18bf72; jmp rsp; 
0x0000000000193f04: jp 0x193f85; in al, dx; jmp qword ptr [rdx]; 
0x0000000000195925: jp 0x195914; jmp qword ptr [rdx]; 
0x000000000019596d: jp 0x19595c; jmp qword ptr [rdx]; 
0x00000000001a5331: jp 0x1a5327; jmp qword ptr [rcx]; 
0x00000000001a5bb5: jp 0x1a5bb8; add byte ptr [rax], cl; mov dl, 0xf4; call qword ptr [rbp]; 
0x00000000001a5c35: jp 0x1a5c38; add al, ch; mov bl, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a5c85: jp 0x1a5c88; add byte ptr [rax], bh; mov ah, 0xf4; jmp qword ptr [rcx]; 
0x00000000001acb75: jp 0x1acb6c; jmp qword ptr [rdx]; 
0x00000000001acbbd: jp 0x1acbb4; jmp qword ptr [rdx]; 
0x00000000001acc1d: jp 0x1acc14; jmp qword ptr [rdx]; 
0x00000000001acc65: jp 0x1acc5c; jmp qword ptr [rdx]; 
0x00000000001accad: jp 0x1acca4; jmp qword ptr [rdx]; 
0x00000000001accf5: jp 0x1accec; jmp qword ptr [rdx]; 
0x00000000001acd3d: jp 0x1acd34; jmp qword ptr [rdx]; 
0x00000000001acd85: jp 0x1acd7c; jmp qword ptr [rdx]; 
0x00000000001ace1d: jp 0x1ace14; jmp qword ptr [rdx]; 
0x00000000001b5c8d: jp 0x1b5c91; add byte ptr [rax], dh; fdivrp st(7); call qword ptr [rcx]; 
0x00000000001b8918: jp 0x1b891c; add byte ptr [rax], al; ret 6; 
0x0000000000002545: jp 0x2527; jmp qword ptr [rbx]; 
0x0000000000030502: jp 0x304fb; cmp byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a82: jp 0x31aa9; cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38e273]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031b92: jp 0x31bb8; cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38e0e3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000003610: jp 0x35c8; sbb eax, dword ptr [rip + 0x572808a8]; call qword ptr [rsi + 0x6f]; 
0x000000000003638a: jp 0x363c4; add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000070364: jp 0x703c1; pop rbp; mov rax, rdx; pop r12; ret; 
0x000000000008c605: jp 0x8c5fd; ret 0x7401; 
0x00000000000c3b28: jp 0xc3b2b; add byte ptr [rax + rcx + 0xf], dh; mov dh, 0x42; add cl, byte ptr [rax - 0x7d]; ret 0x8301; 
0x00000000000c4593: jp 0xc4596; add byte ptr [rdi], cl; test byte ptr [rdi*8 - 0x7cb70001], al; ret 0xeb02; 
0x00000000000c4f90: jp 0xc4f93; add byte ptr [rax + rcx + 0xf], dh; mov dh, 0x42; add cl, byte ptr [rax - 0x7d]; ret 0x8301; 
0x00000000001adcee: jp 0xd37dce9; mov r13, r14; jmp qword ptr [rdx]; 
0x00000000000fa471: jp 0xfa473; add byte ptr [rax], al; syscall; 
0x000000000008b85d: lahf; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000001a811d: lahf; add dword ptr [rax], eax; jo 0x1a815a; cmc; jmp qword ptr [rax]; 
0x000000000014d34d: lahf; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000004c9b2: lahf; call qword ptr [rdx]; 
0x00000000001348bd: lahf; mov bl, 0xef; jmp qword ptr [rsi + 0x66]; 
0x0000000000175e23: lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000013db2d: lahf; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000019dee9: lahf; out dx, eax; call qword ptr [rdi]; 
0x00000000000f54b9: lahf; ret 0x3845; 
0x00000000000d0c98: lahf; ret 0x82eb; 
0x000000000017367d: lahf; ret 0x871e; 
0x00000000000577fa: lahf; ret 0x9529; 
0x00000000000d4eb8: lahf; ret 0xee9; 
0x00000000000f54b2: lahf; ret; 
0x0000000000176081: lahf; sub edi, esi; int 0x6b; ret; 
0x000000000013e1bd: lar eax, word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000172aa7: lcall ptr [rax + 0x28]; in al, dx; jmp rcx; 
0x00000000001867cf: lcall ptr [rax + 4]; cld; jmp qword ptr [rax]; 
0x000000000018d073: lcall ptr [rax + rdx*4 + 2]; add byte ptr [rdx + rbp*2], ah; stc; jmp rsp; 
0x00000000001797db: lcall ptr [rax - 0x67000b65]; wait; hlt; call rsi; 
0x0000000000179377: lcall ptr [rax - 0x67000b6b]; xchg eax, ebp; hlt; call rax; 
0x000000000018c92b: lcall ptr [rbp + rdx*2 + 0x6a980002]; clc; jmp rsp; 
0x000000000018d60b: lcall ptr [rbp + rsi*4 + 0x24100002]; cli; jmp rsp; 
0x000000000018cc23: lcall ptr [rbp*2 - 0x594bfffe]; clc; jmp rsp; 
0x0000000000172aa3: lcall ptr [rbx + 0x58ffec27]; sub ah, ch; jmp rcx; 
0x00000000000a1777: lcall ptr [rbx + 0x5d]; mov eax, dword ptr [r9 + 4]; pop r12; ret; 
0x0000000000082cd1: lcall ptr [rbx + 0x5d]; pop r12; jmp rax; 
0x0000000000075993: lcall ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000003bf26: lcall ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000002c2ab: lcall ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000076c48: lcall ptr [rbx + 0x5d]; ret; 
0x00000000000d2308: lcall ptr [rbx + 0x5d]; xor eax, eax; pop r12; ret; 
0x0000000000177c0b: lcall ptr [rbx + rcx*2 + 0x4b9cffef]; out dx, eax; jmp qword ptr [rax + 0x4c]; 
0x000000000018730b: lcall ptr [rbx + rdi*2 + 0x7b2cfffc]; cld; call rdx; 
0x0000000000179563: lcall ptr [rbx - 0x63]; hlt; jmp qword ptr [rbp - 0x63]; 
0x000000000018ca0b: lcall ptr [rbx*2 + 0x78da0002]; clc; dec dword ptr [rsp + rbx*2 + 0x78f90002]; clc; call rsp; 
0x0000000000188a2b: lcall ptr [rcx + rax*8 + 0x57d40000]; in eax, dx; call rsp; 
0x0000000000189b63: lcall ptr [rcx + rsi - 0x2f15ffff]; out dx, eax; jmp rsp; 
0x0000000000177003: lcall ptr [rcx + rsi*8]; in eax, dx; jmp rax; 
0x0000000000176fff: lcall ptr [rcx + rsi*8]; in eax, dx; lcall ptr [rcx + rsi*8]; in eax, dx; jmp rax; 
0x00000000001793cf: lcall ptr [rdi - 0x65]; hlt; call rsi; 
0x00000000000f9648: lcall ptr [rdi]; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000186f4b: lcall ptr [rdx + 0x2afffc55]; push rbp; cld; call rax; 
0x000000000018d41b: lcall ptr [rdx + rbp*4 - 0x2b2efffe]; stc; jmp rsp; 
0x0000000000189c63: lcall ptr [rdx + rdi - 0x2b66ffff]; out dx, eax; jmp rsp; 
0x000000000018d663: lcall ptr [rdx + rdi*4 + 0x26440002]; cli; jmp rsp; 
0x000000000018952b: lcall ptr [rdx + rdx + 0x7fe0001]; out dx, eax; jmp rsp; 
0x000000000018c8db: lcall ptr [rdx + rdx*2 + 0x63820002]; clc; jmp rsp; 
0x000000000017294f: lcall ptr [rdx - 0x72001422]; fsubp st(3); inc dword ptr [rax + 0x73ffebde]; fsubp st(3); jmp qword ptr [rsi - 0x22]; 
0x00000000001ab0cc: lcall ptr [rdx - 0xb]; jmp qword ptr [rdx]; 
0x000000000004e1bd: lcall ptr [rsi + 5]; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret 0x840f; 
0x0000000000188fab: lcall ptr [rsp + rbp*8 - 0x64ec0000]; out dx, al; jmp rsp; 
0x0000000000189863: lcall ptr [rsp + rbx + 0x4f820001]; out dx, eax; jmp rsp; 
0x0000000000189463: lcall ptr [rsp + rcx - 0x22cffff]; out dx, al; jmp rsp; 
0x0000000000177eab: lcall ptr [rsp + rdx*2 - 0x11]; jmp qword ptr [rax + 0x56]; 
0x000000000014cb0c: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000014cd96: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cd26: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ccb6: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cc46: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cbd6: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cb66: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d186: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d116: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d0a6: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d036: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cfc6: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cf56: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cee6: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce76: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce06: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014c2f6: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000014ca9c: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014ca1c: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c98c: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c90c: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c88c: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c80c: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c78c: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c70c: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c68c: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c60c: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c58c: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c50c: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c47c: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c3ec: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c35c: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c2ec: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000014cb16: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000014caa1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014ca21: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c991: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c911: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c891: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c811: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c791: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c711: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c691: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c611: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c591: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c511: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c481: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c3f1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c361: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014cd9b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cd2b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ccbb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cc4b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cbdb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cb6b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d18b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d11b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d0ab: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d03b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cfcb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cf5b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ceeb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce7b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce0b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000007510f: lea eax, dword ptr [r8 - 1]; ret; 
0x000000000004a003: lea eax, dword ptr [rax + 0x48fffffb]; mov dword ptr [rbp - 0x5b0], ecx; jmp rax; 
0x00000000000b0078: lea eax, dword ptr [rax + rax - 1]; ret; 
0x000000000008bde4: lea eax, dword ptr [rax + rdi + 0x10]; ret; 
0x000000000008bdf4: lea eax, dword ptr [rax + rdi + 0x20]; ret; 
0x0000000000096f94: lea eax, dword ptr [rax + rdi + 0x30]; ret; 
0x000000000008bdc4: lea eax, dword ptr [rax + rdi - 0x10]; ret; 
0x00000000000bcb32: lea eax, dword ptr [rax + rdx*8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000075110: lea eax, dword ptr [rax - 1]; ret; 
0x00000000000a1ada: lea eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x25], bl; add ah, bh; add eax, dword ptr [rax]; ret; 
0x00000000000f1021: lea eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000012164b: lea eax, dword ptr [rbx + 0x2260]; pop rbx; ret; 
0x00000000000c632a: lea eax, dword ptr [rbx + 2]; pop rbx; pop rbp; ret; 
0x00000000000c622a: lea eax, dword ptr [rbx + 8]; pop rbx; pop rbp; ret; 
0x0000000000117d22: lea eax, dword ptr [rbx + r8 + 2]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000117d23: lea eax, dword ptr [rbx + rax + 2]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000117960: lea eax, dword ptr [rbx + rbp + 0x10]; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000117dde: lea eax, dword ptr [rbx + rbp]; pop rbx; pop rbp; ret; 
0x0000000000097a9a: lea eax, dword ptr [rbx - 1]; pop rbx; ret; 
0x00000000000a38a1: lea eax, dword ptr [rbx - 4]; pop rbx; ret; 
0x000000000014e2c7: lea eax, dword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000070b32: lea eax, dword ptr [rcx + 1]; mov qword ptr [rdx + 0x28], rax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x000000000007361e: lea eax, dword ptr [rcx + 1]; mov qword ptr [rsi + 0x28], rax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x00000000000a17ce: lea eax, dword ptr [rcx + 1]; pop r12; ret; 
0x00000000000780fa: lea eax, dword ptr [rcx + 4]; mov qword ptr [rdx + 0x20], rax; mov dword ptr [rcx], edi; mov eax, edi; ret; 
0x000000000003cc80: lea eax, dword ptr [rcx + rax*4]; mov qword ptr [rsi + 0x10], rcx; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000008a89d: lea eax, dword ptr [rcx + rsi]; ret; 
0x00000000000a1434: lea eax, dword ptr [rcx - 1]; ret; 
0x00000000000a1ad8: lea eax, dword ptr [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x000000000009e55c: lea eax, dword ptr [rdi + 0x10]; ret; 
0x000000000009e571: lea eax, dword ptr [rdi + 0x11]; ret; 
0x000000000009e58f: lea eax, dword ptr [rdi + 0x12]; ret; 
0x000000000009e5af: lea eax, dword ptr [rdi + 0x13]; ret; 
0x000000000009e5d2: lea eax, dword ptr [rdi + 0x14]; ret; 
0x000000000009e5f1: lea eax, dword ptr [rdi + 0x15]; ret; 
0x000000000009e611: lea eax, dword ptr [rdi + 0x16]; ret; 
0x000000000009e631: lea eax, dword ptr [rdi + 0x17]; ret; 
0x000000000009e654: lea eax, dword ptr [rdi + 0x18]; ret; 
0x000000000009e679: lea eax, dword ptr [rdi + 0x19]; ret; 
0x000000000009e697: lea eax, dword ptr [rdi + 0x1a]; ret; 
0x000000000009e6b7: lea eax, dword ptr [rdi + 0x1b]; ret; 
0x000000000009e6d3: lea eax, dword ptr [rdi + 0x1c]; ret; 
0x000000000009e6f3: lea eax, dword ptr [rdi + 0x1d]; ret; 
0x000000000009e713: lea eax, dword ptr [rdi + 0x1e]; ret; 
0x000000000009e733: lea eax, dword ptr [rdi + 0x1f]; ret; 
0x000000000009f583: lea eax, dword ptr [rdi + 0x20]; ret; 
0x000000000009f7e9: lea eax, dword ptr [rdi + 0x40]; ret; 
0x000000000009e4ad: lea eax, dword ptr [rdi + 0xa]; ret; 
0x000000000009e4cd: lea eax, dword ptr [rdi + 0xb]; ret; 
0x000000000009e4ef: lea eax, dword ptr [rdi + 0xc]; ret; 
0x000000000009e50f: lea eax, dword ptr [rdi + 0xd]; ret; 
0x000000000009e52f: lea eax, dword ptr [rdi + 0xe]; ret; 
0x000000000009e549: lea eax, dword ptr [rdi + 0xf]; ret; 
0x0000000000096934: lea eax, dword ptr [rdi + 1]; ret; 
0x0000000000096948: lea eax, dword ptr [rdi + 2]; ret; 
0x0000000000096953: lea eax, dword ptr [rdi + 3]; ret; 
0x0000000000096967: lea eax, dword ptr [rdi + 4]; ret; 
0x0000000000096977: lea eax, dword ptr [rdi + 5]; ret; 
0x0000000000096987: lea eax, dword ptr [rdi + 6]; mov byte ptr [rdi + 6], 0; ret; 
0x000000000009e45b: lea eax, dword ptr [rdi + 6]; ret; 
0x0000000000096927: lea eax, dword ptr [rdi + 7]; ret; 
0x000000000009e47a: lea eax, dword ptr [rdi + 8]; ret; 
0x00000000001176c0: lea eax, dword ptr [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x000000000009e48f: lea eax, dword ptr [rdi + 9]; ret; 
0x000000000008be19: lea eax, dword ptr [rdi + rax + 0x10]; ret; 
0x000000000008be29: lea eax, dword ptr [rdi + rax + 0x20]; ret; 
0x000000000008bd13: lea eax, dword ptr [rdi + rax + 0x30]; ret; 
0x0000000000086d8c: lea eax, dword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000939f7: lea eax, dword ptr [rdi + rax]; ret; 
0x000000000013cd04: lea eax, dword ptr [rdi + rcx]; sub rax, rdx; ret; 
0x0000000000118110: lea eax, dword ptr [rdi + rsi + 8]; ret; 
0x000000000008a799: lea eax, dword ptr [rdi + rsi]; ret; 
0x00000000000a337e: lea eax, dword ptr [rdi - 0x10]; ret; 
0x00000000000a34e1: lea eax, dword ptr [rdi - 0xc]; ret; 
0x000000000004f208: lea eax, dword ptr [rdi - 1]; xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000000a3501: lea eax, dword ptr [rdi - 4]; ret; 
0x00000000000a34f1: lea eax, dword ptr [rdi - 8]; ret; 
0x000000000009e3e3: lea eax, dword ptr [rdi]; ret; 
0x000000000015c8fd: lea eax, dword ptr [rdx + 0xa]; ret; 
0x000000000015c91d: lea eax, dword ptr [rdx + 0xb]; ret; 
0x000000000015c93f: lea eax, dword ptr [rdx + 0xc]; ret; 
0x000000000015c95f: lea eax, dword ptr [rdx + 0xd]; ret; 
0x000000000015ebc7: lea eax, dword ptr [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c97f: lea eax, dword ptr [rdx + 0xe]; ret; 
0x000000000015c80f: lea eax, dword ptr [rdx + 0xf]; ret; 
0x000000000015c837: lea eax, dword ptr [rdx + 1]; ret; 
0x000000000015c84d: lea eax, dword ptr [rdx + 2]; ret; 
0x000000000015c865: lea eax, dword ptr [rdx + 3]; ret; 
0x000000000015c87b: lea eax, dword ptr [rdx + 4]; ret; 
0x000000000015c88d: lea eax, dword ptr [rdx + 5]; ret; 
0x000000000015c8ab: lea eax, dword ptr [rdx + 6]; ret; 
0x000000000015ec72: lea eax, dword ptr [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c7b7: lea eax, dword ptr [rdx + 7]; ret; 
0x000000000015c8bd: lea eax, dword ptr [rdx + 8]; ret; 
0x000000000015c8dd: lea eax, dword ptr [rdx + 9]; ret; 
0x0000000000117ad0: lea eax, dword ptr [rdx + rax + 2]; cmp rcx, rax; sbb eax, eax; ret; 
0x00000000000750fe: lea eax, dword ptr [rdx + rdi]; ret; 
0x00000000000a1b1c: lea eax, dword ptr [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000002f9a0: lea eax, dword ptr [rdx + rsi*4]; mov eax, dword ptr [rdi + rax]; ret; 
0x0000000000083471: lea eax, dword ptr [rdx - 0x10]; add rsp, 8; ret; 
0x0000000000037bf0: lea eax, dword ptr [rdx - 1]; mov dword ptr [rip + 0x386497], eax; mov eax, edx; ret; 
0x00000000000f64f7: lea eax, dword ptr [rdx]; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000015c825: lea eax, dword ptr [rdx]; ret; 
0x0000000000088dc5: lea eax, dword ptr [rip + 0x10f35]; ret; 
0x00000000000647f9: lea eax, dword ptr [rip + 0x113299]; movsxd rdx, dword ptr [rax + r12*4]; add rax, rdx; jmp rax; 
0x0000000000086b45: lea eax, dword ptr [rip + 0x11595]; ret; 
0x000000000005f138: lea eax, dword ptr [rip + 0x118542]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005f31f: lea eax, dword ptr [rip + 0x1185db]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x000000000005f2d5: lea eax, dword ptr [rip + 0x118625]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f220: lea eax, dword ptr [rip + 0x1186da]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f09a: lea eax, dword ptr [rip + 0x1186e0]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f182: lea eax, dword ptr [rip + 0x118778]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005f05a: lea eax, dword ptr [rip + 0x1187a0]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; jmp rax; 
0x000000000005ef93: lea eax, dword ptr [rip + 0x118967]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000004ed5d: lea eax, dword ptr [rip + 0x127f1d]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004ecae: lea eax, dword ptr [rip + 0x127f4c]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004ec4d: lea eax, dword ptr [rip + 0x12802d]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004e975: lea eax, dword ptr [rip + 0x128305]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004e833: lea eax, dword ptr [rip + 0x128647]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000004e790: lea eax, dword ptr [rip + 0x1286ea]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004deb9: lea eax, dword ptr [rip + 0x128e41]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004dd8d: lea eax, dword ptr [rip + 0x128fed]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x000000000004d533: lea eax, dword ptr [rip + 0x129947]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004ba9a: lea eax, dword ptr [rip + 0x12b3e0]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000008b8d6: lea eax, dword ptr [rip + 0x15844]; lea rdx, qword ptr [rip - 0x5e3]; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000022031: lea eax, dword ptr [rip + 0x15a154]; ret; 
0x0000000000022041: lea eax, dword ptr [rip + 0x15c12b]; ret; 
0x000000000008be6b: lea eax, dword ptr [rip + 0x1f]; ret; 
0x00000000001336ef: lea eax, dword ptr [rip + 0x2883eb]; mov rdi, rbx; pop rbx; mov qword ptr [rip + 0x28c190], rax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x000000000013351a: lea eax, dword ptr [rip + 0x2904b0]; cmove rdx, rax; add rsp, 8; mov rax, rdx; ret; 
0x000000000012a9d7: lea eax, dword ptr [rip + 0x29e3]; lea rdx, qword ptr [rip - 0xa984]; mov esi, 3; mov rdi, r15; call qword ptr [rax]; 
0x000000000011ee29: lea eax, dword ptr [rip + 0x2a4871]; pop rbx; ret; 
0x000000000011edf1: lea eax, dword ptr [rip + 0x2a48a9]; pop rbx; ret; 
0x000000000011ed32: lea eax, dword ptr [rip + 0x2a4968]; pop rbx; ret; 
0x0000000000108528: lea eax, dword ptr [rip + 0x2bbb46]; mov dword ptr [rip + 0x2bbb38], 1; pop rbx; ret; 
0x00000000000f9d0e: lea eax, dword ptr [rip + 0x2c7b2c]; add rsp, 0x18; ret; 
0x00000000000f9cab: lea eax, dword ptr [rip + 0x2c7bcf]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f9757: lea eax, dword ptr [rip + 0x2c8093]; add rsp, 8; ret; 
0x00000000000f96f8: lea eax, dword ptr [rip + 0x2c8112]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f9500: lea eax, dword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f9340: lea eax, dword ptr [rip + 0x2c8472]; ret; 
0x00000000000f916d: lea eax, dword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000f4ac5: lea eax, dword ptr [rip + 0x2ccc65]; lea rcx, qword ptr [rsp + 8]; call 0xf4c10; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f34d2: lea eax, dword ptr [rip + 0x2ce068]; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000b0667: lea eax, dword ptr [rip + 0x310733]; add rsp, 0x28; ret; 
0x000000000008aabd: lea eax, dword ptr [rip + 0x3361bd]; mov qword ptr [rip + 0x3361a6], rax; add rsp, 8; ret; 
0x000000000008aa7b: lea eax, dword ptr [rip + 0x3361ff]; mov qword ptr [rip + 0x3361e8], rax; ret; 
0x000000000005d513: lea eax, dword ptr [rip + 0x363417]; pop rbx; pop rbp; ret; 
0x000000000003d121: lea eax, dword ptr [rip + 0x386c6f]; add rsp, 8; ret; 
0x000000000002ef82: lea eax, dword ptr [rip + 0x390c98]; mov byte ptr [rip + 0x390cef], dl; ret; 
0x00000000000225f7: lea eax, dword ptr [rip + 0x3a1603]; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x000000000002246b: lea eax, dword ptr [rip + 0x3a178f]; ret; 
0x00000000001089c5: lea eax, dword ptr [rip + 0x41d15]; ret; 
0x0000000000108a65: lea eax, dword ptr [rip + 0x44745]; ret; 
0x0000000000108a06: lea eax, dword ptr [rip + 0x47274]; lea rdx, qword ptr [rip + 0x3f14d]; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000127efe: lea eax, dword ptr [rip + 0x541c0]; mov esi, esi; movsxd rcx, dword ptr [rax + rsi*4]; add rax, rcx; jmp rax; 
0x000000000012769e: lea eax, dword ptr [rip + 0x549e0]; mov esi, esi; movsxd rsi, dword ptr [rax + rsi*4]; add rax, rsi; jmp rax; 
0x0000000000123ad1: lea eax, dword ptr [rip + 0x570f1]; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x0000000000091642: lea eax, dword ptr [rip + 0x6878]; ret; 
0x000000000008cc41: lea eax, dword ptr [rip + 0x79]; ret; 
0x00000000000e7273: lea eax, dword ptr [rip + 0x932db]; movsxd rdx, dword ptr [rax + r11*4]; add rax, rdx; jmp rax; 
0x00000000000dc8f3: lea eax, dword ptr [rip + 0x9d8f3]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000d43a4: lea eax, dword ptr [rip + 0xa5b16]; movzx r13d, r13b; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x0000000000091656: lea eax, dword ptr [rip + 0xb1174]; ret; 
0x000000000008ad52: lea eax, dword ptr [rip + 0xb1f68]; ret; 
0x000000000008a9c2: lea eax, dword ptr [rip + 0xb21d8]; ret; 
0x0000000000088532: lea eax, dword ptr [rip + 0xb4528]; ret; 
0x00000000000c3282: lea eax, dword ptr [rip + 0xb6510]; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000c2bbd: lea eax, dword ptr [rip + 0xb67f9]; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000c2863: lea eax, dword ptr [rip + 0xb6aff]; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000a2c13: lea eax, dword ptr [rip + 0xbc9c7]; ret; 
0x00000000000a37cf: lea eax, dword ptr [rip + 0xbdacb]; ret; 
0x00000000000a37d7: lea eax, dword ptr [rip + 0xc0383]; ret; 
0x000000000008c5e5: lea eax, dword ptr [rip + 0xc0bd5]; ret; 
0x00000000000b5fc7: lea eax, dword ptr [rip + 0xc2efb]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x000000000008c446: lea eax, dword ptr [rip + 0xc3844]; lea rdx, qword ptr [rip + 0xbb71d]; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000b5302: lea eax, dword ptr [rip + 0xc3ae4]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000a37bb: lea eax, dword ptr [rip + 0xc84f]; ret; 
0x000000000008a6a5: lea eax, dword ptr [rip + 0xcdf55]; ret; 
0x000000000008cad5: lea eax, dword ptr [rip + 0xce6a5]; ret; 
0x0000000000088425: lea eax, dword ptr [rip + 0xcea25]; ret; 
0x000000000008cbf5: lea eax, dword ptr [rip + 0xcfd95]; ret; 
0x000000000008be7f: lea eax, dword ptr [rip + 0xd3ddb]; ret; 
0x00000000000a2c0b: lea eax, dword ptr [rip + 0xd48f]; ret; 
0x000000000008be87: lea eax, dword ptr [rip + 0xd6563]; ret; 
0x000000000011ffe1: lea eax, dword ptr [rip + 0xd9]; lea rdx, qword ptr [rip + 0xcf02]; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x0000000000086d32: lea eax, dword ptr [rip + 0xdb398]; ret; 
0x00000000000968f7: lea eax, dword ptr [rip + 0xe193b]; mov r9d, r9d; movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x0000000000096857: lea eax, dword ptr [rip + 0xe19b7]; mov r9d, r9d; movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x0000000000091d51: lea eax, dword ptr [rip + 0xe6479]; mov r8, rdx; and r8d, 7; movsxd r8, dword ptr [rax + r8*4]; add rax, r8; jmp rax; 
0x0000000000091ae1: lea eax, dword ptr [rip + 0xe66c9]; mov rcx, rdx; and ecx, 7; movsxd rcx, dword ptr [rax + rcx*4]; add rax, rcx; jmp rax; 
0x000000000008356f: lea eax, dword ptr [rip + 0xf4aab]; movsxd rdx, dword ptr [rax + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000086f95: lea eax, dword ptr [rip + 5]; ret; 
0x000000000008cca4: lea eax, dword ptr [rip + 6]; ret; 
0x0000000000088e11: lea eax, dword ptr [rip + 9]; ret; 
0x00000000000cb766: lea eax, dword ptr [rip - 0x4c]; lea rdx, qword ptr [rip - 0x123]; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000092b8b: lea eax, dword ptr [rip - 0x511]; ret; 
0x0000000000092ba2: lea eax, dword ptr [rip - 0x528]; add rsp, 8; ret; 
0x00000000001aa2ac: lea eax, dword ptr [rsi + rcx*4]; add ecx, dword ptr [rdi + 0x14b0302]; ret; 
0x00000000000b0711: lea eax, dword ptr [rsi + rdx]; add rsp, 0x18; ret; 
0x000000000002f46f: lea eax, dword ptr [rsi]; cmp dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012e757: lea eax, dword ptr [rsp + 0x30]; mov qword ptr [rsp + 8], rax; xor eax, eax; call rdx; 
0x0000000000039a91: lea eax, dword ptr [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x39230; leave; ret; 
0x00000000000fb323: lea ebp, dword ptr [rax + rax]; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x2d; syscall; 
0x0000000000069f4b: lea ebp, dword ptr [rax - 0x76000002]; ret; 
0x000000000007b606: lea ebp, dword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x000000000012c163: lea ebp, dword ptr [rbx + 0x10]; xor esi, esi; mov dword ptr [rbx + 0x10], 1; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x0000000000049b51: lea ebx, dword ptr [rax + rbx + 1]; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000050adc: lea ebx, dword ptr [rdi + rdi*8 - 1]; dec dword ptr [rax - 0x77]; ret 0x858b; 
0x000000000005132e: lea ebx, dword ptr [rdi + rdi*8 - 1]; dec dword ptr [rax - 0x77]; ret 0xa9e9; 
0x00000000001aaffc: lea ebx, dword ptr [rdx - 0xb]; jmp qword ptr [rdx]; 
0x0000000000034ed3: lea ebx, dword ptr [rip + 0x13dadf]; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000161d04: lea ebx, dword ptr [rip + 0x247c6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161c8a: lea ebx, dword ptr [rip + 0x24840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161bfb: lea ebx, dword ptr [rip + 0x248cf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001619f0: lea ebx, dword ptr [rip + 0x24ada]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001618be: lea ebx, dword ptr [rip + 0x24c0c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001617f8: lea ebx, dword ptr [rip + 0x24cd2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016177a: lea ebx, dword ptr [rip + 0x24d50]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001616e3: lea ebx, dword ptr [rip + 0x24de7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001614e7: lea ebx, dword ptr [rip + 0x24fe3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001613b6: lea ebx, dword ptr [rip + 0x25114]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001612b5: lea ebx, dword ptr [rip + 0x25215]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001606d4: lea ebx, dword ptr [rip + 0x25cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016065a: lea ebx, dword ptr [rip + 0x25d30]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001605cb: lea ebx, dword ptr [rip + 0x25dbf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001603c0: lea ebx, dword ptr [rip + 0x25fca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016028e: lea ebx, dword ptr [rip + 0x260fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001601c8: lea ebx, dword ptr [rip + 0x261c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016014a: lea ebx, dword ptr [rip + 0x26240]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001600b3: lea ebx, dword ptr [rip + 0x262d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015feb7: lea ebx, dword ptr [rip + 0x264d3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fd86: lea ebx, dword ptr [rip + 0x26604]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fc77: lea ebx, dword ptr [rip + 0x26713]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000151882: lea ebx, dword ptr [rip + 0x35cc8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151524: lea ebx, dword ptr [rip + 0x36026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001516cf: lea ebx, dword ptr [rip + 0x360bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001513a4: lea ebx, dword ptr [rip + 0x361a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151467: lea ebx, dword ptr [rip + 0x36323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151224: lea ebx, dword ptr [rip + 0x36326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001512e7: lea ebx, dword ptr [rip + 0x364a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001510a4: lea ebx, dword ptr [rip + 0x364a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151167: lea ebx, dword ptr [rip + 0x36623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150f24: lea ebx, dword ptr [rip + 0x36626]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150fe8: lea ebx, dword ptr [rip + 0x367a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150da4: lea ebx, dword ptr [rip + 0x367a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150e67: lea ebx, dword ptr [rip + 0x36923]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150c24: lea ebx, dword ptr [rip + 0x36926]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150ce7: lea ebx, dword ptr [rip + 0x36aa3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150aa4: lea ebx, dword ptr [rip + 0x36aa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150b67: lea ebx, dword ptr [rip + 0x36c23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150924: lea ebx, dword ptr [rip + 0x36c26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001509e7: lea ebx, dword ptr [rip + 0x36da3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001507a4: lea ebx, dword ptr [rip + 0x36da6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150867: lea ebx, dword ptr [rip + 0x36f23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150624: lea ebx, dword ptr [rip + 0x36f26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001506e7: lea ebx, dword ptr [rip + 0x370a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001504a4: lea ebx, dword ptr [rip + 0x370a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150567: lea ebx, dword ptr [rip + 0x37223]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150324: lea ebx, dword ptr [rip + 0x37226]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001503e7: lea ebx, dword ptr [rip + 0x373a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001501a4: lea ebx, dword ptr [rip + 0x373a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150267: lea ebx, dword ptr [rip + 0x37523]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150024: lea ebx, dword ptr [rip + 0x37526]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014feab: lea ebx, dword ptr [rip + 0x3769f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001500e7: lea ebx, dword ptr [rip + 0x376a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ff67: lea ebx, dword ptr [rip + 0x37823]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fcac: lea ebx, dword ptr [rip + 0x3789e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fe2a: lea ebx, dword ptr [rip + 0x37960]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fcce: lea ebx, dword ptr [rip + 0x37abc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ed6e: lea ebx, dword ptr [rip + 0x382dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ea44: lea ebx, dword ptr [rip + 0x38606]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ebdb: lea ebx, dword ptr [rip + 0x386af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e8c4: lea ebx, dword ptr [rip + 0x38786]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e987: lea ebx, dword ptr [rip + 0x38903]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e744: lea ebx, dword ptr [rip + 0x38906]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e807: lea ebx, dword ptr [rip + 0x38a83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e5c4: lea ebx, dword ptr [rip + 0x38a86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e687: lea ebx, dword ptr [rip + 0x38c03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e444: lea ebx, dword ptr [rip + 0x38c06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e508: lea ebx, dword ptr [rip + 0x38d82]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e2c4: lea ebx, dword ptr [rip + 0x38d86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e387: lea ebx, dword ptr [rip + 0x38f03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e144: lea ebx, dword ptr [rip + 0x38f06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e207: lea ebx, dword ptr [rip + 0x39083]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dfc4: lea ebx, dword ptr [rip + 0x39086]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e087: lea ebx, dword ptr [rip + 0x39203]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014de44: lea ebx, dword ptr [rip + 0x39206]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014df07: lea ebx, dword ptr [rip + 0x39383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dcc4: lea ebx, dword ptr [rip + 0x39386]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dd87: lea ebx, dword ptr [rip + 0x39503]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014db44: lea ebx, dword ptr [rip + 0x39506]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dc07: lea ebx, dword ptr [rip + 0x39683]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d9c4: lea ebx, dword ptr [rip + 0x39686]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014da87: lea ebx, dword ptr [rip + 0x39803]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d844: lea ebx, dword ptr [rip + 0x39806]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d907: lea ebx, dword ptr [rip + 0x39983]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d6c4: lea ebx, dword ptr [rip + 0x39986]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d787: lea ebx, dword ptr [rip + 0x39b03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d544: lea ebx, dword ptr [rip + 0x39b06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d3cb: lea ebx, dword ptr [rip + 0x39c7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d607: lea ebx, dword ptr [rip + 0x39c83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d487: lea ebx, dword ptr [rip + 0x39e03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1ee: lea ebx, dword ptr [rip + 0x39e5c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d34a: lea ebx, dword ptr [rip + 0x39f40]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1db: lea ebx, dword ptr [rip + 0x3a0af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c29e: lea ebx, dword ptr [rip + 0x3a8ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bf74: lea ebx, dword ptr [rip + 0x3abd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c10b: lea ebx, dword ptr [rip + 0x3ac7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bdf4: lea ebx, dword ptr [rip + 0x3ad56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014beb7: lea ebx, dword ptr [rip + 0x3aed3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bc74: lea ebx, dword ptr [rip + 0x3aed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bd37: lea ebx, dword ptr [rip + 0x3b053]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014baf4: lea ebx, dword ptr [rip + 0x3b056]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bbb7: lea ebx, dword ptr [rip + 0x3b1d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b974: lea ebx, dword ptr [rip + 0x3b1d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ba38: lea ebx, dword ptr [rip + 0x3b352]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b7f4: lea ebx, dword ptr [rip + 0x3b356]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b8b7: lea ebx, dword ptr [rip + 0x3b4d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b674: lea ebx, dword ptr [rip + 0x3b4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b737: lea ebx, dword ptr [rip + 0x3b653]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b4f4: lea ebx, dword ptr [rip + 0x3b656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b5b7: lea ebx, dword ptr [rip + 0x3b7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b374: lea ebx, dword ptr [rip + 0x3b7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b437: lea ebx, dword ptr [rip + 0x3b953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b1f4: lea ebx, dword ptr [rip + 0x3b956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b2b7: lea ebx, dword ptr [rip + 0x3bad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b074: lea ebx, dword ptr [rip + 0x3bad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b137: lea ebx, dword ptr [rip + 0x3bc53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aef4: lea ebx, dword ptr [rip + 0x3bc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014afb7: lea ebx, dword ptr [rip + 0x3bdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ad74: lea ebx, dword ptr [rip + 0x3bdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ae37: lea ebx, dword ptr [rip + 0x3bf53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014abf4: lea ebx, dword ptr [rip + 0x3bf56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014acb7: lea ebx, dword ptr [rip + 0x3c0d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aa74: lea ebx, dword ptr [rip + 0x3c0d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a8fb: lea ebx, dword ptr [rip + 0x3c24f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ab37: lea ebx, dword ptr [rip + 0x3c253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a6c5: lea ebx, dword ptr [rip + 0x3c2c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a608: lea ebx, dword ptr [rip + 0x3c382]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a9b7: lea ebx, dword ptr [rip + 0x3c3d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a71b: lea ebx, dword ptr [rip + 0x3c42f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a51d: lea ebx, dword ptr [rip + 0x3c46d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a87a: lea ebx, dword ptr [rip + 0x3c510]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a452: lea ebx, dword ptr [rip + 0x3c538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a708: lea ebx, dword ptr [rip + 0x3c682]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149431: lea ebx, dword ptr [rip + 0x3d559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149393: lea ebx, dword ptr [rip + 0x3d5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001492e1: lea ebx, dword ptr [rip + 0x3d6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149243: lea ebx, dword ptr [rip + 0x3d747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149191: lea ebx, dword ptr [rip + 0x3d7f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001490f3: lea ebx, dword ptr [rip + 0x3d897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149041: lea ebx, dword ptr [rip + 0x3d949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148fa3: lea ebx, dword ptr [rip + 0x3d9e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148ef1: lea ebx, dword ptr [rip + 0x3da99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148e53: lea ebx, dword ptr [rip + 0x3db37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148da1: lea ebx, dword ptr [rip + 0x3dbe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148d03: lea ebx, dword ptr [rip + 0x3dc87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148c51: lea ebx, dword ptr [rip + 0x3dd39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148bb3: lea ebx, dword ptr [rip + 0x3ddd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148b01: lea ebx, dword ptr [rip + 0x3de89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148a68: lea ebx, dword ptr [rip + 0x3df22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001489b1: lea ebx, dword ptr [rip + 0x3dfd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148913: lea ebx, dword ptr [rip + 0x3e077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148861: lea ebx, dword ptr [rip + 0x3e129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001487c3: lea ebx, dword ptr [rip + 0x3e1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148711: lea ebx, dword ptr [rip + 0x3e279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148673: lea ebx, dword ptr [rip + 0x3e317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001485c1: lea ebx, dword ptr [rip + 0x3e3c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148523: lea ebx, dword ptr [rip + 0x3e467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148471: lea ebx, dword ptr [rip + 0x3e519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001483d3: lea ebx, dword ptr [rip + 0x3e5b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148321: lea ebx, dword ptr [rip + 0x3e669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148283: lea ebx, dword ptr [rip + 0x3e707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001481d1: lea ebx, dword ptr [rip + 0x3e7b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148133: lea ebx, dword ptr [rip + 0x3e857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148087: lea ebx, dword ptr [rip + 0x3e903]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147f96: lea ebx, dword ptr [rip + 0x3e9f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147ed7: lea ebx, dword ptr [rip + 0x3eab3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147e6d: lea ebx, dword ptr [rip + 0x3eb1d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147d7e: lea ebx, dword ptr [rip + 0x3ec0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147b44: lea ebx, dword ptr [rip + 0x3ec86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147cb9: lea ebx, dword ptr [rip + 0x3ecd1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147a6a: lea ebx, dword ptr [rip + 0x3ed60]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146a61: lea ebx, dword ptr [rip + 0x3fd69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001469c3: lea ebx, dword ptr [rip + 0x3fe07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146911: lea ebx, dword ptr [rip + 0x3feb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146873: lea ebx, dword ptr [rip + 0x3ff57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001467c1: lea ebx, dword ptr [rip + 0x40009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146723: lea ebx, dword ptr [rip + 0x400a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146671: lea ebx, dword ptr [rip + 0x40159]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001465d3: lea ebx, dword ptr [rip + 0x401f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146521: lea ebx, dword ptr [rip + 0x402a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146483: lea ebx, dword ptr [rip + 0x40347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001463d1: lea ebx, dword ptr [rip + 0x403f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146333: lea ebx, dword ptr [rip + 0x40497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146281: lea ebx, dword ptr [rip + 0x40549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001461e3: lea ebx, dword ptr [rip + 0x405e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146131: lea ebx, dword ptr [rip + 0x40699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146098: lea ebx, dword ptr [rip + 0x40732]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145fe1: lea ebx, dword ptr [rip + 0x407e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145f43: lea ebx, dword ptr [rip + 0x40887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145e91: lea ebx, dword ptr [rip + 0x40939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145df3: lea ebx, dword ptr [rip + 0x409d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145d41: lea ebx, dword ptr [rip + 0x40a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145ca3: lea ebx, dword ptr [rip + 0x40b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145bf1: lea ebx, dword ptr [rip + 0x40bd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145b53: lea ebx, dword ptr [rip + 0x40c77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145aa1: lea ebx, dword ptr [rip + 0x40d29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a03: lea ebx, dword ptr [rip + 0x40dc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145951: lea ebx, dword ptr [rip + 0x40e79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001458b3: lea ebx, dword ptr [rip + 0x40f17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145801: lea ebx, dword ptr [rip + 0x40fc9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145763: lea ebx, dword ptr [rip + 0x41067]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001456b7: lea ebx, dword ptr [rip + 0x41113]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001455c6: lea ebx, dword ptr [rip + 0x41204]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145507: lea ebx, dword ptr [rip + 0x412c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014549d: lea ebx, dword ptr [rip + 0x4132d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001453ae: lea ebx, dword ptr [rip + 0x4141c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145174: lea ebx, dword ptr [rip + 0x41496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001452e9: lea ebx, dword ptr [rip + 0x414e1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014509a: lea ebx, dword ptr [rip + 0x41570]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000144091: lea ebx, dword ptr [rip + 0x42579]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ff3: lea ebx, dword ptr [rip + 0x42617]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143f41: lea ebx, dword ptr [rip + 0x426c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ea3: lea ebx, dword ptr [rip + 0x42767]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143df1: lea ebx, dword ptr [rip + 0x42819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143d53: lea ebx, dword ptr [rip + 0x428b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ca1: lea ebx, dword ptr [rip + 0x42969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c03: lea ebx, dword ptr [rip + 0x42a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143b51: lea ebx, dword ptr [rip + 0x42ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ab3: lea ebx, dword ptr [rip + 0x42b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143a01: lea ebx, dword ptr [rip + 0x42c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143963: lea ebx, dword ptr [rip + 0x42ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001438b1: lea ebx, dword ptr [rip + 0x42d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143813: lea ebx, dword ptr [rip + 0x42df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143761: lea ebx, dword ptr [rip + 0x42ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001436c8: lea ebx, dword ptr [rip + 0x42f42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143611: lea ebx, dword ptr [rip + 0x42ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143573: lea ebx, dword ptr [rip + 0x43097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001434c1: lea ebx, dword ptr [rip + 0x43149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143423: lea ebx, dword ptr [rip + 0x431e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143371: lea ebx, dword ptr [rip + 0x43299]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001432d3: lea ebx, dword ptr [rip + 0x43337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143221: lea ebx, dword ptr [rip + 0x433e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143183: lea ebx, dword ptr [rip + 0x43487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001430d1: lea ebx, dword ptr [rip + 0x43539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143033: lea ebx, dword ptr [rip + 0x435d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142f81: lea ebx, dword ptr [rip + 0x43689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ee3: lea ebx, dword ptr [rip + 0x43727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142e31: lea ebx, dword ptr [rip + 0x437d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142d93: lea ebx, dword ptr [rip + 0x43877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ce7: lea ebx, dword ptr [rip + 0x43923]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142bf6: lea ebx, dword ptr [rip + 0x43a14]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142b37: lea ebx, dword ptr [rip + 0x43ad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142acd: lea ebx, dword ptr [rip + 0x43b3d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001429de: lea ebx, dword ptr [rip + 0x43c2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142919: lea ebx, dword ptr [rip + 0x43cf1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000f7ef9: lea ebx, dword ptr [rip + 0x865af]; mov rax, rbx; pop rbx; ret; 
0x00000000000a10fa: lea ebx, dword ptr [rip + 0xd7714]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0976: lea ebx, dword ptr [rip + 0xd7e98]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a094d: lea ebx, dword ptr [rip + 0xd7ec1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a092d: lea ebx, dword ptr [rip + 0xd7ee1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0904: lea ebx, dword ptr [rip + 0xd7f0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a08df: lea ebx, dword ptr [rip + 0xd7f2f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a08c1: lea ebx, dword ptr [rip + 0xd7f4d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0841: lea ebx, dword ptr [rip + 0xd7f4d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0826: lea ebx, dword ptr [rip + 0xd7f68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a08a4: lea ebx, dword ptr [rip + 0xd7f6a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0874: lea ebx, dword ptr [rip + 0xd7f9a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a07f1: lea ebx, dword ptr [rip + 0xd7f9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a07c5: lea ebx, dword ptr [rip + 0xd7fc9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a07af: lea ebx, dword ptr [rip + 0xd7fdf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a078d: lea ebx, dword ptr [rip + 0xd8001]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0768: lea ebx, dword ptr [rip + 0xd8026]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a074b: lea ebx, dword ptr [rip + 0xd8043]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a06de: lea ebx, dword ptr [rip + 0xd80b0]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fea6: lea ebx, dword ptr [rip + 0xd8868]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe71: lea ebx, dword ptr [rip + 0xd889d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe45: lea ebx, dword ptr [rip + 0xd88c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe2f: lea ebx, dword ptr [rip + 0xd88df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe0d: lea ebx, dword ptr [rip + 0xd8901]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fde8: lea ebx, dword ptr [rip + 0xd8926]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fdcb: lea ebx, dword ptr [rip + 0xd8943]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fd73: lea ebx, dword ptr [rip + 0xd899b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f87a: lea ebx, dword ptr [rip + 0xd8dc0]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f78f: lea ebx, dword ptr [rip + 0xd8f3b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f77a: lea ebx, dword ptr [rip + 0xd8f50]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f75b: lea ebx, dword ptr [rip + 0xd8f6f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009eca6: lea ebx, dword ptr [rip + 0xd9994]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec7d: lea ebx, dword ptr [rip + 0xd99bd]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec5d: lea ebx, dword ptr [rip + 0xd99dd]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec34: lea ebx, dword ptr [rip + 0xd9a06]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec0f: lea ebx, dword ptr [rip + 0xd9a2b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ebf1: lea ebx, dword ptr [rip + 0xd9a49]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009eb71: lea ebx, dword ptr [rip + 0xd9a49]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ebd4: lea ebx, dword ptr [rip + 0xd9a66]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009eba4: lea ebx, dword ptr [rip + 0xd9a96]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea8f: lea ebx, dword ptr [rip + 0xd9b2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea61: lea ebx, dword ptr [rip + 0xd9b59]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea38: lea ebx, dword ptr [rip + 0xd9b82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e3c6: lea ebx, dword ptr [rip + 0xda168]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e391: lea ebx, dword ptr [rip + 0xda19d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e365: lea ebx, dword ptr [rip + 0xda1c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e34f: lea ebx, dword ptr [rip + 0xda1df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e32d: lea ebx, dword ptr [rip + 0xda201]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e308: lea ebx, dword ptr [rip + 0xda226]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e2eb: lea ebx, dword ptr [rip + 0xda243]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e293: lea ebx, dword ptr [rip + 0xda29b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e06a: lea ebx, dword ptr [rip + 0xda3f0]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df7f: lea ebx, dword ptr [rip + 0xda56b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df6a: lea ebx, dword ptr [rip + 0xda580]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df4b: lea ebx, dword ptr [rip + 0xda59f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d606: lea ebx, dword ptr [rip + 0xdae54]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d5dd: lea ebx, dword ptr [rip + 0xdae7d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d5bd: lea ebx, dword ptr [rip + 0xdae9d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d594: lea ebx, dword ptr [rip + 0xdaec6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d56f: lea ebx, dword ptr [rip + 0xdaeeb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d551: lea ebx, dword ptr [rip + 0xdaf09]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d4d1: lea ebx, dword ptr [rip + 0xdaf09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d534: lea ebx, dword ptr [rip + 0xdaf26]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d504: lea ebx, dword ptr [rip + 0xdaf56]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3ff: lea ebx, dword ptr [rip + 0xdafdb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3d1: lea ebx, dword ptr [rip + 0xdb009]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3a8: lea ebx, dword ptr [rip + 0xdb032]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cdc6: lea ebx, dword ptr [rip + 0xdb594]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd91: lea ebx, dword ptr [rip + 0xdb5c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd65: lea ebx, dword ptr [rip + 0xdb5f5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd4f: lea ebx, dword ptr [rip + 0xdb60b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd2d: lea ebx, dword ptr [rip + 0xdb62d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd08: lea ebx, dword ptr [rip + 0xdb652]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cceb: lea ebx, dword ptr [rip + 0xdb66f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cc93: lea ebx, dword ptr [rip + 0xdb6c7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000173f31: lea ebx, dword ptr [rsi - 0x3271f33]; test al, 0x97; xchg eax, esp; ret; 
0x00000000000a3a6a: lea ecx, dword ptr [rax + 1]; call rbx; 
0x00000000000a3bb2: lea ecx, dword ptr [rax + 4]; call rbx; 
0x0000000000074452: lea ecx, dword ptr [rax + 4]; mov qword ptr [rdx], rcx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x00000000000b4c60: lea ecx, dword ptr [rax - 0x73]; cmp eax, 0xc402c; movzx edx, dl; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000005eeda: lea ecx, dword ptr [rbp - 0x1000]; mov qword ptr [rbp - 0x11a0], rcx; jmp rax; 
0x000000000005eecc: lea ecx, dword ptr [rbp - 0x1090]; mov qword ptr [rbp - 0x1198], rcx; lea rcx, qword ptr [rbp - 0x1000]; mov qword ptr [rbp - 0x11a0], rcx; jmp rax; 
0x000000000004a002: lea ecx, dword ptr [rbp - 0x480]; mov qword ptr [rbp - 0x5b0], rcx; jmp rax; 
0x0000000000049ff4: lea ecx, dword ptr [rbp - 0x4d0]; mov qword ptr [rbp - 0x598], rcx; lea rcx, qword ptr [rbp - 0x480]; mov qword ptr [rbp - 0x5b0], rcx; jmp rax; 
0x00000000000ed63a: lea ecx, dword ptr [rbx + 0x28]; mov rdi, qword ptr [rbx + 0x18]; mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x000000000006cdec: lea ecx, dword ptr [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000009cc9e: lea ecx, dword ptr [rbx + rcx]; jmp rcx; 
0x0000000000086700: lea ecx, dword ptr [rdi]; add byte ptr [rax - 0x77], cl; ret 0xff31; 
0x000000000008bacf: lea ecx, dword ptr [rdx + 1]; cmovne rdx, rcx; mov qword ptr [r9], rdx; add rsp, 0x100; ret; 
0x000000000008b9d0: lea ecx, dword ptr [rdx + 1]; cmovne rdx, rcx; mov qword ptr [rip + 0x335316], rdx; add rsp, 0x100; ret; 
0x0000000000074661: lea ecx, dword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x00000000000776d6: lea ecx, dword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000137267: lea ecx, dword ptr [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000008345c: lea ecx, dword ptr [rdx - 8]; cmovne rax, rcx; add rsp, 8; ret; 
0x000000000006d28d: lea ecx, dword ptr [rip + 0x10ac1d]; movsxd rdx, dword ptr [rcx + rdx*4]; add rcx, rdx; jmp rcx; 
0x000000000006465a: lea ecx, dword ptr [rip + 0x11337c]; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000054a4c: lea ecx, dword ptr [rip + 0x122522]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x000000000013fd8e: lea ecx, dword ptr [rip + 0x274ec]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013e6ad: lea ecx, dword ptr [rip + 0x28bcd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013e3e9: lea ecx, dword ptr [rip + 0x28e91]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013cfd4: lea ecx, dword ptr [rip + 0x2a2a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013c9ee: lea ecx, dword ptr [rip + 0x2a88c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013ad5d: lea ecx, dword ptr [rip + 0x2c51d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013aa29: lea ecx, dword ptr [rip + 0x2c851]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000139154: lea ecx, dword ptr [rip + 0x2e126]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000d4455: lea ecx, dword ptr [rip + 0xa5c35]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x00000000000a1b33: lea ecx, dword ptr [rip + 0xd6deb]; shr eax, 0xc; and eax, 0xf; movsxd rsi, dword ptr [rcx + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000fbbf1: lea ecx, dword ptr [rsi + rax]; xor eax, eax; cmp rdx, rcx; cmovae rax, rsi; ret; 
0x00000000000a3f6b: lea ecx, dword ptr [rsp + 0x28]; call rbx; 
0x00000000000a3ff9: lea ecx, dword ptr [rsp + 0x28]; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a3baa: lea ecx, dword ptr [rsp + 0x28]; mov rsi, r13; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a449d: lea ecx, dword ptr [rsp + 0x38]; mov rcx, r13; mov rdi, rbp; call rbx; 
0x00000000000a3a5e: lea ecx, dword ptr [rsp + 0x38]; mov rsi, rbp; mov rdi, qword ptr [r12]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x00000000000f1cbd: lea ecx, dword ptr [rsp + 0x40]; movsxd rdi, edi; mov eax, 0x10e; syscall; 
0x00000000000a478d: lea ecx, dword ptr [rsp + 0x80]; mov rcx, r13; mov rdi, rbp; call rbx; 
0x00000000000a4192: lea ecx, dword ptr [rsp + 0x80]; mov rdx, r13; mov rdi, rbp; call rbx; 
0x0000000000039acf: lea ecx, dword ptr [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x39700; leave; ret; 
0x00000000000f4acc: lea ecx, dword ptr [rsp + 8]; call 0xf4c10; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000060d9e: lea edi, dword ptr [rax + 0x4cffffee]; mov esi, ebp; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000135936: lea edi, dword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x000000000012463e: lea edi, dword ptr [rbp + 0x10]; call rax; 
0x000000000005ed20: lea edi, dword ptr [rbp - 0x1020]; mov rdx, r14; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fb6: lea edi, dword ptr [rbp - 0x170]; mov rdx, r15; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x0000000000054d97: lea edi, dword ptr [rbp - 0x170]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049e78: lea edi, dword ptr [rbp - 0x440]; mov rdx, rbx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x0000000000065a94: lea edi, dword ptr [rbp - 0xf0]; mov rdx, r14; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x0000000000064e2d: lea edi, dword ptr [rbp - 0xf0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000128092: lea edi, dword ptr [rbx + 0x58]; call rax; 
0x0000000000127662: lea edi, dword ptr [rbx + 0x68]; call rax; 
0x0000000000123a85: lea edi, dword ptr [rbx + 0xc8]; call rax; 
0x0000000000097b91: lea edi, dword ptr [rcx + 1]; xor esi, esi; call 0x8c4b0; mov rax, rbx; pop rbx; ret; 
0x000000000014a6bd: lea edi, dword ptr [rdi - 0x40]; sub rdx, 0x40; lea r11, qword ptr [rip + 0x3c2c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000034c6a: lea edi, dword ptr [rip + 0x13dd10]; movsxd rdx, dword ptr [rdi + rsi*4]; add rdx, rdi; jmp rdx; 
0x000000000012ab8f: lea edi, dword ptr [rip + 0x298ccb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ee0f: lea edi, dword ptr [rip + 0x2a486b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011bccf: lea edi, dword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001120b1: lea edi, dword ptr [rip + 0x2b0ec9]; call rax; 
0x00000000001117e6: lea edi, dword ptr [rip + 0x2b1734]; call rax; 
0x000000000010ad77: lea edi, dword ptr [rip + 0x2b7a23]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f249f: lea edi, dword ptr [rip + 0x2cf08b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d048f: lea edi, dword ptr [rip + 0x2f0f2b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc810: lea edi, dword ptr [rip + 0x3032ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc7f0: lea edi, dword ptr [rip + 0x30330a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000bc711: lea edi, dword ptr [rip + 0x3033e9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc6ef: lea edi, dword ptr [rip + 0x30340b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc508: lea edi, dword ptr [rip + 0x3035f2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc4dd: lea edi, dword ptr [rip + 0x30361d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc390: lea edi, dword ptr [rip + 0x30376a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc32b: lea edi, dword ptr [rip + 0x3037cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000af000: lea edi, dword ptr [rip + 0x310afa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aef49: lea edi, dword ptr [rip + 0x310bb1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008aca7: lea edi, dword ptr [rip + 0x335fb3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008aaa3: lea edi, dword ptr [rip + 0x336247]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000004916f: lea edi, dword ptr [rip + 0x37777b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340f0: lea edi, dword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340c8: lea edi, dword ptr [rip + 0x38bbb2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000321ac: lea edi, dword ptr [rip + 0x38dbae]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032135: lea edi, dword ptr [rip + 0x38dc25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032050: lea edi, dword ptr [rip + 0x38dd0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032028: lea edi, dword ptr [rip + 0x38dd32]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e3b: lea edi, dword ptr [rip + 0x38debf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e0e: lea edi, dword ptr [rip + 0x38deec]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000031b6a: lea edi, dword ptr [rip + 0x38df90]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aa9: lea edi, dword ptr [rip + 0x38e051]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031b97: lea edi, dword ptr [rip + 0x38e0e3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031ad4: lea edi, dword ptr [rip + 0x38e1a6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031af6: lea edi, dword ptr [rip + 0x38e204]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318ce: lea edi, dword ptr [rip + 0x38e22c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a87: lea edi, dword ptr [rip + 0x38e273]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318f5: lea edi, dword ptr [rip + 0x38e385]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000305e8: lea edi, dword ptr [rip + 0x38f692]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030500: lea edi, dword ptr [rip + 0x38f77a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000303a0: lea edi, dword ptr [rip + 0x38f8da]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030378: lea edi, dword ptr [rip + 0x38f902]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f898: lea edi, dword ptr [rip + 0x390262]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f878: lea edi, dword ptr [rip + 0x390282]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7d8: lea edi, dword ptr [rip + 0x390322]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7ad: lea edi, dword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f5d1: lea edi, dword ptr [rip + 0x390529]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f57f: lea edi, dword ptr [rip + 0x39057b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f46d: lea edi, dword ptr [rip + 0x39068d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d755: lea edi, dword ptr [rip + 0x3923a5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d733: lea edi, dword ptr [rip + 0x3923c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d510: lea edi, dword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d4e8: lea edi, dword ptr [rip + 0x392612]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d49c: lea edi, dword ptr [rip + 0x39265e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d288: lea edi, dword ptr [rip + 0x392872]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d118: lea edi, dword ptr [rip + 0x3929e2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002458f: lea edi, dword ptr [rip + 0x39b4db]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000243a7: lea edi, dword ptr [rip + 0x39b6c3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012708e: lea edi, dword ptr [rip + 0x54c0c]; movsxd rax, dword ptr [rdi + rax*4]; add rdi, rax; jmp rdi; 
0x00000000000c7c0e: lea edi, dword ptr [rip + 0xb1cc8]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000c644d: lea edi, dword ptr [rip + 0xb3399]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000ba13c: lea edi, dword ptr [rip + 0xbf03a]; mov eax, esi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000b8279: lea edi, dword ptr [rip + 0xc0d11]; movzx edx, sil; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000b4c62: lea edi, dword ptr [rip + 0xc402c]; movzx edx, dl; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000b13fa: lea edi, dword ptr [rip + 0xce8e0]; mov edx, 0x1f; call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000833a4: lea edi, dword ptr [rip + 0xfefae]; mov edx, 0xc97; call 0x7d680; mov rsi, qword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x000000000010ad3e: lea edi, dword ptr [rip - 0x174]; call rax; 
0x00000000000489ef: lea edi, dword ptr [rsi + 0x37]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000021fdc: lea edi, dword ptr [rsi + rdx]; call rax; 
0x0000000000046323: lea edi, dword ptr [rsp + 0x10]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006fb32: lea edi, dword ptr [rsp + 0x20]; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x0000000000030da1: lea edi, dword ptr [rsp + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007c58b: lea edx, dword ptr [rax + 0x60]; nop; mov rcx, qword ptr [rdi]; mov qword ptr [rdx], rcx; ret; 
0x0000000000037bd9: lea edx, dword ptr [rax + 1]; mov dword ptr [rip + 0x3864be], edx; ret; 
0x000000000007364b: lea edx, dword ptr [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000009454f: lea edx, dword ptr [rax + 1]; test rax, rax; cmove rdx, rbx; mov rax, rdx; pop rbx; ret; 
0x000000000003cd24: lea edx, dword ptr [rax + 4]; xor eax, eax; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000007bd9f: lea edx, dword ptr [rax - 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000006cde8: lea edx, dword ptr [rbx + 0x34]; lea rcx, qword ptr [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000005c2df: lea edx, dword ptr [rbx + 3]; add byte ptr [rcx - 0x77], cl; ret 0x92e9; 
0x0000000000142924: lea edx, dword ptr [rbx + rdx]; jmp rdx; 
0x0000000000096c91: lea edx, dword ptr [rcx + 1]; mov byte ptr [rcx], 0; mov qword ptr [rdi], rdx; ret; 
0x00000000000bcb2e: lea edx, dword ptr [rdi + rdi*8]; lea rax, qword ptr [rax + rdx*8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000149428: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001492d8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149038: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148d98: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dbe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148c48: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dd39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148af8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3de89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001489a8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dfd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148858: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148708: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001485b8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e3c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148468: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148318: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001481c8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e7b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146a58: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3fd69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146908: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3feb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001467b8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146668: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40159]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146518: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x402a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001463c8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x403f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146278: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146128: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145fd8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x407e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145e88: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145d38: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145be8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40bd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a98: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40d29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145948: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40e79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001457f8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40fc9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000144088: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42579]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143f38: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x426c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143de8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c98: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143b48: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001439f8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001438a8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143758: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143608: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001434b8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143368: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43299]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143218: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x433e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001430c8: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142f78: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142e28: lea edx, dword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x437d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000fd5b7: lea edx, dword ptr [rdx + rcx*4]; add eax, dword ptr [rsi + rdx]; ret; 
0x0000000000156e37: lea edx, dword ptr [rip + 0x10443]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000156e12: lea edx, dword ptr [rip + 0x10468]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000005e53a: lea edx, dword ptr [rip + 0x118c40]; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x00000000001548d7: lea edx, dword ptr [rip + 0x129a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001548bd: lea edx, dword ptr [rip + 0x129bd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000003078a: lea edx, dword ptr [rip + 0x1421b0]; movsxd rax, dword ptr [rdx + r12*4]; add rdx, rax; jmp rdx; 
0x0000000000022b64: lea edx, dword ptr [rip + 0x1432b6]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000013fde7: lea edx, dword ptr [rip + 0x27493]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013fdc2: lea edx, dword ptr [rip + 0x274b8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013359f: lea edx, dword ptr [rip + 0x28853b]; mov qword ptr [rip + 0x28c2e4], rdx; add rsp, 8; ret; 
0x000000000013e437: lea edx, dword ptr [rip + 0x28e43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013e41d: lea edx, dword ptr [rip + 0x28e5d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013516a: lea edx, dword ptr [rip + 0x28ea30]; mov eax, 0; cmove rax, rdx; add rsp, 8; ret; 
0x000000000012ab18: lea edx, dword ptr [rip + 0x298d62]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000001211d1: lea edx, dword ptr [rip + 0x29c9a9]; mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x000000000013ca47: lea edx, dword ptr [rip + 0x2a833]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013ca22: lea edx, dword ptr [rip + 0x2a858]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000010bd8e: lea edx, dword ptr [rip + 0x2b8014]; call 0xa3ea0; add rsp, 8; ret; 
0x000000000013aa77: lea edx, dword ptr [rip + 0x2c803]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013aa5d: lea edx, dword ptr [rip + 0x2c81d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000488d7: lea edx, dword ptr [rip + 0x37b4cb]; call 0xa3ea0; pop rbx; ret; 
0x000000000011fcd2: lea edx, dword ptr [rip + 0x388]; mov qword ptr [rsp + 8], rdi; mov esi, 1; mov rdi, r15; call qword ptr [rax]; 
0x0000000000108a0d: lea edx, dword ptr [rip + 0x3f14d]; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000120d42: lea edx, dword ptr [rip + 0x59e68]; mov ecx, eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000e1875: lea edx, dword ptr [rip + 0x98a2d]; movzx ecx, al; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000dfbf0: lea edx, dword ptr [rip + 0x9a69e]; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000008c44d: lea edx, dword ptr [rip + 0xbb71d]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000011ffe8: lea edx, dword ptr [rip + 0xcf02]; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x00000000000915d7: lea edx, dword ptr [rip + 0xd5ca3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000915b2: lea edx, dword ptr [rip + 0xd5cc8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a1af3: lea edx, dword ptr [rip + 0xd6deb]; shr eax, 0xc; and eax, 0xf; movsxd rsi, dword ptr [rdx + rax*4]; add rdx, rsi; jmp rdx; 
0x000000000008eed7: lea edx, dword ptr [rip + 0xd83a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000008eebd: lea edx, dword ptr [rip + 0xd83bd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000010acca: lea edx, dword ptr [rip - 0x110]; test rax, rax; cmovne rdx, rax; mov qword ptr [rip + 0x2b7ae2], rdx; pop rbp; ret; 
0x00000000000cb76d: lea edx, dword ptr [rip - 0x123]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000008b8dd: lea edx, dword ptr [rip - 0x5e3]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000012a9de: lea edx, dword ptr [rip - 0xa984]; mov esi, 3; mov rdi, r15; call qword ptr [rax]; 
0x00000000000745bc: lea edx, dword ptr [rsi + 4]; mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000012ef2f: lea edx, dword ptr [rsi + 7]; and esi, 7; movsxd rcx, dword ptr [rax + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax; 
0x00000000000ebbbc: lea edx, dword ptr [rsp + 0x10]; mov esi, 0x10; mov rdi, r9; mov eax, r8d; syscall; 
0x0000000000129421: lea edx, dword ptr [rsp + 0x10]; mov esi, 6; call qword ptr [rax + 0x28]; 
0x00000000001293eb: lea edx, dword ptr [rsp + 0x10]; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x000000000012949f: lea edx, dword ptr [rsp + 0xc]; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x000000000003d09c: lea edx, dword ptr [rsp + 8]; call 0x3d1f0; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003d0ec: lea edx, dword ptr [rsp + 8]; call 0x3d260; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f0939: lea edx, dword ptr [rsp - 0x38]; mov esi, 0x5401; movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000000f074f: lea edx, dword ptr [rsp - 0x38]; syscall; 
0x00000000000ebaac: lea edx, dword ptr [rsp - 0x68]; mov esi, 0x10; mov rdi, r10; mov eax, r9d; syscall; 
0x0000000000120f7b: lea esi, dword ptr [r12 + 3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x0000000000075b18: lea esi, dword ptr [rax + 0x58]; mov qword ptr [rsp + 8], rdi; mov rax, qword ptr [rax + 0x38]; mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x0000000000121030: lea esi, dword ptr [rax + rdx + 0x28]; call qword ptr [rcx + 0x30]; 
0x00000000000c2776: lea esi, dword ptr [rax - 0x30]; movsxd rsi, esi; nop dword ptr [rax]; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000067c4b: lea esi, dword ptr [rax - 0x76000002]; ret; 
0x000000000012785c: lea esi, dword ptr [rax - 1]; mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000123d31: lea esi, dword ptr [rax - 1]; mov rax, qword ptr [rbx + 0xd0]; mov dword ptr [rbx + 0xa8], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x000000000012604f: lea esi, dword ptr [rbp + 0x18]; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000011f5a9: lea esi, dword ptr [rbp + 0x18]; mov rsi, r14; call qword ptr [rax + 0x10]; 
0x000000000010ad3a: lea esi, dword ptr [rbp - 0x30]; lea rdi, qword ptr [rip - 0x174]; call rax; 
0x00000000000c3d62: lea esi, dword ptr [rbp - 0x360]; mov rdi, r14; call qword ptr [rax + 0x40]; 
0x00000000000fc108: lea esi, dword ptr [rbp - 0x430]; mov rdi, r9; movsxd rdx, edx; mov eax, 0x14; syscall; 
0x00000000000782b0: lea esi, dword ptr [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000194bac: lea esi, dword ptr [rcx - 0x13]; jmp qword ptr [rdx]; 
0x00000000000825e0: lea esi, dword ptr [rcx - 0xa45fff1]; or al, byte ptr [rax]; add al, ch; xchg eax, edx; mov al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000011ec00: lea esi, dword ptr [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x0000000000002eb2: lea esi, dword ptr [rdi]; ret 0x793b; 
0x000000000012a863: lea esi, dword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000006d17a: lea esi, dword ptr [rip + 0x10ac74]; movsxd rcx, dword ptr [rsi + rcx*4]; add rsi, rcx; jmp rsi; 
0x000000000006c811: lea esi, dword ptr [rip + 0x10b479]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x0000000000046335: lea esi, dword ptr [rip + 0x195]; call rax; 
0x000000000006f7ea: lea esi, dword ptr [rip + 0x30]; call rax; 
0x0000000000024588: lea esi, dword ptr [rip + 0xab2]; lea rdi, qword ptr [rip + 0x39b4db]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000243a0: lea esi, dword ptr [rip + 0xc9a]; lea rdi, qword ptr [rip + 0x39b6c3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000a1a61: lea esi, dword ptr [rip + 0xd6e59]; movsxd rax, dword ptr [rsi + rdi*4]; add rsi, rax; jmp rsi; 
0x000000000010ad70: lea esi, dword ptr [rip - 0x116]; lea rdi, qword ptr [rip + 0x2b7a23]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007c08a: lea esi, dword ptr [rip - 0x1780]; call rax; 
0x000000000011ee08: lea esi, dword ptr [rip - 0x1ae]; lea rdi, qword ptr [rip + 0x2a486b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007c48a: lea esi, dword ptr [rip - 0x1b80]; call rax; 
0x000000000008aca0: lea esi, dword ptr [rip - 0x236]; lea rdi, qword ptr [rip + 0x335fb3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d0488: lea esi, dword ptr [rip - 0x24ae]; lea rdi, qword ptr [rip + 0x2f0f2b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007ab72: lea esi, dword ptr [rip - 0x268]; call rax; 
0x000000000006fb46: lea esi, dword ptr [rip - 0x32c]; call rax; 
0x000000000007adda: lea esi, dword ptr [rip - 0x4d0]; call rax; 
0x00000000000f2498: lea esi, dword ptr [rip - 0x6e]; lea rdi, qword ptr [rip + 0x2cf08b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049168: lea esi, dword ptr [rip - 0x6ee]; lea rdi, qword ptr [rip + 0x37777b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012ab88: lea esi, dword ptr [rip - 0x7e]; lea rdi, qword ptr [rip + 0x298ccb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011209d: lea esi, dword ptr [rip - 0x83]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000011bcc8: lea esi, dword ptr [rip - 0x85e]; lea rdi, qword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000047472: lea esi, dword ptr [rsi + 0x128]; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000127035: lea esi, dword ptr [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x000000000012d6f5: lea esi, dword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x00000000000c2bee: lea esi, dword ptr [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000012d73b: lea esi, dword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012ddb5: lea esi, dword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000012dd94: lea esi, dword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000012d0c5: lea esi, dword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000012d0f2: lea esi, dword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x00000000001287c9: lea esi, dword ptr [rsp + 0x18]; mov r15, r14; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000123f29: lea esi, dword ptr [rsp + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000013523c: lea esi, dword ptr [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x00000000000491b8: lea esi, dword ptr [rsp + 0x60]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e8a5e: lea esi, dword ptr [rsp + 0xe0]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000120f7c: lea esi, dword ptr [rsp + 3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x0000000000121aa5: lea esi, dword ptr [rsp + 8]; call qword ptr [rax]; 
0x000000000006e486: lea esi, dword ptr [rsp + 8]; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x0000000000121af5: lea esi, dword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000010aa90: lea esi, dword ptr [rsp - 0x18]; mov eax, 0x83; syscall; 
0x000000000003b8ce: lea esp, dword ptr [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000006cfe8: lea esp, dword ptr [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000012c38f: lea esp, dword ptr [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x000000000019ab5e: lea esp, dword ptr [rsi + rbp*8 - 1]; sbb al, 0xd; out dx, al; adc ch, dh; jmp qword ptr [rdx]; 
0x00000000000b3c85: lea esp, dword ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000161d03: lea r11, qword ptr [rip + 0x247c6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161c89: lea r11, qword ptr [rip + 0x24840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161bfa: lea r11, qword ptr [rip + 0x248cf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001619ef: lea r11, qword ptr [rip + 0x24ada]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001618bd: lea r11, qword ptr [rip + 0x24c0c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001617f7: lea r11, qword ptr [rip + 0x24cd2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161779: lea r11, qword ptr [rip + 0x24d50]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001616e2: lea r11, qword ptr [rip + 0x24de7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001614e6: lea r11, qword ptr [rip + 0x24fe3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001613b5: lea r11, qword ptr [rip + 0x25114]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001612b4: lea r11, qword ptr [rip + 0x25215]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001606d3: lea r11, qword ptr [rip + 0x25cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160659: lea r11, qword ptr [rip + 0x25d30]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001605ca: lea r11, qword ptr [rip + 0x25dbf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001603bf: lea r11, qword ptr [rip + 0x25fca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016028d: lea r11, qword ptr [rip + 0x260fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001601c7: lea r11, qword ptr [rip + 0x261c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160149: lea r11, qword ptr [rip + 0x26240]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001600b2: lea r11, qword ptr [rip + 0x262d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015feb6: lea r11, qword ptr [rip + 0x264d3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fd85: lea r11, qword ptr [rip + 0x26604]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fc76: lea r11, qword ptr [rip + 0x26713]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000151881: lea r11, qword ptr [rip + 0x35cc8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151523: lea r11, qword ptr [rip + 0x36026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001516ce: lea r11, qword ptr [rip + 0x360bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001513a3: lea r11, qword ptr [rip + 0x361a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151466: lea r11, qword ptr [rip + 0x36323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151223: lea r11, qword ptr [rip + 0x36326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001512e6: lea r11, qword ptr [rip + 0x364a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001510a3: lea r11, qword ptr [rip + 0x364a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151166: lea r11, qword ptr [rip + 0x36623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150f23: lea r11, qword ptr [rip + 0x36626]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150fe7: lea r11, qword ptr [rip + 0x367a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150da3: lea r11, qword ptr [rip + 0x367a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150e66: lea r11, qword ptr [rip + 0x36923]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150c23: lea r11, qword ptr [rip + 0x36926]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150ce6: lea r11, qword ptr [rip + 0x36aa3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150aa3: lea r11, qword ptr [rip + 0x36aa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150b66: lea r11, qword ptr [rip + 0x36c23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150923: lea r11, qword ptr [rip + 0x36c26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001509e6: lea r11, qword ptr [rip + 0x36da3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001507a3: lea r11, qword ptr [rip + 0x36da6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150866: lea r11, qword ptr [rip + 0x36f23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150623: lea r11, qword ptr [rip + 0x36f26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001506e6: lea r11, qword ptr [rip + 0x370a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001504a3: lea r11, qword ptr [rip + 0x370a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150566: lea r11, qword ptr [rip + 0x37223]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150323: lea r11, qword ptr [rip + 0x37226]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001503e6: lea r11, qword ptr [rip + 0x373a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001501a3: lea r11, qword ptr [rip + 0x373a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150266: lea r11, qword ptr [rip + 0x37523]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150023: lea r11, qword ptr [rip + 0x37526]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014feaa: lea r11, qword ptr [rip + 0x3769f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001500e6: lea r11, qword ptr [rip + 0x376a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ff66: lea r11, qword ptr [rip + 0x37823]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fcab: lea r11, qword ptr [rip + 0x3789e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fe29: lea r11, qword ptr [rip + 0x37960]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fccd: lea r11, qword ptr [rip + 0x37abc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ed6d: lea r11, qword ptr [rip + 0x382dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ea43: lea r11, qword ptr [rip + 0x38606]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ebda: lea r11, qword ptr [rip + 0x386af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e8c3: lea r11, qword ptr [rip + 0x38786]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e986: lea r11, qword ptr [rip + 0x38903]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e743: lea r11, qword ptr [rip + 0x38906]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e806: lea r11, qword ptr [rip + 0x38a83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e5c3: lea r11, qword ptr [rip + 0x38a86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e686: lea r11, qword ptr [rip + 0x38c03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e443: lea r11, qword ptr [rip + 0x38c06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e507: lea r11, qword ptr [rip + 0x38d82]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e2c3: lea r11, qword ptr [rip + 0x38d86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e386: lea r11, qword ptr [rip + 0x38f03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e143: lea r11, qword ptr [rip + 0x38f06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e206: lea r11, qword ptr [rip + 0x39083]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dfc3: lea r11, qword ptr [rip + 0x39086]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e086: lea r11, qword ptr [rip + 0x39203]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014de43: lea r11, qword ptr [rip + 0x39206]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014df06: lea r11, qword ptr [rip + 0x39383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dcc3: lea r11, qword ptr [rip + 0x39386]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dd86: lea r11, qword ptr [rip + 0x39503]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014db43: lea r11, qword ptr [rip + 0x39506]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dc06: lea r11, qword ptr [rip + 0x39683]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d9c3: lea r11, qword ptr [rip + 0x39686]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014da86: lea r11, qword ptr [rip + 0x39803]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d843: lea r11, qword ptr [rip + 0x39806]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d906: lea r11, qword ptr [rip + 0x39983]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d6c3: lea r11, qword ptr [rip + 0x39986]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d786: lea r11, qword ptr [rip + 0x39b03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d543: lea r11, qword ptr [rip + 0x39b06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d3ca: lea r11, qword ptr [rip + 0x39c7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d606: lea r11, qword ptr [rip + 0x39c83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d486: lea r11, qword ptr [rip + 0x39e03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1ed: lea r11, qword ptr [rip + 0x39e5c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d349: lea r11, qword ptr [rip + 0x39f40]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1da: lea r11, qword ptr [rip + 0x3a0af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c29d: lea r11, qword ptr [rip + 0x3a8ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bf73: lea r11, qword ptr [rip + 0x3abd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c10a: lea r11, qword ptr [rip + 0x3ac7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bdf3: lea r11, qword ptr [rip + 0x3ad56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014beb6: lea r11, qword ptr [rip + 0x3aed3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bc73: lea r11, qword ptr [rip + 0x3aed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bd36: lea r11, qword ptr [rip + 0x3b053]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014baf3: lea r11, qword ptr [rip + 0x3b056]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bbb6: lea r11, qword ptr [rip + 0x3b1d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b973: lea r11, qword ptr [rip + 0x3b1d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ba37: lea r11, qword ptr [rip + 0x3b352]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b7f3: lea r11, qword ptr [rip + 0x3b356]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b8b6: lea r11, qword ptr [rip + 0x3b4d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b673: lea r11, qword ptr [rip + 0x3b4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b736: lea r11, qword ptr [rip + 0x3b653]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b4f3: lea r11, qword ptr [rip + 0x3b656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b5b6: lea r11, qword ptr [rip + 0x3b7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b373: lea r11, qword ptr [rip + 0x3b7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b436: lea r11, qword ptr [rip + 0x3b953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b1f3: lea r11, qword ptr [rip + 0x3b956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b2b6: lea r11, qword ptr [rip + 0x3bad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b073: lea r11, qword ptr [rip + 0x3bad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b136: lea r11, qword ptr [rip + 0x3bc53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aef3: lea r11, qword ptr [rip + 0x3bc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014afb6: lea r11, qword ptr [rip + 0x3bdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ad73: lea r11, qword ptr [rip + 0x3bdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ae36: lea r11, qword ptr [rip + 0x3bf53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014abf3: lea r11, qword ptr [rip + 0x3bf56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014acb6: lea r11, qword ptr [rip + 0x3c0d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aa73: lea r11, qword ptr [rip + 0x3c0d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a8fa: lea r11, qword ptr [rip + 0x3c24f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ab36: lea r11, qword ptr [rip + 0x3c253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a6c4: lea r11, qword ptr [rip + 0x3c2c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a607: lea r11, qword ptr [rip + 0x3c382]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a9b6: lea r11, qword ptr [rip + 0x3c3d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a71a: lea r11, qword ptr [rip + 0x3c42f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a51c: lea r11, qword ptr [rip + 0x3c46d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a879: lea r11, qword ptr [rip + 0x3c510]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a451: lea r11, qword ptr [rip + 0x3c538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a707: lea r11, qword ptr [rip + 0x3c682]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149430: lea r11, qword ptr [rip + 0x3d559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149392: lea r11, qword ptr [rip + 0x3d5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001492e0: lea r11, qword ptr [rip + 0x3d6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149242: lea r11, qword ptr [rip + 0x3d747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149190: lea r11, qword ptr [rip + 0x3d7f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001490f2: lea r11, qword ptr [rip + 0x3d897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149040: lea r11, qword ptr [rip + 0x3d949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148fa2: lea r11, qword ptr [rip + 0x3d9e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148ef0: lea r11, qword ptr [rip + 0x3da99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148e52: lea r11, qword ptr [rip + 0x3db37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148da0: lea r11, qword ptr [rip + 0x3dbe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148d02: lea r11, qword ptr [rip + 0x3dc87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148c50: lea r11, qword ptr [rip + 0x3dd39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148bb2: lea r11, qword ptr [rip + 0x3ddd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148b00: lea r11, qword ptr [rip + 0x3de89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148a67: lea r11, qword ptr [rip + 0x3df22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001489b0: lea r11, qword ptr [rip + 0x3dfd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148912: lea r11, qword ptr [rip + 0x3e077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148860: lea r11, qword ptr [rip + 0x3e129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001487c2: lea r11, qword ptr [rip + 0x3e1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148710: lea r11, qword ptr [rip + 0x3e279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148672: lea r11, qword ptr [rip + 0x3e317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001485c0: lea r11, qword ptr [rip + 0x3e3c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148522: lea r11, qword ptr [rip + 0x3e467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148470: lea r11, qword ptr [rip + 0x3e519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001483d2: lea r11, qword ptr [rip + 0x3e5b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148320: lea r11, qword ptr [rip + 0x3e669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148282: lea r11, qword ptr [rip + 0x3e707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001481d0: lea r11, qword ptr [rip + 0x3e7b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148132: lea r11, qword ptr [rip + 0x3e857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148086: lea r11, qword ptr [rip + 0x3e903]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147f95: lea r11, qword ptr [rip + 0x3e9f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147ed6: lea r11, qword ptr [rip + 0x3eab3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147e6c: lea r11, qword ptr [rip + 0x3eb1d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147d7d: lea r11, qword ptr [rip + 0x3ec0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147b43: lea r11, qword ptr [rip + 0x3ec86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147cb8: lea r11, qword ptr [rip + 0x3ecd1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147a69: lea r11, qword ptr [rip + 0x3ed60]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146a60: lea r11, qword ptr [rip + 0x3fd69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001469c2: lea r11, qword ptr [rip + 0x3fe07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146910: lea r11, qword ptr [rip + 0x3feb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146872: lea r11, qword ptr [rip + 0x3ff57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001467c0: lea r11, qword ptr [rip + 0x40009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146722: lea r11, qword ptr [rip + 0x400a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146670: lea r11, qword ptr [rip + 0x40159]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001465d2: lea r11, qword ptr [rip + 0x401f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146520: lea r11, qword ptr [rip + 0x402a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146482: lea r11, qword ptr [rip + 0x40347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001463d0: lea r11, qword ptr [rip + 0x403f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146332: lea r11, qword ptr [rip + 0x40497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146280: lea r11, qword ptr [rip + 0x40549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001461e2: lea r11, qword ptr [rip + 0x405e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146130: lea r11, qword ptr [rip + 0x40699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146097: lea r11, qword ptr [rip + 0x40732]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145fe0: lea r11, qword ptr [rip + 0x407e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145f42: lea r11, qword ptr [rip + 0x40887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145e90: lea r11, qword ptr [rip + 0x40939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145df2: lea r11, qword ptr [rip + 0x409d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145d40: lea r11, qword ptr [rip + 0x40a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145ca2: lea r11, qword ptr [rip + 0x40b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145bf0: lea r11, qword ptr [rip + 0x40bd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145b52: lea r11, qword ptr [rip + 0x40c77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145aa0: lea r11, qword ptr [rip + 0x40d29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a02: lea r11, qword ptr [rip + 0x40dc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145950: lea r11, qword ptr [rip + 0x40e79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001458b2: lea r11, qword ptr [rip + 0x40f17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145800: lea r11, qword ptr [rip + 0x40fc9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145762: lea r11, qword ptr [rip + 0x41067]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001456b6: lea r11, qword ptr [rip + 0x41113]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001455c5: lea r11, qword ptr [rip + 0x41204]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145506: lea r11, qword ptr [rip + 0x412c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014549c: lea r11, qword ptr [rip + 0x4132d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001453ad: lea r11, qword ptr [rip + 0x4141c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145173: lea r11, qword ptr [rip + 0x41496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001452e8: lea r11, qword ptr [rip + 0x414e1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145099: lea r11, qword ptr [rip + 0x41570]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000144090: lea r11, qword ptr [rip + 0x42579]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ff2: lea r11, qword ptr [rip + 0x42617]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143f40: lea r11, qword ptr [rip + 0x426c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ea2: lea r11, qword ptr [rip + 0x42767]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143df0: lea r11, qword ptr [rip + 0x42819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143d52: lea r11, qword ptr [rip + 0x428b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ca0: lea r11, qword ptr [rip + 0x42969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c02: lea r11, qword ptr [rip + 0x42a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143b50: lea r11, qword ptr [rip + 0x42ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ab2: lea r11, qword ptr [rip + 0x42b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143a00: lea r11, qword ptr [rip + 0x42c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143962: lea r11, qword ptr [rip + 0x42ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001438b0: lea r11, qword ptr [rip + 0x42d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143812: lea r11, qword ptr [rip + 0x42df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143760: lea r11, qword ptr [rip + 0x42ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001436c7: lea r11, qword ptr [rip + 0x42f42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143610: lea r11, qword ptr [rip + 0x42ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143572: lea r11, qword ptr [rip + 0x43097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001434c0: lea r11, qword ptr [rip + 0x43149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143422: lea r11, qword ptr [rip + 0x431e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143370: lea r11, qword ptr [rip + 0x43299]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001432d2: lea r11, qword ptr [rip + 0x43337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143220: lea r11, qword ptr [rip + 0x433e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143182: lea r11, qword ptr [rip + 0x43487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001430d0: lea r11, qword ptr [rip + 0x43539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143032: lea r11, qword ptr [rip + 0x435d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142f80: lea r11, qword ptr [rip + 0x43689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ee2: lea r11, qword ptr [rip + 0x43727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142e30: lea r11, qword ptr [rip + 0x437d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142d92: lea r11, qword ptr [rip + 0x43877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ce6: lea r11, qword ptr [rip + 0x43923]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142bf5: lea r11, qword ptr [rip + 0x43a14]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142b36: lea r11, qword ptr [rip + 0x43ad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142acc: lea r11, qword ptr [rip + 0x43b3d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001429dd: lea r11, qword ptr [rip + 0x43c2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142918: lea r11, qword ptr [rip + 0x43cf1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000a10f9: lea r11, qword ptr [rip + 0xd7714]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0975: lea r11, qword ptr [rip + 0xd7e98]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a094c: lea r11, qword ptr [rip + 0xd7ec1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a092c: lea r11, qword ptr [rip + 0xd7ee1]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0903: lea r11, qword ptr [rip + 0xd7f0a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a08de: lea r11, qword ptr [rip + 0xd7f2f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a08c0: lea r11, qword ptr [rip + 0xd7f4d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0840: lea r11, qword ptr [rip + 0xd7f4d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0825: lea r11, qword ptr [rip + 0xd7f68]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a08a3: lea r11, qword ptr [rip + 0xd7f6a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0873: lea r11, qword ptr [rip + 0xd7f9a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a07f0: lea r11, qword ptr [rip + 0xd7f9d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a07c4: lea r11, qword ptr [rip + 0xd7fc9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a07ae: lea r11, qword ptr [rip + 0xd7fdf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a078c: lea r11, qword ptr [rip + 0xd8001]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0767: lea r11, qword ptr [rip + 0xd8026]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a074a: lea r11, qword ptr [rip + 0xd8043]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a06dd: lea r11, qword ptr [rip + 0xd80b0]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fea5: lea r11, qword ptr [rip + 0xd8868]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe70: lea r11, qword ptr [rip + 0xd889d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe44: lea r11, qword ptr [rip + 0xd88c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe2e: lea r11, qword ptr [rip + 0xd88df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe0c: lea r11, qword ptr [rip + 0xd8901]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fde7: lea r11, qword ptr [rip + 0xd8926]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fdca: lea r11, qword ptr [rip + 0xd8943]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fd72: lea r11, qword ptr [rip + 0xd899b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f879: lea r11, qword ptr [rip + 0xd8dc0]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f78e: lea r11, qword ptr [rip + 0xd8f3b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f779: lea r11, qword ptr [rip + 0xd8f50]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f75a: lea r11, qword ptr [rip + 0xd8f6f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009eca5: lea r11, qword ptr [rip + 0xd9994]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec7c: lea r11, qword ptr [rip + 0xd99bd]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec5c: lea r11, qword ptr [rip + 0xd99dd]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec33: lea r11, qword ptr [rip + 0xd9a06]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec0e: lea r11, qword ptr [rip + 0xd9a2b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ebf0: lea r11, qword ptr [rip + 0xd9a49]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009eb70: lea r11, qword ptr [rip + 0xd9a49]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ebd3: lea r11, qword ptr [rip + 0xd9a66]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009eba3: lea r11, qword ptr [rip + 0xd9a96]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea8e: lea r11, qword ptr [rip + 0xd9b2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea60: lea r11, qword ptr [rip + 0xd9b59]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea37: lea r11, qword ptr [rip + 0xd9b82]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e3c5: lea r11, qword ptr [rip + 0xda168]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e390: lea r11, qword ptr [rip + 0xda19d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e364: lea r11, qword ptr [rip + 0xda1c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e34e: lea r11, qword ptr [rip + 0xda1df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e32c: lea r11, qword ptr [rip + 0xda201]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e307: lea r11, qword ptr [rip + 0xda226]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e2ea: lea r11, qword ptr [rip + 0xda243]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e292: lea r11, qword ptr [rip + 0xda29b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e069: lea r11, qword ptr [rip + 0xda3f0]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df7e: lea r11, qword ptr [rip + 0xda56b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df69: lea r11, qword ptr [rip + 0xda580]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df4a: lea r11, qword ptr [rip + 0xda59f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d605: lea r11, qword ptr [rip + 0xdae54]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d5dc: lea r11, qword ptr [rip + 0xdae7d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d5bc: lea r11, qword ptr [rip + 0xdae9d]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d593: lea r11, qword ptr [rip + 0xdaec6]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d56e: lea r11, qword ptr [rip + 0xdaeeb]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d550: lea r11, qword ptr [rip + 0xdaf09]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d4d0: lea r11, qword ptr [rip + 0xdaf09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d533: lea r11, qword ptr [rip + 0xdaf26]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d503: lea r11, qword ptr [rip + 0xdaf56]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3fe: lea r11, qword ptr [rip + 0xdafdb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3d0: lea r11, qword ptr [rip + 0xdb009]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3a7: lea r11, qword ptr [rip + 0xdb032]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cdc5: lea r11, qword ptr [rip + 0xdb594]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd90: lea r11, qword ptr [rip + 0xdb5c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd64: lea r11, qword ptr [rip + 0xdb5f5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd4e: lea r11, qword ptr [rip + 0xdb60b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd2c: lea r11, qword ptr [rip + 0xdb62d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd07: lea r11, qword ptr [rip + 0xdb652]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ccea: lea r11, qword ptr [rip + 0xdb66f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cc92: lea r11, qword ptr [rip + 0xdb6c7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000012c38e: lea r12, qword ptr [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x00000000000fb322: lea r13, qword ptr [r8 + rax]; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x2d; syscall; 
0x000000000007b605: lea r13, qword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x000000000012c162: lea r13, qword ptr [rbx + 0x10]; xor esi, esi; mov dword ptr [rbx + 0x10], 1; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x000000000011f5a8: lea r14, qword ptr [r13 + 0x18]; mov rsi, r14; call qword ptr [rax + 0x10]; 
0x000000000012785b: lea r14d, dword ptr [rax - 1]; mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000123d30: lea r14d, dword ptr [rax - 1]; mov rax, qword ptr [rbx + 0xd0]; mov dword ptr [rbx + 0xa8], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x000000000012a9d6: lea r8, qword ptr [rip + 0x29e3]; lea rdx, qword ptr [rip - 0xa984]; mov esi, 3; mov rdi, r15; call qword ptr [rax]; 
0x00000000000f4ac4: lea r8, qword ptr [rip + 0x2ccc65]; lea rcx, qword ptr [rsp + 8]; call 0xf4c10; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011ffe0: lea r8, qword ptr [rip + 0xd9]; lea rdx, qword ptr [rip + 0xcf02]; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x0000000000039a90: lea r8, qword ptr [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x39230; leave; ret; 
0x00000000000a3f6a: lea r9, qword ptr [rsp + 0x28]; call rbx; 
0x00000000000a3ff8: lea r9, qword ptr [rsp + 0x28]; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a3ba9: lea r9, qword ptr [rsp + 0x28]; mov rsi, r13; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000a449c: lea r9, qword ptr [rsp + 0x38]; mov rcx, r13; mov rdi, rbp; call rbx; 
0x00000000000a3a5d: lea r9, qword ptr [rsp + 0x38]; mov rsi, rbp; mov rdi, qword ptr [r12]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x00000000000f1cbc: lea r9, qword ptr [rsp + 0x40]; movsxd rdi, edi; mov eax, 0x10e; syscall; 
0x00000000000a478c: lea r9, qword ptr [rsp + 0x80]; mov rcx, r13; mov rdi, rbp; call rbx; 
0x00000000000a4191: lea r9, qword ptr [rsp + 0x80]; mov rdx, r13; mov rdi, rbp; call rbx; 
0x00000000000a17cd: lea rax, qword ptr [r9 + 1]; pop r12; ret; 
0x00000000000c2691: lea rax, qword ptr [rax + rax - 1]; ret; 
0x000000000008bde3: lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000008bdf3: lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x0000000000096f93: lea rax, qword ptr [rax + rdi + 0x30]; ret; 
0x000000000008bdc3: lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x00000000000bcb31: lea rax, qword ptr [rax + rdx*8]; add rsp, 0x10; pop rbx; ret; 
0x000000000012164a: lea rax, qword ptr [rbx + 0x2260]; pop rbx; ret; 
0x00000000000c6329: lea rax, qword ptr [rbx + 2]; pop rbx; pop rbp; ret; 
0x00000000000c6229: lea rax, qword ptr [rbx + 8]; pop rbx; pop rbp; ret; 
0x000000000011795f: lea rax, qword ptr [rbx + r13 + 0x10]; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000097a99: lea rax, qword ptr [rbx - 1]; pop rbx; ret; 
0x00000000000a38a0: lea rax, qword ptr [rbx - 4]; pop rbx; ret; 
0x0000000000070b31: lea rax, qword ptr [rcx + 1]; mov qword ptr [rdx + 0x28], rax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x000000000007361d: lea rax, qword ptr [rcx + 1]; mov qword ptr [rsi + 0x28], rax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x00000000000780f9: lea rax, qword ptr [rcx + 4]; mov qword ptr [rdx + 0x20], rax; mov dword ptr [rcx], edi; mov eax, edi; ret; 
0x000000000003cc7f: lea rax, qword ptr [rcx + r8*4]; mov qword ptr [rsi + 0x10], rcx; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000008a89c: lea rax, qword ptr [rcx + rsi]; ret; 
0x00000000000a1433: lea rax, qword ptr [rcx - 1]; ret; 
0x000000000009e55b: lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009e570: lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009e58e: lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009e5ae: lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009e5d1: lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009e5f0: lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009e610: lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009e630: lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009e653: lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009e678: lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009e696: lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009e6b6: lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009e6d2: lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009e6f2: lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009e712: lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009e732: lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009f582: lea rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009f7e8: lea rax, qword ptr [rdi + 0x40]; ret; 
0x000000000009e4ac: lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009e4cc: lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009e4ee: lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009e50e: lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009e52e: lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009e548: lea rax, qword ptr [rdi + 0xf]; ret; 
0x0000000000096933: lea rax, qword ptr [rdi + 1]; ret; 
0x0000000000096947: lea rax, qword ptr [rdi + 2]; ret; 
0x0000000000096952: lea rax, qword ptr [rdi + 3]; ret; 
0x0000000000096966: lea rax, qword ptr [rdi + 4]; ret; 
0x0000000000096976: lea rax, qword ptr [rdi + 5]; ret; 
0x0000000000096986: lea rax, qword ptr [rdi + 6]; mov byte ptr [rdi + 6], 0; ret; 
0x000000000009e45a: lea rax, qword ptr [rdi + 6]; ret; 
0x0000000000096926: lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009e479: lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009e48e: lea rax, qword ptr [rdi + 9]; ret; 
0x000000000008be18: lea rax, qword ptr [rdi + rax + 0x10]; ret; 
0x000000000008be28: lea rax, qword ptr [rdi + rax + 0x20]; ret; 
0x000000000008bd12: lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000086d8b: lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000939f6: lea rax, qword ptr [rdi + rax]; ret; 
0x000000000013cd03: lea rax, qword ptr [rdi + rcx]; sub rax, rdx; ret; 
0x000000000011810f: lea rax, qword ptr [rdi + rsi + 8]; ret; 
0x000000000008a798: lea rax, qword ptr [rdi + rsi]; ret; 
0x00000000000a337d: lea rax, qword ptr [rdi - 0x10]; ret; 
0x00000000000a34e0: lea rax, qword ptr [rdi - 0xc]; ret; 
0x00000000000a3500: lea rax, qword ptr [rdi - 4]; ret; 
0x00000000000a34f0: lea rax, qword ptr [rdi - 8]; ret; 
0x000000000009e3e2: lea rax, qword ptr [rdi]; ret; 
0x000000000015c8fc: lea rax, qword ptr [rdx + 0xa]; ret; 
0x000000000015c91c: lea rax, qword ptr [rdx + 0xb]; ret; 
0x000000000015c93e: lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000015c95e: lea rax, qword ptr [rdx + 0xd]; ret; 
0x000000000015ebc6: lea rax, qword ptr [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c97e: lea rax, qword ptr [rdx + 0xe]; ret; 
0x000000000015c80e: lea rax, qword ptr [rdx + 0xf]; ret; 
0x000000000015c836: lea rax, qword ptr [rdx + 1]; ret; 
0x000000000015c84c: lea rax, qword ptr [rdx + 2]; ret; 
0x000000000015c864: lea rax, qword ptr [rdx + 3]; ret; 
0x000000000015c87a: lea rax, qword ptr [rdx + 4]; ret; 
0x000000000015c88c: lea rax, qword ptr [rdx + 5]; ret; 
0x000000000015c8aa: lea rax, qword ptr [rdx + 6]; ret; 
0x000000000015ec71: lea rax, qword ptr [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c7b6: lea rax, qword ptr [rdx + 7]; ret; 
0x000000000015c8bc: lea rax, qword ptr [rdx + 8]; ret; 
0x000000000015c8dc: lea rax, qword ptr [rdx + 9]; ret; 
0x0000000000117acf: lea rax, qword ptr [rdx + rax + 2]; cmp rcx, rax; sbb eax, eax; ret; 
0x00000000000a1b1b: lea rax, qword ptr [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000002f99f: lea rax, qword ptr [rdx + rsi*4]; mov eax, dword ptr [rdi + rax]; ret; 
0x0000000000083470: lea rax, qword ptr [rdx - 0x10]; add rsp, 8; ret; 
0x000000000015c824: lea rax, qword ptr [rdx]; ret; 
0x0000000000088dc4: lea rax, qword ptr [rip + 0x10f35]; ret; 
0x00000000000647f8: lea rax, qword ptr [rip + 0x113299]; movsxd rdx, dword ptr [rax + r12*4]; add rax, rdx; jmp rax; 
0x0000000000086b44: lea rax, qword ptr [rip + 0x11595]; ret; 
0x000000000005f137: lea rax, qword ptr [rip + 0x118542]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005f31e: lea rax, qword ptr [rip + 0x1185db]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x000000000005f2d4: lea rax, qword ptr [rip + 0x118625]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f21f: lea rax, qword ptr [rip + 0x1186da]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f099: lea rax, qword ptr [rip + 0x1186e0]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f181: lea rax, qword ptr [rip + 0x118778]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005f059: lea rax, qword ptr [rip + 0x1187a0]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; jmp rax; 
0x000000000005ef92: lea rax, qword ptr [rip + 0x118967]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000004ed5c: lea rax, qword ptr [rip + 0x127f1d]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004ecad: lea rax, qword ptr [rip + 0x127f4c]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004ec4c: lea rax, qword ptr [rip + 0x12802d]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004e974: lea rax, qword ptr [rip + 0x128305]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004e832: lea rax, qword ptr [rip + 0x128647]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000004e78f: lea rax, qword ptr [rip + 0x1286ea]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004deb8: lea rax, qword ptr [rip + 0x128e41]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004dd8c: lea rax, qword ptr [rip + 0x128fed]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x000000000004d532: lea rax, qword ptr [rip + 0x129947]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004ba99: lea rax, qword ptr [rip + 0x12b3e0]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000008b8d5: lea rax, qword ptr [rip + 0x15844]; lea rdx, qword ptr [rip - 0x5e3]; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000022030: lea rax, qword ptr [rip + 0x15a154]; ret; 
0x0000000000022040: lea rax, qword ptr [rip + 0x15c12b]; ret; 
0x000000000008be6a: lea rax, qword ptr [rip + 0x1f]; ret; 
0x00000000001336ee: lea rax, qword ptr [rip + 0x2883eb]; mov rdi, rbx; pop rbx; mov qword ptr [rip + 0x28c190], rax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x0000000000133519: lea rax, qword ptr [rip + 0x2904b0]; cmove rdx, rax; add rsp, 8; mov rax, rdx; ret; 
0x000000000011ee28: lea rax, qword ptr [rip + 0x2a4871]; pop rbx; ret; 
0x000000000011edf0: lea rax, qword ptr [rip + 0x2a48a9]; pop rbx; ret; 
0x000000000011ed31: lea rax, qword ptr [rip + 0x2a4968]; pop rbx; ret; 
0x0000000000108527: lea rax, qword ptr [rip + 0x2bbb46]; mov dword ptr [rip + 0x2bbb38], 1; pop rbx; ret; 
0x00000000000f9d0d: lea rax, qword ptr [rip + 0x2c7b2c]; add rsp, 0x18; ret; 
0x00000000000f9caa: lea rax, qword ptr [rip + 0x2c7bcf]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f9756: lea rax, qword ptr [rip + 0x2c8093]; add rsp, 8; ret; 
0x00000000000f96f7: lea rax, qword ptr [rip + 0x2c8112]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f94ff: lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f933f: lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f916c: lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000f34d1: lea rax, qword ptr [rip + 0x2ce068]; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000b0666: lea rax, qword ptr [rip + 0x310733]; add rsp, 0x28; ret; 
0x000000000008aabc: lea rax, qword ptr [rip + 0x3361bd]; mov qword ptr [rip + 0x3361a6], rax; add rsp, 8; ret; 
0x000000000008aa7a: lea rax, qword ptr [rip + 0x3361ff]; mov qword ptr [rip + 0x3361e8], rax; ret; 
0x000000000005d512: lea rax, qword ptr [rip + 0x363417]; pop rbx; pop rbp; ret; 
0x000000000003d120: lea rax, qword ptr [rip + 0x386c6f]; add rsp, 8; ret; 
0x000000000002ef81: lea rax, qword ptr [rip + 0x390c98]; mov byte ptr [rip + 0x390cef], dl; ret; 
0x00000000000225f6: lea rax, qword ptr [rip + 0x3a1603]; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x000000000002246a: lea rax, qword ptr [rip + 0x3a178f]; ret; 
0x00000000001089c4: lea rax, qword ptr [rip + 0x41d15]; ret; 
0x0000000000108a64: lea rax, qword ptr [rip + 0x44745]; ret; 
0x0000000000108a05: lea rax, qword ptr [rip + 0x47274]; lea rdx, qword ptr [rip + 0x3f14d]; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000127efd: lea rax, qword ptr [rip + 0x541c0]; mov esi, esi; movsxd rcx, dword ptr [rax + rsi*4]; add rax, rcx; jmp rax; 
0x000000000012769d: lea rax, qword ptr [rip + 0x549e0]; mov esi, esi; movsxd rsi, dword ptr [rax + rsi*4]; add rax, rsi; jmp rax; 
0x0000000000123ad0: lea rax, qword ptr [rip + 0x570f1]; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x0000000000091641: lea rax, qword ptr [rip + 0x6878]; ret; 
0x000000000008cc40: lea rax, qword ptr [rip + 0x79]; ret; 
0x00000000000e7272: lea rax, qword ptr [rip + 0x932db]; movsxd rdx, dword ptr [rax + r11*4]; add rax, rdx; jmp rax; 
0x00000000000dc8f2: lea rax, qword ptr [rip + 0x9d8f3]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000d43a3: lea rax, qword ptr [rip + 0xa5b16]; movzx r13d, r13b; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x0000000000091655: lea rax, qword ptr [rip + 0xb1174]; ret; 
0x000000000008ad51: lea rax, qword ptr [rip + 0xb1f68]; ret; 
0x000000000008a9c1: lea rax, qword ptr [rip + 0xb21d8]; ret; 
0x0000000000088531: lea rax, qword ptr [rip + 0xb4528]; ret; 
0x00000000000c3281: lea rax, qword ptr [rip + 0xb6510]; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000c2bbc: lea rax, qword ptr [rip + 0xb67f9]; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000c2862: lea rax, qword ptr [rip + 0xb6aff]; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000a2c12: lea rax, qword ptr [rip + 0xbc9c7]; ret; 
0x00000000000a37ce: lea rax, qword ptr [rip + 0xbdacb]; ret; 
0x00000000000a37d6: lea rax, qword ptr [rip + 0xc0383]; ret; 
0x000000000008c5e4: lea rax, qword ptr [rip + 0xc0bd5]; ret; 
0x00000000000b5fc6: lea rax, qword ptr [rip + 0xc2efb]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x000000000008c445: lea rax, qword ptr [rip + 0xc3844]; lea rdx, qword ptr [rip + 0xbb71d]; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000b5301: lea rax, qword ptr [rip + 0xc3ae4]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000a37ba: lea rax, qword ptr [rip + 0xc84f]; ret; 
0x000000000008a6a4: lea rax, qword ptr [rip + 0xcdf55]; ret; 
0x000000000008cad4: lea rax, qword ptr [rip + 0xce6a5]; ret; 
0x0000000000088424: lea rax, qword ptr [rip + 0xcea25]; ret; 
0x000000000008cbf4: lea rax, qword ptr [rip + 0xcfd95]; ret; 
0x000000000008be7e: lea rax, qword ptr [rip + 0xd3ddb]; ret; 
0x00000000000a2c0a: lea rax, qword ptr [rip + 0xd48f]; ret; 
0x000000000008be86: lea rax, qword ptr [rip + 0xd6563]; ret; 
0x0000000000086d31: lea rax, qword ptr [rip + 0xdb398]; ret; 
0x00000000000968f6: lea rax, qword ptr [rip + 0xe193b]; mov r9d, r9d; movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x0000000000096856: lea rax, qword ptr [rip + 0xe19b7]; mov r9d, r9d; movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x0000000000091d50: lea rax, qword ptr [rip + 0xe6479]; mov r8, rdx; and r8d, 7; movsxd r8, dword ptr [rax + r8*4]; add rax, r8; jmp rax; 
0x0000000000091ae0: lea rax, qword ptr [rip + 0xe66c9]; mov rcx, rdx; and ecx, 7; movsxd rcx, dword ptr [rax + rcx*4]; add rax, rcx; jmp rax; 
0x000000000008356e: lea rax, qword ptr [rip + 0xf4aab]; movsxd rdx, dword ptr [rax + rdi*4]; add rax, rdx; jmp rax; 
0x0000000000086f94: lea rax, qword ptr [rip + 5]; ret; 
0x000000000008cca3: lea rax, qword ptr [rip + 6]; ret; 
0x0000000000088e10: lea rax, qword ptr [rip + 9]; ret; 
0x00000000000cb765: lea rax, qword ptr [rip - 0x4c]; lea rdx, qword ptr [rip - 0x123]; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000092b8a: lea rax, qword ptr [rip - 0x511]; ret; 
0x0000000000092ba1: lea rax, qword ptr [rip - 0x528]; add rsp, 8; ret; 
0x00000000000b0710: lea rax, qword ptr [rsi + rdx]; add rsp, 0x18; ret; 
0x000000000012e756: lea rax, qword ptr [rsp + 0x30]; mov qword ptr [rsp + 8], rax; xor eax, eax; call rdx; 
0x00000000000a34b9: lea rax, qword ptr es:[rdi - 0x10]; ret; 
0x0000000000049b50: lea rbx, qword ptr [rax + rbx + 1]; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000034ed2: lea rbx, qword ptr [rip + 0x13dadf]; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x00000000000f7ef8: lea rbx, qword ptr [rip + 0x865af]; mov rax, rbx; pop rbx; ret; 
0x000000000009cc9d: lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a3a69: lea rcx, qword ptr [rax + 1]; call rbx; 
0x00000000000a3bb1: lea rcx, qword ptr [rax + 4]; call rbx; 
0x0000000000074451: lea rcx, qword ptr [rax + 4]; mov qword ptr [rdx], rcx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x000000000005eed9: lea rcx, qword ptr [rbp - 0x1000]; mov qword ptr [rbp - 0x11a0], rcx; jmp rax; 
0x000000000005eecb: lea rcx, qword ptr [rbp - 0x1090]; mov qword ptr [rbp - 0x1198], rcx; lea rcx, qword ptr [rbp - 0x1000]; mov qword ptr [rbp - 0x11a0], rcx; jmp rax; 
0x000000000004a001: lea rcx, qword ptr [rbp - 0x480]; mov qword ptr [rbp - 0x5b0], rcx; jmp rax; 
0x0000000000049ff3: lea rcx, qword ptr [rbp - 0x4d0]; mov qword ptr [rbp - 0x598], rcx; lea rcx, qword ptr [rbp - 0x480]; mov qword ptr [rbp - 0x5b0], rcx; jmp rax; 
0x00000000000ed639: lea rcx, qword ptr [rbx + 0x28]; mov rdi, qword ptr [rbx + 0x18]; mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x000000000006cdeb: lea rcx, qword ptr [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000008bace: lea rcx, qword ptr [rdx + 1]; cmovne rdx, rcx; mov qword ptr [r9], rdx; add rsp, 0x100; ret; 
0x000000000008b9cf: lea rcx, qword ptr [rdx + 1]; cmovne rdx, rcx; mov qword ptr [rip + 0x335316], rdx; add rsp, 0x100; ret; 
0x0000000000074660: lea rcx, qword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x00000000000776d5: lea rcx, qword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000137266: lea rcx, qword ptr [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000008345b: lea rcx, qword ptr [rdx - 8]; cmovne rax, rcx; add rsp, 8; ret; 
0x000000000006d28c: lea rcx, qword ptr [rip + 0x10ac1d]; movsxd rdx, dword ptr [rcx + rdx*4]; add rcx, rdx; jmp rcx; 
0x0000000000064659: lea rcx, qword ptr [rip + 0x11337c]; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000054a4b: lea rcx, qword ptr [rip + 0x122522]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x000000000013fd8d: lea rcx, qword ptr [rip + 0x274ec]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013e6ac: lea rcx, qword ptr [rip + 0x28bcd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013e3e8: lea rcx, qword ptr [rip + 0x28e91]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013cfd3: lea rcx, qword ptr [rip + 0x2a2a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013c9ed: lea rcx, qword ptr [rip + 0x2a88c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013ad5c: lea rcx, qword ptr [rip + 0x2c51d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013aa28: lea rcx, qword ptr [rip + 0x2c851]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000139153: lea rcx, qword ptr [rip + 0x2e126]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000d4454: lea rcx, qword ptr [rip + 0xa5c35]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x00000000000a1b32: lea rcx, qword ptr [rip + 0xd6deb]; shr eax, 0xc; and eax, 0xf; movsxd rsi, dword ptr [rcx + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000fbbf0: lea rcx, qword ptr [rsi + rax]; xor eax, eax; cmp rdx, rcx; cmovae rax, rsi; ret; 
0x0000000000039ace: lea rcx, qword ptr [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x39700; leave; ret; 
0x00000000000f4acb: lea rcx, qword ptr [rsp + 8]; call 0xf4c10; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000030da0: lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000021fdb: lea rdi, qword ptr [r14 + rdx]; call rax; 
0x0000000000135935: lea rdi, qword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x000000000012463d: lea rdi, qword ptr [rbp + 0x10]; call rax; 
0x000000000005ed1f: lea rdi, qword ptr [rbp - 0x1020]; mov rdx, r14; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fb5: lea rdi, qword ptr [rbp - 0x170]; mov rdx, r15; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x0000000000054d96: lea rdi, qword ptr [rbp - 0x170]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049e77: lea rdi, qword ptr [rbp - 0x440]; mov rdx, rbx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x0000000000065a93: lea rdi, qword ptr [rbp - 0xf0]; mov rdx, r14; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x0000000000064e2c: lea rdi, qword ptr [rbp - 0xf0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000128091: lea rdi, qword ptr [rbx + 0x58]; call rax; 
0x0000000000127661: lea rdi, qword ptr [rbx + 0x68]; call rax; 
0x0000000000123a84: lea rdi, qword ptr [rbx + 0xc8]; call rax; 
0x0000000000097b90: lea rdi, qword ptr [rcx + 1]; xor esi, esi; call 0x8c4b0; mov rax, rbx; pop rbx; ret; 
0x000000000014a6bc: lea rdi, qword ptr [rdi - 0x40]; sub rdx, 0x40; lea r11, qword ptr [rip + 0x3c2c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000034c69: lea rdi, qword ptr [rip + 0x13dd10]; movsxd rdx, dword ptr [rdi + rsi*4]; add rdx, rdi; jmp rdx; 
0x000000000012ab8e: lea rdi, qword ptr [rip + 0x298ccb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ee0e: lea rdi, qword ptr [rip + 0x2a486b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011bcce: lea rdi, qword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001120b0: lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x00000000001117e5: lea rdi, qword ptr [rip + 0x2b1734]; call rax; 
0x000000000010ad76: lea rdi, qword ptr [rip + 0x2b7a23]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f249e: lea rdi, qword ptr [rip + 0x2cf08b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d048e: lea rdi, qword ptr [rip + 0x2f0f2b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc80f: lea rdi, qword ptr [rip + 0x3032ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc7ef: lea rdi, qword ptr [rip + 0x30330a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000bc710: lea rdi, qword ptr [rip + 0x3033e9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc6ee: lea rdi, qword ptr [rip + 0x30340b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc507: lea rdi, qword ptr [rip + 0x3035f2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc4dc: lea rdi, qword ptr [rip + 0x30361d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc38f: lea rdi, qword ptr [rip + 0x30376a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc32a: lea rdi, qword ptr [rip + 0x3037cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aefff: lea rdi, qword ptr [rip + 0x310afa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aef48: lea rdi, qword ptr [rip + 0x310bb1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008aca6: lea rdi, qword ptr [rip + 0x335fb3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008aaa2: lea rdi, qword ptr [rip + 0x336247]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000004916e: lea rdi, qword ptr [rip + 0x37777b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340ef: lea rdi, qword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340c7: lea rdi, qword ptr [rip + 0x38bbb2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000321ab: lea rdi, qword ptr [rip + 0x38dbae]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032134: lea rdi, qword ptr [rip + 0x38dc25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003204f: lea rdi, qword ptr [rip + 0x38dd0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032027: lea rdi, qword ptr [rip + 0x38dd32]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e3a: lea rdi, qword ptr [rip + 0x38debf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e0d: lea rdi, qword ptr [rip + 0x38deec]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000031b69: lea rdi, qword ptr [rip + 0x38df90]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aa8: lea rdi, qword ptr [rip + 0x38e051]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031b96: lea rdi, qword ptr [rip + 0x38e0e3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031ad3: lea rdi, qword ptr [rip + 0x38e1a6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031af5: lea rdi, qword ptr [rip + 0x38e204]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318cd: lea rdi, qword ptr [rip + 0x38e22c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a86: lea rdi, qword ptr [rip + 0x38e273]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318f4: lea rdi, qword ptr [rip + 0x38e385]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000305e7: lea rdi, qword ptr [rip + 0x38f692]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000304ff: lea rdi, qword ptr [rip + 0x38f77a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003039f: lea rdi, qword ptr [rip + 0x38f8da]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030377: lea rdi, qword ptr [rip + 0x38f902]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f897: lea rdi, qword ptr [rip + 0x390262]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f877: lea rdi, qword ptr [rip + 0x390282]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7d7: lea rdi, qword ptr [rip + 0x390322]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7ac: lea rdi, qword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f5d0: lea rdi, qword ptr [rip + 0x390529]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f57e: lea rdi, qword ptr [rip + 0x39057b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f46c: lea rdi, qword ptr [rip + 0x39068d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d754: lea rdi, qword ptr [rip + 0x3923a5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d732: lea rdi, qword ptr [rip + 0x3923c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d50f: lea rdi, qword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d4e7: lea rdi, qword ptr [rip + 0x392612]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d49b: lea rdi, qword ptr [rip + 0x39265e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d287: lea rdi, qword ptr [rip + 0x392872]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d117: lea rdi, qword ptr [rip + 0x3929e2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002458e: lea rdi, qword ptr [rip + 0x39b4db]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000243a6: lea rdi, qword ptr [rip + 0x39b6c3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012708d: lea rdi, qword ptr [rip + 0x54c0c]; movsxd rax, dword ptr [rdi + rax*4]; add rdi, rax; jmp rdi; 
0x00000000000c7c0d: lea rdi, qword ptr [rip + 0xb1cc8]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000c644c: lea rdi, qword ptr [rip + 0xb3399]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000ba13b: lea rdi, qword ptr [rip + 0xbf03a]; mov eax, esi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000b8278: lea rdi, qword ptr [rip + 0xc0d11]; movzx edx, sil; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000b4c61: lea rdi, qword ptr [rip + 0xc402c]; movzx edx, dl; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000b13f9: lea rdi, qword ptr [rip + 0xce8e0]; mov edx, 0x1f; call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000833a3: lea rdi, qword ptr [rip + 0xfefae]; mov edx, 0xc97; call 0x7d680; mov rsi, qword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x000000000010ad3d: lea rdi, qword ptr [rip - 0x174]; call rax; 
0x0000000000046322: lea rdi, qword ptr [rsp + 0x10]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006fb31: lea rdi, qword ptr [rsp + 0x20]; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x0000000000142923: lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000003cd23: lea rdx, qword ptr [r8 + 4]; xor eax, eax; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000007c58a: lea rdx, qword ptr [rax + 0x60]; nop; mov rcx, qword ptr [rdi]; mov qword ptr [rdx], rcx; ret; 
0x000000000007364a: lea rdx, qword ptr [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000009454e: lea rdx, qword ptr [rax + 1]; test rax, rax; cmove rdx, rbx; mov rax, rdx; pop rbx; ret; 
0x000000000007bd9e: lea rdx, qword ptr [rax - 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000006cde7: lea rdx, qword ptr [rbx + 0x34]; lea rcx, qword ptr [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000096c90: lea rdx, qword ptr [rcx + 1]; mov byte ptr [rcx], 0; mov qword ptr [rdi], rdx; ret; 
0x00000000000bcb2d: lea rdx, qword ptr [rdi + rdi*8]; lea rax, qword ptr [rax + rdx*8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000149427: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001492d7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149037: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148d97: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dbe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148c47: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dd39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148af7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3de89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001489a7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dfd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148857: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148707: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001485b7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e3c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148467: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148317: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001481c7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e7b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146a57: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3fd69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146907: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3feb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001467b7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146667: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40159]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146517: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x402a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001463c7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x403f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146277: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146127: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145fd7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x407e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145e87: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145d37: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145be7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40bd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a97: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40d29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145947: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40e79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001457f7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40fc9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000144087: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42579]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143f37: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x426c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143de7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c97: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143b47: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001439f7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001438a7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143757: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143607: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001434b7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143367: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43299]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143217: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x433e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001430c7: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142f77: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142e27: lea rdx, qword ptr [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x437d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000fd5b6: lea rdx, qword ptr [rdx + rcx*4]; add eax, dword ptr [rsi + rdx]; ret; 
0x0000000000156e36: lea rdx, qword ptr [rip + 0x10443]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000156e11: lea rdx, qword ptr [rip + 0x10468]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000005e539: lea rdx, qword ptr [rip + 0x118c40]; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x00000000001548d6: lea rdx, qword ptr [rip + 0x129a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001548bc: lea rdx, qword ptr [rip + 0x129bd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000030789: lea rdx, qword ptr [rip + 0x1421b0]; movsxd rax, dword ptr [rdx + r12*4]; add rdx, rax; jmp rdx; 
0x0000000000022b63: lea rdx, qword ptr [rip + 0x1432b6]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000013fde6: lea rdx, qword ptr [rip + 0x27493]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013fdc1: lea rdx, qword ptr [rip + 0x274b8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013359e: lea rdx, qword ptr [rip + 0x28853b]; mov qword ptr [rip + 0x28c2e4], rdx; add rsp, 8; ret; 
0x000000000013e436: lea rdx, qword ptr [rip + 0x28e43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013e41c: lea rdx, qword ptr [rip + 0x28e5d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000135169: lea rdx, qword ptr [rip + 0x28ea30]; mov eax, 0; cmove rax, rdx; add rsp, 8; ret; 
0x000000000012ab17: lea rdx, qword ptr [rip + 0x298d62]; mov qword ptr fs:[rax], rdx; ret; 
0x00000000001211d0: lea rdx, qword ptr [rip + 0x29c9a9]; mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x000000000013ca46: lea rdx, qword ptr [rip + 0x2a833]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013ca21: lea rdx, qword ptr [rip + 0x2a858]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000010bd8d: lea rdx, qword ptr [rip + 0x2b8014]; call 0xa3ea0; add rsp, 8; ret; 
0x000000000013aa76: lea rdx, qword ptr [rip + 0x2c803]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013aa5c: lea rdx, qword ptr [rip + 0x2c81d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000488d6: lea rdx, qword ptr [rip + 0x37b4cb]; call 0xa3ea0; pop rbx; ret; 
0x000000000011fcd1: lea rdx, qword ptr [rip + 0x388]; mov qword ptr [rsp + 8], rdi; mov esi, 1; mov rdi, r15; call qword ptr [rax]; 
0x0000000000108a0c: lea rdx, qword ptr [rip + 0x3f14d]; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000120d41: lea rdx, qword ptr [rip + 0x59e68]; mov ecx, eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000e1874: lea rdx, qword ptr [rip + 0x98a2d]; movzx ecx, al; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000dfbef: lea rdx, qword ptr [rip + 0x9a69e]; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000008c44c: lea rdx, qword ptr [rip + 0xbb71d]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000011ffe7: lea rdx, qword ptr [rip + 0xcf02]; mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x00000000000915d6: lea rdx, qword ptr [rip + 0xd5ca3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000915b1: lea rdx, qword ptr [rip + 0xd5cc8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000a1af2: lea rdx, qword ptr [rip + 0xd6deb]; shr eax, 0xc; and eax, 0xf; movsxd rsi, dword ptr [rdx + rax*4]; add rdx, rsi; jmp rdx; 
0x000000000008eed6: lea rdx, qword ptr [rip + 0xd83a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000008eebc: lea rdx, qword ptr [rip + 0xd83bd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000010acc9: lea rdx, qword ptr [rip - 0x110]; test rax, rax; cmovne rdx, rax; mov qword ptr [rip + 0x2b7ae2], rdx; pop rbp; ret; 
0x00000000000cb76c: lea rdx, qword ptr [rip - 0x123]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000008b8dc: lea rdx, qword ptr [rip - 0x5e3]; cmove rax, rdx; add rsp, 8; ret; 
0x000000000012a9dd: lea rdx, qword ptr [rip - 0xa984]; mov esi, 3; mov rdi, r15; call qword ptr [rax]; 
0x00000000000745bb: lea rdx, qword ptr [rsi + 4]; mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000012ef2e: lea rdx, qword ptr [rsi + 7]; and esi, 7; movsxd rcx, dword ptr [rax + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax; 
0x00000000000ebbbb: lea rdx, qword ptr [rsp + 0x10]; mov esi, 0x10; mov rdi, r9; mov eax, r8d; syscall; 
0x0000000000129420: lea rdx, qword ptr [rsp + 0x10]; mov esi, 6; call qword ptr [rax + 0x28]; 
0x00000000001293ea: lea rdx, qword ptr [rsp + 0x10]; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x000000000012949e: lea rdx, qword ptr [rsp + 0xc]; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x000000000003d09b: lea rdx, qword ptr [rsp + 8]; call 0x3d1f0; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003d0eb: lea rdx, qword ptr [rsp + 8]; call 0x3d260; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f0938: lea rdx, qword ptr [rsp - 0x38]; mov esi, 0x5401; movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000000f074e: lea rdx, qword ptr [rsp - 0x38]; syscall; 
0x00000000000ebaab: lea rdx, qword ptr [rsp - 0x68]; mov esi, 0x10; mov rdi, r10; mov eax, r9d; syscall; 
0x00000000001287c8: lea rsi, qword ptr [r12 + 0x18]; mov r15, r14; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000123f28: lea rsi, qword ptr [r12 + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000075b17: lea rsi, qword ptr [rax + 0x58]; mov qword ptr [rsp + 8], rdi; mov rax, qword ptr [rax + 0x38]; mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x000000000012604e: lea rsi, qword ptr [rbp + 0x18]; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000010ad39: lea rsi, qword ptr [rbp - 0x30]; lea rdi, qword ptr [rip - 0x174]; call rax; 
0x00000000000c3d61: lea rsi, qword ptr [rbp - 0x360]; mov rdi, r14; call qword ptr [rax + 0x40]; 
0x00000000000fc107: lea rsi, qword ptr [rbp - 0x430]; mov rdi, r9; movsxd rdx, edx; mov eax, 0x14; syscall; 
0x00000000000782af: lea rsi, qword ptr [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000011ebff: lea rsi, qword ptr [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000012a862: lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000006d179: lea rsi, qword ptr [rip + 0x10ac74]; movsxd rcx, dword ptr [rsi + rcx*4]; add rsi, rcx; jmp rsi; 
0x000000000006c810: lea rsi, qword ptr [rip + 0x10b479]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x0000000000046334: lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006f7e9: lea rsi, qword ptr [rip + 0x30]; call rax; 
0x0000000000024587: lea rsi, qword ptr [rip + 0xab2]; lea rdi, qword ptr [rip + 0x39b4db]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002439f: lea rsi, qword ptr [rip + 0xc9a]; lea rdi, qword ptr [rip + 0x39b6c3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000a1a60: lea rsi, qword ptr [rip + 0xd6e59]; movsxd rax, dword ptr [rsi + rdi*4]; add rsi, rax; jmp rsi; 
0x000000000010ad6f: lea rsi, qword ptr [rip - 0x116]; lea rdi, qword ptr [rip + 0x2b7a23]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007c089: lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000011ee07: lea rsi, qword ptr [rip - 0x1ae]; lea rdi, qword ptr [rip + 0x2a486b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007c489: lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000008ac9f: lea rsi, qword ptr [rip - 0x236]; lea rdi, qword ptr [rip + 0x335fb3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d0487: lea rsi, qword ptr [rip - 0x24ae]; lea rdi, qword ptr [rip + 0x2f0f2b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007ab71: lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb45: lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007add9: lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x00000000000f2497: lea rsi, qword ptr [rip - 0x6e]; lea rdi, qword ptr [rip + 0x2cf08b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049167: lea rsi, qword ptr [rip - 0x6ee]; lea rdi, qword ptr [rip + 0x37777b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012ab87: lea rsi, qword ptr [rip - 0x7e]; lea rdi, qword ptr [rip + 0x298ccb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011209c: lea rsi, qword ptr [rip - 0x83]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000011bcc7: lea rsi, qword ptr [rip - 0x85e]; lea rdi, qword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000047471: lea rsi, qword ptr [rsi + 0x128]; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000127034: lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x000000000012d6f4: lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x00000000000c2bed: lea rsi, qword ptr [rsp + 0x10]; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000012d73a: lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012ddb4: lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000012dd93: lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000012d0c4: lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000012d0f1: lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x000000000013523b: lea rsi, qword ptr [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x00000000000491b7: lea rsi, qword ptr [rsp + 0x60]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e8a5d: lea rsi, qword ptr [rsp + 0xe0]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000121aa4: lea rsi, qword ptr [rsp + 8]; call qword ptr [rax]; 
0x000000000006e485: lea rsi, qword ptr [rsp + 8]; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x0000000000121af4: lea rsi, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000010aa8f: lea rsi, qword ptr [rsp - 0x18]; mov eax, 0x83; syscall; 
0x000000000003b8cd: lea rsp, qword ptr [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x000000000006cfe7: lea rsp, qword ptr [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000143f43: leave; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000007f1e2: leave; add dword ptr [rax + 0x39], ecx; ret; 
0x00000000000eb6bf: leave; add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x00000000000eb71f: leave; add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x00000000000cb192: leave; call 0xc9d70; add rsp, 0x18; ret; 
0x00000000000cb132: leave; call 0xcb0b0; add rsp, 0x18; ret; 
0x00000000000f4784: leave; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000008aa66: leave; cmove rax, rdx; ret; 
0x000000000013cb09: leave; cmp ch, byte ptr [rcx]; ret 0xca39; 
0x00000000001a0749: leave; int1; jmp qword ptr [rbp]; 
0x0000000000103db6: leave; jns 0x103d88; mov eax, edx; sub eax, r9d; ret; 
0x0000000000103d05: leave; jns 0x103d90; sub ecx, eax; mov eax, ecx; ret; 
0x0000000000103f38: leave; jns 0x103f6e; mov eax, r8d; sub eax, r9d; ret; 
0x000000000013cd02: leave; lea rax, qword ptr [rdi + rcx]; sub rax, rdx; ret; 
0x000000000009c781: leave; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x000000000009fe47: leave; mov byte ptr [rip + 0xc634900], cl; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd93: leave; mov ch, 0xd; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001221d7: leave; mov dword ptr [rdx], ecx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x00000000000cb166: leave; mov dword ptr [rsp], 0; call 0xcb0b0; add rsp, 0x18; ret; 
0x0000000000020c6a: leave; mov eax, 1; mov dword ptr [r9 + rcx*4], esi; inc dword ptr [rdi + 4]; ret; 
0x000000000009e367: leave; movabs eax, dword ptr [0x8d49930c6349000d]; or al, 0xb; jmp rcx; 
0x000000000009685f: leave; movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x000000000007d06f: leave; movsxd rdx, eax; call 0x7cfa0; or dword ptr [rbx], 8; pop rbx; ret; 
0x0000000000097dbc: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000f1b45: leave; nop word ptr cs:[rax + rax]; mov eax, 0xaa; syscall; 
0x00000000000a2c16: leave; or eax, dword ptr [rax]; ret; 
0x0000000000039a9e: leave; ret; 
0x0000000000107ee3: leave; shr byte ptr [rbx], 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001211d4: leave; sub dword ptr [rax], eax; mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x00000000001794cc: leave; wait; hlt; call rbx; 
0x0000000000028510: leave; xor edx, edx; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000027809: leave; xor edx, edx; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x00000000000fb3ec: leave; xor r8d, r8d; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2c; syscall; 
0x00000000000fb27c: leave; xor r8d, r8d; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2d; syscall; 
0x000000000018698f: ljmp ptr [rax + 0x2c]; cld; push qword ptr [rax]; cld; call qword ptr [rax]; 
0x0000000000172aaf: ljmp ptr [rax + rbp]; in al, dx; call qword ptr [rax]; 
0x000000000018d17b: ljmp ptr [rax + rbx*4 - 0x784bfffe]; stc; jmp rsp; 
0x000000000018d65b: ljmp ptr [rax + rdi*4 + 2]; add byte ptr [rbp - 6], dl; lcall ptr [rdx + rdi*4 + 0x26440002]; cli; jmp rsp; 
0x000000000018c37b: ljmp ptr [rax + rsi + 0x8640002]; clc; jmp rsp; 
0x0000000000179f37: ljmp ptr [rax - 0x3f000a5a]; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp rax; 
0x00000000001793ab: ljmp ptr [rax - 0x57000b6b]; xchg eax, ebp; hlt; jmp rsi; 
0x000000000019ac3c: ljmp ptr [rax]; out dx, al; jmp qword ptr [rdx]; 
0x00000000001797bf: ljmp ptr [rax]; wait; hlt; call rsi; 
0x000000000018d23b: ljmp ptr [rbp + rbx*4 + 2]; add byte ptr [rdi + rbx*4 - 0x62430007], ah; add al, byte ptr [rax]; add al, 0xa0; stc; jmp rsp; 
0x00000000001888ab: ljmp ptr [rbp + rsi*4 + 0x19e40000]; in al, dx; jmp rsp; 
0x000000000018730f: ljmp ptr [rbx + rdi*2]; cld; call rdx; 
0x000000000017a55b: ljmp ptr [rbx + rdx*8 - 0xa]; call rdx; 
0x000000000018d323: ljmp ptr [rbx - 0x4f0bfffe]; stc; jmp rsp; 
0x000000000018ae33: ljmp ptr [rcx + rdi*4 + 1]; add byte ptr [rdx + rdx*8 - 0xc], dl; push qword ptr [rcx + rdi*4 - 0x2d1bffff]; hlt; jmp rsp; 
0x000000000013214f: ljmp ptr [rcx - 0x2e]; call 0x113215a; ret 0x59e9; 
0x0000000000179c75: ljmp ptr [rcx - 0x3c000500]; add dh, bh; jmp rdi; 
0x00000000001794a7: ljmp ptr [rcx - 0x65]; hlt; call qword ptr [rcx]; 
0x000000000017958f: ljmp ptr [rcx - 0x65]; hlt; call rdi; 
0x000000000017958f: ljmp ptr [rcx - 0x65]; hlt; call rdi; popfq; hlt; jmp rcx; 
0x0000000000179793: ljmp ptr [rcx - 0x65]; hlt; call rsi; 
0x000000000017953f: ljmp ptr [rcx - 0x65]; hlt; inc dword ptr [rdi]; popfq; hlt; call qword ptr [rcx]; 
0x00000000001794eb: ljmp ptr [rcx - 0x65]; hlt; jmp qword ptr [rbx]; 
0x00000000001794a3: ljmp ptr [rcx - 0x65]; hlt; ljmp ptr [rcx - 0x65]; hlt; call qword ptr [rcx]; 
0x000000000017978f: ljmp ptr [rcx - 0x65]; hlt; ljmp ptr [rcx - 0x65]; hlt; call rsi; 
0x0000000000039cdb: ljmp ptr [rcx]; ror dword ptr [rax - 0x77], 0x37; mov eax, 1; mov dword ptr [rdx], ecx; ret; 
0x000000000017a16f: ljmp ptr [rcx]; test al, 0xf5; call rsp; 
0x000000000017a1db: ljmp ptr [rcx]; test al, 0xf5; jmp qword ptr [rdx - 0x5a]; 
0x000000000017a16b: ljmp ptr [rcx]; test al, 0xf5; ljmp ptr [rcx]; test al, 0xf5; call rsp; 
0x000000000017a1d7: ljmp ptr [rcx]; test al, 0xf5; ljmp ptr [rcx]; test al, 0xf5; jmp qword ptr [rdx - 0x5a]; 
0x000000000018c5f3: ljmp ptr [rdi + rdi + 2]; add byte ptr [rbx + rbp], al; clc; dec dword ptr [rdi + rdi + 0x2bd40002]; clc; call rsp; 
0x00000000000c2865: ljmp ptr [rdx + 0xb]; add byte ptr [rcx + 0x146348f6], cl; mov al, 0x48; add eax, edx; jmp rax; 
0x000000000018ddd3: ljmp ptr [rdx + rbp*8 - 0x1bcbfffe]; cli; call rsp; 
0x0000000000179c65: ljmp ptr [rdx]; add bh, bh; dec dword ptr [rdi]; cld; jmp qword ptr [rsi]; 
0x0000000000186f4f: ljmp ptr [rdx]; push rbp; cld; call rax; 
0x0000000000186ecb: ljmp ptr [rsi + 0x3efffc55]; push rbp; cld; jmp rsp; 
0x000000000017c0a7: ljmp ptr [rsi + rsi*4 - 0x49430006]; cli; dec esp; mov dh, 0xfa; jmp rsp; 
0x0000000000179297: ljmp ptr [rsi]; sbb esp, esi; inc dword ptr [rdi]; sbb esp, esi; jmp rsp; 
0x000000000018db93: ljmp ptr [rsp + rbx*8 - 0x481bfffe]; cli; call rsp; 
0x0000000000187307: ljmp ptr [rsp + rdi*2]; cld; lcall ptr [rbx + rdi*2 + 0x7b2cfffc]; cld; call rdx; 
0x00000000001890bb: ljmp ptr [rsp + rsi*8 - 0x564c0000]; out dx, al; jmp rsp; 
0x000000000018cb0b: ljmp ptr [rsp - 0x74fbfffe]; clc; jmp rsp; 
0x000000000016003e: lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000019d1ed: lock add byte ptr [rax], al; mov al, 0x1d; out dx, eax; call qword ptr [rax]; 
0x000000000019d1bd: lock add byte ptr [rax], al; nop; adc bh, dl; call qword ptr [rax]; 
0x00000000000004ae: lock add byte ptr [rdx], al; or al, byte ptr [rcx]; or al, 0x80; push rbx; add al, 4; ret 0x6080; 
0x0000000000073cea: lock add dword ptr [rax], eax; add byte ptr [rax - 0x7f], cl; ret; 
0x00000000000f0493: lock and byte ptr [rax - 0x77], cl; pop rbx; ret; 
0x000000000011202c: lock dec dword ptr [rax - 0x77]; add eax, 0x2ad9b3; add rsp, 8; ret; 
0x00000000001273c5: lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000127404: lock dec dword ptr [rax - 0x77]; ret 0xbfeb; 
0x0000000000178046: lock inc dword ptr [rcx + 0x5efff0b8]; mov bh, 0xf0; jmp rdi; 
0x000000000004b9cc: lock xchg byte ptr [rip - 0x77cb800], al; dec dword ptr [rcx - 0x77]; ret 0x850f; 
0x000000000006d17d: lodsb al, byte ptr [rsi]; adc byte ptr [rax], al; movsxd rcx, dword ptr [rsi + rcx*4]; add rsi, rcx; jmp rsi; 
0x000000000006d290: lodsb al, byte ptr [rsi]; adc byte ptr [rax], al; movsxd rdx, dword ptr [rcx + rdx*4]; add rcx, rdx; jmp rcx; 
0x00000000001b2b54: lodsb al, byte ptr [rsi]; add al, byte ptr [r8]; cmp byte ptr [rbx - 9], cl; call qword ptr [rbx]; 
0x0000000000137bf0: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000018cb0c: lodsb al, byte ptr [rsi]; add al, byte ptr fs:[rax]; add al, 0x8b; clc; jmp rsp; 
0x00000000001635d0: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x0000000000198e35: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; clc; cmc; in eax, dx; jmp qword ptr [rbx]; 
0x00000000001ac12c: lodsb al, byte ptr [rsi]; add byte ptr [rcx], 0; jo 0x1ac12a; cmc; call qword ptr [rcx]; 
0x0000000000192054: lodsb al, byte ptr [rsi]; add byte ptr ds:[rax], al; pop rax; mov al, 0xea; jmp qword ptr [rdx]; 
0x000000000014c10e: lodsb al, byte ptr [rsi]; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000187709: lodsb al, byte ptr [rsi]; cld; call rsp; 
0x0000000000187705: lodsb al, byte ptr [rsi]; cld; inc dword ptr [rsp + rbp*4 - 4]; call rsp; 
0x0000000000187789: lodsb al, byte ptr [rsi]; cld; inc eax; stosd dword ptr [rdi], eax; cld; jmp qword ptr [rax - 0x5f]; 
0x0000000000187589: lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rax]; 
0x0000000000187645: lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rdx - 0x54]; 
0x000000000018d17c: lodsb al, byte ptr [rsi]; cwde; add al, byte ptr [rax]; mov ah, 0x87; stc; jmp rsp; 
0x000000000018db94: lodsb al, byte ptr [rsi]; fadd qword ptr [rdx]; add ah, ah; mov bh, 0xfa; call rsp; 
0x0000000000176950: lodsb al, byte ptr [rsi]; fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000001890bc: lodsb al, byte ptr [rsi]; hlt; add byte ptr [rax], al; mov ah, 0xa9; out dx, al; jmp rsp; 
0x00000000001a5929: lodsb al, byte ptr [rsi]; hlt; call qword ptr [rbx]; 
0x00000000001b4f54: lodsb al, byte ptr [rsi]; insd dword ptr [rdi], dx; add al, byte ptr [rax]; cmp byte ptr [rsi], al; sti; jmp qword ptr [rdx]; 
0x00000000001aa854: lodsb al, byte ptr [rsi]; mov byte ptr [rcx], 0; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001a6a54: lodsb al, byte ptr [rsi]; mov byte ptr [rcx], al; add al, cl; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001888ac: lodsb al, byte ptr [rsi]; mov ch, 0; add ah, ah; sbb esp, ebp; jmp rsp; 
0x000000000007b1d4: lodsb al, byte ptr [rsi]; nop dword ptr [rax]; movzx eax, byte ptr [rax]; pop rbx; ret; 
0x0000000000138214: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001765bd: lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000001a4c54: lodsb al, byte ptr [rsi]; push 1; add al, cl; hlt; call qword ptr [rbp]; 
0x00000000001b3654: lodsb al, byte ptr [rsi]; push rsp; add al, byte ptr [rax]; fsubr dword ptr [rdi - 9]; jmp qword ptr [rbp]; 
0x000000000019a454: lodsb al, byte ptr [rsi]; ret 0; 
0x000000000006a2d9: lodsb al, byte ptr [rsi]; ret 0xffff; 
0x00000000001aa554: lodsb al, byte ptr [rsi]; ret; 
0x000000000018d2d1: lodsb al, byte ptr [rsi]; stc; jmp rsp; 
0x00000000001864c5: lodsb al, byte ptr [rsi]; std; call qword ptr [rax]; 
0x0000000000186445: lodsb al, byte ptr [rsi]; std; inc dword ptr [rsi - 0x53]; std; jmp rsi; 
0x0000000000186401: lodsb al, byte ptr [rsi]; std; inc ecx; lodsb al, byte ptr [rsi]; std; jmp qword ptr [rcx - 0x53]; 
0x0000000000186405: lodsb al, byte ptr [rsi]; std; jmp qword ptr [rcx - 0x53]; 
0x0000000000190d54: lodsb al, byte ptr [rsi]; sub eax, dword ptr [rax]; add byte ptr [rax], cl; jo 0x190d45; call qword ptr [rdx + 1]; 
0x000000000014c2a0: lodsb al, byte ptr [rsi]; test al, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018b8dc: lodsb al, byte ptr [rsi]; test dword ptr [rcx], 0xf703e400; inc esp; test dword ptr [rcx], 0xf704a400; jmp rsp; 
0x00000000001a7d54: lodsb al, byte ptr [rsi]; wait; add dword ptr [rax], eax; xor bpl, sil; jmp qword ptr [rax]; 
0x00000000001a7954: lodsb al, byte ptr [rsi]; xchg eax, edi; add dword ptr [rax], eax; sub rsi, rbp; jmp qword ptr [rcx]; 
0x000000000000314a: lodsb al, byte ptr [rsi]; xor bh, byte ptr [rsi - 0xd]; add ebp, esi; mov eax, 0xa1a3e95a; ret 0xba88; 
0x000000000018c37c: lodsb al, byte ptr [rsi]; xor byte ptr [rdx], al; add byte ptr [rax + rcx - 8], ah; jmp rsp; 
0x0000000000003146: lodsb al, byte ptr [rsi]; xor dh, bh; xor byte ptr [rdx + rsi - 0x11fc0c82], ch; mov eax, 0xa1a3e95a; ret 0xba88; 
0x0000000000047d3c: lodsd eax, dword ptr [rsi]; add byte ptr [rax + 0x63], cl; ror byte ptr [rax - 0x7d], cl; ret; 
0x0000000000064c53: lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret 0x4504; 
0x000000000003de44: lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000014bdf7: lodsd eax, dword ptr [rsi]; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001734db: lodsd eax, dword ptr [rsi]; and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x000000000018777d: lodsd eax, dword ptr [rsi]; cld; call qword ptr [rax]; 
0x00000000001875bd: lodsd eax, dword ptr [rsi]; cld; call qword ptr [rsi - 0x53]; 
0x00000000001875bd: lodsd eax, dword ptr [rsi]; cld; call qword ptr [rsi - 0x53]; cld; jmp rsi; 
0x0000000000187641: lodsd eax, dword ptr [rsi]; cld; call rdx; 
0x0000000000187641: lodsd eax, dword ptr [rsi]; cld; call rdx; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rdx - 0x54]; 
0x000000000018763d: lodsd eax, dword ptr [rsi]; cld; inc dword ptr [rdx - 0x53]; cld; call rdx; 
0x00000000001875c1: lodsd eax, dword ptr [rsi]; cld; jmp rsi; 
0x0000000000187701: lodsd eax, dword ptr [rsi]; cld; push qword ptr [rsp + rbp*4 - 0x53bb0004]; cld; call rsp; 
0x00000000000f04c2: lodsd eax, dword ptr [rsi]; cmp ebp, dword ptr [rip + 0x13750000]; mov r10, rcx; mov eax, 0x115; syscall; 
0x000000000019811d: lodsd eax, dword ptr [rsi]; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000ec7af: lodsd eax, dword ptr [rsi]; mov eax, 0x5c; syscall; 
0x0000000000108487: lodsd eax, dword ptr [rsi]; mov ecx, 0x3948002b; ret 0x840f; 
0x00000000000ebcb4: lodsd eax, dword ptr [rsi]; nop word ptr cs:[rax + rax]; nop; mov eax, 0x49; syscall; 
0x000000000013bd80: lodsd eax, dword ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000067a5e: lodsd eax, dword ptr [rsi]; out 0xff, al; dec dword ptr [rax - 0x7d]; ret 0xeb08; 
0x000000000002eccf: lodsd eax, dword ptr [rsi]; ret; 
0x000000000018648d: lodsd eax, dword ptr [rsi]; std; call qword ptr [rax - 0x52]; 
0x000000000018648d: lodsd eax, dword ptr [rsi]; std; call qword ptr [rax - 0x52]; std; jmp rax; 
0x0000000000186489: lodsd eax, dword ptr [rsi]; std; dec ebx; lodsd eax, dword ptr [rsi]; std; call qword ptr [rax - 0x52]; 
0x00000000001782ed: lodsd eax, dword ptr [rsi]; std; jmp qword ptr [rax - 0x51]; 
0x000000000018644d: lodsd eax, dword ptr [rsi]; std; jmp qword ptr [rdi - 0x52]; 
0x0000000000186449: lodsd eax, dword ptr [rsi]; std; jmp rsi; 
0x00000000000f30a4: lodsd eax, dword ptr [rsi]; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f306d: lodsd eax, dword ptr [rsi]; sub al, 0; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb0b7: lodsd eax, dword ptr [rsi]; sub eax, 0xd8f7002d; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f932f: lodsd eax, dword ptr [rsi]; test byte ptr [rax + rax], ch; mov eax, dword ptr [rip + 0x2c847b]; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x0000000000196b6c: lodsd eax, dword ptr [rsi]; test ch, ch; jmp qword ptr [rdx]; 
0x0000000000174a78: lodsd eax, dword ptr [rsi]; xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000000a5455: lodsq rax, qword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000108526: loope 0x108570; lea eax, dword ptr [rip + 0x2bbb46]; mov dword ptr [rip + 0x2bbb38], 1; pop rbx; ret; 
0x000000000011ee4e: loope 0x11ee50; add byte ptr [rbp + 0x310b75c0], al; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000135602: loope 0x135603; jmp qword ptr [rsi + 0x2e]; 
0x0000000000135652: loope 0x135653; jmp qword ptr [rsi + 0x2e]; 
0x0000000000135dd4: loope 0x135e1e; add esp, 0x58; ret; 
0x0000000000139157: loope 0x13915b; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x0000000000144e07: loope 0x144e55; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144e4f: loope 0x144e9d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144e8d: loope 0x144edb; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144ec5: loope 0x144f13; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f03: loope 0x144f51; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f3b: loope 0x144f89; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f63: loope 0x144fb1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001452eb: loope 0x145301; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001477d7: loope 0x147825; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014781f: loope 0x14786d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014785d: loope 0x1478ab; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000147895: loope 0x1478e3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001478d3: loope 0x147921; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014790b: loope 0x147959; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000147933: loope 0x147981; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001487c6: loope 0x1487cb; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148864: loope 0x148869; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a1a7: loope 0x14a1f5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a1ef: loope 0x14a23d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a22d: loope 0x14a27b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a265: loope 0x14a2b3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a2a3: loope 0x14a2f1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a2db: loope 0x14a329; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a303: loope 0x14a351; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c36a: loope 0x14c35f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000014ee3a: loope 0x14ee2f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000015195a: loope 0x15194f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000015a46b: loope 0x15a46e; add byte ptr [rax], al; ret; 
0x00000000001622fb: loope 0x1622fd; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xf]; ret; 
0x0000000000164dde: loope 0x164e3b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000172aac: loope 0x172ad4; in al, dx; ljmp ptr [rax + rbp]; in al, dx; call qword ptr [rax]; 
0x000000000017a6e9: loope 0x17a6eb; add byte ptr [rcx], al; adc byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x000000000018667d: loope 0x18667a; jmp qword ptr [rax - 0x1d]; 
0x000000000018cb08: loope 0x18ca94; clc; ljmp ptr [rsp - 0x74fbfffe]; clc; jmp rsp; 
0x0000000000195afc: loope 0x195b7a; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019ac84: loope 0x19acae; out dx, al; jmp qword ptr [rdx]; 
0x000000000019f98c: loope 0x19f98e; add byte ptr [rax], al; add byte ptr [rdx + 0xe], cl; adc byte ptr [rbx + 0x300e4402], al; add dl, byte ptr [rax + 0x41100e0a]; ret; 
0x00000000001a8db5: loope 0x1a8dab; jmp qword ptr [rdx]; 
0x00000000001aae81: loope 0x1aae78; jmp qword ptr [rbx]; 
0x00000000001ab019: loope 0x1ab010; jmp qword ptr [rcx + 0x4000001]; 
0x00000000001ac365: loope 0x1ac368; add byte ptr [rax], ch; sti; cmc; call qword ptr [rax]; 
0x00000000001ad12c: loope 0x1ad1ab; cmc; jmp qword ptr [rdx]; 
0x00000000001aefa5: loope 0x1aef9c; jmp qword ptr [rdx]; 
0x00000000001aefed: loope 0x1aefe4; jmp qword ptr [rdx]; 
0x00000000001af035: loope 0x1af02c; jmp qword ptr [rdx]; 
0x00000000001af07d: loope 0x1af074; jmp qword ptr [rdx]; 
0x00000000001af0c5: loope 0x1af0bc; jmp qword ptr [rdx]; 
0x00000000001af10d: loope 0x1af104; jmp qword ptr [rdx]; 
0x00000000001af1a5: loope 0x1af19c; jmp qword ptr [rdx]; 
0x00000000001af1ed: loope 0x1af1e4; jmp qword ptr [rdx]; 
0x00000000001af24d: loope 0x1af244; jmp qword ptr [rdx]; 
0x00000000001af295: loope 0x1af28c; jmp qword ptr [rdx]; 
0x00000000001b5dd9: loope 0x1b5dd2; jmp qword ptr [rdx + 2]; 
0x0000000000025ad6: loope 0x25b20; mov edx, dword ptr [rsp + 0x58]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000000269a: loope 0x2650; hlt; out 0xdf, eax; syscall; 
0x000000000002a431: loope 0x2a47b; mov edx, dword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002b581: loope 0x2b5cb; mov edx, dword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000036c83: loope 0x36cf6; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037a83: loope 0x37ae8; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037b83: loope 0x37be7; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000381f6: loope 0x381b0; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000382d6: loope 0x38290; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000038a67: loope 0x38ab5; mov dword ptr [rdi], ecx; ret; 
0x0000000000038a98: loope 0x38ae6; mov dword ptr [rdi - 8], ecx; ret; 
0x0000000000038b0d: loope 0x38b5b; mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000039ad5: loope 0x39ac7; call 0x39700; leave; ret; 
0x000000000003fc07: loope 0x3fc08; dec dword ptr [rax - 0x77]; ret; 
0x000000000007026b: loope 0x702b5; mov eax, dword ptr [rax + 0x48]; xor edx, edx; pop r12; jmp rax; 
0x0000000000070321: loope 0x70354; ror byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000711a1: loope 0x71172; mov dword ptr [rdi], ecx; ret; 
0x0000000000080599: loope 0x805ce; add byte ptr [rax + 0x39], cl; ret; 
0x000000000008237e: loope 0x82309; ret 0xda29; 
0x0000000000088b54: loope 0x88b76; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000088d80: loope 0x88da2; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000091aeb: loope 0x91af4; movsxd rcx, dword ptr [rax + rcx*4]; add rax, rcx; jmp rax; 
0x000000000009cdd5: loope 0x9ce3d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000009df79: loope 0x9dfc4; add eax, 0x10; lea r11, qword ptr [rip + 0xda56b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e079: loope 0x9e0e1; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000009e0: loope 0x9e1; adc dword ptr [rax], 0x12400515; xor byte ptr [rdx + 0x310e2044], ch; rol qword ptr [rax + 0x4260a120], cl; ret 0x4021; 
0x000000000009e35e: loope 0x9e2f0; bsf rdx, rdx; lea r11, qword ptr [rip + 0xda1c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e3d5: loope 0x9e43d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000009f789: loope 0x9f7d4; add eax, 0x10; lea r11, qword ptr [rip + 0xd8f3b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f889: loope 0x9f8f1; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000009fe3e: loope 0x9fdd0; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd88c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009feb5: loope 0x9ff1d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000a07be: loope 0xa0750; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd7fc9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0985: loope 0xa09ed; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000a1109: loope 0xa1171; nop dword ptr [rax + rax]; ret; 
0x00000000000a17c7: loope 0xa17c8; sldt word ptr [rax]; pop rbp; lea rax, qword ptr [r9 + 1]; pop r12; ret; 
0x00000000000a189e: loope 0xa189f; add eax, dword ptr [rax]; add byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0x8341; 
0x00000000000a1b47: loope 0xa1b01; adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000bd39d: loope 0xbd328; ret 0xf631; 
0x00000000000c6448: loope 0xc644b; add byte ptr [rax], al; lea rdi, qword ptr [rip + 0xb3399]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000e0987: loope 0xe098a; ret; 
0x00000000000f0683: loope 0xf065c; sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f1a7f: loope 0xf1a74; jmp qword ptr [rsi + 0x2e]; 
0x00000000000f1d83: loope 0xf1d45; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1efd: loope 0xf1efd; mov eax, 0xa9; syscall; 
0x00000000000f2283: loope 0xf2240; sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f3358: loope 0xf3386; add byte ptr [rax - 0x76b7ffc8], al; ret; 
0x00000000000f8283: loope 0xf82e0; sub al, 0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000fa483: loope 0xfa4be; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fad83: loope 0xfadb5; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbe83: loope 0xfbea4; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000188885: mov ah, 0; add byte ptr [rax + 0x19], al; in al, dx; dec dword ptr [rsp + rsi*4 + 0x195f0000]; in al, dx; call rsp; 
0x0000000000123aef: mov ah, 0; add byte ptr [rax], al; mov eax, 1; ret; 
0x00000000000fabf1: mov ah, 0; add byte ptr [rax], al; syscall; 
0x000000000018888d: mov ah, 0; add byte ptr [rdi + 0x19], bl; in al, dx; call rsp; 
0x000000000006c814: mov ah, 0x10; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x000000000017394a: mov ah, 0x13; ret; 
0x00000000000ae1a8: mov ah, 0x1a; clc; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x0000000000120994: mov ah, 0x24; adc byte ptr [rdx], ch; add byte ptr [rax], al; mov rdi, rbx; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x000000000018d678: mov ah, 0x2a; cli; call qword ptr [rbx + rdi*4 + 0x2bc40002]; cli; jmp rsp; 
0x00000000001b5916: mov ah, 0x35; idiv edi; sbb al, 0xd; xor al, 0xf7; jmp qword ptr [rdx]; 
0x00000000000488da: mov ah, 0x37; add al, ch; mov esi, 0x5b0005b5; ret; 
0x0000000000048907: mov ah, 0x37; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx - 0x75], bl; pop rax; ret; 
0x00000000001a315c: mov ah, 0x4f; add dword ptr [rax], eax; ret 0xe7da; 
0x0000000000189e7c: mov ah, 0x52; add dword ptr [rax], eax; xchg eax, esp; xor esi, eax; call rsp; 
0x000000000017495b: mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0x1749d7; mov ebp, 0xfb67d10d; ret; 
0x0000000000186ce0: mov ah, 0x64; cld; inc dword ptr [rsp - 4]; call rsp; 
0x0000000000097ad5: mov ah, 0x66; nop dword ptr cs:[rax + rax]; mov rax, rbx; pop rbx; ret; 
0x000000000018a26c: mov ah, 0x6a; add dword ptr [rax], eax; movsb byte ptr [rdi], byte ptr [rsi]; mov bh, 0xf1; jmp rsp; 
0x00000000001a505c: mov ah, 0x6e; add dword ptr [rax], eax; nop; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rcx]; 
0x00000000001a535c: mov ah, 0x71; add dword ptr [rax], eax; add byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x000000000018d138: mov ah, 0x7f; stc; call rsp; 
0x000000000018d180: mov ah, 0x87; stc; jmp rsp; 
0x00000000001882c4: mov ah, 0x92; add byte ptr [rax], al; hlt; add ch, bl; jmp rsp; 
0x0000000000173df0: mov ah, 0xa5; ret; 
0x000000000018cc28: mov ah, 0xa6; clc; jmp rsp; 
0x00000000001890c0: mov ah, 0xa9; out dx, al; jmp rsp; 
0x0000000000187704: mov ah, 0xac; cld; inc dword ptr [rsp + rbp*4 - 4]; call rsp; 
0x000000000018d50c: mov ah, 0xb0; add al, byte ptr [rax]; and al, 0xfc; stc; jmp rsp; 
0x00000000001728f4: mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000001a9a5c: mov ah, 0xb8; add dword ptr [rax], eax; jo 0x1a9a58; jmp qword ptr [rdx]; 
0x000000000018ae3c: mov ah, 0xb9; add dword ptr [rax], eax; in al, 0xd2; hlt; jmp rsp; 
0x00000000001aa25c: mov ah, 0xc0; add dword ptr [rax], eax; nop; xchg eax, esi; cmc; jmp qword ptr [rdi + 3]; 
0x00000000001aa65c: mov ah, 0xc4; add dword ptr [rax], eax; jo 0x1aa637; cmc; jmp qword ptr [rsi]; 
0x000000000018de34: mov ah, 0xcb; add dword ptr [rax], eax; in al, 0xeb; cli; jmp rsp; 
0x000000000018db0c: mov ah, 0xd9; add al, byte ptr [rax]; xor al, 0xa9; cli; jmp rsp; 
0x000000000018dd50: mov ah, 0xdb; cli; jmp rsp; 
0x0000000000199814: mov ah, 0xdc; in eax, dx; jmp qword ptr [rdx]; 
0x000000000018dcf4: mov ah, 0xe5; add al, byte ptr [rax]; adc al, 0xd6; cli; jmp rsp; 
0x00000000000266e8: mov ah, 0xf0; adc eax, 0x358d4800; mov dh, 0x5c; adc eax, 0x3d8d4800; ret; 
0x00000000000e40e0: mov ah, 0xf3; dec dword ptr [rbx + 0x438d0455]; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000001a5cd9: mov ah, 0xf4; call qword ptr [rsi]; 
0x00000000001a5cf1: mov ah, 0xf4; jmp qword ptr [rcx]; 
0x000000000000269b: mov ah, 0xf4; out 0xdf, eax; syscall; 
0x00000000001b5089: mov ah, 0xf7; jmp qword ptr [rcx]; 
0x000000000018b9f4: mov ah, 0xfc; add dword ptr [rax], eax; hlt; and dh, bh; call rsp; 
0x000000000006d288: mov ah, 2; add byte ptr [rax], al; lea rcx, qword ptr [rip + 0x10ac1d]; movsxd rdx, dword ptr [rcx + rdx*4]; add rcx, rdx; jmp rcx; 
0x00000000000f6590: mov ah, 2; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000014b677: mov ah, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000048829: mov ah, 5; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000000e726e: mov ah, 7; add byte ptr [rax], al; lea rax, qword ptr [rip + 0x932db]; movsxd rdx, dword ptr [rax + r11*4]; add rax, rdx; jmp rax; 
0x000000000018bd54: mov ah, 8; add al, byte ptr [rax]; test byte ptr [rcx - 9], cl; jmp rsp; 
0x00000000001871f1: mov ah, bh; call qword ptr [rax + rcx*4 - 4]; jmp rsp; 
0x0000000000187139: mov ah, bh; call qword ptr [rdx + 0x22fffc87]; xchg esp, edi; push qword ptr [rdx + 0x42fffc86]; xchg ah, bh; call rdx; 
0x00000000001870b5: mov ah, bh; call qword ptr [rsi]; 
0x0000000000187275: mov ah, bh; call rax; 
0x0000000000187275: mov ah, bh; call rax; xchg esp, edi; jmp qword ptr [rax - 0x79]; 
0x0000000000187271: mov ah, bh; inc dword ptr [rax - 0x78]; cld; call rax; 
0x0000000000187271: mov ah, bh; inc dword ptr [rax - 0x78]; cld; call rax; xchg esp, edi; jmp qword ptr [rax - 0x79]; 
0x0000000000187079: mov ah, bh; inc eax; xchg esp, edi; call qword ptr [rax - 0x79]; 
0x0000000000187079: mov ah, bh; inc eax; xchg esp, edi; call qword ptr [rax - 0x79]; cld; jmp rax; 
0x00000000001871f5: mov ah, bh; jmp rsp; 
0x0000000000187075: mov ah, bh; push qword ptr [rax]; mov ah, bh; inc eax; xchg esp, edi; call qword ptr [rax - 0x79]; 
0x0000000000178289: mov ah, bh; push qword ptr [rax]; mov esp, edi; call qword ptr [rax - 0x76]; 
0x0000000000173744: mov ah, bl; push rsi; ret; 
0x00000000001a6438: mov ah, cl; hlt; jmp qword ptr [rcx]; 
0x0000000000199295: mov al, 0; add byte ptr [rax + 1], bl; out dx, al; jmp rax; 
0x00000000001991f5: mov al, 0; add byte ptr [rax - 3], ch; in eax, dx; call qword ptr [rsi + 2]; 
0x00000000000cca91: mov al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000fa921: mov al, 0; add byte ptr [rax], al; syscall; 
0x0000000000186234: mov al, 0x17; sti; inc dword ptr [rax + 0x50fffb18]; sbb ebx, edi; jmp qword ptr [rax]; 
0x0000000000199ec0: mov al, 0x1a; out dx, al; call qword ptr [rdi]; 
0x000000000019d1f0: mov al, 0x1d; out dx, eax; call qword ptr [rax]; 
0x000000000003078c: mov al, 0x21; adc al, 0; movsxd rax, dword ptr [rdx + r12*4]; add rdx, rax; jmp rdx; 
0x000000000012154a: mov al, 0x23; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x00000000001215be: mov al, 0x23; add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x00000000001214fc: mov al, 0x23; add byte ptr [rax], al; xor eax, eax; jmp rcx; 
0x00000000001214b5: mov al, 0x23; add byte ptr [rax], al; xor eax, eax; pop rbp; jmp rcx; 
0x0000000000178128: mov al, 0x23; int1; jmp rax; 
0x0000000000186b40: mov al, 0x24; cld; inc dword ptr [rax]; cld; call qword ptr [rax + 0x27]; 
0x000000000019a370: mov al, 0x25; out dx, al; jmp qword ptr [rax]; 
0x0000000000132d77: mov al, 0x28; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000132d94: mov al, 0x28; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000186a14: mov al, 0x2d; cld; call qword ptr [rax + 0x70fffc2f]; xor esp, edi; call qword ptr [rax + 0x33]; 
0x00000000001a7bf0: mov al, 0x2e; cmc; jmp qword ptr [rcx]; 
0x0000000000085acd: mov al, 0x33; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + 0x5c], al; ret; 
0x000000000019dff0: mov al, 0x47; sti; call qword ptr [rax]; 
0x0000000000127f09: mov al, 0x48; add eax, ecx; jmp rax; 
0x00000000000c286e: mov al, 0x48; add eax, edx; jmp rax; 
0x00000000001276a9: mov al, 0x48; add eax, esi; jmp rax; 
0x00000000000340bf: mov al, 0x48; mov eax, dword ptr [rip + 0x38ff41]; lea rdi, qword ptr [rip + 0x38bbb2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012ef38: mov al, 0x48; shr edx, 3; add rax, rcx; jmp rax; 
0x0000000000186f84: mov al, 0x56; cld; jmp qword ptr [rax]; 
0x00000000001862ec: mov al, 0x57; sti; call qword ptr [rax + 0x70fffb59]; pop rbx; sti; call qword ptr [rax + 0x5d]; 
0x0000000000186d98: mov al, 0x5c; cld; jmp qword ptr [rax]; 
0x0000000000186d84: mov al, 0x60; cld; inc dword ptr [rax + 0x60]; cld; call rax; 
0x0000000000186b6c: mov al, 0x63; cld; inc dword ptr [rax + 0x63]; cld; call rax; 
0x00000000001a8ff0: mov al, 0x63; cmc; call rsp; 
0x00000000001abffc: mov al, 0x69; cmc; jmp qword ptr [rdx]; 
0x0000000000178620: mov al, 0x6a; bnd jmp rax; push -0xe; call qword ptr [rax]; 
0x0000000000178640: mov al, 0x6b; inc eax; imul esi, edx, -1; shr byte ptr [rbx - 0xe], 1; jmp rax; 
0x0000000000177180: mov al, 0x75; out dx, al; call rax; 
0x0000000000186334: mov al, 0x78; sti; inc dword ptr [rax]; jp 0x186336; call qword ptr [rax + 0x7b]; 
0x00000000000a06e0: mov al, 0x80; or eax, 0xc634900; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000017827c: mov al, 0x84; cld; call rax; 
0x0000000000194534: mov al, 0x87; in al, dx; jmp qword ptr [rdx]; 
0x0000000000187270: mov al, 0x88; cld; inc dword ptr [rax - 0x78]; cld; call rax; 
0x0000000000187058: mov al, 0x8b; cld; inc dword ptr [rax - 0x75]; cld; call rax; 
0x0000000000122c2e: mov al, 0x90; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000001782a4: mov al, 0x90; cld; jmp qword ptr [rax]; 
0x00000000001ae7f4: mov al, 0x9b; cmc; jmp qword ptr [rdx]; 
0x00000000001781e0: mov al, 0x9c; int1; call rax; 
0x00000000000fa2df: mov al, 0x9c; mov qword ptr [rsp - 0x38], r8; mov qword ptr [rsp - 0x30], r9; syscall; 
0x00000000001863c0: mov al, 0xa4; std; jmp qword ptr [rax - 0x5b]; 
0x0000000000187768: mov al, 0xaf; cld; inc dword ptr [rax - 0x51]; cld; call rax; 
0x00000000001973f0: mov al, 0xba; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019cbc0: mov al, 0xbf; out dx, al; jmp qword ptr [rax]; 
0x0000000000136318: mov al, 0xca; mov esi, 0x81; syscall; 
0x0000000000080804: mov al, 0xd5; xor eax, dword ptr [rax]; mov qword ptr [rsp + 0x28], r14; mov rdi, r14; call qword ptr [rax]; 
0x000000000009d3ab: mov al, 0xd; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001a6a40: mov al, 0xdf; hlt; jmp qword ptr [rcx]; 
0x0000000000192119: mov al, 0xea; call qword ptr [rsi]; 
0x0000000000192011: mov al, 0xea; jmp qword ptr [rax]; 
0x0000000000191ff9: mov al, 0xea; jmp qword ptr [rbx]; 
0x0000000000192029: mov al, 0xea; jmp qword ptr [rdx]; 
0x00000000001a1ce0: mov al, 0xee; int1; jmp qword ptr [rcx]; 
0x0000000000186920: mov al, 0xf1; sti; inc dword ptr [rax]; sti; call qword ptr [rax - 0xc]; 
0x00000000001a5b31: mov al, 0xf4; jmp qword ptr [rcx]; 
0x0000000000186974: mov al, 0xf8; sti; inc dword ptr [rax]; cli; sti; call qword ptr [rax - 5]; 
0x000000000018d329: mov al, 0xf9; jmp rsp; 
0x000000000018d321: mov al, 0xf9; ljmp ptr [rbx - 0x4f0bfffe]; stc; jmp rsp; 
0x0000000000187565: mov al, 0xfc; call qword ptr [rax]; 
0x0000000000187621: mov al, 0xfc; call qword ptr [rdx - 0x50]; 
0x0000000000187621: mov al, 0xfc; call qword ptr [rdx - 0x50]; cld; jmp rdx; 
0x00000000001876e5: mov al, 0xfc; inc esp; scasd eax, dword ptr [rdi]; cld; call qword ptr [rdi + rbp*4 - 4]; jmp rsp; 
0x0000000000187761: mov al, 0xfc; jmp qword ptr [rax]; 
0x00000000001875a1: mov al, 0xfc; jmp qword ptr [rsi - 0x50]; 
0x0000000000187625: mov al, 0xfc; jmp rdx; 
0x0000000000187765: mov al, 0xfc; push qword ptr [rax + 0x40fffcaf]; scasd eax, dword ptr [rdi]; cld; call rax; 
0x00000000000825eb: mov al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000000ecfcf: mov al, 1; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 7; syscall; 
0x000000000015e8ec: mov al, 1; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000012e247: mov al, 1; ret; 
0x000000000018d50d: mov al, 2; add byte ptr [rsp + rdi*8], ah; stc; jmp rsp; 
0x00000000001868f0: mov al, 2; cld; jmp qword ptr [rax + 4]; 
0x000000000014baf7: mov al, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000186870: mov al, 3; cld; push qword ptr [rax + 5]; cld; call qword ptr [rax + 7]; 
0x00000000000bcd97: mov al, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000edcd1: mov al, 3; syscall; 
0x000000000009da2c: mov al, 4; add byte ptr [rax], al; ret; 
0x00000000001868d4: mov al, 4; cld; inc dword ptr [rax + 0x60fffc06]; or ah, bh; call qword ptr [rax + 0xa]; 
0x000000000013351c: mov al, 4; sub dword ptr [rax], eax; cmove rdx, rax; add rsp, 8; mov rax, rdx; ret; 
0x00000000000f6174: mov al, 6; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000186838: mov al, 7; cld; call qword ptr [rax + 0x70fffc09]; or edi, esp; call qword ptr [rax + 0xd]; 
0x000000000009d62c: mov al, 8; add byte ptr [rax], al; ret; 
0x00000000000eb261: mov al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000196ad6: mov al, byte ptr [rbp + 0xd1cffed]; mov ch, 0x84; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000fd5b9: mov al, byte ptr [rbx]; add al, 0x16; ret; 
0x000000000015e712: mov al, byte ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000014e5c7: mov al, byte ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015c846: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x0000000000099b5b: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000015c874: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, qword ptr [rdx + 4]; ret; 
0x0000000000099b89: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000099c0d: mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x000000000015c820: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, qword ptr [rdx]; ret; 
0x0000000000099b35: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000001ab728: mov al, ch; cmc; call qword ptr [rax]; 
0x000000000002e5ef: mov ax, 3; syscall; 
0x000000000015c884: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, qword ptr [rdx + 5]; ret; 
0x0000000000099ba9: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000099c2d: mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x000000000015c830: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, qword ptr [rdx + 1]; ret; 
0x000000000015c840: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x0000000000099b55: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000099b45: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000014d131: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000143d55: mov bh, 0x28; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000c2684: mov bh, 0x2f; add byte ptr [rbx + rax*4 + 0x38], ah; sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x000000000008841b: mov bh, 0x33; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xcea25]; ret; 
0x0000000000022764: mov bh, 0x39; add byte ptr [rax + rcx*2 + 3], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000bd307: mov bh, 0x43; adc byte ptr [rax + rcx*4 + 0x63], al; adc cl, byte ptr [rax + 1]; ret; 
0x0000000000034c73: mov bh, 0x48; add edx, edi; jmp rdx; 
0x0000000000162198: mov bh, 0x48; lea eax, dword ptr [rdi + 7]; ret; 
0x0000000000118cbe: mov bh, 0x4a; adc cl, byte ptr [rbp - 0x2ff4f]; jmp qword ptr [rsi - 0x7d]; 
0x00000000001abea4: mov bh, 0x69; cmc; jmp qword ptr [rdx]; 
0x00000000000d22f3: mov bh, 0x79; ret 0x6348; 
0x0000000000123ba2: mov bh, 0x81; mov byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [r8 + 0x6c], ax; mov eax, 1; ret; 
0x0000000000174c24: mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000001728f7: mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x000000000002fd36: mov bh, 0xc0; ret; 
0x000000000010c573: mov bh, 0xc7; movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000001483d5: mov bh, 0xe5; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000003d8d8: mov bh, 0xeb; ret 0x1f0f; 
0x00000000001344e2: mov bh, 0xef; jmp qword ptr [rsi + 0x66]; 
0x000000000017804d: mov bh, 0xf0; jmp rdi; 
0x000000000018a271: mov bh, 0xf1; jmp rsp; 
0x000000000018a269: mov bh, 0xf1; push qword ptr [rdx + rbp*2 - 0x485bffff]; int1; jmp rsp; 
0x00000000001a5d81: mov bh, 0xf4; call rdi; 
0x0000000000115f25: mov bh, 0xf6; mov dword ptr [rsp], 2; call 0x1154d0; add rsp, 0x18; ret; 
0x000000000010c5c4: mov bh, 0xf6; or eax, esi; bswap eax; ret; 
0x000000000018db99: mov bh, 0xfa; call rsp; 
0x000000000018db91: mov bh, 0xfa; ljmp ptr [rsp + rbx*8 - 0x481bfffe]; cli; call rsp; 
0x0000000000178301: mov bh, 0xfd; jmp qword ptr [rax - 0x47]; 
0x000000000006d175: mov bh, 3; add byte ptr [rax], al; lea rsi, qword ptr [rip + 0x10ac74]; movsxd rcx, dword ptr [rsi + rcx*4]; add rsi, rcx; jmp rsi; 
0x000000000014b377: mov bh, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001079f3: mov bh, 4; push rax; shr ax, 0xe; and eax, 1; ret; 
0x000000000012e119: mov bh, 6; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012d409: mov bh, 6; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000f0a25: mov bh, 7; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000e44a1: mov bh, 7; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x0000000000187265: mov bh, ah; call qword ptr [rax + 0x20fffc89]; mov esp, edi; push qword ptr [rax + 0x40fffc88]; mov ah, bh; call rax; 
0x00000000001870a5: mov bh, ah; call rsi; 
0x00000000001870a5: mov bh, ah; call rsi; mov esp, edi; jmp qword ptr [rsi - 0x77]; 
0x00000000001870a1: mov bh, ah; inc dword ptr [rsi - 0x76]; cld; call rsi; 
0x00000000001870a1: mov bh, ah; inc dword ptr [rsi - 0x76]; cld; call rsi; mov esp, edi; jmp qword ptr [rsi - 0x77]; 
0x0000000000187125: mov bh, ah; inc edx; mov esp, edi; call qword ptr [rdx - 0x77]; 
0x0000000000187125: mov bh, ah; inc edx; mov esp, edi; call qword ptr [rdx - 0x77]; cld; jmp rdx; 
0x0000000000187061: mov bh, ah; jmp qword ptr [rax - 0x76]; 
0x0000000000187121: mov bh, ah; push qword ptr [rdx]; mov bh, ah; inc edx; mov esp, edi; call qword ptr [rdx - 0x77]; 
0x000000000018cb09: mov bh, al; ljmp ptr [rsp - 0x74fbfffe]; clc; jmp rsp; 
0x000000000011b981: mov bh, byte ptr [rip - 0x76b7fffa]; ret 0x1be; 
0x00000000000971db: mov bh, cl; jmp qword ptr [rsi - 0x70]; 
0x00000000000face4: mov bl, 0; add byte ptr [rax], al; syscall; 
0x0000000000163a8e: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000004ba9d: mov bl, 0x12; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000008581c: mov bl, 0x33; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000008aca9: mov bl, 0x5f; xor eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e04e5: mov bl, 0x80; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000e2037: mov bl, 0x80; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8d4c; 
0x00000000000dbb4c: mov bl, 0xa0; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x00000000000f5bb9: mov bl, 0xa; add byte ptr [rax], al; xor esi, esi; mov rdi, rbp; call rbx; 
0x0000000000022cb1: mov bl, 0xb1; cmp dword ptr [rax], eax; mov dword ptr fs:[rax], 9; mov eax, edi; ret; 
0x00000000001728f3: mov bl, 0xb4; mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000112031: mov bl, 0xd9; sub al, byte ptr [rax]; add rsp, 8; ret; 
0x0000000000147ed9: mov bl, 0xea; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001348be: mov bl, 0xef; jmp qword ptr [rsi + 0x66]; 
0x000000000019edd1: mov bl, 0xf0; call qword ptr [rdi + 2]; 
0x00000000001a5c39: mov bl, 0xf4; jmp qword ptr [rcx]; 
0x00000000001afbc1: mov bl, 0xf6; call qword ptr [rcx]; 
0x00000000001afbd9: mov bl, 0xf6; jmp qword ptr [rcx]; 
0x0000000000003aad: mov bl, 0xf7; adc bh, byte ptr [rax]; cwde; ret; 
0x000000000018db71: mov bl, 0xfa; call rsp; 
0x00000000000bd2a0: mov bl, 0xfc; jmp qword ptr [rsi + 0x2e]; 
0x00000000001782f9: mov bl, 0xfd; jmp qword ptr [rax - 0x4b]; 
0x000000000018ad75: mov bl, 1; add byte ptr [rcx + rdx*4], dh; hlt; jmp rsp; 
0x000000000014b7f7: mov bl, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001b6a88: mov bl, 6; add byte ptr [rax], al; fld dword ptr [rbx]; add byte ptr [rax], al; ret; 
0x00000000001996ac: mov bl, bl; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001ade34: mov bp, si; jmp qword ptr [rdx]; 
0x00000000000f07fb: mov byte ptr [r10 + 0x23], dl; mov rdx, r10; mov byte ptr [rsp - 0x58], al; mov eax, ebp; syscall; 
0x0000000000097a0d: mov byte ptr [r10 + 1], 0; ret; 
0x0000000000108ebd: mov byte ptr [r11 + 1], 0; mov rax, rdi; pop rbx; ret; 
0x00000000000fc331: mov byte ptr [r12 + 0x26], 0; mov rdi, r9; mov byte ptr [rbp - 0x689], 0x73; mov eax, 0x14; syscall; 
0x000000000012a686: mov byte ptr [r12 + rbx], 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000012ff3d: mov byte ptr [r8 + 1], r9b; ret; 
0x00000000000814cd: mov byte ptr [r8 + rbx], sil; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000003471c: mov byte ptr [r8], 0; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f4cca: mov byte ptr [r9 + r15 - 0x20], 0x89; ret; 
0x00000000000cacd1: mov byte ptr [r9 - 0x77], r8b; ret 0xdb84; 
0x00000000000f31b2: mov byte ptr [r9 - 1], 0; ret; 
0x00000000000e44b2: mov byte ptr [rax + 0x16b8ff], 0; add byte ptr [rsp + rax - 0xd], dh; ret; 
0x0000000000031259: mov byte ptr [rax + 0x29], cl; ret 0x8348; 
0x000000000002ed2c: mov byte ptr [rax + 0x39], cl; ret 0xf48; 
0x00000000000ce442: mov byte ptr [rax + 0x63], cl; ret 0x8948; 
0x00000000001636a7: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000000b08b4: mov byte ptr [rax + 1], cl; ret 0x8d48; 
0x000000000012ff3e: mov byte ptr [rax + 1], cl; ret; 
0x000000000004983e: mov byte ptr [rax + 8], 0; ret; 
0x000000000012642c: mov byte ptr [rax + rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000814ce: mov byte ptr [rax + rbx], dh; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000828d4: mov byte ptr [rax + rbx], dh; pop rbx; ret; 
0x00000000000828d3: mov byte ptr [rax + rbx], sil; pop rbx; ret; 
0x0000000000036d99: mov byte ptr [rax - 0x77], cl; ret 0xba41; 
0x000000000003471d: mov byte ptr [rax], 0; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fba2f: mov byte ptr [rax], 0; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x0000000000096c1a: mov byte ptr [rax], 0; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000188af5: mov byte ptr [rax], 0; ret; 
0x00000000000f7118: mov byte ptr [rax], 0xa; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x00000000000f6d8e: mov byte ptr [rax], 0xa; pop rbx; pop rbp; pop r12; ret; 
0x0000000000132eb7: mov byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000005dca3: mov byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 8], r8; mov dword ptr [rax + 4], 1; xor eax, eax; ret; 
0x000000000005dc30: mov byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x00000000001281cf: mov byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r13; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x0000000000126b6c: mov byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000123ba4: mov byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [r8 + 0x6c], ax; mov eax, 1; ret; 
0x000000000003724f: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x00000000000372d4: mov byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000f780b: mov byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000001355e4: mov byte ptr [rax], ch; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000009c782: mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000001180bb: mov byte ptr [rbp + 3], bh; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000001180ba: mov byte ptr [rbp + 3], dil; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000008abab: mov byte ptr [rbp + rax], 0; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000af4fa: mov byte ptr [rbp - 0x3e6af040], 0x83; clc; add al, 0xf; xchg eax, ebp; ret 0xc0e9; 
0x0000000000049fec: mov byte ptr [rbp - 0x4fa], 0x20; lea rcx, qword ptr [rbp - 0x4d0]; mov qword ptr [rbp - 0x598], rcx; lea rcx, qword ptr [rbp - 0x480]; mov qword ptr [rbp - 0x5b0], rcx; jmp rax; 
0x000000000004d597: mov byte ptr [rbp - 0x4fa], 0x20; mov dword ptr [rbp - 0x530], 1; jmp rax; 
0x00000000000fc33a: mov byte ptr [rbp - 0x689], 0x73; mov eax, 0x14; syscall; 
0x00000000001b3438: mov byte ptr [rbp - 9], ah; jmp qword ptr [rbx]; 
0x0000000000108ebe: mov byte ptr [rbx + 1], 0; mov rax, rdi; pop rbx; ret; 
0x0000000000117f89: mov byte ptr [rbx + 1], al; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000e4f08: mov byte ptr [rbx + rax + 1], 0; add rsp, 0x18; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000004c9a4: mov byte ptr [rbx + rdx + 0x358d4800], al; wait; call qword ptr [rdx]; 
0x00000000001a0088: mov byte ptr [rbx - 0xf], al; call rsi; 
0x00000000000498bd: mov byte ptr [rbx], 0; mov rax, rbx; add rsp, 0x440; pop rbx; ret; 
0x00000000000f2226: mov byte ptr [rbx], 0; mov rax, rbx; pop rbx; ret; 
0x000000000014a70b: mov byte ptr [rbx], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000011fcd4: mov byte ptr [rbx], al; add byte ptr [rax], al; mov qword ptr [rsp + 8], rdi; mov esi, 1; mov rdi, r15; call qword ptr [rax]; 
0x000000000012e165: mov byte ptr [rbx], al; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000012d43e: mov byte ptr [rbx], bpl; mov eax, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000012d43f: mov byte ptr [rbx], ch; mov eax, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000002f5e: mov byte ptr [rbx], cl; and bh, byte ptr [rax - 0x52]; sub ebx, dword ptr [rsp + rax*2]; nop; ret 0x5bdb; 
0x000000000015a4e3: mov byte ptr [rcx + 2], dl; ret; 
0x000000000015a502: mov byte ptr [rcx + 4], dl; ret; 
0x000000000015a543: mov byte ptr [rcx + 8], dl; ret; 
0x0000000000096863: mov byte ptr [rcx + rax - 0x38], cl; jmp rax; 
0x000000000002691d: mov byte ptr [rcx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x00000000000f4ccb: mov byte ptr [rcx + rdi - 0x20], 0x89; ret; 
0x00000000001a51e8: mov byte ptr [rcx + rdi*8], dl; call qword ptr [rax]; 
0x0000000000190b38: mov byte ptr [rcx - 0x16], ch; jmp qword ptr [rcx]; 
0x00000000000cacd2: mov byte ptr [rcx - 0x77], al; ret 0xdb84; 
0x00000000000814cc: mov byte ptr [rcx - 0x78], 0x34; sbb byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f31b3: mov byte ptr [rcx - 1], 0; ret; 
0x0000000000094683: mov byte ptr [rcx], 0; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000096c94: mov byte ptr [rcx], 0; mov qword ptr [rdi], rdx; ret; 
0x0000000000096bc0: mov byte ptr [rcx], 0; mov rcx, rdi; mov qword ptr [rdx], rcx; ret; 
0x00000000001aa89d: mov byte ptr [rcx], 0; nop; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa855: mov byte ptr [rcx], 0; salc; cmc; jmp qword ptr [rsi]; 
0x00000000001aa7c5: mov byte ptr [rcx], 0; sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000000e1441: mov byte ptr [rcx], 0x83; ret 0x4840; 
0x0000000000095999: mov byte ptr [rcx], 0x83; ret 0x8301; 
0x0000000000097abf: mov byte ptr [rcx], 0xf; mov dh, 0x46; dec dword ptr [rax - 0x7d]; ret; 
0x00000000001a6a6d: mov byte ptr [rcx], al; add al, ah; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001a6a85: mov byte ptr [rcx], al; add al, bh; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001a6a55: mov byte ptr [rcx], al; add al, cl; fcompi st(4); jmp qword ptr [rcx]; 
0x00000000001a69ad: mov byte ptr [rcx], al; add al, dh; fdivrp st(4); jmp qword ptr [rcx]; 
0x00000000001a69f5: mov byte ptr [rcx], al; add byte ptr [rax - 0x21], ch; hlt; jmp qword ptr [rcx]; 
0x00000000001a69c5: mov byte ptr [rcx], al; add byte ptr [rax], cl; fcompi st(4); jmp qword ptr [rcx]; 
0x000000000019cfe8: mov byte ptr [rcx], al; ret; 
0x0000000000070b3a: mov byte ptr [rcx], bh; movzx eax, dil; ret; 
0x0000000000117e49: mov byte ptr [rcx], bl; movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x00000000000fb4dc: mov byte ptr [rcx], ch; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001349c2: mov byte ptr [rcx], cl; add al, 0; add byte ptr [rax + 0x63], cl; std; mov eax, 3; syscall; 
0x00000000001092b4: mov byte ptr [rcx], cl; hlt; inc dword ptr [rbp - 0x7b]; in al, 0x89; ret 0x87e; 
0x0000000000070b39: mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x000000000015a4c0: mov byte ptr [rcx], dl; ret; 
0x0000000000117e48: mov byte ptr [rcx], r11b; movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x00000000001a69f4: mov byte ptr [rcx], r8b; add byte ptr [rax - 0x21], ch; hlt; jmp qword ptr [rcx]; 
0x00000000000a0dfa: mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000009f39b: mov byte ptr [rdi + 0x10], cl; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009dbbb: mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000a0e0b: mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x000000000009e558: mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009cee8: mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000000a0e10: mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000a0e32: mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000a0e50: mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000a0e70: mov byte ptr [rdi + 0x14], ch; ret; 
0x000000000009e5ce: mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009cf3e: mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000009f421: mov byte ptr [rdi + 0x14], dl; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009dc11: mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000a0e91: mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000a0e96: mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000f0b38: mov byte ptr [rdi + 0x16], 0; and eax, 0xfffffecf; or eax, 0x30; mov dword ptr [rdi + 8], eax; ret; 
0x00000000000a0eb2: mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000a0ed2: mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000a0ef2: mov byte ptr [rdi + 0x18], ch; ret; 
0x000000000009f4a3: mov byte ptr [rdi + 0x18], cl; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009dc93: mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000a0f13: mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x000000000009e650: mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009cfc0: mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000000a0f18: mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000a0f3a: mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000a0f58: mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000a0f78: mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000a0f94: mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000a0fb4: mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000a0fd4: mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000a0ff4: mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000009dd95: mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000a1015: mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000a101a: mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000e3f0a: mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; mov qword ptr [rsi + 8], rcx; mov qword ptr [rsi + 0x10], r8; ret; 
0x00000000000a106a: mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000a0d40: mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000a0d5e: mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000a0d7e: mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000a0da0: mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000a0dc0: mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000a0de0: mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000a0c76: mov byte ptr [rdi + 1], ch; ret; 
0x0000000000117d93: mov byte ptr [rdi + 1], cl; add rdi, 2; call 0x8c4b0; mov eax, ebx; pop rbx; ret; 
0x0000000000117c32: mov byte ptr [rdi + 1], dh; ret; 
0x0000000000117c31: mov byte ptr [rdi + 1], sil; ret; 
0x0000000000096943: mov byte ptr [rdi + 2], 0; lea rax, qword ptr [rdi + 2]; ret; 
0x00000000000968a3: mov byte ptr [rdi + 2], 0; mov rax, rdi; ret; 
0x0000000000161d06: mov byte ptr [rdi + 2], 0; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000a0c88: mov byte ptr [rdi + 2], ch; ret; 
0x000000000009e406: mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009ce06: mov byte ptr [rdi + 2], dh; ret; 
0x00000000000967e4: mov byte ptr [rdi + 2], dl; add rdi, 3; mov rax, rdi; ret; 
0x000000000009f229: mov byte ptr [rdi + 2], dl; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000009dad9: mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a0c99: mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000a0c9e: mov byte ptr [rdi + 3], ch; ret; 
0x0000000000096962: mov byte ptr [rdi + 4], 0; lea rax, qword ptr [rdi + 4]; ret; 
0x00000000000968c2: mov byte ptr [rdi + 4], 0; mov rax, rdi; ret; 
0x00000000000a0cb6: mov byte ptr [rdi + 4], ch; ret; 
0x0000000000096804: mov byte ptr [rdi + 4], cl; add rdi, 5; mov dword ptr [rdi - 5], eax; mov rax, rdi; ret; 
0x000000000009e422: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000009ce22: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000009f257: mov byte ptr [rdi + 4], dl; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000009daf7: mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a0cc7: mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000a0ccc: mov byte ptr [rdi + 5], ch; ret; 
0x00000000000968e9: mov byte ptr [rdi + 6], 0; ret; 
0x00000000000a0cde: mov byte ptr [rdi + 6], ch; ret; 
0x0000000000125d64: mov byte ptr [rdi + 6], dl; movzx edx, byte ptr [rdi + 7]; and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x0000000000125d72: mov byte ptr [rdi + 7], al; ret; 
0x00000000000a0cfc: mov byte ptr [rdi + 7], ch; ret; 
0x00000000000d0af0: mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000d0ab6: mov byte ptr [rdi + 8], 0x16; mov eax, 1; ret; 
0x00000000000d0b20: mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x00000000000d0b47: mov byte ptr [rdi + 8], 0x1a; mov eax, 2; ret; 
0x00000000000d0b90: mov byte ptr [rdi + 8], 0x1c; mov eax, 2; ret; 
0x00000000000d0b7d: mov byte ptr [rdi + 8], 0x1e; mov eax, 2; ret; 
0x00000000000d0b0c: mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], 0x5b; mov eax, 1; ret; 
0x00000000000d0b65: mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000d0ae0: mov byte ptr [rdi + 8], 1; mov eax, 1; ret; 
0x00000000000d0ac0: mov byte ptr [rdi + 8], 2; xor eax, eax; ret; 
0x00000000000a0d08: mov byte ptr [rdi + 8], ch; ret; 
0x000000000009e473: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009ce63: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000009f2a9: mov byte ptr [rdi + 8], dl; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009db39: mov byte ptr [rdi + 8], dl; ret; 
0x00000000000a0d19: mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000a0d1e: mov byte ptr [rdi + 9], ch; ret; 
0x0000000000097a60: mov byte ptr [rdi + rcx], 0xb6; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000117dad: mov byte ptr [rdi + rdx], 0; pop rbx; ret; 
0x00000000001344d7: mov byte ptr [rdi - 0x3345fffc], dh; add byte ptr [rax], al; add al, ch; jnp 0x13449a; out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x00000000001a0158: mov byte ptr [rdi - 0xf], bh; call qword ptr [rax]; 
0x000000000009683e: mov byte ptr [rdi - 1], al; mov dword ptr [rdi - 7], eax; mov rax, rdi; ret; 
0x000000000014439b: mov byte ptr [rdi - 1], dl; ret; 
0x000000000009683d: mov byte ptr [rdi - 1], r8b; mov dword ptr [rdi - 7], eax; mov rax, rdi; ret; 
0x00000000000f3220: mov byte ptr [rdi], 0; mov byte ptr [rip + 0x2ce3d7], cl; mov rax, rdi; mov byte ptr [r9 - 1], 0; ret; 
0x0000000000096870: mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000001f668: mov byte ptr [rdi], 0; ret; 
0x0000000000037648: mov byte ptr [rdi], 0; xor eax, eax; ret; 
0x00000000000d0b10: mov byte ptr [rdi], 0x5b; mov eax, 1; ret; 
0x00000000000d0b69: mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000001a7cc8: mov byte ptr [rdi], ch; cmc; jmp qword ptr [rcx]; 
0x00000000000a0c62: mov byte ptr [rdi], ch; ret; 
0x000000000006750a: mov byte ptr [rdi], cl; xchg dword ptr [rax - 0x76fffff5], ebp; ret 0x348; 
0x0000000000067483: mov byte ptr [rdi], cl; xchg dword ptr [rbp - 0x76ffffe9], edx; ret 0x348; 
0x0000000000067932: mov byte ptr [rdi], cl; xchg dword ptr [rbp - 0x76fffffd], ebp; ret 0x348; 
0x000000000006757c: mov byte ptr [rdi], cl; xchg dword ptr [rdi - 0x76fffff6], esp; ret 0x348; 
0x0000000000067851: mov byte ptr [rdi], cl; xchg dword ptr [rip - 0x76fffffd], ecx; ret 0x348; 
0x00000000000967a9: mov byte ptr [rdi], dh; add rdi, 1; mov rax, rdi; ret; 
0x000000000009e3e0: mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000009cde0: mov byte ptr [rdi], dh; ret; 
0x000000000009f202: mov byte ptr [rdi], dl; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009dab2: mov byte ptr [rdi], dl; ret; 
0x00000000000a0c72: mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000967a8: mov byte ptr [rdi], sil; add rdi, 1; mov rax, rdi; ret; 
0x000000000009c90a: mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x00000000000f07fc: mov byte ptr [rdx + 0x23], dl; mov rdx, r10; mov byte ptr [rsp - 0x58], al; mov eax, ebp; syscall; 
0x0000000000097a0e: mov byte ptr [rdx + 1], 0; ret; 
0x0000000000099b32: mov byte ptr [rdx + 1], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000099b42: mov byte ptr [rdx + 2], ah; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000015c849: mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x0000000000099b5e: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000099b72: mov byte ptr [rdx + 4], ah; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000015c877: mov byte ptr [rdx + 4], al; lea rax, qword ptr [rdx + 4]; ret; 
0x0000000000099b8c: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000009c8a0: mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000099be2: mov byte ptr [rdx + 8], ah; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000099c10: mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x00000000000733d5: mov byte ptr [rdx + rax], 0; pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x00000000001635cb: mov byte ptr [rdx + rdx*8 + 0xac840f], 0; add dh, dh; ret 0x7501; 
0x000000000012a085: mov byte ptr [rdx], 0; add rsp, 0x100; pop rbx; pop rbp; pop r12; ret; 
0x0000000000111062: mov byte ptr [rdx], 0; pop r12; ret; 
0x00000000000f7ec1: mov byte ptr [rdx], 0; pop rbx; ret; 
0x00000000000602cb: mov byte ptr [rdx], al; add byte ptr [rax - 0x77], cl; ret 0xb848; 
0x00000000001ac848: mov byte ptr [rdx], al; idiv bh; ret 3; 
0x000000000015c822: mov byte ptr [rdx], al; lea rax, qword ptr [rdx]; ret; 
0x0000000000099b37: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000101ebd: mov byte ptr [rdx], bpl; movsx eax, bpl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000101ebe: mov byte ptr [rdx], ch; movsx eax, bpl; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f3223: mov byte ptr [rip + 0x2ce3d7], cl; mov rax, rdi; mov byte ptr [r9 - 1], 0; ret; 
0x000000000002ef88: mov byte ptr [rip + 0x390cef], dl; ret; 
0x000000000009fe32: mov byte ptr [rip + 0xc634900], cl; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000000245c: mov byte ptr [rip - 0x22beffe8], dh; out 0xa9, al; ret 0xbd07; 
0x000000000008113d: mov byte ptr [rsi + rbx], bh; mov rax, rsi; pop rbx; ret; 
0x000000000008113c: mov byte ptr [rsi + rbx], dil; mov rax, rsi; pop rbx; ret; 
0x00000000001870c4: mov byte ptr [rsi - 0x79a90004], 0xfc; jmp rsi; 
0x00000000001ac7dc: mov byte ptr [rsi - 0xb], ch; jmp qword ptr [rdx]; 
0x00000000001a0c34: mov byte ptr [rsi - 0xf], bh; jmp qword ptr [rdx]; 
0x00000000001b3468: mov byte ptr [rsi - 9], ah; call rdi; 
0x00000000000fc332: mov byte ptr [rsp + 0x26], 0; mov rdi, r9; mov byte ptr [rbp - 0x689], 0x73; mov eax, 0x14; syscall; 
0x000000000012a687: mov byte ptr [rsp + rbx], 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f0802: mov byte ptr [rsp - 0x58], al; mov eax, ebp; syscall; 
0x00000000000b9f2a: mov byte ptr [rsp], 0; call 0xb80f0; add rsp, 0x18; ret; 
0x00000000000bc25a: mov byte ptr [rsp], 0; call 0xb9fa0; add rsp, 0x18; ret; 
0x00000000001888ad: mov ch, 0; add ah, ah; sbb esp, ebp; jmp rsp; 
0x0000000000132d14: mov ch, 0; add byte ptr [rax], al; syscall; 
0x00000000001888a5: mov ch, 0; add byte ptr [rcx + rbx - 0x4a530014], bh; add byte ptr [rax], al; in al, 0x19; in al, dx; jmp rsp; 
0x0000000000173742: mov ch, 0x31; mov ah, bl; push rsi; ret; 
0x0000000000174a83: mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000001aabe4: mov ch, 0x51; cmc; jmp qword ptr [rdx]; 
0x000000000019b614: mov ch, 0x51; out dx, al; jmp qword ptr [rdx]; 
0x00000000000d2082: mov ch, 0x83; ret 0x8901; 
0x0000000000196adc: mov ch, 0x84; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000af4e2: mov ch, 0x89; ret 0xe283; 
0x0000000000175e1f: mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000001767ca: mov ch, 0xab; ret; 
0x00000000001728f5: mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x000000000009cd68: mov ch, 0xd; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000178031: mov ch, 0xf0; call qword ptr [rax]; 
0x0000000000178045: mov ch, 0xf0; inc dword ptr [rcx + 0x5efff0b8]; mov bh, 0xf0; jmp rdi; 
0x00000000001a5d09: mov ch, 0xf4; call qword ptr [rbx]; 
0x00000000001afd11: mov ch, 0xf6; call qword ptr [rax]; 
0x00000000000a4693: mov ch, 0xf8; jmp qword ptr [rsi + 0x2e]; 
0x0000000000199ba9: mov ch, 0xfc; jmp qword ptr [rcx]; 
0x00000000001782fd: mov ch, 0xfd; jmp qword ptr [rax - 0x49]; 
0x000000000019a96c: mov ch, 0xff; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a9765: mov ch, 1; add al, bl; outsb dx, byte ptr [rsi]; cmc; jmp qword ptr [rdi + 1]; 
0x000000000018d60d: mov ch, 2; add byte ptr [rax], dl; and al, 0xfa; jmp rsp; 
0x000000000018d605: mov ch, 2; add cl, dh; and edi, edx; lcall ptr [rbp + rsi*4 + 0x24100002]; cli; jmp rsp; 
0x000000000004876c: mov ch, 5; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000001b798c: mov ch, 5; add byte ptr [rax], al; ret; 
0x0000000000160bb6: mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000001ac498: mov ch, bh; cmc; call qword ptr [rax]; 
0x00000000001347ae: mov ch, bl; add byte ptr [rax], al; add dh, dh; ret; 
0x00000000000eb595: mov ch, byte ptr [rip + 0x75c08500]; pop rsp; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x00000000001a1c68: mov ch, ch; int1; call qword ptr [rsi]; 
0x0000000000197325: mov ch, ch; jmp qword ptr [rdx]; 
0x00000000001aa678: mov ch, dl; cmc; jmp qword ptr [rsi]; 
0x00000000000faa41: mov cl, 0; add byte ptr [rax], al; syscall; 
0x000000000008bd7b: mov cl, 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000012295b: mov cl, 0; add byte ptr [rbp - 0x3f6af040], al; add rsp, 8; movzx eax, al; ret; 
0x000000000003ccb3: mov cl, 0x11; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000fbeb3: mov cl, 0x1f; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001aaa0c: mov cl, 0x22; sti; jmp qword ptr [rdx]; 
0x0000000000003b60: mov cl, 0x22; xchg eax, ebp; ret; 
0x0000000000132d27: mov cl, 0x28; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000132cf4: mov cl, 0x28; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000108a5b: mov cl, 0x2b; add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x44745]; ret; 
0x00000000000eafb3: mov cl, 0x2e; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faab3: mov cl, 0x33; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000007a9f7: mov cl, 0x35; ret; 
0x0000000000034047: mov cl, 0x38; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000022cb2: mov cl, 0x39; add byte ptr [rdi + rax*8], ah; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, edi; ret; 
0x00000000000fa4b3: mov cl, 0x39; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000019b02c: mov cl, 0x3a; out dx, al; jmp qword ptr [rdx]; 
0x00000000001082eb: mov cl, 0x3d; mov r11d, 0x3948002b; ret 0xda75; 
0x00000000000bc322: mov cl, 0x48; mov eax, dword ptr [rip + 0x307ce6]; lea rdi, qword ptr [rip + 0x3037cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001ab7bc: mov cl, 0x5c; cmc; jmp qword ptr [rdx]; 
0x00000000000f217e: mov cl, 0x90; mov eax, 0x99; syscall; 
0x00000000000f48b3: mov cl, 0x95; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000132db3: mov cl, 0xb0; sub byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000aef4b: mov cl, 0xb; xor dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002917b: mov cl, 0xba; adc eax, 0x358d4800; mov esi, dword ptr [rdx]; adc eax, 0x3d8d4800; ret; 
0x00000000000f22b3: mov cl, 0xbb; sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000108033: mov cl, 0xbf; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000f1db3: mov cl, 0xc0; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000107b23: mov cl, 0xc3; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000b06b3: mov cl, 0xd7; xor byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000b05b3: mov cl, 0xd8; xor byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000108485: mov cl, 0xd; lodsd eax, dword ptr [rsi]; mov ecx, 0x3948002b; ret 0x840f; 
0x0000000000002b59: mov cl, 0xda; fnsave dword ptr [rdx - 0x6b]; test word ptr [rbx - 0x2e], bp; cmp dl, byte ptr [rdi]; ret; 
0x0000000000192209: mov cl, 0xea; call qword ptr [rax]; 
0x0000000000192221: mov cl, 0xea; call qword ptr [rdx]; 
0x00000000001921f1: mov cl, 0xea; jmp qword ptr [rax]; 
0x0000000000199ae4: mov cl, 0xef; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000189fe1: mov cl, 0xf0; jmp rsp; 
0x00000000001af6dc: mov cl, 0xf1; cmc; jmp qword ptr [rdx]; 
0x00000000001a5b61: mov cl, 0xf4; jmp qword ptr [rcx]; 
0x00000000000ee2b3: mov cl, 0xfb; sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000018759d: mov cl, 0xfc; call rsi; 
0x000000000018759d: mov cl, 0xfc; call rsi; mov al, 0xfc; jmp qword ptr [rsi - 0x50]; 
0x0000000000187599: mov cl, 0xfc; inc dword ptr [rsi - 0x4f]; cld; call rsi; 
0x0000000000187599: mov cl, 0xfc; inc dword ptr [rsi - 0x4f]; cld; call rsi; mov al, 0xfc; jmp qword ptr [rsi - 0x50]; 
0x000000000018761d: mov cl, 0xfc; inc edx; mov al, 0xfc; call qword ptr [rdx - 0x50]; 
0x000000000018761d: mov cl, 0xfc; inc edx; mov al, 0xfc; call qword ptr [rdx - 0x50]; cld; jmp rdx; 
0x0000000000187559: mov cl, 0xfc; jmp qword ptr [rax - 0x4f]; 
0x00000000000bd280: mov cl, 0xfc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000187619: mov cl, 0xfc; push qword ptr [rdx]; mov cl, 0xfc; inc edx; mov al, 0xfc; call qword ptr [rdx - 0x50]; 
0x00000000001782f5: mov cl, 0xfd; jmp qword ptr [rax - 0x4d]; 
0x0000000000082df2: mov cl, 0xff; jmp qword ptr [rsi + 0x66]; 
0x000000000014b977: mov cl, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000010823b: mov cl, 5; idiv dword ptr [rbx + 0x3948002b]; ret 0xda75; 
0x00000000000fb8f5: mov cl, byte ptr [rax - 0x7d]; ret; 
0x000000000008eec5: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000000e1878: mov cl, byte ptr [rcx]; add byte ptr [rdi], cl; mov dh, 0xc8; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x000000000009f394: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009dbb4: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000a0e04: mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x000000000009f498: mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009dc88: mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x000000000009dd89: mov cl, byte ptr [rsi + 0x20]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x000000000001f6dd: mov cl, byte ptr [rsi]; add byte ptr [rax - 0x7d], cl; in al, dx; or byte ptr [rcx + 0x415d5bd8], 0x5c; ret; 
0x00000000001a1275: mov cl, dh; jmp qword ptr [rdx]; 
0x0000000000175eac: mov cs, edi; ret 0x8b36; 
0x00000000000d6302: mov cs, esi; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret 0x8b48; 
0x000000000002a295: mov cs, word ptr [rax]; add eax, 0x29480000; ret 0x8b49; 
0x000000000013d63e: mov cs, word ptr [rip - 0x7cb80000]; ret 0xe910; 
0x000000000009e564: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009f3b4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009cef4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000a0e24: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x000000000009e668: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009f4b8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009cfd8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000001447e4: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000009f220: mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000009dad0: mov cx, word ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x000000000014d0c4: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000009e400: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009ce00: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000134e96: mov dh, 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28a9ef]; xor ebp, ebp; call qword ptr [rax + 0x28]; 
0x0000000000132d64: mov dh, 0; add byte ptr [rax], al; syscall; 
0x00000000000798c7: mov dh, 0; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000007a5c6: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002ef7a: mov dh, 0; cmp al, 0xff; cmovne edx, eax; lea rax, qword ptr [rip + 0x390c98]; mov byte ptr [rip + 0x390cef], dl; ret; 
0x000000000007b1d9: mov dh, 0; pop rbx; ret; 
0x0000000000073653: mov dh, 0; ret; 
0x000000000005f056: mov dh, 0x14; adc byte ptr [rax - 0x73], cl; add eax, 0x1187a0; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; jmp rax; 
0x000000000004dd89: mov dh, 0x14; add cl, byte ptr [rax - 0x73]; add eax, 0x128fed; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x000000000014d1a1: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000008bf64: mov dh, 0x16; sub eax, edx; ret; 
0x0000000000003611: mov dh, 0x1b; add eax, 0x572808a8; call qword ptr [rsi + 0x6f]; 
0x0000000000047473: mov dh, 0x28; add dword ptr [rax], eax; add byte ptr [rdi + 2], bh; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000022b66: mov dh, 0x32; adc al, 0; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x0000000000088528: mov dh, 0x33; add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb4528]; ret; 
0x00000000001089d6: mov dh, 0x38; clc; call qword ptr [rax - 0x18]; 
0x00000000000c8486: mov dh, 0x3c; mov eax, 0xfffb08e9; jmp qword ptr [rsi - 0x70]; 
0x00000000000b8196: mov dh, 0x40; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000007bda7: mov dh, 0x40; inc dword ptr [rbx - 0x3ca410dd]; nop; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000049b6d: mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x00000000000c3b2e: mov dh, 0x42; add cl, byte ptr [rax - 0x7d]; ret 0x8301; 
0x0000000000117acc: mov dh, 0x42; add dword ptr [rax - 0x73], ecx; add r8b, byte ptr [rdx]; cmp rcx, rax; sbb eax, eax; ret; 
0x00000000000c379a: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000108e9f: mov dh, 0x42; dec dword ptr [rcx - 0x7d]; ret; 
0x0000000000047e3d: mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000011a622: mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret 0x3108; 
0x0000000000059c6f: mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000005fe6e: mov dh, 0x45; or al, 0x89; ret 0xeac0; 
0x00000000000964fb: mov dh, 0x45; ret 0x8348; 
0x00000000000962d3: mov dh, 0x45; ret 0x8349; 
0x00000000000962e6: mov dh, 0x45; ret; 
0x0000000000097a63: mov dh, 0x46; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000163661: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000163651: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000163621: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000163641: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000163631: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000000279f5: mov dh, 0x48; dec dword ptr [rcx - 0x7d]; ret; 
0x00000000000e22ad: mov dh, 0x48; xor byte ptr [rax - 0x77], cl; ret 0xf980; 
0x00000000000979f6: mov dh, 0x49; dec dword ptr [rcx - 0x7d]; ret 0x8401; 
0x0000000000027a3f: mov dh, 0x4a; dec dword ptr [rax - 0x7d]; ret 0x4101; 
0x000000000002a9f3: mov dh, 0x4a; inc dword ptr [rcx - 0x78]; add rcx, qword ptr [r9 + 0x39]; ret; 
0x0000000000174be2: mov dh, 0x4e; ret 0x474c; 
0x0000000000117e4d: mov dh, 0x52; add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x0000000000033af2: mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000006cd84: mov dh, 0x53; or al, 0xf6; ret 0x7404; 
0x000000000006d4c1: mov dh, 0x53; or al, 0xf6; ret 0xf04; 
0x00000000000e7620: mov dh, 0x54; add eax, 0xbe0f4101; ret 0xe883; 
0x0000000000163665: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x0000000000163655: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x0000000000163625: mov dh, 0x56; int1; sub eax, edx; ret; 
0x000000000005025f: mov dh, 0x56; or al, 0x85; sal byte ptr [rbp + 5], 0xf6; ret 0x7450; 
0x0000000000163635: mov dh, 0x56; sub eax, edx; ret; 
0x00000000000f5571: mov dh, 0x57; sbb byte ptr [rcx - 0xa], al; ret 0x7401; 
0x00000000000e2b4b: mov dh, 0x59; or byte ptr [rcx + 0x63], cl; sbb al, 0x9a; add rbx, r10; jmp rbx; 
0x00000000000266ef: mov dh, 0x5c; adc eax, 0x3d8d4800; ret; 
0x00000000001606d6: mov dh, 0x5c; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001ab804: mov dh, 0x5c; cmc; jmp qword ptr [rdx]; 
0x0000000000186bb4: mov dh, 0x62; cld; inc dword ptr [rsi + 0x62]; cld; call rsi; 
0x000000000003e5fc: mov dh, 0x75; add byte ptr [rax - 0x7c], al; test byte ptr [rdi], 0x84; ret 0x15; 
0x000000000007b5ff: mov dh, 0x75; add byte ptr [rcx + rcx*4 - 0x19], cl; lea r13, qword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x00000000000c801d: mov dh, 0x7b; dec dword ptr [rcx - 0x7d]; ret 0x4101; 
0x00000000001178a6: mov dh, 0x83; int1; jmp qword ptr [rsi + 0xf]; 
0x00000000001281ce: mov dh, 0x88; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x00000000001a1614: mov dh, 0x89; int1; jmp qword ptr [rdx]; 
0x00000000001870a0: mov dh, 0x8a; cld; inc dword ptr [rsi - 0x76]; cld; call rsi; 
0x0000000000187590: mov dh, 0xab; cld; jmp qword ptr [rsi]; 
0x0000000000187598: mov dh, 0xb1; cld; inc dword ptr [rsi - 0x4f]; cld; call rsi; 
0x00000000001728f6: mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000176ea0: mov dh, 0xb; add byte ptr [rax], al; ret 0xfffd; 
0x0000000000121a8e: mov dh, 0xc0; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000121a28: mov dh, 0xc0; add rsp, 0x10; pop rbx; ret; 
0x000000000012dd4c: mov dh, 0xc0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000fb64e: mov dh, 0xc0; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000001215dd: mov dh, 0xc0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b0076: mov dh, 0xc0; lea eax, dword ptr [rax + rax - 1]; ret; 
0x00000000000c268f: mov dh, 0xc0; lea rax, qword ptr [rax + rax - 1]; ret; 
0x0000000000036a6d: mov dh, 0xc0; mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x000000000006c758: mov dh, 0xc0; movsxd rax, dword ptr [r8 + rax*4]; add rax, r8; jmp rax; 
0x0000000000054a53: mov dh, 0xc0; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x00000000000c7c15: mov dh, 0xc0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000006c818: mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x0000000000101e91: mov dh, 0xc0; neg eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000005db7d: mov dh, 0xc0; neg eax; pop rbx; ret; 
0x0000000000022ca9: mov dh, 0xc0; neg eax; ret; 
0x0000000000125fd4: mov dh, 0xc0; pop r12; ret; 
0x000000000012287e: mov dh, 0xc0; pop rbp; ret; 
0x0000000000048a53: mov dh, 0xc0; pop rbx; neg eax; pop rbp; ret; 
0x00000000000f4bb7: mov dh, 0xc0; pop rbx; ret; 
0x00000000000375ba: mov dh, 0xc0; ret; 
0x000000000008bf84: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000000a1a88: mov dh, 0xc1; pop rbx; ret; 
0x00000000000a1ab0: mov dh, 0xc2; pop rbx; ret; 
0x000000000007a726: mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x0000000000175e24: mov dh, 0xc7; ret 0xe71f; 
0x0000000000070b3e: mov dh, 0xc7; ret; 
0x00000000000deccd: mov dh, 0xc8; mov r14d, r8d; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000e187c: mov dh, 0xc8; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x0000000000086935: mov dh, 0xc; adc dword ptr [rax - 0x7d], ecx; ret 0x4201; 
0x00000000000b5fc4: mov dh, 0xd0; lea rax, qword ptr [rip + 0xc2efb]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000b52ff: mov dh, 0xd0; lea rax, qword ptr [rip + 0xc3ae4]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000b4c69: mov dh, 0xd2; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000008bf8a: mov dh, 0xd2; sub eax, edx; ret; 
0x00000000000b8281: mov dh, 0xd6; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000025862: mov dh, 0xd6; test sil, sil; mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x000000000009cc96: mov dh, 0xd; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000054b82: mov dh, 0xdb; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000176957: mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000000883d1: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000015fc94: mov dh, 0xe; sub eax, ecx; ret; 
0x00000000000d43ac: mov dh, 0xed; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x0000000000178029: mov dh, 0xf0; call qword ptr [rax - 0xf000f4a]; mov ch, 0xf0; call qword ptr [rax]; 
0x0000000000178041: mov dh, 0xf0; jmp qword ptr [rax - 0x4b]; 
0x000000000017802d: mov dh, 0xf0; push rax; mov ch, 0xf0; call qword ptr [rax]; 
0x000000000018a261: mov dh, 0xf1; dec dword ptr [rdx + rbp*2 - 0x489bffff]; int1; push qword ptr [rdx + rbp*2 - 0x485bffff]; int1; jmp rsp; 
0x00000000001afd79: mov dh, 0xf6; call qword ptr [rdi]; 
0x0000000000074e7f: mov dh, 0xf6; ret 0x7508; 
0x000000000010c5ad: mov dh, 0xf6; shl eax, 8; or eax, esi; bswap eax; ret; 
0x000000000017c0ad: mov dh, 0xfa; dec esp; mov dh, 0xfa; jmp rsp; 
0x000000000017c0b1: mov dh, 0xfa; jmp rsp; 
0x000000000017c0a5: mov dh, 0xfa; ljmp ptr [rsi + rsi*4 - 0x49430006]; cli; dec esp; mov dh, 0xfa; jmp rsp; 
0x000000000010c577: mov dh, 0xff; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000fa4f5: mov dh, 0xff; shr rax, 0xc; xor al, al; or eax, edi; ret; 
0x000000000007a5d1: mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000014b4f7: mov dh, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000d0b62: mov dh, 4; add al, dh; or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000e0d95: mov dh, 4; or byte ptr [rcx], bh; ret 0x1372; 
0x000000000012e1d9: mov dh, 6; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000156e34: mov dh, 7; lea rdx, qword ptr [rip + 0x10443]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001548d4: mov dh, 7; lea rdx, qword ptr [rip + 0x129a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013fde4: mov dh, 7; lea rdx, qword ptr [rip + 0x27493]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013e434: mov dh, 7; lea rdx, qword ptr [rip + 0x28e43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013ca44: mov dh, 7; lea rdx, qword ptr [rip + 0x2a833]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013aa74: mov dh, 7; lea rdx, qword ptr [rip + 0x2c803]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000915d4: mov dh, 7; lea rdx, qword ptr [rip + 0xd5ca3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000008eed4: mov dh, 7; lea rdx, qword ptr [rip + 0xd83a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000015fc91: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000008bf61: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000883d4: mov dh, 7; sub eax, ecx; ret; 
0x00000000001b4031: mov dh, bh; call qword ptr [rdx]; 
0x0000000000194c1c: mov dh, byte ptr [rcx - 0x13]; jmp qword ptr [rdx]; 
0x00000000000a1c5e: mov dh, byte ptr [rdi + rbx*8 - 0xd]; ret; 
0x00000000001b588c: mov dh, byte ptr [rdi + rsi*8]; jmp qword ptr [rdx]; 
0x00000000001adf4d: mov dh, ch; jmp qword ptr [rdx]; 
0x000000000017819d: mov dh, cl; call rax; 
0x00000000001a165d: mov dh, cl; jmp qword ptr [rdx]; 
0x00000000001a2919: mov dh, dl; jmp qword ptr [rbp]; 
0x00000000001a28d1: mov dh, dl; jmp qword ptr [rcx]; 
0x00000000001a2949: mov dh, dl; jmp qword ptr [rdi + 1]; 
0x00000000000570f6: mov di, bp; jmp qword ptr [rsi + 0xf]; 
0x00000000000facb4: mov dl, 0; add byte ptr [rax], al; syscall; 
0x0000000000003a58: mov dl, 0x1e; ret; 
0x00000000000fbcb2: mov dl, 0x21; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001089bb: mov dl, 0x2b; add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x41d15]; ret; 
0x000000000019ad14: mov dl, 0x2b; out dx, al; jmp qword ptr [rdx]; 
0x00000000000faeb2: mov dl, 0x2f; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000186c10: mov dl, 0x5f; cld; jmp qword ptr [rdx]; 
0x0000000000186c18: mov dl, 0x65; cld; inc dword ptr [rdx + 0x65]; cld; call rdx; 
0x000000000016552d: mov dl, 0x66; nop; pop rbx; pop rbp; pop r12; ret; 
0x0000000000187344: mov dl, 0x7c; cld; jmp qword ptr [rdx]; 
0x00000000000f9502: mov dl, 0x82; sub al, 0; ret; 
0x0000000000187144: mov dl, 0x86; cld; inc dword ptr [rdx - 0x7a]; cld; call rdx; 
0x000000000002f9a2: mov dl, 0x8b; add al, 7; ret; 
0x00000000001ae51c: mov dl, 0x97; cmc; jmp qword ptr [rdx]; 
0x0000000000176080: mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x000000000002458a: mov dl, 0xa; add byte ptr [rax], al; lea rdi, qword ptr [rip + 0x39b4db]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000018763c: mov dl, 0xad; cld; inc dword ptr [rdx - 0x53]; cld; call rdx; 
0x00000000001728f2: mov dl, 0xb3; mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000000c26c5: mov dl, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000340ca: mov dl, 0xbb; cmp byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001337da: mov dl, 0xc0; sub byte ptr [rax], al; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x000000000018d418: mov dl, 0xd4; stc; lcall ptr [rdx + rbp*4 - 0x2b2efffe]; stc; jmp rsp; 
0x00000000001a95a4: mov dl, 0xea; hlt; jmp qword ptr [rdx]; 
0x000000000011efad: mov dl, 0xeb; or dword ptr [rax - 0x7d], ecx; ret 0x3904; 
0x0000000000196e81: mov dl, 0xed; call qword ptr [rdi + 1]; 
0x00000000001a5bb9: mov dl, 0xf4; call qword ptr [rbp]; 
0x00000000000a4972: mov dl, 0xf8; jmp qword ptr [rsi + 0x2e]; 
0x0000000000133e4a: mov dl, 0xfb; sub byte ptr [rax], al; mov eax, 1; add rsp, 8; ret; 
0x0000000000187555: mov dl, 0xfc; call rax; 
0x0000000000187555: mov dl, 0xfc; call rax; mov cl, 0xfc; jmp qword ptr [rax - 0x4f]; 
0x0000000000187595: mov dl, 0xfc; push qword ptr [rsi + 0x46fffcb1]; mov cl, 0xfc; call rsi; 
0x000000000019a9fc: mov dl, 0xff; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000114814: mov dl, 2; cmove eax, edx; ret; 
0x000000000015e6ea: mov dl, 3; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000f63f2: mov dl, 4; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000000f6312: mov dl, 5; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x000000000009dc07: mov dl, byte ptr [rsi + 0x14]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x000000000009f223: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000009dad3: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a0c93: mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x000000000009f252: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000009daf2: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a0cc2: mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x000000000009f2a3: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009db33: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000a0d13: mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x0000000000144420: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000009f200: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009dab0: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000000a0c70: mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000474dc: mov ds, word ptr [rax + 0x4c000000]; mov eax, dword ptr [rsi + 0x28]; mov r9, qword ptr [rsi + 0x30]; mov rsi, qword ptr [rsi + 0x70]; xor eax, eax; ret; 
0x00000000000f80d6: mov ds, word ptr [rbp + 0x2c]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000807fc: mov ds, word ptr [rdx + 0x48000000]; mov eax, dword ptr [rip + 0x33d5b0]; mov qword ptr [rsp + 0x28], r14; mov rdi, r14; call qword ptr [rax]; 
0x00000000000fa372: mov dword ptr [0x2d0], eax; pop rax; pop rdi; call rax; 
0x00000000000c1cf3: mov dword ptr [0x2d0], esi; ret; 
0x00000000000fa36a: mov dword ptr [0x2d4], eax; mov dword ptr fs:[0x2d0], eax; pop rax; pop rdi; call rax; 
0x00000000000c1146: mov dword ptr [0x2d4], edx; mov eax, 0x3a; syscall; 
0x000000000005ef95: mov dword ptr [ecx], edx; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x00000000001281d6: mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x00000000000f09c4: mov dword ptr [r8 + 0x21], esi; ret; 
0x00000000000f09bb: mov dword ptr [r8 + 0x34], edx; mov dword ptr [r8 + 0x38], edx; mov word ptr [r8 + 0x21], si; ret; 
0x00000000000f09bf: mov dword ptr [r8 + 0x38], edx; mov word ptr [r8 + 0x21], si; ret; 
0x0000000000123b9d: mov dword ptr [r8 + 0x68], eax; movzx eax, word ptr [rcx + 0x88]; mov word ptr [r8 + 0x6c], ax; mov eax, 1; ret; 
0x0000000000123ba9: mov dword ptr [r8 + 0x6c], eax; mov eax, 1; ret; 
0x0000000000123bba: mov dword ptr [r8], eax; mov eax, 1; ret; 
0x0000000000117ef8: mov dword ptr [r8], edi; mov qword ptr [r9], rcx; ret; 
0x0000000000117e54: mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x0000000000020c70: mov dword ptr [r9 + rcx*4], esi; inc dword ptr [rdi + 4]; ret; 
0x0000000000108808: mov dword ptr [r9], r8d; xor eax, eax; ret; 
0x00000000000fc763: mov dword ptr [rax + 0x10], 0; nop word ptr [rax + rax]; mov qword ptr [rip + 0x2c1b85], 0; pop rbp; ret; 
0x00000000000768f8: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rsp + 8], rdi; mov rax, qword ptr [rax + 0x38]; mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x000000000012803c: mov dword ptr [rax + 0x10], edx; mov eax, 1; ret; 
0x00000000000740d9: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000074119: mov dword ptr [rax + 0x10], esi; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000797bc: mov dword ptr [rax + 0x140], edx; mov rax, qword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x0000000000074f79: mov dword ptr [rax + 0x18], edx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000072f39: mov dword ptr [rax + 0x20], edx; pop rbx; ret; 
0x00000000000d1f0b: mov dword ptr [rax + 0x20], edx; xor eax, eax; ret; 
0x00000000000d1f3d: mov dword ptr [rax + 0x20], esi; xor eax, eax; ret; 
0x00000000000f09c5: mov dword ptr [rax + 0x21], esi; ret; 
0x0000000000074f75: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x00000000000f09bc: mov dword ptr [rax + 0x34], edx; mov dword ptr [r8 + 0x38], edx; mov word ptr [r8 + 0x21], si; ret; 
0x00000000000f09c0: mov dword ptr [rax + 0x38], edx; mov word ptr [r8 + 0x21], si; ret; 
0x0000000000074e3e: mov dword ptr [rax + 0x38], esp; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000740dd: mov dword ptr [rax + 0x40], ecx; ret; 
0x0000000000074d4a: mov dword ptr [rax + 0x48], 0; mov rax, qword ptr [r15 + 0xd8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x0000000000075017: mov dword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000147d75: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, qword ptr [rip + 0x3ec0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147cb0: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, qword ptr [rip + 0x3ecd1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001453a5: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, qword ptr [rip + 0x4141c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001452e0: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, qword ptr [rip + 0x414e1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001429d5: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, qword ptr [rip + 0x43c2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142910: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, qword ptr [rip + 0x43cf1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000007500f: mov dword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000122029: mov dword ptr [rax + 0x58], eax; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x000000000003c81e: mov dword ptr [rax + 0x60], edx; call qword ptr [rbx]; 
0x0000000000123b9e: mov dword ptr [rax + 0x68], eax; movzx eax, word ptr [rcx + 0x88]; mov word ptr [r8 + 0x6c], ax; mov eax, 1; ret; 
0x0000000000123baa: mov dword ptr [rax + 0x6c], eax; mov eax, 1; ret; 
0x0000000000036e8c: mov dword ptr [rax + 0x90], edx; add rsp, 0xd0; ret; 
0x0000000000127f1c: mov dword ptr [rax + 0xc], edx; mov eax, 1; ret; 
0x000000000010c574: mov dword ptr [rax + 0xf], 0xe281ffb6; add byte ptr [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000005dcab: mov dword ptr [rax + 4], 1; xor eax, eax; ret; 
0x000000000006de7e: mov dword ptr [rax + 8], eax; add dword ptr [rdx + 4], 1; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x000000000005dca8: mov dword ptr [rax + 8], eax; mov dword ptr [rax + 4], 1; xor eax, eax; ret; 
0x000000000005dc35: mov dword ptr [rax + 8], ecx; add dword ptr [rdx + 4], 1; ret; 
0x00000000000740ce: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000f3101: mov dword ptr [rax + 8], edi; mov qword ptr [rdi], rax; mov qword ptr [rdi + 8], rsi; ret; 
0x0000000000123b24: mov dword ptr [rax + 8], edx; mov eax, 1; ret; 
0x0000000000074112: mov dword ptr [rax + 8], edx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000072f31: mov dword ptr [rax + 8], edx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x00000000000e19df: mov dword ptr [rax + r8*4], edx; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000103d07: mov dword ptr [rax + rax - 0x3ed70000], eax; mov eax, ecx; ret; 
0x00000000000e19e0: mov dword ptr [rax + rax*4], edx; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000008c592: mov dword ptr [rax + rdx - 2], ecx; ret; 
0x000000000012e9ad: mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000000ebdb0: mov dword ptr [rax], 0x16; add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000f0cd8: mov dword ptr [rax], 0x16; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x0000000000036c88: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000efcc8: mov dword ptr [rax], 0x16; mov eax, 1; ret; 
0x00000000000f1958: mov dword ptr [rax], 0x16; mov eax, edi; ret; 
0x0000000000036bf0: mov dword ptr [rax], 0x16; mov rax, -1; ret; 
0x000000000003588e: mov dword ptr [rax], 0x16; mov rdi, rbx; mov eax, 3; syscall; 
0x000000000002e6d1: mov dword ptr [rax], 0x16; movsxd rdi, r13d; mov eax, 3; syscall; 
0x0000000000036ec5: mov dword ptr [rax], 0x16; or eax, 0xffffffff; ret; 
0x00000000000f4c08: mov dword ptr [rax], 0x16; pop rbx; ret; 
0x00000000000f4bc3: mov dword ptr [rax], 0x16; xor eax, eax; pop rbx; ret; 
0x00000000000b05b8: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x0000000000036996: mov dword ptr [rax], 0x22; add rsp, 0x20; pop rbx; ret; 
0x000000000003638e: mov dword ptr [rax], 0x22; add rsp, 8; ret; 
0x0000000000037848: mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000f11c8: mov dword ptr [rax], 0x26; mov rax, -1; ret; 
0x0000000000035768: mov dword ptr [rax], 0x2a; mov rax, rcx; pop rbx; ret; 
0x00000000000f2148: mov dword ptr [rax], 0x4b; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000eb438: mov dword ptr [rax], 0x5f; mov eax, 0xffffffff; ret; 
0x000000000006f6c5: mov dword ptr [rax], 0x89480000; ret 0x8b48; 
0x00000000000f10f8: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000841d8: mov dword ptr [rax], 0xc; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000081160: mov dword ptr [rax], 0xc; xor eax, eax; pop rbx; ret; 
0x0000000000081320: mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x000000000012a813: mov dword ptr [rax], 0xf; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000012a9ff: mov dword ptr [rax], 0xf; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x00000000000f1118: mov dword ptr [rax], 0xffffffff; xor eax, eax; ret; 
0x0000000000132ed0: mov dword ptr [rax], 2; mov eax, 0xffffffff; ret; 
0x00000000000bcde5: mov dword ptr [rax], 2; xor eax, eax; ret; 
0x000000000006ebdf: mov dword ptr [rax], 5; mov rax, rdx; pop rbx; ret; 
0x00000000000357d8: mov dword ptr [rax], 9; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000071420: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000022cb6: mov dword ptr [rax], 9; mov eax, edi; ret; 
0x00000000000a2b43: mov dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000eb231: mov dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000123bbb: mov dword ptr [rax], eax; mov eax, 1; ret; 
0x0000000000123b21: mov dword ptr [rax], eax; mov qword ptr [r8 + 8], rdx; mov eax, 1; ret; 
0x00000000000cb3bf: mov dword ptr [rax], eax; or eax, 0xffffffff; ret; 
0x00000000000e19c6: mov dword ptr [rax], ebp; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f8fcc: mov dword ptr [rax], ebx; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x00000000000f9037: mov dword ptr [rax], ebx; mov eax, 1; add rsp, 0x10; pop rbx; ret; 
0x000000000004983c: mov dword ptr [rax], ecx; mov byte ptr [rax + 8], 0; ret; 
0x0000000000074665: mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x00000000000776da: mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; ret; 
0x0000000000082632: mov dword ptr [rax], ecx; mov rax, qword ptr [rip + 0x33b99d]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x33b88b]; mov qword ptr [rax], rdi; ret; 
0x00000000000f9651: mov dword ptr [rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000117ef9: mov dword ptr [rax], edi; mov qword ptr [r9], rcx; ret; 
0x0000000000082646: mov dword ptr [rax], edi; ret; 
0x000000000007e0e8: mov dword ptr [rax], edx; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000fa243: mov dword ptr [rax], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000ebb24: mov dword ptr [rax], edx; mov eax, 0xffffffff; ret; 
0x00000000001221a3: mov dword ptr [rax], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000745c0: mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x0000000000117e55: mov dword ptr [rax], edx; mov qword ptr [r9], r10; ret; 
0x00000000000740d6: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000074116: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000f110e: mov dword ptr [rax], edx; mov rax, qword ptr [rip + 0x2ccda1]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000f09d3: mov dword ptr [rax], edx; or eax, 0xffffffff; ret; 
0x000000000002fa74: mov dword ptr [rax], edx; ret; 
0x000000000002f90e: mov dword ptr [rax], esi; cmp rdx, rcx; mov rax, -1; cmovne rax, rdx; ret; 
0x000000000008263c: mov dword ptr [rax], esi; mov rax, qword ptr [rip + 0x33b88b]; mov qword ptr [rax], rdi; ret; 
0x00000000000cb3be: mov dword ptr [rax], r8d; or eax, 0xffffffff; ret; 
0x00000000001202ce: mov dword ptr [rbp + 0x18], edx; call qword ptr [rax + 0x28]; 
0x000000000011b154: mov dword ptr [rbp + 0x216], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f0fb8: mov dword ptr [rbp + 0x24], eax; xor eax, eax; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000ffaa6: mov dword ptr [rbp + 0x40], 0xffffffff; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000011b209: mov dword ptr [rbp + 0x40], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000001248ce: mov dword ptr [rbp + 0x50], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000710b2: mov dword ptr [rbp + 0xc0], eax; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e4162: mov dword ptr [rbp + 4], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000c3e44: mov dword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000005fa76: mov dword ptr [rbp - 0x10e0], edx; call qword ptr [rax + 0x38]; 
0x0000000000062e02: mov dword ptr [rbp - 0x10e0], edx; mov rsi, r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000060422: mov dword ptr [rbp - 0x10e8], eax; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000005f145: mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005ef4c: mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 0; jmp rax; 
0x000000000005efea: mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 1; jmp rax; 
0x0000000000060418: mov dword ptr [rbp - 0x10f8], edx; mov rsi, r8; mov qword ptr [rbp - 0x10e8], r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000005f1e3: mov dword ptr [rbp - 0x10fc], 1; jmp rax; 
0x000000000005f1d9: mov dword ptr [rbp - 0x1100], 0x20; mov dword ptr [rbp - 0x10fc], 1; jmp rax; 
0x000000000005f18f: mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005efa0: mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000005f22d: mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005ef56: mov dword ptr [rbp - 0x1118], 0; jmp rax; 
0x000000000005eff4: mov dword ptr [rbp - 0x1118], 1; jmp rax; 
0x000000000005f0fb: mov dword ptr [rbp - 0x1128], 0; jmp rax; 
0x000000000005f0a7: mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f2e2: mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f0f1: mov dword ptr [rbp - 0x1138], 1; mov dword ptr [rbp - 0x1128], 0; jmp rax; 
0x000000000005f32c: mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x000000000005fd8d: mov dword ptr [rbp - 0x1148], ecx; call qword ptr [rax + 0x38]; 
0x0000000000060d9d: mov dword ptr [rbp - 0x1148], ecx; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000061b69: mov dword ptr [rbp - 0x1158], ecx; call qword ptr [rax + 0x38]; 
0x000000000005eed3: mov dword ptr [rbp - 0x1198], ecx; lea rcx, qword ptr [rbp - 0x1000]; mov qword ptr [rbp - 0x11a0], rcx; jmp rax; 
0x000000000005eee1: mov dword ptr [rbp - 0x11a0], ecx; jmp rax; 
0x000000000004b8f6: mov dword ptr [rbp - 0x508], edx; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004d59e: mov dword ptr [rbp - 0x530], 1; jmp rax; 
0x000000000004a30c: mov dword ptr [rbp - 0x538], ecx; mov rsi, qword ptr [rbp - 0x540]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004b7e5: mov dword ptr [rbp - 0x538], edx; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004ecbb: mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004ed6a: mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004e982: mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004d540: mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004baa7: mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000004e9e3: mov dword ptr [rbp - 0x558], 1; jmp rax; 
0x000000000004ec64: mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004dec6: mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004ed74: mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004e98c: mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004ec5a: mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004e79d: mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004e840: mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x00000000000bd882: mov dword ptr [rbp - 0x58], eax; call 0x135c70; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x00000000000bd9f9: mov dword ptr [rbp - 0x58], edx; call 0x135c70; mov rax, rbx; call rax; 
0x0000000000049ffb: mov dword ptr [rbp - 0x598], ecx; lea rcx, qword ptr [rbp - 0x480]; mov qword ptr [rbp - 0x5b0], rcx; jmp rax; 
0x000000000004a009: mov dword ptr [rbp - 0x5b0], ecx; jmp rax; 
0x0000000000023fe5: mov dword ptr [rbp - 0x60], eax; call 0x135c70; mov rdi, r14; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x0000000000023423: mov dword ptr [rbp - 0x68], eax; call rcx; 
0x00000000000fc1d0: mov dword ptr [rbp - 0x6d0], eax; mov eax, ebx; syscall; 
0x0000000000107268: mov dword ptr [rbp - 0x70], edx; mov edx, dword ptr [r12 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; call rax; 
0x00000000001072e8: mov dword ptr [rbp - 0x70], edx; mov edx, dword ptr [r12 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; call rax; 
0x00000000001070ac: mov dword ptr [rbp - 0x70], edx; mov edx, dword ptr [r13 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x00000000001076e5: mov dword ptr [rbp - 0x70], edx; mov edx, dword ptr [r13 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; call rax; 
0x0000000000106ede: mov dword ptr [rbp - 0x70], edx; mov edx, dword ptr [r14 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x000000000010755c: mov dword ptr [rbp - 0x70], edx; mov edx, dword ptr [r14 - 0x30]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x0000000000107668: mov dword ptr [rbp - 0x70], edx; mov rdx, r14; call rax; 
0x0000000000107660: mov dword ptr [rbp - 0x80], 0; mov qword ptr [rbp - 0x70], rdx; mov rdx, r14; call rax; 
0x0000000000106ee5: mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x0000000000107270: mov dword ptr [rbp - 0x80], edx; mov rdx, r13; call rax; 
0x00000000001076ec: mov dword ptr [rbp - 0x80], edx; mov rdx, r14; call rax; 
0x00000000001072f0: mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; call rax; 
0x0000000000031e2d: mov dword ptr [rbp - 0x88], ecx; mov rax, qword ptr [rip + 0x3921ce]; lea rdi, qword ptr [rip + 0x38debf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000050a5e: mov dword ptr [rbp - 0xb0], eax; mov rdi, rbx; call rax; 
0x0000000000050a54: mov dword ptr [rbp - 0xc8], ecx; mov rdx, r8; mov qword ptr [rbp - 0xb0], r8; mov rdi, rbx; call rax; 
0x0000000000050a53: mov dword ptr [rbp - 0xc8], r9d; mov rdx, r8; mov qword ptr [rbp - 0xb0], r8; mov rdi, rbx; call rax; 
0x000000000002e1fa: mov dword ptr [rbp - 0xd8], 1; mov rdi, r14; mov eax, 3; syscall; 
0x00000000000e9ef3: mov dword ptr [rbp - 0xd], edx; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x000000000002e1f0: mov dword ptr [rbp - 0xdc], 1; mov dword ptr [rbp - 0xd8], 1; mov rdi, r14; mov eax, 3; syscall; 
0x0000000000165e04: mov dword ptr [rbp], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093f4d: mov dword ptr [rbp], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000075156: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000006e005: mov dword ptr [rbp], eax; mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000092073: mov dword ptr [rbp], eax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000003d21b: mov dword ptr [rbp], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000045f22: mov dword ptr [rbp], ebx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001347f8: mov dword ptr [rbp], ebx; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000007a32f: mov dword ptr [rbp], esp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000113372: mov dword ptr [rbp], esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000007a32e: mov dword ptr [rbp], r12d; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000113371: mov dword ptr [rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000007994d: mov dword ptr [rbx + 0x10], 0; cmovg rax, rdx; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000012c392: mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x000000000002cb07: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000012c168: mov dword ptr [rbx + 0x10], 1; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x0000000000135d46: mov dword ptr [rbx + 0x10], eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000118f91: mov dword ptr [rbx + 0x10], eax; mov eax, 0x14; sar rdx, 4; add rdx, 1; syscall; 
0x0000000000072f5d: mov dword ptr [rbx + 0x10], eax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x00000000000787f7: mov dword ptr [rbx + 0x10], eax; mov rax, rbx; pop rbx; ret; 
0x0000000000078d09: mov dword ptr [rbx + 0x10], eax; xor eax, eax; pop rbx; ret; 
0x0000000000101f44: mov dword ptr [rbx + 0x10], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007a58e: mov dword ptr [rbx + 0x10], esi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x000000000007edee: mov dword ptr [rbx + 0x14], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000011f557: mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000007b9f8: mov dword ptr [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000012e642: mov dword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x000000000011f4c7: mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x0000000000135cf3: mov dword ptr [rbx + 0x18], eax; add rsp, 0x10; pop rbx; ret; 
0x00000000000725f2: mov dword ptr [rbx + 0x18], eax; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000000787ef: mov dword ptr [rbx + 0x18], eax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000101f74: mov dword ptr [rbx + 0x18], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007d798: mov dword ptr [rbx + 0x18], ebp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bcc0a: mov dword ptr [rbx + 0x18], edx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000bcc7a: mov dword ptr [rbx + 0x18], edx; movsxd rdx, dword ptr [rsp + 0xa0]; mov qword ptr [rbx + 0x20], rdx; add rsp, 0xd0; pop rbx; ret; 
0x000000000007a58a: mov dword ptr [rbx + 0x18], esi; mov qword ptr [rbx + 0x10], rsi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x00000000000e3a3e: mov dword ptr [rbx + 0x20], 0; call 0x1f4f0; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x00000000001225d5: mov dword ptr [rbx + 0x20], eax; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000007b0a3: mov dword ptr [rbx + 0x20], eax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x00000000000bcc86: mov dword ptr [rbx + 0x20], edx; add rsp, 0xd0; pop rbx; ret; 
0x0000000000086ac9: mov dword ptr [rbx + 0x20], edx; mov qword ptr [rbx + 8], rsi; pop rbx; pop rbp; pop r12; ret; 
0x000000000007a59a: mov dword ptr [rbx + 0x20], esi; call qword ptr [rax + 0x70]; 
0x000000000012e699: mov dword ptr [rbx + 0x20], esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000011b04b: mov dword ptr [rbx + 0x216], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000012163f: mov dword ptr [rbx + 0x2290], eax; call 0x12e3c0; lea rax, qword ptr [rbx + 0x2260]; pop rbx; ret; 
0x0000000000121548: mov dword ptr [rbx + 0x23b0], 0; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x000000000007edeb: mov dword ptr [rbx + 0x24], edi; mov dword ptr [rbx + 0x14], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000e3a4b: mov dword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000072f65: mov dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x000000000007a596: mov dword ptr [rbx + 0x28], esi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000086757: mov dword ptr [rbx + 0x30], eax; call rcx; 
0x0000000000111291: mov dword ptr [rbx + 0x30], eax; mov eax, 1; pop rbx; ret; 
0x000000000007b09f: mov dword ptr [rbx + 0x30], eax; mov qword ptr [rbx + 0x20], rax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x00000000000d4c4e: mov dword ptr [rbx + 0x30], eax; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000007a592: mov dword ptr [rbx + 0x30], esi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x00000000000f83af: mov dword ptr [rbx + 0x38], eax; add rsp, 8; mov eax, 3; pop rbx; pop rbp; ret; 
0x00000000000f8335: mov dword ptr [rbx + 0x38], eax; mov eax, 3; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008674d: mov dword ptr [rbx + 0x38], ecx; mov qword ptr [rbx + 0x40], r8; mov qword ptr [rbx], rdi; mov dword ptr [rbx + 0x30], eax; call rcx; 
0x0000000000086751: mov dword ptr [rbx + 0x40], eax; mov qword ptr [rbx], rdi; mov dword ptr [rbx + 0x30], eax; call rcx; 
0x0000000000086808: mov dword ptr [rbx + 0x40], eax; mov rsi, rax; mov qword ptr [rbx], rax; mov qword ptr [rbx + 0x48], r9; mov rdi, r9; call rcx; 
0x0000000000036a6f: mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x000000000007b4cf: mov dword ptr [rbx + 0x40], esp; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f0496: mov dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x0000000000086812: mov dword ptr [rbx + 0x48], ecx; mov rdi, r9; call rcx; 
0x0000000000127864: mov dword ptr [rbx + 0x48], esi; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000127863: mov dword ptr [rbx + 0x48], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x000000000007b10b: mov dword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x000000000007515a: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000079ae2: mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007416e: mov dword ptr [rbx + 0x74], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000074f08: mov dword ptr [rbx + 0x74], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000074e41: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000786e7: mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x0000000000078cfe: mov dword ptr [rbx + 0x90], esi; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000123d3c: mov dword ptr [rbx + 0xa8], esi; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000123d3b: mov dword ptr [rbx + 0xa8], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000129464: mov dword ptr [rbx + 0xc], eax; mov rax, qword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000000b43df: mov dword ptr [rbx + 0xc], eax; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000079959: mov dword ptr [rbx + 0xd8], eax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000007902b: mov dword ptr [rbx + 0xd8], eax; mov qword ptr [rcx + 0x140], rdx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x000000000007884e: mov dword ptr [rbx + 0xd8], ecx; mov qword ptr [rdx + 0x140], rdi; pop rbx; ret; 
0x0000000000129298: mov dword ptr [rbx + 2], eax; call 0x114510; add rsp, 0x10; pop rbx; ret; 
0x000000000011373f: mov dword ptr [rbx + 4], eax; xor eax, eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000007c63d: mov dword ptr [rbx + 8], eax; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000012bb45: mov dword ptr [rbx + 8], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000787f3: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000078d05: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000002cb27: mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x000000000007c608: mov dword ptr [rbx + 8], eax; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000101f14: mov dword ptr [rbx + 8], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b1501: mov dword ptr [rbx + 8], ecx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000bcc06: mov dword ptr [rbx + 8], edi; mov qword ptr [rbx + 0x18], rdx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000374a5: mov dword ptr [rbx + 8], edx; add rsp, 0x40; pop rbx; ret; 
0x0000000000129294: mov dword ptr [rbx + 8], edx; mov word ptr [rbx + 2], ax; call 0x114510; add rsp, 0x10; pop rbx; ret; 
0x000000000007b32d: mov dword ptr [rbx + 8], edx; movzx eax, byte ptr [rax]; pop rbx; ret; 
0x000000000003742d: mov dword ptr [rbx + 8], edx; xor eax, eax; add rsp, 0x140; pop rbx; ret; 
0x0000000000086acd: mov dword ptr [rbx + 8], esi; pop rbx; pop rbp; pop r12; ret; 
0x00000000000e4363: mov dword ptr [rbx + rbp*8], 0x1f0f6690; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000a3632: mov dword ptr [rbx + rcx*4], 0x75c08507; out dx, al; xor eax, eax; ret; 
0x00000000000d9d5f: mov dword ptr [rbx + rdi + 0x24], 0x39da7fbe; ret 0xc189; 
0x00000000000da030: mov dword ptr [rbx + rdi + 0x24], 0x39ec7fbe; ret 0xc189; 
0x00000000000db568: mov dword ptr [rbx + rdi + 4], 0x39da7fbe; ret 0xc189; 
0x0000000000023833: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012e9a2: mov dword ptr [rbx], 0; call 0x12ac60; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000000f4bf2: mov dword ptr [rbx], 0; pop rbx; ret; 
0x00000000001b70cc: mov dword ptr [rbx], 0x6c70000; add byte ptr [rax], al; ret; 
0x000000000014e747: mov dword ptr [rbx], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000012cf35: mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x0000000000122001: mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x0000000000135f6e: mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x000000000007a5e7: mov dword ptr [rbx], eax; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x000000000007bb00: mov dword ptr [rbx], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x000000000008680f: mov dword ptr [rbx], eax; mov qword ptr [rbx + 0x48], r9; mov rdi, r9; call rcx; 
0x000000000007b4d2: mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000012ab72: mov dword ptr [rbx], eax; pop rbx; ret; 
0x00000000000f4bb1: mov dword ptr [rbx], eax; setne al; movzx eax, al; pop rbx; ret; 
0x0000000000129d5d: mov dword ptr [rbx], eax; xor eax, eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000129798: mov dword ptr [rbx], eax; xor eax, eax; add rsp, 0x30; pop rbx; ret; 
0x00000000001298f5: mov dword ptr [rbx], eax; xor eax, eax; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000120204: mov dword ptr [rbx], eax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x0000000000105a25: mov dword ptr [rbx], ebp; add al, ch; ret; 
0x0000000000133236: mov dword ptr [rbx], ebp; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000070498: mov dword ptr [rbx], ecx; mov rsi, r12; cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x000000000003708e: mov dword ptr [rbx], ecx; xor eax, eax; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000074f7c: mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000086755: mov dword ptr [rbx], edi; mov dword ptr [rbx + 0x30], eax; call rcx; 
0x000000000007b430: mov dword ptr [rbx], edx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000b1556: mov dword ptr [rbx], edx; add rsp, 0xd0; pop rbx; ret; 
0x000000000019abf4: mov dword ptr [rbx], edx; out dx, al; jmp qword ptr [rdx]; 
0x000000000007394c: mov dword ptr [rbx], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000007b0a6: mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x00000000000bcc03: mov dword ptr [rbx], esi; mov qword ptr [rbx + 8], rdi; mov qword ptr [rbx + 0x18], rdx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000aedd1: mov dword ptr [rbx], esi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x000000000006e568: mov dword ptr [rbx], esi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000123b0c: mov dword ptr [rcx + 0x10], edx; mov eax, 1; ret; 
0x0000000000079960: mov dword ptr [rcx + 0x140], edx; call qword ptr [rax + 0x20]; 
0x0000000000079960: mov dword ptr [rcx + 0x140], edx; call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000079032: mov dword ptr [rcx + 0x140], edx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x0000000000127758: mov dword ptr [rcx + 0x48], eax; mov eax, 1; ret; 
0x00000000001276b5: mov dword ptr [rcx + 0x54], eax; mov eax, 1; ret; 
0x0000000000127785: mov dword ptr [rcx + 0x58], eax; mov eax, 1; ret; 
0x000000000000044d: mov dword ptr [rcx + 0x7c05000c], eax; adc byte ptr [rsp + rcx], bl; ret 0x4412; 
0x0000000000123c08: mov dword ptr [rcx + 0xa8], eax; mov eax, 1; ret; 
0x0000000000123aed: mov dword ptr [rcx + 0xb4], eax; mov eax, 1; ret; 
0x0000000000123c35: mov dword ptr [rcx + 0xb8], eax; mov eax, 1; ret; 
0x000000000015a522: mov dword ptr [rcx + 3], edx; ret; 
0x0000000000123bd8: mov dword ptr [rcx + 4], 0; mov eax, 1; ret; 
0x0000000000123bc8: mov dword ptr [rcx + 4], 1; mov eax, 1; ret; 
0x000000000015a513: mov dword ptr [rcx + 4], edx; ret; 
0x000000000015a584: mov dword ptr [rcx + 5], edx; ret; 
0x000000000015a594: mov dword ptr [rcx + 6], edx; ret; 
0x000000000015a563: mov dword ptr [rcx + 7], edx; ret; 
0x0000000000123b08: mov dword ptr [rcx + 8], eax; mov qword ptr [rcx + 0x10], rdx; mov eax, 1; ret; 
0x000000000015a554: mov dword ptr [rcx + 8], edx; ret; 
0x00000000000967f6: mov dword ptr [rcx + rcx*4], 0x8948fc47; clc; ret; 
0x0000000000020c71: mov dword ptr [rcx + rcx*4], esi; inc dword ptr [rdi + 4]; ret; 
0x00000000000d9d4d: mov dword ptr [rcx + rdi + 0x24], 0x39ec7cbe; ret 0xc189; 
0x00000000000db556: mov dword ptr [rcx + rdi + 4], 0x39ec7cbe; ret 0xc189; 
0x000000000004f0be: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000129598: mov dword ptr [rcx - 1], 0x85d23112; ror byte ptr [rdi], 0x94; ret 0x3d83; 
0x00000000000f7bed: mov dword ptr [rcx], 0x75d73949; in al, dx; movsxd rdi, dword ptr [rbp - 0x6c]; mov eax, 3; syscall; 
0x000000000009747e: mov dword ptr [rcx], 0x8017b60f; cli; cmp eax, 0x8348f075; mov dword ptr [rcx], 0xd284c031; cmovne rax, rdi; ret; 
0x000000000009748a: mov dword ptr [rcx], 0xd284c031; cmovne rax, rdi; ret; 
0x00000000000c60ad: mov dword ptr [rcx], 0xe275c084; xor eax, eax; cmp edx, 1; sete al; ret; 
0x00000000000c606e: mov dword ptr [rcx], 0xeb02c883; xchg eax, esi; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000000c612e: mov dword ptr [rcx], 0xeb02ca83; cmpsb byte ptr [rsi], byte ptr [rdi]; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000018af7d: mov dword ptr [rcx], 0xf5bf1400; call qword ptr [rdi + rax*8 - 0x405bffff]; cmc; call rsp; 
0x000000000018af85: mov dword ptr [rcx], 0xf5bfa400; call rsp; 
0x00000000001aa8b5: mov dword ptr [rcx], 0xf5d6a800; jmp qword ptr [rsi]; 
0x00000000001aa8cd: mov dword ptr [rcx], 0xf5d6c000; jmp qword ptr [rsi]; 
0x00000000001aa8e5: mov dword ptr [rcx], 0xf5d6d800; jmp qword ptr [rsi]; 
0x00000000001aa8fd: mov dword ptr [rcx], 0xf5d6f000; jmp qword ptr [rsi]; 
0x00000000001aa995: mov dword ptr [rcx], 0xf5d70800; call qword ptr [rsi]; 
0x00000000001aa945: mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rdi]; 
0x00000000001aa915: mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rsi]; 
0x0000000000037697: mov dword ptr [rcx], 0xffff76e9; jmp qword ptr [rsi - 0x70]; 
0x0000000000036f1a: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000782b7: mov dword ptr [rcx], eax; ret; 
0x00000000000771d4: mov dword ptr [rcx], eax; xor eax, eax; pop rbx; ret; 
0x0000000000108809: mov dword ptr [rcx], eax; xor eax, eax; ret; 
0x000000000007753a: mov dword ptr [rcx], ebp; add rsp, 8; pop rbx; mov eax, ebp; pop rbp; ret; 
0x0000000000117efc: mov dword ptr [rcx], ecx; ret; 
0x0000000000078101: mov dword ptr [rcx], edi; mov eax, edi; ret; 
0x0000000000117ec8: mov dword ptr [rcx], edi; ret; 
0x000000000005ef96: mov dword ptr [rcx], edx; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000008bad7: mov dword ptr [rcx], edx; add rsp, 0x100; ret; 
0x000000000015a4e1: mov dword ptr [rcx], edx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000015a500: mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x000000000015a541: mov dword ptr [rcx], edx; mov byte ptr [rcx + 8], dl; ret; 
0x000000000015a520: mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x000000000015a561: mov dword ptr [rcx], edx; mov dword ptr [rcx + 7], edx; ret; 
0x000000000015a571: mov dword ptr [rcx], edx; mov dword ptr [rcx + 8], edx; ret; 
0x000000000015a581: mov dword ptr [rcx], edx; mov qword ptr [rcx + 5], rdx; ret; 
0x000000000015a591: mov dword ptr [rcx], edx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000015a5a1: mov dword ptr [rcx], edx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000015a5b1: mov dword ptr [rcx], edx; mov qword ptr [rcx + 8], rdx; ret; 
0x000000000015a510: mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000015a551: mov dword ptr [rcx], edx; mov word ptr [rcx + 8], dx; ret; 
0x0000000000117e58: mov dword ptr [rcx], edx; ret; 
0x00000000000e4deb: mov dword ptr [rdi + 0x100], edx; ret; 
0x00000000000e4e22: mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x00000000001245fc: mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x000000000007b05b: mov dword ptr [rdi + 0x10], eax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000009e56d: mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009f3bd: mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009e5ab: mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009f3fb: mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009e62d: mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009f47d: mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009e5cb: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009cf3b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000009f41e: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009dc0e: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000a0e8e: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x000000000009e64d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009cfbd: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000038c1f: mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000a0e2d: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000a0e6b: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000a0eed: mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x000000000009f4a0: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009dc90: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000a0f10: mov dword ptr [rdi + 0x10], edx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x000000000009e690: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009f4e0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009d000: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000a0f50: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x000000000009e6b0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009f500: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009d020: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000a0f70: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x000000000009e671: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009f4c1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009cfe1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000a0f31: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000e4e10: mov dword ptr [rdi + 0x10c], esi; xor al, al; ret; 
0x000000000009e693: mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009f4e3: mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009d003: mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000a0f53: mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x000000000007b033: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000732f7: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x0000000000091f6a: mov dword ptr [rdi + 0x18], eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000009e675: mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009f4c5: mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009e6b3: mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009f503: mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000007b05f: mov dword ptr [rdi + 0x18], ecx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000009cfe5: mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000a0f35: mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000a0f73: mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x000000000012e96a: mov dword ptr [rdi + 0x18], esi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi + 8], rax; ret; 
0x000000000012e241: mov dword ptr [rdi + 0x18], esi; mov dword ptr [rdi + 0x28], edx; mov al, 1; ret; 
0x000000000012e3ce: mov dword ptr [rdi + 0x18], esi; mov dword ptr [rdi + 0x28], edx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000012e266: mov dword ptr [rdi + 0x18], esi; ret; 
0x000000000012e975: mov dword ptr [rdi + 0x20], 0; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000127f78: mov dword ptr [rdi + 0x20], eax; mov qword ptr [rdi + 0x28], rdx; mov eax, 1; ret; 
0x000000000012e3ca: mov dword ptr [rdi + 0x20], esi; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], edx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000012e96d: mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi + 8], rax; ret; 
0x000000000012e25b: mov dword ptr [rdi + 0x28], eax; mov rax, qword ptr [rdi + 0x18]; add rsi, rax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x000000000012e244: mov dword ptr [rdi + 0x28], edx; mov al, 1; ret; 
0x0000000000127f7c: mov dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x000000000012e3d1: mov dword ptr [rdi + 0x28], edx; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000d1b7a: mov dword ptr [rdi + 0x2c], eax; mov dword ptr [rdi + 0x30], eax; ret; 
0x0000000000127f30: mov dword ptr [rdi + 0x30], eax; mov qword ptr [rdi + 0x38], rdx; mov eax, 1; ret; 
0x00000000000d1b7d: mov dword ptr [rdi + 0x30], eax; ret; 
0x00000000000867bb: mov dword ptr [rdi + 0x33], esi; add byte ptr [rax - 0x77], cl; and al, 8; call qword ptr [rdx]; 
0x0000000000127f34: mov dword ptr [rdi + 0x38], edx; mov eax, 1; ret; 
0x00000000000f0606: mov dword ptr [rdi + 0x38], esi; and eax, 0xffffeff0; or eax, esi; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x000000000007b02f: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000007b063: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000037739: mov dword ptr [rdi + 0x58], 0xffffffff; mov qword ptr [rdi + 0x60], -1; mov qword ptr [rdi + 0x68], -1; mov qword ptr [rdi + 0x70], -1; mov qword ptr [rdi + 0x78], -1; ret; 
0x0000000000127ecc: mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x0000000000037741: mov dword ptr [rdi + 0x60], 0xffffffff; mov qword ptr [rdi + 0x68], -1; mov qword ptr [rdi + 0x70], -1; mov qword ptr [rdi + 0x78], -1; ret; 
0x0000000000037749: mov dword ptr [rdi + 0x68], 0xffffffff; mov qword ptr [rdi + 0x70], -1; mov qword ptr [rdi + 0x78], -1; ret; 
0x000000000012761c: mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x0000000000037751: mov dword ptr [rdi + 0x70], 0xffffffff; mov qword ptr [rdi + 0x78], -1; ret; 
0x0000000000037759: mov dword ptr [rdi + 0x78], 0xffffffff; ret; 
0x00000000000e4486: mov dword ptr [rdi + 0x78], edx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x80], rdx; ret; 
0x00000000000e448e: mov dword ptr [rdi + 0x80], edx; ret; 
0x0000000000123a3c: mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x00000000001176e5: mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x000000000009e5ed: mov dword ptr [rdi + 0xe], ecx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009f43d: mov dword ptr [rdi + 0xe], ecx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009cf5d: mov dword ptr [rdi + 0xe], ecx; ret; 
0x00000000000a0ead: mov dword ptr [rdi + 0xe], ecx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000e4de0: mov dword ptr [rdi + 0xf8], edx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x100], rdx; ret; 
0x000000000009e58b: mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009f3db: mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009e60d: mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009f45d: mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009cf1b: mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000a0e4b: mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000a0ecd: mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000014cfe5: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014ce28: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000014d0c8: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x000000000014cf75: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014cdb8: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000003d3b0: mov dword ptr [rdi + 2], edx; ret; 
0x000000000009e457: mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000009f287: mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000014cf05: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014cd48: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000009ce47: mov dword ptr [rdi + 3], edx; ret; 
0x00000000000a0cf7: mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x0000000000127fc0: mov dword ptr [rdi + 4], 0; mov eax, 1; ret; 
0x0000000000127fb0: mov dword ptr [rdi + 4], 1; mov eax, 1; ret; 
0x0000000000096923: mov dword ptr [rdi + 4], eax; lea rax, qword ptr [rdi + 7]; ret; 
0x0000000000096883: mov dword ptr [rdi + 4], eax; mov rax, rdi; ret; 
0x000000000003d3aa: mov dword ptr [rdi + 4], eax; xor eax, eax; mov word ptr [rdi + 2], dx; ret; 
0x000000000009681e: mov dword ptr [rdi + 4], ebx; add rdi, 6; mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x0000000000096973: mov dword ptr [rdi + 4], edx; lea rax, qword ptr [rdi + 5]; ret; 
0x0000000000096983: mov dword ptr [rdi + 4], edx; lea rax, qword ptr [rdi + 6]; mov byte ptr [rdi + 6], 0; ret; 
0x000000000009f269: mov dword ptr [rdi + 4], edx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000014ccd8: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000000968e3: mov dword ptr [rdi + 4], edx; mov rax, rdi; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968d3: mov dword ptr [rdi + 4], edx; mov rax, rdi; ret; 
0x000000000009ce39: mov dword ptr [rdi + 4], edx; ret; 
0x00000000000a0cd9: mov dword ptr [rdi + 4], edx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000e44e0: mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x000000000009681d: mov dword ptr [rdi + 4], r11d; add rdi, 6; mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x0000000000096922: mov dword ptr [rdi + 4], r8d; lea rax, qword ptr [rdi + 7]; ret; 
0x0000000000096882: mov dword ptr [rdi + 4], r8d; mov rax, rdi; ret; 
0x000000000009e4eb: mov dword ptr [rdi + 5], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009f32b: mov dword ptr [rdi + 5], edx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000014cc68: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000009ceab: mov dword ptr [rdi + 5], edx; ret; 
0x00000000000a0d9b: mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000009e50b: mov dword ptr [rdi + 6], edx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009f34b: mov dword ptr [rdi + 6], edx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000014cbf8: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000009cebb: mov dword ptr [rdi + 6], edx; ret; 
0x00000000000a0dbb: mov dword ptr [rdi + 6], edx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000009e4a9: mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009f2e9: mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009e52b: mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009f36b: mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000014cb88: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000009ce89: mov dword ptr [rdi + 7], edx; ret; 
0x00000000000a0d59: mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000a0ddb: mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000f3118: mov dword ptr [rdi + 8], 0; ret; 
0x00000000001176dc: mov dword ptr [rdi + 8], 0x29; xor eax, eax; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x0000000000037a6c: mov dword ptr [rdi + 8], eax; mov rax, qword ptr [rdx]; and rax, qword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000037b6c: mov dword ptr [rdi + 8], eax; mov rax, qword ptr [rdx]; or rax, qword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000007b037: mov dword ptr [rdi + 8], eax; ret; 
0x0000000000038c18: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000f0610: mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x0000000000038ba4: mov dword ptr [rdi + 8], ecx; ret; 
0x000000000009f2cb: mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009e4c9: mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009f309: mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009e48b: mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 9]; ret; 
0x00000000000384e0: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000000383a4: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x000000000007bda3: mov dword ptr [rdi + 8], edx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000007364f: mov dword ptr [rdi + 8], edx; movzx eax, byte ptr [rax]; ret; 
0x000000000003cd1a: mov dword ptr [rdi + 8], edx; ret; 
0x00000000000a0d3b: mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000a0d79: mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000f3108: mov dword ptr [rdi + 8], esi; ret; 
0x000000000003911d: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000000e329f: mov dword ptr [rdi + rcx], 0xffff0d84; jmp qword ptr [rsi + 0xf]; 
0x000000000008c599: mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000008c5a2: mov dword ptr [rdi + rdx - 8], ecx; ret; 
0x00000000001440e5: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144123: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038b0f: mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000144298: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144394: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442e0: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144468: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144648: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144838: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144a09: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144c09: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144e09: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001440e1: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014411f: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144294: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144390: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442dc: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144464: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144644: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144834: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144a05: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144c05: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144e05: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001440dd: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014411b: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144290: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014438c: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442d8: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144460: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144640: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144830: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144a01: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144c01: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144e01: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001440d9: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144117: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014446c: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c638: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014464c: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c5b8: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014483c: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c538: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144a0d: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c4a9: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144c0d: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c419: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144e0d: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c389: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000009ddd0: mov dword ptr [rdi - 1], edx; ret; 
0x00000000001447ed: mov dword ptr [rdi - 2], ecx; ret; 
0x0000000000144605: mov dword ptr [rdi - 2], edx; ret; 
0x00000000001447e9: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000967c7: mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x0000000000144bc9: mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014429f: mov dword ptr [rdi - 4], edx; ret; 
0x000000000009680b: mov dword ptr [rdi - 5], eax; mov rax, rdi; ret; 
0x0000000000144bc6: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000096825: mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x0000000000144dc6: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000096841: mov dword ptr [rdi - 7], eax; mov rax, rdi; ret; 
0x0000000000144fc6: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000967c0: mov dword ptr [rdi - 8], eax; mov eax, dword ptr [rsp + 0x18]; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x0000000000038b08: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000038a9a: mov dword ptr [rdi - 8], ecx; ret; 
0x0000000000144127: mov dword ptr [rdi - 8], edx; ret; 
0x000000000014429c: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144398: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442e4: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c6b8: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000108082: mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000000f3111: mov dword ptr [rdi], 0; mov qword ptr [rdi + 8], 0; ret; 
0x0000000000048810: mov dword ptr [rdi], 0; xor eax, eax; pop rbx; ret; 
0x000000000009683b: mov dword ptr [rdi], 0xff478844; mov dword ptr [rdi - 7], eax; mov rax, rdi; ret; 
0x00000000000368f3: mov dword ptr [rdi], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000039d89: mov dword ptr [rdi], eax; mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000039cfe: mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x00000000000f3105: mov dword ptr [rdi], eax; mov qword ptr [rdi + 8], rsi; ret; 
0x000000000007a31b: mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x0000000000091c9a: mov dword ptr [rdi], eax; pop rbx; pop rbp; ret; 
0x0000000000038a94: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000038b9e: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000037a76: mov dword ptr [rdi], eax; xor eax, eax; ret; 
0x0000000000053856: mov dword ptr [rdi], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000038b01: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000038c11: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000000967d2: mov dword ptr [rdi], ecx; add rdi, 2; mov rax, rdi; ret; 
0x000000000003cd0e: mov dword ptr [rdi], ecx; cmp r9, r8; cmova rdx, r8; xor eax, eax; mov qword ptr [rdi + 8], rdx; ret; 
0x0000000000096950: mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000009e425: mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000009e477: mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009e404: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009ce04: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000000967e2: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; add rdi, 3; mov rax, rdi; ret; 
0x000000000009f227: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000009dad7: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a0c97: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x0000000000096960: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], 0; lea rax, qword ptr [rdi + 4]; ret; 
0x00000000000968c0: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], 0; mov rax, rdi; ret; 
0x000000000009f255: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000009daf5: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x00000000000a0cc5: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x000000000009f2a7: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009db37: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000a0d17: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x000000000009e455: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000009f285: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009ce45: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000a0cf5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x0000000000096920: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 4], r8d; lea rax, qword ptr [rdi + 7]; ret; 
0x0000000000096880: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 4], r8d; mov rax, rdi; ret; 
0x000000000009e4a7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009f2e7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009ce87: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000a0d57: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x000000000009e4c7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009f307: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009ce97: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000a0d77: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x000000000008c597: mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx - 4], ecx; ret; 
0x000000000012e3c7: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 0x20], rsi; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], edx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000009e4e8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009f328: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009cea8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000a0d98: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000009e508: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009f348: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009ceb8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000a0db8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000009e528: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009f368: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009cec8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000a0dd8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000003cd2a: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000008c59f: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000000968b0: mov dword ptr [rdi], ecx; mov rax, rdi; ret; 
0x0000000000096970: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x0000000000096980: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 6]; mov byte ptr [rdi + 6], 0; ret; 
0x000000000009f266: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 6]; ret; 
0x00000000000968e0: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; mov rax, rdi; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968d0: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; mov rax, rdi; ret; 
0x000000000009ce36: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a0cd6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x000000000009f2c8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009e488: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009ce78: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000a0d38: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000038a69: mov dword ptr [rdi], ecx; ret; 
0x000000000003d002: mov dword ptr [rdi], ecx; shr edx, 0x10; and edx, 0x3ff; xor eax, edx; ret; 
0x000000000009e3f4: mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009f214: mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009e412: mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000009f242: mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000009e464: mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009f294: mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009ddf0: mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000009de31: mov dword ptr [rdi], edx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000009de51: mov dword ptr [rdi], edx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000009de61: mov dword ptr [rdi], edx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000012e967: mov dword ptr [rdi], edx; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi + 8], rax; ret; 
0x000000000009de71: mov dword ptr [rdi], edx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000009de81: mov dword ptr [rdi], edx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000009de00: mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x000000000009de41: mov dword ptr [rdi], edx; mov word ptr [rdi + 8], dx; ret; 
0x000000000001fca8: mov dword ptr [rdi], edx; ret; 
0x00000000000a0c84: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000a0cb2: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000a0d04: mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x0000000000096931: mov dword ptr [rdi], esi; lea rax, qword ptr [rdi + 1]; ret; 
0x0000000000096941: mov dword ptr [rdi], esi; mov byte ptr [rdi + 2], 0; lea rax, qword ptr [rdi + 2]; ret; 
0x00000000000968a1: mov dword ptr [rdi], esi; mov byte ptr [rdi + 2], 0; mov rax, rdi; ret; 
0x0000000000039cdf: mov dword ptr [rdi], esi; mov eax, 1; mov dword ptr [rdx], ecx; ret; 
0x0000000000096891: mov dword ptr [rdi], esi; mov rax, rdi; ret; 
0x00000000000e44c1: mov dword ptr [rdi], esi; xor al, al; ret; 
0x00000000000967d1: mov dword ptr [rdi], r9d; add rdi, 2; mov rax, rdi; ret; 
0x00000000000967e1: mov dword ptr [rdi], r9d; mov byte ptr [rdi + 2], dl; add rdi, 3; mov rax, rdi; ret; 
0x0000000000117feb: mov dword ptr [rdx + 0x10], eax; xor eax, eax; ret; 
0x0000000000078855: mov dword ptr [rdx + 0x140], edi; pop rbx; ret; 
0x00000000000780fe: mov dword ptr [rdx + 0x20], eax; mov dword ptr [rcx], edi; mov eax, edi; ret; 
0x00000000000d1f25: mov dword ptr [rdx + 0x20], ecx; mov rdx, qword ptr [rsi + 0x20]; mov qword ptr [rax + 0x20], rdx; xor eax, eax; ret; 
0x00000000000782b4: mov dword ptr [rdx + 0x20], esi; mov dword ptr [rcx], eax; ret; 
0x0000000000121b90: mov dword ptr [rdx + 0x20], esi; ret; 
0x00000000001215bc: mov dword ptr [rdx + 0x23b0], 1; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x0000000000070b36: mov dword ptr [rdx + 0x28], eax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x000000000002579e: mov dword ptr [rdx + 0x4c], ecx; movsx ecx, byte ptr [rax + 0xa]; movsx eax, byte ptr [rax + 0xb]; mov dword ptr [rdx + 0x50], ecx; mov dword ptr [rdx + 0x54], eax; ret; 
0x00000000000257a9: mov dword ptr [rdx + 0x50], ecx; mov dword ptr [rdx + 0x54], eax; ret; 
0x00000000000257ac: mov dword ptr [rdx + 0x54], eax; ret; 
0x0000000000121b6c: mov dword ptr [rdx + 0x58], edi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000121b70: mov dword ptr [rdx + 0x68], ecx; ret; 
0x000000000015c8a7: mov dword ptr [rdx + 3], eax; lea rax, qword ptr [rdx + 6]; ret; 
0x0000000000099bcc: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000015c889: mov dword ptr [rdx + 4], eax; lea rax, qword ptr [rdx + 5]; ret; 
0x0000000000099bae: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x000000000015c93b: mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x000000000015c8b9: mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x0000000000158569: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000015c95b: mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x000000000015c8d9: mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x0000000000158579: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000015c8f9: mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x000000000015ebc3: mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c97b: mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x0000000000099c50: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000015c919: mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x000000000015c80b: mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x0000000000117fe3: mov dword ptr [rdx + 8], eax; mov rax, qword ptr [rsi + 8]; mov qword ptr [rdx + 0x10], rax; xor eax, eax; ret; 
0x0000000000099c32: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000001276f1: mov dword ptr [rdx + 8], edi; ret; 
0x0000000000133ade: mov dword ptr [rdx], 0; mov eax, 0xffffffff; ret; 
0x0000000000039d10: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000012a85c: mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x00000000000be85a: mov dword ptr [rdx], eax; add rsp, 0x40; mov eax, esi; pop rbx; ret; 
0x0000000000135138: mov dword ptr [rdx], eax; add rsp, 0x518; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000015c834: mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 1]; ret; 
0x000000000015c862: mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 3]; ret; 
0x000000000015ec6f: mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c7b4: mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 7]; ret; 
0x000000000015c844: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x0000000000099b59: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x000000000015c872: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, qword ptr [rdx + 4]; ret; 
0x0000000000099b87: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000015c882: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, qword ptr [rdx + 5]; ret; 
0x0000000000099ba7: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000010886f: mov dword ptr [rdx], eax; mov eax, 0xffffffff; add rsp, 8; ret; 
0x00000000000f2374: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000039d93: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000015c8a2: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, qword ptr [rdx + 6]; ret; 
0x0000000000099bc7: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000015c8b4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x0000000000158564: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000015c8d4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x0000000000158574: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000015c8f4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x0000000000158584: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000015c914: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x0000000000158594: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000122612: mov dword ptr [rdx], eax; mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x000000000015c934: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x00000000001585a4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000015c954: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x00000000001585c4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000015c974: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x00000000001585e4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000015c804: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x00000000001584d4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000099b49: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x00000000000be05e: mov dword ptr [rdx], eax; mov rax, rsi; add rsp, 8; ret; 
0x0000000000036c67: mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000071cff: mov dword ptr [rdx], eax; xor eax, eax; pop rbx; ret; 
0x00000000000b4a1f: mov dword ptr [rdx], eax; xor edx, edx; add rsp, 8; mov rax, rdx; ret; 
0x0000000000145d43: mov dword ptr [rdx], ecx; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000cb111: mov dword ptr [rdx], ecx; add rsp, 0x10; pop rbx; ret; 
0x000000000003cd4c: mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x0000000000074456: mov dword ptr [rdx], ecx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x00000000001221d8: mov dword ptr [rdx], ecx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x0000000000039ce6: mov dword ptr [rdx], ecx; ret; 
0x00000000000e317b: mov dword ptr [rdx], edi; ret; 
0x00000000000be6cb: mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x00000000001276ee: mov dword ptr [rdx], esi; mov qword ptr [rdx + 8], rdi; ret; 
0x000000000009218f: mov dword ptr [rdx], esp; mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x00000000000be859: mov dword ptr [rdx], r8d; add rsp, 0x40; mov eax, esi; pop rbx; ret; 
0x00000000000be05d: mov dword ptr [rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x00000000000eb6a3: mov dword ptr [rip + 0x10750000], ebp; mov eax, 0; syscall; 
0x00000000000eb703: mov dword ptr [rip + 0x10750000], ebp; mov eax, 1; syscall; 
0x000000000016500d: mov dword ptr [rip + 0x25ae41], 0; add rsp, 8; ret; 
0x0000000000164bc8: mov dword ptr [rip + 0x25af0e], 0; add rsp, 8; ret; 
0x00000000001651f4: mov dword ptr [rip + 0x25bc52], 0; pop rbx; ret; 
0x00000000001653ca: mov dword ptr [rip + 0x25d44c], 1; add rsp, 8; ret; 
0x00000000001336fa: mov dword ptr [rip + 0x28c190], eax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000001336aa: mov dword ptr [rip + 0x28c1e0], eax; mov rax, qword ptr [rip + 0x288441]; pop r12; jmp rax; 
0x000000000013364a: mov dword ptr [rip + 0x28c240], eax; mov rax, qword ptr [rip + 0x288499]; pop r12; jmp rax; 
0x00000000001335e4: mov dword ptr [rip + 0x28c2a6], eax; mov rax, qword ptr [rip + 0x2884f7]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000001335a6: mov dword ptr [rip + 0x28c2e4], edx; add rsp, 8; ret; 
0x0000000000133e48: mov dword ptr [rip + 0x28fbb2], eax; mov eax, 1; add rsp, 8; ret; 
0x000000000012abb7: mov dword ptr [rip + 0x298c9f], 2; mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x000000000011fa79: mov dword ptr [rip + 0x2a3cc1], eax; add rsp, 8; ret; 
0x000000000011202f: mov dword ptr [rip + 0x2ad9b3], eax; add rsp, 8; ret; 
0x000000000010acd8: mov dword ptr [rip + 0x2b7ae2], edx; pop rbp; ret; 
0x000000000010852e: mov dword ptr [rip + 0x2bbb38], 1; pop rbx; ret; 
0x00000000000fc771: mov dword ptr [rip + 0x2c1b85], 0; pop rbp; ret; 
0x00000000000fc71f: mov dword ptr [rip + 0x2c1bd7], 2; pop rbp; ret; 
0x00000000000fc630: mov dword ptr [rip + 0x2c1cca], ebx; pop rbx; ret; 
0x00000000000f94f9: mov dword ptr [rip + 0x2c82e5], eax; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f94ed: mov dword ptr [rip + 0x2c82ed], eax; mov eax, dword ptr [rip + 0x2c82bb]; mov dword ptr [rip + 0x2c82e5], eax; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f9339: mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f932d: mov dword ptr [rip + 0x2c84ad], eax; mov eax, dword ptr [rip + 0x2c847b]; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f9166: mov dword ptr [rip + 0x2c8678], eax; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000f915a: mov dword ptr [rip + 0x2c8680], eax; mov eax, dword ptr [rip + 0x2c864e]; mov dword ptr [rip + 0x2c8678], eax; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000f243f: mov dword ptr [rip + 0x2cd4db], eax; add rsp, 8; ret; 
0x00000000000f395a: mov dword ptr [rip + 0x2cdcd0], eax; add rsp, 8; ret; 
0x00000000000f3933: mov dword ptr [rip + 0x2cdcf3], 0; add rsp, 8; ret; 
0x00000000000f38cd: mov dword ptr [rip + 0x2cdd5d], edx; add rsp, 8; ret; 
0x00000000000ebaf5: mov dword ptr [rip + 0x2d59b1], 1; ret; 
0x000000000008b9d8: mov dword ptr [rip + 0x335316], edx; add rsp, 0x100; ret; 
0x000000000008aac4: mov dword ptr [rip + 0x3361a6], eax; add rsp, 8; ret; 
0x000000000008aa82: mov dword ptr [rip + 0x3361e8], eax; ret; 
0x0000000000085d30: mov dword ptr [rip + 0x33ae5a], edx; add rsp, 0x18; ret; 
0x0000000000085aca: mov dword ptr [rip + 0x33b07c], 1; pop r12; ret; 
0x0000000000082650: mov dword ptr [rip + 0x33e3f6], 0; ret; 
0x000000000007f87c: mov dword ptr [rip + 0x33e8de], edx; movsxd rdi, ecx; mov eax, 3; syscall; 
0x000000000007e19b: mov dword ptr [rip + 0x34288f], eax; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000007c935: mov dword ptr [rip + 0x344089], 0; ret; 
0x000000000007c8d0: mov dword ptr [rip + 0x3440f2], edx; add dword ptr [rip + 0x3440e7], 1; ret; 
0x000000000005d508: mov dword ptr [rip + 0x363432], eax; add rsp, 0x28; lea rax, qword ptr [rip + 0x363417]; pop rbx; pop rbp; ret; 
0x0000000000048904: mov dword ptr [rip + 0x37b49a], 0; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000037bf3: mov dword ptr [rip + 0x386497], eax; mov eax, edx; ret; 
0x0000000000037bdc: mov dword ptr [rip + 0x3864be], edx; ret; 
0x0000000000021b1b: mov dword ptr [rip + 0x39c70f], eax; pop r12; ret; 
0x000000000001f5f0: mov dword ptr [rip + 0x3a045a], eax; pop rax; pop rbx; pop rbp; ret; 
0x00000000000225fd: mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x00000000000225f0: mov dword ptr [rip + 0x3a1646], eax; lea rax, qword ptr [rip + 0x3a1603]; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x00000000000225ef: mov dword ptr [rip + 0x3a1646], r8d; lea rax, qword ptr [rip + 0x3a1603]; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x00000000000225e9: mov dword ptr [rip + 0x3a1649], esi; mov dword ptr [rip + 0x3a1646], r8d; lea rax, qword ptr [rip + 0x3a1603]; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x0000000000022222: mov dword ptr [rip + 0x3a19d8], eax; pop rbx; ret; 
0x0000000000022221: mov dword ptr [rip + 0x3a19d8], r8d; pop rbx; ret; 
0x000000000002221b: mov dword ptr [rip + 0x3a1a1b], edi; mov dword ptr [rip + 0x3a19d8], r8d; pop rbx; ret; 
0x000000000009fd76: mov dword ptr [rip + 0xc634900], ecx; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000002b53: mov dword ptr [rip - 0x376d75c7], ecx; mov cl, 0xda; fnsave dword ptr [rdx - 0x6b]; test word ptr [rbx - 0x2e], bp; cmp dl, byte ptr [rdi]; ret; 
0x00000000000e3eef: mov dword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x000000000003d317: mov dword ptr [rsi + 0x10], eax; mov eax, 0xb; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x00000000000c0940: mov dword ptr [rsi + 0x10], eax; mov rax, qword ptr [rsi + 0x18]; mov qword ptr [rsi + 0x18], rax; mov rax, -0xe; ret; 
0x00000000000e3f14: mov dword ptr [rsi + 0x10], eax; ret; 
0x000000000003d2d6: mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x000000000003cc84: mov dword ptr [rsi + 0x10], ecx; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000c0948: mov dword ptr [rsi + 0x18], eax; mov rax, -0xe; ret; 
0x0000000000073622: mov dword ptr [rsi + 0x28], eax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x000000000003cc88: mov dword ptr [rsi + 0x28], eax; xor eax, eax; ret; 
0x00000000000d1eca: mov dword ptr [rsi + 0x28], ecx; cdqe; or qword ptr [rdi + 0x90], rax; xor eax, eax; ret; 
0x00000000001281d7: mov dword ptr [rsi + 0x58], 0; call qword ptr [rax + 0x28]; 
0x00000000000efcb6: mov dword ptr [rsi + 0x66], edx; xor eax, eax; ret; 
0x00000000000e4d01: mov dword ptr [rsi + 0x70], edx; mov rax, qword ptr [rdi + 0x100]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x00000000000e43f4: mov dword ptr [rsi + 0x70], edx; mov rax, qword ptr [rdi + 0x80]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x00000000000e43ff: mov dword ptr [rsi + 0x78], eax; xor eax, eax; ret; 
0x000000000003d35e: mov dword ptr [rsi + 0xc], eax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000003d320: mov dword ptr [rsi + 0xc], eax; xor eax, eax; ret; 
0x000000000003d367: mov dword ptr [rsi + 0xe], eax; xor eax, eax; ret; 
0x000000000010c03c: mov dword ptr [rsi + 4], 0; mov rax, rdi; add rsp, 8; ret; 
0x00000000000a3004: mov dword ptr [rsi + 4], 0; ret; 
0x0000000000120dd7: mov dword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000e3ef7: mov dword ptr [rsi + 8], 0; ret; 
0x0000000000120d27: mov dword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120d63: mov dword ptr [rsi + 8], eax; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120d9b: mov dword ptr [rsi + 8], eax; mov rax, qword ptr [rdi + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120cf1: mov dword ptr [rsi + 8], eax; ret; 
0x00000000000e3f10: mov dword ptr [rsi + 8], ecx; mov qword ptr [rsi + 0x10], r8; ret; 
0x0000000000127600: mov dword ptr [rsi + 8], edx; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000127eb0: mov dword ptr [rsi + 8], edx; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000123a16: mov dword ptr [rsi + 8], edx; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000117383: mov dword ptr [rsi - 0x76b7ffd6], eax; ret 0x8948; 
0x000000000010bef3: mov dword ptr [rsi*2 - 0x776b717], eax; add rsp, 8; ret; 
0x000000000010bef2: mov dword ptr [rsi*2 - 0x776b717], r8d; add rsp, 8; ret; 
0x00000000000e3ee8: mov dword ptr [rsi], 0; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x0000000000120d0f: mov dword ptr [rsi], 0; ret; 
0x0000000000120dd0: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120d20: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120cf8: mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x00000000000fa6f9: mov dword ptr [rsi], 0x16; ret; 
0x0000000000096823: mov dword ptr [rsi], 0x48fa4789; mov eax, edi; ret; 
0x0000000000120d80: mov dword ptr [rsi], 0xa; ret; 
0x0000000000120d70: mov dword ptr [rsi], 0xb; ret; 
0x0000000000120dc0: mov dword ptr [rsi], 0xc; ret; 
0x0000000000120d58: mov dword ptr [rsi], 6; mov rax, qword ptr [rdi + 0x20]; mov qword ptr [rsi + 8], rax; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120ce8: mov dword ptr [rsi], 7; mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi + 8], eax; ret; 
0x0000000000120db0: mov dword ptr [rsi], 8; ret; 
0x000000000003cc7d: mov dword ptr [rsi], eax; lea rax, qword ptr [rcx + r8*4]; mov qword ptr [rsi + 0x10], rcx; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000007d4fb: mov dword ptr [rsi], eax; mov rax, r8; ret; 
0x000000000003d2c9: mov dword ptr [rsi], eax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x00000000000fa6ec: mov dword ptr [rsi], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000732fb: mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000003cd4e: mov dword ptr [rsi], ecx; ret; 
0x0000000000117bd0: mov dword ptr [rsi], ecx; xor eax, eax; ret; 
0x00000000001176e9: mov dword ptr [rsi], edi; ret; 
0x000000000010c4c9: mov dword ptr [rsi], edi; xor eax, eax; ret; 
0x00000000000e3f0d: mov dword ptr [rsi], edx; mov qword ptr [rsi + 8], rcx; mov qword ptr [rsi + 0x10], r8; ret; 
0x00000000001275f9: mov dword ptr [rsi], edx; mov rdx, qword ptr [rax + 0x38]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000127ea9: mov dword ptr [rsi], edx; mov rdx, qword ptr [rax + 0x48]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000123a0c: mov dword ptr [rsi], edx; mov rdx, qword ptr [rax + 0x98]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000142f83: mov dword ptr [rsi], esi; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001364db: mov dword ptr [rsp + 0x10], 0; call 0x135f80; add rsp, 0x28; ret; 
0x00000000000487e4: mov dword ptr [rsp + 0x10], 0; call 0xa4090; add rsp, 0x28; ret; 
0x00000000000488b4: mov dword ptr [rsp + 0x10], 0; call 0xa40c0; add rsp, 0x28; ret; 
0x0000000000036735: mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x00000000000cc9cb: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rbp - 0x120]; mov qword ptr [rsp], rax; call rbx; 
0x000000000012d740: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012dd79: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d09a: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x000000000012ded9: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d15a: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x0000000000126764: mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x00000000000f18e4: mov dword ptr [rsp + 0x10], eax; mov rdi, rsp; mov rax, qword ptr [rip + 0x2d2766]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f1874: mov dword ptr [rsp + 0x10], eax; mov rdi, rsp; mov rax, qword ptr [rip + 0x2d27d6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000461da: mov dword ptr [rsp + 0x10], eax; mov rdx, rsp; xor esi, esi; mov edi, 0x100011; mov eax, 0x38; syscall; 
0x000000000008095c: mov dword ptr [rsp + 0x10], ecx; call qword ptr [rax]; 
0x0000000000080a30: mov dword ptr [rsp + 0x10], ecx; call rdx; 
0x0000000000135931: mov dword ptr [rsp + 0x10], ecx; lea rdi, qword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x00000000000bdfc6: mov dword ptr [rsp + 0x10], esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011c453: mov dword ptr [rsp + 0x14], eax; mov rdx, rsp; movsxd rdi, dword ptr [rsp + 0x10]; movsxd rsi, ebp; mov eax, 0x81; syscall; 
0x0000000000037f00: mov dword ptr [rsp + 0x14], eax; mov rdx, rsp; movsxd rsi, ebp; movsxd rdi, r12d; mov eax, 0x81; syscall; 
0x000000000012b1af: mov dword ptr [rsp + 0x18], 1; call qword ptr [rax + 0x18]; 
0x000000000012b1af: mov dword ptr [rsp + 0x18], 1; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x000000000012b1db: mov dword ptr [rsp + 0x18], 1; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x0000000000108f74: mov dword ptr [rsp + 0x18], eax; call 0x108fa0; add rsp, 0xd8; ret; 
0x00000000001090bf: mov dword ptr [rsp + 0x18], eax; call 0x1090d0; add rsp, 0xd8; ret; 
0x000000000010a349: mov dword ptr [rsp + 0x18], eax; call 0x10a360; add rsp, 0xd8; ret; 
0x000000000010a559: mov dword ptr [rsp + 0x18], eax; call 0x10a570; add rsp, 0xd8; ret; 
0x000000000010c0ef: mov dword ptr [rsp + 0x18], eax; call 0x10c100; add rsp, 0xd8; ret; 
0x0000000000048724: mov dword ptr [rsp + 0x18], eax; call 0x475b0; add rsp, 0xd8; ret; 
0x000000000005432e: mov dword ptr [rsp + 0x18], eax; call 0x49c40; add rsp, 0xd8; ret; 
0x000000000005d07e: mov dword ptr [rsp + 0x18], eax; call 0x5cfc0; add rsp, 0xd8; ret; 
0x000000000005e40e: mov dword ptr [rsp + 0x18], eax; call 0x5e420; add rsp, 0xd8; ret; 
0x000000000007834e: mov dword ptr [rsp + 0x18], eax; call 0x5eaf0; add rsp, 0xd8; ret; 
0x000000000007855e: mov dword ptr [rsp + 0x18], eax; call 0x6c6c0; add rsp, 0xd8; ret; 
0x000000000005d1be: mov dword ptr [rsp + 0x18], eax; call 0x70930; add rsp, 0xd8; ret; 
0x000000000005458e: mov dword ptr [rsp + 0x18], eax; call 0x72120; add rsp, 0xd8; ret; 
0x000000000005461e: mov dword ptr [rsp + 0x18], eax; call 0x72280; add rsp, 0xd8; ret; 
0x0000000000054469: mov dword ptr [rsp + 0x18], eax; call 0x72420; add rsp, 0xd8; ret; 
0x000000000007282e: mov dword ptr [rsp + 0x18], eax; call 0x72620; add rsp, 0xd8; ret; 
0x0000000000073bd9: mov dword ptr [rsp + 0x18], eax; call 0x73c60; add rsp, 0xd8; ret; 
0x0000000000073e1e: mov dword ptr [rsp + 0x18], eax; call 0x73d20; add rsp, 0xd8; ret; 
0x00000000000af64e: mov dword ptr [rsp + 0x18], eax; call 0xaf660; add rsp, 0xd8; ret; 
0x00000000000f4496: mov dword ptr [rsp + 0x18], eax; call 0xf3ec0; add rsp, 0xd8; ret; 
0x0000000000102079: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [r15 + 0x28]; mov edi, 0x2000001; mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x00000000000c20f0: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rip + 0x301f5d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c2080: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rip + 0x301fcd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000078406: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rip + 0x345b2f]; mov rdi, qword ptr [rax]; call 0x5eaf0; add rsp, 0xd8; ret; 
0x000000000005d118: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rip + 0x360e95]; mov rdi, qword ptr [rax]; call 0x54630; add rsp, 0xd8; ret; 
0x00000000000543c6: mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rip + 0x369b6f]; mov rdi, qword ptr [rax]; call 0x49c40; add rsp, 0xd8; ret; 
0x00000000001203f2: mov dword ptr [rsp + 0x18], eax; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x000000000011fd86: mov dword ptr [rsp + 0x1c], 0; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000012b1e3: mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x000000000012b1e3: mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x0000000000080a2b: mov dword ptr [rsp + 0x20], eax; mov qword ptr [rsp + 0x10], rcx; call rdx; 
0x000000000012b087: mov dword ptr [rsp + 0x20], eax; mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012b090: mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012b090: mov dword ptr [rsp + 0x28], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x0000000000080842: mov dword ptr [rsp + 0x28], ebx; call rax; 
0x0000000000080809: mov dword ptr [rsp + 0x28], esi; mov rdi, r14; call qword ptr [rax]; 
0x0000000000080841: mov dword ptr [rsp + 0x28], r11d; call rax; 
0x000000000008083d: mov dword ptr [rsp + 0x30], edx; mov dword ptr [rsp + 0x28], r11d; call rax; 
0x000000000002fc09: mov dword ptr [rsp + 0x34], ecx; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001293dc: mov dword ptr [rsp + 0x38], 0; call qword ptr [rax + 0x28]; 
0x000000000012675b: mov dword ptr [rsp + 0x40], 0; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x000000000012e74d: mov dword ptr [rsp + 0x40], eax; mov qword ptr [rsp + 0x70], rax; lea rax, qword ptr [rsp + 0x30]; mov qword ptr [rsp + 8], rax; xor eax, eax; call rdx; 
0x000000000011fee2: mov dword ptr [rsp + 0x48], 0; mov rdi, r13; call qword ptr [rax]; 
0x000000000012a7eb: mov dword ptr [rsp + 0x50], eax; mov rax, qword ptr [r13 + 8]; mov qword ptr [rsp], r15; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x000000000012e752: mov dword ptr [rsp + 0x70], eax; lea rax, qword ptr [rsp + 0x30]; mov qword ptr [rsp + 8], rax; xor eax, eax; call rdx; 
0x000000000012b532: mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000012b524: mov dword ptr [rsp + 0xc0], eax; mov rax, qword ptr [r15 + 8]; mov rdi, r15; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000012b442: mov dword ptr [rsp + 0xc8], eax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x00000000000c0b5b: mov dword ptr [rsp + 0xc], eax; call 0x108100; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000135f0d: mov dword ptr [rsp + 0xc], eax; call 0x1f4f0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x48; ret; 
0x00000000000f0a1b: mov dword ptr [rsp + 0xc], esi; mov esi, 0x5410; call 0xf11e0; add rsp, 0x18; ret; 
0x0000000000116288: mov dword ptr [rsp + 4], ebx; call 0x115190; add rsp, 0x88; ret; 
0x0000000000116287: mov dword ptr [rsp + 4], r11d; call 0x115190; add rsp, 0x88; ret; 
0x00000000001162cf: mov dword ptr [rsp + 8], 0; call 0x114d00; add rsp, 0x18; ret; 
0x000000000011f95a: mov dword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x000000000012b822: mov dword ptr [rsp + 8], 0x2faf080; call 0xc0dd0; add rsp, 0x18; ret; 
0x0000000000036fbd: mov dword ptr [rsp + 8], eax; call 0x108100; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f127c: mov dword ptr [rsp + 8], eax; call 0x108100; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000f5314: mov dword ptr [rsp + 8], eax; call 0xf4e90; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000000867c0: mov dword ptr [rsp + 8], eax; call qword ptr [rdx]; 
0x0000000000025ae6: mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000012d9d5: mov dword ptr [rsp + 8], eax; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000012da1c: mov dword ptr [rsp + 8], eax; lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121acf: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000002f7a1: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rip + 0x39485c]; lea rdi, qword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000027627: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a557: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000027933: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002873b: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 0x58]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002813a: mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rsp + 0x78]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000012e75c: mov dword ptr [rsp + 8], eax; xor eax, eax; call rdx; 
0x000000000007dec9: mov dword ptr [rsp + 8], ecx; and rdi, rdx; neg rdi; call qword ptr [rax]; 
0x000000000007def3: mov dword ptr [rsp + 8], ecx; call qword ptr [rax]; 
0x0000000000022113: mov dword ptr [rsp + 8], edi; call 0x1f595; mov rax, qword ptr [rip + 0x39d93d]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x000000000011fcd9: mov dword ptr [rsp + 8], edi; mov esi, 1; mov rdi, r15; call qword ptr [rax]; 
0x000000000011fedd: mov dword ptr [rsp + 8], edi; mov qword ptr [rsp + 0x48], 0; mov rdi, r13; call qword ptr [rax]; 
0x0000000000075b1c: mov dword ptr [rsp + 8], edi; mov rax, qword ptr [rax + 0x38]; mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x0000000000129b90: mov dword ptr [rsp + 8], edi; mov rdi, rbx; call qword ptr [rax]; 
0x00000000000f2348: mov dword ptr [rsp + 8], edi; mov rdi, rsp; call 0xc0dd0; add rsp, 0x18; ret; 
0x000000000013592c: mov dword ptr [rsp + 8], edx; mov qword ptr [rsp + 0x10], rcx; lea rdi, qword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x00000000000bc4d1: mov dword ptr [rsp + 8], esi; mov rax, qword ptr [rip + 0x307b2c]; lea rdi, qword ptr [rip + 0x30361d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000027f22: mov dword ptr [rsp + 8], esi; mov rsi, qword ptr [rsp + 0x50]; call rax; 
0x0000000000036835: mov dword ptr [rsp - 0x10], eax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000036815: mov dword ptr [rsp - 0x10], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000368ef: mov dword ptr [rsp - 0x10], edx; mov dword ptr [rdi], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000039e86: mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000003680c: mov dword ptr [rsp - 0x18], 0; mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000f2f58: mov dword ptr [rsp - 0x18], eax; mov rsi, rdi; mov r10d, 0x100; mov rdi, -0x64; mov eax, 0x118; syscall; 
0x0000000000039e7e: mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000f2ff8: mov dword ptr [rsp - 0x18], eax; xor r10d, r10d; xor esi, esi; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x00000000000b077a: mov dword ptr [rsp - 0x18], esi; fild qword ptr [rsp - 0x18]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000367da: mov dword ptr [rsp - 0x18], esi; fld xword ptr [rsp - 0x18]; fld st(0); fstp xword ptr [rdi]; fsubp st(1); ret; 
0x00000000000fa2e7: mov dword ptr [rsp - 0x30], ecx; syscall; 
0x00000000000fa2e2: mov dword ptr [rsp - 0x38], eax; mov qword ptr [rsp - 0x30], r9; syscall; 
0x00000000000fa2db: mov dword ptr [rsp - 0x40], ebp; mov al, 0x9c; mov qword ptr [rsp - 0x38], r8; mov qword ptr [rsp - 0x30], r9; syscall; 
0x00000000000f23d6: mov dword ptr [rsp - 0x48], eax; cmova r10, qword ptr [rax + 0x18]; mov eax, 0x65; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x00000000000f23e4: mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x00000000000369e5: mov dword ptr [rsp - 2], edi; fldcw word ptr [rsp - 2]; ret; 
0x0000000000036860: mov dword ptr [rsp - 4], edi; fild dword ptr [rsp - 4]; fld xword ptr [rsp + 8]; fscale; fstp st(1); ret; 
0x0000000000039df9: mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000039e3f: mov dword ptr [rsp - 8], edx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000cb167: mov dword ptr [rsp], 0; call 0xcb0b0; add rsp, 0x18; ret; 
0x00000000000eb014: mov dword ptr [rsp], 0; call 0xeb180; add rsp, 0x18; ret; 
0x0000000000120278: mov dword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x00000000000a3ff1: mov dword ptr [rsp], 0; lea r9, qword ptr [rsp + 0x28]; lea rcx, qword ptr [rax + 4]; call rbx; 
0x0000000000125f93: mov dword ptr [rsp], 0xc; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x00000000000a3f63: mov dword ptr [rsp], 1; lea r9, qword ptr [rsp + 0x28]; call rbx; 
0x0000000000115f27: mov dword ptr [rsp], 2; call 0x1154d0; add rsp, 0x18; ret; 
0x0000000000116854: mov dword ptr [rsp], 2; call 0x1162f0; add rsp, 0x18; ret; 
0x0000000000136634: mov dword ptr [rsp], 2; call 0xe4530; add rsp, 0x18; ret; 
0x000000000012ced9: mov dword ptr [rsp], 2; mov rdi, rsp; call rdx; 
0x0000000000136654: mov dword ptr [rsp], 3; call 0xe4530; add rsp, 0x18; ret; 
0x00000000000b42db: mov dword ptr [rsp], eax; call 0xb1410; add rsp, 0x18; ret; 
0x00000000001203e8: mov dword ptr [rsp], eax; call qword ptr [r11]; mov rdx, qword ptr [rbx + 8]; mov dword ptr [rsp + 0x18], eax; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x0000000000075b28: mov dword ptr [rsp], eax; call qword ptr [rbp + 0x18]; 
0x0000000000027631: mov dword ptr [rsp], eax; call qword ptr [rbp]; 
0x0000000000027942: mov dword ptr [rsp], eax; call qword ptr [rbx]; 
0x00000000000cc9d7: mov dword ptr [rsp], eax; call rbx; 
0x0000000000116284: mov dword ptr [rsp], eax; mov dword ptr [rsp + 4], r11d; call 0x115190; add rsp, 0x88; ret; 
0x00000000000eb6c3: mov dword ptr [rsp], eax; mov eax, 0; syscall; 
0x00000000000fafd3: mov dword ptr [rsp], eax; mov eax, 0x130; syscall; 
0x00000000000f4923: mov dword ptr [rsp], eax; mov eax, 0x1a; syscall; 
0x00000000000c0d93: mov dword ptr [rsp], eax; mov eax, 0x22; syscall; 
0x00000000000c0df3: mov dword ptr [rsp], eax; mov eax, 0x23; syscall; 
0x00000000000fb173: mov dword ptr [rsp], eax; mov eax, 0x2a; syscall; 
0x00000000000fb0e3: mov dword ptr [rsp], eax; mov eax, 0x2b; syscall; 
0x00000000000fb4b3: mov dword ptr [rsp], eax; mov eax, 0x2e; syscall; 
0x00000000000fb3a3: mov dword ptr [rsp], eax; mov eax, 0x2f; syscall; 
0x00000000000f1df3: mov dword ptr [rsp], eax; mov eax, 0x4a; syscall; 
0x00000000000f1e83: mov dword ptr [rsp], eax; mov eax, 0x4b; syscall; 
0x00000000000ebf73: mov dword ptr [rsp], eax; mov eax, 0x55; syscall; 
0x00000000000eb723: mov dword ptr [rsp], eax; mov eax, 1; syscall; 
0x00000000000eb4d3: mov dword ptr [rsp], eax; mov eax, 2; syscall; 
0x00000000000ebe23: mov dword ptr [rsp], eax; mov eax, 3; syscall; 
0x00000000000ecfd3: mov dword ptr [rsp], eax; mov eax, 7; syscall; 
0x00000000000fa3c3: mov dword ptr [rsp], eax; mov eax, 8; syscall; 
0x00000000000fad36: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x113; syscall; 
0x00000000000fadc6: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000f04e6: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000fae86: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000cb566: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x11; syscall; 
0x00000000000cb5c6: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x12; syscall; 
0x00000000000f1c46: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x17; syscall; 
0x00000000000fb516: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x2c; syscall; 
0x00000000000fb346: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x2d; syscall; 
0x00000000000fbc86: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000fbce6: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000faa06: mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0xe8; syscall; 
0x0000000000125f50: mov dword ptr [rsp], eax; mov rax, qword ptr [r12 + 8]; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000012db02: mov dword ptr [rsp], eax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x000000000012e0be: mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e0be: mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; ret; 
0x0000000000121a57: mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121a57: mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000135cdf: mov dword ptr [rsp], eax; mov rax, qword ptr [rip + 0x288177]; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x00000000000a35c2: mov dword ptr [rsp], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000121ac5: mov dword ptr [rsp], eax; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000ebd7b: mov dword ptr [rsp], eax; xor eax, eax; call 0xebb40; add rsp, 0x20; pop rbx; ret; 
0x000000000012a7f4: mov dword ptr [rsp], edi; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x000000000012dd85: mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d0a7: mov dword ptr [rsp], edx; call qword ptr [rax + 8]; 
0x00000000000bdc0d: mov dword ptr [rsp], edx; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x000000000012d475: mov dword ptr [rsp], edx; mov rsi, rsp; call qword ptr [rax + 8]; 
0x0000000000129b87: mov dword ptr [rsp], esi; mov esi, 4; mov qword ptr [rsp + 8], rdi; mov rdi, rbx; call qword ptr [rax]; 
0x000000000009fdea: mov dword ptr es:[rip + 0xc634900], ecx; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000fa371: mov dword ptr fs:[0x2d0], eax; pop rax; pop rdi; call rax; 
0x00000000000c1cf2: mov dword ptr fs:[0x2d0], esi; ret; 
0x00000000000fa369: mov dword ptr fs:[0x2d4], eax; mov dword ptr fs:[0x2d0], eax; pop rax; pop rdi; call rax; 
0x00000000000c1145: mov dword ptr fs:[0x2d4], edx; mov eax, 0x3a; syscall; 
0x00000000000ebdaf: mov dword ptr fs:[rax], 0x16; add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000f0cd7: mov dword ptr fs:[rax], 0x16; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x0000000000036c87: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000efcc7: mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x00000000000f1957: mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x0000000000036bef: mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000003588d: mov dword ptr fs:[rax], 0x16; mov rdi, rbx; mov eax, 3; syscall; 
0x000000000002e6d0: mov dword ptr fs:[rax], 0x16; movsxd rdi, r13d; mov eax, 3; syscall; 
0x0000000000036ec4: mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x00000000000f4c07: mov dword ptr fs:[rax], 0x16; pop rbx; ret; 
0x00000000000f4bc2: mov dword ptr fs:[rax], 0x16; xor eax, eax; pop rbx; ret; 
0x00000000000b05b7: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000036995: mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbx; ret; 
0x000000000003638d: mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000037847: mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000f11c7: mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x0000000000035767: mov dword ptr fs:[rax], 0x2a; mov rax, rcx; pop rbx; ret; 
0x00000000000f2147: mov dword ptr fs:[rax], 0x4b; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000eb437: mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x00000000000f10f7: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000841d7: mov dword ptr fs:[rax], 0xc; xor eax, eax; add rsp, 0x18; ret; 
0x000000000008115f: mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000008131f: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000132ecf: mov dword ptr fs:[rax], 2; mov eax, 0xffffffff; ret; 
0x00000000000bcde4: mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000006ebde: mov dword ptr fs:[rax], 5; mov rax, rdx; pop rbx; ret; 
0x00000000000357d7: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000007141f: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000022cb5: mov dword ptr fs:[rax], 9; mov eax, edi; ret; 
0x00000000000f9650: mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x00000000000ebb23: mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x00000000000f110d: mov dword ptr fs:[rax], edx; mov rax, qword ptr [rip + 0x2ccda1]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000f09d2: mov dword ptr fs:[rax], edx; or eax, 0xffffffff; ret; 
0x00000000000cb3bd: mov dword ptr fs:[rax], r8d; or eax, 0xffffffff; ret; 
0x000000000007a32d: mov dword ptr fs:[rbp], r12d; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000113370: mov dword ptr fs:[rbp], r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000105a24: mov dword ptr fs:[rbx], ebp; add al, ch; ret; 
0x0000000000133235: mov dword ptr fs:[rbx], ebp; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000036f19: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000135137: mov dword ptr fs:[rdx], eax; add rsp, 0x518; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000010886e: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; add rsp, 8; ret; 
0x00000000000f2373: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000c0994: mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x0000000000036c66: mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000be6ca: mov dword ptr fs:[rdx], esi; add rsp, 0x18; ret; 
0x00000000000be858: mov dword ptr fs:[rdx], r8d; add rsp, 0x40; mov eax, esi; pop rbx; ret; 
0x00000000000be05c: mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x00000000000fa6f8: mov dword ptr fs:[rsi], 0x16; ret; 
0x00000000000fa6eb: mov dword ptr fs:[rsi], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000014d0c0: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000009e432: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000009f262: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000009ce32: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a0cd2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x000000000009f2c3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009e483: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009ce73: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000a0d33: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000144600: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000001447e0: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000009e3f0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009f210: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009cdf0: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000a0c80: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x0000000000135170: mov eax, 0; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000eb6a9: mov eax, 0; syscall; 
0x000000000011482a: mov eax, 0x100; nop; ret; 
0x0000000000114824: mov eax, 0x101; ret; 
0x00000000000eb559: mov eax, 0x101; syscall; 
0x0000000000114831: mov eax, 0x102; ret; 
0x00000000000eb485: mov eax, 0x102; syscall; 
0x00000000000eb19a: mov eax, 0x103; syscall; 
0x000000000011481c: mov eax, 0x104; ret; 
0x00000000000ec84b: mov eax, 0x104; syscall; 
0x00000000000f3058: mov eax, 0x105; syscall; 
0x00000000000eb1f3: mov eax, 0x106; syscall; 
0x00000000000ecf56: mov eax, 0x107; syscall; 
0x000000000005dbc9: mov eax, 0x108; syscall; 
0x00000000000ece3c: mov eax, 0x109; syscall; 
0x000000000011f3e4: mov eax, 0x10; pop rbx; pop rbp; ret; 
0x00000000000a1b48: mov eax, 0x10; pop rbx; ret; 
0x00000000000f0a49: mov eax, 0x10; syscall; 
0x00000000000ece93: mov eax, 0x10a; syscall; 
0x00000000000ecef6: mov eax, 0x10b; syscall; 
0x00000000000eb3f2: mov eax, 0x10c; syscall; 
0x00000000000eb8d7: mov eax, 0x10d; syscall; 
0x00000000000f1d18: mov eax, 0x10e; mov rsi, qword ptr [rsp + 0x18]; movsxd rdi, dword ptr [rsp + 0x14]; syscall; 
0x00000000000f1cc4: mov eax, 0x10e; syscall; 
0x00000000000ed093: mov eax, 0x10f; mov rdi, qword ptr [rsp + 8]; syscall; 
0x00000000000ed042: mov eax, 0x10f; syscall; 
0x00000000000fae00: mov eax, 0x110; syscall; 
0x00000000000fad1c: mov eax, 0x113; syscall; 
0x00000000000fadac: mov eax, 0x114; syscall; 
0x00000000000f04cc: mov eax, 0x115; syscall; 
0x00000000000fae6c: mov eax, 0x116; syscall; 
0x00000000000ed30b: mov eax, 0x118; syscall; 
0x00000000000fa549: mov eax, 0x119; syscall; 
0x00000000000cb54c: mov eax, 0x11; syscall; 
0x00000000000fa64b: mov eax, 0x11a; syscall; 
0x00000000000faec0: mov eax, 0x11b; syscall; 
0x00000000000fa6da: mov eax, 0x11c; syscall; 
0x00000000000f0533: mov eax, 0x11d; syscall; 
0x00000000000ed290: mov eax, 0x11d; xor esi, esi; syscall; 
0x00000000000faef3: mov eax, 0x11e; syscall; 
0x00000000000faf20: mov eax, 0x11f; syscall; 
0x00000000000fb9c0: mov eax, 0x120; syscall; 
0x00000000000fa980: mov eax, 0x123; syscall; 
0x00000000000ebec0: mov eax, 0x124; syscall; 
0x00000000000ebf20: mov eax, 0x125; syscall; 
0x00000000000fab00: mov eax, 0x126; syscall; 
0x00000000000f1518: mov eax, 0x127; syscall; 
0x00000000000f1778: mov eax, 0x128; syscall; 
0x00000000000cb5ac: mov eax, 0x12; syscall; 
0x00000000000fba62: mov eax, 0x12b; syscall; 
0x00000000000faf50: mov eax, 0x12c; syscall; 
0x00000000000fa803: mov eax, 0x12d; syscall; 
0x00000000000fa763: mov eax, 0x12e; syscall; 
0x00000000000faf83: mov eax, 0x12f; syscall; 
0x00000000000fafb9: mov eax, 0x130; syscall; 
0x00000000000fa8c0: mov eax, 0x131; syscall; 
0x00000000000f1ec0: mov eax, 0x132; syscall; 
0x00000000000fbb12: mov eax, 0x133; syscall; 
0x00000000000fb010: mov eax, 0x134; syscall; 
0x00000000000fb043: mov eax, 0x136; syscall; 
0x00000000000fb073: mov eax, 0x137; syscall; 
0x00000000000f1220: mov eax, 0x13; syscall; 
0x0000000000118f94: mov eax, 0x14; sar rdx, 4; add rdx, 1; syscall; 
0x00000000000f12c0: mov eax, 0x14; syscall; 
0x00000000000eb760: mov eax, 0x15; syscall; 
0x00000000000ebef0: mov eax, 0x16; syscall; 
0x00000000000f1c2c: mov eax, 0x17; syscall; 
0x00000000000cb2a0: mov eax, 0x18; syscall; 
0x00000000000fabc3: mov eax, 0x19; syscall; 
0x00000000000f4909: mov eax, 0x1a; syscall; 
0x000000000003e049: mov eax, 0x1b8; add byte ptr [rax + 1], cl; ret; 
0x00000000000f4990: mov eax, 0x1b; syscall; 
0x00000000000cb608: mov eax, 0x1c; syscall; 
0x00000000000cb608: mov eax, 0x1c; syscall; neg eax; ret; 
0x00000000000fbea0: mov eax, 0x1d; syscall; 
0x00000000000fbe40: mov eax, 0x1e; syscall; 
0x00000000000fbed0: mov eax, 0x1f; syscall; 
0x000000000004e984: mov eax, 0x1fffffa; add byte ptr [rax], al; add bh, al; test dword ptr [rdx + rdi*8 + 0x1ffff], edx; add byte ptr [rax], al; jmp rax; 
0x000000000004ed6c: mov eax, 0x1fffffa; add byte ptr [rax], al; add bh, al; test dword ptr [rdx + rdi*8 + 0xffff], edx; add byte ptr [rax], al; jmp rax; 
0x000000000002ff17: mov eax, 0x200; ret; 
0x00000000000c2587: mov eax, 0x20; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000a1b6b: mov eax, 0x20; pop rbx; ret; 
0x00000000000c2570: mov eax, 0x20; ret; 
0x00000000000ebe60: mov eax, 0x20; syscall; 
0x00000000000c2584: mov eax, 0x20b8002f; add byte ptr [rax], al; add byte ptr [rbx + rax*4 + 0x3a], ah; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000ebe90: mov eax, 0x21; syscall; 
0x00000000000c0d79: mov eax, 0x22; syscall; 
0x00000000000c0dd9: mov eax, 0x23; syscall; 
0x00000000000b4260: mov eax, 0x24; syscall; 
0x000000000018d65d: mov eax, 0x25540002; cli; lcall ptr [rdx + rdi*4 + 0x26440002]; cli; jmp rsp; 
0x00000000000c0b90: mov eax, 0x25; syscall; 
0x00000000000b4290: mov eax, 0x26; syscall; 
0x00000000000fa362: mov eax, 0x27; syscall; 
0x00000000000ed2d3: mov eax, 0x28; syscall; 
0x00000000000fb5b0: mov eax, 0x29; syscall; 
0x00000000000fb159: mov eax, 0x2a; syscall; 
0x00000000000fb0c9: mov eax, 0x2b; syscall; 
0x00000000000fb3f6: mov eax, 0x2c; syscall; 
0x00000000000fb286: mov eax, 0x2d; syscall; 
0x00000000000fb499: mov eax, 0x2e; syscall; 
0x00000000000fb389: mov eax, 0x2f; syscall; 
0x00000000000a1b64: mov eax, 0x30; pop rbx; ret; 
0x00000000000fb580: mov eax, 0x30; syscall; 
0x00000000000fb120: mov eax, 0x31; syscall; 
0x00000000000fb240: mov eax, 0x32; syscall; 
0x000000000003d2c3: mov eax, 0x330e; mov word ptr [rsi], ax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x00000000000fb1e0: mov eax, 0x33; syscall; 
0x00000000000fb1b0: mov eax, 0x34; syscall; 
0x00000000000fb5e3: mov eax, 0x35; syscall; 
0x00000000000fb553: mov eax, 0x36; syscall; 
0x00000000000fb213: mov eax, 0x37; syscall; 
0x00000000000461e8: mov eax, 0x38; syscall; 
0x00000000000c0f99: mov eax, 0x3948fffb; ret; 
0x00000000000d62f5: mov eax, 0x39c77f04; ret 0xc189; 
0x00000000000d62dd: mov eax, 0x39df7f04; ret 0xc189; 
0x00000000000c114d: mov eax, 0x3a; syscall; 
0x00000000000c11e0: mov eax, 0x3b; syscall; 
0x00000000000eaf30: mov eax, 0x3c; syscall; 
0x00000000000c097b: mov eax, 0x3d; syscall; 
0x00000000000464d8: mov eax, 0x3e; movsxd rdi, ebx; syscall; 
0x0000000000036f00: mov eax, 0x3e; syscall; 
0x00000000000c08d0: mov eax, 0x3f; syscall; 
0x00000000000a1b5d: mov eax, 0x40; pop rbx; ret; 
0x00000000000c25c0: mov eax, 0x40; ret; 
0x00000000000fbdb0: mov eax, 0x40; syscall; 
0x00000000000fbd80: mov eax, 0x41; syscall; 
0x00000000000fbde3: mov eax, 0x42; syscall; 
0x00000000000fbe70: mov eax, 0x43; syscall; 
0x00000000000fbd20: mov eax, 0x44; syscall; 
0x0000000000173d3b: mov eax, 0x45155e93; ret 0x591c; 
0x00000000000fbc6c: mov eax, 0x45; syscall; 
0x00000000000fbccc: mov eax, 0x46; syscall; 
0x00000000000fbd50: mov eax, 0x47; syscall; 
0x0000000000121573: mov eax, 0x48000023; mov edi, ebp; call qword ptr [rax + 0x20]; 
0x00000000000eba82: mov eax, 0x48; syscall; 
0x000000000008ca4a: mov eax, 0x48fffffb; mov eax, edi; ret; 
0x00000000000ebcc0: mov eax, 0x49; syscall; 
0x00000000000f1dd9: mov eax, 0x4a; syscall; 
0x00000000000f1e69: mov eax, 0x4b; syscall; 
0x00000000000f3090: mov eax, 0x4c; syscall; 
0x0000000000060d9f: mov eax, 0x4cffffee; mov esi, ebp; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000000f30c0: mov eax, 0x4d; syscall; 
0x00000000000ec07b: mov eax, 0x4f; syscall; 
0x00000000000f23d9: mov eax, 0x50470f4c; sbb byte ptr [rax + 0x65], bh; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x00000000000ebfb0: mov eax, 0x50; syscall; 
0x00000000000ebfe0: mov eax, 0x51; syscall; 
0x000000000005db90: mov eax, 0x52; syscall; 
0x00000000000eb450: mov eax, 0x53; syscall; 
0x00000000000ecf80: mov eax, 0x54; syscall; 
0x00000000000ebf59: mov eax, 0x55; syscall; 
0x00000000000ece00: mov eax, 0x56; syscall; 
0x00000000000ecf20: mov eax, 0x57; syscall; 
0x00000000000ece60: mov eax, 0x58; syscall; 
0x00000000000ecec0: mov eax, 0x59; syscall; 
0x00000000000eb380: mov eax, 0x5a; syscall; 
0x0000000000129409: mov eax, 0x5b000000; pop rbp; ret; 
0x00000000000eb3b0: mov eax, 0x5b; syscall; 
0x0000000000053868: mov eax, 0x5c415d5b; mov eax, 1; pop r13; ret; 
0x00000000001650c4: mov eax, 0x5c60025; ret 0x25b8; 
0x00000000000ec7b0: mov eax, 0x5c; syscall; 
0x00000000000ec7e0: mov eax, 0x5d; syscall; 
0x00000000000ec810: mov eax, 0x5e; syscall; 
0x00000000000eb370: mov eax, 0x5f; syscall; 
0x00000000000eb370: mov eax, 0x5f; syscall; ret; 
0x00000000000a1b56: mov eax, 0x60; pop rbx; ret; 
0x00000000000f0c00: mov eax, 0x61; syscall; 
0x00000000000f0c60: mov eax, 0x62; syscall; 
0x00000000000fad70: mov eax, 0x63; syscall; 
0x00000000000f7fea: mov eax, 0x64; test edx, edx; cmovne eax, edx; ret; 
0x00000000000f23df: mov eax, 0x65; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x00000000000c1d10: mov eax, 0x66; syscall; 
0x00000000000c1d10: mov eax, 0x66; syscall; ret; 
0x00000000000fab60: mov eax, 0x67; syscall; 
0x00000000000c1d30: mov eax, 0x68; syscall; 
0x00000000000c1d30: mov eax, 0x68; syscall; ret; 
0x00000000000c1d8c: mov eax, 0x69; syscall; 
0x00000000000c1dec: mov eax, 0x6a; syscall; 
0x00000000000c1d20: mov eax, 0x6b; syscall; 
0x00000000000c1d20: mov eax, 0x6b; syscall; ret; 
0x00000000000c1d40: mov eax, 0x6c; syscall; 
0x00000000000c1d40: mov eax, 0x6c; syscall; ret; 
0x00000000000c1f10: mov eax, 0x6d; syscall; 
0x00000000000c1d00: mov eax, 0x6e; syscall; 
0x00000000000c1d00: mov eax, 0x6e; syscall; ret; 
0x00000000000c1f40: mov eax, 0x6f; syscall; 
0x00000000000c1f40: mov eax, 0x6f; syscall; ret; 
0x00000000001a9a5d: mov eax, 0x70400001; cmc; jmp qword ptr [rdx]; 
0x00000000000c1fa0: mov eax, 0x70; syscall; 
0x00000000001a9a75: mov eax, 0x70d80001; cmc; jmp qword ptr [rcx]; 
0x00000000001a9a8d: mov eax, 0x71700001; cmc; call rsp; 
0x00000000000f183e: mov eax, 0x71; syscall; 
0x00000000000f18ae: mov eax, 0x72; syscall; 
0x00000000000c1d50: mov eax, 0x73; syscall; 
0x00000000000bdf8a: mov eax, 0x74; syscall; 
0x00000000000e4a7f: mov eax, 0x75; mov rdi, rdx; syscall; 
0x00000000000c2040: mov eax, 0x75; syscall; 
0x00000000000c1fd0: mov eax, 0x76; syscall; 
0x00000000000e4aac: mov eax, 0x77; mov rdi, rdx; syscall; 
0x00000000000c20b0: mov eax, 0x77; syscall; 
0x00000000000c2000: mov eax, 0x78; syscall; 
0x00000000000c1ee0: mov eax, 0x79; syscall; 
0x00000000000fa470: mov eax, 0x7a; syscall; 
0x00000000000fa4a0: mov eax, 0x7b; syscall; 
0x00000000000c1f70: mov eax, 0x7c; syscall; 
0x00000000000c2479: mov eax, 0x7d00; ret; 
0x00000000000fa860: mov eax, 0x7d; syscall; 
0x00000000000c24a8: mov eax, 0x7e; ret; 
0x00000000000fa890: mov eax, 0x7e; syscall; 
0x00000000000363e4: mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x00000000000c243f: mov eax, 0x7f; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000c23fb: mov eax, 0x7f; ret; 
0x0000000000036f35: mov eax, 0x7f; syscall; 
0x00000000000a1b4f: mov eax, 0x80; pop rbx; ret; 
0x0000000000037c37: mov eax, 0x80; syscall; 
0x0000000000037f0d: mov eax, 0x81; syscall; 
0x0000000000036f6f: mov eax, 0x82; syscall; 
0x000000000003256c: mov eax, 0x83640038; cmp byte ptr [rsp + rsi*2], al; fmul qword ptr [rcx + 0x63]; cld; mov eax, 3; syscall; 
0x00000000000374c0: mov eax, 0x83; syscall; 
0x00000000000eafa0: mov eax, 0x84; syscall; 
0x00000000001117dd: mov eax, 0x85480000; sal byte ptr [rcx + rcx + 0x48], 0x8d; cmp eax, 0x2b1734; call rax; 
0x00000000000eb136: mov eax, 0x85; syscall; 
0x00000000000fae30: mov eax, 0x86; syscall; 
0x00000000000fac20: mov eax, 0x87; syscall; 
0x00000000000f780a: mov eax, 0x88; syscall; 
0x00000000000c0f5d: mov eax, 0x8948fffb; ret; 
0x00000000000eba76: mov eax, 0x894c1f74; ret 0x6348; 
0x00000000000eb230: mov eax, 0x89; syscall; 
0x00000000000eb260: mov eax, 0x8a; syscall; 
0x000000000013fdc4: mov eax, 0x8b000274; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000f1020: mov eax, 0x8d; syscall; 
0x00000000000cb1e0: mov eax, 0x8e; syscall; 
0x00000000000cb210: mov eax, 0x8f; syscall; 
0x0000000000135937: mov eax, 0x908; call qword ptr [rax + 0xf08]; 
0x00000000000cb240: mov eax, 0x90; syscall; 
0x00000000000cb270: mov eax, 0x91; syscall; 
0x00000000000cb2d0: mov eax, 0x92; syscall; 
0x00000000000cb300: mov eax, 0x93; syscall; 
0x00000000000cb330: mov eax, 0x94; syscall; 
0x00000000000f49f0: mov eax, 0x95; syscall; 
0x00000000000f4a20: mov eax, 0x96; syscall; 
0x00000000000f4a50: mov eax, 0x97; syscall; 
0x00000000000f4a80: mov eax, 0x98; syscall; 
0x00000000000f2180: mov eax, 0x99; syscall; 
0x00000000000fa7c0: mov eax, 0x9a; syscall; 
0x00000000000fac50: mov eax, 0x9b; syscall; 
0x0000000000189460: mov eax, 0x9cffeefd; or al, 1; add bl, dl; std; out dx, al; jmp rsp; 
0x00000000000fac83: mov eax, 0x9d; syscall; 
0x00000000000fa790: mov eax, 0x9e; syscall; 
0x00000000000fa830: mov eax, 0x9f; syscall; 
0x00000000000f0c30: mov eax, 0xa0; syscall; 
0x00000000000f1da0: mov eax, 0xa1; syscall; 
0x0000000000003150: mov eax, 0xa1a3e95a; ret 0xba88; 
0x00000000000f1e30: mov eax, 0xa2; syscall; 
0x00000000000f1d70: mov eax, 0xa3; syscall; 
0x00000000000b1410: mov eax, 0xa4; syscall; 
0x00000000000fab93: mov eax, 0xa5; syscall; 
0x00000000000fa410: mov eax, 0xa6; syscall; 
0x00000000000f21b0: mov eax, 0xa7; syscall; 
0x00000000000f21e0: mov eax, 0xa8; syscall; 
0x00000000000f1eff: mov eax, 0xa9; syscall; 
0x00000000000f48d0: mov eax, 0xa; syscall; 
0x00000000000f1b50: mov eax, 0xaa; syscall; 
0x00000000000f1bf0: mov eax, 0xab; syscall; 
0x00000000000fa280: mov eax, 0xac; syscall; 
0x00000000000fa250: mov eax, 0xad; syscall; 
0x00000000000fa8f0: mov eax, 0xae; syscall; 
0x00000000000faa73: mov eax, 0xaf; syscall; 
0x00000000000fa920: mov eax, 0xb0; syscall; 
0x00000000000faa40: mov eax, 0xb1; syscall; 
0x00000000000facb3: mov eax, 0xb2; syscall; 
0x00000000000face3: mov eax, 0xb3; syscall; 
0x00000000000fabf0: mov eax, 0xb4; syscall; 
0x0000000000132d13: mov eax, 0xb5; syscall; 
0x0000000000132d63: mov eax, 0xb6; syscall; 
0x0000000000123c37: mov eax, 0xb8000000; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000003d31a: mov eax, 0xb; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x00000000000f48a0: mov eax, 0xb; syscall; 
0x00000000001717b0: mov eax, 0xba000004; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000036c14: mov eax, 0xba; syscall; 
0x00000000000f6354: mov eax, 0xbaffffea; add al, 0; add byte ptr [rax], al; mov esi, 2; mov rdi, r15; call rbx; 
0x00000000000fa440: mov eax, 0xbb; syscall; 
0x00000000000f8213: mov eax, 0xbc; syscall; 
0x00000000001728f8: mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000000f81b3: mov eax, 0xbd; syscall; 
0x00000000000f8093: mov eax, 0xbe; syscall; 
0x00000000000f80c3: mov eax, 0xbf; syscall; 
0x00000000000f8123: mov eax, 0xc0; syscall; 
0x00000000000f8003: mov eax, 0xc1; syscall; 
0x00000000000f80f0: mov eax, 0xc2; syscall; 
0x00000000000f8150: mov eax, 0xc3; syscall; 
0x00000000000f8030: mov eax, 0xc4; syscall; 
0x00000000000f81e0: mov eax, 0xc5; syscall; 
0x00000000000f8180: mov eax, 0xc6; syscall; 
0x00000000000f8060: mov eax, 0xc7; syscall; 
0x000000000010c4b8: mov eax, 0xca; add rsp, 0x28; ret; 
0x000000000010c454: mov eax, 0xca; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000108064: mov eax, 0xca; syscall; 
0x0000000000108092: mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x0000000000108139: mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000000cb428: mov eax, 0xcb; syscall; 
0x00000000000cb4f4: mov eax, 0xcc; syscall; 
0x00000000000fa950: mov eax, 0xd5; syscall; 
0x00000000000f49c3: mov eax, 0xd8; syscall; 
0x00000000000fbe13: mov eax, 0xdc; syscall; 
0x00000000000ed0e6: mov eax, 0xdd; syscall; 
0x000000000003d2cc: mov eax, 0xdeece66d; add eax, 0x48000000; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x000000000012aca6: mov eax, 0xe0; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000108890: mov eax, 0xe3; syscall; 
0x00000000000fa7f0: mov eax, 0xe4; syscall; 
0x00000000000fa7f0: mov eax, 0xe4; syscall; ret; 
0x00000000000c2bf7: mov eax, 0xe5; syscall; 
0x000000000010896a: mov eax, 0xe6; mov r10, rcx; syscall; 
0x0000000000108923: mov eax, 0xe6; syscall; 
0x00000000000fa9ec: mov eax, 0xe8; syscall; 
0x00000000000fa9b3: mov eax, 0xe9; syscall; 
0x0000000000036ed9: mov eax, 0xe; syscall; 
0x0000000000036c30: mov eax, 0xea; syscall; 
0x00000000000f2ee0: mov eax, 0xeb; syscall; 
0x0000000000160d49: mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000f1eac: mov eax, 0xf7002cbf; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0b42: mov eax, 0xf7; mov edi, dword ptr [rsp + 0xc]; movsxd r10, ecx; syscall; 
0x00000000000c0af4: mov eax, 0xf7; syscall; 
0x0000000000036cb1: mov eax, 0xf; syscall; 
0x00000000000c249f: mov eax, 0xfa; ret; 
0x00000000000c24c0: mov eax, 0xfc17; ret; 
0x00000000000faad0: mov eax, 0xfd; syscall; 
0x00000000000faaa0: mov eax, 0xfe; syscall; 
0x00000000000959fe: mov eax, 0xff2face8; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rax - 0x77]; ret 0x1e75; 
0x00000000000fab30: mov eax, 0xff; syscall; 
0x0000000000050ce4: mov eax, 0xfff0b6e9; jmp qword ptr [rsi + 0xf]; 
0x00000000000c24b0: mov eax, 0xfffa; ret; 
0x00000000000c8488: mov eax, 0xfffb08e9; jmp qword ptr [rsi - 0x70]; 
0x00000000000366fa: mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x0000000000039d8b: mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000634de: mov eax, 0xfffffee; test dword ptr [rdi + rax*8 + 0x6ae9ffff], esi; ret 0xffff; 
0x00000000000c094c: mov eax, 0xfffffff2; ret; 
0x00000000000377ce: mov eax, 0xfffffffe; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000380ff: mov eax, 0xffffffff; add rsp, 0x240; pop rbx; pop rbp; pop r12; ret; 
0x0000000000076b62: mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000108871: mov eax, 0xffffffff; add rsp, 8; ret; 
0x00000000000f0d89: mov eax, 0xffffffff; cmove rbx, rax; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x000000000002f914: mov eax, 0xffffffff; cmovne rax, rdx; ret; 
0x0000000000025867: mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x00000000000739e7: mov eax, 0xffffffff; pop r12; ret; 
0x00000000001177ef: mov eax, 0xffffffff; pop r14; ret; 
0x0000000000075e85: mov eax, 0xffffffff; pop r15; ret; 
0x000000000007693d: mov eax, 0xffffffff; pop rbp; ret; 
0x000000000003bf22: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000002c2a7: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000076c44: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000000357de: mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000036bf7: mov eax, 0xffffffff; ret; 
0x00000000000cb7e8: mov eax, 0xffffffff; setne dl; cmovbe eax, edx; ret; 
0x0000000000048772: mov eax, 0xffffffff; test edx, edx; cmovns eax, edx; pop rbx; ret; 
0x0000000000036bc9: mov eax, 0xffffffff; test edx, edx; cmovns rax, qword ptr [rsp + 0xa0]; add rsp, 0x148; ret; 
0x00000000000f9039: mov eax, 1; add rsp, 0x10; pop rbx; ret; 
0x000000000012d441: mov eax, 1; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000048a60: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f262e: mov eax, 1; add rsp, 8; ret; 
0x0000000000020c6b: mov eax, 1; mov dword ptr [r9 + rcx*4], esi; inc dword ptr [rdi + 4]; ret; 
0x0000000000039ce1: mov eax, 1; mov dword ptr [rdx], ecx; ret; 
0x00000000001276e8: mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x000000000003d361: mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x00000000000739d0: mov eax, 1; pop r12; ret; 
0x000000000005386d: mov eax, 1; pop r13; ret; 
0x000000000005379f: mov eax, 1; pop r14; ret; 
0x0000000000074f0b: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000101c6d: mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000000f8fd2: mov eax, 1; pop rbx; ret; 
0x000000000002c050: mov eax, 1; ret; 
0x000000000003778d: mov eax, 1; shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000eb709: mov eax, 1; syscall; 
0x00000000000a2ef1: mov eax, 2; ret; 
0x00000000000eb4b9: mov eax, 2; syscall; 
0x00000000000f8338: mov eax, 3; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000112f42: mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000001087f7: mov eax, 3; neg ecx; cmp edx, -0x16; cmovne eax, ecx; ret; 
0x00000000000f83b6: mov eax, 3; pop rbx; pop rbp; ret; 
0x00000000000a2f01: mov eax, 3; ret; 
0x000000000001ff65: mov eax, 3; syscall; 
0x00000000001136c3: mov eax, 3; syscall; ret; 
0x00000000000a2f11: mov eax, 4; ret; 
0x00000000000eb03e: mov eax, 4; syscall; 
0x00000000000e520d: mov eax, 5; pop r12; ret; 
0x000000000010ac54: mov eax, 5; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000000e583c: mov eax, 5; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000a2f21: mov eax, 5; ret; 
0x00000000000eb08d: mov eax, 5; syscall; 
0x00000000000a2f31: mov eax, 6; ret; 
0x00000000000eb0de: mov eax, 6; syscall; 
0x000000000010607c: mov eax, 7; pop rbx; pop rbp; ret; 
0x00000000000a2f41: mov eax, 7; ret; 
0x00000000000ecfb9: mov eax, 7; syscall; 
0x00000000000ed03d: mov eax, 8; mov eax, 0x10f; syscall; 
0x00000000000a1b72: mov eax, 8; pop rbx; ret; 
0x00000000000fa3a9: mov eax, 8; syscall; 
0x00000000000e4129: mov eax, 9; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000e426e: mov eax, 9; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f4873: mov eax, 9; syscall; 
0x0000000000035752: mov eax, dword ptr [r10 + r8*4 + 8]; add rax, qword ptr [rdi + 0x20]; pop rbx; ret; 
0x00000000000a177a: mov eax, dword ptr [r9 + 4]; pop r12; ret; 
0x0000000000135d58: mov eax, dword ptr [rax + 0x108]; jmp rax; 
0x000000000012ce68: mov eax, dword ptr [rax + 0x10]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000128017: mov eax, dword ptr [rax + 0x10]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000074e51: mov eax, dword ptr [rax + 0x140]; call qword ptr [rax + 0x68]; 
0x0000000000074f99: mov eax, dword ptr [rax + 0x140]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000074db9: mov eax, dword ptr [rax + 0x140]; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000074671: mov eax, dword ptr [rax + 0x140]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000000769dc: mov eax, dword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000000704c1: mov eax, dword ptr [rax + 0x140]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000000fcd10: mov eax, dword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x000000000012d660: mov eax, dword ptr [rax + 0x18]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000007448c: mov eax, dword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000000fcac0: mov eax, dword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000007b13c: mov eax, dword ptr [rax + 0x18]; jmp rax; 
0x000000000007482c: mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x0000000000074631: mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x00000000001079a0: mov eax, dword ptr [rax + 0x30]; ret; 
0x0000000000050a50: mov eax, dword ptr [rax + 0x38]; mov dword ptr [rbp - 0xc8], r9d; mov rdx, r8; mov qword ptr [rbp - 0xb0], r8; mov rdi, rbx; call rax; 
0x0000000000075b21: mov eax, dword ptr [rax + 0x38]; mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x00000000000fd427: mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000007b688: mov eax, dword ptr [rax + 0x40]; jmp rax; 
0x0000000000127604: mov eax, dword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000030102: mov eax, dword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000006ffa3: mov eax, dword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000007ba9c: mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x000000000002ff32: mov eax, dword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000007026d: mov eax, dword ptr [rax + 0x48]; xor edx, edx; pop r12; jmp rax; 
0x0000000000070b84: mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000127eb4: mov eax, dword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000002ff12: mov eax, dword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000487a6: mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000123a1a: mov eax, dword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000002cd6e: mov eax, dword ptr [rax + 0xa8]; ret; 
0x00000000000f82a1: mov eax, dword ptr [rax + 0xc8]; ret; 
0x000000000012804f: mov eax, dword ptr [rax + 0xc]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000135c5f: mov eax, dword ptr [rax + 0xe8]; jmp rax; 
0x000000000012cff5: mov eax, dword ptr [rax + 8]; jmp rax; 
0x00000000000f827a: mov eax, dword ptr [rax + 8]; ret; 
0x00000000000cce09: mov eax, dword ptr [rax + 8]; test rax, rax; cmove rax, qword ptr [rbp - 0xa8]; mov rdi, rax; call rbx; 
0x000000000002ff15: mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000300d7: mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000002fabf: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000120355: mov eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000018810d: mov eax, dword ptr [rax]; add byte ptr [rsp + rbp*8 - 0x16], ah; jmp rsp; 
0x000000000013659d: mov eax, dword ptr [rax]; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x0000000000123ae9: mov eax, dword ptr [rax]; bswap eax; mov dword ptr [rcx + 0xb4], eax; mov eax, 1; ret; 
0x0000000000123c31: mov eax, dword ptr [rax]; bswap eax; mov dword ptr [rcx + 0xb8], eax; mov eax, 1; ret; 
0x0000000000127fd7: mov eax, dword ptr [rax]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000012cfea: mov eax, dword ptr [rax]; jmp rax; 
0x00000000000bcb2b: mov eax, dword ptr [rax]; lea rdx, qword ptr [rdi + rdi*8]; lea rax, qword ptr [rax + rdx*8]; add rsp, 0x10; pop rbx; ret; 
0x000000000002cd6c: mov eax, dword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000135cdc: mov eax, dword ptr [rax]; mov qword ptr [rsp], rax; mov rax, qword ptr [rip + 0x288177]; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x00000000000300ff: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000002ff2f: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000002ff0f: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000002fabc: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000002cd69: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x00000000000300fc: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000002ff2c: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000002ff0c: mov eax, dword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000135e60: mov eax, dword ptr [rax]; mov rdx, qword ptr [rsp + 0x48]; add rax, qword ptr [rdx + 8]; add rsp, 0x58; ret; 
0x0000000000047599: mov eax, dword ptr [rax]; mov rdx, rax; call 0x475b0; add rsp, 0xd8; ret; 
0x000000000002fe6c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000002fe4c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000002fe2c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000002fdac: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000002fdec: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000002fd4c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000002fdcc: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000002fd8c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000002feec: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002fd6c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000002fe0c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000002fd2c: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x00000000001079f0: mov eax, dword ptr [rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x00000000000487a3: mov eax, dword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000011c419: mov eax, dword ptr [rax]; ret; 
0x00000000000b9f61: mov eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000123c01: mov eax, dword ptr [rax]; sub eax, 1; bswap eax; mov dword ptr [rcx + 0xa8], eax; mov eax, 1; ret; 
0x00000000000d1bf8: mov eax, dword ptr [rbp + 0x4c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001289cc: mov eax, dword ptr [rbp + 0x60]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000079590: mov eax, dword ptr [rbp + 0xd8]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000007968d: mov eax, dword ptr [rbp + 0xd8]; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000012db06: mov eax, dword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x0000000000120f78: mov eax, dword ptr [rbp + 8]; lea esi, dword ptr [r12 + 3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x0000000000120ee1: mov eax, dword ptr [rbp + 8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000120fa2: mov eax, dword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000012a7f0: mov eax, dword ptr [rbp + 8]; mov qword ptr [rsp], r15; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x000000000011fef0: mov eax, dword ptr [rbp + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000012a856: mov eax, dword ptr [rbp + 8]; mov rdi, r13; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000011fffd: mov eax, dword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000001216f1: mov eax, dword ptr [rbp + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x00000000001217ed: mov eax, dword ptr [rbp + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000012db39: mov eax, dword ptr [rbp + 8]; mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x000000000003087c: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000cc9d0: mov eax, dword ptr [rbp - 0x120]; mov qword ptr [rsp], rax; call rbx; 
0x00000000000c3db0: mov eax, dword ptr [rbp - 0x418]; call qword ptr [rax + 0x20]; 
0x00000000000c3c43: mov eax, dword ptr [rbp - 0x418]; call qword ptr [rax + 0x30]; 
0x00000000000c3d5b: mov eax, dword ptr [rbp - 0x418]; lea rsi, qword ptr [rbp - 0x360]; mov rdi, r14; call qword ptr [rax + 0x40]; 
0x00000000000c39f7: mov eax, dword ptr [rbp - 0x418]; mov rdi, qword ptr [rbp - 0x3f8]; call qword ptr [rax + 0x28]; 
0x00000000000f5775: mov eax, dword ptr [rbp - 0x48]; call rax; 
0x00000000000bd88b: mov eax, dword ptr [rbp - 0x58]; call rax; 
0x0000000000023ff1: mov eax, dword ptr [rbp - 0x60]; call rax; 
0x00000000000cc5ee: mov eax, dword ptr [rbp - 0xc0]; mov rdx, r14; mov rsi, qword ptr [rbp - 0xb0]; mov rdi, qword ptr [rbp - 0xa8]; call rbx; 
0x0000000000101f40: mov eax, dword ptr [rbx + 0x10]; mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012c38b: mov eax, dword ptr [rbx + 0x18]; lea r12, qword ptr [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x0000000000101f70: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012c3d1: mov eax, dword ptr [rbx + 0x18]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x0000000000072f61: mov eax, dword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000011f4ab: mov eax, dword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000011f469: mov eax, dword ptr [rbx + 0x20]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000011f54f: mov eax, dword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000011f4bf: mov eax, dword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x0000000000121571: mov eax, dword ptr [rbx + 0x23b8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000ed636: mov eax, dword ptr [rbx + 0x38]; lea rcx, qword ptr [rbx + 0x28]; mov rdi, qword ptr [rbx + 0x18]; mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x0000000000127860: mov eax, dword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000127876: mov eax, dword ptr [rbx + 0x70]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000006e009: mov eax, dword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x00000000000769d1: mov eax, dword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000123d35: mov eax, dword ptr [rbx + 0xd0]; mov dword ptr [rbx + 0xa8], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000123d54: mov eax, dword ptr [rbx + 0xd0]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000797c3: mov eax, dword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x00000000000700d8: mov eax, dword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000007b231: mov eax, dword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007b7c5: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000007bd65: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000006de86: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x00000000000706ee: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000074821: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000074626: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000004a70d: mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; sub r13, rsi; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000004c1f7: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006ed8b: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006e6e2: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078d9a: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000004a18d: mov eax, dword ptr [rbx + 0xd8]; mov rdx, r13; mov rsi, qword ptr [rbp - 0x598]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007a3ca: mov eax, dword ptr [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000004aa9f: mov eax, dword ptr [rbx + 0xd8]; mov rsi, qword ptr [r12 + 0x18]; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000070684: mov eax, dword ptr [rbx + 0xd8]; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000000792aa: mov eax, dword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000075cad: mov eax, dword ptr [rbx + 0xd8]; mov rsi, r15; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x000000000004eefe: mov eax, dword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007c153: mov eax, dword ptr [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000006d971: mov eax, dword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012ddb1: mov eax, dword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000012dd90: mov eax, dword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000012d0c1: mov eax, dword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000012d0ee: mov eax, dword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000121af1: mov eax, dword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x00000000001202e9: mov eax, dword ptr [rbx + 8]; mov esi, r14d; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x0000000000072f59: mov eax, dword ptr [rbx + 8]; mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x0000000000101f10: mov eax, dword ptr [rbx + 8]; mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012ce49: mov eax, dword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012ce81: mov eax, dword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000120295: mov eax, dword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000120271: mov eax, dword ptr [rbx + 8]; mov rdi, rbx; mov qword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x0000000000121b11: mov eax, dword ptr [rbx + 8]; mov rsi, rsp; mov rdi, rbx; call qword ptr [rax]; 
0x000000000007a5c2: mov eax, dword ptr [rbx + 8]; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001202c1: mov eax, dword ptr [rbx + 8]; sub rdx, r13; mov esi, r12d; mov rdi, rbx; mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x0000000000129404: mov eax, dword ptr [rbx]; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000129344: mov eax, dword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x0000000000129daa: mov eax, dword ptr [rbx]; mov rdx, qword ptr [rax + 8]; mov rdi, rax; call qword ptr [rdx + 0x20]; 
0x0000000000127740: mov eax, dword ptr [rcx + 0x48]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000127790: mov eax, dword ptr [rcx + 0x54]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000127768: mov eax, dword ptr [rcx + 0x58]; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000123c18: mov eax, dword ptr [rcx + 0xb8]; bswap eax; mov eax, eax; mov qword ptr [r8], rax; mov eax, 1; ret; 
0x00000000000738d3: mov eax, dword ptr [rcx + 0xd8]; mov rsi, rdi; mov rdx, rbp; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000015c8a4: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, qword ptr [rdx + 6]; ret; 
0x0000000000099bc9: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000015c885: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, qword ptr [rdx + 5]; ret; 
0x0000000000099baa: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x00000000000a177b: mov eax, dword ptr [rcx + 4]; pop r12; ret; 
0x000000000015c8b6: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x0000000000158566: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000015c937: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x00000000001585a7: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000015c8d6: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x0000000000158576: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000015c957: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x00000000001585c7: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000015c8f6: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x0000000000099c4d: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000015ebbf: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c977: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x00000000001585e7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000015c916: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x0000000000099c6d: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000015c807: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x00000000001584d7: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000003c191: mov eax, dword ptr [rcx + 8]; mov rdi, qword ptr [rcx + 0x10]; mov esi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003c171: mov eax, dword ptr [rcx + 8]; mov rsi, qword ptr [rcx + 0x10]; mov edi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000099c2e: mov eax, dword ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x000000000003c1b1: mov eax, dword ptr [rcx + 8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000013915a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013aa32: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000123bb8: mov eax, dword ptr [rcx]; mov dword ptr [r8], eax; mov eax, 1; ret; 
0x000000000015c860: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, qword ptr [rdx + 3]; ret; 
0x000000000015c870: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, qword ptr [rdx + 4]; ret; 
0x0000000000099b85: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000015c880: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, qword ptr [rdx + 5]; ret; 
0x0000000000099ba5: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000127710: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000015c8a0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, qword ptr [rdx + 6]; ret; 
0x0000000000099bc5: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000099b75: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000015ec6c: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c7b1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; ret; 
0x000000000015c8b1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x0000000000158561: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000015c8d1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x0000000000158571: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000015c8f1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x0000000000158581: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000015c911: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x0000000000158591: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000015c931: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x00000000001585a1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000015c951: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x00000000001585c1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000015c971: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x00000000001585e1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000015c801: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x00000000001584d1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000158481: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000015c831: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, qword ptr [rdx + 1]; ret; 
0x000000000015c841: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x0000000000099b56: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000099b46: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000000e4d05: mov eax, dword ptr [rdi + 0x100]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x00000000000e4d30: mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000007d081: mov eax, dword ptr [rdi + 0x10]; cmp qword ptr [rdi + 0x28], rax; cmovae rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000007520f: mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x000000000007c5a0: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000007c5c8: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000000e4d20: mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000012e25f: mov eax, dword ptr [rdi + 0x18]; add rsi, rax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x000000000012e66c: mov eax, dword ptr [rdi + 0x18]; pop rbx; pop rbp; pop r12; ret; 
0x000000000012e201: mov eax, dword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000120cee: mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi + 8], eax; ret; 
0x0000000000120d5f: mov eax, dword ptr [rdi + 0x20]; mov qword ptr [rsi + 8], rax; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000bd241: mov eax, dword ptr [rdi + 0x20]; ret; 
0x000000000010207e: mov eax, dword ptr [rdi + 0x28]; mov edi, 0x2000001; mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x0000000000120d67: mov eax, dword ptr [rdi + 0x28]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000471a2: mov eax, dword ptr [rdi + 0x28]; mov r9, qword ptr [rdi + 0x30]; mov rdi, qword ptr [rdi + 0x68]; xor eax, eax; ret; 
0x000000000012e5e0: mov eax, dword ptr [rdi + 0x28]; ret; 
0x0000000000072fa1: mov eax, dword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000012b0c9: mov eax, dword ptr [rdi + 0x30]; mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000011f5de: mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000123e7a: mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000012934a: mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000011f487: mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x0000000000120d97: mov eax, dword ptr [rdi + 0x38]; mov qword ptr [rsi + 8], rax; mov rax, qword ptr [rdi + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000012b08c: mov eax, dword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012b08c: mov eax, dword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x0000000000120d9f: mov eax, dword ptr [rdi + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000072e91: mov eax, dword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x0000000000070b81: mov eax, dword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000007b02b: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000007c871: mov eax, dword ptr [rdi + 0x68]; ret; 
0x00000000000e43f8: mov eax, dword ptr [rdi + 0x80]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x000000000005dca1: mov eax, dword ptr [rdi + 0x88]; mov qword ptr [rax + 8], r8; mov dword ptr [rax + 4], 1; xor eax, eax; ret; 
0x0000000000128034: mov eax, dword ptr [rdi + 0x90]; bswap edx; mov dword ptr [rax + 0x10], edx; mov eax, 1; ret; 
0x0000000000127f14: mov eax, dword ptr [rdi + 0x90]; bswap edx; mov dword ptr [rax + 0xc], edx; mov eax, 1; ret; 
0x000000000007a31e: mov eax, dword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x000000000007369a: mov eax, dword ptr [rdi + 0xd8]; call qword ptr [rax + 0x60]; 
0x000000000007ba91: mov eax, dword ptr [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x0000000000076012: mov eax, dword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000000750b1: mov eax, dword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000007b135: mov eax, dword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000007b681: mov eax, dword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000074432: mov eax, dword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000007b97b: mov eax, dword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x60]; 
0x0000000000074d52: mov eax, dword ptr [rdi + 0xd8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000006fdf8: mov eax, dword ptr [rdi + 0xd8]; mov rdx, rbp; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x000000000005ea69: mov eax, dword ptr [rdi + 0xd8]; movsxd r12, edx; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000049be1: mov eax, dword ptr [rdi + 0xd8]; movsxd r13, edx; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000000e44d0: mov eax, dword ptr [rdi + 4]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000f05c0: mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x000000000012b095: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012b095: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x000000000011f7e1: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x00000000001293f5: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x000000000012e0c2: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e0c2: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; ret; 
0x0000000000121a5b: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121a5b: mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000012941d: mov eax, dword ptr [rdi + 8]; lea rdx, qword ptr [rsp + 0x10]; mov esi, 6; call qword ptr [rax + 0x28]; 
0x000000000012949b: mov eax, dword ptr [rdi + 8]; lea rdx, qword ptr [rsp + 0xc]; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x0000000000127031: mov eax, dword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x000000000012d6f1: mov eax, dword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000121aa1: mov eax, dword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 8]; call qword ptr [rax]; 
0x000000000011fd83: mov eax, dword ptr [rdi + 8]; mov dword ptr [rsp + 0x1c], 0; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000012d9d1: mov eax, dword ptr [rdi + 8]; mov qword ptr [rsp + 8], r8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000012d471: mov eax, dword ptr [rdi + 8]; mov qword ptr [rsp], rdx; mov rsi, rsp; call qword ptr [rax + 8]; 
0x000000000012e009: mov eax, dword ptr [rdi + 8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x000000000012e019: mov eax, dword ptr [rdi + 8]; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000012cff1: mov eax, dword ptr [rdi + 8]; mov rax, qword ptr [rax + 8]; jmp rax; 
0x000000000012cfe6: mov eax, dword ptr [rdi + 8]; mov rax, qword ptr [rax]; jmp rax; 
0x000000000011fcec: mov eax, dword ptr [rdi + 8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000012b4e5: mov eax, dword ptr [rdi + 8]; mov rdi, r15; call qword ptr [rax + 0x28]; 
0x000000000012b451: mov eax, dword ptr [rdi + 8]; mov rdi, r15; call qword ptr [rax + 8]; 
0x000000000012aa46: mov eax, dword ptr [rdi + 8]; mov rdi, r15; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000012b52c: mov eax, dword ptr [rdi + 8]; mov rdi, r15; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000012b309: mov eax, dword ptr [rdi + 8]; mov rsi, rbx; mov rdi, r15; call qword ptr [rax]; 
0x000000000012dd59: mov eax, dword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x0000000000121a31: mov eax, dword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000012dd7e: mov eax, dword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d09f: mov eax, dword ptr [rdi + 8]; sar rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x000000000012dede: mov eax, dword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d15f: mov eax, dword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x000000000002f9a3: mov eax, dword ptr [rdi + rax]; ret; 
0x0000000000072f00: mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x0000000000072ed0: mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000127fa0: mov eax, dword ptr [rdi]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000039e7c: mov eax, dword ptr [rdi]; mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000108175: mov eax, dword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x00000000000bd340: mov eax, dword ptr [rdi]; ret; 
0x00000000000735f0: mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x0000000000073600: mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x0000000000072f92: mov eax, dword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x0000000000072e82: mov eax, dword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000070b5b: mov eax, dword ptr [rdx + 0x48]; cmp eax, dword ptr [rdx + 0x4c]; cmovne eax, ecx; ret; 
0x0000000000075868: mov eax, dword ptr [rdx + 8]; cmp qword ptr [rdx + 0x20], rax; cmovae rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x0000000000035753: mov eax, dword ptr [rdx + rax*4 + 8]; add rax, qword ptr [rdi + 0x20]; pop rbx; ret; 
0x000000000008eec6: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001211d8: mov eax, dword ptr [rdx + rax*8]; jmp rax; 
0x000000000013e6b0: mov eax, dword ptr [rdx]; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x0000000000076948: mov eax, dword ptr [rdx]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000037a70: mov eax, dword ptr [rdx]; and rax, qword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000001276b1: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [rcx + 0x54], eax; mov eax, 1; ret; 
0x0000000000127781: mov eax, dword ptr [rdx]; bswap eax; mov dword ptr [rcx + 0x58], eax; mov eax, 1; ret; 
0x000000000012d738: mov eax, dword ptr [rdx]; lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000e3178: mov eax, dword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x0000000000037b70: mov eax, dword ptr [rdx]; or rax, qword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000074667: mov eax, dword ptr [rdx]; pop rbx; ret; 
0x00000000000753d0: mov eax, dword ptr [rdx]; ret; 
0x0000000000127751: mov eax, dword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [rcx + 0x48], eax; mov eax, 1; ret; 
0x0000000000136501: mov eax, dword ptr [rip + 0x287881]; add rax, qword ptr fs:[0]; ret; 
0x00000000001365e1: mov eax, dword ptr [rip + 0x287881]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000135f61: mov eax, dword ptr [rip + 0x287ef9]; call qword ptr [rax + 0xf0]; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000135d51: mov eax, dword ptr [rip + 0x288109]; mov rax, qword ptr [rax + 0x108]; jmp rax; 
0x0000000000135ce3: mov eax, dword ptr [rip + 0x288177]; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x0000000000135c82: mov eax, dword ptr [rip + 0x2881d8]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x0000000000135c51: mov eax, dword ptr [rip + 0x288209]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x0000000000133701: mov eax, dword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000001336b1: mov eax, dword ptr [rip + 0x288441]; pop r12; jmp rax; 
0x0000000000133651: mov eax, dword ptr [rip + 0x288499]; pop r12; jmp rax; 
0x00000000001335eb: mov eax, dword ptr [rip + 0x2884f7]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000001355e1: mov eax, dword ptr [rip + 0x288881]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000013524d: mov eax, dword ptr [rip + 0x28a63d]; call qword ptr [rax + 0x28]; 
0x0000000000135226: mov eax, dword ptr [rip + 0x28a664]; call qword ptr [rax]; 
0x0000000000134e9b: mov eax, dword ptr [rip + 0x28a9ef]; xor ebp, ebp; call qword ptr [rax + 0x28]; 
0x0000000000132ec9: mov eax, dword ptr [rip + 0x28af99]; mov dword ptr fs:[rax], 2; mov eax, 0xffffffff; ret; 
0x0000000000132db1: mov eax, dword ptr [rip + 0x28b0b1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d91: mov eax, dword ptr [rip + 0x28b0d1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d41: mov eax, dword ptr [rip + 0x28b121]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132cf1: mov eax, dword ptr [rip + 0x28b171]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000133bc0: mov eax, dword ptr [rip + 0x28bcca]; mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x18]; 
0x0000000000133b1d: mov eax, dword ptr [rip + 0x28bd6d]; mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x00000000001338c2: mov eax, dword ptr [rip + 0x28bfc8]; call qword ptr [rax + 0x28]; 
0x0000000000133855: mov eax, dword ptr [rip + 0x28c035]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x00000000001337d8: mov eax, dword ptr [rip + 0x28c0b2]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x0000000000133762: mov eax, dword ptr [rip + 0x28c128]; call qword ptr [rax]; 
0x0000000000136b61: mov eax, dword ptr [rip + 0x28d429]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136b31: mov eax, dword ptr [rip + 0x28d451]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136b01: mov eax, dword ptr [rip + 0x28d479]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136ad1: mov eax, dword ptr [rip + 0x28d4a1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136b9e: mov eax, dword ptr [rip + 0x28d4a4]; mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000136aa1: mov eax, dword ptr [rip + 0x28d4c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136a71: mov eax, dword ptr [rip + 0x28d4f1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ac81: mov eax, dword ptr [rip + 0x293201]; add rsp, 8; ret; 
0x000000000012ac51: mov eax, dword ptr [rip + 0x293299]; add rsp, 8; ret; 
0x000000000012abf1: mov eax, dword ptr [rip + 0x293381]; add rsp, 8; ret; 
0x000000000012ac21: mov eax, dword ptr [rip + 0x2933c1]; add rsp, 8; ret; 
0x000000000012ab11: mov eax, dword ptr [rip + 0x293469]; lea rdx, qword ptr [rip + 0x298d62]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000011c411: mov eax, dword ptr [rip + 0x2a1bd9]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000011bcc1: mov eax, dword ptr [rip + 0x2a8331]; lea rsi, qword ptr [rip - 0x85e]; lea rdi, qword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001121b1: mov eax, dword ptr [rip + 0x2ad839]; ret; 
0x000000000010c8c1: mov eax, dword ptr [rip + 0x2b1591]; add rax, qword ptr fs:[0]; ret; 
0x0000000000112096: mov eax, dword ptr [rip + 0x2b1f5c]; lea rsi, qword ptr [rip - 0x83]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000010a286: mov eax, dword ptr [rip + 0x2b3bdc]; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x00000000001088d1: mov eax, dword ptr [rip + 0x2b5591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000108845: mov eax, dword ptr [rip + 0x2b55cd]; mov rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010c4a6: mov eax, dword ptr [rip + 0x2b6364]; add rsp, 0x28; jmp rax; 
0x00000000001086cf: mov eax, dword ptr [rip + 0x2ba0bb]; add rsp, 0x1010; pop rbx; pop rbp; pop r12; ret; 
0x0000000000108031: mov eax, dword ptr [rip + 0x2bbfb1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000108001: mov eax, dword ptr [rip + 0x2bbfd9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107fd1: mov eax, dword ptr [rip + 0x2bc001]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107fa1: mov eax, dword ptr [rip + 0x2bc029]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f71: mov eax, dword ptr [rip + 0x2bc051]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f41: mov eax, dword ptr [rip + 0x2bc079]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f11: mov eax, dword ptr [rip + 0x2bc0a1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ee1: mov eax, dword ptr [rip + 0x2bc0c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107eb1: mov eax, dword ptr [rip + 0x2bc0f1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107e51: mov eax, dword ptr [rip + 0x2bc109]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107e86: mov eax, dword ptr [rip + 0x2bc114]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000107e21: mov eax, dword ptr [rip + 0x2bc131]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107df1: mov eax, dword ptr [rip + 0x2bc159]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107dc1: mov eax, dword ptr [rip + 0x2bc181]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d91: mov eax, dword ptr [rip + 0x2bc1a9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d61: mov eax, dword ptr [rip + 0x2bc1d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d31: mov eax, dword ptr [rip + 0x2bc1f9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d01: mov eax, dword ptr [rip + 0x2bc221]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107cd1: mov eax, dword ptr [rip + 0x2bc249]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ca1: mov eax, dword ptr [rip + 0x2bc271]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c71: mov eax, dword ptr [rip + 0x2bc299]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c41: mov eax, dword ptr [rip + 0x2bc2c1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c11: mov eax, dword ptr [rip + 0x2bc2e9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107be1: mov eax, dword ptr [rip + 0x2bc311]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107bb1: mov eax, dword ptr [rip + 0x2bc339]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b81: mov eax, dword ptr [rip + 0x2bc361]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b51: mov eax, dword ptr [rip + 0x2bc389]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b21: mov eax, dword ptr [rip + 0x2bc3b1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107af1: mov eax, dword ptr [rip + 0x2bc3d9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ac1: mov eax, dword ptr [rip + 0x2bc3f9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107a91: mov eax, dword ptr [rip + 0x2bc501]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000fd421: mov eax, dword ptr [rip + 0x2c0a39]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000000fb0a1: mov eax, dword ptr [rip + 0x2c2dc1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f9661: mov eax, dword ptr [rip + 0x2c4801]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fcd09: mov eax, dword ptr [rip + 0x2c4ce9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000000fcab9: mov eax, dword ptr [rip + 0x2c4f39]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000f8fc5: mov eax, dword ptr [rip + 0x2c4fd5]; mov qword ptr [rax], rbx; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x00000000000f8281: mov eax, dword ptr [rip + 0x2c5be1]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000f7821: mov eax, dword ptr [rip + 0x2c6641]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f94f3: mov eax, dword ptr [rip + 0x2c82bb]; mov dword ptr [rip + 0x2c82e5], eax; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f9333: mov eax, dword ptr [rip + 0x2c847b]; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f9160: mov eax, dword ptr [rip + 0x2c864e]; mov dword ptr [rip + 0x2c8678], eax; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000f4c01: mov eax, dword ptr [rip + 0x2c9261]; mov dword ptr fs:[rax], 0x16; pop rbx; ret; 
0x00000000000f4b21: mov eax, dword ptr [rip + 0x2c9341]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000000f3021: mov eax, dword ptr [rip + 0x2cae41]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2f89: mov eax, dword ptr [rip + 0x2caed9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f22b1: mov eax, dword ptr [rip + 0x2cbbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2281: mov eax, dword ptr [rip + 0x2cbbe1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f19f1: mov eax, dword ptr [rip + 0x2cc471]; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f1951: mov eax, dword ptr [rip + 0x2cc511]; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f11c1: mov eax, dword ptr [rip + 0x2ccca1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f10f1: mov eax, dword ptr [rip + 0x2ccd71]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000f1111: mov eax, dword ptr [rip + 0x2ccda1]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000f1007: mov eax, dword ptr [rip + 0x2cce5b]; neg edx; mov dword ptr fs:[rax], edx; or eax, 0xffffffff; ret; 
0x00000000000f09ca: mov eax, dword ptr [rip + 0x2cd498]; neg edx; mov dword ptr fs:[rax], edx; or eax, 0xffffffff; ret; 
0x00000000000f0681: mov eax, dword ptr [rip + 0x2cd7e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f0621: mov eax, dword ptr [rip + 0x2cd841]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000efcc1: mov eax, dword ptr [rip + 0x2ce1a1]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x00000000000ee2b1: mov eax, dword ptr [rip + 0x2cfbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ed3a1: mov eax, dword ptr [rip + 0x2d0ac1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000ed389: mov eax, dword ptr [rip + 0x2d0ad9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000ed331: mov eax, dword ptr [rip + 0x2d0b31]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2491: mov eax, dword ptr [rip + 0x2d1b61]; lea rsi, qword ptr [rip - 0x6e]; lea rdi, qword ptr [rip + 0x2cf08b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ebda9: mov eax, dword ptr [rip + 0x2d20b9]; mov dword ptr fs:[rax], 0x16; add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000ebb1b: mov eax, dword ptr [rip + 0x2d2347]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x00000000000f18ec: mov eax, dword ptr [rip + 0x2d2766]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f187c: mov eax, dword ptr [rip + 0x2d27d6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000eb431: mov eax, dword ptr [rip + 0x2d2a31]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x00000000000eb419: mov eax, dword ptr [rip + 0x2d2a49]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb209: mov eax, dword ptr [rip + 0x2d2c59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb1b1: mov eax, dword ptr [rip + 0x2d2cb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb151: mov eax, dword ptr [rip + 0x2d2d11]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb0f1: mov eax, dword ptr [rip + 0x2d2d71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb0a1: mov eax, dword ptr [rip + 0x2d2dc1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb051: mov eax, dword ptr [rip + 0x2d2e11]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000e8a33: mov eax, dword ptr [rip + 0x2db5a7]; xor esi, esi; mov edi, dword ptr [rsp + 0xe0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cb3b4: mov eax, dword ptr [rip + 0x2f2aae]; neg r8d; mov dword ptr fs:[rax], r8d; or eax, 0xffffffff; ret; 
0x00000000000c26e9: mov eax, dword ptr [rip + 0x2fb779]; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x00000000000c2681: mov eax, dword ptr [rip + 0x2fb7e1]; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x00000000000c12b1: mov eax, dword ptr [rip + 0x2fcbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bf781: mov eax, dword ptr [rip + 0x2fe6e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bce29: mov eax, dword ptr [rip + 0x301039]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bcdde: mov eax, dword ptr [rip + 0x301084]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000c20f5: mov eax, dword ptr [rip + 0x301f5d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c2085: mov eax, dword ptr [rip + 0x301fcd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1e23: mov eax, dword ptr [rip + 0x30222f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1dc3: mov eax, dword ptr [rip + 0x30228f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c10c9: mov eax, dword ptr [rip + 0x302f99]; mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc809: mov eax, dword ptr [rip + 0x3077f9]; lea rdi, qword ptr [rip + 0x3032ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc7e9: mov eax, dword ptr [rip + 0x307821]; lea rdi, qword ptr [rip + 0x30330a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000bc70a: mov eax, dword ptr [rip + 0x3078f8]; lea rdi, qword ptr [rip + 0x3033e9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc6e8: mov eax, dword ptr [rip + 0x307922]; lea rdi, qword ptr [rip + 0x30340b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc501: mov eax, dword ptr [rip + 0x307b09]; lea rdi, qword ptr [rip + 0x3035f2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc4d6: mov eax, dword ptr [rip + 0x307b2c]; lea rdi, qword ptr [rip + 0x30361d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc389: mov eax, dword ptr [rip + 0x307c79]; lea rdi, qword ptr [rip + 0x30376a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc324: mov eax, dword ptr [rip + 0x307ce6]; lea rdi, qword ptr [rip + 0x3037cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b42f1: mov eax, dword ptr [rip + 0x309b71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b06b1: mov eax, dword ptr [rip + 0x30d7b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000b05b1: mov eax, dword ptr [rip + 0x30d8b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000b210f: mov eax, dword ptr [rip + 0x311d03]; add rsp, 8; ret; 
0x00000000000aeff9: mov eax, dword ptr [rip + 0x315009]; lea rdi, qword ptr [rip + 0x310afa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aef42: mov eax, dword ptr [rip + 0x3150c8]; lea rdi, qword ptr [rip + 0x310bb1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008aa9c: mov eax, dword ptr [rip + 0x339576]; lea rdi, qword ptr [rip + 0x336247]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008263f: mov eax, dword ptr [rip + 0x33b88b]; mov qword ptr [rax], rdi; ret; 
0x0000000000082635: mov eax, dword ptr [rip + 0x33b99d]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x33b88b]; mov qword ptr [rax], rdi; ret; 
0x0000000000081319: mov eax, dword ptr [rip + 0x33cb49]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000080a68: mov eax, dword ptr [rip + 0x33d34a]; xor edi, edi; call qword ptr [rax]; 
0x0000000000080952: mov eax, dword ptr [rip + 0x33d460]; mov rdi, rcx; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x0000000000080802: mov eax, dword ptr [rip + 0x33d5b0]; mov qword ptr [rsp + 0x28], r14; mov rdi, r14; call qword ptr [rax]; 
0x000000000007deea: mov eax, dword ptr [rip + 0x33fec8]; xor edi, edi; mov qword ptr [rsp + 8], rcx; call qword ptr [rax]; 
0x000000000007de99: mov eax, dword ptr [rip + 0x33ff19]; xor edi, edi; mov r14, rdx; call qword ptr [rax]; 
0x000000000007c851: mov eax, dword ptr [rip + 0x342949]; ret; 
0x000000000007840b: mov eax, dword ptr [rip + 0x345b2f]; mov rdi, qword ptr [rax]; call 0x5eaf0; add rsp, 0xd8; ret; 
0x0000000000071419: mov eax, dword ptr [rip + 0x34ca49]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000006fff9: mov eax, dword ptr [rip + 0x34de69]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000064e24: mov eax, dword ptr [rip + 0x35f20e]; xor esi, esi; lea rdi, qword ptr [rbp - 0xf0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000005d11d: mov eax, dword ptr [rip + 0x360e95]; mov rdi, qword ptr [rax]; call 0x54630; add rsp, 0xd8; ret; 
0x00000000000543cb: mov eax, dword ptr [rip + 0x369b6f]; mov rdi, qword ptr [rax]; call 0x49c40; add rsp, 0xd8; ret; 
0x0000000000054d8e: mov eax, dword ptr [rip + 0x36f2a4]; xor esi, esi; lea rdi, qword ptr [rbp - 0x170]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000047591: mov eax, dword ptr [rip + 0x376829]; mov rax, qword ptr fs:[rax]; mov rdx, rax; call 0x475b0; add rsp, 0xd8; ret; 
0x00000000000491b1: mov eax, dword ptr [rip + 0x37ae29]; lea rsi, qword ptr [rsp + 0x60]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049191: mov eax, dword ptr [rip + 0x37ae49]; xor esi, esi; mov edi, dword ptr [rsp + 0x60]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049161: mov eax, dword ptr [rip + 0x37ae91]; lea rsi, qword ptr [rip - 0x6ee]; lea rdi, qword ptr [rip + 0x37777b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003cd59: mov eax, dword ptr [rip + 0x381109]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003ccb1: mov eax, dword ptr [rip + 0x3811b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037b81: mov eax, dword ptr [rip + 0x3862e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037a81: mov eax, dword ptr [rip + 0x3863e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037bb0: mov eax, dword ptr [rip + 0x3864da]; ret; 
0x0000000000037984: mov eax, dword ptr [rip + 0x3864de]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037ba0: mov eax, dword ptr [rip + 0x3864fa]; ret; 
0x00000000000378e1: mov eax, dword ptr [rip + 0x386581]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000037841: mov eax, dword ptr [rip + 0x386621]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000037821: mov eax, dword ptr [rip + 0x386641]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000377e1: mov eax, dword ptr [rip + 0x386681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000377a1: mov eax, dword ptr [rip + 0x3866c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037769: mov eax, dword ptr [rip + 0x3866f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000376b9: mov eax, dword ptr [rip + 0x3867a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036ebe: mov eax, dword ptr [rip + 0x386fa4]; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x0000000000036c81: mov eax, dword ptr [rip + 0x3871e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036be9: mov eax, dword ptr [rip + 0x387279]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000003698f: mov eax, dword ptr [rip + 0x3874d3]; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbx; ret; 
0x0000000000036653: mov eax, dword ptr [rip + 0x38780f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000036387: mov eax, dword ptr [rip + 0x387adb]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000035882: mov eax, dword ptr [rip + 0x3885e0]; mov ebp, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov rdi, rbx; mov eax, 3; syscall; 
0x0000000000036b41: mov eax, dword ptr [rip + 0x38d4a9]; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000030111: mov eax, dword ptr [rip + 0x38dce9]; add rax, qword ptr fs:[0]; ret; 
0x00000000000301af: mov eax, dword ptr [rip + 0x38dd6b]; add rdx, 0x200; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000030131: mov eax, dword ptr [rip + 0x38dda1]; add rax, qword ptr fs:[0]; ret; 
0x000000000002fab1: mov eax, dword ptr [rip + 0x38e309]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000002fa6d: mov eax, dword ptr [rip + 0x38e365]; mov qword ptr [rax], rdx; ret; 
0x000000000002f906: mov eax, dword ptr [rip + 0x38e5cc]; mov qword ptr fs:[rax], rsi; cmp rdx, rcx; mov rax, -1; cmovne rax, rdx; ret; 
0x000000000002e6ca: mov eax, dword ptr [rip + 0x38f798]; mov dword ptr fs:[rax], 0x16; movsxd rdi, r13d; mov eax, 3; syscall; 
0x00000000000340e9: mov eax, dword ptr [rip + 0x38ff21]; lea rdi, qword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340c1: mov eax, dword ptr [rip + 0x38ff41]; lea rdi, qword ptr [rip + 0x38bbb2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002cd61: mov eax, dword ptr [rip + 0x391059]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x00000000000321a5: mov eax, dword ptr [rip + 0x391e65]; lea rdi, qword ptr [rip + 0x38dbae]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003212e: mov eax, dword ptr [rip + 0x391ed4]; lea rdi, qword ptr [rip + 0x38dc25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032049: mov eax, dword ptr [rip + 0x391fc1]; lea rdi, qword ptr [rip + 0x38dd0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032021: mov eax, dword ptr [rip + 0x391fd9]; lea rdi, qword ptr [rip + 0x38dd32]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e34: mov eax, dword ptr [rip + 0x3921ce]; lea rdi, qword ptr [rip + 0x38debf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031b90: mov eax, dword ptr [rip + 0x39247a]; lea rdi, qword ptr [rip + 0x38e0e3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aef: mov eax, dword ptr [rip + 0x39251b]; lea rdi, qword ptr [rip + 0x38e204]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031acd: mov eax, dword ptr [rip + 0x39252d]; lea rdi, qword ptr [rip + 0x38e1a6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aa2: mov eax, dword ptr [rip + 0x392558]; lea rdi, qword ptr [rip + 0x38e051]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a80: mov eax, dword ptr [rip + 0x39257a]; lea rdi, qword ptr [rip + 0x38e273]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318ee: mov eax, dword ptr [rip + 0x39271c]; lea rdi, qword ptr [rip + 0x38e385]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318c7: mov eax, dword ptr [rip + 0x392743]; lea rdi, qword ptr [rip + 0x38e22c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031464: mov eax, dword ptr [rip + 0x392ba6]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000313f1: mov eax, dword ptr [rip + 0x392c19]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000312c7: mov eax, dword ptr [rip + 0x392d3b]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030e69: mov eax, dword ptr [rip + 0x3931a1]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030dbd: mov eax, dword ptr [rip + 0x39323d]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030d9a: mov eax, dword ptr [rip + 0x393270]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002c161: mov eax, dword ptr [rip + 0x393959]; ret; 
0x00000000000305e1: mov eax, dword ptr [rip + 0x393a21]; lea rdi, qword ptr [rip + 0x38f692]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000304f9: mov eax, dword ptr [rip + 0x393b11]; lea rdi, qword ptr [rip + 0x38f77a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030399: mov eax, dword ptr [rip + 0x393c69]; lea rdi, qword ptr [rip + 0x38f8da]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f891: mov eax, dword ptr [rip + 0x394779]; lea rdi, qword ptr [rip + 0x390262]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f871: mov eax, dword ptr [rip + 0x394791]; lea rdi, qword ptr [rip + 0x390282]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7d1: mov eax, dword ptr [rip + 0x394839]; lea rdi, qword ptr [rip + 0x390322]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7a6: mov eax, dword ptr [rip + 0x39485c]; lea rdi, qword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f5ca: mov eax, dword ptr [rip + 0x394a40]; lea rdi, qword ptr [rip + 0x390529]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f578: mov eax, dword ptr [rip + 0x394a92]; lea rdi, qword ptr [rip + 0x39057b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f466: mov eax, dword ptr [rip + 0x394b9c]; lea rdi, qword ptr [rip + 0x39068d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d74e: mov eax, dword ptr [rip + 0x3968bc]; lea rdi, qword ptr [rip + 0x3923a5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d72c: mov eax, dword ptr [rip + 0x3968de]; lea rdi, qword ptr [rip + 0x3923c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d509: mov eax, dword ptr [rip + 0x396b01]; lea rdi, qword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d4e1: mov eax, dword ptr [rip + 0x396b29]; lea rdi, qword ptr [rip + 0x392612]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d495: mov eax, dword ptr [rip + 0x396b75]; lea rdi, qword ptr [rip + 0x39265e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d281: mov eax, dword ptr [rip + 0x396d81]; lea rdi, qword ptr [rip + 0x392872]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000022caf: mov eax, dword ptr [rip + 0x39b1b3]; mov dword ptr fs:[rax], 9; mov eax, edi; ret; 
0x0000000000022761: mov eax, dword ptr [rip + 0x39b701]; add rax, qword ptr fs:[0]; ret; 
0x0000000000021f2c: mov eax, dword ptr [rip + 0x39bf76]; mov rsi, qword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002211d: mov eax, dword ptr [rip + 0x39d93d]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x00000000000237e1: mov eax, dword ptr [rip + 0x3a0461]; ret; 
0x00000000000237d1: mov eax, dword ptr [rip + 0x3a0481]; ret; 
0x0000000000021f54: mov eax, dword ptr [rip + 0x3a20f6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c093c: mov eax, dword ptr [rsi + 0x10]; mov qword ptr [rsi + 0x10], rax; mov rax, qword ptr [rsi + 0x18]; mov qword ptr [rsi + 0x18], rax; mov rax, -0xe; ret; 
0x00000000000c0944: mov eax, dword ptr [rsi + 0x18]; mov qword ptr [rsi + 0x18], rax; mov rax, -0xe; ret; 
0x00000000000474e2: mov eax, dword ptr [rsi + 0x28]; mov r9, qword ptr [rsi + 0x30]; mov rsi, qword ptr [rsi + 0x70]; xor eax, eax; ret; 
0x00000000001281f6: mov eax, dword ptr [rsi + 0x60]; call qword ptr [rax + 8]; 
0x00000000001281c9: mov eax, dword ptr [rsi + 0x60]; mov esi, dword ptr [r14 + 0x88]; mov rdi, r13; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x0000000000128237: mov eax, dword ptr [rsi + 0x60]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000000fe5d1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000fe541: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000fe4b1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000fe271: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000fe391: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000fe051: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x00000000000fe301: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000fe0e1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000fe161: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000fe421: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000fdfc1: mov eax, dword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x00000000000300b1: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000030091: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000030071: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000002fff1: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000030031: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000002ff91: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000030011: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000002ffd1: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000002ff61: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002ffb1: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000030051: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000002ff71: mov eax, dword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000127d06: mov eax, dword ptr [rsi + 0x70]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x00000000000300d1: mov eax, dword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000300e1: mov eax, dword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000001281e2: mov eax, dword ptr [rsi + 0x90]; mov rsi, qword ptr [rbp - 0x180]; mov rdi, r13; add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x000000000012443c: mov eax, dword ptr [rsi + 0xd0]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000007c531: mov eax, dword ptr [rsi + 0xd8]; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000000d1f39: mov eax, dword ptr [rsi + 8]; mov qword ptr [rax + 0x20], rsi; xor eax, eax; ret; 
0x0000000000117fe7: mov eax, dword ptr [rsi + 8]; mov qword ptr [rdx + 0x10], rax; xor eax, eax; ret; 
0x000000000002efe1: mov eax, dword ptr [rsi + rdx*8 + 0x80]; ret; 
0x000000000012d890: mov eax, dword ptr [rsi]; lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000e4e20: mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x000000000012cfa8: mov eax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000745c2: mov eax, dword ptr [rsi]; pop rbx; ret; 
0x00000000000967f0: mov eax, dword ptr [rsp + 0x10]; add rdi, 4; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x00000000000d4ad1: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000aedd4: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000112f25: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f544a: mov eax, dword ptr [rsp + 0x10]; call rax; 
0x0000000000127089: mov eax, dword ptr [rsp + 0x10]; lea rdi, qword ptr [rip + 0x54c0c]; movsxd rax, dword ptr [rdi + rax*4]; add rdi, rax; jmp rdi; 
0x0000000000096800: mov eax, dword ptr [rsp + 0x10]; mov byte ptr [rdi + 4], cl; add rdi, 5; mov dword ptr [rdi - 5], eax; mov rax, rdi; ret; 
0x00000000000bdc08: mov eax, dword ptr [rsp + 0x10]; mov qword ptr [rsp], rdx; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x0000000000122699: mov eax, dword ptr [rsp + 0x10]; mov rdx, rbp; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000096818: mov eax, dword ptr [rsp + 0x10]; mov word ptr [rdi + 4], r11w; add rdi, 6; mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x0000000000036710: mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x0000000000129793: mov eax, dword ptr [rsp + 0x14]; mov qword ptr [rbx], rax; xor eax, eax; add rsp, 0x30; pop rbx; ret; 
0x0000000000022176: mov eax, dword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x0000000000021f3f: mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000012a80f: mov eax, dword ptr [rsp + 0x18]; mov dword ptr [rax], 0xf; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000012a9fb: mov eax, dword ptr [rsp + 0x18]; mov dword ptr [rax], 0xf; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x00000000000967c3: mov eax, dword ptr [rsp + 0x18]; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x0000000000121229: mov eax, dword ptr [rsp + 0x18]; mov esi, r13d; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000012001c: mov eax, dword ptr [rsp + 0x20]; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000027f1e: mov eax, dword ptr [rsp + 0x20]; mov dword ptr [rsp + 8], esi; mov rsi, qword ptr [rsp + 0x50]; call rax; 
0x0000000000122799: mov eax, dword ptr [rsp + 0x20]; mov rcx, rbp; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000000462e1: mov eax, dword ptr [rsp + 0x30]; add rsp, 0x170; pop rbx; pop rbp; pop r12; ret; 
0x000000000010d013: mov eax, dword ptr [rsp + 0x30]; add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x0000000000126971: mov eax, dword ptr [rsp + 0x38]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000126769: mov eax, dword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x000000000002762c: mov eax, dword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a55c: mov eax, dword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000027938: mov eax, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000028740: mov eax, dword ptr [rsp + 0x58]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000126a88: mov eax, dword ptr [rsp + 0x58]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000002813f: mov eax, dword ptr [rsp + 0x78]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000012681a: mov eax, dword ptr [rsp + 0x78]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000037195: mov eax, dword ptr [rsp + 0x80]; add rsp, 0x108; ret; 
0x0000000000126b69: mov eax, dword ptr [rsp + 0x88]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000c0b64: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000135f16: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x48; ret; 
0x000000000006f5b9: mov eax, dword ptr [rsp + 0xd8]; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000749da: mov eax, dword ptr [rsp + 0xd8]; mov esi, r14d; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000006f5ed: mov eax, dword ptr [rsp + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000007234a: mov eax, dword ptr [rsp + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000120715: mov eax, dword ptr [rsp + 0xe8]; mov rdi, r14; call qword ptr [rax + 0x20]; 
0x00000000000b43da: mov eax, dword ptr [rsp + 4]; mov word ptr [rbx + 0xc], ax; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x000000000012e44c: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000036fc6: mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f1286: mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000012604a: mov eax, dword ptr [rsp + 8]; lea rsi, qword ptr [rbp + 0x18]; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000125f54: mov eax, dword ptr [rsp + 8]; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x00000000000f531e: mov eax, dword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000000f532d: mov eax, dword ptr [rsp + 8]; mov rdi, rax; call 0x1f4f0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000011ece7: mov eax, dword ptr [rsp + 8]; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x0000000000126019: mov eax, dword ptr [rsp + 8]; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000012602f: mov eax, dword ptr [rsp + 8]; mov rsi, rsp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x00000000000ebac4: mov eax, dword ptr [rsp - 0x64]; mov edx, eax; neg edx; cmp dword ptr [rsp - 0x68], 2; cmove eax, edx; ret; 
0x0000000000133a24: mov eax, dword ptr [rsp]; add rsp, 0x10; pop rbx; ret; 
0x0000000000124f14: mov eax, dword ptr [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000f09f7: mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x000000000002430c: mov eax, dword ptr [rsp]; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fd483: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000fd4e4: mov eax, dword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000012e162: mov eax, dword ptr [rsp]; mov byte ptr [rbx], al; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000012cf32: mov eax, dword ptr [rsp]; mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000012d031: mov eax, dword ptr [rsp]; mov qword ptr [rbx], rax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x00000000001201f9: mov eax, dword ptr [rsp]; mov rsi, qword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000012d392: mov eax, dword ptr [rsp]; mov word ptr [rbx], ax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000007979f: mov eax, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fild word ptr [rbp + 0x4f0f48c9]; ret 0x8948; 
0x0000000000051808: mov eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000814d2: mov eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f0a7e: mov eax, eax; mov edx, 1; mov esi, 0x5409; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000ebc47: mov eax, eax; mov esi, 7; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000123bf0: mov eax, eax; mov qword ptr [r8], rax; mov eax, 1; ret; 
0x000000000012e87d: mov eax, eax; mov qword ptr [rbx], rax; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x0000000000127745: mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000036fa4: mov eax, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x82; syscall; 
0x00000000000f057b: mov eax, eax; mov rdx, qword ptr [rsp + 0x10]; movsxd rsi, dword ptr [rsp + 0xc]; movsxd rdi, dword ptr [rsp + 8]; mov eax, ebx; syscall; 
0x00000000000f125d: mov eax, eax; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x13; syscall; 
0x00000000000f12fd: mov eax, eax; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x14; syscall; 
0x0000000000022b6a: mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x00000000000eb61a: mov eax, eax; movsxd rdx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; syscall; 
0x00000000000f1570: mov eax, eax; movsxd rdx, r12d; mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x127; syscall; 
0x00000000000f17d0: mov eax, eax; movsxd rdx, r12d; mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x128; syscall; 
0x000000000003c8c9: mov eax, eax; or rax, rdx; ret; 
0x0000000000070851: mov eax, eax; pop rbx; ret; 
0x000000000004f1fa: mov eax, eax; ret; 
0x0000000000103f3c: mov eax, eax; sub eax, r9d; ret; 
0x0000000000037075: mov eax, eax; syscall; 
0x00000000000c970f: mov eax, ebp; add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x000000000007946a: mov eax, ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001974c1: mov eax, ebp; call rdx; 
0x000000000007394a: mov eax, ebp; mov dword ptr [rbx], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000110e22: mov eax, ebp; mov ecx, 0x400; mov rdx, r15; mov rdi, r12; call rax; 
0x00000000000f082d: mov eax, ebp; mov r13d, dword ptr fs:[r12]; syscall; 
0x000000000012daf9: mov eax, ebp; mov rsi, rsp; mov rdi, rbp; mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x00000000000aed39: mov eax, ebp; pop r13; pop r14; ret; 
0x0000000000072419: mov eax, ebp; pop r13; ret; 
0x000000000006f609: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x000000000006da26: mov eax, ebp; pop rbp; pop r12; ret; 
0x000000000004f143: mov eax, ebp; pop rbp; ret; 
0x00000000000f4e70: mov eax, ebp; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000006edc5: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000c978d: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000004f0c5: mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000021b14: mov eax, ebp; sar rax, 1; pop rbp; mov qword ptr [rip + 0x39c70f], rax; pop r12; ret; 
0x00000000000792f6: mov eax, ebp; sub rax, r12; pop r12; pop r13; pop r14; ret; 
0x000000000003710d: mov eax, ebp; syscall; 
0x00000000000384e3: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000006fc92: mov eax, ebx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000012a701: mov eax, ebx; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000b2994: mov eax, ebx; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b0578: mov eax, ebx; add rsp, 0x20; pop rbx; ret; 
0x00000000000498c1: mov eax, ebx; add rsp, 0x440; pop rbx; ret; 
0x0000000000132e16: mov eax, ebx; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000092077: mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000bda02: mov eax, ebx; call rax; 
0x0000000000117dab: mov eax, ebx; mov byte ptr [rdi + rdx], 0; pop rbx; ret; 
0x00000000000f7ebf: mov eax, ebx; mov byte ptr [rdx], 0; pop rbx; ret; 
0x00000000000c109d: mov eax, ebx; mov esi, 0x81; syscall; 
0x00000000000fb2e4: mov eax, ebx; movsxd r10, ecx; syscall; 
0x00000000000fbabd: mov eax, ebx; movsxd rdi, dword ptr [rsp + 4]; movsxd r10, ecx; syscall; 
0x000000000002cc76: mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001f6e4: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000003407f: mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000003ca6b: mov eax, ebx; pop rbx; ret; 
0x00000000000eb62b: mov eax, ebx; syscall; 
0x00000000000383a7: mov eax, ecx; adc eax, eax; ret; 
0x00000000000fa333: mov eax, ecx; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x00000000000f4700: mov eax, ecx; mov r9, qword ptr [rsp + 8]; syscall; 
0x00000000000fa608: mov eax, ecx; mov rdi, rbx; syscall; 
0x00000000000c0a50: mov eax, ecx; movsxd rdi, dword ptr [rsp + 8]; syscall; 
0x00000000001087e4: mov eax, ecx; movsxd rdi, r8d; syscall; 
0x0000000000030753: mov eax, ecx; pop r13; ret; 
0x0000000000085122: mov eax, ecx; pop r14; ret; 
0x00000000000306d9: mov eax, ecx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000003576f: mov eax, ecx; pop rbx; ret; 
0x0000000000035779: mov eax, ecx; ret; 
0x00000000000a1ab8: mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x00000000000d1d23: mov eax, ecx; shr eax, 3; and eax, 1; nop dword ptr [rax + rax]; pop rbx; ret; 
0x00000000000a1a97: mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000103d89: mov eax, ecx; sub eax, edx; ret; 
0x0000000000036db9: mov eax, ecx; syscall; 
0x0000000000108c1f: mov eax, edi; add rsp, 8; ret; 
0x000000000002ff40: mov eax, edi; and eax, 0x7f; ret; 
0x000000000010c566: mov eax, edi; and eax, 0xffffff; ret; 
0x000000000010c540: mov eax, edi; bswap eax; ret; 
0x0000000000049719: mov eax, edi; cmovae rax, rsi; pop rbx; ret; 
0x00000000000497f5: mov eax, edi; cmovae rax, rsi; ret; 
0x000000000003c8d1: mov eax, edi; cqo; idiv rsi; ret; 
0x00000000001287c6: mov eax, edi; lea rsi, qword ptr [r12 + 0x18]; mov r15, r14; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000000f322a: mov eax, edi; mov byte ptr [r9 - 1], 0; ret; 
0x00000000000968e7: mov eax, edi; mov byte ptr [rdi + 6], 0; ret; 
0x000000000012a586: mov eax, edi; mov rcx, r14; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax; 
0x00000000000ed28b: mov eax, edi; mov rdx, rsi; mov eax, 0x11d; xor esi, esi; syscall; 
0x00000000000fa4f1: mov eax, edi; movzx edi, dil; shr rax, 0xc; xor al, al; or eax, edi; ret; 
0x000000000010c5a9: mov eax, edi; movzx esi, sil; shl eax, 8; or eax, esi; bswap eax; ret; 
0x0000000000101dfc: mov eax, edi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000108e51: mov eax, edi; pop rbx; ret; 
0x000000000018caf9: mov eax, edi; push rsp; add al, byte ptr fs:[rax]; ret 0xf88a; 
0x0000000000022cbc: mov eax, edi; ret; 
0x000000000010c550: mov eax, edi; ror ax, 8; ret; 
0x000000000003c872: mov eax, edi; sar edx, 0x1f; xor eax, edx; sub eax, edx; ret; 
0x000000000010aafa: mov eax, edi; sar rax, 6; ret; 
0x000000000003c884: mov eax, edi; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x000000000010c5e6: mov eax, edi; shr eax, 0x18; ret; 
0x0000000000103f60: mov eax, edi; sub eax, esi; ret; 
0x0000000000121ae0: mov eax, edx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f2319: mov eax, edx; add rsp, 0x48; ret; 
0x0000000000037c5c: mov eax, edx; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000000b4a0c: mov eax, edx; add rsp, 8; ret; 
0x0000000000091d58: mov eax, edx; and r8d, 7; movsxd r8, dword ptr [rax + r8*4]; add rax, r8; jmp rax; 
0x000000000005dfc0: mov eax, edx; pop r12; ret; 
0x000000000009415c: mov eax, edx; pop r14; ret; 
0x000000000005365b: mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000004934f: mov eax, edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000005de5b: mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000039125: mov eax, edx; pop rbx; ret; 
0x0000000000037bf9: mov eax, edx; ret; 
0x0000000000103db9: mov eax, edx; sub eax, r9d; ret; 
0x00000000000f7f58: mov eax, edx; syscall; 
0x00000000000be061: mov eax, esi; add rsp, 8; ret; 
0x00000000000f0936: mov eax, esi; lea rdx, qword ptr [rsp - 0x38]; mov esi, 0x5401; movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000000fa699: mov eax, esi; mov rdi, r9; movsxd rsi, esi; mov eax, ecx; syscall; 
0x0000000000036b26: mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x00000000000ba142: mov eax, esi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000497ec: mov eax, esi; nop; ret; 
0x00000000001097d5: mov eax, esi; pop r12; ret; 
0x00000000000bd31d: mov eax, esi; pop r14; ret; 
0x00000000000c2794: mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000003c35a: mov eax, esi; pop rbx; pop rbp; ret; 
0x00000000000496e1: mov eax, esi; pop rbx; ret; 
0x0000000000049924: mov eax, esi; ret; 
0x0000000000117f3b: mov eax, esi; shl eax, 4; add eax, 8; ret; 
0x00000000000b9f28: mov eax, esp; mov byte ptr [rsp], 0; call 0xb80f0; add rsp, 0x18; ret; 
0x00000000000bc258: mov eax, esp; mov byte ptr [rsp], 0; call 0xb9fa0; add rsp, 0x18; ret; 
0x00000000000274d3: mov eax, esp; mov rcx, rbp; mov rdx, qword ptr [r14]; mov rsi, r13; call qword ptr [rbx + 8]; 
0x00000000000388a5: mov eax, esp; pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000000b167b: mov eax, esp; pop r12; pop r13; pop r14; ret; 
0x00000000000aecb5: mov eax, esp; pop r12; pop r13; ret; 
0x000000000006cd50: mov eax, esp; pop r12; ret; 
0x000000000007b7f8: mov eax, esp; pop r12; sub rax, r13; pop r13; pop r14; ret; 
0x000000000007c18c: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000006c984: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x000000000011b081: mov eax, esp; syscall; 
0x00000000000aecb4: mov eax, r12d; pop r12; pop r13; ret; 
0x00000000000aebe2: mov eax, r12d; pop r12; ret; 
0x000000000007c18b: mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000725f5: mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000011b080: mov eax, r12d; syscall; 
0x000000000012daf8: mov eax, r13d; mov rsi, rsp; mov rdi, rbp; mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x00000000000aed38: mov eax, r13d; pop r13; pop r14; ret; 
0x0000000000072418: mov eax, r13d; pop r13; ret; 
0x00000000000e50b5: mov eax, r13d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000165d17: mov eax, r13d; syscall; 
0x0000000000051807: mov eax, r8d; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000070850: mov eax, r8d; pop rbx; ret; 
0x000000000004f1f9: mov eax, r8d; ret; 
0x0000000000103f3b: mov eax, r8d; sub eax, r9d; ret; 
0x0000000000037074: mov eax, r8d; syscall; 
0x00000000000f0795: mov eax, r9d; pop r13; ret; 
0x00000000000f0865: mov eax, r9d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000103d88: mov eax, r9d; sub eax, edx; ret; 
0x0000000000073199: mov eax, r9d; syscall; 
0x0000000000199ebd: mov ebp, 0x1ab00000; out dx, al; call qword ptr [rdi]; 
0x0000000000199eed: mov ebp, 0x1ba00000; out dx, al; call qword ptr [rcx]; 
0x0000000000199f35: mov ebp, 0x1bf80000; out dx, al; jmp qword ptr [rbx]; 
0x00000000001172d7: mov ebp, 0x2875002a; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x0000000000042a4b: mov ebp, 0x31000007; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x00000000000ba082: mov ebp, 0x3145d231; fild dword ptr [rbp + 0x31]; ror byte ptr [rax - 0x7d], cl; ret; 
0x000000000009164b: mov ebp, 0x3325; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb1174]; ret; 
0x00000000000f7ef1: mov ebp, 0x441f0f66; add byte ptr [rax], al; lea rbx, qword ptr [rip + 0x865af]; mov rax, rbx; pop rbx; ret; 
0x0000000000096f81: mov ebp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x0000000000096f91: mov ebp, 0x448d48c0; cmp byte ptr [rax], dh; ret; 
0x0000000000096f71: mov ebp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000008aabf: mov ebp, 0x48003361; mov dword ptr [rip + 0x3361a6], eax; add rsp, 8; ret; 
0x00000000000b9f2f: mov ebp, 0x48ffffe1; add esp, 0x18; ret; 
0x000000000002e5e8: mov ebp, 0x4cfffffc; mov edi, esi; mov ax, 3; syscall; 
0x0000000000160a44: mov ebp, 0x4e6f0ff3; mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000013cb41: mov ebp, 0x63480003; ret 0xf66; 
0x000000000014ad77: mov ebp, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000133b20: mov ebp, 0x894c0028; salc; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x0000000000083047: mov ebp, 0x894cffff; call 0x6ff3a; jmp qword ptr [rsi + 0xf]; 
0x00000000001548bf: mov ebp, 0x8b000129; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000008eebf: mov ebp, 0x8b000d83; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001728fd: mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000198897: mov ebp, 0xd1cffed; ret; 
0x000000000019884f: mov ebp, 0xd1cffed; test al, 0xbc; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000c20c4: mov ebp, 0xd8f7002f; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000129375: mov ebp, 0xe8000186; ret 0xffd9; 
0x0000000000096ff1: mov ebp, 0xea8348c0; adc byte ptr [rax + 1], cl; ret 0x147c; 
0x0000000000096fd1: mov ebp, 0xea8348c0; and byte ptr [rax + 1], cl; ret 0x347c; 
0x0000000000096fb1: mov ebp, 0xea8348c0; xor byte ptr [rax + 1], cl; ret 0x547c; 
0x0000000000160a49: mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000ecea7: mov ebp, 0xf7002d0f; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x00000000000970a2: mov ebp, 0xf80148c0; add rax, r8; ret; 
0x000000000008a708: mov ebp, 0xf80148c0; ret; 
0x000000000008a98c: mov ebp, 0xf80148c6; ret; 
0x0000000000174966: mov ebp, 0xfb67d10d; ret; 
0x000000000018ae95: mov ebp, 0xfd540001; hlt; call rsp; 
0x000000000005fbcb: mov ebp, 0xffffee94; adc byte ptr [rcx - 0x73], al; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x000000000005f8b5: mov ebp, 0xffffeee8; adc byte ptr [rbp - 0x6bf001bf], cl; ret 0xd284; 
0x000000000005f8ac: mov ebp, 0xffffeeec; add byte ptr [rdx + rdx - 0x7d], dh; mov ebp, 0xffffeee8; adc byte ptr [rbp - 0x6bf001bf], cl; ret 0xd284; 
0x000000000005ed21: mov ebp, 0xffffefe0; mov rdx, r14; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x000000000004a5a5: mov ebp, 0xfffffa94; adc byte ptr [rcx - 0x73], al; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x0000000000049e79: mov ebp, 0xfffffbc0; mov rdx, rbx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x00000000000c39ff: mov ebp, 0xfffffc08; call qword ptr [rax + 0x28]; 
0x0000000000112594: mov ebp, 0xfffffdfc; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xd120; 
0x00000000000c5334: mov ebp, 0xfffffe30; add byte ptr [rax - 0x77], cl; ret 0x775; 
0x00000000000c403a: mov ebp, 0xfffffe38; add dword ptr [rdi], ecx; xchg byte ptr [rdi - 0xa000000], bh; ret; 
0x0000000000055fb7: mov ebp, 0xfffffe90; mov rdx, r15; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x0000000000054d98: mov ebp, 0xfffffe90; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000065a95: mov ebp, 0xffffff10; mov rdx, r14; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x0000000000064e2e: mov ebp, 0xffffff10; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cc600: mov ebp, 0xffffff58; call rbx; 
0x00000000000cc9c5: mov ebp, 0xffffff58; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rbp - 0x120]; mov qword ptr [rsp], rax; call rbx; 
0x0000000000035888: mov ebp, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov rdi, rbx; mov eax, 3; syscall; 
0x000000000011f5d8: mov ebp, 7; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000000fb493: mov ebp, dword ptr [rax + rax]; add byte ptr [rbp + 0x10], dh; mov eax, 0x2e; syscall; 
0x00000000000fb4f3: mov ebp, dword ptr [rax + rax]; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x2c; syscall; 
0x0000000000075a8f: mov ebp, dword ptr [rdi + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000000eb4b3: mov ebp, dword ptr [rip + 0x10750000]; mov eax, 2; syscall; 
0x0000000000001bed: mov ebp, dword ptr [rsi + rbx*8 + 0x6d]; ret 0x1bb7; 
0x00000000000f0831: mov ebp, dword ptr [rsp]; syscall; 
0x0000000000129b99: mov ebp, eax; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000010a603: mov ebp, eax; mov rax, qword ptr [rsp + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x00000000001202a3: mov ebp, eax; mov rdi, rbx; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x00000000001970d5: mov ebp, ebp; jmp qword ptr [rdx]; 
0x0000000000114bed: mov ebp, ebx; pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x0000000000036b2c: mov ebp, ecx; jmp rdx; 
0x00000000000ec076: mov ebp, edi; mov rdi, rbp; mov eax, 0x4f; syscall; 
0x000000000006e456: mov ebp, edx; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x00000000001aa734: mov ebp, es; add dword ptr [rax], eax; sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x0000000000121d49: mov ebp, esi; add rbp, qword ptr [rbx + 0x50]; sub edx, r14d; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x00000000001adae5: mov ebp, esi; jmp qword ptr [rdx]; 
0x000000000007b977: mov ebp, esi; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x60]; 
0x000000000010abc4: mov ebp, esp; pop rbp; ret; 
0x000000000005ec47: mov ebp, esp; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000108531: mov ebx, 0x1002b; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000199d05: mov ebx, 0x14180000; out dx, al; jmp qword ptr [rcx]; 
0x000000000018d675: mov ebx, 0x2ab40002; cli; call qword ptr [rbx + rdi*4 + 0x2bc40002]; cli; jmp rsp; 
0x000000000018d67d: mov ebx, 0x2bc40002; cli; jmp rsp; 
0x000000000010823e: mov ebx, 0x3948002b; ret 0xda75; 
0x000000000008abf1: mov ebx, 0x39fffacf; ret; 
0x00000000000fbce1: mov ebx, 0x480000c3; mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000f04e1: mov ebx, 0x4800017b; mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x115; syscall; 
0x000000000012a084: mov ebx, 0x480002c6; add esp, 0x100; pop rbx; pop rbp; pop r12; ret; 
0x00000000001086d1: mov ebx, 0x48002ba0; add esp, 0x1010; pop rbx; pop rbp; pop r12; ret; 
0x000000000002f461: mov ebx, 0x48fffffc; mov eax, dword ptr [rip + 0x394b9c]; lea rdi, qword ptr [rip + 0x39068d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ebd81: mov ebx, 0x48fffffd; add esp, 0x20; pop rbx; ret; 
0x000000000010852b: mov ebx, 0x5c7002b; cmp byte ptr [rbx + 0x1002b], bh; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000f94f5: mov ebx, 0x89002c82; add eax, 0x2c82e5; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x0000000000033d73: mov ebx, 0x89490038; ret 0x65e9; 
0x00000000000d8905: mov ebx, 0x8dfffffd; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000d0c91: mov ebx, 0xa4; add dword ptr [rdi], ecx; lahf; ret 0x82eb; 
0x00000000000d4eb1: mov ebx, 0xa4; add dword ptr [rdi], ecx; lahf; ret 0xee9; 
0x000000000018abd9: mov ebx, 0xa9f4fff3; add dword ptr [rax], eax; xchg eax, esp; ret; 
0x00000000001865c9: mov ebx, 0xbbf1fffd; std; call qword ptr [rax - 0x45]; 
0x0000000000186519: mov ebx, 0xbbf1fffd; std; call qword ptr [rcx]; 
0x0000000000186609: mov ebx, 0xbbf1fffd; std; dec dword ptr [rax - 0x24]; sti; call qword ptr [rax]; 
0x0000000000186589: mov ebx, 0xbbf1fffd; std; jmp qword ptr [rdi - 0x45]; 
0x00000000000f692f: mov ebx, 0xbefffff6; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x00000000001728fb: mov ebx, 0xbfbebdbc; rol cl, 0xc2; ret; 
0x00000000000f2284: mov ebx, 0xc764002c; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000123a86: mov ebx, 0xc8; call rax; 
0x000000000018660d: mov ebx, 0xdc48fffd; sti; call qword ptr [rax]; 
0x000000000006f751: mov ebx, 0xe0; xor r10d, r10d; xor edx, edx; mov rsi, r9; mov eax, r8d; syscall; 
0x000000000004ef49: mov ebx, 0xebfffffe; fst dword ptr [rax - 0x776c74b8]; add byte ptr [rax], al; add byte ptr [rbx + 0x7501046a], al; ret; 
0x0000000000160bc9: mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000044664: mov ebx, 0xfffb54e9; jmp qword ptr [rsi + 0xf]; 
0x000000000012c387: mov ebx, dword ptr [rdi + 0x48]; mov rax, qword ptr [rbx + 0x18]; lea r12, qword ptr [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x00000000000464d1: mov ebx, dword ptr [rdi]; mov esi, 9; mov eax, 0x3e; movsxd rdi, ebx; syscall; 
0x0000000000034131: mov ebx, dword ptr [rip + 0x38b049]; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000144231: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144215: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000007884f: mov ebx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x140; pop rbx; ret; 
0x0000000000107b53: mov ebx, eax; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000054593: mov ebx, ebx; add dword ptr [rax], eax; add rsp, 0xd8; ret; 
0x0000000000074439: mov ebx, edi; call qword ptr [rax + 0x20]; 
0x000000000007b982: mov ebx, edi; call qword ptr [rax + 0x60]; 
0x000000000013cdd1: mov ebx, edi; hlt; jmp qword ptr [rsi + 0x2e]; 
0x0000000000127027: mov ebx, esi; sub rsp, 0x438; mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x00000000000bd2c1: mov ebx, esi; syscall; 
0x000000000010aa8b: mov ebx, esi; xor edi, edi; lea rsi, qword ptr [rsp - 0x18]; mov eax, 0x83; syscall; 
0x00000000000fa5ae: mov ecx, 0x119; mov eax, ecx; syscall; 
0x00000000000066b8: mov ecx, 0x1200001d; add byte ptr [rax + rax], cl; push rax; ret 7; 
0x00000000000c1ce2: mov ecx, 0x27; mov eax, ecx; syscall; 
0x0000000000108488: mov ecx, 0x3948002b; ret 0x840f; 
0x0000000000110e24: mov ecx, 0x400; mov rdx, r15; mov rdi, r12; call rax; 
0x0000000000118743: mov ecx, 0x45000000; xor eax, eax; movsxd rdi, r14d; mov eax, 3; syscall; 
0x000000000014b1f7: mov ecx, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000be6c6: mov ecx, 0x64000001; mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x00000000000ebdab: mov ecx, 0x64002d20; mov dword ptr [rax], 0x16; add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000c0900: mov ecx, 0x64; mov rsi, rdi; mov eax, ecx; syscall; 
0x00000000000597d1: mov ecx, 0x89000000; ret 0x348; 
0x0000000000082638: mov ecx, 0x89480033; xor byte ptr [rax - 0x75], cl; add eax, 0x33b88b; mov qword ptr [rax], rdi; ret; 
0x00000000000f0fe0: mov ecx, 0x8c; mov esi, esi; movsxd rdi, edi; mov eax, ecx; syscall; 
0x0000000000199ba5: mov ecx, 0xb5180000; cld; jmp qword ptr [rcx]; 
0x0000000000186511: mov ecx, 0xbbf1fffd; std; push rcx; mov ebx, 0xbbf1fffd; std; call qword ptr [rcx]; 
0x00000000001728f9: mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000000f10c0: mov ecx, 0xc; mov rsi, rdi; mov eax, ecx; syscall; 
0x000000000018ae35: mov ecx, 0xd2540001; hlt; push qword ptr [rcx + rdi*4 - 0x2d1bffff]; hlt; jmp rsp; 
0x000000000018ae3d: mov ecx, 0xd2e40001; hlt; jmp rsp; 
0x0000000000036db1: mov ecx, 0xd; mov rsi, rax; mov eax, ecx; syscall; 
0x00000000000819d9: mov ecx, 0xf6000005; ret; 
0x0000000000160cc9: mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000039cd7: mov ecx, 0xfffffc0d; sub ecx, eax; mov qword ptr [rdi], rsi; mov eax, 1; mov dword ptr [rdx], ecx; ret; 
0x00000000000cb1d1: mov ecx, 1; call 0xc9d70; add rsp, 0x18; ret; 
0x0000000000079e0a: mov ecx, 3; mov edx, 2; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000079d59: mov ecx, 3; mov edx, 2; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000740d2: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000d1f21: mov ecx, dword ptr [rax + 0x18]; mov qword ptr [rdx + 0x20], rcx; mov rdx, qword ptr [rsi + 0x20]; mov qword ptr [rax + 0x20], rdx; xor eax, eax; ret; 
0x0000000000126638: mov ecx, dword ptr [rax + 8]; mov rdi, rax; mov edx, dword ptr [rsi + 0x1c8]; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x0000000000120713: mov ecx, dword ptr [rax - 0x75]; test byte ptr [rax + rbp*8], ah; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax + 0x20]; 
0x0000000000128226: mov ecx, dword ptr [rbp - 0x168]; call rcx; 
0x0000000000079946: mov ecx, dword ptr [rbx + 0xa0]; mov qword ptr [rbx + 0x10], 0; cmovg rax, rdx; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000011ec07: mov ecx, dword ptr [rcx + 0x18]; jmp rcx; 
0x00000000001115f4: mov ecx, dword ptr [rcx]; add byte ptr [rax], al; mov eax, edx; pop rbx; ret; 
0x00000000000dbb21: mov ecx, dword ptr [rcx]; sti; call rcx; 
0x00000000000471a6: mov ecx, dword ptr [rdi + 0x30]; mov rdi, qword ptr [rdi + 0x68]; xor eax, eax; ret; 
0x000000000004719b: mov ecx, dword ptr [rdi + 0x98]; mov r8, qword ptr [rdi + 0x28]; mov r9, qword ptr [rdi + 0x30]; mov rdi, qword ptr [rdi + 0x68]; xor eax, eax; ret; 
0x000000000007c591: mov ecx, dword ptr [rdi]; mov qword ptr [rdx], rcx; ret; 
0x00000000001ade2e: mov ecx, dword ptr [rdx + 0xd1cfff5]; mov bp, si; jmp qword ptr [rdx]; 
0x000000000008eec3: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000136257: mov ecx, dword ptr [rdx]; mov rdx, r12; add r9, r11; call rax; 
0x0000000000132d74: mov ecx, dword ptr [rip + 0x28b0ee]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000132d24: mov ecx, dword ptr [rip + 0x28b13e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbee1: mov ecx, dword ptr [rip + 0x2c1f81]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbeb1: mov ecx, dword ptr [rip + 0x2c1fb1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbe81: mov ecx, dword ptr [rip + 0x2c1fe1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbe51: mov ecx, dword ptr [rip + 0x2c2011]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbe24: mov ecx, dword ptr [rip + 0x2c203e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbdf4: mov ecx, dword ptr [rip + 0x2c206e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbdc1: mov ecx, dword ptr [rip + 0x2c20a1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd91: mov ecx, dword ptr [rip + 0x2c20d1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd61: mov ecx, dword ptr [rip + 0x2c2101]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd31: mov ecx, dword ptr [rip + 0x2c2131]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd10: mov ecx, dword ptr [rip + 0x2c2152]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbcb0: mov ecx, dword ptr [rip + 0x2c21b2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb5f4: mov ecx, dword ptr [rip + 0x2c286e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb5c1: mov ecx, dword ptr [rip + 0x2c28a1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb591: mov ecx, dword ptr [rip + 0x2c28d1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb564: mov ecx, dword ptr [rip + 0x2c28fe]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb540: mov ecx, dword ptr [rip + 0x2c2922]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb4da: mov ecx, dword ptr [rip + 0x2c2988]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb3ca: mov ecx, dword ptr [rip + 0x2c2a98]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb370: mov ecx, dword ptr [rip + 0x2c2af2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb251: mov ecx, dword ptr [rip + 0x2c2c11]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb224: mov ecx, dword ptr [rip + 0x2c2c3e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb1f1: mov ecx, dword ptr [rip + 0x2c2c71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb1c1: mov ecx, dword ptr [rip + 0x2c2ca1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb19a: mov ecx, dword ptr [rip + 0x2c2cc8]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb131: mov ecx, dword ptr [rip + 0x2c2d31]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb10a: mov ecx, dword ptr [rip + 0x2c2d58]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb084: mov ecx, dword ptr [rip + 0x2c2dde]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb054: mov ecx, dword ptr [rip + 0x2c2e0e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb021: mov ecx, dword ptr [rip + 0x2c2e41]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faffa: mov ecx, dword ptr [rip + 0x2c2e68]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf94: mov ecx, dword ptr [rip + 0x2c2ece]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf61: mov ecx, dword ptr [rip + 0x2c2f01]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf31: mov ecx, dword ptr [rip + 0x2c2f31]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf04: mov ecx, dword ptr [rip + 0x2c2f5e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faed1: mov ecx, dword ptr [rip + 0x2c2f91]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faeb0: mov ecx, dword ptr [rip + 0x2c2fb2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fae41: mov ecx, dword ptr [rip + 0x2c3021]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fae11: mov ecx, dword ptr [rip + 0x2c3051]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fadf0: mov ecx, dword ptr [rip + 0x2c3072]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fad81: mov ecx, dword ptr [rip + 0x2c30e1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fad60: mov ecx, dword ptr [rip + 0x2c3102]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000facf4: mov ecx, dword ptr [rip + 0x2c316e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000facc4: mov ecx, dword ptr [rip + 0x2c319e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac94: mov ecx, dword ptr [rip + 0x2c31ce]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac61: mov ecx, dword ptr [rip + 0x2c3201]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac31: mov ecx, dword ptr [rip + 0x2c3231]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac01: mov ecx, dword ptr [rip + 0x2c3261]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fabd4: mov ecx, dword ptr [rip + 0x2c328e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faba4: mov ecx, dword ptr [rip + 0x2c32be]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fab71: mov ecx, dword ptr [rip + 0x2c32f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fab41: mov ecx, dword ptr [rip + 0x2c3321]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fab11: mov ecx, dword ptr [rip + 0x2c3351]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faae1: mov ecx, dword ptr [rip + 0x2c3381]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faab1: mov ecx, dword ptr [rip + 0x2c33b1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faa84: mov ecx, dword ptr [rip + 0x2c33de]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faa51: mov ecx, dword ptr [rip + 0x2c3411]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faa30: mov ecx, dword ptr [rip + 0x2c3432]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa9c4: mov ecx, dword ptr [rip + 0x2c349e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa991: mov ecx, dword ptr [rip + 0x2c34d1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa961: mov ecx, dword ptr [rip + 0x2c3501]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa931: mov ecx, dword ptr [rip + 0x2c3531]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa901: mov ecx, dword ptr [rip + 0x2c3561]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa8d1: mov ecx, dword ptr [rip + 0x2c3591]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa8a1: mov ecx, dword ptr [rip + 0x2c35c1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa871: mov ecx, dword ptr [rip + 0x2c35f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa841: mov ecx, dword ptr [rip + 0x2c3621]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa814: mov ecx, dword ptr [rip + 0x2c364e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa7d1: mov ecx, dword ptr [rip + 0x2c3691]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa7a1: mov ecx, dword ptr [rip + 0x2c36c1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa774: mov ecx, dword ptr [rip + 0x2c36ee]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa4b1: mov ecx, dword ptr [rip + 0x2c39b1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa481: mov ecx, dword ptr [rip + 0x2c39e1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa451: mov ecx, dword ptr [rip + 0x2c3a11]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa421: mov ecx, dword ptr [rip + 0x2c3a41]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa3ea: mov ecx, dword ptr [rip + 0x2c3a78]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa386: mov ecx, dword ptr [rip + 0x2c3adc]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa291: mov ecx, dword ptr [rip + 0x2c3bd1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa261: mov ecx, dword ptr [rip + 0x2c3c01]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8224: mov ecx, dword ptr [rip + 0x2c5c3e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f81f1: mov ecx, dword ptr [rip + 0x2c5c71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8191: mov ecx, dword ptr [rip + 0x2c5cd1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8161: mov ecx, dword ptr [rip + 0x2c5d01]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8134: mov ecx, dword ptr [rip + 0x2c5d2e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8101: mov ecx, dword ptr [rip + 0x2c5d61]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f80d4: mov ecx, dword ptr [rip + 0x2c5d8e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f80a4: mov ecx, dword ptr [rip + 0x2c5dbe]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8041: mov ecx, dword ptr [rip + 0x2c5e21]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8014: mov ecx, dword ptr [rip + 0x2c5e4e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4a91: mov ecx, dword ptr [rip + 0x2c93d1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4a61: mov ecx, dword ptr [rip + 0x2c9401]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4a31: mov ecx, dword ptr [rip + 0x2c9431]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4a01: mov ecx, dword ptr [rip + 0x2c9461]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f49d4: mov ecx, dword ptr [rip + 0x2c948e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f49a1: mov ecx, dword ptr [rip + 0x2c94c1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f494a: mov ecx, dword ptr [rip + 0x2c9518]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f48e1: mov ecx, dword ptr [rip + 0x2c9581]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f48b1: mov ecx, dword ptr [rip + 0x2c95b1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4884: mov ecx, dword ptr [rip + 0x2c95de]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4713: mov ecx, dword ptr [rip + 0x2c974f]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f30a1: mov ecx, dword ptr [rip + 0x2cadc1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f21f1: mov ecx, dword ptr [rip + 0x2cbc71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f21c1: mov ecx, dword ptr [rip + 0x2cbca1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2191: mov ecx, dword ptr [rip + 0x2cbcd1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1ed1: mov ecx, dword ptr [rip + 0x2cbf91]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1eaa: mov ecx, dword ptr [rip + 0x2cbfb8]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1e41: mov ecx, dword ptr [rip + 0x2cc021]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1e1a: mov ecx, dword ptr [rip + 0x2cc048]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1db1: mov ecx, dword ptr [rip + 0x2cc0b1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1d81: mov ecx, dword ptr [rip + 0x2cc0e1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1c70: mov ecx, dword ptr [rip + 0x2cc1f2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1c01: mov ecx, dword ptr [rip + 0x2cc261]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f11f1: mov ecx, dword ptr [rip + 0x2ccc71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1031: mov ecx, dword ptr [rip + 0x2cce31]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0c71: mov ecx, dword ptr [rip + 0x2cd1f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0c41: mov ecx, dword ptr [rip + 0x2cd221]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0c11: mov ecx, dword ptr [rip + 0x2cd251]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0510: mov ecx, dword ptr [rip + 0x2cd952]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ed2e4: mov ecx, dword ptr [rip + 0x2d0b7e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecffa: mov ecx, dword ptr [rip + 0x2d0e68]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecf91: mov ecx, dword ptr [rip + 0x2d0ed1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecf31: mov ecx, dword ptr [rip + 0x2d0f31]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eced1: mov ecx, dword ptr [rip + 0x2d0f91]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ece71: mov ecx, dword ptr [rip + 0x2d0ff1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ece11: mov ecx, dword ptr [rip + 0x2d1051]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec821: mov ecx, dword ptr [rip + 0x2d1641]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec7f1: mov ecx, dword ptr [rip + 0x2d1671]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec7c1: mov ecx, dword ptr [rip + 0x2d16a1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebff1: mov ecx, dword ptr [rip + 0x2d1e71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebfc1: mov ecx, dword ptr [rip + 0x2d1ea1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebf9a: mov ecx, dword ptr [rip + 0x2d1ec8]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebf31: mov ecx, dword ptr [rip + 0x2d1f31]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebf01: mov ecx, dword ptr [rip + 0x2d1f61]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebed1: mov ecx, dword ptr [rip + 0x2d1f91]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebea1: mov ecx, dword ptr [rip + 0x2d1fc1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebe71: mov ecx, dword ptr [rip + 0x2d1ff1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebe4a: mov ecx, dword ptr [rip + 0x2d2018]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebcd1: mov ecx, dword ptr [rip + 0x2d2191]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb771: mov ecx, dword ptr [rip + 0x2d26f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb74a: mov ecx, dword ptr [rip + 0x2d2718]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb6ea: mov ecx, dword ptr [rip + 0x2d2778]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb4fa: mov ecx, dword ptr [rip + 0x2d2968]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb461: mov ecx, dword ptr [rip + 0x2d2a01]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb3c1: mov ecx, dword ptr [rip + 0x2d2aa1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb391: mov ecx, dword ptr [rip + 0x2d2ad1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb271: mov ecx, dword ptr [rip + 0x2d2bf1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb241: mov ecx, dword ptr [rip + 0x2d2c21]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eafb1: mov ecx, dword ptr [rip + 0x2d2eb1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eaf90: mov ecx, dword ptr [rip + 0x2d2ed2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eaf40: mov ecx, dword ptr [rip + 0x2d2f22]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb5f0: mov ecx, dword ptr [rip + 0x2f2872]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb590: mov ecx, dword ptr [rip + 0x2f28d2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb341: mov ecx, dword ptr [rip + 0x2f2b21]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb311: mov ecx, dword ptr [rip + 0x2f2b51]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb2e1: mov ecx, dword ptr [rip + 0x2f2b81]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb2b1: mov ecx, dword ptr [rip + 0x2f2bb1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb281: mov ecx, dword ptr [rip + 0x2f2be1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb251: mov ecx, dword ptr [rip + 0x2f2c11]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb221: mov ecx, dword ptr [rip + 0x2f2c41]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb1f1: mov ecx, dword ptr [rip + 0x2f2c71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb104: mov ecx, dword ptr [rip + 0x2f625e]; mov rdx, qword ptr [rip + 0x2f2e47]; mov dword ptr [rdx], ecx; add rsp, 0x10; pop rbx; ret; 
0x00000000000c2011: mov ecx, dword ptr [rip + 0x2fbe51]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1fe1: mov ecx, dword ptr [rip + 0x2fbe81]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1fb1: mov ecx, dword ptr [rip + 0x2fbeb1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1f81: mov ecx, dword ptr [rip + 0x2fbee1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1f21: mov ecx, dword ptr [rip + 0x2fbf41]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1ef1: mov ecx, dword ptr [rip + 0x2fbf71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1d61: mov ecx, dword ptr [rip + 0x2fc101]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c116b: mov ecx, dword ptr [rip + 0x2fccf7]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0e1a: mov ecx, dword ptr [rip + 0x2fd048]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0dba: mov ecx, dword ptr [rip + 0x2fd0a8]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0ba1: mov ecx, dword ptr [rip + 0x2fd2c1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0ac4: mov ecx, dword ptr [rip + 0x2fd39e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c08e1: mov ecx, dword ptr [rip + 0x2fd581]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b42a1: mov ecx, dword ptr [rip + 0x309bc1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b1421: mov ecx, dword ptr [rip + 0x30ca41]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000005dba1: mov ecx, dword ptr [rip + 0x3602c1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000474f1: mov ecx, dword ptr [rip + 0x376971]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000471b1: mov ecx, dword ptr [rip + 0x376cb1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000004711d: mov ecx, dword ptr [rip + 0x376d45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000374d1: mov ecx, dword ptr [rip + 0x386991]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000009dc04: mov ecx, dword ptr [rsi + 0x10]; mov dl, byte ptr [rsi + 0x14]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x000000000009e5a4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009f3f4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009e5c4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009cf34: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000009cf24: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000a0e64: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x000000000009e625: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009f475: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009e645: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009cfb5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000009cf95: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000a0ee5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x000000000009e565: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009f3b5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009cef5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000a0e25: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x000000000009e688: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009f4d8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009cff8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000009e6a8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009f4f8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009d018: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000009e669: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009f4b9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009cfd9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000474e6: mov ecx, dword ptr [rsi + 0x30]; mov rsi, qword ptr [rsi + 0x70]; xor eax, eax; ret; 
0x00000000000474db: mov ecx, dword ptr [rsi + 0x98]; mov r8, qword ptr [rsi + 0x28]; mov r9, qword ptr [rsi + 0x30]; mov rsi, qword ptr [rsi + 0x70]; xor eax, eax; ret; 
0x000000000009e5e5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009f435: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009cf55: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000a0ea5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x000000000009e584: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009f3d4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009cf14: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000a0e44: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x000000000009e605: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009f455: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009cf75: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000a0ec5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000011ebf9: mov ecx, dword ptr [rsi + 8]; mov edx, dword ptr [rdi + 0x5c]; lea rsi, qword ptr [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000001445d5: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001445f1: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001447b5: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001447d1: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144995: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001449b1: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144b85: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144ba1: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144d85: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144da1: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f85: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144fa1: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001447e5: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000144bc3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144dc3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144fc3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c634: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c5b4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c534: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c6b4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c4a5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c415: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c385: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001443f5: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144411: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000009e420: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000009ce20: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000009e471: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009ce61: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000009f221: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000009dad1: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 2]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x000000000009f250: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000009daf0: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000009f2a1: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009db31: mov ecx, dword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000014cfe3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014cf73: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014cf03: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000009e430: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000009f260: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000009ce30: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000009f2c1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009e481: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009ce71: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000009e450: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000009f280: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009ce40: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000009e4a1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009f2e1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009ce81: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000009e4c1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009f301: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009ce91: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000014ce25: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cdb5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cd45: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014ccd5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cc65: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cbf5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cb85: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e4e1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009f321: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009cea1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000009e501: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009f341: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009ceb1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000009e521: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009f361: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009cec1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000014d0c5: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000009e401: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009ce01: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000022171: mov ecx, dword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x00000000000a42e9: mov ecx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000123f85: mov ecx, dword ptr [rsp + 0x18]; call rcx; 
0x0000000000123d8e: mov ecx, dword ptr [rsp + 0x20]; call rcx; 
0x000000000012099e: mov ecx, dword ptr [rsp + 8]; call rcx; 
0x00000000000fd47e: mov ecx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000fd4df: mov ecx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x00000000000f4703: mov ecx, dword ptr [rsp + 8]; syscall; 
0x00000000000fd5b1: mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rdx, qword ptr [rdx + rcx*4]; add eax, dword ptr [rsi + rdx]; ret; 
0x0000000000039a8e: mov ecx, eax; lea r8, qword ptr [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x39230; leave; ret; 
0x00000000001087f5: mov ecx, eax; mov eax, 3; neg ecx; cmp edx, -0x16; cmovne eax, ecx; ret; 
0x00000000000b9f25: mov ecx, eax; mov r8, rsp; mov byte ptr [rsp], 0; call 0xb80f0; add rsp, 0x18; ret; 
0x00000000000bc255: mov ecx, eax; mov r8, rsp; mov byte ptr [rsp], 0; call 0xb9fa0; add rsp, 0x18; ret; 
0x0000000000120d48: mov ecx, eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000f0873: mov ecx, eax; pop r12; mov eax, r9d; pop r13; ret; 
0x0000000000096bd6: mov ecx, eax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x000000000011dfe5: mov ecx, ebp; call rbx; 
0x00000000000cc5eb: mov ecx, ebp; mov r8, qword ptr [rbp - 0xc0]; mov rdx, r14; mov rsi, qword ptr [rbp - 0xb0]; mov rdi, qword ptr [rbp - 0xa8]; call rbx; 
0x00000000000a44a2: mov ecx, ebp; mov rdi, rbp; call rbx; 
0x00000000000274d6: mov ecx, ebp; mov rdx, qword ptr [r14]; mov rsi, r13; call qword ptr [rbx + 8]; 
0x000000000012279e: mov ecx, ebp; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000000700de: mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000fb511: mov ecx, ebx; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x2c; syscall; 
0x000000000009685e: mov ecx, ecx; movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x0000000000096bc4: mov ecx, edi; mov qword ptr [rdx], rcx; ret; 
0x0000000000025fa2: mov ecx, edi; mov rdx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000091ae8: mov ecx, edx; and ecx, 7; movsxd rcx, dword ptr [rax + rcx*4]; add rax, rcx; jmp rax; 
0x00000000000e3cb1: mov ecx, edx; call 0xe32d0; add rsp, 0x18; ret; 
0x000000000003cd21: mov ecx, edx; lea rdx, qword ptr [r8 + 4]; xor eax, eax; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000007ba97: mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x00000000001a156d: mov ecx, esi; jmp qword ptr [rdx]; 
0x00000000000f31b0: mov ecx, esi; mov byte ptr [r9 - 1], 0; ret; 
0x000000000012a589: mov ecx, esi; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax; 
0x00000000001245d5: mov ecx, esi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x00000000001245f5: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x0000000000127ec5: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x0000000000127615: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x0000000000123a35: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x00000000001334e8: mov ecx, esp; call 0x133250; add rsp, 0x98; ret; 
0x000000000007026a: mov ecx, esp; mov rax, qword ptr [rax + 0x48]; xor edx, edx; pop r12; jmp rax; 
0x000000000002a430: mov ecx, esp; mov rdx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000025ad5: mov ecx, esp; mov rdx, qword ptr [rsp + 0x58]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000070320: mov ecx, esp; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000018dc6c: mov ecx, fs; add al, byte ptr [rax]; add ecx, eax; cli; call rsp; 
0x0000000000070269: mov ecx, r12d; mov rax, qword ptr [rax + 0x48]; xor edx, edx; pop r12; jmp rax; 
0x000000000007031f: mov ecx, r12d; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000461e3: mov edi, 0x100011; mov eax, 0x38; syscall; 
0x00000000000c0ed8: mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x0000000000102081: mov edi, 0x2000001; mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x0000000000103085: mov edi, 0x2000003; call qword ptr [rbx + 0x28]; 
0x0000000000102188: mov edi, 0x2000004; call rax; 
0x00000000001765b1: mov edi, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000112024: mov edi, 0x400; call 0x1f490; mov qword ptr [rip + 0x2ad9b3], rax; add rsp, 8; ret; 
0x000000000012ab0c: mov edi, 0x48001f0f; mov eax, dword ptr [rip + 0x293469]; lea rdx, qword ptr [rip + 0x298d62]; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000031e3d: mov edi, 0x480038de; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b8230: mov edi, 0x4a7c8d44; ror byte ptr [rax - 0x7d], 1; ret; 
0x00000000000fc240: mov edi, 0x4cee894c; mov edi, ecx; mov eax, ebx; syscall; 
0x000000000014abf7: mov edi, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000fc7fd: mov edi, 0x73002c51; or al, 0x48; mov edx, dword ptr [rip + 0x2c51c6]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000001aa165: mov edi, 0x8ed80001; cmc; jmp qword ptr [rbx + 2]; 
0x0000000000175e1c: mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000000ec7ab: mov edi, 0xadebfff9; mov eax, 0x5c; syscall; 
0x0000000000030788: mov edi, 0xb0158d48; and dword ptr [rax + rax], edx; movsxd rax, dword ptr [rdx + r12*4]; add rdx, rax; jmp rdx; 
0x00000000000d6349: mov edi, 0xb8643b45; add al, 0x7f; fistp qword ptr [rcx]; ret 0xc189; 
0x00000000000d62d9: mov edi, 0xb86c3b41; add al, 0x7f; fistp qword ptr [rcx]; ret 0xc189; 
0x00000000001781f0: mov edi, 0xb8fff1e5; in eax, 0xf1; jmp rax; 
0x00000000000dbcc5: mov edi, 0xbe443b44; add al, 0x7f; fistp qword ptr [rcx]; ret 0xc189; 
0x00000000000f66ef: mov edi, 0xbefffffc; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x00000000001794c8: mov edi, 0xc9fff49b; wait; hlt; call rbx; 
0x00000000000f1ead: mov edi, 0xd8f7002c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1f14: mov edi, 0xd8f7002c; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1ef4: mov edi, 0xd8f7002f; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000006e45a: mov edi, 0xe0; call rax; 
0x000000000006e42e: mov edi, 0xe0; jmp rax; 
0x000000000012e0b9: mov edi, 0xe6894806; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012d3aa: mov edi, 0xe6894806; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000a1a34: mov edi, 0xf000000; popfq; ret 0xea81; 
0x00000000000c4042: mov edi, 0xf6000000; ret; 
0x0000000000160879: mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000f1ef9: mov edi, 0xfee1dead; mov eax, 0xa9; syscall; 
0x00000000000f2f66: mov edi, 0xffffff9c; mov eax, 0x118; syscall; 
0x00000000000c0975: mov edi, 0xffffffff; mov eax, 0x3d; syscall; 
0x00000000000c2bf2: mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000002fc0d: mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000004713a: mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000136b91: mov edi, 9; mov eax, 0x3e; syscall; 
0x000000000002341f: mov edi, dword ptr [rax + 0x18]; mov qword ptr [rbp - 0x68], rax; call rcx; 
0x00000000000543d2: mov edi, dword ptr [rax]; call 0x49c40; add rsp, 0xd8; ret; 
0x000000000005d124: mov edi, dword ptr [rax]; call 0x54630; add rsp, 0xd8; ret; 
0x0000000000078412: mov edi, dword ptr [rax]; call 0x5eaf0; add rsp, 0xd8; ret; 
0x00000000000784c4: mov edi, dword ptr [rax]; call 0x64230; add rsp, 0xd8; ret; 
0x00000000000f5323: mov edi, dword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000001287d1: mov edi, dword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000129347: mov edi, dword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000000c39fe: mov edi, dword ptr [rbp - 0x3f8]; call qword ptr [rax + 0x28]; 
0x00000000000f576e: mov edi, dword ptr [rbp - 0x40]; mov r15d, r14d; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x00000000000cc5ff: mov edi, dword ptr [rbp - 0xa8]; call rbx; 
0x00000000000cc9c4: mov edi, dword ptr [rbp - 0xa8]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rbp - 0x120]; mov qword ptr [rsp], rax; call rbx; 
0x00000000000f4f7a: mov edi, dword ptr [rbp]; call rbx; 
0x0000000000123f25: mov edi, dword ptr [rbp]; lea rsi, qword ptr [r12 + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000123e76: mov edi, dword ptr [rbp]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000123d6e: mov edi, dword ptr [rbp]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000002376a: mov edi, dword ptr [rbx + 0x18]; call rax; 
0x00000000000ed63e: mov edi, dword ptr [rbx + 0x18]; mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x00000000000274cf: mov edi, dword ptr [rbx + 0x18]; mov r8, r12; mov rcx, rbp; mov rdx, qword ptr [r14]; mov rsi, r13; call qword ptr [rbx + 8]; 
0x00000000000e3a3a: mov edi, dword ptr [rbx + 0x28]; mov qword ptr [rbx + 0x20], 0; call 0x1f4f0; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000086a79: mov edi, dword ptr [rbx + 0x48]; call qword ptr [rbx + 0x40]; 
0x0000000000086a09: mov edi, dword ptr [rbx + 0x48]; mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x000000000003c81a: mov edi, dword ptr [rbx + 8]; mov qword ptr [rax + 0x60], rdx; call qword ptr [rbx]; 
0x00000000001293e8: mov edi, dword ptr [rbx]; lea rdx, qword ptr [rsp + 0x10]; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x0000000000129351: mov edi, dword ptr [rbx]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x0000000000121d46: mov edi, dword ptr [rbx]; mov rbp, r14; add rbp, qword ptr [rbx + 0x50]; sub edx, r14d; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x00000000001276e5: mov edi, dword ptr [rcx + 0x10]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x000000000003c195: mov edi, dword ptr [rcx + 0x10]; mov esi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001276fd: mov edi, dword ptr [rcx + 0x24]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x00000000000c109a: mov edi, dword ptr [rcx + 0x28]; mov eax, ebx; mov esi, 0x81; syscall; 
0x0000000000127f5d: mov edi, dword ptr [rdi + 0x10]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x000000000012e8c5: mov edi, dword ptr [rdi + 0x18]; call 0x6eb20; add rsp, 8; ret; 
0x0000000000127f8d: mov edi, dword ptr [rdi + 0x28]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000036b23: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000000127f45: mov edi, dword ptr [rdi + 0x38]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x00000000001245d1: mov edi, dword ptr [rdi + 0x40]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x000000000012bf91: mov edi, dword ptr [rdi + 0x48]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x00000000000868e7: mov edi, dword ptr [rdi + 0x48]; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x00000000000471aa: mov edi, dword ptr [rdi + 0x68]; xor eax, eax; ret; 
0x00000000000794df: mov edi, dword ptr [rdi + 0x70]; call 0xeb6a9; pop rdx; cdqe; ret; 
0x000000000006e459: mov edi, dword ptr [rdi + 0xe0]; call rax; 
0x000000000006e42d: mov edi, dword ptr [rdi + 0xe0]; jmp rax; 
0x00000000000f4bea: mov edi, dword ptr [rdi]; call 0x1f4f0; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000135cea: mov edi, dword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x00000000000f4f28: mov edi, dword ptr [rdi]; call rbx; 
0x00000000001284d1: mov edi, dword ptr [rdi]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000128205: mov edi, dword ptr [rdi]; mov rsi, r13; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000001063f4: mov edi, dword ptr [rdx + 0x50]; mov rsi, rdx; call rax; 
0x0000000000174c26: mov edi, dword ptr [rdx]; ret; 
0x00000000001651e8: mov edi, dword ptr [rip + 0x25bc62]; call 0x1f4f0; mov qword ptr [rip + 0x25bc52], 0; pop rbx; ret; 
0x000000000008acef: mov edi, dword ptr [rip + 0x335ffb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008ac79: mov edi, dword ptr [rip + 0x336071]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d49a1: mov edi, dword ptr [rsi + 0x28]; call 0x1f4f0; xor eax, eax; pop rbx; ret; 
0x00000000000f4ee7: mov edi, dword ptr [rsi]; call rbx; 
0x00000000000aedb7: mov edi, dword ptr [rsp + 0x10]; call 0x246b0; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x0000000000021f37: mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000bdc03: mov edi, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp], rdx; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x0000000000135f09: mov edi, dword ptr [rsp + 0x30]; mov dword ptr [rsp + 0xc], eax; call 0x1f4f0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x48; ret; 
0x0000000000025ae2: mov edi, dword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000028519: mov edi, dword ptr [rsp + 0x48]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000027f19: mov edi, dword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rsp + 8], esi; mov rsi, qword ptr [rsp + 0x50]; call rax; 
0x0000000000027812: mov edi, dword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000049199: mov edi, dword ptr [rsp + 0x60]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000028736: mov edi, dword ptr [rsp + 0x68]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x58]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000028135: mov edi, dword ptr [rsp + 0x68]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x78]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000027622: mov edi, dword ptr [rsp + 0x70]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a552: mov edi, dword ptr [rsp + 0x70]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002793d: mov edi, dword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x00000000000c0b47: mov edi, dword ptr [rsp + 0xc]; movsxd r10, ecx; syscall; 
0x00000000000e8a3b: mov edi, dword ptr [rsp + 0xe0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000022124: mov edi, dword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x0000000000036fa7: mov edi, dword ptr [rsp + 8]; mov eax, 0x82; syscall; 
0x00000000000f5445: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000ed099: mov edi, dword ptr [rsp + 8]; syscall; 
0x00000000000f5370: mov edi, dword ptr [rsp]; call rbx; 
0x00000000000a3a66: mov edi, dword ptr [rsp]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x0000000000135c5b: mov edi, dword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x000000000011f5d1: mov edi, dword ptr [rsp]; mov rsi, r14; mov r13d, 7; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000011f480: mov edi, dword ptr [rsp]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000f75c0: mov edi, dword ptr [rsp]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c09d0: mov edi, eax; call 0x108100; add rsp, 0x10; mov eax, ebx; pop rbx; ret; 
0x00000000000f059c: mov edi, eax; call 0x108100; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x00000000000f5332: mov edi, eax; call 0x1f4f0; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000038015: mov edi, eax; call 0x36eb0; add rsp, 0xa8; ret; 
0x00000000000b0754: mov edi, eax; call 0xb04e0; add rsp, 0x40; pop rbx; ret; 
0x00000000000f1f68: mov edi, eax; call 0xeb6a9; movsxd rdi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x00000000000f2113: mov edi, eax; call 0xeb709; movsxd rdi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x000000000006e010: mov edi, eax; call qword ptr [rax + 0x20]; 
0x00000000001337e2: mov edi, eax; call qword ptr [rax + 8]; 
0x0000000000129db1: mov edi, eax; call qword ptr [rdx + 0x20]; 
0x00000000000cce18: mov edi, eax; call rbx; 
0x000000000018cb11: mov edi, eax; jmp rsp; 
0x0000000000036fbb: mov edi, eax; mov dword ptr [rsp + 8], eax; call 0x108100; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000eb134: mov edi, eax; mov eax, 0x85; syscall; 
0x000000000003710b: mov edi, eax; mov eax, ebp; syscall; 
0x000000000012663c: mov edi, eax; mov edx, dword ptr [rsi + 0x1c8]; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000000bd87f: mov edi, eax; mov qword ptr [rbp - 0x58], rax; call 0x135c70; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000023fe2: mov edi, eax; mov qword ptr [rbp - 0x60], rax; call 0x135c70; mov rdi, r14; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x00000000000f1279: mov edi, eax; mov qword ptr [rsp + 8], rax; call 0x108100; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000011ec04: mov edi, eax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000000eb039: mov edi, eax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000000eb0d9: mov edi, eax; mov rsi, rdx; mov eax, 6; syscall; 
0x00000000001281f0: mov edi, ebp; add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x0000000000120f81: mov edi, ebp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x00000000000f5368: mov edi, ebp; call 0x1f4f0; mov rdi, qword ptr [r12]; call rbx; 
0x00000000000f50a7: mov edi, ebp; call 0x1f4f0; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000105f44: mov edi, ebp; call 0x5dcc0; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000000ee0a3: mov edi, ebp; call 0xebfe0; movsxd rdi, r13d; mov eax, 3; syscall; 
0x00000000001216fc: mov edi, ebp; call qword ptr [rax + 0x10]; 
0x000000000007959c: mov edi, ebp; call qword ptr [rax + 0x18]; 
0x000000000011f4af: mov edi, ebp; call qword ptr [rax + 0x20]; 
0x0000000000121553: mov edi, ebp; call qword ptr [rax + 0x28]; 
0x0000000000120eea: mov edi, ebp; call qword ptr [rax + 0x30]; 
0x000000000007969a: mov edi, ebp; call qword ptr [rax + 0x78]; 
0x000000000011f472: mov edi, ebp; call qword ptr [rax + 8]; 
0x000000000011feeb: mov edi, ebp; call qword ptr [rax]; 
0x000000000011feeb: mov edi, ebp; call qword ptr [rax]; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x0000000000075a96: mov edi, ebp; call qword ptr [rbp + 0x20]; 
0x00000000000869e6: mov edi, ebp; call qword ptr [rbx + 0x40]; 
0x000000000012170a: mov edi, ebp; call qword ptr [rbx]; 
0x000000000011f69a: mov edi, ebp; call rax; 
0x00000000000a419d: mov edi, ebp; call rbx; 
0x000000000012e401: mov edi, ebp; call rcx; 
0x000000000008608b: mov edi, ebp; call rdx; 
0x00000000000570f7: mov edi, ebp; jmp qword ptr [rsi + 0xf]; 
0x00000000001281d4: mov edi, ebp; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x000000000011f555: mov edi, ebp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000011f4c5: mov edi, ebp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x000000000012a85a: mov edi, ebp; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x0000000000126759: mov edi, ebp; mov dword ptr [rsp + 0x40], 0; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x00000000000ec079: mov edi, ebp; mov eax, 0x4f; syscall; 
0x000000000002c20e: mov edi, ebp; mov eax, 3; syscall; 
0x0000000000073197: mov edi, ebp; mov eax, r9d; syscall; 
0x000000000012d9fc: mov edi, ebp; mov edx, 0xffffffff; xor eax, eax; call rcx; 
0x000000000011f56e: mov edi, ebp; mov edx, dword ptr [rbx + 0x22c0]; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000120201: mov edi, ebp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000012a7e8: mov edi, ebp; mov qword ptr [rsp + 0x50], rax; mov rax, qword ptr [r13 + 8]; mov qword ptr [rsp], r15; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x0000000000075b25: mov edi, ebp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x000000000012daff: mov edi, ebp; mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x00000000000a42e6: mov edi, ebp; mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000128223: mov edi, ebp; mov rcx, qword ptr [rbp - 0x168]; call rcx; 
0x0000000000123f82: mov edi, ebp; mov rcx, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000123d8b: mov edi, ebp; mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x000000000011dfe2: mov edi, ebp; mov rcx, r13; call rbx; 
0x0000000000135236: mov edi, ebp; mov rdx, rsp; lea rsi, qword ptr [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x0000000000022f05: mov edi, ebp; mov rsi, qword ptr [rdx + rbx + 0x20]; call rax; 
0x0000000000120b7e: mov edi, ebp; xor eax, eax; pop rbp; jmp rdx; 
0x000000000011c2cc: mov edi, ebx; call 0x11a4a0; add rsp, 0x90; pop rbx; ret; 
0x00000000000357af: mov edi, ebx; call 0x1f4f0; xor eax, eax; pop rbx; ret; 
0x0000000000037245: mov edi, ebx; call 0x36f60; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000f978c: mov edi, ebx; call 0x54480; mov rax, rbx; pop rbx; ret; 
0x0000000000097a92: mov edi, ebx; call 0x8c4b0; lea rax, qword ptr [rbx - 1]; pop rbx; ret; 
0x00000000000a3899: mov edi, ebx; call 0x8c4b0; lea rax, qword ptr [rbx - 4]; pop rbx; ret; 
0x00000000000498a1: mov edi, ebx; call 0x97b10; add rsp, 0x440; pop rbx; ret; 
0x00000000000bd3a2: mov edi, ebx; call 0xbcca0; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000006d97a: mov edi, ebx; call qword ptr [rax + 0x10]; 
0x000000000007467d: mov edi, ebx; call qword ptr [rax + 0x18]; 
0x000000000007b7cc: mov edi, ebx; call qword ptr [rax + 0x20]; 
0x00000000001202f0: mov edi, ebx; call qword ptr [rax + 0x28]; 
0x000000000007bd6c: mov edi, ebx; call qword ptr [rax + 0x30]; 
0x000000000004a19e: mov edi, ebx; call qword ptr [rax + 0x38]; 
0x0000000000078da7: mov edi, ebx; call qword ptr [rax + 0x40]; 
0x00000000000700e4: mov edi, ebx; call qword ptr [rax + 0x48]; 
0x00000000000704ce: mov edi, ebx; call qword ptr [rax + 0x58]; 
0x000000000006de8d: mov edi, ebx; call qword ptr [rax + 0x60]; 
0x00000000000706f5: mov edi, ebx; call qword ptr [rax + 0x68]; 
0x00000000000792b4: mov edi, ebx; call qword ptr [rax + 0x70]; 
0x000000000007a3d7: mov edi, ebx; call qword ptr [rax + 0x78]; 
0x0000000000121afa: mov edi, ebx; call qword ptr [rax + 8]; 
0x0000000000121b18: mov edi, ebx; call qword ptr [rax]; 
0x0000000000129b95: mov edi, ebx; call qword ptr [rax]; mov ebp, eax; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001203f7: mov edi, ebx; call qword ptr [rdx + 0x20]; 
0x0000000000075055: mov edi, ebx; call qword ptr [rdx + 0x30]; 
0x0000000000050a65: mov edi, ebx; call rax; 
0x00000000000f074c: mov edi, ebx; lea rdx, qword ptr [rsp - 0x38]; syscall; 
0x00000000000bd9f7: mov edi, ebx; mov dword ptr [rbp - 0x58], edx; call 0x135c70; mov rax, rbx; call rax; 
0x00000000000fa649: mov edi, ebx; mov eax, 0x11a; syscall; 
0x0000000000108968: mov edi, ebx; mov eax, 0xe6; mov r10, rcx; syscall; 
0x0000000000108921: mov edi, ebx; mov eax, 0xe6; syscall; 
0x0000000000035895: mov edi, ebx; mov eax, 3; syscall; 
0x00000000000f082b: mov edi, ebx; mov eax, ebp; mov r13d, dword ptr fs:[r12]; syscall; 
0x000000000007c538: mov edi, ebx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000001202cb: mov edi, ebx; mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x0000000000120275: mov edi, ebx; mov qword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x000000000006ffa0: mov edi, ebx; mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000135813: mov edi, ebx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000f4e6d: mov edi, ebx; mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000012099b: mov edi, ebx; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x00000000000857b6: mov edi, ebx; mov rdx, r15; call rax; 
0x00000000000704a2: mov edi, ebx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x00000000001336f6: mov edi, ebx; pop rbx; mov qword ptr [rip + 0x28c190], rax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000000769d8: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000074828: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000007462d: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000134ffa: mov edi, ebx; pop rbx; mov rsi, rbp; pop rbp; jmp rax; 
0x000000000012ce70: mov edi, ebx; pop rbx; pop rbp; jmp rax; 
0x000000000003c178: mov edi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049d05: mov edi, ebx; sub r12, r14; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000004a714: mov edi, ebx; sub r13, rsi; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000075cb7: mov edi, ebx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x00000000000fa60b: mov edi, ebx; syscall; 
0x00000000001202a6: mov edi, ebx; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x00000000000fbad5: mov edi, ecx; call 0x108100; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x0000000000133b27: mov edi, ecx; call qword ptr [rax + 0x10]; 
0x0000000000133bca: mov edi, ecx; call qword ptr [rax + 0x18]; 
0x00000000000738e0: mov edi, ecx; call qword ptr [rax + 0x38]; 
0x0000000000086816: mov edi, ecx; call rcx; 
0x00000000000fc338: mov edi, ecx; mov byte ptr [rbp - 0x689], 0x73; mov eax, 0x14; syscall; 
0x00000000000c0b59: mov edi, ecx; mov dword ptr [rsp + 0xc], eax; call 0x108100; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x00000000000fa6d8: mov edi, ecx; mov eax, 0x11c; syscall; 
0x00000000000fc0d0: mov edi, ecx; mov eax, 0x14; syscall; 
0x00000000000fc27d: mov edi, ecx; mov eax, 3; syscall; 
0x00000000000fc245: mov edi, ecx; mov eax, ebx; syscall; 
0x0000000000037072: mov edi, ecx; mov eax, r8d; syscall; 
0x00000000000fc1cd: mov edi, ecx; mov qword ptr [rbp - 0x6d0], rax; mov eax, ebx; syscall; 
0x0000000000080959: mov edi, ecx; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x00000000000fc10f: mov edi, ecx; movsxd rdx, edx; mov eax, 0x14; syscall; 
0x00000000000fa69c: mov edi, ecx; movsxd rsi, esi; mov eax, ecx; syscall; 
0x00000000000c10d0: mov edi, ecx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f4f65: mov edi, edi; call 0x1f4f0; mov rdi, qword ptr [r14]; call rbx; 
0x00000000001206d6: mov edi, edi; call 0xebe00; mov rdx, qword ptr [rbx + 0x38]; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x0000000000074dc5: mov edi, edi; call qword ptr [rax + 0x18]; 
0x0000000000074d59: mov edi, edi; call qword ptr [rax + 0x20]; 
0x000000000012b4e9: mov edi, edi; call qword ptr [rax + 0x28]; 
0x000000000012b455: mov edi, edi; call qword ptr [rax + 8]; 
0x000000000011fce3: mov edi, edi; call qword ptr [rax]; 
0x0000000000085516: mov edi, edi; call rax; 
0x00000000000f5c4e: mov edi, edi; call rbx; 
0x000000000012aa4a: mov edi, edi; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000012b530: mov edi, edi; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x00000000000c1d8a: mov edi, edi; mov eax, 0x69; syscall; 
0x00000000000c1dea: mov edi, edi; mov eax, 0x6a; syscall; 
0x00000000000f183c: mov edi, edi; mov eax, 0x71; syscall; 
0x00000000000f18ac: mov edi, edi; mov eax, 0x72; syscall; 
0x00000000000c203e: mov edi, edi; mov eax, 0x75; syscall; 
0x00000000000c20ae: mov edi, edi; mov eax, 0x77; syscall; 
0x00000000000c0af2: mov edi, edi; mov eax, 0xf7; syscall; 
0x00000000000f5c69: mov edi, edi; mov edx, 4; mov esi, 1; call rbx; 
0x00000000000f23d3: mov edi, edi; mov qword ptr [rsp - 0x48], rax; cmova r10, qword ptr [rax + 0x18]; mov eax, 0x65; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x00000000000fdd77: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000fdccf: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000fdc37: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000fd9b7: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000fdaf7: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000fd747: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x00000000000fda57: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000fd7e7: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000fd887: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000fdb97: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000fd6a7: mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000085fb3: mov edi, edi; mov rdx, rbx; mov rsi, r13; call rax; 
0x00000000000fe5d4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000fe544: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000fe4b4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000fe274: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000fe394: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000fe054: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x00000000000fe304: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000fe0e4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000fe164: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000fe424: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000fdfc4: mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x000000000013385c: mov edi, edx; call qword ptr [rax + 0x20]; 
0x0000000000108178: mov edi, edx; jmp rax; 
0x00000000000c11a1: mov edi, edx; mov eax, r8d; syscall; 
0x00000000000c11b2: mov edi, edx; mov eax, r9d; syscall; 
0x0000000000116209: mov edi, edx; mov edx, r11d; call 0x115190; sub rsp, -0x80; pop rbx; ret; 
0x00000000000fa32d: mov edi, edx; mov rdx, r8; mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x0000000000136ba5: mov edi, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e4a85: mov edi, edx; syscall; 
0x00000000000f4f72: mov edi, esi; call 0x1f4f0; mov rdi, qword ptr [r13]; call rbx; 
0x000000000003d021: mov edi, esi; call 0x3d150; movsd xmm0, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003d071: mov edi, esi; call 0x3d1f0; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000002eb95: mov edi, esi; call 0xf48a0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000012071d: mov edi, esi; call qword ptr [rax + 0x20]; 
0x0000000000060429: mov edi, esi; call qword ptr [rax + 0x38]; 
0x00000000000c3d69: mov edi, esi; call qword ptr [rax + 0x40]; 
0x000000000008080e: mov edi, esi; call qword ptr [rax]; 
0x0000000000086aa3: mov edi, esi; call qword ptr [rbx + 0x40]; 
0x000000000012b54c: mov edi, esi; call qword ptr [rdx + 0x18]; 
0x0000000000120738: mov edi, esi; call rax; 
0x00000000000f5c2e: mov edi, esi; call rbx; 
0x000000000019a804: mov edi, esi; in eax, dx; jmp qword ptr [rdx]; 
0x000000000002e5ed: mov edi, esi; mov ax, 3; syscall; 
0x000000000002e205: mov edi, esi; mov eax, 3; syscall; 
0x0000000000136254: mov edi, esi; mov r9d, dword ptr [rdx]; mov rdx, r12; add r9, r11; call rax; 
0x00000000000f5772: mov edi, esi; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000023fee: mov edi, esi; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x00000000001287ce: mov edi, esi; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000005fa65: mov edi, esi; mov rsi, qword ptr [rbp - 0x10f8]; sar r10, 2; mov rdx, r10; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x00000000000372c4: mov edi, esi; rep stosq qword ptr [rdi], rax; mov rdi, rsp; call 0x36f60; add rsp, 0x88; ret; 
0x000000000005fd83: mov edi, esi; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1148], rcx; call qword ptr [rax + 0x38]; 
0x0000000000061b5f: mov edi, esi; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1158], rcx; call qword ptr [rax + 0x38]; 
0x000000000005ec41: mov edi, esi; sub r12, r15; mov r13, r12; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000011ecdf: mov edi, esp; call 0x120ba0; mov rax, qword ptr [rsp + 8]; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x0000000000037324: mov edi, esp; call 0x36f60; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000372ca: mov edi, esp; call 0x36f60; add rsp, 0x88; ret; 
0x00000000000749d2: mov edi, esp; call 0x70f10; mov rax, qword ptr [r12 + 0xd8]; mov esi, r14d; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000005d5ab: mov edi, esp; call 0x88710; add rsp, 0x1000; pop rbx; ret; 
0x00000000000f234d: mov edi, esp; call 0xc0dd0; add rsp, 0x18; ret; 
0x00000000000749e5: mov edi, esp; call qword ptr [rax + 0x18]; 
0x000000000011ecec: mov edi, esp; call qword ptr [rax + 0x20]; 
0x000000000012c39a: mov edi, esp; call qword ptr [rax + 0x28]; 
0x0000000000121231: mov edi, esp; call qword ptr [rax + 0x30]; 
0x000000000006f5c9: mov edi, esp; call qword ptr [rax + 0x38]; 
0x0000000000079e15: mov edi, esp; call qword ptr [rax + 0x48]; 
0x0000000000187255: mov edi, esp; call qword ptr [rax - 0x75]; 
0x0000000000187255: mov edi, esp; call qword ptr [rax - 0x75]; cld; jmp rax; 
0x00000000000869c9: mov edi, esp; call qword ptr [rbx + 0x38]; 
0x0000000000187119: mov edi, esp; call qword ptr [rdx]; 
0x00000000000833ba: mov edi, esp; call rax; 
0x000000000011ed06: mov edi, esp; call rax; add rsp, 0x30; pop rbx; ret; 
0x000000000018705d: mov edi, esp; call rax; mov bh, ah; jmp qword ptr [rax - 0x76]; 
0x00000000000f5be5: mov edi, esp; call rbx; 
0x0000000000121269: mov edi, esp; call rdx; 
0x000000000012cee1: mov edi, esp; call rdx; add rsp, 0x38; ret; 
0x0000000000187059: mov edi, esp; inc dword ptr [rax - 0x75]; cld; call rax; 
0x0000000000187059: mov edi, esp; inc dword ptr [rax - 0x75]; cld; call rax; mov bh, ah; jmp qword ptr [rax - 0x76]; 
0x0000000000187099: mov edi, esp; jmp qword ptr [rsi]; 
0x0000000000187259: mov edi, esp; jmp rax; 
0x000000000007b603: mov edi, esp; lea r13, qword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x00000000000bdfc3: mov edi, esp; mov qword ptr [rsp + 0x10], rsi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c20ed: mov edi, esp; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x301f5d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c207d: mov edi, esp; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x301fcd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f18e9: mov edi, esp; mov rax, qword ptr [rip + 0x2d2766]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f1879: mov edi, esp; mov rax, qword ptr [rip + 0x2d27d6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1e20: mov edi, esp; mov rax, qword ptr [rip + 0x30222f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1dc0: mov edi, esp; mov rax, qword ptr [rip + 0x30228f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000641a0: mov edi, esp; mov rdx, rbx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000004efb0: mov edi, esp; mov rdx, rbx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x000000000018709d: mov edi, esp; push qword ptr [rsi + 0x46fffc8a]; mov bh, ah; call rsi; 
0x000000000006f7d8: mov edi, esp; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c078: mov edi, esp; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c478: mov edi, esp; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab60: mov edi, esp; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000007adc8: mov edi, esp; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x00000000000ee0a2: mov edi, r13d; call 0xebfe0; movsxd rdi, r13d; mov eax, 3; syscall; 
0x00000000001206d5: mov edi, r15d; call 0xebe00; mov rdx, qword ptr [rbx + 0x38]; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x00000000000c09cf: mov edi, r8d; call 0x108100; add rsp, 0x10; mov eax, ebx; pop rbx; ret; 
0x00000000000f059b: mov edi, r8d; call 0x108100; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x0000000000038014: mov edi, r8d; call 0x36eb0; add rsp, 0xa8; ret; 
0x0000000000036fba: mov edi, r8d; mov dword ptr [rsp + 8], eax; call 0x108100; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f1278: mov edi, r8d; mov qword ptr [rsp + 8], rax; call 0x108100; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000fbad4: mov edi, r9d; call 0x108100; add rsp, 0x20; mov eax, ebx; pop rbx; ret; 
0x00000000000c0b58: mov edi, r9d; mov dword ptr [rsp + 0xc], eax; call 0x108100; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x28; ret; 
0x0000000000036063: mov edx, 0; add byte ptr [rax], al; adc byte ptr [rax + 0x48d00148], al; shr eax, 0x3f; ret; 
0x0000000000086d86: mov edx, 0; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000000f2f60: mov edx, 0x100; mov rdi, -0x64; mov eax, 0x118; syscall; 
0x00000000001147da: mov edx, 0x104; cmove eax, edx; ret; 
0x00000000001147bc: mov edx, 0x107; cmove eax, edx; ret; 
0x000000000006f5c0: mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000078856: mov edx, 0x140; pop rbx; ret; 
0x00000000000eaf20: mov edx, 0x193; call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0x3c; syscall; 
0x00000000000b1400: mov edx, 0x1f; call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x000000000018d665: mov edx, 0x26440002; cli; jmp rsp; 
0x000000000011ad45: mov edx, 0x3dffff; add byte ptr [rax], al; cmp byte ptr [rax + 0xffffff], 0xf; shr r9b, 1; ret 0xfffe; 
0x00000000000fc0c7: mov edx, 0x40; mov rsi, r15; mov rdi, r9; mov eax, 0x14; syscall; 
0x000000000008a702: mov edx, 0x48000001; bsr eax, eax; add rax, rdi; ret; 
0x000000000011ece2: mov edx, 0x4800001e; mov eax, dword ptr [rsp + 8]; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x0000000000126045: mov edx, 0x49fffffe; mov eax, dword ptr [rsp + 8]; lea rsi, qword ptr [rbp + 0x18]; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000014b077: mov edx, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000d206f: mov edx, 0x75cf3840; ret; 
0x00000000000a30c5: mov edx, 0x75d13948; in eax, 0x44; sub eax, eax; nop; ret; 
0x00000000000c243c: mov edx, 0x7fb8002f; add byte ptr [rax], al; add byte ptr [rbx + rax*4 + 0x3a], ah; mov rdx, -1; cmovne rax, rdx; ret; 
0x000000000012682c: mov edx, 0x83001f0f; add dh, byte ptr ds:[rbx + rcx - 0x48]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000118ca2: mov edx, 0x83fffffe; ret 0x8303; 
0x00000000001305c2: mov edx, 0x8500293c; sal byte ptr [rsi + rax + 0x31], 0xc0; ret; 
0x00000000000671e2: mov edx, 0x890000d2; ret; 
0x0000000000039ea4: mov edx, 0xa; xor esi, esi; call 0x3d3e0; add rsp, 8; ret; 
0x00000000001865c1: mov edx, 0xbbf1fffd; std; push rcx; mov ebx, 0xbbf1fffd; std; call qword ptr [rax - 0x45]; 
0x0000000000186531: mov edx, 0xbbf1fffd; std; push rcx; mov ebx, 0xbbf1fffd; std; call qword ptr [rcx]; 
0x0000000000186581: mov edx, 0xbbf1fffd; std; push rcx; mov ebx, 0xbbf1fffd; std; jmp qword ptr [rdi - 0x45]; 
0x00000000000833aa: mov edx, 0xc97; call 0x7d680; mov rsi, qword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x00000000000f241a: mov edx, 0xd8f7002c; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018dbb9: mov edx, 0xdd84fffa; add al, byte ptr [rax]; and al, 0xbb; cli; jmp rsp; 
0x0000000000160c49: mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000b13d6: mov edx, 0xff600000; test rax, rax; cmovne rdx, rax; add rsp, 0x28; mov rax, rdx; ret; 
0x00000000000b1326: mov edx, 0xff600400; test rax, rax; cmovne rdx, rax; add rsp, 0x28; mov rax, rdx; ret; 
0x000000000008ca70: mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret; 
0x000000000008ca80: mov edx, 0xffffffff; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x00000000000c2449: mov edx, 0xffffffff; cmovne rax, rdx; ret; 
0x0000000000100170: mov edx, 0xffffffff; mov eax, edx; ret; 
0x00000000000e4a77: mov edx, 0xffffffff; mov esi, eax; mov eax, 0x75; mov rdi, rdx; syscall; 
0x00000000000e4aa4: mov edx, 0xffffffff; mov esi, eax; mov eax, 0x77; mov rdi, rdx; syscall; 
0x00000000000f1920: mov edx, 0xffffffff; mov esi, edi; mov eax, 0x75; mov rdi, rdx; syscall; 
0x00000000000f19c0: mov edx, 0xffffffff; mov esi, edi; mov eax, 0x77; mov rdi, rdx; syscall; 
0x000000000012e3f8: mov edx, 0xffffffff; mov rsi, rbx; mov rdi, rbp; call rcx; 
0x00000000000cb632: mov edx, 0xffffffff; test eax, eax; cmove rdx, qword ptr [rsp]; add rsp, 0x18; mov rax, rdx; ret; 
0x000000000012d9fe: mov edx, 0xffffffff; xor eax, eax; call rcx; 
0x000000000013630f: mov edx, 1; add rdi, 0x1c; mov al, 0xca; mov esi, 0x81; syscall; 
0x00000000001296b4: mov edx, 1; cmovne eax, edx; sub rsp, -0x80; pop rbx; ret; 
0x000000000010808d: mov edx, 1; mov eax, 0xca; syscall; 
0x00000000000c1095: mov edx, 1; mov edi, dword ptr [rcx + 0x28]; mov eax, ebx; mov esi, 0x81; syscall; 
0x00000000000f0a80: mov edx, 1; mov esi, 0x5409; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000f0a3c: mov edx, 1; mov esi, 0x5409; movsxd rdi, edi; mov eax, 0x10; syscall; 
0x00000000000f5e58: mov edx, 1; mov esi, 1; mov rdi, r12; call rbx; 
0x00000000000f60d6: mov edx, 1; mov esi, 2; mov rdi, r12; call rbx; 
0x00000000000f5d24: mov edx, 2; mov esi, 1; mov rdi, r13; call rbx; 
0x00000000000f5e49: mov edx, 2; mov esi, 2; mov rdi, r13; call rbx; 
0x0000000000079e0f: mov edx, 2; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000079d5e: mov edx, 2; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000f5c9c: mov edx, 3; mov esi, 1; mov rdi, r14; call rbx; 
0x00000000000f5d15: mov edx, 3; mov esi, 2; mov rdi, r14; call rbx; 
0x00000000000f7f4d: mov edx, 3; movsxd rsi, eax; movsxd rdi, r12d; mov eax, edx; syscall; 
0x00000000000f5c6b: mov edx, 4; mov esi, 1; call rbx; 
0x00000000000f5c8d: mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x0000000000047105: mov edx, 8; mov eax, 0xe; syscall; 
0x00000000000fa640: mov edx, 8; mov rsi, rbp; mov rdi, rbx; mov eax, 0x11a; syscall; 
0x0000000000037c2f: mov edx, 8; mov rsi, rbx; mov eax, 0x80; syscall; 
0x0000000000036ed1: mov edx, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000037d8f: mov edx, 8; xor edx, edx; mov rsi, rbx; mov eax, 0x80; syscall; 
0x000000000010726b: mov edx, dword ptr [r12 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; call rax; 
0x00000000001072eb: mov edx, dword ptr [r12 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; call rax; 
0x00000000001070af: mov edx, dword ptr [r13 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x00000000001076e8: mov edx, dword ptr [r13 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; call rax; 
0x0000000000106ee1: mov edx, dword ptr [r14 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x000000000010755f: mov edx, dword ptr [r14 - 0x30]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x0000000000072f35: mov edx, dword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x00000000000f7fe7: mov edx, dword ptr [rax + 0x38]; mov eax, 0x64; test edx, edx; cmovne eax, edx; ret; 
0x00000000001275fc: mov edx, dword ptr [rax + 0x38]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000127eac: mov edx, dword ptr [rax + 0x48]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000301ab: mov edx, dword ptr [rax + 0x58]; mov rax, qword ptr [rip + 0x38dd6b]; add rdx, 0x200; mov qword ptr fs:[rax], rdx; ret; 
0x000000000005dc2e: mov edx, dword ptr [rax + 0x88]; mov qword ptr [rax + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x0000000000123a0f: mov edx, dword ptr [rax + 0x98]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000002fa66: mov edx, dword ptr [rax + 0xc0]; mov rax, qword ptr [rip + 0x38e365]; mov qword ptr [rax], rdx; ret; 
0x0000000000123b04: mov edx, dword ptr [rax + 8]; mov qword ptr [rcx + 8], rax; mov qword ptr [rcx + 0x10], rdx; mov eax, 1; ret; 
0x0000000000129dad: mov edx, dword ptr [rax + 8]; mov rdi, rax; call qword ptr [rdx + 0x20]; 
0x00000000000ed641: mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x00000000000f7151: mov edx, dword ptr [rax - 0xc]; jmp qword ptr [rsi + 0x66]; 
0x0000000000074458: mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x0000000000072f2e: mov edx, dword ptr [rax]; mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000021f3c: mov edx, dword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000001070b0: mov edx, dword ptr [rbp + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x00000000001076e9: mov edx, dword ptr [rbp + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; call rax; 
0x0000000000022f01: mov edx, dword ptr [rbp - 0x60]; mov rdi, r13; mov rsi, qword ptr [rdx + rbx + 0x20]; call rax; 
0x000000000013624d: mov edx, dword ptr [rbp - 0x90]; mov rdi, r14; mov r9d, dword ptr [rdx]; mov rdx, r12; add r9, r11; call rax; 
0x000000000003c816: mov edx, dword ptr [rbx + 0x18]; mov rdi, qword ptr [rbx + 8]; mov qword ptr [rax + 0x60], rdx; call qword ptr [rbx]; 
0x000000000011f570: mov edx, dword ptr [rbx + 0x22c0]; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x00000000001206de: mov edx, dword ptr [rbx + 0x38]; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x0000000000075ca9: mov edx, dword ptr [rbx + 0x40]; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r15; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x0000000000078bce: mov edx, dword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000007504c: mov edx, dword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x0000000000071cf8: mov edx, dword ptr [rbx + 0xf8]; mov qword ptr [rdx], rax; xor eax, eax; pop rbx; ret; 
0x00000000001203ef: mov edx, dword ptr [rbx + 8]; mov dword ptr [rsp + 0x18], eax; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x00000000000fa240: mov edx, dword ptr [rbx]; mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000123b1d: mov edx, dword ptr [rcx + 0x10]; mov qword ptr [r8], rax; mov qword ptr [r8 + 8], rdx; mov eax, 1; ret; 
0x000000000013aa2f: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013915d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000007b027: mov edx, dword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000107a2f: mov edx, dword ptr [rdi + 0x28]; xor eax, eax; test edx, edx; sete al; ret; 
0x000000000011ebfc: mov edx, dword ptr [rdi + 0x5c]; lea rsi, qword ptr [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000000e43f0: mov edx, dword ptr [rdi + 0x78]; mov qword ptr [rsi + 0x70], rdx; mov rax, qword ptr [rdi + 0x80]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x0000000000072f8b: mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x0000000000072e7b: mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000007859e: mov edx, dword ptr [rdi + 0xc0]; mov eax, edx; pop rbx; ret; 
0x0000000000108171: mov edx, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x0000000000037976: mov edx, dword ptr [rdi]; xor eax, eax; test edx, edx; sete al; ret; 
0x0000000000127f74: mov edx, dword ptr [rdx + 8]; mov qword ptr [rdi + 0x20], rax; mov qword ptr [rdi + 0x28], rdx; mov eax, 1; ret; 
0x0000000000127f2c: mov edx, dword ptr [rdx + 8]; mov qword ptr [rdi + 0x30], rax; mov qword ptr [rdi + 0x38], rdx; mov eax, 1; ret; 
0x0000000000128031: mov edx, dword ptr [rdx]; mov rax, qword ptr [rdi + 0x90]; bswap edx; mov dword ptr [rax + 0x10], edx; mov eax, 1; ret; 
0x0000000000127f11: mov edx, dword ptr [rdx]; mov rax, qword ptr [rdi + 0x90]; bswap edx; mov dword ptr [rax + 0xc], edx; mov eax, 1; ret; 
0x0000000000112f39: mov edx, dword ptr [rip + 0x2aaf29]; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000109f97: mov edx, dword ptr [rip + 0x2b3ecb]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000109ef7: mov edx, dword ptr [rip + 0x2b3f6b]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000108825: mov edx, dword ptr [rip + 0x2b563d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbb23: mov edx, dword ptr [rip + 0x2c233f]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fba73: mov edx, dword ptr [rip + 0x2c23ef]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb9d1: mov edx, dword ptr [rip + 0x2c2491]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb407: mov edx, dword ptr [rip + 0x2c2a5b]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb297: mov edx, dword ptr [rip + 0x2c2bcb]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa55a: mov edx, dword ptr [rip + 0x2c3908]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fc804: mov edx, dword ptr [rip + 0x2c51c6]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000f7835: mov edx, dword ptr [rip + 0x2c662d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f3035: mov edx, dword ptr [rip + 0x2cae2d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2f9d: mov edx, dword ptr [rip + 0x2caec5]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2ef2: mov edx, dword ptr [rip + 0x2caf70]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2417: mov edx, dword ptr [rip + 0x2cba4b]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1f11: mov edx, dword ptr [rip + 0x2cbf51]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f19dc: mov edx, dword ptr [rip + 0x2cc486]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x00000000000f193c: mov edx, dword ptr [rip + 0x2cc526]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x00000000000f18bf: mov edx, dword ptr [rip + 0x2cc5a3]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f184f: mov edx, dword ptr [rip + 0x2cc613]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f12d1: mov edx, dword ptr [rip + 0x2ccb91]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1231: mov edx, dword ptr [rip + 0x2ccc31]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0a5a: mov edx, dword ptr [rip + 0x2cd408]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0544: mov edx, dword ptr [rip + 0x2cd91e]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ed371: mov edx, dword ptr [rip + 0x2d0af1]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ed31d: mov edx, dword ptr [rip + 0x2d0b45]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecf68: mov edx, dword ptr [rip + 0x2d0efa]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecea5: mov edx, dword ptr [rip + 0x2d0fbd]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ece4e: mov edx, dword ptr [rip + 0x2d1014]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec85d: mov edx, dword ptr [rip + 0x2d1605]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebb01: mov edx, dword ptr [rip + 0x2d2361]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb56b: mov edx, dword ptr [rip + 0x2d28f7]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb497: mov edx, dword ptr [rip + 0x2d29cb]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb404: mov edx, dword ptr [rip + 0x2d2a5e]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb21d: mov edx, dword ptr [rip + 0x2d2c45]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb1c5: mov edx, dword ptr [rip + 0x2d2c9d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb165: mov edx, dword ptr [rip + 0x2d2cfd]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb105: mov edx, dword ptr [rip + 0x2d2d5d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb0b5: mov edx, dword ptr [rip + 0x2d2dad]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb065: mov edx, dword ptr [rip + 0x2d2dfd]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e3171: mov edx, dword ptr [rip + 0x2dae39]; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x00000000000cb10b: mov edx, dword ptr [rip + 0x2f2e47]; mov dword ptr [rdx], ecx; add rsp, 0x10; pop rbx; ret; 
0x00000000000c2581: mov edx, dword ptr [rip + 0x2fb8e1]; mov eax, 0x20; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000c2439: mov edx, dword ptr [rip + 0x2fba29]; mov eax, 0x7f; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000c20c1: mov edx, dword ptr [rip + 0x2fbda1]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c2051: mov edx, dword ptr [rip + 0x2fbe11]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1dfd: mov edx, dword ptr [rip + 0x2fc065]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1d9d: mov edx, dword ptr [rip + 0x2fc0c5]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c11f2: mov edx, dword ptr [rip + 0x2fcc70]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0b05: mov edx, dword ptr [rip + 0x2fd35d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0a16: mov edx, dword ptr [rip + 0x2fd44c]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c098c: mov edx, dword ptr [rip + 0x2fd4d6]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x00000000000bdf9b: mov edx, dword ptr [rip + 0x2ffec7]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000bcd8e: mov edx, dword ptr [rip + 0x3010d4]; movsxd rdi, ebp; mov al, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000869f1: mov edx, dword ptr [rip + 0x337551]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x0000000000086881: mov edx, dword ptr [rip + 0x3376c1]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x00000000000867b9: mov edx, dword ptr [rip + 0x337789]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x000000000005dbdb: mov edx, dword ptr [rip + 0x360287]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036f80: mov edx, dword ptr [rip + 0x386ee2]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036f47: mov edx, dword ptr [rip + 0x386f1b]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036eeb: mov edx, dword ptr [rip + 0x386f77]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036c5e: mov edx, dword ptr [rip + 0x387204]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000031e07: mov edx, dword ptr [rip + 0x392203]; lea rdi, qword ptr [rip + 0x38deec]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000009dc85: mov edx, dword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x000000000009cff5: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000009d015: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000106ee2: mov edx, dword ptr [rsi + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x000000000012663e: mov edx, dword ptr [rsi + 0x1c8]; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000000d1f07: mov edx, dword ptr [rsi + 0x20]; mov qword ptr [rax + 0x20], rdx; xor eax, eax; ret; 
0x00000000000e4482: mov edx, dword ptr [rsi + 0x70]; mov qword ptr [rdi + 0x78], rdx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x80], rdx; ret; 
0x00000000000e4ddc: mov edx, dword ptr [rsi + 0x70]; mov qword ptr [rdi + 0xf8], rdx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x100], rdx; ret; 
0x00000000000e4de7: mov edx, dword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x100], rdx; ret; 
0x00000000000e448a: mov edx, dword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x80], rdx; ret; 
0x000000000014d0c1: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000014cfe0: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014ce21: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cf70: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014cdb1: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e452: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000009f282: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009ce42: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000000a0cf2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x000000000014cf00: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000014cd41: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e433: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000009f263: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000009ce33: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000000a0cd3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x000000000014ccd1: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e4e4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009f324: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009cea4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000a0d94: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000014cc61: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e504: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009f344: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009ceb4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000a0db4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000014cbf1: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e4a3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009f2e3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009ce83: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000a0d53: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x000000000009e524: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009f364: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009cec4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000a0dd4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000014cb81: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e4c3: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009f303: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009ce93: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000a0d73: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x000000000009f2c4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009e484: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009ce74: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000a0d34: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000107558: mov edx, dword ptr [rsi - 0x10]; mov qword ptr [rbp - 0x70], rdx; mov edx, dword ptr [r14 - 0x30]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x0000000000107560: mov edx, dword ptr [rsi - 0x30]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x000000000014c631: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c5b1: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c531: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c4a1: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c411: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c381: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144601: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000001447e1: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000001449c0: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001443f8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001445d8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001447b8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144998: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001445f4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001447d4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001449b4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144414: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144bc0: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144dc0: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144fc0: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144235: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144b89: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144d89: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f89: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144219: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144ba5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144da5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144fa5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144251: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c6b1: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000009e410: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000009f240: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000009ce10: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000a0cb0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x000000000009e461: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009f291: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009ce51: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a0d01: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000274d9: mov edx, dword ptr [rsi]; mov rsi, r13; call qword ptr [rbx + 8]; 
0x000000000009e3f1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009f211: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009cdf1: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000a0c81: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000fd479: mov edx, dword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000fd4da: mov edx, dword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x00000000000f057e: mov edx, dword ptr [rsp + 0x10]; movsxd rsi, dword ptr [rsp + 0xc]; movsxd rdi, dword ptr [rsp + 8]; mov eax, ebx; syscall; 
0x000000000010726c: mov edx, dword ptr [rsp + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; call rax; 
0x00000000001072ec: mov edx, dword ptr [rsp + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; call rax; 
0x0000000000102184: mov edx, dword ptr [rsp + 0x18]; mov edi, 0x2000004; call rax; 
0x0000000000135809: mov edx, dword ptr [rsp + 0x18]; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000102087: mov edx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x00000000000f1d14: mov edx, dword ptr [rsp + 0x20]; mov eax, 0x10e; mov rsi, qword ptr [rsp + 0x18]; movsxd rdi, dword ptr [rsp + 0x14]; syscall; 
0x000000000004aaab: mov edx, dword ptr [rsp + 0x20]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000005fdfa: mov edx, dword ptr [rsp + 0x20]; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x00000000000bdc11: mov edx, dword ptr [rsp + 0x28]; call rax; 
0x000000000010765c: mov edx, dword ptr [rsp + 0x38]; mov dword ptr [rbp - 0x80], 0; mov qword ptr [rbp - 0x70], rdx; mov rdx, r14; call rax; 
0x0000000000036e87: mov edx, dword ptr [rsp + 0x38]; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000135e63: mov edx, dword ptr [rsp + 0x48]; add rax, qword ptr [rdx + 8]; add rsp, 0x58; ret; 
0x0000000000025fa5: mov edx, dword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002a433: mov edx, dword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000025ad8: mov edx, dword ptr [rsp + 0x58]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x00000000000fa336: mov edx, dword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x000000000002216c: mov edx, dword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x00000000000ed08b: mov edx, dword ptr [rsp]; mov rsi, qword ptr [rsp + 0x10]; mov eax, 0x10f; mov rdi, qword ptr [rsp + 8]; syscall; 
0x000000000004759c: mov edx, eax; call 0x475b0; add rsp, 0xd8; ret; 
0x00000000001221da: mov edx, eax; call qword ptr [rbx + 0x10]; 
0x00000000000dc8f0: mov edx, eax; lea rax, qword ptr [rip + 0x9d8f3]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x0000000000039acc: mov edx, eax; lea rcx, qword ptr [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x39700; leave; ret; 
0x000000000012dd77: mov edx, eax; mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012ded7: mov edx, eax; mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x0000000000048770: mov edx, eax; mov eax, 0xffffffff; test edx, edx; cmovns eax, edx; pop rbx; ret; 
0x00000000000f1f72: mov edx, eax; mov eax, 3; syscall; 
0x0000000000103083: mov edx, eax; mov edi, 0x2000003; call qword ptr [rbx + 0x28]; 
0x00000000000ebade: mov edx, eax; mov esi, 9; mov rdi, r10; mov eax, r9d; syscall; 
0x0000000000050a5b: mov edx, eax; mov qword ptr [rbp - 0xb0], r8; mov rdi, rbx; call rax; 
0x000000000012d097: mov edx, eax; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x000000000012d157: mov edx, eax; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x00000000000fa330: mov edx, eax; mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x00000000000f46fd: mov edx, eax; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x0000000000036bc6: mov edx, eax; mov rax, -1; test edx, edx; cmovns rax, qword ptr [rsp + 0xa0]; add rsp, 0x148; ret; 
0x00000000000792a7: mov edx, eax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x00000000000ebb18: mov edx, eax; mov rax, qword ptr [rip + 0x2d2347]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x0000000000122445: mov edx, eax; mov rsi, r12; call qword ptr [rbp + 0x40]; 
0x0000000000121f4d: mov edx, eax; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x0000000000073191: mov edx, eax; mov rsi, r12; mov rdi, r13; mov eax, r9d; syscall; 
0x00000000000eba7a: mov edx, eax; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000000ebac8: mov edx, eax; neg edx; cmp dword ptr [rsp - 0x68], 2; cmove eax, edx; ret; 
0x000000000011a100: mov edx, eax; nop word ptr [rax + rax]; mov byte ptr [rdx], 0; pop rbx; ret; 
0x00000000000f72bc: mov edx, eax; xor edi, edi; xor eax, eax; call 0x6cef0; add rsp, 0x408; ret; 
0x0000000000049beb: mov edx, ebp; call qword ptr [rax + 0x38]; 
0x0000000000079039: mov edx, ebp; call qword ptr [rax + 0x40]; 
0x00000000000704a5: mov edx, ebp; call qword ptr [rax + 0x58]; 
0x0000000000122614: mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x0000000000107274: mov edx, ebp; call rax; 
0x0000000000187f49: mov edx, ebp; jmp rsp; 
0x0000000000070681: mov edx, ebp; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000001216f9: mov edx, ebp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x00000000001217f5: mov edx, ebp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000000a419a: mov edx, ebp; mov rdi, rbp; call rbx; 
0x00000000000738dd: mov edx, ebp; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000004a194: mov edx, ebp; mov rsi, qword ptr [rbp - 0x598]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006fdff: mov edx, ebp; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x000000000012a58c: mov edx, ebp; mov rsi, r12; mov rdi, rbp; call rax; 
0x00000000000704c8: mov edx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000007a3d1: mov edx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000012269e: mov edx, ebp; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000010c436: mov edx, ebp; pop r12; pop r13; jmp rax; 
0x000000000011620c: mov edx, ebx; call 0x115190; sub rsp, -0x80; pop rbx; ret; 
0x00000000001072f4: mov edx, ebx; call rax; 
0x00000000000ebbf6: mov edx, ebx; mov esi, 9; mov rdi, r9; mov eax, r8d; syscall; 
0x00000000000ebc44: mov edx, ebx; mov r8d, eax; mov esi, 7; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000000cb420: mov edx, ebx; mov rsi, r12; movsxd rdi, r13d; mov eax, 0xcb; syscall; 
0x0000000000085fb6: mov edx, ebx; mov rsi, r13; call rax; 
0x0000000000086172: mov edx, ebx; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000000ebb80: mov edx, ebx; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000000641a3: mov edx, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000004efb3: mov edx, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e7f: mov edx, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x00000000000f04a4: mov edx, ecx; call 0xefe50; cdqe; mov qword ptr [rbx + 0x48], rax; pop rbx; ret; 
0x000000000003d000: mov edx, ecx; mov dword ptr [rdi], ecx; shr edx, 0x10; and edx, 0x3ff; xor eax, edx; ret; 
0x00000000000eb1f1: mov edx, ecx; mov eax, 0x106; syscall; 
0x00000000000fad1a: mov edx, ecx; mov eax, 0x113; syscall; 
0x00000000000fadaa: mov edx, ecx; mov eax, 0x114; syscall; 
0x00000000000f04ca: mov edx, ecx; mov eax, 0x115; syscall; 
0x00000000000fae6a: mov edx, ecx; mov eax, 0x116; syscall; 
0x00000000000cb54a: mov edx, ecx; mov eax, 0x11; syscall; 
0x00000000000faef1: mov edx, ecx; mov eax, 0x11e; syscall; 
0x00000000000cb5aa: mov edx, ecx; mov eax, 0x12; syscall; 
0x00000000000fa801: mov edx, ecx; mov eax, 0x12d; syscall; 
0x00000000000fa761: mov edx, ecx; mov eax, 0x12e; syscall; 
0x00000000000faf81: mov edx, ecx; mov eax, 0x12f; syscall; 
0x00000000000fb041: mov edx, ecx; mov eax, 0x136; syscall; 
0x00000000000fb071: mov edx, ecx; mov eax, 0x137; syscall; 
0x00000000000f1c2a: mov edx, ecx; mov eax, 0x17; syscall; 
0x00000000000fabc1: mov edx, ecx; mov eax, 0x19; syscall; 
0x00000000000ed2d1: mov edx, ecx; mov eax, 0x28; syscall; 
0x00000000000fb4fa: mov edx, ecx; mov eax, 0x2c; syscall; 
0x00000000000fb32a: mov edx, ecx; mov eax, 0x2d; syscall; 
0x00000000000fb5e1: mov edx, ecx; mov eax, 0x35; syscall; 
0x00000000000fb551: mov edx, ecx; mov eax, 0x36; syscall; 
0x00000000000fb211: mov edx, ecx; mov eax, 0x37; syscall; 
0x00000000000c0ab1: mov edx, ecx; mov eax, 0x3d; syscall; 
0x00000000000fbde1: mov edx, ecx; mov eax, 0x42; syscall; 
0x00000000000fbc6a: mov edx, ecx; mov eax, 0x45; syscall; 
0x00000000000fbcca: mov edx, ecx; mov eax, 0x46; syscall; 
0x00000000000fac81: mov edx, ecx; mov eax, 0x9d; syscall; 
0x00000000000fab91: mov edx, ecx; mov eax, 0xa5; syscall; 
0x00000000000faa71: mov edx, ecx; mov eax, 0xaf; syscall; 
0x00000000000facb1: mov edx, ecx; mov eax, 0xb2; syscall; 
0x00000000000face1: mov edx, ecx; mov eax, 0xb3; syscall; 
0x0000000000132d11: mov edx, ecx; mov eax, 0xb5; syscall; 
0x0000000000132d61: mov edx, ecx; mov eax, 0xb6; syscall; 
0x00000000000f8211: mov edx, ecx; mov eax, 0xbc; syscall; 
0x00000000000f81b1: mov edx, ecx; mov eax, 0xbd; syscall; 
0x00000000000f8091: mov edx, ecx; mov eax, 0xbe; syscall; 
0x00000000000f80c1: mov edx, ecx; mov eax, 0xbf; syscall; 
0x00000000000f8121: mov edx, ecx; mov eax, 0xc0; syscall; 
0x00000000000f8001: mov edx, ecx; mov eax, 0xc1; syscall; 
0x00000000000f49c1: mov edx, ecx; mov eax, 0xd8; syscall; 
0x00000000000fbe11: mov edx, ecx; mov eax, 0xdc; syscall; 
0x00000000000fa9ea: mov edx, ecx; mov eax, 0xe8; syscall; 
0x00000000000fa9b1: mov edx, ecx; mov eax, 0xe9; syscall; 
0x00000000000f4871: mov edx, ecx; mov eax, 9; syscall; 
0x00000000000ec844: mov edx, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x104; syscall; 
0x000000000005fd8a: mov edx, ecx; mov qword ptr [rbp - 0x1148], rcx; call qword ptr [rax + 0x38]; 
0x0000000000060d9a: mov edx, ecx; mov qword ptr [rbp - 0x1148], rcx; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000061b66: mov edx, ecx; mov qword ptr [rbp - 0x1158], rcx; call qword ptr [rax + 0x38]; 
0x000000000004a309: mov edx, ecx; mov qword ptr [rbp - 0x538], rcx; mov rsi, qword ptr [rbp - 0x540]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000f46fa: mov edx, ecx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x00000000000ece31: mov edx, ecx; movsxd r8, r8d; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x109; syscall; 
0x00000000000ecef1: mov edx, ecx; movsxd rdi, edi; mov eax, 0x10b; syscall; 
0x00000000000eb195: mov edx, ecx; movsxd rdi, r9d; mov eax, 0x103; syscall; 
0x00000000000eb551: mov edx, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x000000000005dbc1: mov edx, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x108; syscall; 
0x00000000000f1510: mov edx, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x127; syscall; 
0x00000000000f1770: mov edx, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x128; syscall; 
0x000000000010891b: mov edx, ecx; movsxd rsi, esi; mov rdi, rbx; mov eax, 0xe6; syscall; 
0x0000000000108970: mov edx, ecx; syscall; 
0x00000000000857b9: mov edx, edi; call rax; 
0x000000000003c870: mov edx, edi; mov eax, edi; sar edx, 0x1f; xor eax, edx; sub eax, edx; ret; 
0x000000000010aa89: mov edx, edi; mov ebx, esi; xor edi, edi; lea rsi, qword ptr [rsp - 0x18]; mov eax, 0x83; syscall; 
0x000000000003c881: mov edx, edi; mov rax, rdi; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x0000000000110e2a: mov edx, edi; mov rdi, r12; call rax; 
0x0000000000055fbd: mov edx, edi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000012ced5: mov edx, edi; xor eax, eax; mov dword ptr [rsp], 2; mov rdi, rsp; call rdx; 
0x00000000000f0800: mov edx, edx; mov byte ptr [rsp - 0x58], al; mov eax, ebp; syscall; 
0x00000000000f0823: mov edx, edx; mov esi, 0x5401; mov rdi, rbx; mov eax, ebp; mov r13d, dword ptr fs:[r12]; syscall; 
0x00000000000c203a: mov edx, edx; mov esi, esi; mov edi, edi; mov eax, 0x75; syscall; 
0x00000000000c20aa: mov edx, edx; mov esi, esi; mov edi, edi; mov eax, 0x77; syscall; 
0x000000000005fa73: mov edx, edx; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x0000000000062dff: mov edx, edx; mov qword ptr [rbp - 0x10e0], r10; mov rsi, r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000060415: mov edx, edx; mov qword ptr [rbp - 0x10f8], r10; mov rsi, r8; mov qword ptr [rbp - 0x10e8], r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000004b8f3: mov edx, edx; mov qword ptr [rbp - 0x508], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004b7e2: mov edx, edx; mov qword ptr [rbp - 0x538], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000ed288: mov edx, edx; mov r8d, edi; mov rdx, rsi; mov eax, 0x11d; xor esi, esi; syscall; 
0x00000000000cb375: mov edx, edx; movsxd rdi, edi; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x00000000000eb480: mov edx, edx; movsxd rdi, edi; mov eax, 0x102; syscall; 
0x00000000000ec846: mov edx, edx; movsxd rdi, edi; mov eax, 0x104; syscall; 
0x00000000000eb3ed: mov edx, edx; movsxd rdi, edi; mov eax, 0x10c; syscall; 
0x00000000000fba5d: mov edx, edx; movsxd rdi, edi; mov eax, 0x12b; syscall; 
0x00000000000fbb0d: mov edx, edx; movsxd rdi, edi; mov eax, 0x133; syscall; 
0x000000000010766c: mov edx, esi; call rax; 
0x00000000001a2841: mov edx, esi; jmp qword ptr [rax]; 
0x00000000001a2859: mov edx, esi; jmp qword ptr [rcx]; 
0x00000000000ed28e: mov edx, esi; mov eax, 0x11d; xor esi, esi; syscall; 
0x0000000000076562: mov edx, esi; mov rdi, rbx; call rax; 
0x00000000000cc5f5: mov edx, esi; mov rsi, qword ptr [rbp - 0xb0]; mov rdi, qword ptr [rbp - 0xa8]; call rbx; 
0x0000000000079694: mov edx, esi; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x00000000001227a1: mov edx, esi; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000000cb4ec: mov edx, esi; movsxd rdi, eax; mov rsi, r15; mov eax, 0xcc; syscall; 
0x00000000000c113e: mov edx, esi; neg edx; cmove edx, ecx; mov dword ptr fs:[0x2d4], edx; mov eax, 0x3a; syscall; 
0x0000000000065a9b: mov edx, esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x000000000005ed27: mov edx, esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x00000000000ed355: mov edx, esi; xor r10d, r10d; xor esi, esi; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x000000000013625a: mov edx, esp; add r9, r11; call rax; 
0x0000000000021fd1: mov edx, esp; add rdx, 0x47; shl rdx, 4; lea rdi, qword ptr [r14 + rdx]; call rax; 
0x0000000000049d0b: mov edx, esp; call qword ptr [rax + 0x38]; 
0x0000000000106ee9: mov edx, esp; call rax; 
0x0000000000046320: mov edx, esp; lea rdi, qword ptr [rsp + 0x10]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x0000000000135239: mov edx, esp; lea rsi, qword ptr [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x0000000000085513: mov edx, esp; mov rdi, r15; call rax; 
0x000000000004c1fe: mov edx, esp; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006ed92: mov edx, esp; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006e6e9: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078da1: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000011c458: mov edx, esp; movsxd rdi, dword ptr [rsp + 0x10]; movsxd rsi, ebp; mov eax, 0x81; syscall; 
0x0000000000037f05: mov edx, esp; movsxd rsi, ebp; movsxd rdi, r12d; mov eax, 0x81; syscall; 
0x00000000000461df: mov edx, esp; xor esi, esi; mov edi, 0x100011; mov eax, 0x38; syscall; 
0x000000000011620b: mov edx, r11d; call 0x115190; sub rsp, -0x80; pop rbx; ret; 
0x0000000000021fd0: mov edx, r12d; add rdx, 0x47; shl rdx, 4; lea rdi, qword ptr [r14 + rdx]; call rax; 
0x000000000010c435: mov edx, r13d; pop r12; pop r13; jmp rax; 
0x00000000000748e9: mov es, edx; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000019c38c: mov es, word ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0xe], cl; adc byte ptr [rbx + 0xa440202], al; ret; 
0x00000000000cb1e1: mov es, word ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000010beec: mov es, word ptr [rbp - 0x7b]; rol byte ptr [rbp - 0x77], 0x44; mov dword ptr [rsi*2 - 0x776b717], eax; add rsp, 8; ret; 
0x00000000001afe32: mov es, word ptr [rbx]; pop qword ptr [rdx]; add dl, byte ptr [rsi + 0x41380e0a]; ret; 
0x00000000001aa2ae: mov es, word ptr [rbx]; pop qword ptr [rdx]; add ecx, dword ptr [rbx + 1]; ret; 
0x00000000000d8048: mov es, word ptr [rdi]; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x000000000009f05e: mov es, word ptr [rsi]; add byte ptr [rax], al; ret; 
0x00000000000ebab0: mov esi, 0x10; mov rdi, r10; mov eax, r9d; syscall; 
0x00000000000ebbc0: mov esi, 0x10; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000019a09d: mov esi, 0x20000000; out dx, al; jmp qword ptr [rcx + 1]; 
0x0000000000120ee4: mov esi, 0x20; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000f1ef3: mov esi, 0x28121969; mov rdi, -0x11e2153; mov eax, 0xa9; syscall; 
0x000000000004e50a: mov esi, 0x31e9ffff; ret 0xffff; 
0x0000000000048762: mov esi, 0x3780; add byte ptr [rax], al; add al, ch; add dword ptr [rbp - 0x76b7fffb], esi; ret 0xffb8; 
0x0000000000085d73: mov esi, 0x3948feda; ret 0x3574; 
0x00000000000dbce1: mov esi, 0x39c77f04; ret 0xc189; 
0x00000000000dbcc9: mov esi, 0x39df7f04; ret 0xc189; 
0x000000000013580d: mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000187550: mov esi, 0x40fffcab; mov dl, 0xfc; call rax; 
0x000000000003de3f: mov esi, 0x448d4813; lodsd eax, dword ptr [rsi]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a341e: mov esi, 0x48000000; lea eax, dword ptr [rdi - 0x10]; ret; 
0x00000000000fb0de: mov esi, 0x480000cf; mov dword ptr [rsp], eax; mov eax, 0x2b; syscall; 
0x000000000002579b: mov esi, 0x4a890948; movsx r9, byte ptr [rax + 0xa]; movsx eax, byte ptr [rax + 0xb]; mov dword ptr [rdx + 0x50], ecx; mov dword ptr [rdx + 0x54], eax; ret; 
0x00000000000257a6: mov esi, 0x4a890b40; push rax; mov dword ptr [rdx + 0x54], eax; ret; 
0x00000000000f0825: mov esi, 0x5401; mov rdi, rbx; mov eax, ebp; mov r13d, dword ptr fs:[r12]; syscall; 
0x00000000000f093d: mov esi, 0x5401; movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000000f0a85: mov esi, 0x5409; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000f0a41: mov esi, 0x5409; movsxd rdi, edi; mov eax, 0x10; syscall; 
0x00000000000f0a1f: mov esi, 0x5410; call 0xf11e0; add rsp, 0x18; ret; 
0x00000000000488de: mov esi, 0x5b0005b5; ret; 
0x0000000000175c1a: mov esi, 0x5fd2fe07; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000001871cc: mov esi, 0x64fffc85; test esp, edi; call rsp; 
0x0000000000096eae: mov esi, 0x66000000; pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret; 
0x000000000003c0be: mov esi, 0x66fffff6; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000041dd6: mov esi, 0x6ce90168; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x00000000000f31a9: mov esi, 0x75d285d1; in eax, 0x49; mov ecx, esi; mov byte ptr [r9 - 1], 0; ret; 
0x000000000004f1f3: mov esi, 0x77cf390e; fild word ptr [rcx + rcx*4 - 0x40]; ret; 
0x0000000000108148: mov esi, 0x80; syscall; 
0x0000000000108088: mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000000c109f: mov esi, 0x81; syscall; 
0x0000000000110ce7: mov esi, 0x8348014f; cli; add al, 0xf; xchg eax, esi; ret; 
0x0000000000040797: mov esi, 0x8349016b; ret; 
0x0000000000132034: mov esi, 0x83640028; cmp byte ptr [rbx + 0xf], dh; test byte ptr [rip + 0x48ffffff], ch; movsxd rdi, ebx; mov eax, 3; syscall; 
0x00000000000bca47: mov esi, 0x841f0f; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x0000000000096a55: mov esi, 0x84450704; sal byte ptr [rbp - 0x1d], 0xf3; ret; 
0x00000000000fb9b2: mov esi, 0x85002c86; sal byte ptr [rbp + 0x27], 0x4c; movsxd rdx, ecx; movsxd rdi, edi; mov eax, 0x120; syscall; 
0x00000000000f12b2: mov esi, 0x85002d2d; sal byte ptr [rbp + 0x27], 0x48; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x14; syscall; 
0x00000000001aa01d: mov esi, 0x85400001; cmc; call qword ptr [rsi + 6]; 
0x000000000008557c: mov esi, 0x8948feda; and byte ptr [r8 + 0x31], r9b; ret 0x93be; 
0x00000000000850f5: mov esi, 0x8948feda; and byte ptr [rax + 0x31], cl; ret 0x93be; 
0x0000000000047262: mov esi, 0x89490012; ret 0x18b9; 
0x00000000000257a2: mov esi, 0xbe0f0a48; or ecx, dword ptr [rcx + 0x4289504a]; push rsp; ret; 
0x00000000001728fe: mov esi, 0xc2c1c0bf; ret; 
0x0000000000101ec2: mov esi, 0xc48348c5; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001980cf: mov esi, 0xd1cffed; int1; stosd dword ptr [rdi], eax; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000c1f84: mov esi, 0xd8f7002f; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c2054: mov esi, 0xd8f7002f; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001294a3: mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x0000000000044736: mov esi, 0xdce90168; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000012e179: mov esi, 0xe6894806; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000160949: mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000faba6: mov esi, 0xf7002c32; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000f80a6: mov esi, 0xf7002c5d; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000173a86: mov esi, 0xfa1fb992; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x0000000000074f9f: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000000750b7: mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x0000000000074dbf: mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000079596: mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x0000000000074677: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000000f5c70: mov esi, 1; call rbx; 
0x00000000000f5e5d: mov esi, 1; mov rdi, r12; call rbx; 
0x00000000000f5d29: mov esi, 1; mov rdi, r13; call rbx; 
0x00000000000f5ca1: mov esi, 1; mov rdi, r14; call rbx; 
0x000000000011fcdd: mov esi, 1; mov rdi, r15; call qword ptr [rax]; 
0x00000000000f60e7: mov esi, 1; mov rdi, rbp; call rbx; 
0x000000000006cdef: mov esi, 1; mov rdi, rbx; call rax; 
0x000000000011fed7: mov esi, 2; mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x48], 0; mov rdi, r13; call qword ptr [rax]; 
0x00000000000f60db: mov esi, 2; mov rdi, r12; call rbx; 
0x00000000000f5e4e: mov esi, 2; mov rdi, r13; call rbx; 
0x00000000000f5d1a: mov esi, 2; mov rdi, r14; call rbx; 
0x00000000000f5c92: mov esi, 2; mov rdi, r15; call rbx; 
0x00000000000f663c: mov esi, 3; mov rdi, r12; call rbx; 
0x00000000000f6693: mov esi, 3; mov rdi, r13; call rbx; 
0x00000000000f6713: mov esi, 3; mov rdi, r14; call rbx; 
0x000000000012a9e4: mov esi, 3; mov rdi, r15; call qword ptr [rax]; 
0x00000000000f6813: mov esi, 3; mov rdi, r15; call rbx; 
0x0000000000129b8a: mov esi, 4; mov qword ptr [rsp + 8], rdi; mov rdi, rbx; call qword ptr [rax]; 
0x000000000011ffee: mov esi, 4; mov rdi, rbp; call qword ptr [rax]; 
0x0000000000129425: mov esi, 6; call qword ptr [rax + 0x28]; 
0x00000000001293ef: mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x00000000000ebc49: mov esi, 7; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000036f30: mov esi, 8; mov eax, 0x7f; syscall; 
0x0000000000036f6a: mov esi, 8; mov eax, 0x82; syscall; 
0x0000000000036f9e: mov esi, 8; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x82; syscall; 
0x0000000000125f58: mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000120fa5: mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000464d3: mov esi, 9; mov eax, 0x3e; movsxd rdi, ebx; syscall; 
0x00000000000ebae0: mov esi, 9; mov rdi, r10; mov eax, r9d; syscall; 
0x00000000000ebbf8: mov esi, 9; mov rdi, r9; mov eax, r8d; syscall; 
0x00000000001281cc: mov esi, dword ptr [r14 + 0x88]; mov rdi, r13; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x00000000000f576b: mov esi, dword ptr [rax]; mov rdi, qword ptr [rbp - 0x40]; mov r15d, r14d; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000004989e: mov esi, dword ptr [rax]; mov rdi, rbx; call 0x97b10; add rsp, 0x440; pop rbx; ret; 
0x000000000012029f: mov esi, dword ptr [rbp + 0x20]; mov r13d, eax; mov rdi, rbx; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x000000000005fa68: mov esi, dword ptr [rbp - 0x10f8]; sar r10, 2; mov rdx, r10; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x00000000001281e9: mov esi, dword ptr [rbp - 0x180]; mov rdi, r13; add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x000000000012821c: mov esi, dword ptr [rbp - 0x188]; mov rdi, r13; mov rcx, qword ptr [rbp - 0x168]; call rcx; 
0x000000000004a313: mov esi, dword ptr [rbp - 0x540]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004a197: mov esi, dword ptr [rbp - 0x598]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000cc5f8: mov esi, dword ptr [rbp - 0xb0]; mov rdi, qword ptr [rbp - 0xa8]; call rbx; 
0x00000000000cce02: mov esi, dword ptr [rbp - 0xf8]; mov rax, qword ptr [rax + 8]; test rax, rax; cmove rax, qword ptr [rbp - 0xa8]; mov rdi, rax; call rbx; 
0x00000000001201fd: mov esi, dword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x00000000001216f5: mov esi, dword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x00000000001217f1: mov esi, dword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000000f5442: mov esi, dword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000003c175: mov esi, dword ptr [rcx + 0x10]; mov edi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001276f9: mov esi, dword ptr [rcx + 0x1c]; mov rdi, qword ptr [rcx + 0x24]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x00000000001276e1: mov esi, dword ptr [rcx + 8]; mov rdi, qword ptr [rcx + 0x10]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000036b1f: mov esi, dword ptr [rdi + 0x20]; mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x0000000000127f89: mov esi, dword ptr [rdi + 0x20]; mov rdi, qword ptr [rdi + 0x28]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000127f41: mov esi, dword ptr [rdi + 0x30]; mov rdi, qword ptr [rdi + 0x38]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000127f59: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi + 0x10]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000022f08: mov esi, dword ptr [rdx + rbx + 0x20]; call rax; 
0x0000000000029182: mov esi, dword ptr [rdx]; adc eax, 0x3d8d4800; ret; 
0x00000000000bcd9a: mov esi, dword ptr [rdx]; syscall; 
0x0000000000065aab: mov esi, dword ptr [rip + 0x3584af]; call rax; 
0x00000000000641b3: mov esi, dword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed37: mov esi, dword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fcd: mov esi, dword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efc3: mov esi, dword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e8f: mov esi, dword ptr [rip + 0x3740cb]; call rax; 
0x00000000000474ea: mov esi, dword ptr [rsi + 0x70]; xor eax, eax; ret; 
0x00000000001281cd: mov esi, dword ptr [rsi + 0x88]; mov rdi, r13; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x00000000000ed08f: mov esi, dword ptr [rsp + 0x10]; mov eax, 0x10f; mov rdi, qword ptr [rsp + 8]; syscall; 
0x0000000000028731: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x68]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x58]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000028130: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x68]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x78]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000123d5b: mov esi, dword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000eb622: mov esi, dword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; syscall; 
0x00000000000fbb5f: mov esi, dword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ebx; movsxd r10, ecx; syscall; 
0x00000000000f1260: mov esi, dword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x13; syscall; 
0x00000000000f1300: mov esi, dword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x14; syscall; 
0x00000000000a42ee: mov esi, dword ptr [rsp + 0x18]; call rbx; 
0x00000000000c0b3e: mov esi, dword ptr [rsp + 0x18]; mov eax, 0xf7; mov edi, dword ptr [rsp + 0xc]; movsxd r10, ecx; syscall; 
0x000000000002792e: mov esi, dword ptr [rsp + 0x18]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002761d: mov esi, dword ptr [rsp + 0x18]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a54d: mov esi, dword ptr [rsp + 0x18]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000011f46d: mov esi, dword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000004aaa6: mov esi, dword ptr [rsp + 0x18]; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000005fdf5: mov esi, dword ptr [rsp + 0x18]; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x00000000000f1d1e: mov esi, dword ptr [rsp + 0x18]; movsxd rdi, dword ptr [rsp + 0x14]; syscall; 
0x000000000008278b: mov esi, dword ptr [rsp + 0x18]; pop rdx; pop rbx; pop rbp; jmp rax; 
0x00000000000833b5: mov esi, dword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x0000000000123d86: mov esi, dword ptr [rsp + 0x28]; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x0000000000120993: mov esi, dword ptr [rsp + 0x2a10]; mov rdi, rbx; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x0000000000123f7d: mov esi, dword ptr [rsp + 0x40]; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000025add: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000027f27: mov esi, dword ptr [rsp + 0x50]; call rax; 
0x0000000000028514: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002780d: mov esi, dword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000022167: mov esi, dword ptr [rsp + 4]; mov rdx, qword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x000000000011f577: mov esi, dword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000010208c: mov esi, dword ptr [rsp + 8]; call rax; 
0x0000000000127857: mov esi, dword ptr [rsp + 8]; lea r14d, dword ptr [rax - 1]; mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x00000000000fbab9: mov esi, dword ptr [rsp + 8]; mov eax, ebx; movsxd rdi, dword ptr [rsp + 4]; movsxd r10, ecx; syscall; 
0x0000000000021f33: mov esi, dword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000fb2db: mov esi, dword ptr [rsp + 8]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; movsxd r10, ecx; syscall; 
0x00000000000fa5a2: mov esi, dword ptr [rsp + 8]; movsxd rdi, dword ptr [rsp + 4]; movsxd r10, ecx; mov ecx, 0x119; mov eax, ecx; syscall; 
0x00000000000c09b8: mov esi, dword ptr [rsp + 8]; or rdi, 0xffffffffffffffff; mov eax, ecx; syscall; 
0x0000000000082ddb: mov esi, dword ptr [rsp]; jmp rax; 
0x00000000000c0a4d: mov esi, dword ptr [rsp]; mov eax, ecx; movsxd rdi, dword ptr [rsp + 8]; syscall; 
0x0000000000110e1e: mov esi, dword ptr [rsp]; mov r8, rbp; mov ecx, 0x400; mov rdx, r15; mov rdi, r12; call rax; 
0x00000000000bcd99: mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000120f9a: mov esi, eax; call 0x91670; mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000e4a7d: mov esi, eax; mov eax, 0x75; mov rdi, rdx; syscall; 
0x00000000000e4aaa: mov esi, eax; mov eax, 0x77; mov rdi, rdx; syscall; 
0x0000000000036db7: mov esi, eax; mov eax, ecx; syscall; 
0x000000000006041f: mov esi, eax; mov qword ptr [rbp - 0x10e8], r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000008680c: mov esi, eax; mov qword ptr [rbx], rax; mov qword ptr [rbx + 0x48], r9; mov rdi, r9; call rcx; 
0x0000000000062e09: mov esi, eax; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000075052: mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x00000000000decd0: mov esi, eax; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x0000000000036c25: mov esi, eax; movsxd rdx, edi; movsxd rsi, esi; movsxd rdi, ecx; mov eax, 0xea; syscall; 
0x00000000000f24a1: mov esi, eax; sub al, 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011f3cd: mov esi, ebp; add rdi, 0x18; xor eax, eax; pop rbp; jmp rcx; 
0x00000000001214b0: mov esi, ebp; add rdi, 0x23b0; xor eax, eax; pop rbp; jmp rcx; 
0x0000000000086a0d: mov esi, ebp; call qword ptr [rbx + 0x40]; 
0x00000000000274dc: mov esi, ebp; call qword ptr [rbx + 8]; 
0x0000000000085fb9: mov esi, ebp; call rax; 
0x00000000000a3baf: mov esi, ebp; lea rcx, qword ptr [rax + 4]; call rbx; 
0x000000000012b522: mov esi, ebp; mov dword ptr [rsp + 0xc0], eax; mov rax, qword ptr [r15 + 8]; mov rdi, r15; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000008ac77: mov esi, ebp; mov edi, dword ptr [rip + 0x336071]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012b43f: mov esi, ebp; mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x0000000000074489: mov esi, ebp; mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000011f484: mov esi, ebp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000a3a63: mov esi, ebp; mov rdi, qword ptr [r12]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x00000000000bdc00: mov esi, ebp; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp], rdx; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x000000000012122e: mov esi, ebp; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000006f5c6: mov esi, ebp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000012601e: mov esi, ebp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000086175: mov esi, ebp; mov rdi, r12; call rax; 
0x0000000000060da4: mov esi, ebp; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000005fd80: mov esi, ebp; mov rdi, r14; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1148], rcx; call qword ptr [rax + 0x38]; 
0x0000000000061b5c: mov esi, ebp; mov rdi, r14; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1158], rcx; call qword ptr [rax + 0x38]; 
0x00000000000fc242: mov esi, ebp; mov rdi, r9; mov eax, ebx; syscall; 
0x000000000012d9f9: mov esi, ebp; mov rdi, rbp; mov edx, 0xffffffff; xor eax, eax; call rcx; 
0x000000000004b7ec: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078da4: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000070325: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000008632d: mov esi, ebp; mov rdi, rbx; call rax; 
0x00000000000fa646: mov esi, ebp; mov rdi, rbx; mov eax, 0x11a; syscall; 
0x0000000000103080: mov esi, ebp; mov rdx, rax; mov edi, 0x2000003; call qword ptr [rbx + 0x28]; 
0x00000000000f1576: mov esi, ebp; movsxd rdi, ebx; mov eax, 0x127; syscall; 
0x00000000000f17d6: mov esi, ebp; movsxd rdi, ebx; mov eax, 0x128; syscall; 
0x0000000000134ffe: mov esi, ebp; pop rbp; jmp rax; 
0x00000000001214f5: mov esi, ebp; pop rbx; pop rbp; add rdi, 0x23b0; xor eax, eax; jmp rcx; 
0x0000000000148b03: mov esi, ebx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000f5c86: mov esi, ebx; call 0xf4e10; mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x00000000000f5c61: mov esi, ebx; call 0xf4e10; mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x00000000000f4edf: mov esi, ebx; call 0xf4e90; mov rdi, qword ptr [r14]; call rbx; 
0x00000000000f4f20: mov esi, ebx; call 0xf4e90; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000037c35: mov esi, ebx; mov eax, 0x80; syscall; 
0x0000000000086088: mov esi, ebx; mov rdi, r13; call rdx; 
0x000000000012b30d: mov esi, ebx; mov rdi, r15; call qword ptr [rax]; 
0x00000000000b0751: mov esi, ebx; mov rdi, rax; call 0xb04e0; add rsp, 0x40; pop rbx; ret; 
0x000000000012e3fe: mov esi, ebx; mov rdi, rbp; call rcx; 
0x000000000003c198: mov esi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006f75c: mov esi, ecx; mov eax, r8d; syscall; 
0x00000000001337df: mov esi, ecx; mov rdi, r8; call qword ptr [rax + 8]; 
0x000000000006ed95: mov esi, ecx; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000001b4081: mov esi, edi; call qword ptr [rdx + 1]; 
0x000000000018c069: mov esi, edi; call rsp; 
0x00000000000f1926: mov esi, edi; mov eax, 0x75; mov rdi, rdx; syscall; 
0x00000000000f19c6: mov esi, edi; mov eax, 0x77; mov rdi, rdx; syscall; 
0x00000000000cb4f2: mov esi, edi; mov eax, 0xcc; syscall; 
0x00000000000c0906: mov esi, edi; mov eax, ecx; syscall; 
0x00000000000f2f5d: mov esi, edi; mov r10d, 0x100; mov rdi, -0x64; mov eax, 0x118; syscall; 
0x0000000000135c58: mov esi, edi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x000000000012b549: mov esi, edi; mov rdi, r14; call qword ptr [rdx + 0x18]; 
0x00000000000fc0cd: mov esi, edi; mov rdi, r9; mov eax, 0x14; syscall; 
0x0000000000075cb4: mov esi, edi; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x00000000000738da: mov esi, edi; mov rdx, rbp; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x00000000000b9f5c: mov esi, edi; xor edi, edi; mov rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001245da: mov esi, edx; add rdi, 0x10; jmp rcx; 
0x000000000007dea2: mov esi, edx; call qword ptr [rax]; 
0x00000000001063f8: mov esi, edx; call rax; 
0x00000000001a2999: mov esi, edx; jmp qword ptr [rax]; 
0x00000000001245fa: mov esi, edx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x0000000000127eca: mov esi, edx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x000000000012761a: mov esi, edx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x0000000000123a3a: mov esi, edx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x00000000000eb03c: mov esi, edx; mov eax, 4; syscall; 
0x00000000000eb08b: mov esi, edx; mov eax, 5; syscall; 
0x00000000000eb0dc: mov esi, edx; mov eax, 6; syscall; 
0x0000000000001beb: mov esi, edx; mov ebp, dword ptr [rsi + rbx*8 + 0x6d]; ret 0x1bb7; 
0x0000000000133b24: mov esi, edx; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x0000000000133bc7: mov esi, edx; mov rdi, r9; call qword ptr [rax + 0x18]; 
0x000000000007068b: mov esi, edx; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000000f46f7: mov esi, edx; mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x000000000011f5ad: mov esi, esi; call qword ptr [rax + 0x10]; 
0x00000000001af579: mov esi, esi; call qword ptr [rbx]; 
0x00000000001af741: mov esi, esi; call qword ptr [rdi + 5]; 
0x0000000000085095: mov esi, esi; call rax; 
0x000000000018b401: mov esi, esi; dec esp; fiadd word ptr [rcx]; add ah, dl; mov esi, esi; jmp rsp; 
0x00000000001af539: mov esi, esi; jmp qword ptr [rdi]; 
0x000000000017a2ed: mov esi, esi; jmp rsp; 
0x000000000012e259: mov esi, esi; mov dword ptr [rdi + 0x28], eax; mov rax, qword ptr [rdi + 0x18]; add rsi, rax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x00000000000f183a: mov esi, esi; mov edi, edi; mov eax, 0x71; syscall; 
0x00000000000f18aa: mov esi, esi; mov edi, edi; mov eax, 0x72; syscall; 
0x00000000000c203c: mov esi, esi; mov edi, edi; mov eax, 0x75; syscall; 
0x00000000000c20ac: mov esi, esi; mov edi, edi; mov eax, 0x77; syscall; 
0x00000000000c0af0: mov esi, esi; mov edi, edi; mov eax, 0xf7; syscall; 
0x000000000011f5d5: mov esi, esi; mov r13d, 7; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000000749e2: mov esi, esi; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x00000000001202ed: mov esi, esi; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x00000000000792b1: mov esi, esi; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000049d02: mov esi, esi; mov rdi, rbx; sub r12, r14; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000127f04: mov esi, esi; movsxd rcx, dword ptr [rax + rsi*4]; add rax, rcx; jmp rax; 
0x00000000000f0fe5: mov esi, esi; movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000000c2869: mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000001276a4: mov esi, esi; movsxd rsi, dword ptr [rax + rsi*4]; add rax, rsi; jmp rax; 
0x00000000000dbc5f: mov esi, esi; ret 0x7408; 
0x000000000006fe02: mov esi, esp; call qword ptr [rax + 0x38]; 
0x000000000012dd5d: mov esi, esp; call qword ptr [rax + 0x40]; 
0x000000000012d479: mov esi, esp; call qword ptr [rax + 8]; 
0x0000000000121a35: mov esi, esp; call qword ptr [rax]; 
0x0000000000122448: mov esi, esp; call qword ptr [rbp + 0x40]; 
0x00000000000868eb: mov esi, esp; call qword ptr [rbx + 0x38]; 
0x00000000000ed645: mov esi, esp; call qword ptr [rbx + 0x40]; 
0x000000000007049b: mov esi, esp; cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x000000000012b1d9: mov esi, esp; mov dword ptr [rsp + 0x18], 1; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x000000000012e0bc: mov esi, esp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x00000000000f75e8: mov esi, esp; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010c433: mov esi, esp; mov edx, r13d; pop r12; pop r13; jmp rax; 
0x00000000001336a7: mov esi, esp; mov qword ptr [rip + 0x28c1e0], rax; mov rax, qword ptr [rip + 0x288441]; pop r12; jmp rax; 
0x0000000000133647: mov esi, esp; mov qword ptr [rip + 0x28c240], rax; mov rax, qword ptr [rip + 0x288499]; pop r12; jmp rax; 
0x0000000000121acc: mov esi, esp; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121a54: mov esi, esp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000126034: mov esi, esp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000073194: mov esi, esp; mov rdi, r13; mov eax, r9d; syscall; 
0x000000000002eb92: mov esi, esp; mov rdi, r14; call 0xf48a0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x00000000000fc1ca: mov esi, esp; mov rdi, r9; mov qword ptr [rbp - 0x6d0], rax; mov eax, ebx; syscall; 
0x0000000000079697: mov esi, esp; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000012db3d: mov esi, esp; mov rdi, rbp; call qword ptr [rax]; 
0x000000000012a58f: mov esi, esp; mov rdi, rbp; call rax; 
0x000000000012dafc: mov esi, esp; mov rdi, rbp; mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x000000000011dfdf: mov esi, esp; mov rdi, rbp; mov rcx, r13; call rbx; 
0x00000000000700e1: mov esi, esp; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000704cb: mov esi, esp; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000007a3d4: mov esi, esp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000121b15: mov esi, esp; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000085303: mov esi, esp; mov rdi, rbx; call rax; 
0x00000000001202c8: mov esi, esp; mov rdi, rbx; mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x00000000000cb423: mov esi, esp; movsxd rdi, r13d; mov eax, 0xcb; syscall; 
0x000000000012b302: mov esi, esp; nop dword ptr [rax]; mov rax, qword ptr [r15 + 8]; mov rsi, rbx; mov rdi, r15; call qword ptr [rax]; 
0x0000000000036b48: mov esi, esp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001202c7: mov esi, r12d; mov rdi, rbx; mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x000000000012122d: mov esi, r13d; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x00000000000749e1: mov esi, r14d; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x00000000001202ec: mov esi, r14d; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x00000000001a4d64: mov esp, 0x1800016b; hlt; jmp qword ptr [rcx]; 
0x00000000001a8264: mov esp, 0x180001a0; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001aa764: mov esp, 0x180001c5; salc; cmc; jmp qword ptr [rsi]; 
0x00000000000a078a: mov esp, 0x1d8d4cd2; add dword ptr [rax + 0x6349000d], eax; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe0a: mov esp, 0x1d8d4cd2; add dword ptr [rcx + 0x6349000d], ecx; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e32a: mov esp, 0x1d8d4cd2; add dword ptr [rdx + 0x6349000d], esp; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe42: mov esp, 0x1d8d4cd2; leave; mov byte ptr [rip + 0xc634900], cl; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e362: mov esp, 0x1d8d4cd2; leave; movabs eax, dword ptr [0x8d49930c6349000d]; or al, 0xb; jmp rcx; 
0x000000000009fdc8: mov esp, 0x1d8d4cd2; mov dword ptr [rip + 0xc634900], ecx; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fde5: mov esp, 0x1d8d4cd2; mov dword ptr es:[rip + 0xc634900], ecx; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e2e8: mov esp, 0x1d8d4cd2; movabs byte ptr [0x8d49930c6349000d], al; or al, 0xb; jmp rcx; 
0x000000000009e305: mov esp, 0x1d8d4cd2; movabs byte ptr es:[0x8d49930c6349000d], al; or al, 0xb; jmp rcx; 
0x00000000000a0748: mov esp, 0x1d8d4cd2; or byte ptr [rip + 0xc634900], 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0765: mov esp, 0x1d8d4cd2; or byte ptr es:[rip + 0xc634900], 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3ce: mov esp, 0x1d8d4cd2; or dword ptr [rax + 0x6349000d], esi; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3a5: mov esp, 0x1d8d4cd2; xor dh, byte ptr [rax + 0x6349000d]; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000011b075: mov esp, 0x2082b; add byte ptr [rbx + 0x1074ffff], al; mov eax, r12d; syscall; 
0x0000000000188394: mov esp, 0x24000097; and ebx, ebp; call rsp; 
0x000000000011f5cf: mov esp, 0x243c8b49; mov rsi, r14; mov r13d, 7; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000001651f7: mov esp, 0x25; add byte ptr [rax], al; pop rbx; ret; 
0x00000000001ac364: mov esp, 0x280001e1; sti; cmc; call qword ptr [rax]; 
0x000000000018afa4: mov esp, 0x340001c8; ret 0xfff5; 
0x000000000018c284: mov esp, 0x3400022b; add eax, edi; call rsp; 
0x00000000001a0b64: mov esp, 0x38000129; sal ecx, cl; call rsi; 
0x0000000000187d7c: mov esp, 0x4000079; movsxd rbp, edx; call rsp; 
0x000000000018df94: mov esp, 0x4000164; add esp, edi; call rsp; 
0x00000000000f2ec3: mov esp, 0x401f0f; pop rbx; pop rbp; pop r12; ret; 
0x0000000000187efc: mov esp, 0x4400007f; xchg dl, ch; call rsp; 
0x000000000008ca87: mov esp, 0x440f48c7; ret 0xc083; 
0x000000000012b5c2: mov esp, 0x440f49dd; fisttp qword ptr [rax - 0x7d]; ret; 
0x000000000008bdc1: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000008bdf1: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000008bde1: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000018c6dc: mov esp, 0x45000246; clc; jmp rsp; 
0x000000000002d750: mov esp, 0x48003968; lea edi, dword ptr [rip + 0x3923a5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000160b44: mov esp, 0x4e6f0ff3; mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000003c8c: mov esp, 0x5335a8f4; or byte ptr fs:[rbx + 0x4e], ch; ret 0x6bba; 
0x000000000014aef7: mov esp, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018db6c: mov esp, 0x640002db; mov bl, 0xfa; call rsp; 
0x000000000019bd64: mov esp, 0x780000db; insd dword ptr [rdi], dx; out dx, al; call qword ptr [rdi]; 
0x0000000000123e74: mov esp, 0x7d8b49; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x000000000019d264: mov esp, 0x80000f0; out dx, eax; jmp qword ptr [rbp + 4]; 
0x00000000000c97c0: mov esp, 0x81000002; jmp qword ptr [rcx + 4]; 
0x0000000000082ac9: mov esp, 0x850f0033; xchg dword ptr [rdx], esp; add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x00000000001a1c64: mov esp, 0x8800013a; in eax, dx; int1; call qword ptr [rsi]; 
0x0000000000133bc3: mov esp, 0x894c0028; salc; mov rdi, r9; call qword ptr [rax + 0x18]; 
0x0000000000129460: mov esp, 0x89fff988; or al, 0x48; mov eax, dword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x0000000000028f6e: mov esp, 0x89fffffc; ret 0xe283; 
0x0000000000044ede: mov esp, 0x9024; add bl, ch; ret 0x2e66; 
0x000000000004586f: mov esp, 0x9024; add cl, ch; cmp eax, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000018c43c: mov esp, 0x94000233; adc al, 0xf8; call rsp; 
0x000000000018a38c: mov esp, 0xa4000170; fyl2x; call rsp; 
0x00000000001888a8: mov esp, 0xacffec19; mov ch, 0; add ah, ah; sbb esp, ebp; jmp rsp; 
0x0000000000188344: mov esp, 0xb4000095; adc bl, ch; call rsp; 
0x000000000018b99c: mov esp, 0xb40001fa; sbb esi, edi; call rsp; 
0x0000000000086d84: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, qword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000001719b8: mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x000000000016dfc0: mov esp, 0xbf00000f; sldt word ptr [rax]; ret 0xf; 
0x000000000018c48c: mov esp, 0xc2000236; sbb bh, al; jmp rsp; 
0x000000000008ca76: mov esp, 0xc2440fc7; add eax, 1; ret; 
0x0000000000189284: mov esp, 0xc40000ff; ret; 
0x000000000017c0ac: mov esp, 0xccfffab6; mov dh, 0xfa; jmp rsp; 
0x0000000000088b5b: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000198737: mov esp, 0xd1cffed; jno 0x1986fa; in eax, dx; jmp qword ptr [rdx]; 
0x000000000018a36c: mov esp, 0xd400016f; sal cl, 1; call rsp; 
0x000000000019fb64: mov esp, 0xd8000119; sbb cl, dh; jmp qword ptr [rax + 1]; 
0x00000000001a9764: mov esp, 0xd80001b5; outsb dx, byte ptr [rsi]; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001b5d64: mov esp, 0xd800027b; fdivrp st(7); call rdi; 
0x00000000000f2194: mov esp, 0xd8f7002c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018969c: mov esp, 0xe4000121; xor ebp, edi; call rsp; 
0x0000000000100b30: mov esp, 0xf002c12; test dword ptr [rcx + 0x64000001], edi; mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x00000000000bfc00: mov esp, 0xf003016; test dword ptr [rcx + 0x64000001], edi; mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x0000000000160b49: mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000937fb: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x000000000008bdd1: mov esp, 0xf80148c0; ret; 
0x0000000000079947: mov esp, dword ptr [rax + 0x48000000]; mov dword ptr [rbx + 0x10], 0; cmovg rax, rdx; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000007a315: mov esp, dword ptr [rbp]; or eax, 0x40; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x00000000001221d4: mov esp, eax; bswap ecx; mov dword ptr [rdx], ecx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x0000000000036b29: mov esp, eax; mov rbp, r9; jmp rdx; 
0x000000000017828d: mov esp, edi; call qword ptr [rax - 0x76]; 
0x000000000018706d: mov esp, edi; call qword ptr [rax]; 
0x0000000000187129: mov esp, edi; call qword ptr [rdx - 0x77]; 
0x0000000000187129: mov esp, edi; call qword ptr [rdx - 0x77]; cld; jmp rdx; 
0x00000000001871ed: mov esp, edi; inc esp; mov ah, bh; call qword ptr [rax + rcx*4 - 4]; jmp rsp; 
0x0000000000187269: mov esp, edi; jmp qword ptr [rax]; 
0x00000000001870a9: mov esp, edi; jmp qword ptr [rsi - 0x77]; 
0x000000000018712d: mov esp, edi; jmp rdx; 
0x000000000018726d: mov esp, edi; push qword ptr [rax + 0x40fffc88]; mov ah, bh; call rax; 
0x000000000012243d: mov esp, edx; add r12, qword ptr [rbp + 0x50]; sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbp + 0x40]; 
0x0000000000121f45: mov esp, edx; add r12, qword ptr [rbx + 0x50]; sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x0000000000028e92: mov fs, ecx; add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000d7dd4: mov fs, word ptr [rax]; add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x00000000000cfa25: mov fs, word ptr [rsp + rdi*8 - 1]; jmp qword ptr [rsi + 0xf]; 
0x0000000000194a69: mov gs, ebp; call qword ptr [rax]; 
0x00000000001948c9: mov gs, ebp; call qword ptr [rdx]; 
0x000000000019771d: mov gs, ebp; jmp qword ptr [rdx]; 
0x00000000000a35c1: mov qword ptr [r12], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000036e8b: mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000123b23: mov qword ptr [r8 + 8], rdx; mov eax, 1; ret; 
0x0000000000123bf2: mov qword ptr [r8], rax; mov eax, 1; ret; 
0x0000000000123b20: mov qword ptr [r8], rax; mov qword ptr [r8 + 8], rdx; mov eax, 1; ret; 
0x0000000000117e57: mov qword ptr [r9], r10; ret; 
0x0000000000117efb: mov qword ptr [r9], rcx; ret; 
0x0000000000117ec7: mov qword ptr [r9], rdi; ret; 
0x000000000008bad6: mov qword ptr [r9], rdx; add rsp, 0x100; ret; 
0x00000000000fc762: mov qword ptr [rax + 0x10], 0; nop word ptr [rax + rax]; mov qword ptr [rip + 0x2c1b85], 0; pop rbp; ret; 
0x00000000000768f7: mov qword ptr [rax + 0x10], r9; mov qword ptr [rsp + 8], rdi; mov rax, qword ptr [rax + 0x38]; mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x00000000000740d8: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000074118: mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000797bb: mov qword ptr [rax + 0x140], rdx; mov rax, qword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x0000000000074f78: mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000072f38: mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x00000000000d1f0a: mov qword ptr [rax + 0x20], rdx; xor eax, eax; ret; 
0x00000000000d1f3c: mov qword ptr [rax + 0x20], rsi; xor eax, eax; ret; 
0x0000000000074f74: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000074e3d: mov qword ptr [rax + 0x38], r12; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000740dc: mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000074d49: mov qword ptr [rax + 0x48], 0; mov rax, qword ptr [r15 + 0xd8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x0000000000075016: mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000007500e: mov qword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000122028: mov qword ptr [rax + 0x58], r8; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x000000000003c81d: mov qword ptr [rax + 0x60], rdx; call qword ptr [rbx]; 
0x000000000006de7d: mov qword ptr [rax + 8], r8; add dword ptr [rdx + 4], 1; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x000000000005dca7: mov qword ptr [rax + 8], r8; mov dword ptr [rax + 4], 1; xor eax, eax; ret; 
0x000000000005dc34: mov qword ptr [rax + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x00000000000740cd: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000f3100: mov qword ptr [rax + 8], rdi; mov qword ptr [rdi], rax; mov qword ptr [rdi + 8], rsi; ret; 
0x0000000000074111: mov qword ptr [rax + 8], rdx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000072f30: mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x00000000000f1117: mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000f8fcb: mov qword ptr [rax], rbx; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x00000000000f9036: mov qword ptr [rax], rbx; mov eax, 1; add rsp, 0x10; pop rbx; ret; 
0x000000000004983b: mov qword ptr [rax], rcx; mov byte ptr [rax + 8], 0; ret; 
0x0000000000074664: mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x00000000000776d9: mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x0000000000082631: mov qword ptr [rax], rcx; mov rax, qword ptr [rip + 0x33b99d]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x33b88b]; mov qword ptr [rax], rdi; ret; 
0x0000000000082645: mov qword ptr [rax], rdi; ret; 
0x000000000007e0e7: mov qword ptr [rax], rdx; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000fa242: mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000745bf: mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x00000000000740d5: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000074115: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000002fa73: mov qword ptr [rax], rdx; ret; 
0x000000000002f90d: mov qword ptr [rax], rsi; cmp rdx, rcx; mov rax, -1; cmovne rax, rdx; ret; 
0x000000000008263b: mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x33b88b]; mov qword ptr [rax], rdi; ret; 
0x00000000001202cd: mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x00000000000ffaa5: mov qword ptr [rbp + 0x40], -1; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000001248cd: mov qword ptr [rbp + 0x50], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000c3e43: mov qword ptr [rbp + 8], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000005fa75: mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x0000000000062e01: mov qword ptr [rbp - 0x10e0], r10; mov rsi, r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000060421: mov qword ptr [rbp - 0x10e8], r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000060417: mov qword ptr [rbp - 0x10f8], r10; mov rsi, r8; mov qword ptr [rbp - 0x10e8], r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000005fd8c: mov qword ptr [rbp - 0x1148], rcx; call qword ptr [rax + 0x38]; 
0x0000000000060d9c: mov qword ptr [rbp - 0x1148], rcx; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000061b68: mov qword ptr [rbp - 0x1158], rcx; call qword ptr [rax + 0x38]; 
0x000000000005eed2: mov qword ptr [rbp - 0x1198], rcx; lea rcx, qword ptr [rbp - 0x1000]; mov qword ptr [rbp - 0x11a0], rcx; jmp rax; 
0x000000000005eee0: mov qword ptr [rbp - 0x11a0], rcx; jmp rax; 
0x000000000004b8f5: mov qword ptr [rbp - 0x508], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004b7e4: mov qword ptr [rbp - 0x538], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004a30b: mov qword ptr [rbp - 0x538], rcx; mov rsi, qword ptr [rbp - 0x540]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000bd881: mov qword ptr [rbp - 0x58], rax; call 0x135c70; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000049ffa: mov qword ptr [rbp - 0x598], rcx; lea rcx, qword ptr [rbp - 0x480]; mov qword ptr [rbp - 0x5b0], rcx; jmp rax; 
0x000000000004a008: mov qword ptr [rbp - 0x5b0], rcx; jmp rax; 
0x0000000000023fe4: mov qword ptr [rbp - 0x60], rax; call 0x135c70; mov rdi, r14; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x0000000000023422: mov qword ptr [rbp - 0x68], rax; call rcx; 
0x00000000000fc1cf: mov qword ptr [rbp - 0x6d0], rax; mov eax, ebx; syscall; 
0x0000000000107267: mov qword ptr [rbp - 0x70], rdx; mov edx, dword ptr [r12 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; call rax; 
0x00000000001072e7: mov qword ptr [rbp - 0x70], rdx; mov edx, dword ptr [r12 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; call rax; 
0x00000000001070ab: mov qword ptr [rbp - 0x70], rdx; mov edx, dword ptr [r13 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x00000000001076e4: mov qword ptr [rbp - 0x70], rdx; mov edx, dword ptr [r13 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; call rax; 
0x0000000000106edd: mov qword ptr [rbp - 0x70], rdx; mov edx, dword ptr [r14 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x000000000010755b: mov qword ptr [rbp - 0x70], rdx; mov edx, dword ptr [r14 - 0x30]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x0000000000107667: mov qword ptr [rbp - 0x70], rdx; mov rdx, r14; call rax; 
0x0000000000031e2c: mov qword ptr [rbp - 0x88], rcx; mov rax, qword ptr [rip + 0x3921ce]; lea rdi, qword ptr [rip + 0x38debf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000050a5d: mov qword ptr [rbp - 0xb0], r8; mov rdi, rbx; call rax; 
0x0000000000165e03: mov qword ptr [rbp], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000093f4c: mov qword ptr [rbp], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000075155: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000006e004: mov qword ptr [rbp], rax; mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000092072: mov qword ptr [rbp], rax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000003d21a: mov qword ptr [rbp], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000045f21: mov qword ptr [rbp], rbx; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000001347f7: mov qword ptr [rbp], rbx; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000007994c: mov qword ptr [rbx + 0x10], 0; cmovg rax, rdx; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000002cb06: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000135d45: mov qword ptr [rbx + 0x10], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000118f90: mov qword ptr [rbx + 0x10], rax; mov eax, 0x14; sar rdx, 4; add rdx, 1; syscall; 
0x0000000000072f5c: mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x00000000000787f6: mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000078d08: mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000101f43: mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007a58d: mov qword ptr [rbx + 0x10], rsi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x000000000007b9f7: mov qword ptr [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000012e641: mov qword ptr [rbx + 0x18], 0; pop rbx; ret; 
0x0000000000135cf2: mov qword ptr [rbx + 0x18], rax; add rsp, 0x10; pop rbx; ret; 
0x00000000000725f1: mov qword ptr [rbx + 0x18], rax; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x00000000000787ee: mov qword ptr [rbx + 0x18], rax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000101f73: mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007d797: mov qword ptr [rbx + 0x18], rbp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bcc09: mov qword ptr [rbx + 0x18], rdx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000bcc79: mov qword ptr [rbx + 0x18], rdx; movsxd rdx, dword ptr [rsp + 0xa0]; mov qword ptr [rbx + 0x20], rdx; add rsp, 0xd0; pop rbx; ret; 
0x000000000007a589: mov qword ptr [rbx + 0x18], rsi; mov qword ptr [rbx + 0x10], rsi; mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x00000000000e3a3d: mov qword ptr [rbx + 0x20], 0; call 0x1f4f0; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x000000000012e698: mov qword ptr [rbx + 0x20], r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000001225d4: mov qword ptr [rbx + 0x20], rax; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000007b0a2: mov qword ptr [rbx + 0x20], rax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x00000000000bcc85: mov qword ptr [rbx + 0x20], rdx; add rsp, 0xd0; pop rbx; ret; 
0x0000000000086ac8: mov qword ptr [rbx + 0x20], rdx; mov qword ptr [rbx + 8], rsi; pop rbx; pop rbp; pop r12; ret; 
0x000000000007a599: mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x000000000012163e: mov qword ptr [rbx + 0x2290], rax; call 0x12e3c0; lea rax, qword ptr [rbx + 0x2260]; pop rbx; ret; 
0x00000000000e3a4a: mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000072f64: mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000007a595: mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x0000000000111290: mov qword ptr [rbx + 0x30], rax; mov eax, 1; pop rbx; ret; 
0x000000000007b09e: mov qword ptr [rbx + 0x30], rax; mov qword ptr [rbx + 0x20], rax; mov dword ptr [rbx], edx; xor eax, eax; pop rbx; ret; 
0x000000000007a591: mov qword ptr [rbx + 0x30], rsi; mov qword ptr [rbx + 0x28], rsi; mov qword ptr [rbx + 0x20], rsi; call qword ptr [rax + 0x70]; 
0x00000000000f83ae: mov qword ptr [rbx + 0x38], rax; add rsp, 8; mov eax, 3; pop rbx; pop rbp; ret; 
0x00000000000f8334: mov qword ptr [rbx + 0x38], rax; mov eax, 3; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000008674c: mov qword ptr [rbx + 0x38], rcx; mov qword ptr [rbx + 0x40], r8; mov qword ptr [rbx], rdi; mov dword ptr [rbx + 0x30], eax; call rcx; 
0x000000000007b4ce: mov qword ptr [rbx + 0x40], r12; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000086750: mov qword ptr [rbx + 0x40], r8; mov qword ptr [rbx], rdi; mov dword ptr [rbx + 0x30], eax; call rcx; 
0x0000000000086807: mov qword ptr [rbx + 0x40], r8; mov rsi, rax; mov qword ptr [rbx], rax; mov qword ptr [rbx + 0x48], r9; mov rdi, r9; call rcx; 
0x0000000000086811: mov qword ptr [rbx + 0x48], r9; mov rdi, r9; call rcx; 
0x00000000000f0495: mov qword ptr [rbx + 0x48], rax; pop rbx; ret; 
0x000000000007b10a: mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000075159: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000786e6: mov qword ptr [rbx + 0x90], rax; pop rbx; ret; 
0x0000000000078cfd: mov qword ptr [rbx + 0x90], rsi; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000079958: mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000007902a: mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x000000000007884d: mov qword ptr [rbx + 0xd8], rcx; mov qword ptr [rdx + 0x140], rdi; pop rbx; ret; 
0x000000000007c63c: mov qword ptr [rbx + 8], rax; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000012bb44: mov qword ptr [rbx + 8], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000787f2: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000078d04: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000007c607: mov qword ptr [rbx + 8], rax; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000101f13: mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b1500: mov qword ptr [rbx + 8], rcx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000bcc05: mov qword ptr [rbx + 8], rdi; mov qword ptr [rbx + 0x18], rdx; add rsp, 0xd0; pop rbx; ret; 
0x0000000000129293: mov qword ptr [rbx + 8], rdx; mov word ptr [rbx + 2], ax; call 0x114510; add rsp, 0x10; pop rbx; ret; 
0x000000000007b32c: mov qword ptr [rbx + 8], rdx; movzx eax, byte ptr [rax]; pop rbx; ret; 
0x0000000000086acc: mov qword ptr [rbx + 8], rsi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000023832: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012e9a1: mov qword ptr [rbx], 0; call 0x12ac60; mov dword ptr [rax], 0; pop rbx; ret; 
0x00000000000f4bf1: mov qword ptr [rbx], 0; pop rbx; ret; 
0x000000000012d034: mov qword ptr [rbx], rax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x0000000000122080: mov qword ptr [rbx], rax; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x0000000000135f6d: mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000008680e: mov qword ptr [rbx], rax; mov qword ptr [rbx + 0x48], r9; mov rdi, r9; call rcx; 
0x000000000012ab71: mov qword ptr [rbx], rax; pop rbx; ret; 
0x00000000000f4bb0: mov qword ptr [rbx], rax; setne al; movzx eax, al; pop rbx; ret; 
0x0000000000129d5c: mov qword ptr [rbx], rax; xor eax, eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000129797: mov qword ptr [rbx], rax; xor eax, eax; add rsp, 0x30; pop rbx; ret; 
0x00000000001298f4: mov qword ptr [rbx], rax; xor eax, eax; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x0000000000120203: mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x0000000000086754: mov qword ptr [rbx], rdi; mov dword ptr [rbx + 0x30], eax; call rcx; 
0x00000000000b1555: mov qword ptr [rbx], rdx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000bcc02: mov qword ptr [rbx], rsi; mov qword ptr [rbx + 8], rdi; mov qword ptr [rbx + 0x18], rdx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000aedd0: mov qword ptr [rbx], rsi; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x0000000000123b0b: mov qword ptr [rcx + 0x10], rdx; mov eax, 1; ret; 
0x000000000007995f: mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000007995f: mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x0000000000079031: mov qword ptr [rcx + 0x140], rdx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x000000000015a583: mov qword ptr [rcx + 5], rdx; ret; 
0x000000000015a593: mov qword ptr [rcx + 6], rdx; ret; 
0x000000000015a5a3: mov qword ptr [rcx + 7], rdx; ret; 
0x0000000000123b07: mov qword ptr [rcx + 8], rax; mov qword ptr [rcx + 0x10], rdx; mov eax, 1; ret; 
0x000000000015a5b3: mov qword ptr [rcx + 8], rdx; ret; 
0x000000000004f0bd: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000018af7c: mov qword ptr [rcx], -0xa40ec00; call qword ptr [rdi + rax*8 - 0x405bffff]; cmc; call rsp; 
0x00000000000771d3: mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x000000000015a540: mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x000000000015a560: mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x000000000015a570: mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x000000000015a580: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x000000000015a590: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000015a5a0: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000015a5b0: mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x000000000015a550: mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x000000000015a530: mov qword ptr [rcx], rdx; ret; 
0x00000000000e4dea: mov qword ptr [rdi + 0x100], rdx; ret; 
0x0000000000038c1e: mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000007b05a: mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000009e62c: mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009f47c: mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009e64c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009cfbc: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000009cf9c: mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000a0eec: mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x000000000009f49f: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009dc8f: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000a0f0f: mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x000000000009e68f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009f4df: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009cfff: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000a0f4f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x000000000009e6af: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009f4ff: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009d01f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000a0f6f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x000000000009e670: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009f4c0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009cfe0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000a0f30: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x000000000007b032: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000732f6: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x0000000000091f69: mov qword ptr [rdi + 0x18], rax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000007b05e: mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000012e969: mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], 0; mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi + 8], rax; ret; 
0x000000000012e240: mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], edx; mov al, 1; ret; 
0x000000000012e3cd: mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], edx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000012e265: mov qword ptr [rdi + 0x18], rsi; ret; 
0x000000000012e974: mov qword ptr [rdi + 0x20], 0; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000127f77: mov qword ptr [rdi + 0x20], rax; mov qword ptr [rdi + 0x28], rdx; mov eax, 1; ret; 
0x000000000012e3c9: mov qword ptr [rdi + 0x20], rsi; mov qword ptr [rdi + 0x18], rsi; mov dword ptr [rdi + 0x28], edx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000127f7b: mov qword ptr [rdi + 0x28], rdx; mov eax, 1; ret; 
0x0000000000127f2f: mov qword ptr [rdi + 0x30], rax; mov qword ptr [rdi + 0x38], rdx; mov eax, 1; ret; 
0x0000000000127f33: mov qword ptr [rdi + 0x38], rdx; mov eax, 1; ret; 
0x000000000007b02e: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000007b062: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000037738: mov qword ptr [rdi + 0x58], -1; mov qword ptr [rdi + 0x60], -1; mov qword ptr [rdi + 0x68], -1; mov qword ptr [rdi + 0x70], -1; mov qword ptr [rdi + 0x78], -1; ret; 
0x0000000000037740: mov qword ptr [rdi + 0x60], -1; mov qword ptr [rdi + 0x68], -1; mov qword ptr [rdi + 0x70], -1; mov qword ptr [rdi + 0x78], -1; ret; 
0x0000000000037748: mov qword ptr [rdi + 0x68], -1; mov qword ptr [rdi + 0x70], -1; mov qword ptr [rdi + 0x78], -1; ret; 
0x0000000000037750: mov qword ptr [rdi + 0x70], -1; mov qword ptr [rdi + 0x78], -1; ret; 
0x0000000000037758: mov qword ptr [rdi + 0x78], -1; ret; 
0x00000000000e4485: mov qword ptr [rdi + 0x78], rdx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x80], rdx; ret; 
0x00000000000e448d: mov qword ptr [rdi + 0x80], rdx; ret; 
0x000000000009e5ec: mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009f43c: mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009cf5c: mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000a0eac: mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000e4ddf: mov qword ptr [rdi + 0xf8], rdx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x100], rdx; ret; 
0x000000000009e60c: mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009f45c: mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009cf7c: mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000a0ecc: mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000014ce27: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cdb7: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cd47: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014ccd7: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e4ea: mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009f32a: mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000014cc67: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009ceaa: mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000a0d9a: mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000009e50a: mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009f34a: mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000014cbf7: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009ceba: mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000a0dba: mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000009e52a: mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009f36a: mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000014cb87: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009ceca: mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000a0dda: mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000f3117: mov qword ptr [rdi + 8], 0; ret; 
0x00000000000384df: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000000383a3: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000038c17: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000038ba3: mov qword ptr [rdi + 8], r9; ret; 
0x0000000000037a6b: mov qword ptr [rdi + 8], rax; mov rax, qword ptr [rdx]; and rax, qword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000037b6b: mov qword ptr [rdi + 8], rax; mov rax, qword ptr [rdx]; or rax, qword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000007b036: mov qword ptr [rdi + 8], rax; ret; 
0x000000000007bda2: mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000007364e: mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x000000000003cd19: mov qword ptr [rdi + 8], rdx; ret; 
0x00000000000f3107: mov qword ptr [rdi + 8], rsi; ret; 
0x000000000003911c: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000008c5a1: mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000001440e4: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144122: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000038b0e: mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000144297: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144393: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442df: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144467: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144647: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144837: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144a08: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144c08: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144e08: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001440e0: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014411e: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144293: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014438f: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442db: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144463: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144643: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144833: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144a04: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144c04: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144e04: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001440dc: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014411a: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014428f: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014438b: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442d7: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014445f: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014463f: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014482f: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144a00: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144c00: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144e00: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001440d8: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144116: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014446b: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c637: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014464b: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c5b7: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014483b: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c537: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144a0c: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c4a8: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144c0c: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c418: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144e0c: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c388: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000009de10: mov qword ptr [rdi - 1], rdx; ret; 
0x0000000000038b07: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000038a99: mov qword ptr [rdi - 8], r9; ret; 
0x00000000001440e8: mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144126: mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014429b: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144397: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442e3: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000014c6b7: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000f3110: mov qword ptr [rdi], 0; mov qword ptr [rdi + 8], 0; ret; 
0x0000000000038b00: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000038c10: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000053855: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000038a93: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000038b9d: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000038a68: mov qword ptr [rdi], r9; ret; 
0x0000000000039d88: mov qword ptr [rdi], rax; mov eax, 0xffffc002; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000039cfd: mov qword ptr [rdi], rax; mov eax, 1; ret; 
0x00000000000f3104: mov qword ptr [rdi], rax; mov qword ptr [rdi + 8], rsi; ret; 
0x0000000000091c99: mov qword ptr [rdi], rax; pop rbx; pop rbp; ret; 
0x0000000000037a75: mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000003cd0d: mov qword ptr [rdi], rcx; cmp r9, r8; cmova rdx, r8; xor eax, eax; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000009e476: mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009f2a6: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009db36: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x00000000000a0d16: mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x000000000009e4a6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009f2e6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009ce86: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000000a0d56: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x000000000009e4c6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009f306: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009ce96: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000000a0d76: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x000000000009e4e7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009f327: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009cea7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000a0d97: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000009e507: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009f347: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009ceb7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000a0db7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000009e527: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009f367: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009cec7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000a0dd7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000003cd29: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000008c59e: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000009f2c7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009e487: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009ce77: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000a0d37: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x000000000009ce66: mov qword ptr [rdi], rcx; ret; 
0x000000000009e463: mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009f293: mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009de30: mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000009de50: mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000009de60: mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000009de70: mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000009de80: mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000009de40: mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x000000000001fca7: mov qword ptr [rdi], rdx; ret; 
0x00000000000a0d03: mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x0000000000039cde: mov qword ptr [rdi], rsi; mov eax, 1; mov dword ptr [rdx], ecx; ret; 
0x0000000000117fea: mov qword ptr [rdx + 0x10], rax; xor eax, eax; ret; 
0x0000000000078854: mov qword ptr [rdx + 0x140], rdi; pop rbx; ret; 
0x00000000000780fd: mov qword ptr [rdx + 0x20], rax; mov dword ptr [rcx], edi; mov eax, edi; ret; 
0x00000000000d1f24: mov qword ptr [rdx + 0x20], rcx; mov rdx, qword ptr [rsi + 0x20]; mov qword ptr [rax + 0x20], rdx; xor eax, eax; ret; 
0x00000000000782b3: mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x0000000000121b8f: mov qword ptr [rdx + 0x20], rsi; ret; 
0x0000000000070b35: mov qword ptr [rdx + 0x28], rax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x0000000000121b6b: mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000121b6f: mov qword ptr [rdx + 0x68], rcx; ret; 
0x000000000015c93a: mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x00000000001585aa: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000015c95a: mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x00000000001585ca: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000015ebc2: mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c97a: mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x00000000001585ea: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000015c80a: mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x0000000000117fe2: mov qword ptr [rdx + 8], rax; mov rax, qword ptr [rsi + 8]; mov qword ptr [rdx + 0x10], rax; xor eax, eax; ret; 
0x00000000001584da: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x00000000001276f0: mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000133add: mov qword ptr [rdx], 0; mov eax, 0xffffffff; ret; 
0x000000000009218e: mov qword ptr [rdx], r12; mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x000000000015ec6e: mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c7b3: mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; ret; 
0x0000000000127747: mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000015c8b3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x0000000000158563: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000015c8d3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x0000000000158573: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000015c8f3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x0000000000158583: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000015c913: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x0000000000158593: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000015c933: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x00000000001585a3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000015c953: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x00000000001585c3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000015c973: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x00000000001585e3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000015c803: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x00000000001584d3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000158483: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000071cfe: mov qword ptr [rdx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000074455: mov qword ptr [rdx], rcx; mov edx, dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x000000000007c593: mov qword ptr [rdx], rcx; ret; 
0x00000000000e317a: mov qword ptr [rdx], rdi; ret; 
0x00000000001276ed: mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x000000000016500c: mov qword ptr [rip + 0x25ae41], 0; add rsp, 8; ret; 
0x0000000000164bc7: mov qword ptr [rip + 0x25af0e], 0; add rsp, 8; ret; 
0x00000000001651f3: mov qword ptr [rip + 0x25bc52], 0; pop rbx; ret; 
0x00000000001653c9: mov qword ptr [rip + 0x25d44c], 1; add rsp, 8; ret; 
0x00000000001336f9: mov qword ptr [rip + 0x28c190], rax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000001336a9: mov qword ptr [rip + 0x28c1e0], rax; mov rax, qword ptr [rip + 0x288441]; pop r12; jmp rax; 
0x0000000000133649: mov qword ptr [rip + 0x28c240], rax; mov rax, qword ptr [rip + 0x288499]; pop r12; jmp rax; 
0x00000000001335e3: mov qword ptr [rip + 0x28c2a6], rax; mov rax, qword ptr [rip + 0x2884f7]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000001335a5: mov qword ptr [rip + 0x28c2e4], rdx; add rsp, 8; ret; 
0x000000000011202e: mov qword ptr [rip + 0x2ad9b3], rax; add rsp, 8; ret; 
0x000000000010acd7: mov qword ptr [rip + 0x2b7ae2], rdx; pop rbp; ret; 
0x00000000000fc770: mov qword ptr [rip + 0x2c1b85], 0; pop rbp; ret; 
0x00000000000fc71e: mov qword ptr [rip + 0x2c1bd7], 2; pop rbp; ret; 
0x00000000000fc62f: mov qword ptr [rip + 0x2c1cca], rbx; pop rbx; ret; 
0x00000000000f243e: mov qword ptr [rip + 0x2cd4db], rax; add rsp, 8; ret; 
0x00000000000f3959: mov qword ptr [rip + 0x2cdcd0], rax; add rsp, 8; ret; 
0x00000000000f3932: mov qword ptr [rip + 0x2cdcf3], 0; add rsp, 8; ret; 
0x00000000000f38cc: mov qword ptr [rip + 0x2cdd5d], rdx; add rsp, 8; ret; 
0x000000000008b9d7: mov qword ptr [rip + 0x335316], rdx; add rsp, 0x100; ret; 
0x000000000008aac3: mov qword ptr [rip + 0x3361a6], rax; add rsp, 8; ret; 
0x000000000008aa81: mov qword ptr [rip + 0x3361e8], rax; ret; 
0x0000000000085d2f: mov qword ptr [rip + 0x33ae5a], rdx; add rsp, 0x18; ret; 
0x000000000007e19a: mov qword ptr [rip + 0x34288f], rax; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000007c934: mov qword ptr [rip + 0x344089], 0; ret; 
0x000000000007c8cf: mov qword ptr [rip + 0x3440f2], rdx; add dword ptr [rip + 0x3440e7], 1; ret; 
0x0000000000048903: mov qword ptr [rip + 0x37b49a], 0; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x0000000000021b1a: mov qword ptr [rip + 0x39c70f], rax; pop r12; ret; 
0x000000000001f5ef: mov qword ptr [rip + 0x3a045a], rax; pop rax; pop rbx; pop rbp; ret; 
0x00000000000e3eee: mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x00000000000e3f13: mov qword ptr [rsi + 0x10], r8; ret; 
0x000000000003d316: mov qword ptr [rsi + 0x10], rax; mov eax, 0xb; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x00000000000c093f: mov qword ptr [rsi + 0x10], rax; mov rax, qword ptr [rsi + 0x18]; mov qword ptr [rsi + 0x18], rax; mov rax, -0xe; ret; 
0x0000000000120d2e: mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000003d2d5: mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x000000000003cc83: mov qword ptr [rsi + 0x10], rcx; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000c0947: mov qword ptr [rsi + 0x18], rax; mov rax, -0xe; ret; 
0x0000000000073621: mov qword ptr [rsi + 0x28], rax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x000000000003cc87: mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x00000000000e4d00: mov qword ptr [rsi + 0x70], rdx; mov rax, qword ptr [rdi + 0x100]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x00000000000e43f3: mov qword ptr [rsi + 0x70], rdx; mov rax, qword ptr [rdi + 0x80]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x00000000000e43fe: mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x0000000000120dd6: mov qword ptr [rsi + 8], 0; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000e3ef6: mov qword ptr [rsi + 8], 0; ret; 
0x0000000000120d26: mov qword ptr [rsi + 8], 1; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120d62: mov qword ptr [rsi + 8], rax; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120d9a: mov qword ptr [rsi + 8], rax; mov rax, qword ptr [rdi + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120cfe: mov qword ptr [rsi + 8], rax; ret; 
0x00000000000e3f0f: mov qword ptr [rsi + 8], rcx; mov qword ptr [rsi + 0x10], r8; ret; 
0x00000000001275ff: mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000127eaf: mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000123a15: mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000003cc7c: mov qword ptr [rsi], rax; lea rax, qword ptr [rcx + r8*4]; mov qword ptr [rsi + 0x10], rcx; mov qword ptr [rsi + 0x28], rax; xor eax, eax; ret; 
0x000000000007d4fa: mov qword ptr [rsi], rax; mov rax, r8; ret; 
0x00000000000732fa: mov qword ptr [rsi], rax; xor eax, eax; ret; 
0x0000000000117bcf: mov qword ptr [rsi], rcx; xor eax, eax; ret; 
0x00000000001176e8: mov qword ptr [rsi], rdi; ret; 
0x000000000010c4c8: mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x00000000001275f8: mov qword ptr [rsi], rdx; mov rdx, qword ptr [rax + 0x38]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000127ea8: mov qword ptr [rsi], rdx; mov rdx, qword ptr [rax + 0x48]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000123a0b: mov qword ptr [rsi], rdx; mov rdx, qword ptr [rax + 0x98]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000001364da: mov qword ptr [rsp + 0x10], 0; call 0x135f80; add rsp, 0x28; ret; 
0x00000000000487e3: mov qword ptr [rsp + 0x10], 0; call 0xa4090; add rsp, 0x28; ret; 
0x00000000000488b3: mov qword ptr [rsp + 0x10], 0; call 0xa40c0; add rsp, 0x28; ret; 
0x00000000000cc9ca: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rbp - 0x120]; mov qword ptr [rsp], rax; call rbx; 
0x000000000012d73f: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012d099: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x000000000012d159: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x0000000000126763: mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x00000000000f18e3: mov qword ptr [rsp + 0x10], rax; mov rdi, rsp; mov rax, qword ptr [rip + 0x2d2766]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f1873: mov qword ptr [rsp + 0x10], rax; mov rdi, rsp; mov rax, qword ptr [rip + 0x2d27d6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000461d9: mov qword ptr [rsp + 0x10], rax; mov rdx, rsp; xor esi, esi; mov edi, 0x100011; mov eax, 0x38; syscall; 
0x000000000008095b: mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x0000000000080a2f: mov qword ptr [rsp + 0x10], rcx; call rdx; 
0x0000000000135930: mov qword ptr [rsp + 0x10], rcx; lea rdi, qword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x00000000000bdfc5: mov qword ptr [rsp + 0x10], rsi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000108f73: mov qword ptr [rsp + 0x18], rax; call 0x108fa0; add rsp, 0xd8; ret; 
0x00000000001090be: mov qword ptr [rsp + 0x18], rax; call 0x1090d0; add rsp, 0xd8; ret; 
0x000000000010a348: mov qword ptr [rsp + 0x18], rax; call 0x10a360; add rsp, 0xd8; ret; 
0x000000000010a558: mov qword ptr [rsp + 0x18], rax; call 0x10a570; add rsp, 0xd8; ret; 
0x000000000010c0ee: mov qword ptr [rsp + 0x18], rax; call 0x10c100; add rsp, 0xd8; ret; 
0x0000000000048723: mov qword ptr [rsp + 0x18], rax; call 0x475b0; add rsp, 0xd8; ret; 
0x000000000005432d: mov qword ptr [rsp + 0x18], rax; call 0x49c40; add rsp, 0xd8; ret; 
0x000000000005d07d: mov qword ptr [rsp + 0x18], rax; call 0x5cfc0; add rsp, 0xd8; ret; 
0x000000000005e40d: mov qword ptr [rsp + 0x18], rax; call 0x5e420; add rsp, 0xd8; ret; 
0x000000000007834d: mov qword ptr [rsp + 0x18], rax; call 0x5eaf0; add rsp, 0xd8; ret; 
0x000000000007855d: mov qword ptr [rsp + 0x18], rax; call 0x6c6c0; add rsp, 0xd8; ret; 
0x000000000005d1bd: mov qword ptr [rsp + 0x18], rax; call 0x70930; add rsp, 0xd8; ret; 
0x000000000005458d: mov qword ptr [rsp + 0x18], rax; call 0x72120; add rsp, 0xd8; ret; 
0x000000000005461d: mov qword ptr [rsp + 0x18], rax; call 0x72280; add rsp, 0xd8; ret; 
0x0000000000054468: mov qword ptr [rsp + 0x18], rax; call 0x72420; add rsp, 0xd8; ret; 
0x000000000007282d: mov qword ptr [rsp + 0x18], rax; call 0x72620; add rsp, 0xd8; ret; 
0x0000000000073bd8: mov qword ptr [rsp + 0x18], rax; call 0x73c60; add rsp, 0xd8; ret; 
0x0000000000073e1d: mov qword ptr [rsp + 0x18], rax; call 0x73d20; add rsp, 0xd8; ret; 
0x00000000000af64d: mov qword ptr [rsp + 0x18], rax; call 0xaf660; add rsp, 0xd8; ret; 
0x00000000000f4495: mov qword ptr [rsp + 0x18], rax; call 0xf3ec0; add rsp, 0xd8; ret; 
0x0000000000102078: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [r15 + 0x28]; mov edi, 0x2000001; mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x00000000000c20ef: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x301f5d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c207f: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x301fcd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000078405: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x345b2f]; mov rdi, qword ptr [rax]; call 0x5eaf0; add rsp, 0xd8; ret; 
0x000000000005d117: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x360e95]; mov rdi, qword ptr [rax]; call 0x54630; add rsp, 0xd8; ret; 
0x00000000000543c5: mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x369b6f]; mov rdi, qword ptr [rax]; call 0x49c40; add rsp, 0xd8; ret; 
0x0000000000080a2a: mov qword ptr [rsp + 0x20], rax; mov qword ptr [rsp + 0x10], rcx; call rdx; 
0x000000000012b086: mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x0000000000080808: mov qword ptr [rsp + 0x28], r14; mov rdi, r14; call qword ptr [rax]; 
0x000000000012b08f: mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012b08f: mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x000000000008083c: mov qword ptr [rsp + 0x30], rdx; mov dword ptr [rsp + 0x28], r11d; call rax; 
0x00000000001293db: mov qword ptr [rsp + 0x38], 0; call qword ptr [rax + 0x28]; 
0x000000000012e74c: mov qword ptr [rsp + 0x40], rax; mov qword ptr [rsp + 0x70], rax; lea rax, qword ptr [rsp + 0x30]; mov qword ptr [rsp + 8], rax; xor eax, eax; call rdx; 
0x000000000011fee1: mov qword ptr [rsp + 0x48], 0; mov rdi, r13; call qword ptr [rax]; 
0x000000000012a7ea: mov qword ptr [rsp + 0x50], rax; mov rax, qword ptr [r13 + 8]; mov qword ptr [rsp], r15; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x000000000012e751: mov qword ptr [rsp + 0x70], rax; lea rax, qword ptr [rsp + 0x30]; mov qword ptr [rsp + 8], rax; xor eax, eax; call rdx; 
0x000000000012b441: mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x00000000001162ce: mov qword ptr [rsp + 8], 0; call 0x114d00; add rsp, 0x18; ret; 
0x000000000011f959: mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x000000000012b821: mov qword ptr [rsp + 8], 0x2faf080; call 0xc0dd0; add rsp, 0x18; ret; 
0x000000000012d9d4: mov qword ptr [rsp + 8], r8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000012da1b: mov qword ptr [rsp + 8], r8; lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000002f7a0: mov qword ptr [rsp + 8], r8; mov rax, qword ptr [rip + 0x39485c]; lea rdi, qword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f127b: mov qword ptr [rsp + 8], rax; call 0x108100; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000f5313: mov qword ptr [rsp + 8], rax; call 0xf4e90; mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000000867bf: mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x000000000002851c: mov qword ptr [rsp + 8], rax; call rbx; 
0x0000000000121ace: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000027626: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a556: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000027932: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002873a: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x58]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000028139: mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x78]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000012e75b: mov qword ptr [rsp + 8], rax; xor eax, eax; call rdx; 
0x000000000007dec8: mov qword ptr [rsp + 8], rcx; and rdi, rdx; neg rdi; call qword ptr [rax]; 
0x000000000007def2: mov qword ptr [rsp + 8], rcx; call qword ptr [rax]; 
0x0000000000022112: mov qword ptr [rsp + 8], rdi; call 0x1f595; mov rax, qword ptr [rip + 0x39d93d]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x000000000011fcd8: mov qword ptr [rsp + 8], rdi; mov esi, 1; mov rdi, r15; call qword ptr [rax]; 
0x000000000011fedc: mov qword ptr [rsp + 8], rdi; mov qword ptr [rsp + 0x48], 0; mov rdi, r13; call qword ptr [rax]; 
0x0000000000075b1b: mov qword ptr [rsp + 8], rdi; mov rax, qword ptr [rax + 0x38]; mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x0000000000129b8f: mov qword ptr [rsp + 8], rdi; mov rdi, rbx; call qword ptr [rax]; 
0x00000000000f2347: mov qword ptr [rsp + 8], rdi; mov rdi, rsp; call 0xc0dd0; add rsp, 0x18; ret; 
0x000000000013592b: mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp + 0x10], rcx; lea rdi, qword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x00000000000bc4d0: mov qword ptr [rsp + 8], rsi; mov rax, qword ptr [rip + 0x307b2c]; lea rdi, qword ptr [rip + 0x30361d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f2f57: mov qword ptr [rsp - 0x18], rax; mov rsi, rdi; mov r10d, 0x100; mov rdi, -0x64; mov eax, 0x118; syscall; 
0x00000000000f2ff7: mov qword ptr [rsp - 0x18], rax; xor r10d, r10d; xor esi, esi; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x00000000000b0779: mov qword ptr [rsp - 0x18], rsi; fild qword ptr [rsp - 0x18]; fsubp st(1); fstp qword ptr [rsp - 0x10]; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x00000000000fa2e6: mov qword ptr [rsp - 0x30], r9; syscall; 
0x00000000000fa2e1: mov qword ptr [rsp - 0x38], r8; mov qword ptr [rsp - 0x30], r9; syscall; 
0x00000000000fa2da: mov qword ptr [rsp - 0x40], rbp; mov al, 0x9c; mov qword ptr [rsp - 0x38], r8; mov qword ptr [rsp - 0x30], r9; syscall; 
0x00000000000f23d5: mov qword ptr [rsp - 0x48], rax; cmova r10, qword ptr [rax + 0x18]; mov eax, 0x65; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x0000000000039e3e: mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000eb013: mov qword ptr [rsp], 0; call 0xeb180; add rsp, 0x18; ret; 
0x0000000000120277: mov qword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x000000000012a7f3: mov qword ptr [rsp], r15; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x00000000000b42da: mov qword ptr [rsp], rax; call 0xb1410; add rsp, 0x18; ret; 
0x00000000001203e7: mov qword ptr [rsp], rax; call qword ptr [r11]; mov rdx, qword ptr [rbx + 8]; mov dword ptr [rsp + 0x18], eax; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x0000000000075b27: mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x0000000000027630: mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x0000000000027941: mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x00000000000cc9d6: mov qword ptr [rsp], rax; call rbx; 
0x00000000000eb6c2: mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x00000000000fafd2: mov qword ptr [rsp], rax; mov eax, 0x130; syscall; 
0x00000000000f4922: mov qword ptr [rsp], rax; mov eax, 0x1a; syscall; 
0x00000000000c0d92: mov qword ptr [rsp], rax; mov eax, 0x22; syscall; 
0x00000000000c0df2: mov qword ptr [rsp], rax; mov eax, 0x23; syscall; 
0x00000000000fb172: mov qword ptr [rsp], rax; mov eax, 0x2a; syscall; 
0x00000000000fb0e2: mov qword ptr [rsp], rax; mov eax, 0x2b; syscall; 
0x00000000000fb4b2: mov qword ptr [rsp], rax; mov eax, 0x2e; syscall; 
0x00000000000fb3a2: mov qword ptr [rsp], rax; mov eax, 0x2f; syscall; 
0x00000000000f1df2: mov qword ptr [rsp], rax; mov eax, 0x4a; syscall; 
0x00000000000f1e82: mov qword ptr [rsp], rax; mov eax, 0x4b; syscall; 
0x00000000000ebf72: mov qword ptr [rsp], rax; mov eax, 0x55; syscall; 
0x00000000000eb722: mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x00000000000eb4d2: mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x00000000000ebe22: mov qword ptr [rsp], rax; mov eax, 3; syscall; 
0x00000000000ecfd2: mov qword ptr [rsp], rax; mov eax, 7; syscall; 
0x00000000000fa3c2: mov qword ptr [rsp], rax; mov eax, 8; syscall; 
0x00000000000fad35: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x113; syscall; 
0x00000000000fadc5: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000f04e5: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000fae85: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000cb565: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x11; syscall; 
0x00000000000cb5c5: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x12; syscall; 
0x00000000000f1c45: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x17; syscall; 
0x00000000000fb515: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x2c; syscall; 
0x00000000000fb345: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x2d; syscall; 
0x00000000000fbc85: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000fbce5: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000faa05: mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0xe8; syscall; 
0x000000000012db01: mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x0000000000121a56: mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121a56: mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; add rsp, 0x10; pop rbx; ret; 
0x0000000000135cde: mov qword ptr [rsp], rax; mov rax, qword ptr [rip + 0x288177]; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x0000000000121ac4: mov qword ptr [rsp], rax; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012d0a6: mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x00000000000bdc0c: mov qword ptr [rsp], rdx; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x000000000012d474: mov qword ptr [rsp], rdx; mov rsi, rsp; call qword ptr [rax + 8]; 
0x0000000000129b86: mov qword ptr [rsp], rsi; mov esi, 4; mov qword ptr [rsp + 8], rdi; mov rdi, rbx; call qword ptr [rax]; 
0x000000000007e0e6: mov qword ptr fs:[rax], rdx; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000000301bc: mov qword ptr fs:[rax], rdx; ret; 
0x000000000002f90c: mov qword ptr fs:[rax], rsi; cmp rdx, rcx; mov rax, -1; cmovne rax, rdx; ret; 
0x0000000000165e02: mov qword ptr fs:[rbp], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012ab70: mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x00000000000fa335: mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x00000000000f46fc: mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x00000000000fad19: mov r10, rcx; mov eax, 0x113; syscall; 
0x00000000000fada9: mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000f04c9: mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000fae69: mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000cb549: mov r10, rcx; mov eax, 0x11; syscall; 
0x00000000000faef0: mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000000cb5a9: mov r10, rcx; mov eax, 0x12; syscall; 
0x00000000000fa800: mov r10, rcx; mov eax, 0x12d; syscall; 
0x00000000000fa760: mov r10, rcx; mov eax, 0x12e; syscall; 
0x00000000000faf80: mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000000fb040: mov r10, rcx; mov eax, 0x136; syscall; 
0x00000000000fb070: mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000000f1c29: mov r10, rcx; mov eax, 0x17; syscall; 
0x00000000000fabc0: mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000000ed2d0: mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000000fb4f9: mov r10, rcx; mov eax, 0x2c; syscall; 
0x00000000000fb329: mov r10, rcx; mov eax, 0x2d; syscall; 
0x00000000000fb5e0: mov r10, rcx; mov eax, 0x35; syscall; 
0x00000000000fb550: mov r10, rcx; mov eax, 0x36; syscall; 
0x00000000000fb210: mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000000c0ab0: mov r10, rcx; mov eax, 0x3d; syscall; 
0x00000000000fbde0: mov r10, rcx; mov eax, 0x42; syscall; 
0x00000000000fbc69: mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000fbcc9: mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000fac80: mov r10, rcx; mov eax, 0x9d; syscall; 
0x00000000000fab90: mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000000faa70: mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000000facb0: mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000000face0: mov r10, rcx; mov eax, 0xb3; syscall; 
0x0000000000132d10: mov r10, rcx; mov eax, 0xb5; syscall; 
0x0000000000132d60: mov r10, rcx; mov eax, 0xb6; syscall; 
0x00000000000f8210: mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000000f81b0: mov r10, rcx; mov eax, 0xbd; syscall; 
0x00000000000f8090: mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000000f80c0: mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000000f8120: mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000000f8000: mov r10, rcx; mov eax, 0xc1; syscall; 
0x00000000000f49c0: mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000000fbe10: mov r10, rcx; mov eax, 0xdc; syscall; 
0x00000000000fa9e9: mov r10, rcx; mov eax, 0xe8; syscall; 
0x00000000000fa9b0: mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000000f4870: mov r10, rcx; mov eax, 9; syscall; 
0x00000000000ece30: mov r10, rcx; movsxd r8, r8d; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x109; syscall; 
0x00000000000ecef0: mov r10, rcx; movsxd rdi, edi; mov eax, 0x10b; syscall; 
0x000000000005dbc0: mov r10, rcx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x108; syscall; 
0x00000000000f150f: mov r10, rcx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x127; syscall; 
0x00000000000f176f: mov r10, rcx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x128; syscall; 
0x000000000010891a: mov r10, rcx; movsxd rsi, esi; mov rdi, rbx; mov eax, 0xe6; syscall; 
0x000000000010896f: mov r10, rcx; syscall; 
0x000000000010aa88: mov r10, rdi; mov ebx, esi; xor edi, edi; lea rsi, qword ptr [rsp - 0x18]; mov eax, 0x83; syscall; 
0x00000000000ed287: mov r10, rdx; mov r8d, edi; mov rdx, rsi; mov eax, 0x11d; xor esi, esi; syscall; 
0x00000000000cb374: mov r10, rdx; movsxd rdi, edi; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x00000000000f2f5f: mov r10d, 0x100; mov rdi, -0x64; mov eax, 0x118; syscall; 
0x0000000000047104: mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000037c2e: mov r10d, 8; mov rsi, rbx; mov eax, 0x80; syscall; 
0x0000000000036ed0: mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x0000000000037d8e: mov r10d, 8; xor edx, edx; mov rsi, rbx; mov eax, 0x80; syscall; 
0x00000000000ec843: mov r10d, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x104; syscall; 
0x00000000000eb550: mov r10d, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x00000000000eb3ec: mov r10d, edx; movsxd rdi, edi; mov eax, 0x10c; syscall; 
0x0000000000144230: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144214: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001082ed: mov r11d, 0x3948002b; ret 0xda75; 
0x00000000001221d3: mov r12, rax; bswap ecx; mov dword ptr [rdx], ecx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x000000000012243c: mov r12, rdx; add r12, qword ptr [rbp + 0x50]; sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbp + 0x40]; 
0x0000000000121f44: mov r12, rdx; add r12, qword ptr [rbx + 0x50]; sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x000000000007a314: mov r12d, dword ptr [rbp]; or eax, 0x40; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x000000000007a313: mov r12d, dword ptr fs:[rbp]; or eax, 0x40; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x000000000005ec46: mov r13, r12; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000001adcf4: mov r13, r14; jmp qword ptr [rdx]; 
0x000000000011f5d7: mov r13d, 7; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000000f0830: mov r13d, dword ptr [r12]; syscall; 
0x00000000000f082f: mov r13d, dword ptr fs:[r12]; syscall; 
0x00000000001202a2: mov r13d, eax; mov rdi, rbx; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x00000000001adbd4: mov r13d, esi; jmp qword ptr [rdx]; 
0x0000000000036b1e: mov r14, qword ptr [rdi + 0x20]; mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x000000000007dea1: mov r14, rdx; call qword ptr [rax]; 
0x000000000012b301: mov r14, rsp; nop dword ptr [rax]; mov rax, qword ptr [r15 + 8]; mov rsi, rbx; mov rdi, r15; call qword ptr [rax]; 
0x00000000000deccf: mov r14d, r8d; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x0000000000036b22: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx; 
0x00000000001287cd: mov r15, r14; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000001870a4: mov r15b, spl; call rsi; 
0x00000000001870a4: mov r15b, spl; call rsi; mov esp, edi; jmp qword ptr [rsi - 0x77]; 
0x00000000001765b0: mov r15d, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000000c1f23: mov r15d, 0xd8f7002f; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f5771: mov r15d, r14d; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x00000000000cc5ed: mov r8, qword ptr [rbp - 0xc0]; mov rdx, r14; mov rsi, qword ptr [rbp - 0xb0]; mov rdi, qword ptr [rbp - 0xa8]; call rbx; 
0x00000000000471a1: mov r8, qword ptr [rdi + 0x28]; mov r9, qword ptr [rdi + 0x30]; mov rdi, qword ptr [rdi + 0x68]; xor eax, eax; ret; 
0x00000000000474e1: mov r8, qword ptr [rsi + 0x28]; mov r9, qword ptr [rsi + 0x30]; mov rsi, qword ptr [rsi + 0x70]; xor eax, eax; ret; 
0x0000000000022175: mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x00000000000274d2: mov r8, r12; mov rcx, rbp; mov rdx, qword ptr [r14]; mov rsi, r13; call qword ptr [rbx + 8]; 
0x000000000012a585: mov r8, r15; mov rcx, r14; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax; 
0x00000000000fa332: mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x00000000000f46ff: mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x0000000000110e21: mov r8, rbp; mov ecx, 0x400; mov rdx, r15; mov rdi, r12; call rax; 
0x0000000000091d57: mov r8, rdx; and r8d, 7; movsxd r8, dword ptr [rax + r8*4]; add rax, r8; jmp rax; 
0x00000000000f0935: mov r8, rsi; lea rdx, qword ptr [rsp - 0x38]; mov esi, 0x5401; movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000000b9f27: mov r8, rsp; mov byte ptr [rsp], 0; call 0xb80f0; add rsp, 0x18; ret; 
0x00000000000bc257: mov r8, rsp; mov byte ptr [rsp], 0; call 0xb9fa0; add rsp, 0x18; ret; 
0x00000000000cca90: mov r8b, 0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000959fd: mov r8d, 0xff2face8; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rax - 0x77]; ret 0x1e75; 
0x0000000000050ce3: mov r8d, 0xfff0b6e9; jmp qword ptr [rsi + 0xf]; 
0x00000000000ed03c: mov r8d, 8; mov eax, 0x10f; syscall; 
0x00000000000f0a7d: mov r8d, eax; mov edx, 1; mov esi, 0x5409; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000ebc46: mov r8d, eax; mov esi, 7; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000036fa3: mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x82; syscall; 
0x00000000000f057a: mov r8d, eax; mov rdx, qword ptr [rsp + 0x10]; movsxd rsi, dword ptr [rsp + 0xc]; movsxd rdi, dword ptr [rsp + 8]; mov eax, ebx; syscall; 
0x00000000000f125c: mov r8d, eax; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x13; syscall; 
0x00000000000f12fc: mov r8d, eax; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x14; syscall; 
0x00000000000eb619: mov r8d, eax; movsxd rdx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; syscall; 
0x00000000000f156f: mov r8d, eax; movsxd rdx, r12d; mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x127; syscall; 
0x00000000000f17cf: mov r8d, eax; movsxd rdx, r12d; mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x128; syscall; 
0x00000000000ed28a: mov r8d, edi; mov rdx, rsi; mov eax, 0x11d; xor esi, esi; syscall; 
0x00000000000fa698: mov r8d, esi; mov rdi, r9; movsxd rsi, esi; mov eax, ecx; syscall; 
0x0000000000071298: mov r8d, esi; ret; 
0x00000000000471a5: mov r9, qword ptr [rdi + 0x30]; mov rdi, qword ptr [rdi + 0x68]; xor eax, eax; ret; 
0x00000000000474e5: mov r9, qword ptr [rsi + 0x30]; mov rsi, qword ptr [rsi + 0x70]; xor eax, eax; ret; 
0x00000000000a42e8: mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000f4702: mov r9, qword ptr [rsp + 8]; syscall; 
0x00000000000b9f24: mov r9, r8; mov r8, rsp; mov byte ptr [rsp], 0; call 0xb80f0; add rsp, 0x18; ret; 
0x00000000000bc254: mov r9, r8; mov r8, rsp; mov byte ptr [rsp], 0; call 0xb9fa0; add rsp, 0x18; ret; 
0x00000000000f31af: mov r9, rsi; mov byte ptr [r9 - 1], 0; ret; 
0x0000000000082df1: mov r9b, 0xff; jmp qword ptr [rsi + 0x66]; 
0x00000000001a12bc: mov r9b, r14b; jmp qword ptr [rdx]; 
0x00000000001a1304: mov r9b, sil; jmp qword ptr [rdx]; 
0x00000000000cb1d0: mov r9d, 1; call 0xc9d70; add rsp, 0x18; ret; 
0x0000000000136256: mov r9d, dword ptr [rdx]; mov rdx, r12; add r9, r11; call rax; 
0x00000000000f0872: mov r9d, eax; pop r12; mov eax, r9d; pop r13; ret; 
0x00000000000e3cb0: mov r9d, edx; call 0xe32d0; add rsp, 0x18; ret; 
0x000000000009685d: mov r9d, r9d; movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x00000000000c094b: mov rax, -0xe; ret; 
0x00000000000380fe: mov rax, -1; add rsp, 0x240; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f0d88: mov rax, -1; cmove rbx, rax; add rsp, 0x60; mov rax, rbx; pop rbx; ret; 
0x000000000002f913: mov rax, -1; cmovne rax, rdx; ret; 
0x0000000000101de1: mov rax, -1; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000a3fb3: mov rax, -1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000786f0: mov rax, -1; pop rbx; ret; 
0x0000000000036bf6: mov rax, -1; ret; 
0x0000000000036bc8: mov rax, -1; test edx, edx; cmovns rax, qword ptr [rsp + 0xa0]; add rsp, 0x148; ret; 
0x00000000000377cd: mov rax, -2; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000036cb0: mov rax, 0xf; syscall; 
0x00000000000a2ee0: mov rax, 1; ret; 
0x00000000000a2ef0: mov rax, 2; ret; 
0x00000000000a2f00: mov rax, 3; ret; 
0x00000000000a2f10: mov rax, 4; ret; 
0x00000000000a2f20: mov rax, 5; ret; 
0x00000000000a2f30: mov rax, 6; ret; 
0x00000000000a2f40: mov rax, 7; ret; 
0x000000000006f5b8: mov rax, qword ptr [r12 + 0xd8]; mov edx, 0x10; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000749d9: mov rax, qword ptr [r12 + 0xd8]; mov esi, r14d; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000006f5ec: mov rax, qword ptr [r12 + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000126049: mov rax, qword ptr [r12 + 8]; lea rsi, qword ptr [rbp + 0x18]; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000125f53: mov rax, qword ptr [r12 + 8]; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000126018: mov rax, qword ptr [r12 + 8]; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000012602e: mov rax, qword ptr [r12 + 8]; mov rsi, rsp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x00000000001289cb: mov rax, qword ptr [r13 + 0x60]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000012a7ef: mov rax, qword ptr [r13 + 8]; mov qword ptr [rsp], r15; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x000000000011feef: mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000012a855: mov rax, qword ptr [r13 + 8]; mov rdi, r13; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x00000000001216f0: mov rax, qword ptr [r13 + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x00000000001217ec: mov rax, qword ptr [r13 + 8]; mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000001281f5: mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x00000000001281c8: mov rax, qword ptr [r14 + 0x60]; mov esi, dword ptr [r14 + 0x88]; mov rdi, r13; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x0000000000128236: mov rax, qword ptr [r14 + 0x60]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x0000000000127d05: mov rax, qword ptr [r14 + 0x70]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x00000000001281e1: mov rax, qword ptr [r14 + 0x90]; mov rsi, qword ptr [rbp - 0x180]; mov rdi, r13; add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x000000000012443b: mov rax, qword ptr [r14 + 0xd0]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000010207d: mov rax, qword ptr [r15 + 0x28]; mov edi, 0x2000001; mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x0000000000074d51: mov rax, qword ptr [r15 + 0xd8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000012b449: mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x000000000011fd82: mov rax, qword ptr [r15 + 8]; mov dword ptr [rsp + 0x1c], 0; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000011fceb: mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000012b4e4: mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x28]; 
0x000000000012b450: mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 8]; 
0x000000000012aa45: mov rax, qword ptr [r15 + 8]; mov rdi, r15; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000012b52b: mov rax, qword ptr [r15 + 8]; mov rdi, r15; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000012b308: mov rax, qword ptr [r15 + 8]; mov rsi, rbx; mov rdi, r15; call qword ptr [rax]; 
0x0000000000074db8: mov rax, qword ptr [r8 + 0x140]; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000123ae8: mov rax, qword ptr [r8]; bswap eax; mov dword ptr [rcx + 0xb4], eax; mov eax, 1; ret; 
0x0000000000123c30: mov rax, qword ptr [r8]; bswap eax; mov dword ptr [rcx + 0xb8], eax; mov eax, 1; ret; 
0x0000000000123c00: mov rax, qword ptr [r8]; sub eax, 1; bswap eax; mov dword ptr [rcx + 0xa8], eax; mov eax, 1; ret; 
0x0000000000135d57: mov rax, qword ptr [rax + 0x108]; jmp rax; 
0x000000000012ce67: mov rax, qword ptr [rax + 0x10]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000074e50: mov rax, qword ptr [rax + 0x140]; call qword ptr [rax + 0x68]; 
0x0000000000074f98: mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000074670: mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000000769db: mov rax, qword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000000704c0: mov rax, qword ptr [rax + 0x140]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000000fcd0f: mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x000000000012d65f: mov rax, qword ptr [rax + 0x18]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000007448b: mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000000fcabf: mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x000000000007b13b: mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000007482b: mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000074630: mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000010799f: mov rax, qword ptr [rax + 0x30]; ret; 
0x0000000000050a4f: mov rax, qword ptr [rax + 0x38]; mov dword ptr [rbp - 0xc8], r9d; mov rdx, r8; mov qword ptr [rbp - 0xb0], r8; mov rdi, rbx; call rax; 
0x0000000000075b20: mov rax, qword ptr [rax + 0x38]; mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x000000000007b687: mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000127603: mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000030101: mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000006ffa2: mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000007ba9b: mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000002ff31: mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000007026c: mov rax, qword ptr [rax + 0x48]; xor edx, edx; pop r12; jmp rax; 
0x0000000000070b83: mov rax, qword ptr [rax + 0x4c]; ret; 
0x0000000000127eb3: mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000002ff11: mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x00000000000f8298: mov rax, qword ptr [rax + 0x58]; ret; 
0x0000000000123a19: mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000f82a0: mov rax, qword ptr [rax + 0xc8]; ret; 
0x0000000000135c5e: mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x000000000012cff4: mov rax, qword ptr [rax + 8]; jmp rax; 
0x00000000000f8279: mov rax, qword ptr [rax + 8]; ret; 
0x00000000000cce08: mov rax, qword ptr [rax + 8]; test rax, rax; cmove rax, qword ptr [rbp - 0xa8]; mov rdi, rax; call rbx; 
0x000000000002ff34: mov rax, qword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000002fabe: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000013659c: mov rax, qword ptr [rax]; add rax, qword ptr [rdx + 8]; add rsp, 0x48; ret; 
0x000000000012cfe9: mov rax, qword ptr [rax]; jmp rax; 
0x00000000000bcb2a: mov rax, qword ptr [rax]; lea rdx, qword ptr [rdi + rdi*8]; lea rax, qword ptr [rax + rdx*8]; add rsp, 0x10; pop rbx; ret; 
0x000000000002cd6b: mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x0000000000135cdb: mov rax, qword ptr [rax]; mov qword ptr [rsp], rax; mov rax, qword ptr [rip + 0x288177]; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x00000000000300fe: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000002ff2e: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000002ff0e: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000002fabb: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000002cd68: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x00000000000300fb: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000002ff2b: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000002ff0b: mov rax, qword ptr [rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000135e5f: mov rax, qword ptr [rax]; mov rdx, qword ptr [rsp + 0x48]; add rax, qword ptr [rdx + 8]; add rsp, 0x58; ret; 
0x0000000000047598: mov rax, qword ptr [rax]; mov rdx, rax; call 0x475b0; add rsp, 0xd8; ret; 
0x000000000002fe6b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000002fe4b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000002fe2b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000002fdab: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000002fdeb: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000002fd4b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000002fdcb: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000002fd8b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000002feeb: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002fd6b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000002fe0b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000002fd2b: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x00000000001079ef: mov rax, qword ptr [rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x00000000000487a2: mov rax, qword ptr [rax]; pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x000000000011c418: mov rax, qword ptr [rax]; ret; 
0x00000000000b9f60: mov rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007958f: mov rax, qword ptr [rbp + 0xd8]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000007968c: mov rax, qword ptr [rbp + 0xd8]; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000012db05: mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x0000000000120f77: mov rax, qword ptr [rbp + 8]; lea esi, dword ptr [r12 + 3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x0000000000120ee0: mov rax, qword ptr [rbp + 8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000120fa1: mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x000000000011fffc: mov rax, qword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000012db38: mov rax, qword ptr [rbp + 8]; mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x00000000000cc9cf: mov rax, qword ptr [rbp - 0x120]; mov qword ptr [rsp], rax; call rbx; 
0x00000000000c3daf: mov rax, qword ptr [rbp - 0x418]; call qword ptr [rax + 0x20]; 
0x00000000000c3c42: mov rax, qword ptr [rbp - 0x418]; call qword ptr [rax + 0x30]; 
0x00000000000c3d5a: mov rax, qword ptr [rbp - 0x418]; lea rsi, qword ptr [rbp - 0x360]; mov rdi, r14; call qword ptr [rax + 0x40]; 
0x00000000000c39f6: mov rax, qword ptr [rbp - 0x418]; mov rdi, qword ptr [rbp - 0x3f8]; call qword ptr [rax + 0x28]; 
0x00000000000f5774: mov rax, qword ptr [rbp - 0x48]; call rax; 
0x00000000000bd88a: mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000023ff0: mov rax, qword ptr [rbp - 0x60]; call rax; 
0x0000000000101f3f: mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rbx + 0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012c38a: mov rax, qword ptr [rbx + 0x18]; lea r12, qword ptr [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x0000000000101f6f: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rbx + 0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012c3d0: mov rax, qword ptr [rbx + 0x18]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x0000000000072f60: mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x000000000011f4aa: mov rax, qword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000011f468: mov rax, qword ptr [rbx + 0x20]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000011f54e: mov rax, qword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000011f4be: mov rax, qword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x0000000000121570: mov rax, qword ptr [rbx + 0x23b8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000ed635: mov rax, qword ptr [rbx + 0x38]; lea rcx, qword ptr [rbx + 0x28]; mov rdi, qword ptr [rbx + 0x18]; mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x000000000012785f: mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000127875: mov rax, qword ptr [rbx + 0x70]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000006e008: mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x00000000000769d0: mov rax, qword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000123d34: mov rax, qword ptr [rbx + 0xd0]; mov dword ptr [rbx + 0xa8], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000123d53: mov rax, qword ptr [rbx + 0xd0]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000797c2: mov rax, qword ptr [rbx + 0xd8]; call qword ptr [rax + 0x20]; 
0x00000000000700d7: mov rax, qword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000007b230: mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007b7c4: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000007bd64: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000006de85: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x00000000000706ed: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000074820: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000074625: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000004a70c: mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; sub r13, rsi; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000004c1f6: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006ed8a: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006e6e1: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078d99: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000004a18c: mov rax, qword ptr [rbx + 0xd8]; mov rdx, r13; mov rsi, qword ptr [rbp - 0x598]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007a3c9: mov rax, qword ptr [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000004aa9e: mov rax, qword ptr [rbx + 0xd8]; mov rsi, qword ptr [r12 + 0x18]; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000070683: mov rax, qword ptr [rbx + 0xd8]; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000000792a9: mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000075cac: mov rax, qword ptr [rbx + 0xd8]; mov rsi, r15; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x000000000004eefd: mov rax, qword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007c152: mov rax, qword ptr [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000006d970: mov rax, qword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012ddb0: mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000012dd8f: mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000012d0c0: mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000012d0ed: mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000121af0: mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x00000000001202e8: mov rax, qword ptr [rbx + 8]; mov esi, r14d; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x0000000000072f58: mov rax, qword ptr [rbx + 8]; mov qword ptr [rbx + 0x10], rax; mov rax, qword ptr [rbx + 0x20]; mov qword ptr [rbx + 0x28], rax; pop rbx; ret; 
0x0000000000101f0f: mov rax, qword ptr [rbx + 8]; mov qword ptr [rbx + 8], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012ce48: mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012ce80: mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000120294: mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000120270: mov rax, qword ptr [rbx + 8]; mov rdi, rbx; mov qword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x0000000000121b10: mov rax, qword ptr [rbx + 8]; mov rsi, rsp; mov rdi, rbx; call qword ptr [rax]; 
0x000000000007a5c1: mov rax, qword ptr [rbx + 8]; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001202c0: mov rax, qword ptr [rbx + 8]; sub rdx, r13; mov esi, r12d; mov rdi, rbx; mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x0000000000129403: mov rax, qword ptr [rbx]; add rsp, 0xb8; pop rbx; pop rbp; ret; 
0x0000000000129343: mov rax, qword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x0000000000129da9: mov rax, qword ptr [rbx]; mov rdx, qword ptr [rax + 8]; mov rdi, rax; call qword ptr [rdx + 0x20]; 
0x00000000000738d2: mov rax, qword ptr [rcx + 0xd8]; mov rsi, rdi; mov rdx, rbp; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000015c936: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x00000000001585a6: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000015c956: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x00000000001585c6: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000015ebbe: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c976: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x00000000001585e6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000015c806: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x00000000001584d6: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000003c190: mov rax, qword ptr [rcx + 8]; mov rdi, qword ptr [rcx + 0x10]; mov esi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003c170: mov rax, qword ptr [rcx + 8]; mov rsi, qword ptr [rcx + 0x10]; mov edi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003c1b0: mov rax, qword ptr [rcx + 8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000015ec6b: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015c7b0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, qword ptr [rdx + 7]; ret; 
0x000000000015c8b0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, qword ptr [rdx + 8]; ret; 
0x0000000000158560: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x000000000015c8d0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, qword ptr [rdx + 9]; ret; 
0x0000000000158570: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x000000000015c8f0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, qword ptr [rdx + 0xa]; ret; 
0x0000000000158580: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x000000000015c910: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, qword ptr [rdx + 0xb]; ret; 
0x0000000000158590: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000015c930: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, qword ptr [rdx + 0xc]; ret; 
0x00000000001585a0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x000000000015c950: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, qword ptr [rdx + 0xd]; ret; 
0x00000000001585c0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x000000000015c970: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, qword ptr [rdx + 0xe]; ret; 
0x00000000001585e0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x000000000015c800: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, qword ptr [rdx + 0xf]; ret; 
0x00000000001584d0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000158480: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x00000000000e4d04: mov rax, qword ptr [rdi + 0x100]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x000000000007d080: mov rax, qword ptr [rdi + 0x10]; cmp qword ptr [rdi + 0x28], rax; cmovae rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000012e25e: mov rax, qword ptr [rdi + 0x18]; add rsi, rax; mov qword ptr [rdi + 0x18], rsi; ret; 
0x000000000012e66b: mov rax, qword ptr [rdi + 0x18]; pop rbx; pop rbp; pop r12; ret; 
0x000000000012e200: mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000120d5e: mov rax, qword ptr [rdi + 0x20]; mov qword ptr [rsi + 8], rax; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000bd240: mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000120d66: mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000072fa0: mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x000000000012b0c8: mov rax, qword ptr [rdi + 0x30]; mov qword ptr [rsp + 0x20], rax; mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000011f5dd: mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000123e79: mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000129349: mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000011f486: mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x0000000000120d96: mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsi + 8], rax; mov rax, qword ptr [rdi + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000012b08b: mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012b08b: mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x0000000000120d9e: mov rax, qword ptr [rdi + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000072e90: mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x0000000000070b80: mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000007b02a: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000007c870: mov rax, qword ptr [rdi + 0x68]; ret; 
0x00000000000e43f7: mov rax, qword ptr [rdi + 0x80]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x000000000005dca0: mov rax, qword ptr [rdi + 0x88]; mov qword ptr [rax + 8], r8; mov dword ptr [rax + 4], 1; xor eax, eax; ret; 
0x0000000000128033: mov rax, qword ptr [rdi + 0x90]; bswap edx; mov dword ptr [rax + 0x10], edx; mov eax, 1; ret; 
0x0000000000127f13: mov rax, qword ptr [rdi + 0x90]; bswap edx; mov dword ptr [rax + 0xc], edx; mov eax, 1; ret; 
0x000000000007a31d: mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x0000000000073699: mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x60]; 
0x000000000007ba90: mov rax, qword ptr [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x0000000000076011: mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000000750b0: mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000007b134: mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x18]; jmp rax; 
0x000000000007b680: mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x0000000000074431: mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000007b97a: mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x60]; 
0x000000000006fdf7: mov rax, qword ptr [rdi + 0xd8]; mov rdx, rbp; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x000000000005ea68: mov rax, qword ptr [rdi + 0xd8]; movsxd r12, edx; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000049be0: mov rax, qword ptr [rdi + 0xd8]; movsxd r13, edx; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000012b094: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012b094: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; add rsp, 0x68; ret; 
0x000000000011f7e0: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x00000000001293f4: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x000000000012e0c1: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e0c1: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; ret; 
0x0000000000121a5a: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121a5a: mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; add rsp, 0x10; pop rbx; ret; 
0x000000000012941c: mov rax, qword ptr [rdi + 8]; lea rdx, qword ptr [rsp + 0x10]; mov esi, 6; call qword ptr [rax + 0x28]; 
0x000000000012949a: mov rax, qword ptr [rdi + 8]; lea rdx, qword ptr [rsp + 0xc]; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x0000000000127030: mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x000000000012d6f0: mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000121aa0: mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 8]; call qword ptr [rax]; 
0x000000000012d9d0: mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp + 8], r8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000012d470: mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp], rdx; mov rsi, rsp; call qword ptr [rax + 8]; 
0x000000000012e008: mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x000000000012e018: mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x000000000012cff0: mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax + 8]; jmp rax; 
0x000000000012cfe5: mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax]; jmp rax; 
0x000000000012dd58: mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x0000000000121a30: mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000012dd7d: mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d09e: mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x000000000012dedd: mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d15e: mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x0000000000039e7b: mov rax, qword ptr [rdi]; mov dword ptr [rsp - 0x18], eax; shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000108174: mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x0000000000072f91: mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x0000000000072e81: mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000075867: mov rax, qword ptr [rdx + 8]; cmp qword ptr [rdx + 0x20], rax; cmovae rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x00000000001211d7: mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x0000000000037a6f: mov rax, qword ptr [rdx]; and rax, qword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000001276b0: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [rcx + 0x54], eax; mov eax, 1; ret; 
0x0000000000127780: mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [rcx + 0x58], eax; mov eax, 1; ret; 
0x00000000000e3177: mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x0000000000037b6f: mov rax, qword ptr [rdx]; or rax, qword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000127750: mov rax, qword ptr [rdx]; sub eax, 1; bswap eax; mov dword ptr [rcx + 0x48], eax; mov eax, 1; ret; 
0x0000000000136500: mov rax, qword ptr [rip + 0x287881]; add rax, qword ptr fs:[0]; ret; 
0x00000000001365e0: mov rax, qword ptr [rip + 0x287881]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000135f60: mov rax, qword ptr [rip + 0x287ef9]; call qword ptr [rax + 0xf0]; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000135d50: mov rax, qword ptr [rip + 0x288109]; mov rax, qword ptr [rax + 0x108]; jmp rax; 
0x0000000000135ce2: mov rax, qword ptr [rip + 0x288177]; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x0000000000135c81: mov rax, qword ptr [rip + 0x2881d8]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x0000000000135c50: mov rax, qword ptr [rip + 0x288209]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x0000000000133700: mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000001336b0: mov rax, qword ptr [rip + 0x288441]; pop r12; jmp rax; 
0x0000000000133650: mov rax, qword ptr [rip + 0x288499]; pop r12; jmp rax; 
0x00000000001335ea: mov rax, qword ptr [rip + 0x2884f7]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000001355e0: mov rax, qword ptr [rip + 0x288881]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000013524c: mov rax, qword ptr [rip + 0x28a63d]; call qword ptr [rax + 0x28]; 
0x0000000000135225: mov rax, qword ptr [rip + 0x28a664]; call qword ptr [rax]; 
0x0000000000134e9a: mov rax, qword ptr [rip + 0x28a9ef]; xor ebp, ebp; call qword ptr [rax + 0x28]; 
0x0000000000132ec8: mov rax, qword ptr [rip + 0x28af99]; mov dword ptr fs:[rax], 2; mov eax, 0xffffffff; ret; 
0x0000000000132db0: mov rax, qword ptr [rip + 0x28b0b1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d90: mov rax, qword ptr [rip + 0x28b0d1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d40: mov rax, qword ptr [rip + 0x28b121]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132cf0: mov rax, qword ptr [rip + 0x28b171]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000133bbf: mov rax, qword ptr [rip + 0x28bcca]; mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x18]; 
0x0000000000133b1c: mov rax, qword ptr [rip + 0x28bd6d]; mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x00000000001338c1: mov rax, qword ptr [rip + 0x28bfc8]; call qword ptr [rax + 0x28]; 
0x0000000000133854: mov rax, qword ptr [rip + 0x28c035]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x00000000001337d7: mov rax, qword ptr [rip + 0x28c0b2]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x0000000000133761: mov rax, qword ptr [rip + 0x28c128]; call qword ptr [rax]; 
0x0000000000136b60: mov rax, qword ptr [rip + 0x28d429]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136b30: mov rax, qword ptr [rip + 0x28d451]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136b00: mov rax, qword ptr [rip + 0x28d479]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136ad0: mov rax, qword ptr [rip + 0x28d4a1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136b9d: mov rax, qword ptr [rip + 0x28d4a4]; mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000136aa0: mov rax, qword ptr [rip + 0x28d4c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136a70: mov rax, qword ptr [rip + 0x28d4f1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ac80: mov rax, qword ptr [rip + 0x293201]; add rsp, 8; ret; 
0x000000000012ac50: mov rax, qword ptr [rip + 0x293299]; add rsp, 8; ret; 
0x000000000012abf0: mov rax, qword ptr [rip + 0x293381]; add rsp, 8; ret; 
0x000000000012ac20: mov rax, qword ptr [rip + 0x2933c1]; add rsp, 8; ret; 
0x000000000012ab10: mov rax, qword ptr [rip + 0x293469]; lea rdx, qword ptr [rip + 0x298d62]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000011c410: mov rax, qword ptr [rip + 0x2a1bd9]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000011bcc0: mov rax, qword ptr [rip + 0x2a8331]; lea rsi, qword ptr [rip - 0x85e]; lea rdi, qword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001121b0: mov rax, qword ptr [rip + 0x2ad839]; ret; 
0x000000000010c8c0: mov rax, qword ptr [rip + 0x2b1591]; add rax, qword ptr fs:[0]; ret; 
0x0000000000112095: mov rax, qword ptr [rip + 0x2b1f5c]; lea rsi, qword ptr [rip - 0x83]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000010a285: mov rax, qword ptr [rip + 0x2b3bdc]; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x00000000001088d0: mov rax, qword ptr [rip + 0x2b5591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000108844: mov rax, qword ptr [rip + 0x2b55cd]; mov rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010c4a5: mov rax, qword ptr [rip + 0x2b6364]; add rsp, 0x28; jmp rax; 
0x00000000001086ce: mov rax, qword ptr [rip + 0x2ba0bb]; add rsp, 0x1010; pop rbx; pop rbp; pop r12; ret; 
0x0000000000108030: mov rax, qword ptr [rip + 0x2bbfb1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000108000: mov rax, qword ptr [rip + 0x2bbfd9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107fd0: mov rax, qword ptr [rip + 0x2bc001]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107fa0: mov rax, qword ptr [rip + 0x2bc029]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f70: mov rax, qword ptr [rip + 0x2bc051]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f40: mov rax, qword ptr [rip + 0x2bc079]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f10: mov rax, qword ptr [rip + 0x2bc0a1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ee0: mov rax, qword ptr [rip + 0x2bc0c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107eb0: mov rax, qword ptr [rip + 0x2bc0f1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107e50: mov rax, qword ptr [rip + 0x2bc109]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107e85: mov rax, qword ptr [rip + 0x2bc114]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000107e20: mov rax, qword ptr [rip + 0x2bc131]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107df0: mov rax, qword ptr [rip + 0x2bc159]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107dc0: mov rax, qword ptr [rip + 0x2bc181]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d90: mov rax, qword ptr [rip + 0x2bc1a9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d60: mov rax, qword ptr [rip + 0x2bc1d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d30: mov rax, qword ptr [rip + 0x2bc1f9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d00: mov rax, qword ptr [rip + 0x2bc221]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107cd0: mov rax, qword ptr [rip + 0x2bc249]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ca0: mov rax, qword ptr [rip + 0x2bc271]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c70: mov rax, qword ptr [rip + 0x2bc299]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c40: mov rax, qword ptr [rip + 0x2bc2c1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c10: mov rax, qword ptr [rip + 0x2bc2e9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107be0: mov rax, qword ptr [rip + 0x2bc311]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107bb0: mov rax, qword ptr [rip + 0x2bc339]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b80: mov rax, qword ptr [rip + 0x2bc361]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b50: mov rax, qword ptr [rip + 0x2bc389]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b20: mov rax, qword ptr [rip + 0x2bc3b1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107af0: mov rax, qword ptr [rip + 0x2bc3d9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ac0: mov rax, qword ptr [rip + 0x2bc3f9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107a90: mov rax, qword ptr [rip + 0x2bc501]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000fd420: mov rax, qword ptr [rip + 0x2c0a39]; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000000fb0a0: mov rax, qword ptr [rip + 0x2c2dc1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f9660: mov rax, qword ptr [rip + 0x2c4801]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fcd08: mov rax, qword ptr [rip + 0x2c4ce9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000000fcab8: mov rax, qword ptr [rip + 0x2c4f39]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000f8fc4: mov rax, qword ptr [rip + 0x2c4fd5]; mov qword ptr [rax], rbx; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x00000000000f8280: mov rax, qword ptr [rip + 0x2c5be1]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000f7820: mov rax, qword ptr [rip + 0x2c6641]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f4c00: mov rax, qword ptr [rip + 0x2c9261]; mov dword ptr fs:[rax], 0x16; pop rbx; ret; 
0x00000000000f4b20: mov rax, qword ptr [rip + 0x2c9341]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000000f3020: mov rax, qword ptr [rip + 0x2cae41]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2f88: mov rax, qword ptr [rip + 0x2caed9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f22b0: mov rax, qword ptr [rip + 0x2cbbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2280: mov rax, qword ptr [rip + 0x2cbbe1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f19f0: mov rax, qword ptr [rip + 0x2cc471]; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f1950: mov rax, qword ptr [rip + 0x2cc511]; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f11c0: mov rax, qword ptr [rip + 0x2ccca1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f10f0: mov rax, qword ptr [rip + 0x2ccd71]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000f1110: mov rax, qword ptr [rip + 0x2ccda1]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000f1006: mov rax, qword ptr [rip + 0x2cce5b]; neg edx; mov dword ptr fs:[rax], edx; or eax, 0xffffffff; ret; 
0x00000000000f09c9: mov rax, qword ptr [rip + 0x2cd498]; neg edx; mov dword ptr fs:[rax], edx; or eax, 0xffffffff; ret; 
0x00000000000f0680: mov rax, qword ptr [rip + 0x2cd7e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f0620: mov rax, qword ptr [rip + 0x2cd841]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000efcc0: mov rax, qword ptr [rip + 0x2ce1a1]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x00000000000ee2b0: mov rax, qword ptr [rip + 0x2cfbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000ed3a0: mov rax, qword ptr [rip + 0x2d0ac1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000ed388: mov rax, qword ptr [rip + 0x2d0ad9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000ed330: mov rax, qword ptr [rip + 0x2d0b31]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2490: mov rax, qword ptr [rip + 0x2d1b61]; lea rsi, qword ptr [rip - 0x6e]; lea rdi, qword ptr [rip + 0x2cf08b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ebda8: mov rax, qword ptr [rip + 0x2d20b9]; mov dword ptr fs:[rax], 0x16; add rsp, 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000ebb1a: mov rax, qword ptr [rip + 0x2d2347]; neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x00000000000f18eb: mov rax, qword ptr [rip + 0x2d2766]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f187b: mov rax, qword ptr [rip + 0x2d27d6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000eb430: mov rax, qword ptr [rip + 0x2d2a31]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x00000000000eb418: mov rax, qword ptr [rip + 0x2d2a49]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb208: mov rax, qword ptr [rip + 0x2d2c59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb1b0: mov rax, qword ptr [rip + 0x2d2cb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb150: mov rax, qword ptr [rip + 0x2d2d11]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb0f0: mov rax, qword ptr [rip + 0x2d2d71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb0a0: mov rax, qword ptr [rip + 0x2d2dc1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb050: mov rax, qword ptr [rip + 0x2d2e11]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000e8a32: mov rax, qword ptr [rip + 0x2db5a7]; xor esi, esi; mov edi, dword ptr [rsp + 0xe0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cb3b3: mov rax, qword ptr [rip + 0x2f2aae]; neg r8d; mov dword ptr fs:[rax], r8d; or eax, 0xffffffff; ret; 
0x00000000000c26e8: mov rax, qword ptr [rip + 0x2fb779]; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x00000000000c2680: mov rax, qword ptr [rip + 0x2fb7e1]; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x00000000000c12b0: mov rax, qword ptr [rip + 0x2fcbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bf780: mov rax, qword ptr [rip + 0x2fe6e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bce28: mov rax, qword ptr [rip + 0x301039]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bcddd: mov rax, qword ptr [rip + 0x301084]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000c20f4: mov rax, qword ptr [rip + 0x301f5d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c2084: mov rax, qword ptr [rip + 0x301fcd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1e22: mov rax, qword ptr [rip + 0x30222f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1dc2: mov rax, qword ptr [rip + 0x30228f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c10c8: mov rax, qword ptr [rip + 0x302f99]; mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc808: mov rax, qword ptr [rip + 0x3077f9]; lea rdi, qword ptr [rip + 0x3032ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc7e8: mov rax, qword ptr [rip + 0x307821]; lea rdi, qword ptr [rip + 0x30330a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000bc709: mov rax, qword ptr [rip + 0x3078f8]; lea rdi, qword ptr [rip + 0x3033e9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc6e7: mov rax, qword ptr [rip + 0x307922]; lea rdi, qword ptr [rip + 0x30340b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc500: mov rax, qword ptr [rip + 0x307b09]; lea rdi, qword ptr [rip + 0x3035f2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc4d5: mov rax, qword ptr [rip + 0x307b2c]; lea rdi, qword ptr [rip + 0x30361d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc388: mov rax, qword ptr [rip + 0x307c79]; lea rdi, qword ptr [rip + 0x30376a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc323: mov rax, qword ptr [rip + 0x307ce6]; lea rdi, qword ptr [rip + 0x3037cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b42f0: mov rax, qword ptr [rip + 0x309b71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b06b0: mov rax, qword ptr [rip + 0x30d7b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000b05b0: mov rax, qword ptr [rip + 0x30d8b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000b210e: mov rax, qword ptr [rip + 0x311d03]; add rsp, 8; ret; 
0x00000000000aeff8: mov rax, qword ptr [rip + 0x315009]; lea rdi, qword ptr [rip + 0x310afa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aef41: mov rax, qword ptr [rip + 0x3150c8]; lea rdi, qword ptr [rip + 0x310bb1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008aa9b: mov rax, qword ptr [rip + 0x339576]; lea rdi, qword ptr [rip + 0x336247]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008263e: mov rax, qword ptr [rip + 0x33b88b]; mov qword ptr [rax], rdi; ret; 
0x0000000000082634: mov rax, qword ptr [rip + 0x33b99d]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x33b88b]; mov qword ptr [rax], rdi; ret; 
0x0000000000081318: mov rax, qword ptr [rip + 0x33cb49]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000080a67: mov rax, qword ptr [rip + 0x33d34a]; xor edi, edi; call qword ptr [rax]; 
0x0000000000080951: mov rax, qword ptr [rip + 0x33d460]; mov rdi, rcx; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x0000000000080801: mov rax, qword ptr [rip + 0x33d5b0]; mov qword ptr [rsp + 0x28], r14; mov rdi, r14; call qword ptr [rax]; 
0x000000000007dee9: mov rax, qword ptr [rip + 0x33fec8]; xor edi, edi; mov qword ptr [rsp + 8], rcx; call qword ptr [rax]; 
0x000000000007de98: mov rax, qword ptr [rip + 0x33ff19]; xor edi, edi; mov r14, rdx; call qword ptr [rax]; 
0x000000000007c850: mov rax, qword ptr [rip + 0x342949]; ret; 
0x000000000007840a: mov rax, qword ptr [rip + 0x345b2f]; mov rdi, qword ptr [rax]; call 0x5eaf0; add rsp, 0xd8; ret; 
0x0000000000071418: mov rax, qword ptr [rip + 0x34ca49]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000006fff8: mov rax, qword ptr [rip + 0x34de69]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000064e23: mov rax, qword ptr [rip + 0x35f20e]; xor esi, esi; lea rdi, qword ptr [rbp - 0xf0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000005d11c: mov rax, qword ptr [rip + 0x360e95]; mov rdi, qword ptr [rax]; call 0x54630; add rsp, 0xd8; ret; 
0x00000000000543ca: mov rax, qword ptr [rip + 0x369b6f]; mov rdi, qword ptr [rax]; call 0x49c40; add rsp, 0xd8; ret; 
0x0000000000054d8d: mov rax, qword ptr [rip + 0x36f2a4]; xor esi, esi; lea rdi, qword ptr [rbp - 0x170]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000047590: mov rax, qword ptr [rip + 0x376829]; mov rax, qword ptr fs:[rax]; mov rdx, rax; call 0x475b0; add rsp, 0xd8; ret; 
0x00000000000491b0: mov rax, qword ptr [rip + 0x37ae29]; lea rsi, qword ptr [rsp + 0x60]; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049190: mov rax, qword ptr [rip + 0x37ae49]; xor esi, esi; mov edi, dword ptr [rsp + 0x60]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000049160: mov rax, qword ptr [rip + 0x37ae91]; lea rsi, qword ptr [rip - 0x6ee]; lea rdi, qword ptr [rip + 0x37777b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003cd58: mov rax, qword ptr [rip + 0x381109]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003ccb0: mov rax, qword ptr [rip + 0x3811b1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037b80: mov rax, qword ptr [rip + 0x3862e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037a80: mov rax, qword ptr [rip + 0x3863e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037983: mov rax, qword ptr [rip + 0x3864de]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000378e0: mov rax, qword ptr [rip + 0x386581]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000037840: mov rax, qword ptr [rip + 0x386621]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000037820: mov rax, qword ptr [rip + 0x386641]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000377e0: mov rax, qword ptr [rip + 0x386681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000377a0: mov rax, qword ptr [rip + 0x3866c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037768: mov rax, qword ptr [rip + 0x3866f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000376b8: mov rax, qword ptr [rip + 0x3867a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036ebd: mov rax, qword ptr [rip + 0x386fa4]; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x0000000000036c80: mov rax, qword ptr [rip + 0x3871e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036be8: mov rax, qword ptr [rip + 0x387279]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000003698e: mov rax, qword ptr [rip + 0x3874d3]; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbx; ret; 
0x0000000000036652: mov rax, qword ptr [rip + 0x38780f]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000036386: mov rax, qword ptr [rip + 0x387adb]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000035881: mov rax, qword ptr [rip + 0x3885e0]; mov ebp, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov rdi, rbx; mov eax, 3; syscall; 
0x0000000000036b40: mov rax, qword ptr [rip + 0x38d4a9]; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000030110: mov rax, qword ptr [rip + 0x38dce9]; add rax, qword ptr fs:[0]; ret; 
0x00000000000301ae: mov rax, qword ptr [rip + 0x38dd6b]; add rdx, 0x200; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000030130: mov rax, qword ptr [rip + 0x38dda1]; add rax, qword ptr fs:[0]; ret; 
0x000000000002fab0: mov rax, qword ptr [rip + 0x38e309]; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000002fa6c: mov rax, qword ptr [rip + 0x38e365]; mov qword ptr [rax], rdx; ret; 
0x000000000002f905: mov rax, qword ptr [rip + 0x38e5cc]; mov qword ptr fs:[rax], rsi; cmp rdx, rcx; mov rax, -1; cmovne rax, rdx; ret; 
0x000000000002e6c9: mov rax, qword ptr [rip + 0x38f798]; mov dword ptr fs:[rax], 0x16; movsxd rdi, r13d; mov eax, 3; syscall; 
0x00000000000340e8: mov rax, qword ptr [rip + 0x38ff21]; lea rdi, qword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000340c0: mov rax, qword ptr [rip + 0x38ff41]; lea rdi, qword ptr [rip + 0x38bbb2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002cd60: mov rax, qword ptr [rip + 0x391059]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x00000000000321a4: mov rax, qword ptr [rip + 0x391e65]; lea rdi, qword ptr [rip + 0x38dbae]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003212d: mov rax, qword ptr [rip + 0x391ed4]; lea rdi, qword ptr [rip + 0x38dc25]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032048: mov rax, qword ptr [rip + 0x391fc1]; lea rdi, qword ptr [rip + 0x38dd0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032020: mov rax, qword ptr [rip + 0x391fd9]; lea rdi, qword ptr [rip + 0x38dd32]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031e33: mov rax, qword ptr [rip + 0x3921ce]; lea rdi, qword ptr [rip + 0x38debf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031b8f: mov rax, qword ptr [rip + 0x39247a]; lea rdi, qword ptr [rip + 0x38e0e3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aee: mov rax, qword ptr [rip + 0x39251b]; lea rdi, qword ptr [rip + 0x38e204]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031acc: mov rax, qword ptr [rip + 0x39252d]; lea rdi, qword ptr [rip + 0x38e1a6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031aa1: mov rax, qword ptr [rip + 0x392558]; lea rdi, qword ptr [rip + 0x38e051]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031a7f: mov rax, qword ptr [rip + 0x39257a]; lea rdi, qword ptr [rip + 0x38e273]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318ed: mov rax, qword ptr [rip + 0x39271c]; lea rdi, qword ptr [rip + 0x38e385]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000318c6: mov rax, qword ptr [rip + 0x392743]; lea rdi, qword ptr [rip + 0x38e22c]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000031463: mov rax, qword ptr [rip + 0x392ba6]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000313f0: mov rax, qword ptr [rip + 0x392c19]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000312c6: mov rax, qword ptr [rip + 0x392d3b]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030e68: mov rax, qword ptr [rip + 0x3931a1]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030dbc: mov rax, qword ptr [rip + 0x39323d]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030d99: mov rax, qword ptr [rip + 0x393270]; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002c160: mov rax, qword ptr [rip + 0x393959]; ret; 
0x00000000000305e0: mov rax, qword ptr [rip + 0x393a21]; lea rdi, qword ptr [rip + 0x38f692]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000304f8: mov rax, qword ptr [rip + 0x393b11]; lea rdi, qword ptr [rip + 0x38f77a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030398: mov rax, qword ptr [rip + 0x393c69]; lea rdi, qword ptr [rip + 0x38f8da]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f890: mov rax, qword ptr [rip + 0x394779]; lea rdi, qword ptr [rip + 0x390262]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f870: mov rax, qword ptr [rip + 0x394791]; lea rdi, qword ptr [rip + 0x390282]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7d0: mov rax, qword ptr [rip + 0x394839]; lea rdi, qword ptr [rip + 0x390322]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f7a5: mov rax, qword ptr [rip + 0x39485c]; lea rdi, qword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f5c9: mov rax, qword ptr [rip + 0x394a40]; lea rdi, qword ptr [rip + 0x390529]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f577: mov rax, qword ptr [rip + 0x394a92]; lea rdi, qword ptr [rip + 0x39057b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f465: mov rax, qword ptr [rip + 0x394b9c]; lea rdi, qword ptr [rip + 0x39068d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d74d: mov rax, qword ptr [rip + 0x3968bc]; lea rdi, qword ptr [rip + 0x3923a5]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d72b: mov rax, qword ptr [rip + 0x3968de]; lea rdi, qword ptr [rip + 0x3923c7]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d508: mov rax, qword ptr [rip + 0x396b01]; lea rdi, qword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d4e0: mov rax, qword ptr [rip + 0x396b29]; lea rdi, qword ptr [rip + 0x392612]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d494: mov rax, qword ptr [rip + 0x396b75]; lea rdi, qword ptr [rip + 0x39265e]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d280: mov rax, qword ptr [rip + 0x396d81]; lea rdi, qword ptr [rip + 0x392872]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000022cae: mov rax, qword ptr [rip + 0x39b1b3]; mov dword ptr fs:[rax], 9; mov eax, edi; ret; 
0x0000000000022760: mov rax, qword ptr [rip + 0x39b701]; add rax, qword ptr fs:[0]; ret; 
0x0000000000021f2b: mov rax, qword ptr [rip + 0x39bf76]; mov rsi, qword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000002211c: mov rax, qword ptr [rip + 0x39d93d]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x00000000000237e0: mov rax, qword ptr [rip + 0x3a0461]; ret; 
0x00000000000237d0: mov rax, qword ptr [rip + 0x3a0481]; ret; 
0x0000000000021f53: mov rax, qword ptr [rip + 0x3a20f6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c093b: mov rax, qword ptr [rsi + 0x10]; mov qword ptr [rsi + 0x10], rax; mov rax, qword ptr [rsi + 0x18]; mov qword ptr [rsi + 0x18], rax; mov rax, -0xe; ret; 
0x00000000000c0943: mov rax, qword ptr [rsi + 0x18]; mov qword ptr [rsi + 0x18], rax; mov rax, -0xe; ret; 
0x00000000000fe5d0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000fe540: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000fe4b0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000fe270: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000fe390: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000fe050: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x00000000000fe300: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000fe0e0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000fe160: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x00000000000fe420: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x00000000000fdfc0: mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x00000000000300b0: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000030090: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000030070: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000002fff0: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000030030: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000002ff90: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000030010: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000002ffd0: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000002ff60: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002ffb0: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000030050: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000002ff70: mov rax, qword ptr [rsi + 0x68]; movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x00000000000300d0: mov rax, qword ptr [rsi + 0x70]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000300e0: mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x000000000007c530: mov rax, qword ptr [rsi + 0xd8]; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000000d1f38: mov rax, qword ptr [rsi + 8]; mov qword ptr [rax + 0x20], rsi; xor eax, eax; ret; 
0x0000000000117fe6: mov rax, qword ptr [rsi + 8]; mov qword ptr [rdx + 0x10], rax; xor eax, eax; ret; 
0x000000000002efe0: mov rax, qword ptr [rsi + rdx*8 + 0x80]; ret; 
0x00000000000d4ad0: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000aedd3: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x20; pop rbx; ret; 
0x00000000000f5449: mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000bdc07: mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp], rdx; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x0000000000122698: mov rax, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000129792: mov rax, qword ptr [rsp + 0x14]; mov qword ptr [rbx], rax; xor eax, eax; add rsp, 0x30; pop rbx; ret; 
0x0000000000021f3e: mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000012a80e: mov rax, qword ptr [rsp + 0x18]; mov dword ptr [rax], 0xf; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000012a9fa: mov rax, qword ptr [rsp + 0x18]; mov dword ptr [rax], 0xf; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x0000000000121228: mov rax, qword ptr [rsp + 0x18]; mov esi, r13d; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000012001b: mov rax, qword ptr [rsp + 0x20]; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000027f1d: mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rsp + 8], esi; mov rsi, qword ptr [rsp + 0x50]; call rax; 
0x0000000000122798: mov rax, qword ptr [rsp + 0x20]; mov rcx, rbp; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000010d012: mov rax, qword ptr [rsp + 0x30]; add rsp, 0x40; pop rbx; pop rbp; pop r12; ret; 
0x0000000000126970: mov rax, qword ptr [rsp + 0x38]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000126768: mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x000000000002762b: mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a55b: mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000027937: mov rax, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002873f: mov rax, qword ptr [rsp + 0x58]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000126a87: mov rax, qword ptr [rsp + 0x58]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000002813e: mov rax, qword ptr [rsp + 0x78]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000126819: mov rax, qword ptr [rsp + 0x78]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000126b68: mov rax, qword ptr [rsp + 0x88]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000072349: mov rax, qword ptr [rsp + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000120714: mov rax, qword ptr [rsp + 0xe8]; mov rdi, r14; call qword ptr [rax + 0x20]; 
0x000000000003d078: mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f1285: mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000000f531d: mov rax, qword ptr [rsp + 8]; mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000000f532c: mov rax, qword ptr [rsp + 8]; mov rdi, rax; call 0x1f4f0; mov rdi, qword ptr [r15]; call rbx; 
0x000000000011ece6: mov rax, qword ptr [rsp + 8]; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x0000000000133a23: mov rax, qword ptr [rsp]; add rsp, 0x10; pop rbx; ret; 
0x0000000000124f13: mov rax, qword ptr [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000013355c: mov rax, qword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000000fd482: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000fd4e3: mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000012cf31: mov rax, qword ptr [rsp]; mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x00000000001201f8: mov rax, qword ptr [rsp]; mov rsi, qword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000012d391: mov rax, qword ptr [rsp]; mov word ptr [rbx], ax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000002faba: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000002cd67: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x00000000000300fa: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x40]; movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000002ff2a: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000002ff0a: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000047597: mov rax, qword ptr fs:[rax]; mov rdx, rax; call 0x475b0; add rsp, 0xd8; ret; 
0x000000000002fe6a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000002fe4a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000002fe2a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000002fdaa: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000002fdea: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000002fd4a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000002fdca: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000002fd8a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000002feea: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002fd6a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000002fe0a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000002fd2a: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x00000000001079ee: mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x000000000011c417: mov rax, qword ptr fs:[rax]; ret; 
0x0000000000108d7f: mov rax, r10; ret; 
0x0000000000092191: mov rax, r11; pop rbx; pop rbp; pop r12; ret; 
0x00000000000388a4: mov rax, r12; pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000000b167a: mov rax, r12; pop r12; pop r13; pop r14; ret; 
0x000000000006cd4f: mov rax, r12; pop r12; ret; 
0x000000000007b7f7: mov rax, r12; pop r12; sub rax, r13; pop r13; pop r14; ret; 
0x000000000006c983: mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000006edc4: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000792f5: mov rax, r13; sub rax, r12; pop r12; pop r13; pop r14; ret; 
0x00000000000bd31c: mov rax, r14; pop r14; ret; 
0x00000000001287c5: mov rax, r15; lea rsi, qword ptr [r12 + 0x18]; mov r15, r14; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000000814d1: mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007d4fd: mov rax, r8; ret; 
0x00000000000c970e: mov rax, rbp; add rsp, 0x60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000079469: mov rax, rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000073949: mov rax, rbp; mov dword ptr [rbx], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000006f608: mov rax, rbp; pop rbp; pop r12; pop r13; ret; 
0x000000000006e251: mov rax, rbp; pop rbp; pop r12; ret; 
0x00000000000f4e6f: mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000006f5db: mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000c978c: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000007346f: mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000021b13: mov rax, rbp; sar rax, 1; pop rbp; mov qword ptr [rip + 0x39c70f], rax; pop r12; ret; 
0x000000000006fc91: mov rax, rbx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b2993: mov rax, rbx; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b0577: mov rax, rbx; add rsp, 0x20; pop rbx; ret; 
0x00000000000498c0: mov rax, rbx; add rsp, 0x440; pop rbx; ret; 
0x0000000000092076: mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000bda01: mov rax, rbx; call rax; 
0x00000000000f7ebe: mov rax, rbx; mov byte ptr [rdx], 0; pop rbx; ret; 
0x000000000002cc75: mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000006e60e: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000003407e: mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000003ca6a: mov rax, rbx; pop rbx; ret; 
0x0000000000030752: mov rax, rcx; pop r13; ret; 
0x0000000000085121: mov rax, rcx; pop r14; ret; 
0x00000000000306d8: mov rax, rcx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000003576e: mov rax, rcx; pop rbx; ret; 
0x0000000000035778: mov rax, rcx; ret; 
0x0000000000108c1e: mov rax, rdi; add rsp, 8; ret; 
0x0000000000049718: mov rax, rdi; cmovae rax, rsi; pop rbx; ret; 
0x00000000000497f4: mov rax, rdi; cmovae rax, rsi; ret; 
0x000000000003c8d0: mov rax, rdi; cqo; idiv rsi; ret; 
0x00000000000f3229: mov rax, rdi; mov byte ptr [r9 - 1], 0; ret; 
0x00000000000968e6: mov rax, rdi; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000fa4f0: mov rax, rdi; movzx edi, dil; shr rax, 0xc; xor al, al; or eax, edi; ret; 
0x0000000000101dfb: mov rax, rdi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000108e50: mov rax, rdi; pop rbx; ret; 
0x000000000007c880: mov rax, rdi; ret; 
0x000000000010aaf9: mov rax, rdi; sar rax, 6; ret; 
0x000000000003c883: mov rax, rdi; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x00000000000b4a0b: mov rax, rdx; add rsp, 8; ret; 
0x0000000000070367: mov rax, rdx; pop r12; ret; 
0x00000000000bcf02: mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000070129: mov rax, rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000007e0ee: mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000039124: mov rax, rdx; pop rbx; ret; 
0x0000000000084f97: mov rax, rdx; ret; 
0x00000000000be060: mov rax, rsi; add rsp, 8; ret; 
0x00000000000497eb: mov rax, rsi; nop; ret; 
0x00000000000c2793: mov rax, rsi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000003c359: mov rax, rsi; pop rbx; pop rbp; ret; 
0x00000000000496e0: mov rax, rsi; pop rbx; ret; 
0x0000000000049923: mov rax, rsi; ret; 
0x0000000000075a8e: mov rbp, qword ptr [rdi + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000121d48: mov rbp, r14; add rbp, qword ptr [rbx + 0x50]; sub edx, r14d; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x0000000000036b2b: mov rbp, r9; jmp rdx; 
0x0000000000114bec: mov rbp, rbx; pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x00000000000ec075: mov rbp, rdi; mov rdi, rbp; mov eax, 0x4f; syscall; 
0x000000000006e455: mov rbp, rdx; mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x000000000007b976: mov rbp, rsi; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x60]; 
0x000000000010abc3: mov rbp, rsp; pop rbp; ret; 
0x000000000012c386: mov rbx, qword ptr [rdi + 0x48]; mov rax, qword ptr [rbx + 0x18]; lea r12, qword ptr [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x0000000000034130: mov rbx, qword ptr [rip + 0x38b049]; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000074438: mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000007b981: mov rbx, rdi; call qword ptr [rax + 0x60]; 
0x0000000000127026: mov rbx, rsi; sub rsp, 0x438; mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x00000000000bd2c0: mov rbx, rsi; syscall; 
0x00000000000740d1: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000d1f20: mov rcx, qword ptr [rax + 0x18]; mov qword ptr [rdx + 0x20], rcx; mov rdx, qword ptr [rsi + 0x20]; mov qword ptr [rax + 0x20], rdx; xor eax, eax; ret; 
0x0000000000126637: mov rcx, qword ptr [rax + 8]; mov rdi, rax; mov edx, dword ptr [rsi + 0x1c8]; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x0000000000128225: mov rcx, qword ptr [rbp - 0x168]; call rcx; 
0x0000000000079945: mov rcx, qword ptr [rbx + 0xa0]; mov qword ptr [rbx + 0x10], 0; cmovg rax, rdx; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000011ec06: mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x000000000004719a: mov rcx, qword ptr [rdi + 0x98]; mov r8, qword ptr [rdi + 0x28]; mov r9, qword ptr [rdi + 0x30]; mov rdi, qword ptr [rdi + 0x68]; xor eax, eax; ret; 
0x000000000007c590: mov rcx, qword ptr [rdi]; mov qword ptr [rdx], rcx; ret; 
0x0000000000132d73: mov rcx, qword ptr [rip + 0x28b0ee]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000132d23: mov rcx, qword ptr [rip + 0x28b13e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbee0: mov rcx, qword ptr [rip + 0x2c1f81]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbeb0: mov rcx, qword ptr [rip + 0x2c1fb1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbe80: mov rcx, qword ptr [rip + 0x2c1fe1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbe50: mov rcx, qword ptr [rip + 0x2c2011]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbe23: mov rcx, qword ptr [rip + 0x2c203e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbdf3: mov rcx, qword ptr [rip + 0x2c206e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbdc0: mov rcx, qword ptr [rip + 0x2c20a1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd90: mov rcx, qword ptr [rip + 0x2c20d1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd60: mov rcx, qword ptr [rip + 0x2c2101]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd30: mov rcx, qword ptr [rip + 0x2c2131]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd0f: mov rcx, qword ptr [rip + 0x2c2152]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbcaf: mov rcx, qword ptr [rip + 0x2c21b2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb5f3: mov rcx, qword ptr [rip + 0x2c286e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb5c0: mov rcx, qword ptr [rip + 0x2c28a1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb590: mov rcx, qword ptr [rip + 0x2c28d1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb563: mov rcx, qword ptr [rip + 0x2c28fe]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb53f: mov rcx, qword ptr [rip + 0x2c2922]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb4d9: mov rcx, qword ptr [rip + 0x2c2988]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb3c9: mov rcx, qword ptr [rip + 0x2c2a98]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb36f: mov rcx, qword ptr [rip + 0x2c2af2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb250: mov rcx, qword ptr [rip + 0x2c2c11]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb223: mov rcx, qword ptr [rip + 0x2c2c3e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb1f0: mov rcx, qword ptr [rip + 0x2c2c71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb1c0: mov rcx, qword ptr [rip + 0x2c2ca1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb199: mov rcx, qword ptr [rip + 0x2c2cc8]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb130: mov rcx, qword ptr [rip + 0x2c2d31]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb109: mov rcx, qword ptr [rip + 0x2c2d58]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb083: mov rcx, qword ptr [rip + 0x2c2dde]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb053: mov rcx, qword ptr [rip + 0x2c2e0e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb020: mov rcx, qword ptr [rip + 0x2c2e41]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faff9: mov rcx, qword ptr [rip + 0x2c2e68]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf93: mov rcx, qword ptr [rip + 0x2c2ece]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf60: mov rcx, qword ptr [rip + 0x2c2f01]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf30: mov rcx, qword ptr [rip + 0x2c2f31]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf03: mov rcx, qword ptr [rip + 0x2c2f5e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faed0: mov rcx, qword ptr [rip + 0x2c2f91]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faeaf: mov rcx, qword ptr [rip + 0x2c2fb2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fae40: mov rcx, qword ptr [rip + 0x2c3021]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fae10: mov rcx, qword ptr [rip + 0x2c3051]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fadef: mov rcx, qword ptr [rip + 0x2c3072]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fad80: mov rcx, qword ptr [rip + 0x2c30e1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fad5f: mov rcx, qword ptr [rip + 0x2c3102]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000facf3: mov rcx, qword ptr [rip + 0x2c316e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000facc3: mov rcx, qword ptr [rip + 0x2c319e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac93: mov rcx, qword ptr [rip + 0x2c31ce]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac60: mov rcx, qword ptr [rip + 0x2c3201]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac30: mov rcx, qword ptr [rip + 0x2c3231]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac00: mov rcx, qword ptr [rip + 0x2c3261]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fabd3: mov rcx, qword ptr [rip + 0x2c328e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faba3: mov rcx, qword ptr [rip + 0x2c32be]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fab70: mov rcx, qword ptr [rip + 0x2c32f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fab40: mov rcx, qword ptr [rip + 0x2c3321]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fab10: mov rcx, qword ptr [rip + 0x2c3351]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faae0: mov rcx, qword ptr [rip + 0x2c3381]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faab0: mov rcx, qword ptr [rip + 0x2c33b1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faa83: mov rcx, qword ptr [rip + 0x2c33de]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faa50: mov rcx, qword ptr [rip + 0x2c3411]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faa2f: mov rcx, qword ptr [rip + 0x2c3432]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa9c3: mov rcx, qword ptr [rip + 0x2c349e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa990: mov rcx, qword ptr [rip + 0x2c34d1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa960: mov rcx, qword ptr [rip + 0x2c3501]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa930: mov rcx, qword ptr [rip + 0x2c3531]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa900: mov rcx, qword ptr [rip + 0x2c3561]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa8d0: mov rcx, qword ptr [rip + 0x2c3591]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa8a0: mov rcx, qword ptr [rip + 0x2c35c1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa870: mov rcx, qword ptr [rip + 0x2c35f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa840: mov rcx, qword ptr [rip + 0x2c3621]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa813: mov rcx, qword ptr [rip + 0x2c364e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa7d0: mov rcx, qword ptr [rip + 0x2c3691]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa7a0: mov rcx, qword ptr [rip + 0x2c36c1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa773: mov rcx, qword ptr [rip + 0x2c36ee]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa4b0: mov rcx, qword ptr [rip + 0x2c39b1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa480: mov rcx, qword ptr [rip + 0x2c39e1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa450: mov rcx, qword ptr [rip + 0x2c3a11]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa420: mov rcx, qword ptr [rip + 0x2c3a41]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa3e9: mov rcx, qword ptr [rip + 0x2c3a78]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa385: mov rcx, qword ptr [rip + 0x2c3adc]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa290: mov rcx, qword ptr [rip + 0x2c3bd1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa260: mov rcx, qword ptr [rip + 0x2c3c01]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8223: mov rcx, qword ptr [rip + 0x2c5c3e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f81f0: mov rcx, qword ptr [rip + 0x2c5c71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8190: mov rcx, qword ptr [rip + 0x2c5cd1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8160: mov rcx, qword ptr [rip + 0x2c5d01]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8133: mov rcx, qword ptr [rip + 0x2c5d2e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8100: mov rcx, qword ptr [rip + 0x2c5d61]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f80d3: mov rcx, qword ptr [rip + 0x2c5d8e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f80a3: mov rcx, qword ptr [rip + 0x2c5dbe]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8040: mov rcx, qword ptr [rip + 0x2c5e21]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8013: mov rcx, qword ptr [rip + 0x2c5e4e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4a90: mov rcx, qword ptr [rip + 0x2c93d1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4a60: mov rcx, qword ptr [rip + 0x2c9401]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4a30: mov rcx, qword ptr [rip + 0x2c9431]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4a00: mov rcx, qword ptr [rip + 0x2c9461]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f49d3: mov rcx, qword ptr [rip + 0x2c948e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f49a0: mov rcx, qword ptr [rip + 0x2c94c1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4949: mov rcx, qword ptr [rip + 0x2c9518]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f48e0: mov rcx, qword ptr [rip + 0x2c9581]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f48b0: mov rcx, qword ptr [rip + 0x2c95b1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4883: mov rcx, qword ptr [rip + 0x2c95de]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4712: mov rcx, qword ptr [rip + 0x2c974f]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f30a0: mov rcx, qword ptr [rip + 0x2cadc1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f21f0: mov rcx, qword ptr [rip + 0x2cbc71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f21c0: mov rcx, qword ptr [rip + 0x2cbca1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2190: mov rcx, qword ptr [rip + 0x2cbcd1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1ed0: mov rcx, qword ptr [rip + 0x2cbf91]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1ea9: mov rcx, qword ptr [rip + 0x2cbfb8]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1e40: mov rcx, qword ptr [rip + 0x2cc021]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1e19: mov rcx, qword ptr [rip + 0x2cc048]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1db0: mov rcx, qword ptr [rip + 0x2cc0b1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1d80: mov rcx, qword ptr [rip + 0x2cc0e1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1c6f: mov rcx, qword ptr [rip + 0x2cc1f2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1c00: mov rcx, qword ptr [rip + 0x2cc261]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f11f0: mov rcx, qword ptr [rip + 0x2ccc71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1030: mov rcx, qword ptr [rip + 0x2cce31]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0c70: mov rcx, qword ptr [rip + 0x2cd1f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0c40: mov rcx, qword ptr [rip + 0x2cd221]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0c10: mov rcx, qword ptr [rip + 0x2cd251]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f050f: mov rcx, qword ptr [rip + 0x2cd952]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ed2e3: mov rcx, qword ptr [rip + 0x2d0b7e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecff9: mov rcx, qword ptr [rip + 0x2d0e68]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecf90: mov rcx, qword ptr [rip + 0x2d0ed1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecf30: mov rcx, qword ptr [rip + 0x2d0f31]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eced0: mov rcx, qword ptr [rip + 0x2d0f91]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ece70: mov rcx, qword ptr [rip + 0x2d0ff1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ece10: mov rcx, qword ptr [rip + 0x2d1051]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec820: mov rcx, qword ptr [rip + 0x2d1641]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec7f0: mov rcx, qword ptr [rip + 0x2d1671]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec7c0: mov rcx, qword ptr [rip + 0x2d16a1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebff0: mov rcx, qword ptr [rip + 0x2d1e71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebfc0: mov rcx, qword ptr [rip + 0x2d1ea1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebf99: mov rcx, qword ptr [rip + 0x2d1ec8]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebf30: mov rcx, qword ptr [rip + 0x2d1f31]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebf00: mov rcx, qword ptr [rip + 0x2d1f61]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebed0: mov rcx, qword ptr [rip + 0x2d1f91]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebea0: mov rcx, qword ptr [rip + 0x2d1fc1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebe70: mov rcx, qword ptr [rip + 0x2d1ff1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebe49: mov rcx, qword ptr [rip + 0x2d2018]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebcd0: mov rcx, qword ptr [rip + 0x2d2191]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb770: mov rcx, qword ptr [rip + 0x2d26f1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb749: mov rcx, qword ptr [rip + 0x2d2718]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb6e9: mov rcx, qword ptr [rip + 0x2d2778]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb4f9: mov rcx, qword ptr [rip + 0x2d2968]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb460: mov rcx, qword ptr [rip + 0x2d2a01]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb3c0: mov rcx, qword ptr [rip + 0x2d2aa1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb390: mov rcx, qword ptr [rip + 0x2d2ad1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb270: mov rcx, qword ptr [rip + 0x2d2bf1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb240: mov rcx, qword ptr [rip + 0x2d2c21]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eafb0: mov rcx, qword ptr [rip + 0x2d2eb1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eaf8f: mov rcx, qword ptr [rip + 0x2d2ed2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eaf3f: mov rcx, qword ptr [rip + 0x2d2f22]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb5ef: mov rcx, qword ptr [rip + 0x2f2872]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb58f: mov rcx, qword ptr [rip + 0x2f28d2]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb340: mov rcx, qword ptr [rip + 0x2f2b21]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb310: mov rcx, qword ptr [rip + 0x2f2b51]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb2e0: mov rcx, qword ptr [rip + 0x2f2b81]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb2b0: mov rcx, qword ptr [rip + 0x2f2bb1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb280: mov rcx, qword ptr [rip + 0x2f2be1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb250: mov rcx, qword ptr [rip + 0x2f2c11]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb220: mov rcx, qword ptr [rip + 0x2f2c41]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb1f0: mov rcx, qword ptr [rip + 0x2f2c71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c2010: mov rcx, qword ptr [rip + 0x2fbe51]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1fe0: mov rcx, qword ptr [rip + 0x2fbe81]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1fb0: mov rcx, qword ptr [rip + 0x2fbeb1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1f80: mov rcx, qword ptr [rip + 0x2fbee1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1f20: mov rcx, qword ptr [rip + 0x2fbf41]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1ef0: mov rcx, qword ptr [rip + 0x2fbf71]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1d60: mov rcx, qword ptr [rip + 0x2fc101]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c116a: mov rcx, qword ptr [rip + 0x2fccf7]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0e19: mov rcx, qword ptr [rip + 0x2fd048]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0db9: mov rcx, qword ptr [rip + 0x2fd0a8]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0ba0: mov rcx, qword ptr [rip + 0x2fd2c1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0ac3: mov rcx, qword ptr [rip + 0x2fd39e]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c08e0: mov rcx, qword ptr [rip + 0x2fd581]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b42a0: mov rcx, qword ptr [rip + 0x309bc1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b1420: mov rcx, qword ptr [rip + 0x30ca41]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000005dba0: mov rcx, qword ptr [rip + 0x3602c1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000474f0: mov rcx, qword ptr [rip + 0x376971]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000471b0: mov rcx, qword ptr [rip + 0x376cb1]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000004711c: mov rcx, qword ptr [rip + 0x376d45]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000374d0: mov rcx, qword ptr [rip + 0x386991]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000009e624: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009f474: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009e644: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009cfb4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000009cf94: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000a0ee4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000474da: mov rcx, qword ptr [rsi + 0x98]; mov r8, qword ptr [rsi + 0x28]; mov r9, qword ptr [rsi + 0x30]; mov rsi, qword ptr [rsi + 0x70]; xor eax, eax; ret; 
0x000000000009e5e4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009f434: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009cf54: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000a0ea4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x000000000009e604: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009f454: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009cf74: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000a0ec4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000011ebf8: mov rcx, qword ptr [rsi + 8]; mov edx, dword ptr [rdi + 0x5c]; lea rsi, qword ptr [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000001445d4: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001445f0: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001447b4: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001447d0: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144994: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001449b0: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144b84: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144ba0: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144d84: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144da0: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f84: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144fa0: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c4a4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c414: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c384: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001443f4: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144410: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000009e470: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009ce60: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000009f2a0: mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009db30: mov rcx, qword ptr [rsi]; mov dl, byte ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000009f2c0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009e480: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009ce70: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000009e4a0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009f2e0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009ce80: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000009e4c0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xb]; ret; 
0x000000000009f300: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009ce90: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000014ce24: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cdb4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cd44: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014ccd4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cc64: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cbf4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cb84: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e4e0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009f320: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009cea0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000009e500: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009f340: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009ceb0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000009e520: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009f360: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009cec0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000022170: mov rcx, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x0000000000123f84: mov rcx, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000123d8d: mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x000000000012099d: mov rcx, qword ptr [rsp + 8]; call rcx; 
0x00000000000fd47d: mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000fd4de: mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x000000000002a42f: mov rcx, r12; mov rdx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000025ad4: mov rcx, r12; mov rdx, qword ptr [rsp + 0x58]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000011dfe4: mov rcx, r13; call rbx; 
0x00000000000cc5ea: mov rcx, r13; mov r8, qword ptr [rbp - 0xc0]; mov rdx, r14; mov rsi, qword ptr [rbp - 0xb0]; mov rdi, qword ptr [rbp - 0xa8]; call rbx; 
0x00000000000a44a1: mov rcx, r13; mov rdi, rbp; call rbx; 
0x000000000012a588: mov rcx, r14; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax; 
0x0000000000025fa1: mov rcx, r15; mov rdx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000039a8d: mov rcx, rax; lea r8, qword ptr [rsp + 0xf]; and r8, 0xfffffffffffffff0; call 0x39230; leave; ret; 
0x0000000000096bd5: mov rcx, rax; xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x00000000000274d5: mov rcx, rbp; mov rdx, qword ptr [r14]; mov rsi, r13; call qword ptr [rbx + 8]; 
0x000000000012279d: mov rcx, rbp; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000096bc3: mov rcx, rdi; mov qword ptr [rdx], rcx; ret; 
0x0000000000091ae7: mov rcx, rdx; and ecx, 7; movsxd rcx, dword ptr [rax + rcx*4]; add rax, rcx; jmp rax; 
0x000000000003cd20: mov rcx, rdx; lea rdx, qword ptr [r8 + 4]; xor eax, eax; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], rdx; ret; 
0x00000000001245d4: mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x00000000001245f4: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x0000000000127ec4: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x0000000000127614: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x0000000000123a34: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x00000000001334e7: mov rcx, rsp; call 0x133250; add rsp, 0x98; ret; 
0x00000000000f1ef8: mov rdi, -0x11e2153; mov eax, 0xa9; syscall; 
0x00000000000f2f65: mov rdi, -0x64; mov eax, 0x118; syscall; 
0x00000000000c0974: mov rdi, -1; mov eax, 0x3d; syscall; 
0x00000000000f536f: mov rdi, qword ptr [r12]; call rbx; 
0x00000000000a3a65: mov rdi, qword ptr [r12]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000011f5d0: mov rdi, qword ptr [r12]; mov rsi, r14; mov r13d, 7; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000011f47f: mov rdi, qword ptr [r12]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000f4f79: mov rdi, qword ptr [r13]; call rbx; 
0x0000000000123f24: mov rdi, qword ptr [r13]; lea rsi, qword ptr [r12 + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000123e75: mov rdi, qword ptr [r13]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000123d6d: mov rdi, qword ptr [r13]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000f4ee6: mov rdi, qword ptr [r14]; call rbx; 
0x00000000000f4f27: mov rdi, qword ptr [r15]; call rbx; 
0x00000000001284d0: mov rdi, qword ptr [r15]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x18]; 
0x0000000000128204: mov rdi, qword ptr [r15]; mov rsi, r13; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000002341e: mov rdi, qword ptr [rax + 0x18]; mov qword ptr [rbp - 0x68], rax; call rcx; 
0x00000000000543d1: mov rdi, qword ptr [rax]; call 0x49c40; add rsp, 0xd8; ret; 
0x000000000005d123: mov rdi, qword ptr [rax]; call 0x54630; add rsp, 0xd8; ret; 
0x0000000000078411: mov rdi, qword ptr [rax]; call 0x5eaf0; add rsp, 0xd8; ret; 
0x00000000000784c3: mov rdi, qword ptr [rax]; call 0x64230; add rsp, 0xd8; ret; 
0x00000000000f5322: mov rdi, qword ptr [rax]; mov qword ptr [rsp + 8], rax; call rbx; 
0x00000000001287d0: mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x0000000000129346: mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000000c39fd: mov rdi, qword ptr [rbp - 0x3f8]; call qword ptr [rax + 0x28]; 
0x00000000000f576d: mov rdi, qword ptr [rbp - 0x40]; mov r15d, r14d; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x00000000000cc5fe: mov rdi, qword ptr [rbp - 0xa8]; call rbx; 
0x00000000000cc9c3: mov rdi, qword ptr [rbp - 0xa8]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rbp - 0x120]; mov qword ptr [rsp], rax; call rbx; 
0x00000000000f50ae: mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000023769: mov rdi, qword ptr [rbx + 0x18]; call rax; 
0x00000000000ed63d: mov rdi, qword ptr [rbx + 0x18]; mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x00000000000274ce: mov rdi, qword ptr [rbx + 0x18]; mov r8, r12; mov rcx, rbp; mov rdx, qword ptr [r14]; mov rsi, r13; call qword ptr [rbx + 8]; 
0x00000000000e3a39: mov rdi, qword ptr [rbx + 0x28]; mov qword ptr [rbx + 0x20], 0; call 0x1f4f0; mov qword ptr [rbx + 0x28], 0; pop rbx; ret; 
0x0000000000086a78: mov rdi, qword ptr [rbx + 0x48]; call qword ptr [rbx + 0x40]; 
0x0000000000086a08: mov rdi, qword ptr [rbx + 0x48]; mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x000000000003c819: mov rdi, qword ptr [rbx + 8]; mov qword ptr [rax + 0x60], rdx; call qword ptr [rbx]; 
0x00000000001293e7: mov rdi, qword ptr [rbx]; lea rdx, qword ptr [rsp + 0x10]; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x0000000000129350: mov rdi, qword ptr [rbx]; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x0000000000121d45: mov rdi, qword ptr [rbx]; mov rbp, r14; add rbp, qword ptr [rbx + 0x50]; sub edx, r14d; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x00000000001276e4: mov rdi, qword ptr [rcx + 0x10]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x000000000003c194: mov rdi, qword ptr [rcx + 0x10]; mov esi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001276fc: mov rdi, qword ptr [rcx + 0x24]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000127f5c: mov rdi, qword ptr [rdi + 0x10]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x000000000012e8c4: mov rdi, qword ptr [rdi + 0x18]; call 0x6eb20; add rsp, 8; ret; 
0x0000000000127f8c: mov rdi, qword ptr [rdi + 0x28]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000127f44: mov rdi, qword ptr [rdi + 0x38]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x00000000001245d0: mov rdi, qword ptr [rdi + 0x40]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x000000000012bf90: mov rdi, qword ptr [rdi + 0x48]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x00000000000868e6: mov rdi, qword ptr [rdi + 0x48]; mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x00000000000471a9: mov rdi, qword ptr [rdi + 0x68]; xor eax, eax; ret; 
0x000000000006e458: mov rdi, qword ptr [rdi + 0xe0]; call rax; 
0x000000000006e42c: mov rdi, qword ptr [rdi + 0xe0]; jmp rax; 
0x00000000000f4be9: mov rdi, qword ptr [rdi]; call 0x1f4f0; mov qword ptr [rbx], 0; pop rbx; ret; 
0x0000000000135ce9: mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x00000000001063f3: mov rdi, qword ptr [rdx + 0x50]; mov rsi, rdx; call rax; 
0x00000000001651e7: mov rdi, qword ptr [rip + 0x25bc62]; call 0x1f4f0; mov qword ptr [rip + 0x25bc52], 0; pop rbx; ret; 
0x00000000000d49a0: mov rdi, qword ptr [rsi + 0x28]; call 0x1f4f0; xor eax, eax; pop rbx; ret; 
0x00000000000aedb6: mov rdi, qword ptr [rsp + 0x10]; call 0x246b0; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000000bdc02: mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp], rdx; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x0000000000135f08: mov rdi, qword ptr [rsp + 0x30]; mov dword ptr [rsp + 0xc], eax; call 0x1f4f0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x48; ret; 
0x0000000000025ae1: mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000028518: mov rdi, qword ptr [rsp + 0x48]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000027f18: mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rsp + 8], esi; mov rsi, qword ptr [rsp + 0x50]; call rax; 
0x0000000000027811: mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000028735: mov rdi, qword ptr [rsp + 0x68]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x58]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000028134: mov rdi, qword ptr [rsp + 0x68]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x78]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000027621: mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a551: mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002793c: mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000022123: mov rdi, qword ptr [rsp + 8]; add rsp, 0x18; jmp rax; 
0x0000000000036fa6: mov rdi, qword ptr [rsp + 8]; mov eax, 0x82; syscall; 
0x00000000000f5444: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000ed098: mov rdi, qword ptr [rsp + 8]; syscall; 
0x0000000000135c5a: mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x00000000000ebab5: mov rdi, r10; mov eax, r9d; syscall; 
0x0000000000116208: mov rdi, r10; mov edx, r11d; call 0x115190; sub rsp, -0x80; pop rbx; ret; 
0x00000000000749d1: mov rdi, r12; call 0x70f10; mov rax, qword ptr [r12 + 0xd8]; mov esi, r14d; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x00000000000749e4: mov rdi, r12; call qword ptr [rax + 0x18]; 
0x0000000000124442: mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000012c399: mov rdi, r12; call qword ptr [rax + 0x28]; 
0x0000000000121230: mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000006f5c8: mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000079e14: mov rdi, r12; call qword ptr [rax + 0x48]; 
0x00000000000869c8: mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x00000000000833b9: mov rdi, r12; call rax; 
0x00000000000f5be4: mov rdi, r12; call rbx; 
0x0000000000121268: mov rdi, r12; call rdx; 
0x000000000007b602: mov rdi, r12; lea r13, qword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x00000000001281ef: mov rdi, r13; add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x00000000000f50a6: mov rdi, r13; call 0x1f4f0; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000001216fb: mov rdi, r13; call qword ptr [rax + 0x10]; 
0x000000000011fef3: mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000012c16f: mov rdi, r13; call qword ptr [rax + 0x28]; 
0x000000000011feea: mov rdi, r13; call qword ptr [rax]; 
0x000000000011feea: mov rdi, r13; call qword ptr [rax]; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000000869e5: mov rdi, r13; call qword ptr [rbx + 0x40]; 
0x00000000000f5c09: mov rdi, r13; call rbx; 
0x000000000008608a: mov rdi, r13; call rdx; 
0x00000000001281d3: mov rdi, r13; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x000000000012a859: mov rdi, r13; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x0000000000073196: mov rdi, r13; mov eax, r9d; syscall; 
0x000000000012a7e7: mov rdi, r13; mov qword ptr [rsp + 0x50], rax; mov rax, qword ptr [r13 + 8]; mov qword ptr [rsp], r15; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x0000000000128222: mov rdi, r13; mov rcx, qword ptr [rbp - 0x168]; call rcx; 
0x0000000000022f04: mov rdi, r13; mov rsi, qword ptr [rdx + rbx + 0x20]; call rax; 
0x00000000000f4f71: mov rdi, r14; call 0x1f4f0; mov rdi, qword ptr [r13]; call rbx; 
0x000000000002eb94: mov rdi, r14; call 0xf48a0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x000000000012071c: mov rdi, r14; call qword ptr [rax + 0x20]; 
0x0000000000060428: mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000000c3d68: mov rdi, r14; call qword ptr [rax + 0x40]; 
0x000000000008080d: mov rdi, r14; call qword ptr [rax]; 
0x000000000012b54b: mov rdi, r14; call qword ptr [rdx + 0x18]; 
0x0000000000120737: mov rdi, r14; call rax; 
0x00000000000f5c2d: mov rdi, r14; call rbx; 
0x000000000002e5ec: mov rdi, r14; mov ax, 3; syscall; 
0x000000000002e204: mov rdi, r14; mov eax, 3; syscall; 
0x0000000000136253: mov rdi, r14; mov r9d, dword ptr [rdx]; mov rdx, r12; add r9, r11; call rax; 
0x0000000000023fed: mov rdi, r14; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x000000000005fa64: mov rdi, r14; mov rsi, qword ptr [rbp - 0x10f8]; sar r10, 2; mov rdx, r10; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x000000000005fd82: mov rdi, r14; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1148], rcx; call qword ptr [rax + 0x38]; 
0x0000000000061b5e: mov rdi, r14; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1158], rcx; call qword ptr [rax + 0x38]; 
0x000000000005ec40: mov rdi, r14; sub r12, r15; mov r13, r12; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000000f4f64: mov rdi, r15; call 0x1f4f0; mov rdi, qword ptr [r14]; call rbx; 
0x0000000000074dc4: mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000074d58: mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000012b4e8: mov rdi, r15; call qword ptr [rax + 0x28]; 
0x000000000012b454: mov rdi, r15; call qword ptr [rax + 8]; 
0x000000000011fce2: mov rdi, r15; call qword ptr [rax]; 
0x0000000000085515: mov rdi, r15; call rax; 
0x00000000000f5c4d: mov rdi, r15; call rbx; 
0x000000000012aa49: mov rdi, r15; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000012b52f: mov rdi, r15; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x00000000000f5c68: mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x0000000000085fb2: mov rdi, r15; mov rdx, rbx; mov rsi, r13; call rax; 
0x00000000001337e1: mov rdi, r8; call qword ptr [rax + 8]; 
0x00000000000eb133: mov rdi, r8; mov eax, 0x85; syscall; 
0x000000000003710a: mov rdi, r8; mov eax, ebp; syscall; 
0x0000000000133b26: mov rdi, r9; call qword ptr [rax + 0x10]; 
0x0000000000133bc9: mov rdi, r9; call qword ptr [rax + 0x18]; 
0x0000000000086815: mov rdi, r9; call rcx; 
0x00000000000fc337: mov rdi, r9; mov byte ptr [rbp - 0x689], 0x73; mov eax, 0x14; syscall; 
0x00000000000fa6d7: mov rdi, r9; mov eax, 0x11c; syscall; 
0x00000000000fc0cf: mov rdi, r9; mov eax, 0x14; syscall; 
0x00000000000fc27c: mov rdi, r9; mov eax, 3; syscall; 
0x00000000000fc244: mov rdi, r9; mov eax, ebx; syscall; 
0x0000000000037071: mov rdi, r9; mov eax, r8d; syscall; 
0x00000000000fc1cc: mov rdi, r9; mov qword ptr [rbp - 0x6d0], rax; mov eax, ebx; syscall; 
0x00000000000fc10e: mov rdi, r9; movsxd rdx, edx; mov eax, 0x14; syscall; 
0x00000000000fa69b: mov rdi, r9; movsxd rsi, esi; mov eax, ecx; syscall; 
0x00000000000c10cf: mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f5331: mov rdi, rax; call 0x1f4f0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000000b0753: mov rdi, rax; call 0xb04e0; add rsp, 0x40; pop rbx; ret; 
0x000000000006e00f: mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000129db0: mov rdi, rax; call qword ptr [rdx + 0x20]; 
0x00000000000cce17: mov rdi, rax; call rbx; 
0x000000000012663b: mov rdi, rax; mov edx, dword ptr [rsi + 0x1c8]; add rsi, 0x38; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000000bd87e: mov rdi, rax; mov qword ptr [rbp - 0x58], rax; call 0x135c70; mov rax, qword ptr [rbp - 0x58]; call rax; 
0x0000000000023fe1: mov rdi, rax; mov qword ptr [rbp - 0x60], rax; call 0x135c70; mov rdi, r14; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x000000000011ec03: mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000000eb038: mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000000eb0d8: mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000120f80: mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x00000000000f5367: mov rdi, rbp; call 0x1f4f0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000105f43: mov rdi, rbp; call 0x5dcc0; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x000000000007959b: mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000011f4ae: mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000121552: mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x0000000000120ee9: mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000079699: mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000011f471: mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000011fff3: mov rdi, rbp; call qword ptr [rax]; 
0x0000000000075a95: mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000121709: mov rdi, rbp; call qword ptr [rbx]; 
0x000000000011f699: mov rdi, rbp; call rax; 
0x00000000000a419c: mov rdi, rbp; call rbx; 
0x000000000012e400: mov rdi, rbp; call rcx; 
0x0000000000126729: mov rdi, rbp; call rdx; 
0x000000000011f554: mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000011f4c4: mov rdi, rbp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x0000000000126758: mov rdi, rbp; mov dword ptr [rsp + 0x40], 0; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x00000000000ec078: mov rdi, rbp; mov eax, 0x4f; syscall; 
0x000000000002c20d: mov rdi, rbp; mov eax, 3; syscall; 
0x000000000012d9fb: mov rdi, rbp; mov edx, 0xffffffff; xor eax, eax; call rcx; 
0x000000000011f56d: mov rdi, rbp; mov edx, dword ptr [rbx + 0x22c0]; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000120200: mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x0000000000075b24: mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x000000000012dafe: mov rdi, rbp; mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x00000000000a42e5: mov rdi, rbp; mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000123f81: mov rdi, rbp; mov rcx, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000123d8a: mov rdi, rbp; mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x000000000011dfe1: mov rdi, rbp; mov rcx, r13; call rbx; 
0x0000000000135235: mov rdi, rbp; mov rdx, rsp; lea rsi, qword ptr [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x0000000000120b7d: mov rdi, rbp; xor eax, eax; pop rbp; jmp rdx; 
0x000000000011c2cb: mov rdi, rbx; call 0x11a4a0; add rsp, 0x90; pop rbx; ret; 
0x00000000000357ae: mov rdi, rbx; call 0x1f4f0; xor eax, eax; pop rbx; ret; 
0x0000000000037244: mov rdi, rbx; call 0x36f60; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000f978b: mov rdi, rbx; call 0x54480; mov rax, rbx; pop rbx; ret; 
0x0000000000097a91: mov rdi, rbx; call 0x8c4b0; lea rax, qword ptr [rbx - 1]; pop rbx; ret; 
0x00000000000a3898: mov rdi, rbx; call 0x8c4b0; lea rax, qword ptr [rbx - 4]; pop rbx; ret; 
0x00000000000498a0: mov rdi, rbx; call 0x97b10; add rsp, 0x440; pop rbx; ret; 
0x000000000006d979: mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000007467c: mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007b7cb: mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001202ef: mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000007bd6b: mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000004a19d: mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078da6: mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000000700e3: mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000704cd: mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000006de8c: mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x00000000000706f4: mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000000792b3: mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000007a3d6: mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000121af9: mov rdi, rbx; call qword ptr [rax + 8]; 
0x0000000000121b17: mov rdi, rbx; call qword ptr [rax]; 
0x0000000000129b94: mov rdi, rbx; call qword ptr [rax]; mov ebp, eax; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001203f6: mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x0000000000075054: mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x0000000000050a64: mov rdi, rbx; call rax; 
0x00000000000f074b: mov rdi, rbx; lea rdx, qword ptr [rsp - 0x38]; syscall; 
0x00000000000bd9f6: mov rdi, rbx; mov dword ptr [rbp - 0x58], edx; call 0x135c70; mov rax, rbx; call rax; 
0x00000000000fa648: mov rdi, rbx; mov eax, 0x11a; syscall; 
0x0000000000108967: mov rdi, rbx; mov eax, 0xe6; mov r10, rcx; syscall; 
0x0000000000108920: mov rdi, rbx; mov eax, 0xe6; syscall; 
0x0000000000035894: mov rdi, rbx; mov eax, 3; syscall; 
0x00000000000f082a: mov rdi, rbx; mov eax, ebp; mov r13d, dword ptr fs:[r12]; syscall; 
0x000000000007c537: mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000001202ca: mov rdi, rbx; mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x0000000000120274: mov rdi, rbx; mov qword ptr [rsp], 0; call qword ptr [rax + 0x20]; 
0x000000000006ff9f: mov rdi, rbx; mov rax, qword ptr [rax + 0x48]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000135812: mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000000f4e6c: mov rdi, rbx; mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000012099a: mov rdi, rbx; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x00000000000857b5: mov rdi, rbx; mov rdx, r15; call rax; 
0x00000000000704a1: mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x00000000001336f5: mov rdi, rbx; pop rbx; mov qword ptr [rip + 0x28c190], rax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000000769d7: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000074827: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000007462c: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x0000000000134ff9: mov rdi, rbx; pop rbx; mov rsi, rbp; pop rbp; jmp rax; 
0x000000000012ce6f: mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000049d04: mov rdi, rbx; sub r12, r14; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000004a713: mov rdi, rbx; sub r13, rsi; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000075cb6: mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x00000000000fa60a: mov rdi, rbx; syscall; 
0x00000000001202a5: mov rdi, rbx; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x00000000000738df: mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x0000000000080958: mov rdi, rcx; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x000000000013385b: mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x0000000000108177: mov rdi, rdx; jmp rax; 
0x00000000000c11a0: mov rdi, rdx; mov eax, r8d; syscall; 
0x00000000000c11b1: mov rdi, rdx; mov eax, r9d; syscall; 
0x00000000000fa32c: mov rdi, rdx; mov rdx, r8; mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x0000000000136ba4: mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e4a84: mov rdi, rdx; syscall; 
0x000000000003d020: mov rdi, rsi; call 0x3d150; movsd xmm0, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003d070: mov rdi, rsi; call 0x3d1f0; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x0000000000086aa2: mov rdi, rsi; call qword ptr [rbx + 0x40]; 
0x00000000000372c3: mov rdi, rsi; rep stosq qword ptr [rdi], rax; mov rdi, rsp; call 0x36f60; add rsp, 0x88; ret; 
0x000000000011ecde: mov rdi, rsp; call 0x120ba0; mov rax, qword ptr [rsp + 8]; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x0000000000037323: mov rdi, rsp; call 0x36f60; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000372c9: mov rdi, rsp; call 0x36f60; add rsp, 0x88; ret; 
0x000000000005d5aa: mov rdi, rsp; call 0x88710; add rsp, 0x1000; pop rbx; ret; 
0x00000000000f234c: mov rdi, rsp; call 0xc0dd0; add rsp, 0x18; ret; 
0x000000000011eceb: mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x000000000011ed05: mov rdi, rsp; call rax; 
0x000000000011ed05: mov rdi, rsp; call rax; add rsp, 0x30; pop rbx; ret; 
0x000000000012cee0: mov rdi, rsp; call rdx; 
0x000000000012cee0: mov rdi, rsp; call rdx; add rsp, 0x38; ret; 
0x00000000000bdfc2: mov rdi, rsp; mov qword ptr [rsp + 0x10], rsi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c20ec: mov rdi, rsp; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x301f5d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c207c: mov rdi, rsp; mov qword ptr [rsp + 0x18], rax; mov rax, qword ptr [rip + 0x301fcd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f18e8: mov rdi, rsp; mov rax, qword ptr [rip + 0x2d2766]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f1878: mov rdi, rsp; mov rax, qword ptr [rip + 0x2d27d6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1e1f: mov rdi, rsp; mov rax, qword ptr [rip + 0x30222f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1dbf: mov rdi, rsp; mov rax, qword ptr [rip + 0x30228f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006419f: mov rdi, rsp; mov rdx, rbx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000004efaf: mov rdi, rsp; mov rdx, rbx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x000000000006f7d7: mov rdi, rsp; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c077: mov rdi, rsp; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c477: mov rdi, rsp; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab5f: mov rdi, rsp; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000007adc7: mov rdi, rsp; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x00000000000b1325: mov rdx, -0x9ffc00; test rax, rax; cmovne rdx, rax; add rsp, 0x28; mov rax, rdx; ret; 
0x00000000000b13d5: mov rdx, -0xa00000; test rax, rax; cmovne rdx, rax; add rsp, 0x28; mov rax, rdx; ret; 
0x00000000000c2448: mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000e4a76: mov rdx, -1; mov esi, eax; mov eax, 0x75; mov rdi, rdx; syscall; 
0x00000000000e4aa3: mov rdx, -1; mov esi, eax; mov eax, 0x77; mov rdi, rdx; syscall; 
0x00000000000f191f: mov rdx, -1; mov esi, edi; mov eax, 0x75; mov rdi, rdx; syscall; 
0x00000000000f19bf: mov rdx, -1; mov esi, edi; mov eax, 0x77; mov rdi, rdx; syscall; 
0x00000000000cb631: mov rdx, -1; test eax, eax; cmove rdx, qword ptr [rsp]; add rsp, 0x18; mov rax, rdx; ret; 
0x000000000004aaaa: mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000005fdf9: mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x000000000010765b: mov rdx, qword ptr [r12 + 0x38]; mov dword ptr [rbp - 0x80], 0; mov qword ptr [rbp - 0x70], rdx; mov rdx, r14; call rax; 
0x0000000000107557: mov rdx, qword ptr [r14 - 0x10]; mov qword ptr [rbp - 0x70], rdx; mov edx, dword ptr [r14 - 0x30]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x00000000000274d8: mov rdx, qword ptr [r14]; mov rsi, r13; call qword ptr [rbx + 8]; 
0x000000000005dc2d: mov rdx, qword ptr [r8 + 0x88]; mov qword ptr [rax + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x0000000000123b03: mov rdx, qword ptr [r8 + 8]; mov qword ptr [rcx + 8], rax; mov qword ptr [rcx + 0x10], rdx; mov eax, 1; ret; 
0x0000000000072f34: mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x00000000001275fb: mov rdx, qword ptr [rax + 0x38]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0x40]; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000127eab: mov rdx, qword ptr [rax + 0x48]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000301aa: mov rdx, qword ptr [rax + 0x58]; mov rax, qword ptr [rip + 0x38dd6b]; add rdx, 0x200; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000123a0e: mov rdx, qword ptr [rax + 0x98]; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0xa0]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000002fa65: mov rdx, qword ptr [rax + 0xc0]; mov rax, qword ptr [rip + 0x38e365]; mov qword ptr [rax], rdx; ret; 
0x0000000000129dac: mov rdx, qword ptr [rax + 8]; mov rdi, rax; call qword ptr [rdx + 0x20]; 
0x0000000000072f2d: mov rdx, qword ptr [rax]; mov qword ptr [rax + 8], rdx; mov rdx, qword ptr [rax + 0x18]; mov qword ptr [rax + 0x20], rdx; pop rbx; ret; 
0x0000000000021f3b: mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000022f00: mov rdx, qword ptr [rbp - 0x60]; mov rdi, r13; mov rsi, qword ptr [rdx + rbx + 0x20]; call rax; 
0x000000000013624c: mov rdx, qword ptr [rbp - 0x90]; mov rdi, r14; mov r9d, dword ptr [rdx]; mov rdx, r12; add r9, r11; call rax; 
0x000000000003c815: mov rdx, qword ptr [rbx + 0x18]; mov rdi, qword ptr [rbx + 8]; mov qword ptr [rax + 0x60], rdx; call qword ptr [rbx]; 
0x00000000001206dd: mov rdx, qword ptr [rbx + 0x38]; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x0000000000075ca8: mov rdx, qword ptr [rbx + 0x40]; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r15; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x0000000000078bcd: mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000007504b: mov rdx, qword ptr [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x0000000000071cf7: mov rdx, qword ptr [rbx + 0xf8]; mov qword ptr [rdx], rax; xor eax, eax; pop rbx; ret; 
0x00000000001203ee: mov rdx, qword ptr [rbx + 8]; mov dword ptr [rsp + 0x18], eax; mov rdi, rbx; call qword ptr [rdx + 0x20]; 
0x00000000000fa23f: mov rdx, qword ptr [rbx]; mov qword ptr [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000123b1c: mov rdx, qword ptr [rcx + 0x10]; mov qword ptr [r8], rax; mov qword ptr [r8 + 8], rdx; mov eax, 1; ret; 
0x000000000007b026: mov rdx, qword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000000e43ef: mov rdx, qword ptr [rdi + 0x78]; mov qword ptr [rsi + 0x70], rdx; mov rax, qword ptr [rdi + 0x80]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x0000000000072f8a: mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x0000000000072e7a: mov rdx, qword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000108170: mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x0000000000127f73: mov rdx, qword ptr [rdx + 8]; mov qword ptr [rdi + 0x20], rax; mov qword ptr [rdi + 0x28], rdx; mov eax, 1; ret; 
0x0000000000127f2b: mov rdx, qword ptr [rdx + 8]; mov qword ptr [rdi + 0x30], rax; mov qword ptr [rdi + 0x38], rdx; mov eax, 1; ret; 
0x0000000000128030: mov rdx, qword ptr [rdx]; mov rax, qword ptr [rdi + 0x90]; bswap edx; mov dword ptr [rax + 0x10], edx; mov eax, 1; ret; 
0x0000000000127f10: mov rdx, qword ptr [rdx]; mov rax, qword ptr [rdi + 0x90]; bswap edx; mov dword ptr [rax + 0xc], edx; mov eax, 1; ret; 
0x0000000000112f38: mov rdx, qword ptr [rip + 0x2aaf29]; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000109f96: mov rdx, qword ptr [rip + 0x2b3ecb]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000109ef6: mov rdx, qword ptr [rip + 0x2b3f6b]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000108824: mov rdx, qword ptr [rip + 0x2b563d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbb22: mov rdx, qword ptr [rip + 0x2c233f]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fba72: mov rdx, qword ptr [rip + 0x2c23ef]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb9d0: mov rdx, qword ptr [rip + 0x2c2491]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb406: mov rdx, qword ptr [rip + 0x2c2a5b]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb296: mov rdx, qword ptr [rip + 0x2c2bcb]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa559: mov rdx, qword ptr [rip + 0x2c3908]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fc803: mov rdx, qword ptr [rip + 0x2c51c6]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000f7834: mov rdx, qword ptr [rip + 0x2c662d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f3034: mov rdx, qword ptr [rip + 0x2cae2d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2f9c: mov rdx, qword ptr [rip + 0x2caec5]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2ef1: mov rdx, qword ptr [rip + 0x2caf70]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2416: mov rdx, qword ptr [rip + 0x2cba4b]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1f10: mov rdx, qword ptr [rip + 0x2cbf51]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f19db: mov rdx, qword ptr [rip + 0x2cc486]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x00000000000f193b: mov rdx, qword ptr [rip + 0x2cc526]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x00000000000f18be: mov rdx, qword ptr [rip + 0x2cc5a3]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f184e: mov rdx, qword ptr [rip + 0x2cc613]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f12d0: mov rdx, qword ptr [rip + 0x2ccb91]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1230: mov rdx, qword ptr [rip + 0x2ccc31]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0a59: mov rdx, qword ptr [rip + 0x2cd408]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0543: mov rdx, qword ptr [rip + 0x2cd91e]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ed370: mov rdx, qword ptr [rip + 0x2d0af1]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ed31c: mov rdx, qword ptr [rip + 0x2d0b45]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecf67: mov rdx, qword ptr [rip + 0x2d0efa]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecea4: mov rdx, qword ptr [rip + 0x2d0fbd]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ece4d: mov rdx, qword ptr [rip + 0x2d1014]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec85c: mov rdx, qword ptr [rip + 0x2d1605]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebb00: mov rdx, qword ptr [rip + 0x2d2361]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb56a: mov rdx, qword ptr [rip + 0x2d28f7]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb496: mov rdx, qword ptr [rip + 0x2d29cb]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb403: mov rdx, qword ptr [rip + 0x2d2a5e]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb21c: mov rdx, qword ptr [rip + 0x2d2c45]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb1c4: mov rdx, qword ptr [rip + 0x2d2c9d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb164: mov rdx, qword ptr [rip + 0x2d2cfd]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb104: mov rdx, qword ptr [rip + 0x2d2d5d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb0b4: mov rdx, qword ptr [rip + 0x2d2dad]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb064: mov rdx, qword ptr [rip + 0x2d2dfd]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e3170: mov rdx, qword ptr [rip + 0x2dae39]; mov rax, qword ptr [rdx]; mov qword ptr [rdx], rdi; ret; 
0x00000000000cb10a: mov rdx, qword ptr [rip + 0x2f2e47]; mov dword ptr [rdx], ecx; add rsp, 0x10; pop rbx; ret; 
0x00000000000c2580: mov rdx, qword ptr [rip + 0x2fb8e1]; mov eax, 0x20; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000c2438: mov rdx, qword ptr [rip + 0x2fba29]; mov eax, 0x7f; cmp dword ptr fs:[rdx], 0x26; mov rdx, -1; cmovne rax, rdx; ret; 
0x00000000000c20c0: mov rdx, qword ptr [rip + 0x2fbda1]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c2050: mov rdx, qword ptr [rip + 0x2fbe11]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1dfc: mov rdx, qword ptr [rip + 0x2fc065]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1d9c: mov rdx, qword ptr [rip + 0x2fc0c5]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c11f1: mov rdx, qword ptr [rip + 0x2fcc70]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0b04: mov rdx, qword ptr [rip + 0x2fd35d]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0a15: mov rdx, qword ptr [rip + 0x2fd44c]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c098b: mov rdx, qword ptr [rip + 0x2fd4d6]; neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x00000000000bdf9a: mov rdx, qword ptr [rip + 0x2ffec7]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000bcd8d: mov rdx, qword ptr [rip + 0x3010d4]; movsxd rdi, ebp; mov al, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000869f0: mov rdx, qword ptr [rip + 0x337551]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x0000000000086880: mov rdx, qword ptr [rip + 0x3376c1]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x00000000000867b8: mov rdx, qword ptr [rip + 0x337789]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x000000000005dbda: mov rdx, qword ptr [rip + 0x360287]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036f7f: mov rdx, qword ptr [rip + 0x386ee2]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036f46: mov rdx, qword ptr [rip + 0x386f1b]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036eea: mov rdx, qword ptr [rip + 0x386f77]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036c5d: mov rdx, qword ptr [rip + 0x387204]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000031e06: mov rdx, qword ptr [rip + 0x392203]; lea rdi, qword ptr [rip + 0x38deec]; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000009dc84: mov rdx, qword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x000000000009cff4: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000009d014: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000d1f06: mov rdx, qword ptr [rsi + 0x20]; mov qword ptr [rax + 0x20], rdx; xor eax, eax; ret; 
0x00000000000e4481: mov rdx, qword ptr [rsi + 0x70]; mov qword ptr [rdi + 0x78], rdx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x80], rdx; ret; 
0x00000000000e4ddb: mov rdx, qword ptr [rsi + 0x70]; mov qword ptr [rdi + 0xf8], rdx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x100], rdx; ret; 
0x00000000000e4de6: mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x100], rdx; ret; 
0x00000000000e4489: mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x80], rdx; ret; 
0x000000000014ce20: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cdb0: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014cd40: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014ccd0: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e4e3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009f323: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009cea3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000000a0d93: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x000000000014cc60: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e503: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009f343: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009ceb3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000000a0db3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x000000000014cbf0: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e523: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000009f363: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009cec3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000000a0dd3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x000000000014cb80: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000014c630: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c5b0: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c530: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c4a0: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c410: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c380: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144234: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144b88: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144d88: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f88: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144218: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144ba4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144da4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144fa4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144250: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014c6b0: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000009e460: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009f290: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009ce50: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000000a0d00: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000fd478: mov rdx, qword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000fd4d9: mov rdx, qword ptr [rsp + 0x10]; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x00000000000f057d: mov rdx, qword ptr [rsp + 0x10]; movsxd rsi, dword ptr [rsp + 0xc]; movsxd rdi, dword ptr [rsp + 8]; mov eax, ebx; syscall; 
0x0000000000102183: mov rdx, qword ptr [rsp + 0x18]; mov edi, 0x2000004; call rax; 
0x0000000000135808: mov rdx, qword ptr [rsp + 0x18]; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000102086: mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x00000000000f1d13: mov rdx, qword ptr [rsp + 0x20]; mov eax, 0x10e; mov rsi, qword ptr [rsp + 0x18]; movsxd rdi, dword ptr [rsp + 0x14]; syscall; 
0x00000000000bdc10: mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x0000000000036e86: mov rdx, qword ptr [rsp + 0x38]; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000135e62: mov rdx, qword ptr [rsp + 0x48]; add rax, qword ptr [rdx + 8]; add rsp, 0x58; ret; 
0x0000000000025fa4: mov rdx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002a432: mov rdx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000025ad7: mov rdx, qword ptr [rsp + 0x58]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002216b: mov rdx, qword ptr [rsp + 8]; mov rcx, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x00000000000ed08a: mov rdx, qword ptr [rsp]; mov rsi, qword ptr [rsp + 0x10]; mov eax, 0x10f; mov rdi, qword ptr [rsp + 8]; syscall; 
0x00000000000f07ff: mov rdx, r10; mov byte ptr [rsp - 0x58], al; mov eax, ebp; syscall; 
0x00000000000f0822: mov rdx, r10; mov esi, 0x5401; mov rdi, rbx; mov eax, ebp; mov r13d, dword ptr fs:[r12]; syscall; 
0x000000000005fa72: mov rdx, r10; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x0000000000062dfe: mov rdx, r10; mov qword ptr [rbp - 0x10e0], r10; mov rsi, r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000060414: mov rdx, r10; mov qword ptr [rbp - 0x10f8], r10; mov rsi, r8; mov qword ptr [rbp - 0x10e8], r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000004b8f2: mov rdx, r10; mov qword ptr [rbp - 0x508], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004b7e1: mov rdx, r10; mov qword ptr [rbp - 0x538], r10; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000136259: mov rdx, r12; add r9, r11; call rax; 
0x0000000000049d0a: mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000106ee8: mov rdx, r12; call rax; 
0x0000000000085512: mov rdx, r12; mov rdi, r15; call rax; 
0x000000000004c1fd: mov rdx, r12; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006ed91: mov rdx, r12; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006e6e8: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078da0: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000049bea: mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000079038: mov rdx, r13; call qword ptr [rax + 0x40]; 
0x0000000000107273: mov rdx, r13; call rax; 
0x00000000000a4199: mov rdx, r13; mov rdi, rbp; call rbx; 
0x000000000004a193: mov rdx, r13; mov rsi, qword ptr [rbp - 0x598]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000012a58b: mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax; 
0x000000000010766b: mov rdx, r14; call rax; 
0x0000000000076561: mov rdx, r14; mov rdi, rbx; call rax; 
0x00000000000cc5f4: mov rdx, r14; mov rsi, qword ptr [rbp - 0xb0]; mov rdi, qword ptr [rbp - 0xa8]; call rbx; 
0x0000000000079693: mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x00000000001227a0: mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000000cb4eb: mov rdx, r14; movsxd rdi, eax; mov rsi, r15; mov eax, 0xcc; syscall; 
0x0000000000065a9a: mov rdx, r14; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x000000000005ed26: mov rdx, r14; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x00000000000857b8: mov rdx, r15; call rax; 
0x0000000000110e29: mov rdx, r15; mov rdi, r12; call rax; 
0x0000000000055fbc: mov rdx, r15; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x00000000000ebadd: mov rdx, r8; mov esi, 9; mov rdi, r10; mov eax, r9d; syscall; 
0x0000000000050a5a: mov rdx, r8; mov qword ptr [rbp - 0xb0], r8; mov rdi, rbx; call rax; 
0x00000000000fa32f: mov rdx, r8; mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x0000000000073190: mov rdx, r8; mov rsi, r12; mov rdi, r13; mov eax, r9d; syscall; 
0x00000000000eba79: mov rdx, r8; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000004759b: mov rdx, rax; call 0x475b0; add rsp, 0xd8; ret; 
0x0000000000039acb: mov rdx, rax; lea rcx, qword ptr [rsp + 0xf]; and rcx, 0xfffffffffffffff0; call 0x39700; leave; ret; 
0x000000000012dd76: mov rdx, rax; mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012ded6: mov rdx, rax; mov dword ptr [rsp + 0x10], eax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000004876f: mov rdx, rax; mov eax, 0xffffffff; test edx, edx; cmovns eax, edx; pop rbx; ret; 
0x0000000000103082: mov rdx, rax; mov edi, 0x2000003; call qword ptr [rbx + 0x28]; 
0x000000000012d096: mov rdx, rax; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; sar rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x000000000012d156: mov rdx, rax; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; shr rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x00000000000792a6: mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000011a0ff: mov rdx, rax; nop word ptr [rax + rax]; mov byte ptr [rdx], 0; pop rbx; ret; 
0x00000000000f72bb: mov rdx, rax; xor edi, edi; xor eax, eax; call 0x6cef0; add rsp, 0x408; ret; 
0x00000000000704a4: mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x0000000000070680: mov rdx, rbp; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000001216f8: mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x00000000001217f4: mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000000738dc: mov rdx, rbp; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000006fdfe: mov rdx, rbp; mov rsi, r12; call qword ptr [rax + 0x38]; 
0x00000000000704c7: mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000007a3d0: mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000012269d: mov rdx, rbp; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000001072f3: mov rdx, rbx; call rax; 
0x00000000000ebbf5: mov rdx, rbx; mov esi, 9; mov rdi, r9; mov eax, r8d; syscall; 
0x00000000000ebc43: mov rdx, rbx; mov r8d, eax; mov esi, 7; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000000cb41f: mov rdx, rbx; mov rsi, r12; movsxd rdi, r13d; mov eax, 0xcb; syscall; 
0x0000000000085fb5: mov rdx, rbx; mov rsi, r13; call rax; 
0x0000000000086171: mov rdx, rbx; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000000ebb7f: mov rdx, rbx; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000000641a2: mov rdx, rbx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000004efb2: mov rdx, rbx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e7e: mov rdx, rbx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x00000000000f04a3: mov rdx, rcx; call 0xefe50; cdqe; mov qword ptr [rbx + 0x48], rax; pop rbx; ret; 
0x00000000000eb1f0: mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000005fd89: mov rdx, rcx; mov qword ptr [rbp - 0x1148], rcx; call qword ptr [rax + 0x38]; 
0x0000000000060d99: mov rdx, rcx; mov qword ptr [rbp - 0x1148], rcx; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000061b65: mov rdx, rcx; mov qword ptr [rbp - 0x1158], rcx; call qword ptr [rax + 0x38]; 
0x000000000004a308: mov rdx, rcx; mov qword ptr [rbp - 0x538], rcx; mov rsi, qword ptr [rbp - 0x540]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000f46f9: mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x000000000003c880: mov rdx, rdi; mov rax, rdi; sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x000000000012ced4: mov rdx, rdi; xor eax, eax; mov dword ptr [rsp], 2; mov rdi, rsp; call rdx; 
0x00000000000ed28d: mov rdx, rsi; mov eax, 0x11d; xor esi, esi; syscall; 
0x00000000000ed354: mov rdx, rsi; xor r10d, r10d; xor esi, esi; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x000000000004631f: mov rdx, rsp; lea rdi, qword ptr [rsp + 0x10]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x0000000000135238: mov rdx, rsp; lea rsi, qword ptr [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x000000000011c457: mov rdx, rsp; movsxd rdi, dword ptr [rsp + 0x10]; movsxd rsi, ebp; mov eax, 0x81; syscall; 
0x0000000000037f04: mov rdx, rsp; movsxd rsi, ebp; movsxd rdi, r12d; mov eax, 0x81; syscall; 
0x00000000000461de: mov rdx, rsp; xor esi, esi; mov edi, 0x100011; mov eax, 0x38; syscall; 
0x000000000004aaa5: mov rsi, qword ptr [r12 + 0x18]; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000005fdf4: mov rsi, qword ptr [r12 + 0x18]; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x00000000000f576a: mov rsi, qword ptr [rax]; mov rdi, qword ptr [rbp - 0x40]; mov r15d, r14d; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x000000000004989d: mov rsi, qword ptr [rax]; mov rdi, rbx; call 0x97b10; add rsp, 0x440; pop rbx; ret; 
0x000000000012029e: mov rsi, qword ptr [rbp + 0x20]; mov r13d, eax; mov rdi, rbx; xor eax, eax; call qword ptr [rbp + 0x28]; 
0x000000000005fa67: mov rsi, qword ptr [rbp - 0x10f8]; sar r10, 2; mov rdx, r10; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x00000000001281e8: mov rsi, qword ptr [rbp - 0x180]; mov rdi, r13; add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x000000000012821b: mov rsi, qword ptr [rbp - 0x188]; mov rdi, r13; mov rcx, qword ptr [rbp - 0x168]; call rcx; 
0x000000000004a312: mov rsi, qword ptr [rbp - 0x540]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000004a196: mov rsi, qword ptr [rbp - 0x598]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000cc5f7: mov rsi, qword ptr [rbp - 0xb0]; mov rdi, qword ptr [rbp - 0xa8]; call rbx; 
0x00000000000cce01: mov rsi, qword ptr [rbp - 0xf8]; mov rax, qword ptr [rax + 8]; test rax, rax; cmove rax, qword ptr [rbp - 0xa8]; mov rdi, rax; call rbx; 
0x00000000001201fc: mov rsi, qword ptr [rbx + 0x10]; mov rdi, rbp; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x00000000001216f4: mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x10]; 
0x00000000001217f0: mov rsi, qword ptr [rbx + 0x10]; mov rdx, rbp; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x00000000000f5441: mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000003c174: mov rsi, qword ptr [rcx + 0x10]; mov edi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001276f8: mov rsi, qword ptr [rcx + 0x1c]; mov rdi, qword ptr [rcx + 0x24]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x00000000001276e0: mov rsi, qword ptr [rcx + 8]; mov rdi, qword ptr [rcx + 0x10]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000127f88: mov rsi, qword ptr [rdi + 0x20]; mov rdi, qword ptr [rdi + 0x28]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000127f40: mov rsi, qword ptr [rdi + 0x30]; mov rdi, qword ptr [rdi + 0x38]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000127f58: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi + 0x10]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000022f07: mov rsi, qword ptr [rdx + rbx + 0x20]; call rax; 
0x0000000000065aaa: mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x00000000000641b2: mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed36: mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fcc: mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efc2: mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e8e: mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x00000000000474e9: mov rsi, qword ptr [rsi + 0x70]; xor eax, eax; ret; 
0x00000000000ed08e: mov rsi, qword ptr [rsp + 0x10]; mov eax, 0x10f; mov rdi, qword ptr [rsp + 8]; syscall; 
0x0000000000028730: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x68]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x58]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002812f: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x68]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x78]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000123d5a: mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000eb621: mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; syscall; 
0x00000000000fbb5e: mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ebx; movsxd r10, ecx; syscall; 
0x00000000000f125f: mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x13; syscall; 
0x00000000000f12ff: mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x14; syscall; 
0x00000000000a42ed: mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000002792d: mov rsi, qword ptr [rsp + 0x18]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002761c: mov rsi, qword ptr [rsp + 0x18]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a54c: mov rsi, qword ptr [rsp + 0x18]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rsp + 0x50]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000011f46c: mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000f1d1d: mov rsi, qword ptr [rsp + 0x18]; movsxd rdi, dword ptr [rsp + 0x14]; syscall; 
0x000000000008278a: mov rsi, qword ptr [rsp + 0x18]; pop rdx; pop rbx; pop rbp; jmp rax; 
0x00000000000833b4: mov rsi, qword ptr [rsp + 0x28]; mov rdi, r12; call rax; 
0x0000000000123d85: mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x0000000000120992: mov rsi, qword ptr [rsp + 0x2a10]; mov rdi, rbx; mov rcx, qword ptr [rsp + 8]; call rcx; 
0x0000000000123f7c: mov rsi, qword ptr [rsp + 0x40]; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000025adc: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000027f26: mov rsi, qword ptr [rsp + 0x50]; call rax; 
0x0000000000028513: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002780c: mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000011f576: mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x000000000010208b: mov rsi, qword ptr [rsp + 8]; call rax; 
0x0000000000127856: mov rsi, qword ptr [rsp + 8]; lea r14d, dword ptr [rax - 1]; mov rax, qword ptr [rbx + 0x70]; mov dword ptr [rbx + 0x48], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x00000000000fbab8: mov rsi, qword ptr [rsp + 8]; mov eax, ebx; movsxd rdi, dword ptr [rsp + 4]; movsxd r10, ecx; syscall; 
0x0000000000021f32: mov rsi, qword ptr [rsp + 8]; mov edi, dword ptr [rsp + 0x14]; mov rdx, qword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000000fb2da: mov rsi, qword ptr [rsp + 8]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; movsxd r10, ecx; syscall; 
0x00000000000fa5a1: mov rsi, qword ptr [rsp + 8]; movsxd rdi, dword ptr [rsp + 4]; movsxd r10, ecx; mov ecx, 0x119; mov eax, ecx; syscall; 
0x00000000000c09b7: mov rsi, qword ptr [rsp + 8]; or rdi, 0xffffffffffffffff; mov eax, ecx; syscall; 
0x0000000000082dda: mov rsi, qword ptr [rsp]; jmp rax; 
0x00000000000c0a4c: mov rsi, qword ptr [rsp]; mov eax, ecx; movsxd rdi, dword ptr [rsp + 8]; syscall; 
0x0000000000110e1d: mov rsi, qword ptr [rsp]; mov r8, rbp; mov ecx, 0x400; mov rdx, r15; mov rdi, r12; call rax; 
0x0000000000133b23: mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x0000000000133bc6: mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x18]; 
0x000000000007068a: mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000006fe01: mov rsi, r12; call qword ptr [rax + 0x38]; 
0x0000000000122447: mov rsi, r12; call qword ptr [rbp + 0x40]; 
0x00000000000868ea: mov rsi, r12; call qword ptr [rbx + 0x38]; 
0x00000000000ed644: mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x000000000007049a: mov rsi, r12; cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x000000000010c432: mov rsi, r12; mov edx, r13d; pop r12; pop r13; jmp rax; 
0x00000000001336a6: mov rsi, r12; mov qword ptr [rip + 0x28c1e0], rax; mov rax, qword ptr [rip + 0x288441]; pop r12; jmp rax; 
0x0000000000133646: mov rsi, r12; mov qword ptr [rip + 0x28c240], rax; mov rax, qword ptr [rip + 0x288499]; pop r12; jmp rax; 
0x0000000000073193: mov rsi, r12; mov rdi, r13; mov eax, r9d; syscall; 
0x000000000002eb91: mov rsi, r12; mov rdi, r14; call 0xf48a0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x00000000000fc1c9: mov rsi, r12; mov rdi, r9; mov qword ptr [rbp - 0x6d0], rax; mov eax, ebx; syscall; 
0x0000000000079696: mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000012a58e: mov rsi, r12; mov rdi, rbp; call rax; 
0x000000000011dfde: mov rsi, r12; mov rdi, rbp; mov rcx, r13; call rbx; 
0x00000000000700e0: mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000704ca: mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000007a3d3: mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000085302: mov rsi, r12; mov rdi, rbx; call rax; 
0x00000000000cb422: mov rsi, r12; movsxd rdi, r13d; mov eax, 0xcb; syscall; 
0x0000000000086a0c: mov rsi, r13; call qword ptr [rbx + 0x40]; 
0x00000000000274db: mov rsi, r13; call qword ptr [rbx + 8]; 
0x0000000000085fb8: mov rsi, r13; call rax; 
0x00000000000a3bae: mov rsi, r13; lea rcx, qword ptr [rax + 4]; call rbx; 
0x000000000012b521: mov rsi, r13; mov dword ptr [rsp + 0xc0], eax; mov rax, qword ptr [r15 + 8]; mov rdi, r15; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000012b43e: mov rsi, r13; mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x0000000000128207: mov rsi, r13; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x000000000006f5c5: mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000086174: mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000060da3: mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000005fd7f: mov rsi, r13; mov rdi, r14; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1148], rcx; call qword ptr [rax + 0x38]; 
0x0000000000061b5b: mov rsi, r13; mov rdi, r14; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1158], rcx; call qword ptr [rax + 0x38]; 
0x00000000000fc241: mov rsi, r13; mov rdi, r9; mov eax, ebx; syscall; 
0x000000000012d9f8: mov rsi, r13; mov rdi, rbp; mov edx, 0xffffffff; xor eax, eax; call rcx; 
0x000000000004b7eb: mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000010307f: mov rsi, r13; mov rdx, rax; mov edi, 0x2000003; call qword ptr [rbx + 0x28]; 
0x000000000011f5ac: mov rsi, r14; call qword ptr [rax + 0x10]; 
0x0000000000085094: mov rsi, r14; call rax; 
0x000000000011f5d4: mov rsi, r14; mov r13d, 7; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x00000000000792b0: mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000049d01: mov rsi, r14; mov rdi, rbx; sub r12, r14; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x00000000000cb4f1: mov rsi, r15; mov eax, 0xcc; syscall; 
0x000000000012b548: mov rsi, r15; mov rdi, r14; call qword ptr [rdx + 0x18]; 
0x00000000000fc0cc: mov rsi, r15; mov rdi, r9; mov eax, 0x14; syscall; 
0x0000000000075cb3: mov rsi, r15; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x000000000006041e: mov rsi, r8; mov qword ptr [rbp - 0x10e8], r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000062e08: mov rsi, r8; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000006f75b: mov rsi, r9; mov eax, r8d; syscall; 
0x00000000001337de: mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x000000000006ed94: mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000120f99: mov rsi, rax; call 0x91670; mov rax, qword ptr [rbp + 8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000036db6: mov rsi, rax; mov eax, ecx; syscall; 
0x000000000008680b: mov rsi, rax; mov qword ptr [rbx], rax; mov qword ptr [rbx + 0x48], r9; mov rdi, r9; call rcx; 
0x000000000011f3cc: mov rsi, rbp; add rdi, 0x18; xor eax, eax; pop rbp; jmp rcx; 
0x00000000001214af: mov rsi, rbp; add rdi, 0x23b0; xor eax, eax; pop rbp; jmp rcx; 
0x0000000000121d52: mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x000000000008ac76: mov rsi, rbp; mov edi, dword ptr [rip + 0x336071]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011f483: mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000a3a62: mov rsi, rbp; mov rdi, qword ptr [r12]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x000000000012601d: mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000006e6eb: mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078da3: mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000070324: mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000008632c: mov rsi, rbp; mov rdi, rbx; call rax; 
0x00000000000fa645: mov rsi, rbp; mov rdi, rbx; mov eax, 0x11a; syscall; 
0x00000000000f1575: mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x127; syscall; 
0x00000000000f17d5: mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x128; syscall; 
0x0000000000134ffd: mov rsi, rbp; pop rbp; jmp rax; 
0x00000000001214f4: mov rsi, rbp; pop rbx; pop rbp; add rdi, 0x23b0; xor eax, eax; jmp rcx; 
0x00000000000f5c85: mov rsi, rbx; call 0xf4e10; mov edx, 4; mov esi, 2; mov rdi, r15; call rbx; 
0x00000000000f5c60: mov rsi, rbx; call 0xf4e10; mov rdi, r15; mov edx, 4; mov esi, 1; call rbx; 
0x00000000000f4ede: mov rsi, rbx; call 0xf4e90; mov rdi, qword ptr [r14]; call rbx; 
0x00000000000f4f1f: mov rsi, rbx; call 0xf4e90; mov rdi, qword ptr [r15]; call rbx; 
0x0000000000037c34: mov rsi, rbx; mov eax, 0x80; syscall; 
0x0000000000086087: mov rsi, rbx; mov rdi, r13; call rdx; 
0x000000000012b30c: mov rsi, rbx; mov rdi, r15; call qword ptr [rax]; 
0x00000000000b0750: mov rsi, rbx; mov rdi, rax; call 0xb04e0; add rsp, 0x40; pop rbx; ret; 
0x000000000012e3fd: mov rsi, rbx; mov rdi, rbp; call rcx; 
0x00000000000c0905: mov rsi, rdi; mov eax, ecx; syscall; 
0x00000000000f2f5c: mov rsi, rdi; mov r10d, 0x100; mov rdi, -0x64; mov eax, 0x118; syscall; 
0x0000000000135c57: mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x00000000000738d9: mov rsi, rdi; mov rdx, rbp; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x00000000000b9f5b: mov rsi, rdi; xor edi, edi; mov rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001245d9: mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x00000000001063f7: mov rsi, rdx; call rax; 
0x00000000001245f9: mov rsi, rdx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x0000000000127ec9: mov rsi, rdx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x0000000000127619: mov rsi, rdx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x0000000000123a39: mov rsi, rdx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x00000000000eb03b: mov rsi, rdx; mov eax, 4; syscall; 
0x00000000000eb08a: mov rsi, rdx; mov eax, 5; syscall; 
0x00000000000eb0db: mov rsi, rdx; mov eax, 6; syscall; 
0x00000000000f46f6: mov rsi, rdx; mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x000000000012dd5c: mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x000000000012d478: mov rsi, rsp; call qword ptr [rax + 8]; 
0x0000000000121a34: mov rsi, rsp; call qword ptr [rax]; 
0x000000000012b1d8: mov rsi, rsp; mov dword ptr [rsp + 0x18], 1; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x000000000012e0bb: mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x00000000000f75e7: mov rsi, rsp; mov edi, 1; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000121acb: mov rsi, rsp; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121a53: mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000126033: mov rsi, rsp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000012db3c: mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x000000000012dafb: mov rsi, rsp; mov rdi, rbp; mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x0000000000121b14: mov rsi, rsp; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000036b47: mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000036b28: mov rsp, r8; mov rbp, r9; jmp rdx; 
0x00000000001adfd4: mov sil, bpl; jmp qword ptr [rdx]; 
0x00000000001a2918: mov sil, dl; jmp qword ptr [rbp]; 
0x00000000001ae01c: mov sil, r13b; jmp qword ptr [rdx]; 
0x0000000000188884: mov spl, 0; add byte ptr [rax + 0x19], al; in al, dx; dec dword ptr [rsp + rsi*4 + 0x195f0000]; in al, dx; call rsp; 
0x0000000000048828: mov spl, 5; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000187274: mov spl, dil; call rax; 
0x0000000000187274: mov spl, dil; call rax; xchg esp, edi; jmp qword ptr [rax - 0x79]; 
0x000000000004debb: mov ss, word ptr [r10]; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000002b3d9: mov ss, word ptr [rax + 0x29480000]; ret 0x8b49; 
0x00000000000c97b3: mov ss, word ptr [rax - 0x7efffffd]; jmp qword ptr [rax + 4]; 
0x00000000000f6d4e: mov ss, word ptr [rbx]; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000004debc: mov ss, word ptr [rdx]; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x00000000000f49d6: mov ss, word ptr [rsp + rbp + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f09c3: mov word ptr [r8 + 0x21], si; ret; 
0x0000000000123ba8: mov word ptr [r8 + 0x6c], ax; mov eax, 1; ret; 
0x000000000013c9f0: mov word ptr [rax + 0x148b0002], gs; xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001a8234: mov word ptr [rax + 0x3ae80001], fs; cmc; jmp qword ptr [rcx]; 
0x0000000000198e34: mov word ptr [rax + rax - 0x120a0800], gs; jmp qword ptr [rbx]; 
0x00000000000d6b22: mov word ptr [rax + rax*4], fs; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000a4193: mov word ptr [rax + rax*4], fs; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rdi, rbp; call rbx; 
0x00000000000a478e: mov word ptr [rax + rax*4], fs; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x17], cl; mov rdi, rbp; call rbx; 
0x00000000000fb383: mov word ptr [rax + rax], gs; add byte ptr [rbp + 0x10], dh; mov eax, 0x2f; syscall; 
0x000000000008c591: mov word ptr [rax + rdx - 2], cx; ret; 
0x00000000000d3adb: mov word ptr [rax - 0x7b], cs; rol byte ptr [rcx + 0xf], 0x95; ret 0x840f; 
0x000000000009d650: mov word ptr [rax], cs; add byte ptr [rax], al; ret; 
0x00000000000fcaaf: mov word ptr [rax], dx; ret; 
0x0000000000192234: mov word ptr [rax], es; add al, cl; mov cl, 0xea; call qword ptr [rax]; 
0x00000000000f0fe1: mov word ptr [rax], es; add byte ptr [rax], al; mov esi, esi; movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000001898d4: mov word ptr [rax], fs; add dword ptr [rax], eax; sbb byte ptr [rcx - 0x11], dl; call rsp; 
0x000000000011b153: mov word ptr [rbp + 0x216], ax; pop rbx; pop rbp; pop r12; ret; 
0x00000000001a7f34: mov word ptr [rbp + 0x33080001], ds; cmc; jmp qword ptr [rcx]; 
0x000000000003e53a: mov word ptr [rbp - 0x7c], es; jmp qword ptr [rsi - 0x70]; 
0x000000000011b04a: mov word ptr [rbx + 0x216], ax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b43de: mov word ptr [rbx + 0xc], ax; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000129297: mov word ptr [rbx + 2], ax; call 0x114510; add rsp, 0x10; pop rbx; ret; 
0x000000000012d395: mov word ptr [rbx], ax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000014e447: mov word ptr [rbx], es; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015a512: mov word ptr [rcx + 4], dx; ret; 
0x000000000015a553: mov word ptr [rcx + 8], dx; ret; 
0x0000000000196334: mov word ptr [rcx - 0x56b80000], es; in eax, dx; call rcx; 
0x000000000010c848: mov word ptr [rcx - 0x77], es; xor cl, byte ptr [rcx - 0x7d]; ret 0x4d04; 
0x000000000015a4e0: mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000015a4d0: mov word ptr [rcx], dx; ret; 
0x00000000001a6dad: mov word ptr [rcx], es; add al, ah; cld; hlt; call qword ptr [rcx]; 
0x000000000012ac3d: mov word ptr [rcx], gs; add byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rcx + 0x48], 1; add eax, 0xa0; add rsp, 8; ret; 
0x000000000012ac6d: mov word ptr [rcx], gs; add byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rcx + 0x48], 1; add eax, 0xa8; add rsp, 8; ret; 
0x000000000012abdd: mov word ptr [rcx], gs; add byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rcx + 0x48], 1; add esp, 8; ret; 
0x000000000012ac0d: mov word ptr [rcx], gs; add byte ptr [rax + 0x39], cl; sal byte ptr [rbx + rcx + 0x48], 1; sub eax, -0x80; add rsp, 8; ret; 
0x0000000000190b34: mov word ptr [rcx], gs; add byte ptr [rax], al; mov byte ptr [rcx - 0x16], ch; jmp qword ptr [rcx]; 
0x000000000005e53d: mov word ptr [rcx], ss; add byte ptr [rax + 0x63], cl; add al, 0x82; add rdx, rax; jmp rdx; 
0x000000000009e56c: mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009f3bc: mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009cefc: mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000a0e2c: mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x000000000009e674: mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009f4c4: mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009cfe4: mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000a0f34: mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000001a8934: mov word ptr [rdi + 0x5d580001], fs; cmc; call qword ptr [rcx]; 
0x000000000014d0c7: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000003d3af: mov word ptr [rdi + 2], dx; ret; 
0x000000000003d3a9: mov word ptr [rdi + 4], ax; xor eax, eax; mov word ptr [rdi + 2], dx; ret; 
0x0000000000096972: mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x0000000000096982: mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 6]; mov byte ptr [rdi + 6], 0; ret; 
0x000000000009f268: mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 6]; ret; 
0x00000000000968e2: mov word ptr [rdi + 4], dx; mov rax, rdi; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968d2: mov word ptr [rdi + 4], dx; mov rax, rdi; ret; 
0x000000000009ce38: mov word ptr [rdi + 4], dx; ret; 
0x00000000000a0cd8: mov word ptr [rdi + 4], dx; xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x000000000009681c: mov word ptr [rdi + 4], r11w; add rdi, 6; mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x000000000009f2ca: mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 0xa]; ret; 
0x000000000009e48a: mov word ptr [rdi + 8], dx; lea rax, qword ptr [rdi + 9]; ret; 
0x000000000009ce7a: mov word ptr [rdi + 8], dx; ret; 
0x00000000000a0d3a: mov word ptr [rdi + 8], dx; xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000001447ec: mov word ptr [rdi - 2], cx; ret; 
0x0000000000144604: mov word ptr [rdi - 2], dx; ret; 
0x00000000001447e8: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000009e403: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009ce03: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000009f226: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000009dad6: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; ret; 
0x00000000000a0c96: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dl; xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x000000000014d0cb: mov word ptr [rdi], cx; ret; 
0x000000000009e3f3: mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009f213: mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009cdf3: mov word ptr [rdi], dx; ret; 
0x00000000000a0c83: mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000967d0: mov word ptr [rdi], r9w; add rdi, 2; mov rax, rdi; ret; 
0x00000000000967e0: mov word ptr [rdi], r9w; mov byte ptr [rdi + 2], dl; add rdi, 3; mov rax, rdi; ret; 
0x0000000000096930: mov word ptr [rdi], si; lea rax, qword ptr [rdi + 1]; ret; 
0x0000000000096940: mov word ptr [rdi], si; mov byte ptr [rdi + 2], 0; lea rax, qword ptr [rdi + 2]; ret; 
0x00000000000968a0: mov word ptr [rdi], si; mov byte ptr [rdi + 2], 0; mov rax, rdi; ret; 
0x0000000000096890: mov word ptr [rdi], si; mov rax, rdi; ret; 
0x00000000000e44c0: mov word ptr [rdi], si; xor al, al; ret; 
0x00000000001a7c34: mov word ptr [rdx + 0x2ef80001], ds; cmc; jmp qword ptr [rcx]; 
0x000000000018a264: mov word ptr [rdx + 1], gs; add byte ptr [rdi + rsi*4 - 0xf], ah; push qword ptr [rdx + rbp*2 - 0x485bffff]; int1; jmp rsp; 
0x000000000015c888: mov word ptr [rdx + 4], ax; lea rax, qword ptr [rdx + 5]; ret; 
0x0000000000099bad: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000099c31: mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x00000000001a6434: mov word ptr [rdx - 0x3377ffff], es; hlt; jmp qword ptr [rcx]; 
0x000000000015c833: mov word ptr [rdx], ax; lea rax, qword ptr [rdx + 1]; ret; 
0x000000000015c843: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, qword ptr [rdx + 2]; ret; 
0x0000000000099b58: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000099b48: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000133e47: mov word ptr [rip + 0x28fbb2], ax; mov eax, 1; add rsp, 8; ret; 
0x000000000019d27a: mov word ptr [rip + 0x3068345], es; mov byte ptr [rcx], al; ret; 
0x00000000001afe2e: mov word ptr [rip + 0x38e048d], es; pop qword ptr [rdx]; add dl, byte ptr [rsi + 0x41380e0a]; ret; 
0x00000000001aa2aa: mov word ptr [rip + 0x38e048d], es; pop qword ptr [rdx]; add ecx, dword ptr [rbx + 1]; ret; 
0x00000000000eaf6b: mov word ptr [rip - 0x373eb800], gs; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000018cff4: mov word ptr [rsi + 0x5d3d0002], es; stc; call rsp; 
0x00000000000efcb5: mov word ptr [rsi + 0x66], dx; xor eax, eax; ret; 
0x000000000003d35d: mov word ptr [rsi + 0xc], ax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000003d31f: mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x000000000003d366: mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x000000000003d2c8: mov word ptr [rsi], ax; movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x00000000000e44a3: mov word ptr [rsi], ax; xor eax, eax; ret; 
0x00000000001a0834: mov word ptr [rsi], fs; add dword ptr [rax], eax; sbb dl, cl; int1; call qword ptr [rsi]; 
0x0000000000036834: mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; fstp xword ptr [rdi]; ret; 
0x0000000000036814: mov word ptr [rsp - 0x10], ax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000368ee: mov word ptr [rsp - 0x10], dx; mov dword ptr [rdi], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000000369e4: mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x0000000000116283: mov word ptr [rsp], ax; mov dword ptr [rsp + 4], r11d; call 0x115190; add rsp, 0x88; ret; 
0x00000000000ebd7a: mov word ptr [rsp], ax; xor eax, eax; call 0xebb40; add rsp, 0x20; pop rbx; ret; 
0x00000000001086d2: movabs al, byte ptr [0x1010c48148002b]; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000036bd6: movabs al, byte ptr [0x148c48148000000]; add byte ptr [rax], al; ret; 
0x0000000000022f03: movabs al, byte ptr [0x201a748b48ef894c]; call rax; 
0x00000000001868a8: movabs al, byte ptr [0x30fffc10a0fffc0e]; add edi, esp; push rax; add al, 0xfc; call rax; 
0x000000000006d0a8: movabs al, byte ptr [0x397729f8830010ac]; nop dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000178184: movabs al, byte ptr [0x40fff17ef0fff17c]; xor ecx, 0xf18390ff; jmp rax; 
0x0000000000186220: movabs al, byte ptr [0x40fffb1470fffb13]; adc eax, 0x1610fffb; sti; jmp rax; 
0x00000000000d3333: movabs al, byte ptr [0x438d188b44fffffe]; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000072f8d: movabs al, byte ptr [0x4820428b48000000]; sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x00000000000bcc81: movabs al, byte ptr [0x4820538948000000]; add esp, 0xd0; pop rbx; ret; 
0x0000000000072e7d: movabs al, byte ptr [0x4838428b48000000]; sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000000769d3: movabs al, byte ptr [0x485bdf8948000000]; mov eax, dword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000005f05c: movabs al, byte ptr [0x4c90046348001187]; add eax, ebp; jmp rax; 
0x00000000001654a8: movabs al, byte ptr [0x5d5b08c48348ffeb]; pop r12; pop r13; ret; 
0x0000000000186854: movabs al, byte ptr [0x60fffc0780fffc05]; or esp, edi; inc dword ptr [rax + 0xb]; cld; jmp qword ptr [rax]; 
0x0000000000064cb1: movabs al, byte ptr [0x6f850fc085fffffe]; sub byte ptr [rax], al; add byte ptr [rbx - 0x10f6b], cl; inc dword ptr [rbx - 0x7cf0cf06]; ret; 
0x00000000001355dc: movabs al, byte ptr [0x8881058b48fffd44]; sub byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000003fbef: movabs al, byte ptr [0x8948fe8944000000]; ret 0x8948; 
0x000000000004bf29: movabs al, byte ptr [0x8949008b48fffffb]; add bl, ch; ret; 
0x0000000000126b61: movabs al, byte ptr [0x8b48a174c085ffff]; test byte ptr [rax + rcx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000014d1de: movabs al, byte ptr [0x8d49931463490003]; adc al, 0x13; jmp rdx; 
0x0000000000186640: movabs al, byte ptr [0x90fffbe590fffbe3]; out 0xfb, eax; call qword ptr [rax + 0x20fffbe9]; fdiv st(3), st(0); jmp rax; 
0x00000000001879bc: movabs al, byte ptr [0x90fffca320fffca3]; movabs byte ptr [0xa170fffca200fffc], al; cld; call rax; 
0x000000000012abdc: movabs al, byte ptr [0xb74d0394800298c]; add rsp, 8; ret; 
0x0000000000186d60: movabs al, byte ptr [0xc0fffc6430fffc64]; movsxd rdi, esp; call qword ptr [rax + 0x63]; 
0x0000000000187074: movabs al, byte ptr [0xc0fffc8830fffc88]; xchg esp, edi; call qword ptr [rax - 0x79]; 
0x00000000001765b4: movabs al, byte ptr [0xc8c62d12fc87aa3c]; lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000050d23: movabs al, byte ptr [0xcb4c8d48987d8b48]; or byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x48e8; 
0x0000000000198806: movabs al, byte ptr [0xedbc800d1cffedbd]; jmp qword ptr [rdx]; 
0x00000000000497e5: movabs al, byte ptr [0xf08948ecebc03145]; nop; ret; 
0x00000000001868ac: movabs al, byte ptr [0xf0fffc0330fffc10]; add al, 0xfc; call rax; 
0x000000000012f782: movabs al, byte ptr [0xf10768941ff854d]; test byte ptr [rax + 0x1000001], al; ret 0x894c; 
0x00000000001381dc: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001ab596: movabs al, byte ptr [0xf55cf40d1cfff55d]; jmp qword ptr [rdx]; 
0x0000000000023fe7: movabs al, byte ptr [0xf7894c00111c83e8]; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x00000000000f262a: movabs byte ptr [0x1b8fff7b2], al; add rsp, 8; ret; 
0x000000000002209a: movabs byte ptr [0x2074fff883000c9a], al; add rsp, 8; ret; 
0x0000000000174c1b: movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000150fea: movabs byte ptr [0x4993146349000367], al; lea edx, dword ptr [rbx + rdx]; jmp rdx; 
0x00000000000fc25d: movabs byte ptr [0x4c0a74d285489066], al; mov esi, ebp; mov rdi, r9; mov eax, ebx; syscall; 
0x00000000000833b1: movabs byte ptr [0x4c2824748b48ffff], al; mov edi, esp; call rax; 
0x000000000011bcca: movabs byte ptr [0x76fb3d8d48fffff7], al; sub al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000015e7fa: movabs byte ptr [0x8348013880000002], al; fdivr st(7); ret; 
0x00000000000f5281: movabs byte ptr [0x854d10758b4dfff2], al; test byte ptr [rdi], 0x84; ret 0; 
0x000000000009e296: movabs byte ptr [0x8d49930c6349000d], al; or al, 0xb; jmp rcx; 
0x000000000013cfd7: movabs byte ptr [0x91148b81048b0002], al; sub eax, edx; ret; 
0x00000000001879c5: movabs byte ptr [0xa170fffca200fffc], al; cld; call rax; 
0x0000000000003c84: movabs byte ptr [0xbc77e9822693558d], al; hlt; test al, 0x35; push rbx; or byte ptr fs:[rbx + 0x4e], ch; ret 0x6bba; 
0x0000000000187120: movabs byte ptr [0xc2fffc8a32fffc8a], al; mov esp, edi; call qword ptr [rdx - 0x77]; 
0x0000000000187618: movabs byte ptr [0xc2fffcb132fffcb1], al; mov al, 0xfc; call qword ptr [rdx - 0x50]; 
0x000000000002262b: movabs byte ptr [0xd10589c08941c689], al; adc eax, 0xeec1003a; or byte ptr [rbx - 0x3ebef020], al; call 0xffffffffc51faf48; adc eax, 0xd89003a; ret; 
0x00000000001384da: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000108544: movabs byte ptr [0xf30474c08548002b], al; ret; 
0x00000000001a9366: movabs byte ptr [0xf4ea900d1cfff4eb], al; jmp qword ptr [rdx]; 
0x00000000001ad5b6: movabs byte ptr [0xf582030d1cfff583], al; jmp qword ptr [rdx]; 
0x000000000010c1fa: movabs byte ptr [0xffd87ce850fff97c], al; jmp qword ptr [rsi + 0x2e]; 
0x000000000009e30a: movabs byte ptr es:[0x8d49930c6349000d], al; or al, 0xb; jmp rcx; 
0x00000000000f18c1: movabs dword ptr [0x28964d8f7002cc5], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001651df: movabs dword ptr [0x48e975db8548ffeb], eax; mov edi, dword ptr [rip + 0x25bc62]; call 0x1f4f0; mov qword ptr [rip + 0x25bc52], 0; pop rbx; ret; 
0x00000000001651a9: movabs dword ptr [0x48ef72eb3948ffeb], eax; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000001512e9: movabs dword ptr [0x4993146349000364], eax; lea edx, dword ptr [rbx + rdx]; jmp rdx; 
0x0000000000150ce9: movabs dword ptr [0x499314634900036a], eax; lea edx, dword ptr [rbx + rdx]; jmp rdx; 
0x00000000001509e9: movabs dword ptr [0x499314634900036d], eax; lea edx, dword ptr [rbx + rdx]; jmp rdx; 
0x00000000001506e9: movabs dword ptr [0x4993146349000370], eax; lea edx, dword ptr [rbx + rdx]; jmp rdx; 
0x00000000001503e9: movabs dword ptr [0x4993146349000373], eax; lea edx, dword ptr [rbx + rdx]; jmp rdx; 
0x00000000001500e9: movabs dword ptr [0x4993146349000376], eax; lea edx, dword ptr [rbx + rdx]; jmp rdx; 
0x00000000000d1d63: movabs dword ptr [0x5bffffff67820fca], eax; ret; 
0x00000000000038a3: movabs dword ptr [0x7972d6f857775fc9], eax; cmpsq qword ptr [rsi], qword ptr [rdi]; ret 0x49ec; 
0x000000000012605c: movabs dword ptr [0x824448b49fffffe], eax; mov rsi, rsp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000007a201: movabs dword ptr [0x8341001f0ffffffc], eax; ret 0x4101; 
0x00000000000f3649: movabs dword ptr [0x8811174002cdf], eax; add byte ptr [rax], 0; mov eax, 1; add rsp, 8; ret; 
0x0000000000126812: movabs dword ptr [0x8b48ae74c085ffff], eax; and al, 0x78; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000009e06d: movabs dword ptr [0x8d49830c634b000d], eax; or al, 0xb; jmp rcx; 
0x00000000001879c1: movabs dword ptr [0xa200fffca290fffc], eax; cld; push qword ptr [rax - 0x5f]; cld; call rax; 
0x00000000001877c1: movabs dword ptr [0xa270fffca300fffc], eax; cld; jmp rax; 
0x000000000018797d: movabs dword ptr [0xa2a0fffca330fffc], eax; cld; call qword ptr [rax]; 
0x000000000018d31d: movabs dword ptr [0xa3acfff9b0640002], eax; add al, byte ptr [rax]; hlt; mov al, 0xf9; jmp rsp; 
0x000000000006fff4: movabs dword ptr [0xde69058b48001f0f], eax; xor al, 0; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000001a9746: movabs dword ptr [0xf4ec060d1cfff4ec], eax; jmp qword ptr [rdx]; 
0x000000000000087f: movabs eax, dword ptr [0x10c0449000e]; ret 0x440c; 
0x000000000004657c: movabs eax, dword ptr [0x111850f0037]; pop rbx; ret; 
0x00000000000efcc3: movabs eax, dword ptr [0x1600c764002ce1]; add byte ptr [rax], al; mov eax, 1; ret; 
0x00000000000fbdc3: movabs eax, dword ptr [0x18964d8f7002c20]; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb5c3: movabs eax, dword ptr [0x18964d8f7002c28]; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb1c3: movabs eax, dword ptr [0x18964d8f7002c2c]; or rax, 0xffffffffffffffff; ret; 
0x00000000000f21c3: movabs eax, dword ptr [0x18964d8f7002cbc]; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec7c3: movabs eax, dword ptr [0x18964d8f7002d16]; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebfc3: movabs eax, dword ptr [0x18964d8f7002d1e]; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb3c3: movabs eax, dword ptr [0x18964d8f7002d2a]; or rax, 0xffffffffffffffff; ret; 
0x0000000000030133: movabs eax, dword ptr [0x25040348640038dd]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000031a7b: movabs eax, dword ptr [0x257a058b48fffffc]; cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38e273]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f11c3: movabs eax, dword ptr [0x2600c764002ccc]; add byte ptr [rax], al; mov rax, -1; ret; 
0x00000000000c20c3: movabs eax, dword ptr [0x28964d8f7002fbd]; or rax, 0xffffffffffffffff; ret; 
0x00000000000f7eee: movabs eax, dword ptr [0x441f0f66bdeb90]; add byte ptr [rax - 0x73], cl; sbb eax, 0x865af; mov rax, rbx; pop rbx; ret; 
0x0000000000133a1b: movabs eax, dword ptr [0x482d78c085000000]; mov eax, dword ptr [rsp]; add rsp, 0x10; pop rbx; ret; 
0x0000000000136ad3: movabs eax, dword ptr [0x6411c8c1480028d4]; xor rax, qword ptr [0x30]; jmp rax; 
0x0000000000107f13: movabs eax, dword ptr [0x6411c8c148002bc0]; xor rax, qword ptr [0x30]; jmp rax; 
0x0000000000126b67: movabs eax, dword ptr [0x8824848b48]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000009e352: movabs eax, dword ptr [0x8d49930c6349000d]; or al, 0xb; jmp rcx; 
0x0000000000187811: movabs eax, dword ptr [0xa872fffca8f2fffc]; cld; jmp rdx; 
0x0000000000187791: movabs eax, dword ptr [0xa8a0fffca920fffc]; cld; call qword ptr [rax]; 
0x000000000013375d: movabs eax, dword ptr [0xc128058b48000001]; sub byte ptr [rax], al; call qword ptr [rax]; 
0x000000000017495f: movabs eax, dword ptr [0xdbd7170d7733db8]; shl dword ptr [rdi - 5], 1; ret; 
0x00000000001995ce: movabs eax, dword ptr [0xeddba10d1cffedfb]; jmp qword ptr [rdx]; 
0x00000000000f6063: movabs eax, dword ptr [0xff894cf631000008]; call rbx; 
0x00000000000f2419: movabs r10, 0x48028964d8f7002c; or eax, 0xffffffff; ret; 
0x000000000003d2cb: movabs rax, 0x5deece66d; mov qword ptr [rsi + 0x10], rax; xor eax, eax; ret; 
0x0000000000187810: movabs rax, qword ptr [0xa872fffca8f2fffc]; cld; jmp rdx; 
0x0000000000160a48: movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036062: movabs rdx, 0x8010000000000000; add rax, rdx; shr rax, 0x3f; ret; 
0x0000000000160b48: movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000361c6: movapd xmm0, xmm1; ret; 
0x00000000000361c7: movaps xmm0, xmm1; ret; 
0x0000000000036401: movd eax, mm0; and eax, 0x7fffffff; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x0000000000036400: movd eax, xmm0; and eax, 0x7fffffff; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x00000000000363e1: movd edx, mm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x00000000000363e0: movd edx, xmm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret; 
0x00000000000362d6: movd mm0, eax; mov dword ptr [rdi], edx; ret; 
0x00000000000360e6: movd mm0, eax; ret; 
0x00000000000362d5: movd mm0, rax; mov dword ptr [rdi], edx; ret; 
0x00000000000360e5: movd mm0, rax; ret; 
0x0000000000036502: movd mm1, eax; movaps xmm0, xmm1; ret; 
0x000000000003614f: movd mm1, eax; movsd qword ptr [rdi], xmm1; ret; 
0x0000000000036496: movd mm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x00000000000361c3: movd mm1, edi; movapd xmm0, xmm1; ret; 
0x0000000000036118: movd mm1, edx; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x000000000003647d: movd mm1, edx; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x000000000003614e: movd mm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000361c2: movd mm1, rdi; movapd xmm0, xmm1; ret; 
0x0000000000036117: movd mm1, rdx; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x000000000003646c: movd xmm0, eax; ret; 
0x0000000000036501: movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x0000000000036495: movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x000000000003647c: movd xmm1, edx; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000147f8c: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, qword ptr [rip + 0x3e9f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001455bc: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, qword ptr [rip + 0x41204]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142bec: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, qword ptr [rip + 0x43a14]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000009f771: movdqa xmmword ptr [rdi], xmm0; add rdi, 0x10; lea r11, qword ptr [rip + 0xd8f50]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f752: movdqa xmmword ptr [rdi], xmm0; add rdi, 0x10; lea r11, qword ptr [rip + 0xd8f6f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df61: movdqa xmmword ptr [rdi], xmm0; add rdi, 0x10; lea r11, qword ptr [rip + 0xda580]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df42: movdqa xmmword ptr [rdi], xmm0; add rdi, 0x10; lea r11, qword ptr [rip + 0xda59f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f390: movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009dbb0: movdqu xmm0, xmmword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x000000000009e560: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009f3b0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009cef0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000009e5a0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009f3f0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009cf30: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000009cf20: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000009e580: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009f3d0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009cf10: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000009e620: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009f470: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009cfb0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000009cf90: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000009e5e0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009f430: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009cf50: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000009e600: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009f450: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009cf70: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000009d090: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000009e6c0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009f510: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009d030: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000009e6e0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009f530: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009d050: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000009e700: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009f550: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009d070: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000009f380: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009e540: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009e550: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009cee0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000009ced0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000a0df0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000009dd84: movdqu xmm2, xmmword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x20]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x000000000009d094: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000009e6c4: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009f514: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009d034: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000009e6e4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009f534: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009d054: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000a0fa4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000009e704: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009f554: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009d074: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000a0fc4: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000014938a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014923a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001490ea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148f9a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d9e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148e4a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3db37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148cfa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3dc87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148baa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3ddd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014890a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001487ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014866a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014851a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001483ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e5b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014827a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014812a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001469ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3fe07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014686a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3ff57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014671a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x400a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001465ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x401f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014647a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014632a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001461da: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x405e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145f3a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145dea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x409d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145c9a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145b4a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40c77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001459fa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40dc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001458aa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40f17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014575a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x41067]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143fea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42617]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143e9a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42767]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143d4a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x428b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143bfa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143aaa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014395a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014380a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014356a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014341a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x431e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001432ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014317a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014302a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x435d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142eda: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142d8a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014942b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001492db: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014903b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148d9b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dbe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148c4b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dd39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148afb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3de89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148a62: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3df22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001489ab: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dfd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014885b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014870b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001485bb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e3c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014846b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014831b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001481cb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e7b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146a5b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3fd69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014690b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3feb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001467bb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014666b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40159]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014651b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x402a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001463cb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x403f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014627b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014612b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146092: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40732]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145fdb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x407e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145e8b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145d3b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145beb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40bd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a9b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40d29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014594b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40e79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001457fb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40fc9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014408b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42579]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143f3b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x426c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143deb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c9b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143b4b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001439fb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001438ab: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014375b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001436c2: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42f42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014360b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001434bb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014336b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43299]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014321b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x433e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001430cb: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142f7b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142e2b: movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x437d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014cb11: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000009e72d: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009f57d: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009dd90: movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000a1010: movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x000000000009d09d: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000a0fed: movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000008c4f0: movdqu xmmword ptr [rdi + 0x10], xmm8; movdqu xmmword ptr [rdi + rdx - 0x20], xmm8; ret; 
0x000000000014d181: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d111: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d0a1: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d031: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cfc1: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cf51: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cee1: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce71: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce01: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cd91: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cd21: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ccb1: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cc41: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cbd1: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cb61: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cb07: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000009f7e3: movdqu xmmword ptr [rdi + 0x30], xmm7; lea rax, qword ptr [rdi + 0x40]; ret; 
0x000000000009dfd3: movdqu xmmword ptr [rdi + 0x30], xmm7; ret; 
0x00000000000a1063: movdqu xmmword ptr [rdi + 0x30], xmm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x000000000014cd9f: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cd2f: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ccbf: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cc4f: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000009e6cd: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009f51d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009d03d: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000a0f8d: movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x000000000014cbdf: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000009e6ed: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009f53d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009d05d: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000a0fad: movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000014cb6f: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000009e70d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009f55d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009d07d: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000a0fcd: movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000014d18f: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d11f: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d0af: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d03f: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cfcf: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cf5f: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ceef: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce7f: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce0f: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000008c4f6: movdqu xmmword ptr [rdi + rdx - 0x20], xmm8; ret; 
0x000000000014c2fb: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000014c36b: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014caa6: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014ca26: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c996: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c916: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c896: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c816: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c796: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c716: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c696: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c616: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c596: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c516: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c486: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c3f6: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c366: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c2f1: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000014ca97: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014ca17: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c987: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c907: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c887: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c807: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c787: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c707: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c687: movdqu xmmword ptr [rdi - 0x29], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c607: movdqu xmmword ptr [rdi - 0x2a], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c587: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c507: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c477: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c3e7: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c357: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c2e7: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000009de90: movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x000000000009f384: movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009e544: movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009f397: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009dbb7: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000a0e07: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x000000000009e554: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009cee4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000009e5a7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009f3f7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009e5c7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009cf37: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000009f41a: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009dc0a: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000a0e8a: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x000000000009cf27: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000a0e67: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x000000000009e587: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009f3d7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009cf17: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000a0e47: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x000000000009e628: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009f478: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009e648: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009cfb8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000009cf98: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000a0ee8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x000000000009f49b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009dc8b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000a0f0b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x000000000009e68b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009f4db: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009cffb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000a0f4b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x000000000009e6ab: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009f4fb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009d01b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000a0f6b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x000000000009e66c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009f4bc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009cfdc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000a0f2c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x000000000009e5e8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009f438: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009cf58: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000a0ea8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x000000000009e608: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009f458: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009cf78: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000a0ec8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000009e568: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009f3b8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009cef8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000a0e28: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x000000000009e729: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009f579: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009dd8c: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000a100c: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x000000000009d099: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000a0fe9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000009e6c9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009f519: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009d039: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000a0f89: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x000000000009e6e9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009f539: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009d059: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000a0fa9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000009e709: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009f559: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009d079: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000a0fc9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000009ced4: movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000a0df4: movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000014cb74: movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000099c92: movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099cb2: movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099cd2: movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x0000000000099b1c: movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c903: movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x0000000000099c09: movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x0000000000099c29: movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x0000000000099c49: movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000099c69: movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000099ac6: movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000099b18: movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000099c89: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099ca9: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099cc9: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x000000000009c819: movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c89a: movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000099c05: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x0000000000099c25: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x0000000000099c45: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000099c65: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000099ac2: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000099c85: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099ca5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099cc5: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x000000000009c815: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c896: movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000099b0f: movlpd xmm0, qword ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000099c8d: movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099cad: movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099ccd: movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x000000000009c81d: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c8fe: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x0000000000099b13: movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000099c93: movlps qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099cb3: movlps qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099cd3: movlps qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x0000000000099b1d: movlps qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c904: movlps qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x0000000000099c0a: movlps qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x0000000000099c2a: movlps qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x0000000000099c4a: movlps qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000099c6a: movlps qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000099ac7: movlps qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000099b19: movlps qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000099c8a: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099caa: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099cca: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x000000000009c81a: movlps qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c89b: movlps qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000099c06: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov al, byte ptr [rcx + 8]; mov byte ptr [rdx + 8], al; mov rax, rdi; ret; 
0x0000000000099c26: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov ax, word ptr [rcx + 8]; mov word ptr [rdx + 8], ax; mov rax, rdi; ret; 
0x0000000000099c46: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000099c66: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000099ac3: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000099c86: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099ca6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099cc6: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x000000000009c816: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c897: movlps xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000099b10: movlps xmm0, qword ptr [rcx]; movlpd xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x0000000000099c8e: movlps xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x0000000000099cae: movlps xmm1, qword ptr [rcx + 6]; movlpd qword ptr [rdx + 6], xmm1; mov rax, rdi; ret; 
0x0000000000099cce: movlps xmm1, qword ptr [rcx + 7]; movlpd qword ptr [rdx + 7], xmm1; mov rax, rdi; ret; 
0x000000000009c81e: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c8ff: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx + 8], xmm1; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x0000000000099b14: movlps xmm1, qword ptr [rcx + 8]; movlpd qword ptr [rdx], xmm0; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009f391: movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009dbb1: movq mm0, qword ptr [rsi]; mov cl, byte ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x000000000009e561: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009f3b1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009cef1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000009e5a1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009f3f1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009cf31: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000009cf21: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000009e581: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009f3d1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009cf11: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x000000000009e621: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009f471: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009cfb1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000009cf91: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000009e5e1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009f431: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009cf51: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000009e601: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009f451: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009cf71: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000009d091: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000009e6c1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009f511: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009d031: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000009e6e1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009f531: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009d051: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000009e701: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009f551: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009d071: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000009f381: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009e541: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009e551: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009cee1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000009ced1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000000a0df1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000009dd85: movq mm2, qword ptr [rsi + 0x10]; mov cl, byte ptr [rsi + 0x20]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x000000000009d095: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000009e6c5: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009f515: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009d035: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000009e6e5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009f535: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009d055: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000a0fa5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000009e705: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009f555: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009d075: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000a0fc5: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000014938b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014923b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001490eb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148f9b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d9e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148e4b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3db37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148cfb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3dc87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148bab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3ddd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014890b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001487bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014866b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014851b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001483cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e5b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014827b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014812b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001469bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3fe07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014686b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3ff57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014671b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x400a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001465cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x401f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014647b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014632b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001461db: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x405e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145f3b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145deb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x409d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145c9b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145b4b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40c77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001459fb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40dc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001458ab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40f17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014575b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x41067]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143feb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42617]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143e9b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42767]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143d4b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x428b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143bfb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143aab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014395b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014380b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014356b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014341b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x431e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001432cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014317b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014302b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x435d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142edb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142d8b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014942c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3d559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001492dc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3d6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014903c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3d949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148d9c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3dbe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148c4c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3dd39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148afc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3de89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148a63: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3df22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001489ac: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3dfd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014885c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3e129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014870c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3e279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001485bc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3e3c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014846c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3e519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014831c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3e669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001481cc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3e7b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146a5c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3fd69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014690c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x3feb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001467bc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x40009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014666c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x40159]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014651c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x402a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001463cc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x403f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014627c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x40549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014612c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x40699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146093: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x40732]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145fdc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x407e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145e8c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x40939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145d3c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x40a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145bec: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x40bd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a9c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x40d29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014594c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x40e79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001457fc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x40fc9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014408c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x42579]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143f3c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x426c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143dec: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x42819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c9c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x42969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143b4c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x42ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001439fc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x42c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001438ac: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x42d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014375c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x42ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001436c3: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x42f42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014360c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x42ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001434bc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x43149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014336c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x43299]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014321c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x433e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001430cc: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x43539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142f7c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x43689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142e2c: movq qword ptr [r8], mm0; lea r11, qword ptr [rip + 0x437d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014938c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014923c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001490ec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148f9c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3d9e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148e4c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3db37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148cfc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3dc87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148bac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3ddd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014890c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001487bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014866c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014851c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001483cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e5b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014827c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014812c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3e857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001469bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3fe07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014686c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x3ff57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014671c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x400a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001465cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x401f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014647c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014632c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001461dc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x405e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145f3c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145dec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x409d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145c9c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145b4c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40c77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001459fc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40dc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001458ac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x40f17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014575c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x41067]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143fec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42617]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143e9c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42767]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143d4c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x428b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143bfc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143aac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014395c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014380c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x42df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014356c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014341c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x431e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001432cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014317c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014302c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x435d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142edc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142d8c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, qword ptr [rip + 0x43877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014942d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3d559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001492dd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3d6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014903d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3d949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148d9d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3dbe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148c4d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3dd39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148afd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3de89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148a64: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3df22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001489ad: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3dfd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014885d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3e129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014870d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3e279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001485bd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3e3c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014846d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3e519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014831d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3e669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001481cd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3e7b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146a5d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3fd69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014690d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x3feb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001467bd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x40009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014666d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x40159]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014651d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x402a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001463cd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x403f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014627d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x40549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014612d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x40699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146094: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x40732]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145fdd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x407e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145e8d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x40939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145d3d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x40a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145bed: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x40bd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a9d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x40d29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014594d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x40e79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001457fd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x40fc9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014408d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x42579]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143f3d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x426c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ded: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x42819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c9d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x42969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143b4d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x42ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001439fd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x42c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001438ad: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x42d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014375d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x42ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001436c4: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x42f42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014360d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x42ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001434bd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x43149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014336d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x43299]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014321d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x433e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001430cd: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x43539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142f7d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x43689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142e2d: movq qword ptr [rax], mm0; lea r11, qword ptr [rip + 0x437d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014cb12: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000008c4f2: movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm8; ret; 
0x000000000009e72e: movq qword ptr [rdi + 0x10], mm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009f57e: movq qword ptr [rdi + 0x10], mm2; lea rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009dd91: movq qword ptr [rdi + 0x10], mm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000a1011: movq qword ptr [rdi + 0x10], mm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x000000000009d09e: movq qword ptr [rdi + 0x10], mm2; ret; 
0x00000000000a0fee: movq qword ptr [rdi + 0x10], mm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000014d182: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d112: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d0a2: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d032: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cfc2: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cf52: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cee2: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce72: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce02: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cd92: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cd22: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ccb2: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cc42: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cbd2: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cb62: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cb08: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000009f7e4: movq qword ptr [rdi + 0x30], mm7; lea rax, qword ptr [rdi + 0x40]; ret; 
0x000000000009dfd4: movq qword ptr [rdi + 0x30], mm7; ret; 
0x00000000000a1064: movq qword ptr [rdi + 0x30], mm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x000000000014cda0: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cd30: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ccc0: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cc50: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000009e6ce: movq qword ptr [rdi + 0xd], mm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009f51e: movq qword ptr [rdi + 0xd], mm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009d03e: movq qword ptr [rdi + 0xd], mm2; ret; 
0x00000000000a0f8e: movq qword ptr [rdi + 0xd], mm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x000000000014cbe0: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000009e6ee: movq qword ptr [rdi + 0xe], mm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009f53e: movq qword ptr [rdi + 0xe], mm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009d05e: movq qword ptr [rdi + 0xe], mm2; ret; 
0x00000000000a0fae: movq qword ptr [rdi + 0xe], mm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000014cb70: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000009e70e: movq qword ptr [rdi + 0xf], mm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009f55e: movq qword ptr [rdi + 0xf], mm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009d07e: movq qword ptr [rdi + 0xf], mm2; ret; 
0x00000000000a0fce: movq qword ptr [rdi + 0xf], mm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000014d190: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d120: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d0b0: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014d040: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cfd0: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cf60: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cef0: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce80: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014ce10: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000008c4f8: movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x000000000014c2fc: movq qword ptr [rdi - 0x10], mm0; ret; 
0x000000000014c36c: movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000014caa7: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014ca27: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c997: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c917: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c897: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c817: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c797: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c717: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c697: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c617: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c597: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c517: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c487: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c3f7: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c367: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c2f2: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000014ca98: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014ca18: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c988: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c908: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c888: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c808: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c788: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c708: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c688: movq qword ptr [rdi - 0x29], mm0; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c608: movq qword ptr [rdi - 0x2a], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c588: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c508: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c478: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c3e8: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c358: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000014c2e8: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000147f8d: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, qword ptr [rip + 0x3e9f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001455bd: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, qword ptr [rip + 0x41204]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142bed: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, qword ptr [rip + 0x43a14]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000009de91: movq qword ptr [rdi - 1], mm0; ret; 
0x000000000009f772: movq qword ptr [rdi], mm0; add rdi, 0x10; lea r11, qword ptr [rip + 0xd8f50]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f753: movq qword ptr [rdi], mm0; add rdi, 0x10; lea r11, qword ptr [rip + 0xd8f6f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df62: movq qword ptr [rdi], mm0; add rdi, 0x10; lea r11, qword ptr [rip + 0xda580]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df43: movq qword ptr [rdi], mm0; add rdi, 0x10; lea r11, qword ptr [rip + 0xda59f]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f385: movq qword ptr [rdi], mm0; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009e545: movq qword ptr [rdi], mm0; lea rax, qword ptr [rdi + 0xf]; ret; 
0x000000000009f398: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009dbb8: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; ret; 
0x00000000000a0e08: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], cl; xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x000000000009e555: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009cee5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000009e5a8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009f3f8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009e5c8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, qword ptr [rdi + 0x14]; ret; 
0x000000000009cf38: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000009f41b: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009dc0b: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x00000000000a0e8b: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x000000000009cf28: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000000a0e68: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x000000000009e588: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009f3d8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, qword ptr [rdi + 0x13]; ret; 
0x000000000009cf18: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000000a0e48: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x000000000009e629: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009f479: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009e649: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, qword ptr [rdi + 0x18]; ret; 
0x000000000009cfb9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000009cf99: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000000a0ee9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x000000000009f49c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009dc8c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x00000000000a0f0c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x000000000009e68c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009f4dc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009cffc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000000a0f4c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x000000000009e6ac: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009f4fc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009d01c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000000a0f6c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x000000000009e66d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009f4bd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009cfdd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000a0f2d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x000000000009e5e9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x15]; ret; 
0x000000000009f439: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009cf59: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000000a0ea9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x000000000009e609: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x16]; ret; 
0x000000000009f459: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, qword ptr [rdi + 0x17]; ret; 
0x000000000009cf79: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000000a0ec9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x000000000009e569: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x11]; ret; 
0x000000000009f3b9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, qword ptr [rdi + 0x12]; ret; 
0x000000000009cef9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000000a0e29: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x000000000009e72a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009f57a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009dd8d: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; ret; 
0x00000000000a100d: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; mov byte ptr [rdi + 0x20], cl; xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x000000000009d09a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000000a0fea: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x000000000009e6ca: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009f51a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009d03a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000a0f8a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x000000000009e6ea: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009f53a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009d05a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000000a0faa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x000000000009e70a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1e]; ret; 
0x000000000009f55a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009d07a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000000a0fca: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000009ced5: movq qword ptr [rdi], mm0; ret; 
0x00000000000a0df5: movq qword ptr [rdi], mm0; xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x000000000014cb75: movq qword ptr [rdi], mm1; ret; 
0x0000000000001b07: movq qword ptr [rdx - 0x46], mm2; fidiv dword ptr [rbx]; push rdx; test dword ptr [rbx + 0x59e7c8ee], esi; pop rbx; ret 0x2a63; 
0x00000000000362d4: movq xmm0, rax; mov dword ptr [rdi], edx; ret; 
0x00000000000360e4: movq xmm0, rax; ret; 
0x000000000003614d: movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000361c1: movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x0000000000036116: movq xmm1, rdx; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x000000000018b8e8: movsb byte ptr [rdi], byte ptr [rsi]; add al, 0xf7; jmp rsp; 
0x00000000001b2a4c: movsb byte ptr [rdi], byte ptr [rsi]; add al, byte ptr [rax]; ror byte ptr [rax - 9], 1; jmp qword ptr [rsi]; 
0x000000000018c34c: movsb byte ptr [rdi], byte ptr [rsi]; add al, byte ptr cs:[rax]; in al, 5; clc; call rsp; 
0x0000000000192b4c: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [r8], al; cmp byte ptr [rdx], 0xfa; jmp qword ptr [rcx]; 
0x0000000000086328: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; call rax; 
0x00000000000e1e86: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rcx], bh; ret 0x8f0f; 
0x00000000001a634c: movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rcx], 0xf4c5c000; call qword ptr [rax + 5]; 
0x00000000001b634c: movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rdx], 0xf7f5c000; call rdx; 
0x00000000001a084c: movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr es:[rax], eax; and dl, cl; int1; call qword ptr [rbx]; 
0x000000000018cdf8: movsb byte ptr [rdi], byte ptr [rsi]; add ecx, edi; jmp rsp; 
0x00000000001a484c: movsb byte ptr [rdi], byte ptr [rsi]; add word ptr [rax], ax; xor byte ptr [rcx], cl; hlt; jmp rdx; 
0x000000000019ca4c: movsb byte ptr [rdi], byte ptr [rsi]; call 0xffffffffbb09ca52; out dx, al; call qword ptr [rdi]; 
0x00000000001877b9: movsb byte ptr [rdi], byte ptr [rsi]; cld; call qword ptr [rax]; 
0x00000000001879b5: movsb byte ptr [rdi], byte ptr [rsi]; cld; jmp qword ptr [rax]; 
0x0000000000187835: movsb byte ptr [rdi], byte ptr [rsi]; cld; jmp qword ptr [rdx - 0x5c]; 
0x0000000000187839: movsb byte ptr [rdi], byte ptr [rsi]; cld; jmp rdx; 
0x000000000018a390: movsb byte ptr [rdi], byte ptr [rsi]; fyl2x; call rsp; 
0x0000000000032ef3: movsb byte ptr [rdi], byte ptr [rsi]; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000018d070: movsb byte ptr [rdi], byte ptr [rsi]; imul edi, ecx, 0x2905cff; add byte ptr [rdx + rbp*2], ah; stc; jmp rsp; 
0x00000000001945f9: movsb byte ptr [rdi], byte ptr [rsi]; in al, dx; call rdx; 
0x0000000000174aa2: movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x00000000001b5b4c: movsb byte ptr [rdi], byte ptr [rsi]; jns 0x1b5b51; add al, ah; fcomi st(7); jmp qword ptr [rbx]; 
0x000000000018da40: movsb byte ptr [rdi], byte ptr [rsi]; jo 0x18da3d; jmp rsp; 
0x000000000018a270: movsb byte ptr [rdi], byte ptr [rsi]; mov bh, 0xf1; jmp rsp; 
0x00000000001a191c: movsb byte ptr [rdi], byte ptr [rsi]; mov dh, cl; jmp qword ptr [rdx]; 
0x00000000000c3c41: movsb byte ptr [rdi], byte ptr [rsi]; mov rax, qword ptr [rbp - 0x418]; call qword ptr [rax + 0x30]; 
0x0000000000036ec0: movsb byte ptr [rdi], byte ptr [rsi]; outsd dx, dword ptr [rsi]; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x0000000000188340: movsb byte ptr [rdi], byte ptr [rsi]; por mm7, mm7; mov esp, 0xb4000095; adc bl, ch; call rsp; 
0x000000000018d060: movsb byte ptr [rdi], byte ptr [rsi]; push -0x70b30007; add al, byte ptr [rax]; and al, 0x69; stc; call rsp; 
0x0000000000188a4c: movsb byte ptr [rdi], byte ptr [rsi]; ret 0; 
0x00000000000b39b8: movsb byte ptr [rdi], byte ptr [rsi]; ret 0xfff7; 
0x00000000000589f0: movsb byte ptr [rdi], byte ptr [rsi]; ret 0xffff; 
0x00000000001aa44c: movsb byte ptr [rdi], byte ptr [rsi]; ret 1; 
0x000000000011a9fd: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000018c4c8: movsb byte ptr [rdi], byte ptr [rsi]; sbb al, 0xf8; jmp rsp; 
0x000000000019fb4c: movsb byte ptr [rdi], byte ptr [rsi]; sbb dword ptr [rcx], eax; add al, al; sbb cl, dh; jmp qword ptr [rcx]; 
0x000000000018acbc: movsb byte ptr [rdi], byte ptr [rsi]; scasb al, byte ptr [rdi]; add dword ptr [rax], eax; cmp esp, esi; call rsp; 
0x000000000018cee8: movsb byte ptr [rdi], byte ptr [rsi]; stc; call qword ptr [rax + rax*4 + 2]; add byte ptr [rdx + rbp], dh; stc; jmp rsp; 
0x00000000001863b1: movsb byte ptr [rdi], byte ptr [rsi]; std; inc dword ptr [rdx - 0x5b]; std; call qword ptr [rdx]; 
0x00000000001863c1: movsb byte ptr [rdi], byte ptr [rsi]; std; jmp qword ptr [rax - 0x5b]; 
0x00000000001ae564: movsb byte ptr [rdi], byte ptr [rsi]; xchg eax, edi; cmc; jmp qword ptr [rdx]; 
0x000000000018d134: movsb byte ptr [rdi], byte ptr [rsi]; xchg eax, esi; add al, byte ptr [rax]; mov ah, 0x7f; stc; call rsp; 
0x000000000019abac: movsd dword ptr [rdi], dword ptr [rsi]; adc ebp, esi; jmp qword ptr [rdx]; 
0x00000000001a870d: movsd dword ptr [rdi], dword ptr [rsi]; add dword ptr [rax], eax; push rbp; cmc; call qword ptr [rcx]; 
0x00000000000a5664: movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rsi + 0xf]; 
0x000000000018cc21: movsd dword ptr [rdi], dword ptr [rsi]; clc; lcall ptr [rbp*2 - 0x594bfffe]; clc; jmp rsp; 
0x00000000001877b1: movsd dword ptr [rdi], dword ptr [rsi]; cld; call qword ptr [rax]; 
0x00000000001879ad: movsd dword ptr [rdi], dword ptr [rsi]; cld; jmp qword ptr [rax]; 
0x000000000018782d: movsd dword ptr [rdi], dword ptr [rsi]; cld; jmp qword ptr [rdx - 0x5b]; 
0x0000000000187831: movsd dword ptr [rdi], dword ptr [rsi]; cld; jmp rdx; 
0x00000000000b3677: movsd dword ptr [rdi], dword ptr [rsi]; fdiv dword ptr [rax]; add byte ptr [rcx - 0x76dbdbbc], cl; ret; 
0x0000000000038ac2: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000006aba0: movsd dword ptr [rdi], dword ptr [rsi]; sar dh, 0xff; jmp qword ptr [rsi + 0x45]; 
0x0000000000073347: movsd dword ptr [rdi], dword ptr [rsi]; sar edx, -1; xor eax, eax; pop rbx; ret; 
0x00000000001863c5: movsd dword ptr [rdi], dword ptr [rsi]; std; call qword ptr [rax - 0x5a]; 
0x00000000001863b5: movsd dword ptr [rdi], dword ptr [rsi]; std; call qword ptr [rdx]; 
0x0000000000186415: movsd dword ptr [rdi], dword ptr [rsi]; std; jmp rsi; 
0x00000000000f933b: movsd dword ptr [rdi], dword ptr [rsi]; test byte ptr [rax + rax], ch; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000001a870c: movsd dword ptr [rdi], dword ptr fs:[rsi]; add dword ptr [rax], eax; push rbp; cmc; call qword ptr [rcx]; 
0x000000000003d1b2: movsd qword ptr [rbp], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000360dd: movsd qword ptr [rdi], xmm0; and rax, rdx; movq xmm0, rax; ret; 
0x0000000000036152: movsd qword ptr [rdi], xmm1; ret; 
0x000000000003611b: movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x000000000003d028: movsd xmm0, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000b0788: movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000039e43: movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000036463: movss dword ptr [rdi], xmm0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x0000000000036499: movss dword ptr [rdi], xmm1; ret; 
0x0000000000036480: movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000039dfd: movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000101ec0: movsx eax, bpl; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000257a5: movsx eax, byte ptr [rax + 0xb]; mov dword ptr [rdx + 0x50], ecx; mov dword ptr [rdx + 0x54], eax; ret; 
0x000000000012e178: movsx eax, byte ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000101ec1: movsx eax, ch; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012e0b8: movsx eax, word ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012d3a9: movsx eax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000369b8: movsx eax, word ptr [rsp - 0x10]; and eax, 0x8000; ret; 
0x00000000000257a1: movsx ecx, byte ptr [rax + 0xa]; movsx eax, byte ptr [rax + 0xb]; mov dword ptr [rdx + 0x50], ecx; mov dword ptr [rdx + 0x54], eax; ret; 
0x00000000000886ba: movsx edx, dh; mov eax, edx; ret; 
0x00000000000886b9: movsx edx, sil; mov eax, edx; ret; 
0x00000000000257a0: movsx r9, byte ptr [rax + 0xa]; movsx eax, byte ptr [rax + 0xb]; mov dword ptr [rdx + 0x50], ecx; mov dword ptr [rdx + 0x54], eax; ret; 
0x000000000012d3a8: movsx rax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000fa5ab: movsxd r10, ecx; mov ecx, 0x119; mov eax, ecx; syscall; 
0x00000000000fba5a: movsxd r10, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x12b; syscall; 
0x00000000000fbb0a: movsxd r10, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x133; syscall; 
0x00000000000c0aed: movsxd r10, ecx; mov esi, esi; mov edi, edi; mov eax, 0xf7; syscall; 
0x00000000000ed305: movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x00000000000fb9ba: movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x120; syscall; 
0x00000000000fb3f0: movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2c; syscall; 
0x00000000000fb280: movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2d; syscall; 
0x00000000000ed0e0: movsxd r10, ecx; movsxd rdi, edi; mov eax, 0xdd; syscall; 
0x00000000000fa540: movsxd r10, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x119; syscall; 
0x00000000000c0b4b: movsxd r10, ecx; syscall; 
0x00000000000eb1ed: movsxd r10, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000005ea6f: movsxd r12, edx; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x0000000000049be7: movsxd r13, edx; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000091d5e: movsxd r8, dword ptr [rax + r8*4]; add rax, r8; jmp rax; 
0x00000000000ec840: movsxd r8, r8d; mov r10d, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x104; syscall; 
0x00000000000ece33: movsxd r8, r8d; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x109; syscall; 
0x0000000000096860: movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x00000000000838bf: movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000006c75a: movsxd rax, dword ptr [r8 + rax*4]; add rax, r8; jmp rax; 
0x000000000004dd93: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x000000000004d590: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov byte ptr [rbp - 0x4fa], 0x20; mov dword ptr [rbp - 0x530], 1; jmp rax; 
0x000000000004ecb4: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004ed63: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004e97b: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004d539: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004baa0: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000004e9dc: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x558], 1; jmp rax; 
0x000000000004debf: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004ec53: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004e796: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004e839: movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000005f060: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; jmp rax; 
0x000000000005f13e: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005ef45: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 0; jmp rax; 
0x000000000005efe3: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 1; jmp rax; 
0x000000000005f1d2: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1100], 0x20; mov dword ptr [rbp - 0x10fc], 1; jmp rax; 
0x000000000005f188: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005ef99: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000005f226: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f0a0: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f2db: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f0ea: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x1138], 1; mov dword ptr [rbp - 0x1128], 0; jmp rax; 
0x000000000005f325: movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x0000000000034ed9: movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000054a55: movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x000000000006d0b8: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000127094: movsxd rax, dword ptr [rdi + rax*4]; add rdi, rax; jmp rdi; 
0x0000000000030790: movsxd rax, dword ptr [rdx + r12*4]; add rdx, rax; jmp rdx; 
0x0000000000022b6c: movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x000000000006c81a: movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x00000000000a1a67: movsxd rax, dword ptr [rsi + rdi*4]; add rsi, rax; jmp rsi; 
0x000000000012da18: movsxd rax, dword ptr [rsi]; mov qword ptr [rsp + 8], r8; lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121ac8: movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp + 8], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121a50: movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000003cad6: movsxd rax, dword ptr [rsp + 0xc]; add rsp, 0x18; ret; 
0x00000000000ec841: movsxd rax, eax; mov r10d, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x104; syscall; 
0x00000000000ece34: movsxd rax, eax; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x109; syscall; 
0x000000000013cbf7: movsxd rax, ecx; add rax, rdi; ret; 
0x000000000013cab7: movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x000000000013cb7e: movsxd rax, ecx; ret; 
0x0000000000139e2b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013ddc8: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000013d5e8: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000013d9d8: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d1f8: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a98b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013a16b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000013994b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000013d397: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013a4ab: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000139c8b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013946b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000013a64b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000013d888: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d0a8: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013e1b8: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001397ab: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001398e1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a5e1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a101: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d789: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013e0b9: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013a921: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000139c21: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000139741: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a441: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000013d8d9: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013d0f9: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000375c9: movsxd rax, ecx; shl rdx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x00000000001907d1: movsxd rbp, edx; call qword ptr [rax]; 
0x0000000000187d81: movsxd rbp, edx; call rsp; 
0x0000000000049be8: movsxd rbp, edx; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000000e2b4e: movsxd rbx, dword ptr [r10 + rbx*4]; add rbx, r10; jmp rbx; 
0x000000000013cacb: movsxd rbx, ebx; cmp cl, byte ptr [rax + 0x63]; ror dword ptr [rax + 1], -8; sub rax, rsi; ret; 
0x00000000000fc62d: movsxd rbx, ebx; mov qword ptr [rip + 0x2c1cca], rbx; pop rbx; ret; 
0x00000000000fa606: movsxd rbx, edi; mov eax, ecx; mov rdi, rbx; syscall; 
0x00000000000f0749: movsxd rbx, edi; mov rdi, rbx; lea rdx, qword ptr [rsp - 0x38]; syscall; 
0x000000000009d50a: movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000015fc7d: movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000009cc99: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000d43ae: movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x0000000000091aed: movsxd rcx, dword ptr [rax + rcx*4]; add rax, rcx; jmp rax; 
0x0000000000127f06: movsxd rcx, dword ptr [rax + rsi*4]; add rax, rcx; jmp rax; 
0x000000000012ef35: movsxd rcx, dword ptr [rax + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax; 
0x00000000000decd2: movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x000000000006d180: movsxd rcx, dword ptr [rsi + rcx*4]; add rsi, rcx; jmp rsi; 
0x000000000013ccfb: movsxd rcx, eax; adc dh, byte ptr [rbx - 0x10]; movsxd rcx, ecx; lea rax, qword ptr [rdi + rcx]; sub rax, rdx; ret; 
0x000000000013caa9: movsxd rcx, ebx; add cl, byte ptr [rdi]; xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000013cb08: movsxd rcx, ecx; cmp ch, byte ptr [rcx]; ret 0xca39; 
0x000000000013cd01: movsxd rcx, ecx; lea rax, qword ptr [rdi + rcx]; sub rax, rdx; ret; 
0x0000000000020c69: movsxd rcx, ecx; mov eax, 1; mov dword ptr [r9 + rcx*4], esi; inc dword ptr [rdi + 4]; ret; 
0x00000000000f7bf4: movsxd rdi, dword ptr [rbp - 0x6c]; mov eax, 3; syscall; 
0x000000000006f74f: movsxd rdi, dword ptr [rbx + 0xe0]; xor r10d, r10d; xor edx, edx; mov rsi, r9; mov eax, r8d; syscall; 
0x00000000001136c0: movsxd rdi, dword ptr [rdi]; mov eax, 3; syscall; 
0x00000000001136c0: movsxd rdi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x000000000011c45a: movsxd rdi, dword ptr [rsp + 0x10]; movsxd rsi, ebp; mov eax, 0x81; syscall; 
0x00000000000f1d22: movsxd rdi, dword ptr [rsp + 0x14]; syscall; 
0x00000000000fb2df: movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; movsxd r10, ecx; syscall; 
0x00000000000eb626: movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; syscall; 
0x00000000000ebc4e: movsxd rdi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000000fbb63: movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ebx; movsxd r10, ecx; syscall; 
0x00000000000f0a8a: movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000fa5a6: movsxd rdi, dword ptr [rsp + 4]; movsxd r10, ecx; mov ecx, 0x119; mov eax, ecx; syscall; 
0x00000000000fbabf: movsxd rdi, dword ptr [rsp + 4]; movsxd r10, ecx; syscall; 
0x00000000000f1264: movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x13; syscall; 
0x00000000000f1304: movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x14; syscall; 
0x00000000000f0587: movsxd rdi, dword ptr [rsp + 8]; mov eax, ebx; syscall; 
0x00000000000c0a52: movsxd rdi, dword ptr [rsp + 8]; syscall; 
0x00000000001b0cb9: movsxd rdi, eax; jmp qword ptr [rbx]; 
0x000000000018c8e1: movsxd rdi, eax; jmp rsp; 
0x000000000018c8d9: movsxd rdi, eax; lcall ptr [rdx + rdx*2 + 0x63820002]; clc; jmp rsp; 
0x0000000000131c42: movsxd rdi, eax; mov eax, 3; syscall; 
0x00000000000cb4ef: movsxd rdi, eax; mov rsi, r15; mov eax, 0xcc; syscall; 
0x00000000000eb088: movsxd rdi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x00000000000eb1eb: movsxd rdi, eax; movsxd r10, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000001087e7: movsxd rdi, eax; syscall; 
0x00000000000bcd95: movsxd rdi, ebp; mov al, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000cb426: movsxd rdi, ebp; mov eax, 0xcb; syscall; 
0x000000000001ff63: movsxd rdi, ebp; mov eax, 3; syscall; 
0x00000000000edccf: movsxd rdi, ebx; mov al, 3; syscall; 
0x00000000000f1579: movsxd rdi, ebx; mov eax, 0x127; syscall; 
0x00000000000f17d9: movsxd rdi, ebx; mov eax, 0x128; syscall; 
0x0000000000112f40: movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000c2781: movsxd rdi, ebx; mov eax, 3; syscall; 
0x00000000000f1f70: movsxd rdi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x00000000000464de: movsxd rdi, ebx; syscall; 
0x00000000000f25d2: movsxd rdi, ecx; dec dword ptr [rax - 0x73]; adc cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x00000000000eb198: movsxd rdi, ecx; mov eax, 0x103; syscall; 
0x0000000000036c2e: movsxd rdi, ecx; mov eax, 0xea; syscall; 
0x000000000007f883: movsxd rdi, ecx; mov eax, 3; syscall; 
0x00000000000cb378: movsxd rdi, edi; cmovbe rsi, r9; mov eax, ecx; syscall; 
0x0000000000036dab: movsxd rdi, edi; cmovne rax, rcx; mov ecx, 0xd; mov rsi, rax; mov eax, ecx; syscall; 
0x0000000000047074: movsxd rdi, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000f7d6d: movsxd rdi, edi; mov al, 3; syscall; 
0x00000000000eb557: movsxd rdi, edi; mov eax, 0x101; syscall; 
0x00000000000eb483: movsxd rdi, edi; mov eax, 0x102; syscall; 
0x00000000000ec849: movsxd rdi, edi; mov eax, 0x104; syscall; 
0x00000000000f3056: movsxd rdi, edi; mov eax, 0x105; syscall; 
0x00000000000ecf54: movsxd rdi, edi; mov eax, 0x107; syscall; 
0x000000000005dbc7: movsxd rdi, edi; mov eax, 0x108; syscall; 
0x00000000000ece3a: movsxd rdi, edi; mov eax, 0x109; syscall; 
0x00000000000f0a47: movsxd rdi, edi; mov eax, 0x10; syscall; 
0x00000000000ecef4: movsxd rdi, edi; mov eax, 0x10b; syscall; 
0x00000000000eb3f0: movsxd rdi, edi; mov eax, 0x10c; syscall; 
0x00000000000eb8d5: movsxd rdi, edi; mov eax, 0x10d; syscall; 
0x00000000000f1cc2: movsxd rdi, edi; mov eax, 0x10e; syscall; 
0x00000000000ed309: movsxd rdi, edi; mov eax, 0x118; syscall; 
0x00000000000fa547: movsxd rdi, edi; mov eax, 0x119; syscall; 
0x00000000000f0531: movsxd rdi, edi; mov eax, 0x11d; syscall; 
0x00000000000fb9be: movsxd rdi, edi; mov eax, 0x120; syscall; 
0x00000000000f1516: movsxd rdi, edi; mov eax, 0x127; syscall; 
0x00000000000f1776: movsxd rdi, edi; mov eax, 0x128; syscall; 
0x00000000000fba60: movsxd rdi, edi; mov eax, 0x12b; syscall; 
0x00000000000fbb10: movsxd rdi, edi; mov eax, 0x133; syscall; 
0x00000000000f121e: movsxd rdi, edi; mov eax, 0x13; syscall; 
0x00000000000f12be: movsxd rdi, edi; mov eax, 0x14; syscall; 
0x00000000000fb3f4: movsxd rdi, edi; mov eax, 0x2c; syscall; 
0x00000000000fb284: movsxd rdi, edi; mov eax, 0x2d; syscall; 
0x00000000000c0a03: movsxd rdi, edi; mov eax, 0x3d; syscall; 
0x00000000000eba80: movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000000ed0e4: movsxd rdi, edi; mov eax, 0xdd; syscall; 
0x00000000001088a9: movsxd rdi, edi; mov eax, 0xe3; syscall; 
0x0000000000108811: movsxd rdi, edi; mov eax, 0xe5; syscall; 
0x0000000000036ed7: movsxd rdi, edi; mov eax, 0xe; syscall; 
0x000000000002eb9d: movsxd rdi, edi; mov eax, 3; syscall; 
0x00000000000300d5: movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000f0943: movsxd rdi, edi; mov eax, ecx; syscall; 
0x000000000002fab8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000002ff28: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x48]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000002ff08: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov rax, qword ptr [rax + 0x58]; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x000000000002fe68: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000002fe48: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000002fe28: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000002fda8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000002fde8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000002fd48: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000002fdc8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000002fd88: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000002fee8: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002fd68: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000002fe08: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000002fd28: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x00000000000300b5: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x0000000000030095: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x0000000000030075: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000002fff5: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x0000000000030035: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000002ff95: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x0000000000030015: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000002ffd5: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000002ff65: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002ffb5: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x0000000000030055: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000002ff75: movsxd rdi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x0000000000109ee6: movsxd rdi, edi; xor eax, eax; syscall; 
0x000000000011b11c: movsxd rdi, edx; mov eax, r12d; syscall; 
0x0000000000165d15: movsxd rdi, edx; mov eax, r13d; syscall; 
0x000000000011874b: movsxd rdi, esi; mov eax, 3; syscall; 
0x0000000000186d69: movsxd rdi, esp; call qword ptr [rax + 0x63]; 
0x0000000000186d69: movsxd rdi, esp; call qword ptr [rax + 0x63]; cld; jmp rax; 
0x00000000001874e1: movsxd rdi, esp; call qword ptr [rax]; 
0x0000000000186c2d: movsxd rdi, esp; call qword ptr [rdx]; 
0x0000000000186b71: movsxd rdi, esp; call rax; 
0x0000000000186b6d: movsxd rdi, esp; inc dword ptr [rax + 0x63]; cld; call rax; 
0x0000000000186bad: movsxd rdi, esp; jmp qword ptr [rsi]; 
0x0000000000186d6d: movsxd rdi, esp; jmp rax; 
0x0000000000037f0b: movsxd rdi, esp; mov eax, 0x81; syscall; 
0x00000000000323d3: movsxd rdi, esp; mov eax, 3; syscall; 
0x00000000000f7f56: movsxd rdi, esp; mov eax, edx; syscall; 
0x0000000000037f0a: movsxd rdi, r12d; mov eax, 0x81; syscall; 
0x00000000000323d2: movsxd rdi, r12d; mov eax, 3; syscall; 
0x00000000000f7f55: movsxd rdi, r12d; mov eax, edx; syscall; 
0x00000000000cb425: movsxd rdi, r13d; mov eax, 0xcb; syscall; 
0x000000000001ff62: movsxd rdi, r13d; mov eax, 3; syscall; 
0x000000000011874a: movsxd rdi, r14d; mov eax, 3; syscall; 
0x00000000000f7d6c: movsxd rdi, r15d; mov al, 3; syscall; 
0x000000000002eb9c: movsxd rdi, r15d; mov eax, 3; syscall; 
0x00000000001087e6: movsxd rdi, r8d; syscall; 
0x00000000000eb197: movsxd rdi, r9d; mov eax, 0x103; syscall; 
0x000000000014291f: movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000e7279: movsxd rdx, dword ptr [rax + r11*4]; add rax, rdx; jmp rax; 
0x00000000000647ff: movsxd rdx, dword ptr [rax + r12*4]; add rax, rdx; jmp rax; 
0x0000000000054b84: movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000083575: movsxd rdx, dword ptr [rax + rdi*4]; add rax, rdx; jmp rax; 
0x00000000000b5308: movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000c286b: movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x000000000006d293: movsxd rdx, dword ptr [rcx + rdx*4]; add rcx, rdx; jmp rcx; 
0x00000000000b4c6b: movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000034c70: movsxd rdx, dword ptr [rdi + rsi*4]; add rdx, rdi; jmp rdx; 
0x00000000000eb61c: movsxd rdx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; syscall; 
0x00000000000bcc7d: movsxd rdx, dword ptr [rsp + 0xa0]; mov qword ptr [rbx + 0x20], rdx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000c0a47: movsxd rdx, dword ptr [rsp + 0xc]; mov rsi, qword ptr [rsp]; mov eax, ecx; movsxd rdi, dword ptr [rsp + 8]; syscall; 
0x0000000000117ec2: movsxd rdx, eax; add rdi, rdx; mov qword ptr [r9], rdi; ret; 
0x000000000007d071: movsxd rdx, eax; call 0x7cfa0; or dword ptr [rbx], 8; pop rbx; ret; 
0x00000000000eb1ee: movsxd rdx, eax; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000004ef05: movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000eb8d2: movsxd rdx, ebp; movsxd rdi, edi; mov eax, 0x10d; syscall; 
0x000000000006f5f5: movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000fa5ac: movsxd rdx, ecx; mov ecx, 0x119; mov eax, ecx; syscall; 
0x00000000000fba5b: movsxd rdx, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x12b; syscall; 
0x00000000000fbb0b: movsxd rdx, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x133; syscall; 
0x00000000000c0aee: movsxd rdx, ecx; mov esi, esi; mov edi, edi; mov eax, 0xf7; syscall; 
0x00000000000ed306: movsxd rdx, ecx; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x00000000000fb9bb: movsxd rdx, ecx; movsxd rdi, edi; mov eax, 0x120; syscall; 
0x00000000000fb3f1: movsxd rdx, ecx; movsxd rdi, edi; mov eax, 0x2c; syscall; 
0x00000000000fb281: movsxd rdx, ecx; movsxd rdi, edi; mov eax, 0x2d; syscall; 
0x00000000000ed0e1: movsxd rdx, ecx; movsxd rdi, edi; mov eax, 0xdd; syscall; 
0x00000000000fa541: movsxd rdx, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x119; syscall; 
0x00000000000c0b4c: movsxd rdx, ecx; syscall; 
0x00000000000f1ef1: movsxd rdx, edi; mov esi, 0x28121969; mov rdi, -0x11e2153; mov eax, 0xa9; syscall; 
0x0000000000036c28: movsxd rdx, edi; movsxd rsi, esi; movsxd rdi, ecx; mov eax, 0xea; syscall; 
0x00000000000fc112: movsxd rdx, edx; mov eax, 0x14; syscall; 
0x00000000000cb606: movsxd rdx, edx; mov eax, 0x1c; syscall; 
0x00000000000cb606: movsxd rdx, edx; mov eax, 0x1c; syscall; neg eax; ret; 
0x0000000000117da9: movsxd rdx, edx; mov eax, ebx; mov byte ptr [rdi + rdx], 0; pop rbx; ret; 
0x00000000000eb554: movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x00000000000ecf51: movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x107; syscall; 
0x000000000005dbc4: movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x108; syscall; 
0x00000000000ece37: movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x109; syscall; 
0x00000000000fa544: movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x119; syscall; 
0x00000000000f1513: movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x127; syscall; 
0x00000000000f1773: movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x128; syscall; 
0x00000000000f121b: movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x13; syscall; 
0x00000000000f12bb: movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x14; syscall; 
0x00000000000c0a00: movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x3d; syscall; 
0x00000000000f1573: movsxd rdx, esp; mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x127; syscall; 
0x00000000000f17d3: movsxd rdx, esp; mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x128; syscall; 
0x00000000000f1572: movsxd rdx, r12d; mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x127; syscall; 
0x00000000000f17d2: movsxd rdx, r12d; mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x128; syscall; 
0x00000000001276a6: movsxd rsi, dword ptr [rax + rsi*4]; add rax, rsi; jmp rax; 
0x00000000000a1b3f: movsxd rsi, dword ptr [rcx + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000a1aff: movsxd rsi, dword ptr [rdx + rax*4]; add rdx, rsi; jmp rdx; 
0x0000000000108962: movsxd rsi, dword ptr [rsp + 0xc]; mov rdi, rbx; mov eax, 0xe6; mov r10, rcx; syscall; 
0x00000000000f0582: movsxd rsi, dword ptr [rsp + 0xc]; movsxd rdi, dword ptr [rsp + 8]; mov eax, ebx; syscall; 
0x00000000000f7f53: movsxd rsi, eax; movsxd rdi, r12d; mov eax, edx; syscall; 
0x00000000001a8ff1: movsxd rsi, ebp; call rsp; 
0x00000000001a8fd9: movsxd rsi, ebp; jmp qword ptr [rcx]; 
0x000000000011c460: movsxd rsi, ebp; mov eax, 0x81; syscall; 
0x0000000000037f08: movsxd rsi, ebp; movsxd rdi, r12d; mov eax, 0x81; syscall; 
0x000000000018be41: movsxd rsi, edi; jmp rsp; 
0x00000000000ece91: movsxd rsi, esi; mov eax, 0x10a; syscall; 
0x00000000000fa69f: movsxd rsi, esi; mov eax, ecx; syscall; 
0x000000000010891e: movsxd rsi, esi; mov rdi, rbx; mov eax, 0xe6; syscall; 
0x0000000000036c2b: movsxd rsi, esi; movsxd rdi, ecx; mov eax, 0xea; syscall; 
0x00000000000f052e: movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x11d; syscall; 
0x00000000000eba7d: movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x00000000000c277a: movsxd rsi, esi; nop dword ptr [rax]; movsxd rdi, ebx; mov eax, 3; syscall; 
0x00000000001635ec: movsxd rsi, esi; ret 0x7520; 
0x00000000001a4bb1: movsxd rsi, esp; call qword ptr [rax]; 
0x00000000001a4b99: movsxd rsi, esp; jmp qword ptr [rax]; 
0x00000000001a4be1: movsxd rsi, esp; jmp qword ptr [rbx]; 
0x00000000001a4bc9: movsxd rsi, esp; jmp qword ptr [rcx]; 
0x000000000005ea70: movsxd rsp, edx; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000003d029: movups xmm0, xmmword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000b0789: movups xmm0, xmmword ptr [rsp - 0x10]; ret; 
0x0000000000039dfe: movups xmm0, xmmword ptr [rsp - 4]; ret; 
0x0000000000039e44: movups xmm0, xmmword ptr [rsp - 8]; ret; 
0x000000000003d1b3: movups xmmword ptr [rbp], xmm0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000036464: movups xmmword ptr [rdi], xmm0; and eax, 0x80000000; movd xmm0, eax; ret; 
0x00000000000360de: movups xmmword ptr [rdi], xmm0; and rax, rdx; movq xmm0, rax; ret; 
0x0000000000036153: movups xmmword ptr [rdi], xmm1; ret; 
0x000000000003611c: movups xmmword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x0000000000036481: movups xmmword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000121a8d: movzx eax, al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000121a27: movzx eax, al; add rsp, 0x10; pop rbx; ret; 
0x000000000012dd4b: movzx eax, al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000fb64d: movzx eax, al; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x00000000001215dc: movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b0075: movzx eax, al; lea eax, dword ptr [rax + rax - 1]; ret; 
0x00000000000c268e: movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x0000000000036a6c: movzx eax, al; mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x000000000006c757: movzx eax, al; movsxd rax, dword ptr [r8 + rax*4]; add rax, r8; jmp rax; 
0x0000000000054a52: movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x00000000000c7c14: movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000006c817: movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x0000000000101e90: movzx eax, al; neg eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000005db7c: movzx eax, al; neg eax; pop rbx; ret; 
0x0000000000022ca8: movzx eax, al; neg eax; ret; 
0x0000000000125fd3: movzx eax, al; pop r12; ret; 
0x000000000012287d: movzx eax, al; pop rbp; ret; 
0x0000000000048a52: movzx eax, al; pop rbx; neg eax; pop rbp; ret; 
0x00000000000f4bb6: movzx eax, al; pop rbx; ret; 
0x00000000000375b9: movzx eax, al; ret; 
0x000000000008bf83: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000002fd35: movzx eax, ax; ret; 
0x0000000000070b3d: movzx eax, bh; ret; 
0x000000000007a724: movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000097dbd: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000125d6e: movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x000000000007bda6: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x00000000000798c6: movzx eax, byte ptr [rax]; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000007a5c5: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002ef79: movzx eax, byte ptr [rax]; cmp al, 0xff; cmovne edx, eax; lea rax, qword ptr [rip + 0x390c98]; mov byte ptr [rip + 0x390cef], dl; ret; 
0x000000000007b1d8: movzx eax, byte ptr [rax]; pop rbx; ret; 
0x0000000000073652: movzx eax, byte ptr [rax]; ret; 
0x00000000001180d6: movzx eax, byte ptr [rdi + 1]; shl eax, 3; cdqe; shr rax, 4; ret; 
0x000000000013726b: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000156e0d: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x10468]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001548b8: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x129bd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013fdbd: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x274b8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013e418: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x28e5d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013ca1d: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x2a858]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013aa58: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0x2c81d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000915ad: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0xd5cc8]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000008eeb8: movzx eax, byte ptr [rdi + rdx]; lea rdx, qword ptr [rip + 0xd83bd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000097c4f: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000000883b8: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000163610: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000163670: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000163660: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000163650: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000163640: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000163630: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000163620: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000160b30: movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000001608e3: movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000001635f7: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000156e33: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x10443]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000001548d3: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x129a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013fde3: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x27493]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013e433: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x28e43]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013ca43: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x2a833]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000013aa73: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0x2c803]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000000915d3: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0xd5ca3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000008eed3: movzx eax, byte ptr [rdi]; lea rdx, qword ptr [rip + 0xd83a3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000015fc90: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000008bf60: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000883d3: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000117acb: movzx eax, byte ptr [rdx + 1]; lea rax, qword ptr [rdx + rax + 2]; cmp rcx, rax; sbb eax, eax; ret; 
0x00000000000d0b61: movzx eax, byte ptr [rdx + rax]; mov byte ptr [rdi + 8], 1; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x000000000007a5d0: movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012e1d8: movzx eax, byte ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000007a725: movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a1a87: movzx eax, cl; pop rbx; ret; 
0x000000000010c572: movzx eax, di; movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x0000000000070b3c: movzx eax, dil; ret; 
0x00000000000a1aaf: movzx eax, dl; pop rbx; ret; 
0x0000000000030105: movzx eax, word ptr [rax + rdi*2 + 0x100]; and eax, esi; ret; 
0x000000000002fe6e: movzx eax, word ptr [rax + rdi*2]; and ax, 0x1000; movzx eax, ax; ret; 
0x000000000002fe4e: movzx eax, word ptr [rax + rdi*2]; and ax, 0x100; movzx eax, ax; ret; 
0x000000000002fe2e: movzx eax, word ptr [rax + rdi*2]; and ax, 0x2000; movzx eax, ax; ret; 
0x000000000002fdae: movzx eax, word ptr [rax + rdi*2]; and ax, 0x200; movzx eax, ax; ret; 
0x000000000002fdee: movzx eax, word ptr [rax + rdi*2]; and ax, 0x4000; movzx eax, ax; ret; 
0x000000000002fd4e: movzx eax, word ptr [rax + rdi*2]; and ax, 0x400; movzx eax, ax; ret; 
0x000000000002fdce: movzx eax, word ptr [rax + rdi*2]; and ax, 0x8000; movzx eax, ax; ret; 
0x000000000002fd8e: movzx eax, word ptr [rax + rdi*2]; and ax, 0x800; movzx eax, ax; ret; 
0x000000000002feee: movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002fd6e: movzx eax, word ptr [rax + rdi*2]; and eax, 2; movzx eax, ax; ret; 
0x000000000002fe0e: movzx eax, word ptr [rax + rdi*2]; and eax, 4; movzx eax, ax; ret; 
0x000000000002fd2e: movzx eax, word ptr [rax + rdi*2]; and eax, 8; movzx eax, ax; ret; 
0x00000000001079f2: movzx eax, word ptr [rax + rdx*2]; shr ax, 0xe; and eax, 1; ret; 
0x0000000000123ba1: movzx eax, word ptr [rcx + 0x88]; mov word ptr [r8 + 0x6c], ax; mov eax, 1; ret; 
0x00000000000e44a0: movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x000000000012e118: movzx eax, word ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012d408: movzx eax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000d43ab: movzx ebp, ch; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x0000000000054b81: movzx ebx, bl; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000e2b4a: movzx ebx, byte ptr [rcx + 8]; movsxd rbx, dword ptr [r10 + rbx*4]; add rbx, r10; jmp rbx; 
0x00000000000deccc: movzx ecx, al; mov r14d, r8d; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000e187b: movzx ecx, al; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000883b4: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000160b34: movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x00000000000883d0: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000015fc93: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000010c576: movzx edi, bh; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000fa4f4: movzx edi, bh; shr rax, 0xc; xor al, al; or eax, edi; ret; 
0x000000000010c575: movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x00000000000fa4f3: movzx edi, dil; shr rax, 0xc; xor al, al; or eax, edi; ret; 
0x00000000000b5fc3: movzx edx, al; lea rax, qword ptr [rip + 0xc2efb]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000b52fe: movzx edx, al; lea rax, qword ptr [rip + 0xc3ae4]; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x0000000000117e4b: movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x000000000005f055: movzx edx, byte ptr [rax + rdx]; lea rax, qword ptr [rip + 0x1187a0]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r13; jmp rax; 
0x0000000000125d67: movzx edx, byte ptr [rdi + 7]; and edx, 0x7f; movzx eax, byte ptr [rax + rdx]; mov byte ptr [rdi + 7], al; ret; 
0x0000000000117e4c: movzx edx, byte ptr [rdx + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x000000000004dd88: movzx edx, byte ptr [rdx + rax]; lea rax, qword ptr [rip + 0x128fed]; movsxd rax, dword ptr [rax + rdx*4]; add rax, r12; jmp rax; 
0x0000000000097dc1: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000013e6a8: movzx edx, byte ptr [rsi + rcx]; lea rcx, qword ptr [rip + 0x28bcd]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013cfcf: movzx edx, byte ptr [rsi + rcx]; lea rcx, qword ptr [rip + 0x2a2a6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013ad58: movzx edx, byte ptr [rsi + rcx]; lea rcx, qword ptr [rip + 0x2c51d]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013914f: movzx edx, byte ptr [rsi + rcx]; lea rcx, qword ptr [rip + 0x2e126]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013726f: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000097c53: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000163614: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000163674: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000163664: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000163654: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000163644: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000163634: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000163624: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000014cac0: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001608e7: movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x00000000001635fb: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000014d1a0: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000008bf63: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000000b8280: movzx edx, dh; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000025861: movzx edx, dh; test sil, sil; mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x00000000000b4c68: movzx edx, dl; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000008bf89: movzx edx, dl; sub eax, edx; ret; 
0x00000000000b827f: movzx edx, sil; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000025860: movzx edx, sil; test sil, sil; mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x000000000014ca40: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000014d130: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000007b5fe: movzx esi, byte ptr [rbp]; mov rdi, r12; lea r13, qword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x000000000010c5ac: movzx esi, dh; shl eax, 8; or eax, esi; bswap eax; ret; 
0x0000000000115f24: movzx esi, si; mov dword ptr [rsp], 2; call 0x1154d0; add rsp, 0x18; ret; 
0x000000000010c5c3: movzx esi, si; or eax, esi; bswap eax; ret; 
0x000000000010c5ab: movzx esi, sil; shl eax, 8; or eax, esi; bswap eax; ret; 
0x00000000000d43aa: movzx r13d, r13b; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x00000000000ecdf4: movzx rax, al; ret; 
0x0000000000082652: mul bl; xor eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000021f56: mul byte ptr [rax]; cmp al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008a7d7: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000001a8e84: mul dl; hlt; jmp qword ptr [rdx]; 
0x000000000006ae00: mul dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000002e5ee: mul dword ptr [rsi - 0x48]; add eax, dword ptr [rax]; syscall; 
0x000000000003e2cd: mulps xmm0, xmm0; pop r15; ret; 
0x00000000000410ec: mulsd xmm0, xmm0; pop r15; ret; 
0x000000000003e2cc: mulss xmm0, xmm0; pop r15; ret; 
0x0000000000198f6c: neg ch; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000f212e: neg eax; add rsp, 0x10; pop rbx; ret; 
0x00000000001295d6: neg eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000129bb5: neg eax; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000000cb3bb: neg eax; mov dword ptr fs:[rax], r8d; or eax, 0xffffffff; ret; 
0x0000000000036f17: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010886c: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; add rsp, 8; ret; 
0x00000000000c0992: neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x0000000000036c64: neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa6e9: neg eax; mov dword ptr fs:[rsi], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000363c7: neg eax; or eax, edx; sar eax, 0x1f; not eax; and eax, ecx; ret; 
0x0000000000036007: neg eax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x000000000007a42a: neg eax; pop r13; ret; 
0x00000000000a4e03: neg eax; pop r15; ret; 
0x0000000000048a56: neg eax; pop rbp; ret; 
0x0000000000101e93: neg eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000005db7f: neg eax; pop rbx; ret; 
0x0000000000022cab: neg eax; ret; 
0x0000000000085ba1: neg ebx; add rsp, 0x10; mov eax, ebx; pop rbx; ret; 
0x00000000000ed0f1: neg ecx; cmp eax, 0xfffff000; cmova edx, ecx; mov eax, edx; ret; 
0x00000000001087fc: neg ecx; cmp edx, -0x16; cmovne eax, ecx; ret; 
0x000000000007ded1: neg edi; call qword ptr [rax]; 
0x00000000000c1140: neg edx; cmove edx, ecx; mov dword ptr fs:[0x2d4], edx; mov eax, 0x3a; syscall; 
0x00000000000ebaca: neg edx; cmp dword ptr [rsp - 0x68], 2; cmove eax, edx; ret; 
0x00000000000ebb21: neg edx; mov dword ptr fs:[rax], edx; mov eax, 0xffffffff; ret; 
0x00000000000f110b: neg edx; mov dword ptr fs:[rax], edx; mov rax, qword ptr [rip + 0x2ccda1]; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000f09d0: neg edx; mov dword ptr fs:[rax], edx; or eax, 0xffffffff; ret; 
0x000000000007dec3: neg edx; sub rdi, r12; mov qword ptr [rsp + 8], rcx; and rdi, rdx; neg rdi; call qword ptr [rax]; 
0x00000000000cb3ba: neg r8d; mov dword ptr fs:[rax], r8d; or eax, 0xffffffff; ret; 
0x0000000000036006: neg rax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x00000000000a4e02: neg rax; pop r15; ret; 
0x000000000007ded0: neg rdi; call qword ptr [rax]; 
0x000000000007dec2: neg rdx; sub rdi, r12; mov qword ptr [rsp + 8], rcx; and rdi, rdx; neg rdi; call qword ptr [rax]; 
0x000000000012e608: nop dword ptr [rax + rax]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000012e5cb: nop dword ptr [rax + rax]; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x00000000000a2eb8: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x000000000005d5bb: nop dword ptr [rax + rax]; add rsp, 0x1000; xor eax, eax; pop rbx; ret; 
0x0000000000038243: nop dword ptr [rax + rax]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bca48: nop dword ptr [rax + rax]; add rsp, 0x10; pop rbx; ret; 
0x00000000000bca73: nop dword ptr [rax + rax]; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x00000000000c6273: nop dword ptr [rax + rax]; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000088743: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000008bdd8: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x0000000000093958: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x0000000000137ecb: nop dword ptr [rax + rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000096f68: nop dword ptr [rax + rax]; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000009eb6b: nop dword ptr [rax + rax]; lea r11, qword ptr [rip + 0xd9a49]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d4cb: nop dword ptr [rax + rax]; lea r11, qword ptr [rip + 0xdaf09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000162398: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 0xa]; ret; 
0x00000000001623a8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 0xb]; ret; 
0x00000000001623b8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 0xc]; ret; 
0x00000000001623c8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 0xd]; ret; 
0x00000000001623d8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 0xe]; ret; 
0x0000000000162318: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 1]; ret; 
0x0000000000162328: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 2]; ret; 
0x0000000000162338: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 3]; ret; 
0x0000000000162348: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 4]; ret; 
0x0000000000162358: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 5]; ret; 
0x0000000000162368: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 6]; ret; 
0x0000000000162378: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 8]; ret; 
0x0000000000162388: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi + 9]; ret; 
0x00000000000a34d8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi - 0xc]; ret; 
0x00000000000a34f8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi - 4]; ret; 
0x00000000000a34e8: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi - 8]; ret; 
0x0000000000162308: nop dword ptr [rax + rax]; lea rax, qword ptr [rdi]; ret; 
0x0000000000083468: nop dword ptr [rax + rax]; lea rax, qword ptr [rdx - 0x10]; add rsp, 8; ret; 
0x0000000000022028: nop dword ptr [rax + rax]; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x0000000000022038: nop dword ptr [rax + rax]; lea rax, qword ptr [rip + 0x15c12b]; ret; 
0x00000000000f7ef3: nop dword ptr [rax + rax]; lea rbx, qword ptr [rip + 0x865af]; mov rax, rbx; pop rbx; ret; 
0x000000000007465b: nop dword ptr [rax + rax]; lea rcx, qword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; pop rbx; ret; 
0x00000000001211cb: nop dword ptr [rax + rax]; lea rdx, qword ptr [rip + 0x29c9a9]; mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x000000000015a4b8: nop dword ptr [rax + rax]; mov byte ptr [rcx], dl; ret; 
0x00000000000d0aeb: nop dword ptr [rax + rax]; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000f321b: nop dword ptr [rax + rax]; mov byte ptr [rdi], 0; mov byte ptr [rip + 0x2ce3d7], cl; mov rax, rdi; mov byte ptr [r9 - 1], 0; ret; 
0x000000000009e3d8: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000009cdd8: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000009dda8: nop dword ptr [rax + rax]; mov byte ptr [rdi], dl; ret; 
0x00000000000967a3: nop dword ptr [rax + rax]; mov byte ptr [rdi], sil; add rdi, 1; mov rax, rdi; ret; 
0x000000000011a103: nop dword ptr [rax + rax]; mov byte ptr [rdx], 0; pop rbx; ret; 
0x000000000009e3fb: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000009daa8: nop dword ptr [rax + rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000123bc3: nop dword ptr [rax + rax]; mov dword ptr [rcx + 4], 1; mov eax, 1; ret; 
0x000000000015a4f8: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x000000000015a518: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x000000000015a508: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000015a4e8: nop dword ptr [rax + rax]; mov dword ptr [rcx], edx; ret; 
0x0000000000127fab: nop dword ptr [rax + rax]; mov dword ptr [rdi + 4], 1; mov eax, 1; ret; 
0x00000000000e44d8: nop dword ptr [rax + rax]; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x000000000009ddc8: nop dword ptr [rax + rax]; mov dword ptr [rdi - 1], edx; ret; 
0x00000000000968ab: nop dword ptr [rax + rax]; mov dword ptr [rdi], ecx; mov rax, rdi; ret; 
0x000000000009696b: nop dword ptr [rax + rax]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000009697b: nop dword ptr [rax + rax]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, qword ptr [rdi + 6]; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968db: nop dword ptr [rax + rax]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; mov rax, rdi; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968cb: nop dword ptr [rax + rax]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; mov rax, rdi; ret; 
0x000000000009dde8: nop dword ptr [rax + rax]; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000009ddf8: nop dword ptr [rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x000000000009ddd8: nop dword ptr [rax + rax]; mov dword ptr [rdi], edx; ret; 
0x0000000000120d78: nop dword ptr [rax + rax]; mov dword ptr [rsi], 0xa; ret; 
0x0000000000120db8: nop dword ptr [rax + rax]; mov dword ptr [rsi], 0xc; ret; 
0x0000000000120da8: nop dword ptr [rax + rax]; mov dword ptr [rsi], 8; ret; 
0x00000000000fa6f3: nop dword ptr [rax + rax]; mov dword ptr fs:[rsi], 0x16; ret; 
0x000000000009cde8: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000a0c7b: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000f11d8: nop dword ptr [rax + rax]; mov eax, 0x10; syscall; 
0x00000000000fa97b: nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x00000000000ebebb: nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x00000000000ebf1b: nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x00000000000faafb: nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x00000000000faf4b: nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x00000000000fa8bb: nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x00000000000f1ebb: nop dword ptr [rax + rax]; mov eax, 0x132; syscall; 
0x00000000000fb00b: nop dword ptr [rax + rax]; mov eax, 0x134; syscall; 
0x00000000000eb75b: nop dword ptr [rax + rax]; mov eax, 0x15; syscall; 
0x00000000000ebeeb: nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x00000000000cb29b: nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x00000000000f498b: nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x00000000000f495b: nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x00000000000fbe9b: nop dword ptr [rax + rax]; mov eax, 0x1d; syscall; 
0x00000000000fbecb: nop dword ptr [rax + rax]; mov eax, 0x1f; syscall; 
0x00000000000c256b: nop dword ptr [rax + rax]; mov eax, 0x20; ret; 
0x00000000000ebe5b: nop dword ptr [rax + rax]; mov eax, 0x20; syscall; 
0x00000000000ebe8b: nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000c0b8b: nop dword ptr [rax + rax]; mov eax, 0x25; syscall; 
0x00000000000b428b: nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x00000000000fb5ab: nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x00000000000fb11b: nop dword ptr [rax + rax]; mov eax, 0x31; syscall; 
0x00000000000fb1db: nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x00000000000fb1ab: nop dword ptr [rax + rax]; mov eax, 0x34; syscall; 
0x00000000000eaf2b: nop dword ptr [rax + rax]; mov eax, 0x3c; syscall; 
0x0000000000036efb: nop dword ptr [rax + rax]; mov eax, 0x3e; syscall; 
0x00000000000fbdab: nop dword ptr [rax + rax]; mov eax, 0x40; syscall; 
0x00000000000fbd7b: nop dword ptr [rax + rax]; mov eax, 0x41; syscall; 
0x00000000000fbe6b: nop dword ptr [rax + rax]; mov eax, 0x43; syscall; 
0x00000000000fbd4b: nop dword ptr [rax + rax]; mov eax, 0x47; syscall; 
0x00000000000f3088: nop dword ptr [rax + rax]; mov eax, 0x4c; syscall; 
0x00000000000f30bb: nop dword ptr [rax + rax]; mov eax, 0x4d; syscall; 
0x00000000000ebfab: nop dword ptr [rax + rax]; mov eax, 0x50; syscall; 
0x00000000000ebfdb: nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x00000000000ecf78: nop dword ptr [rax + rax]; mov eax, 0x54; syscall; 
0x00000000000ecf1b: nop dword ptr [rax + rax]; mov eax, 0x57; syscall; 
0x00000000000eb378: nop dword ptr [rax + rax]; mov eax, 0x5a; syscall; 
0x00000000000eb3ab: nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x00000000000ec7db: nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x00000000000ec80b: nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000eb368: nop dword ptr [rax + rax]; mov eax, 0x5f; syscall; 
0x00000000000eb368: nop dword ptr [rax + rax]; mov eax, 0x5f; syscall; ret; 
0x00000000000f0c5b: nop dword ptr [rax + rax]; mov eax, 0x62; syscall; 
0x00000000000c1d08: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x00000000000c1d08: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x00000000000fab5b: nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000c1d28: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; 
0x00000000000c1d28: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; ret; 
0x00000000000c1d18: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; 
0x00000000000c1d18: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; ret; 
0x00000000000c1d38: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; 
0x00000000000c1d38: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; ret; 
0x00000000000c1f0b: nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000c1cfb: nop dword ptr [rax + rax]; mov eax, 0x6e; syscall; 
0x00000000000c1cfb: nop dword ptr [rax + rax]; mov eax, 0x6e; syscall; ret; 
0x00000000000c1f3b: nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000c1f3b: nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; ret; 
0x00000000000c1f9b: nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000c1d48: nop dword ptr [rax + rax]; mov eax, 0x73; syscall; 
0x00000000000c1fcb: nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000c1ffb: nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x00000000000c1edb: nop dword ptr [rax + rax]; mov eax, 0x79; syscall; 
0x00000000000fa46b: nop dword ptr [rax + rax]; mov eax, 0x7a; syscall; 
0x00000000000fa49b: nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x00000000000fa85b: nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x00000000000fa88b: nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x00000000000fae2b: nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x00000000000fac1b: nop dword ptr [rax + rax]; mov eax, 0x87; syscall; 
0x00000000000eb25b: nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000000f1018: nop dword ptr [rax + rax]; mov eax, 0x8d; syscall; 
0x00000000000cb20b: nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000000cb23b: nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x00000000000cb26b: nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x00000000000cb2cb: nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000000cb2fb: nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000000cb32b: nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x00000000000f4a1b: nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x00000000000f4a4b: nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x00000000000f4a7b: nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x00000000000fa7bb: nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x00000000000fac4b: nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000000f0c2b: nop dword ptr [rax + rax]; mov eax, 0xa0; syscall; 
0x00000000000f1d9b: nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x00000000000f1e2b: nop dword ptr [rax + rax]; mov eax, 0xa2; syscall; 
0x00000000000b140b: nop dword ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000fa408: nop dword ptr [rax + rax]; mov eax, 0xa6; syscall; 
0x00000000000f21ab: nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000000f21db: nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x00000000000f48cb: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x00000000000f1b48: nop dword ptr [rax + rax]; mov eax, 0xaa; syscall; 
0x00000000000f1be8: nop dword ptr [rax + rax]; mov eax, 0xab; syscall; 
0x00000000000fa27b: nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x00000000000fa8eb: nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x00000000000fa91b: nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x00000000000fa43b: nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x00000000000f817b: nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x00000000000f805b: nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x000000000010c4b3: nop dword ptr [rax + rax]; mov eax, 0xca; add rsp, 0x28; ret; 
0x00000000000fa94b: nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x00000000000fa7eb: nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x00000000000fa7eb: nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; ret; 
0x00000000000f2ed8: nop dword ptr [rax + rax]; mov eax, 0xeb; syscall; 
0x00000000000c24b8: nop dword ptr [rax + rax]; mov eax, 0xfc17; ret; 
0x00000000000faacb: nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x00000000000fab2b: nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x0000000000074533: nop dword ptr [rax + rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000007c7f8: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000048a5b: nop dword ptr [rax + rax]; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000002c048: nop dword ptr [rax + rax]; mov eax, 1; ret; 
0x0000000000121448: nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x0000000000123bb3: nop dword ptr [rax + rax]; mov eax, dword ptr [rcx]; mov dword ptr [r8], eax; mov eax, 1; ret; 
0x00000000000e4d2b: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi + 0x108]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000007c598: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000012d733: nop dword ptr [rax + rax]; mov eax, dword ptr [rdx]; lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000753cb: nop dword ptr [rax + rax]; mov eax, dword ptr [rdx]; ret; 
0x0000000000037ba8: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x3864da]; ret; 
0x000000000012cfa3: nop dword ptr [rax + rax]; mov eax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000010c538: nop dword ptr [rax + rax]; mov eax, edi; bswap eax; ret; 
0x0000000000103f5b: nop dword ptr [rax + rax]; mov eax, edi; sub eax, esi; ret; 
0x00000000000c08fb: nop dword ptr [rax + rax]; mov ecx, 0x64; mov rsi, rdi; mov eax, ecx; syscall; 
0x000000000009dafb: nop dword ptr [rax + rax]; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000014c928: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000009ce0b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000eb47b: nop dword ptr [rax + rax]; mov edx, edx; movsxd rdi, edi; mov eax, 0x102; syscall; 
0x0000000000036f2b: nop dword ptr [rax + rax]; mov esi, 8; mov eax, 0x7f; syscall; 
0x0000000000036fe8: nop dword ptr [rax + rax]; mov esi, 8; mov eax, 0x82; syscall; 
0x000000000015a538: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x000000000015a558: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x000000000015a568: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x000000000015a578: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x000000000015a588: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000015a598: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000015a5a8: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x000000000015a548: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x000000000015a528: nop dword ptr [rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x000000000009de08: nop dword ptr [rax + rax]; mov qword ptr [rdi - 1], rdx; ret; 
0x000000000009de28: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000009de48: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000009de58: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000009de68: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000009de78: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000009de38: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x000000000009de18: nop dword ptr [rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x00000000000fc76b: nop dword ptr [rax + rax]; mov qword ptr [rip + 0x2c1b85], 0; pop rbp; ret; 
0x000000000010c4c3: nop dword ptr [rax + rax]; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x00000000000faeeb: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x11e; syscall; 
0x00000000000fa7f8: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x12d; syscall; 
0x00000000000faf7b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x12f; syscall; 
0x00000000000fb03b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x136; syscall; 
0x00000000000ed2c8: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000000fb5db: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x35; syscall; 
0x00000000000fb20b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x37; syscall; 
0x00000000000fbddb: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x42; syscall; 
0x00000000000fac7b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0x9d; syscall; 
0x00000000000fab8b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xa5; syscall; 
0x00000000000faa6b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xaf; syscall; 
0x00000000000f820b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbc; syscall; 
0x00000000000f81ab: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbd; syscall; 
0x00000000000f808b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xbe; syscall; 
0x00000000000f811b: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xc0; syscall; 
0x00000000000f49bb: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xd8; syscall; 
0x00000000000fa9ab: nop dword ptr [rax + rax]; mov r10, rcx; mov eax, 0xe9; syscall; 
0x00000000000eceeb: nop dword ptr [rax + rax]; mov r10, rcx; movsxd rdi, edi; mov eax, 0x10b; syscall; 
0x000000000005dbbb: nop dword ptr [rax + rax]; mov r10, rcx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x108; syscall; 
0x00000000000eb54b: nop dword ptr [rax + rax]; mov r10d, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x000000000007c808: nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x0000000000036ca8: nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x00000000000a2ed8: nop dword ptr [rax + rax]; mov rax, 1; ret; 
0x00000000000a2ee8: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x00000000000a2ef8: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x00000000000a2f08: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x00000000000a2f18: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x00000000000a2f28: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x00000000000a2f38: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x0000000000074db3: nop dword ptr [rax + rax]; mov rax, qword ptr [r8 + 0x140]; mov esi, 0xffffffff; mov rdi, r15; call qword ptr [rax + 0x18]; 
0x0000000000123ae3: nop dword ptr [rax + rax]; mov rax, qword ptr [r8]; bswap eax; mov dword ptr [rcx + 0xb4], eax; mov eax, 1; ret; 
0x0000000000123c2b: nop dword ptr [rax + rax]; mov rax, qword ptr [r8]; bswap eax; mov dword ptr [rcx + 0xb8], eax; mov eax, 1; ret; 
0x0000000000074f93: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000007466b: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000012db33: nop dword ptr [rax + rax]; mov rax, qword ptr [rbp + 8]; mov rsi, rsp; mov rdi, rbp; call qword ptr [rax]; 
0x000000000006d96b: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012d0bb: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x0000000000121aeb: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 8]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000012ce43: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012ce78: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000121b0b: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 8]; mov rsi, rsp; mov rdi, rbx; call qword ptr [rax]; 
0x000000000012e1f8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x00000000000bd23b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000070b78: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000007c868: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000007b0bb: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000012e003: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x000000000012e013: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x00000000001365db: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x287881]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000132ec3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x28af99]; mov dword ptr fs:[rax], 2; mov eax, 0xffffffff; ret; 
0x000000000012abeb: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x293381]; add rsp, 8; ret; 
0x00000000001088cb: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2b5591]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000fcab3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2c4f39]; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000f781b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2c6641]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f4bfb: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2c9261]; mov dword ptr fs:[rax], 0x16; pop rbx; ret; 
0x00000000000f22ab: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2cbbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f19eb: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2cc471]; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f194b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2cc511]; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f11bb: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2ccca1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f10eb: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2ccd71]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000ee2ab: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2cfbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb1ab: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2d2cb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000c12ab: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2fcbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bc383: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x307c79]; lea rdi, qword ptr [rip + 0x30376a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007c848: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x342949]; ret; 
0x0000000000037b7b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3862e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037a7b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3863e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003779b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3866c1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000376b3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3867a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036c7b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3871e1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036be3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x387279]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x0000000000030128: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x38dda1]; add rax, qword ptr fs:[0]; ret; 
0x00000000000340e3: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x38ff21]; lea rdi, qword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032043: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x391fc1]; lea rdi, qword ptr [rip + 0x38dd0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030393: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x393c69]; lea rdi, qword ptr [rip + 0x38f8da]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d503: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x396b01]; lea rdi, qword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002275b: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x39b701]; add rax, qword ptr fs:[0]; ret; 
0x00000000000237d8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3a0461]; ret; 
0x00000000000237c8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x3a0481]; ret; 
0x00000000000fe0db: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000300db: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + 0x78]; movsxd rdi, edi; mov eax, dword ptr [rax + rdi*4]; ret; 
0x00000000000d1f33: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + 8]; mov qword ptr [rax + 0x20], rsi; xor eax, eax; ret; 
0x000000000002efdb: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + rdx*8 + 0x80]; ret; 
0x0000000000126968: nop dword ptr [rax + rax]; mov rax, qword ptr [rsp + 0x38]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000047023: nop dword ptr [rax + rax]; mov rax, rbx; pop rbx; ret; 
0x0000000000035773: nop dword ptr [rax + rax]; mov rax, rcx; ret; 
0x000000000010bfc8: nop dword ptr [rax + rax]; mov rax, rdi; add rsp, 8; ret; 
0x000000000007c878: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000009e46b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000009ce6b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000869c3: nop dword ptr [rax + rax]; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x00000000000c1198: nop dword ptr [rax + rax]; mov rdi, rdx; mov eax, r8d; syscall; 
0x0000000000112f33: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0x2aaf29]; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000086878: nop dword ptr [rax + rax]; mov rdx, qword ptr [rip + 0x3376c1]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x000000000009ce4b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000015a4d8: nop dword ptr [rax + rax]; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000015a4c8: nop dword ptr [rax + rax]; mov word ptr [rcx], dx; ret; 
0x000000000009ddb8: nop dword ptr [rax + rax]; mov word ptr [rdi], dx; ret; 
0x000000000009692b: nop dword ptr [rax + rax]; mov word ptr [rdi], si; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000009688b: nop dword ptr [rax + rax]; mov word ptr [rdi], si; mov rax, rdi; ret; 
0x000000000009de88: nop dword ptr [rax + rax]; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x000000000009de98: nop dword ptr [rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000012e173: nop dword ptr [rax + rax]; movsx eax, byte ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e0b3: nop dword ptr [rax + rax]; movsx eax, word ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012d3a3: nop dword ptr [rax + rax]; movsx rax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012cf43: nop dword ptr [rax + rax]; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000134dc8: nop dword ptr [rax + rax]; movsxd rdi, ebp; mov eax, 3; syscall; 
0x00000000000cffab: nop dword ptr [rax + rax]; movsxd rdi, r12d; mov eax, 3; syscall; 
0x00000000000f1eeb: nop dword ptr [rax + rax]; movsxd rdx, edi; mov esi, 0x28121969; mov rdi, -0x11e2153; mov eax, 0xa9; syscall; 
0x0000000000117da3: nop dword ptr [rax + rax]; movsxd rdx, edx; mov eax, ebx; mov byte ptr [rdi + rdx], 0; pop rbx; ret; 
0x00000000000ecf4b: nop dword ptr [rax + rax]; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x107; syscall; 
0x00000000000ece8b: nop dword ptr [rax + rax]; movsxd rsi, esi; mov eax, 0x10a; syscall; 
0x000000000016366b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000016365b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x000000000016364b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x000000000016363b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x000000000016362b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000016361b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000012e1d3: nop dword ptr [rax + rax]; movzx eax, byte ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012e113: nop dword ptr [rax + rax]; movzx eax, word ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012d403: nop dword ptr [rax + rax]; movzx eax, word ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000014cab8: nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000002585b: nop dword ptr [rax + rax]; movzx edx, sil; test sil, sil; mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x000000000014ca38: nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000fa973: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x00000000000ebeb3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x00000000000ebf13: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x00000000000faaf3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x00000000000faf43: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x00000000000fa8b3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x00000000000ebee3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x00000000000cb293: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x00000000000f4983: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x00000000000fbe93: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1d; syscall; 
0x00000000000fbec3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1f; syscall; 
0x00000000000ebe83: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000c0b83: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x25; syscall; 
0x00000000000b4283: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x00000000000fb5a3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x00000000000fb1d3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x00000000000fbda3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x40; syscall; 
0x00000000000fbd73: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x41; syscall; 
0x00000000000fbe63: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x43; syscall; 
0x00000000000fbd43: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x47; syscall; 
0x00000000000f30b3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x4d; syscall; 
0x00000000000ebfd3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x00000000000eb3a3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x00000000000ec7d3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x00000000000ec803: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000f0c53: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x62; syscall; 
0x00000000000fab53: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000c1f03: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000c1f33: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000c1f93: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000c1fc3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000c1ff3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x00000000000fa463: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7a; syscall; 
0x00000000000fa493: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x00000000000fa853: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x00000000000fa883: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x00000000000fae23: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x00000000000fac13: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x87; syscall; 
0x00000000000eb253: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000000cb203: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000000cb233: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x00000000000cb263: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x00000000000cb2c3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000000cb2f3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000000cb323: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x00000000000f4a13: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x00000000000f4a43: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x00000000000f4a73: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x00000000000fa7b3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x00000000000fac43: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000000f0c23: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa0; syscall; 
0x00000000000f1d93: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x00000000000f21a3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000000f21d3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x00000000000f48c3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x00000000000fa273: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x00000000000fa8e3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x00000000000fa913: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x00000000000fa433: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x00000000000f8173: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x00000000000f8053: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x00000000000fa943: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x00000000000fa7e3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x00000000000faac3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x00000000000fab23: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x000000000005db85: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov eax, 0x52; syscall; 
0x00000000000faf16: nop dword ptr [rax + rax]; nop; mov eax, 0x11f; syscall; 
0x00000000000fbe36: nop dword ptr [rax + rax]; nop; mov eax, 0x1e; syscall; 
0x00000000000fb576: nop dword ptr [rax + rax]; nop; mov eax, 0x30; syscall; 
0x00000000000fb236: nop dword ptr [rax + rax]; nop; mov eax, 0x32; syscall; 
0x00000000000c11d7: nop dword ptr [rax + rax]; nop; mov eax, 0x3b; syscall; 
0x00000000000ebcb7: nop dword ptr [rax + rax]; nop; mov eax, 0x49; syscall; 
0x00000000000eb446: nop dword ptr [rax + rax]; nop; mov eax, 0x53; syscall; 
0x00000000000eceb7: nop dword ptr [rax + rax]; nop; mov eax, 0x59; syscall; 
0x00000000000374b6: nop dword ptr [rax + rax]; nop; mov eax, 0x83; syscall; 
0x00000000000f49e6: nop dword ptr [rax + rax]; nop; mov eax, 0x95; syscall; 
0x00000000000fa786: nop dword ptr [rax + rax]; nop; mov eax, 0x9e; syscall; 
0x00000000000fa826: nop dword ptr [rax + rax]; nop; mov eax, 0x9f; syscall; 
0x00000000000fabe6: nop dword ptr [rax + rax]; nop; mov eax, 0xb4; syscall; 
0x00000000000f4896: nop dword ptr [rax + rax]; nop; mov eax, 0xb; syscall; 
0x00000000000f80e6: nop dword ptr [rax + rax]; nop; mov eax, 0xc2; syscall; 
0x00000000000f8146: nop dword ptr [rax + rax]; nop; mov eax, 0xc3; syscall; 
0x00000000000f8026: nop dword ptr [rax + rax]; nop; mov eax, 0xc4; syscall; 
0x00000000000f81d6: nop dword ptr [rax + rax]; nop; mov eax, 0xc5; syscall; 
0x00000000000faa96: nop dword ptr [rax + rax]; nop; mov eax, 0xfe; syscall; 
0x00000000000bd336: nop dword ptr [rax + rax]; nop; mov eax, dword ptr [rdi]; ret; 
0x0000000000037b96: nop dword ptr [rax + rax]; nop; mov eax, dword ptr [rip + 0x3864fa]; ret; 
0x00000000000d262b: nop dword ptr [rax + rax]; pop rbx; pop rbp; pop r12; ret; 
0x000000000004701b: nop dword ptr [rax + rax]; pop rbx; ret; 
0x000000000009da98: nop dword ptr [rax + rax]; ret; 
0x000000000010c5cb: nop dword ptr [rax + rax]; shl eax, 0x18; and esi, 0xffffff; or eax, esi; bswap eax; ret; 
0x00000000000fd91b: nop dword ptr [rax + rax]; sub edi, 0x30; xor eax, eax; cmp edi, 9; setbe al; ret; 
0x000000000007be03: nop dword ptr [rax + rax]; sub r8, rcx; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000075103: nop dword ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000103d9b: nop dword ptr [rax + rax]; sub r8d, eax; mov eax, r8d; ret; 
0x000000000011fa6b: nop dword ptr [rax + rax]; sub rsp, 8; call 0xf1a90; mov dword ptr [rip + 0x2a3cc1], eax; add rsp, 8; ret; 
0x000000000012e8bb: nop dword ptr [rax + rax]; sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x6eb20; add rsp, 8; ret; 
0x00000000000a0c58: nop dword ptr [rax + rax]; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000001365a8: nop dword ptr [rax + rax]; xor eax, eax; add rsp, 0x48; ret; 
0x00000000000e315b: nop dword ptr [rax + rax]; xor eax, eax; add rsp, 8; ret; 
0x00000000000d232b: nop dword ptr [rax + rax]; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000004883b: nop dword ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x0000000000038523: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000010844b: nop dword ptr [rax + rax]; xor r10d, r10d; add rdi, 0x28; mov eax, r9d; syscall; 
0x0000000000097008: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x000000000005dcb5: nop dword ptr [rax]; add dword ptr [rdx + 4], 1; xor eax, eax; ret; 
0x00000000000a2eac: nop dword ptr [rax]; add rax, 1; ret; 
0x00000000000f8fd9: nop dword ptr [rax]; add rsp, 0x10; xor eax, eax; pop rbx; ret; 
0x000000000012d4bc: nop dword ptr [rax]; add rsp, 0x18; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000077545: nop dword ptr [rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000086431: nop dword ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000165265: nop dword ptr [rax]; add rsp, 8; ret; 
0x0000000000121504: nop dword ptr [rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000735dd: nop dword ptr [rax]; and dword ptr [rdi], 0xffffffcf; ret; 
0x0000000000036489: nop dword ptr [rax]; and eax, 0x80000000; movd xmm1, eax; movss dword ptr [rdi], xmm1; ret; 
0x000000000016128c: nop dword ptr [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000008bdc9: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000008bde9: nop dword ptr [rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x0000000000096f79: nop dword ptr [rax]; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x20]; ret; 
0x0000000000096f89: nop dword ptr [rax]; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x30]; ret; 
0x0000000000165c59: nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000011f5a1: nop dword ptr [rax]; lea r14, qword ptr [r13 + 0x18]; mov rsi, r14; call qword ptr [rax + 0x10]; 
0x00000000000a378d: nop dword ptr [rax]; lea rax, qword ptr [rdi + 0xc]; ret; 
0x00000000000a377d: nop dword ptr [rax]; lea rax, qword ptr [rdi + 4]; ret; 
0x00000000000a3785: nop dword ptr [rax]; lea rax, qword ptr [rdi + 8]; ret; 
0x0000000000096cf4: nop dword ptr [rax]; lea rdx, qword ptr [rcx + 1]; mov byte ptr [rcx], 0; mov qword ptr [rdi], rdx; ret; 
0x00000000000d0b19: nop dword ptr [rax]; mov byte ptr [rdi + 8], 0x19; mov eax, 1; ret; 
0x0000000000096869: nop dword ptr [rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000037641: nop dword ptr [rax]; mov byte ptr [rdi], 0; xor eax, eax; ret; 
0x0000000000108805: nop dword ptr [rax]; mov dword ptr [r9], r8d; xor eax, eax; ret; 
0x0000000000123bd5: nop dword ptr [rax]; mov dword ptr [rcx + 4], 0; mov eax, 1; ret; 
0x00000000000e4e0c: nop dword ptr [rax]; mov dword ptr [rdi + 0x10c], esi; xor al, al; ret; 
0x0000000000127fbd: nop dword ptr [rax]; mov dword ptr [rdi + 4], 0; mov eax, 1; ret; 
0x000000000009694c: nop dword ptr [rax]; mov dword ptr [rdi], ecx; lea rax, qword ptr [rdi + 3]; ret; 
0x0000000000082649: nop dword ptr [rax]; mov dword ptr [rip + 0x33e3f6], 0; ret; 
0x0000000000120cf5: nop dword ptr [rax]; mov dword ptr [rsi], 0x10; mov qword ptr [rsi + 8], rax; ret; 
0x000000000009f209: nop dword ptr [rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, qword ptr [rdi + 2]; ret; 
0x00000000000c08c9: nop dword ptr [rax]; mov eax, 0x3f; syscall; 
0x00000000000c25bd: nop dword ptr [rax]; mov eax, 0x40; ret; 
0x000000000005db8d: nop dword ptr [rax]; mov eax, 0x52; syscall; 
0x00000000000ecdf9: nop dword ptr [rax]; mov eax, 0x56; syscall; 
0x00000000000f0bf9: nop dword ptr [rax]; mov eax, 0x61; syscall; 
0x00000000000c1f69: nop dword ptr [rax]; mov eax, 0x7c; syscall; 
0x00000000000c24a5: nop dword ptr [rax]; mov eax, 0x7e; ret; 
0x00000000000eb22d: nop dword ptr [rax]; mov eax, 0x89; syscall; 
0x00000000000f1d69: nop dword ptr [rax]; mov eax, 0xa3; syscall; 
0x00000000000fa24c: nop dword ptr [rax]; mov eax, 0xad; syscall; 
0x0000000000070b65: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000103f65: nop dword ptr [rax]; mov eax, 1; ret; 
0x00000000001245b9: nop dword ptr [rax]; mov eax, 2; ret; 
0x00000000000d1bf4: nop dword ptr [rax]; mov eax, dword ptr [rbp + 0x4c]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012770d: nop dword ptr [rax]; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000e4d1c: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x10c]; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000012e5d9: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x28]; ret; 
0x00000000000f05bd: nop dword ptr [rax]; mov eax, dword ptr [rdi + 8]; and eax, 0x100f; ret; 
0x0000000000072ef9: nop dword ptr [rax]; mov eax, dword ptr [rdi]; and eax, 0x200; ret; 
0x0000000000072ecc: nop dword ptr [rax]; mov eax, dword ptr [rdi]; and eax, 0x804; ret; 
0x0000000000127f9d: nop dword ptr [rax]; mov eax, dword ptr [rdi]; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000735f9: nop dword ptr [rax]; mov eax, dword ptr [rdi]; shr eax, 5; and eax, 1; ret; 
0x0000000000076944: nop dword ptr [rax]; mov eax, dword ptr [rdx]; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000e4e19: nop dword ptr [rax]; mov eax, dword ptr [rsi]; mov dword ptr [rdi + 0x108], eax; xor eax, eax; ret; 
0x00000000000a1ab4: nop dword ptr [rax]; mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000002ff3d: nop dword ptr [rax]; mov eax, edi; and eax, 0x7f; ret; 
0x0000000000070855: nop dword ptr [rax]; mov eax, edi; ret; 
0x000000000006decc: nop dword ptr [rax]; mov eax, edx; pop rbx; ret; 
0x000000000009ce3d: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x000000000010016c: nop dword ptr [rax]; mov edx, 0xffffffff; mov eax, edx; ret; 
0x000000000009dadd: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000000f310c: nop dword ptr [rax]; mov qword ptr [rdi], 0; mov qword ptr [rdi + 8], 0; ret; 
0x00000000000fa759: nop dword ptr [rax]; mov r10, rcx; mov eax, 0x12e; syscall; 
0x00000000000c0aac: nop dword ptr [rax]; mov r10, rcx; mov eax, 0x3d; syscall; 
0x00000000000f486d: nop dword ptr [rax]; mov r10, rcx; mov eax, 9; syscall; 
0x000000000006e435: nop dword ptr [rax]; mov rax, -1; ret; 
0x0000000000126011: nop dword ptr [rax]; mov rax, qword ptr [r12 + 8]; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000012b304: nop dword ptr [rax]; mov rax, qword ptr [r15 + 8]; mov rsi, rbx; mov rdi, r15; call qword ptr [rax]; 
0x0000000000074e49: nop dword ptr [rax]; mov rax, qword ptr [rax + 0x140]; call qword ptr [rax + 0x68]; 
0x00000000000f8291: nop dword ptr [rax]; mov rax, qword ptr [rax + 0x58]; ret; 
0x00000000000f829d: nop dword ptr [rax]; mov rax, qword ptr [rax + 0xc8]; ret; 
0x000000000012c3c9: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x18]; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x000000000011f464: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x20]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x000000000007d07d: nop dword ptr [rax]; mov rax, qword ptr [rdi + 0x10]; cmp qword ptr [rdi + 0x28], rax; cmovae rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000007a625: nop dword ptr [rax]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000012d844: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000121a99: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 8]; call qword ptr [rax]; 
0x000000000012d9c9: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp + 8], r8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000012d4c9: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp], rdx; mov rsi, rsp; call qword ptr [rax + 8]; 
0x000000000012dd55: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x000000000012d44d: nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000001364fd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x287881]; add rax, qword ptr fs:[0]; ret; 
0x0000000000135c4d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x288209]; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x0000000000136b5d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x28d429]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136b2d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x28d451]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136afd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x28d479]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136acd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x28d4a1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136a9d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x28d4c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000136a6d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x28d4f1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012ab0d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x293469]; lea rdx, qword ptr [rip + 0x298d62]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000010c8bd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2b1591]; add rax, qword ptr fs:[0]; ret; 
0x000000000010802d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bbfb1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ffd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bbfd9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107fcd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc001]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f9d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc029]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f6d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc051]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f3d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc079]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107f0d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc0a1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107edd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc0c9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ead: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc0f1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107e4d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc109]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107e1d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc131]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ded: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc159]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107dbd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc181]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d8d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc1a9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d5d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc1d1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107d2d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc1f9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107cfd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc221]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107ccd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc249]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c9d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc271]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c6d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc299]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c3d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc2c1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107c0d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc2e9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107bdd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc311]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107bad: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc339]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b7d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc361]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b4d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc389]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107b1d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc3b1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107aed: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc3d9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000107abd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2bc3f9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000f9659: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2c4801]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000fcd01: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2c4ce9]; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000000f301c: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2cae41]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2f84: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2caed9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f227d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2cbbe1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000efcbc: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2ce1a1]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x00000000000ed39c: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2d0ac1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000ed381: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2d0ad9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000000ed32d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2d0b31]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb42c: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2d2a31]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret; 
0x00000000000eb414: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2d2a49]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb204: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2d2c59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bce25: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x301039]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000bc805: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3077f9]; lea rdi, qword ptr [rip + 0x3032ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc4fc: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x307b09]; lea rdi, qword ptr [rip + 0x3035f2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b06ac: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x30d7b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000b05ac: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x30d8b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000aeff4: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x315009]; lea rdi, qword ptr [rip + 0x310afa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000081315: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x33cb49]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000007de94: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x33ff19]; xor edi, edi; mov r14, rdx; call qword ptr [rax]; 
0x0000000000071411: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x34ca49]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000006fff5: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x34de69]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000003cd51: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x381109]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000377dd: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x386681]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000037761: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x3866f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036b3c: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x38d4a9]; mov rsi, rsp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000002c15c: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x393959]; ret; 
0x000000000002f7cc: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x394839]; lea rdi, qword ptr [rip + 0x390322]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007c52d: nop dword ptr [rax]; mov rax, qword ptr [rsi + 0xd8]; mov rdi, rbx; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000122694: nop dword ptr [rax]; mov rax, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000000a38e5: nop dword ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x000000000003577c: nop dword ptr [rax]; mov rax, rcx; pop rbx; ret; 
0x000000000003c8d9: nop dword ptr [rax]; mov rax, rdi; cqo; idiv rsi; ret; 
0x0000000000108e4c: nop dword ptr [rax]; mov rax, rdi; pop rbx; ret; 
0x000000000009db3d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000009ce8d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000009ce9d: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000086a75: nop dword ptr [rax]; mov rdi, qword ptr [rbx + 0x48]; call qword ptr [rbx + 0x40]; 
0x000000000002c28c: nop dword ptr [rax]; mov rdi, rbp; mov eax, 3; syscall; 
0x0000000000108169: nop dword ptr [rax]; mov rdx, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, rdx; jmp rax; 
0x00000000000867b4: nop dword ptr [rax]; mov rdx, qword ptr [rip + 0x337789]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x000000000014ce89: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000012b545: nop dword ptr [rax]; mov rsi, r15; mov rdi, r14; call qword ptr [rdx + 0x18]; 
0x00000000000967dc: nop dword ptr [rax]; mov word ptr [rdi], r9w; mov byte ptr [rdi + 2], dl; add rdi, 3; mov rax, rdi; ret; 
0x000000000009ceec: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000009e54d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, qword ptr [rdi + 0x10]; ret; 
0x000000000009ced9: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000008c4ec: nop dword ptr [rax]; movdqu xmmword ptr [rdi + 0x10], xmm8; movdqu xmmword ptr [rdi + rdx - 0x20], xmm8; ret; 
0x00000000000ed0dd: nop dword ptr [rax]; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0xdd; syscall; 
0x000000000006d0b1: nop dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000001136bc: nop dword ptr [rax]; movsxd rdi, dword ptr [rdi]; mov eax, 3; syscall; 
0x00000000001136bc: nop dword ptr [rax]; movsxd rdi, dword ptr [rdi]; mov eax, 3; syscall; ret; 
0x00000000000f4831: nop dword ptr [rax]; movsxd rdi, ebp; mov eax, 3; syscall; 
0x00000000000c277c: nop dword ptr [rax]; movsxd rdi, ebx; mov eax, 3; syscall; 
0x00000000001088a1: nop dword ptr [rax]; movsxd rdi, edi; mov eax, 0xe3; syscall; 
0x0000000000033101: nop dword ptr [rax]; movsxd rdi, r12d; mov eax, 3; syscall; 
0x000000000007b1d5: nop dword ptr [rax]; movzx eax, byte ptr [rax]; pop rbx; ret; 
0x000000000008bf5d: nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000014d199: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000014d129: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000013cac5: nop dword ptr [rax]; pcmpistri xmm3, xmm3, 0x3a; movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x0000000000036399: nop dword ptr [rax]; pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x000000000006e24c: nop dword ptr [rax]; pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x0000000000136c25: nop dword ptr [rax]; pop rbx; pop rbp; mov eax, 0xffffffff; pop r12; ret; 
0x000000000003c865: nop dword ptr [rax]; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f2ecd: nop dword ptr [rax]; pop rbx; pop rbp; xor eax, eax; pop r12; ret; 
0x0000000000034a9c: nop dword ptr [rax]; pop rbx; ret; 
0x000000000009dd99: nop dword ptr [rax]; ret; 
0x000000000007129c: nop dword ptr [rax]; shr esi, 4; and esi, 1; mov eax, esi; ret; 
0x000000000007139c: nop dword ptr [rax]; shr esi, 5; and esi, 1; mov eax, esi; ret; 
0x00000000000a307c: nop dword ptr [rax]; sub eax, r8d; ret; 
0x0000000000116219: nop dword ptr [rax]; sub rsp, -0x80; xor eax, eax; pop rbx; ret; 
0x000000000011bca5: nop dword ptr [rax]; sub rsp, 8; call 0x11b470; or dword ptr [rip + 0x2a7718], 2; add rsp, 8; ret; 
0x0000000000083479: nop dword ptr [rax]; xor eax, eax; add rsp, 8; ret; 
0x00000000000ed2a9: nop dword ptr [rax]; xor eax, eax; pop rbx; ret; 
0x000000000006e4d5: nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000072ee9: nop dword ptr [rax]; xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x0000000000093999: nop dword ptr [rax]; xor rax, rax; ret; 
0x000000000012e607: nop dword ptr cs:[rax + rax]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x00000000000a2eb7: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x0000000000093957: nop dword ptr cs:[rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x0000000000162397: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xa]; ret; 
0x00000000001623a7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xb]; ret; 
0x00000000001623b7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xc]; ret; 
0x00000000001623c7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xd]; ret; 
0x00000000001623d7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xe]; ret; 
0x0000000000162317: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 1]; ret; 
0x0000000000162327: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 2]; ret; 
0x0000000000162337: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 3]; ret; 
0x0000000000162347: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 4]; ret; 
0x0000000000162357: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 5]; ret; 
0x0000000000162367: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 6]; ret; 
0x0000000000162377: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 8]; ret; 
0x0000000000162387: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 9]; ret; 
0x00000000000a34d7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi - 0xc]; ret; 
0x00000000000a34f7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi - 4]; ret; 
0x00000000000a34e7: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi - 8]; ret; 
0x0000000000162307: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rdi]; ret; 
0x0000000000022027: nop dword ptr cs:[rax + rax]; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x000000000015a4b7: nop dword ptr cs:[rax + rax]; mov byte ptr [rcx], dl; ret; 
0x000000000009e3d7: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000009cdd7: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000009dda7: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dl; ret; 
0x000000000009daa7: nop dword ptr cs:[rax + rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000015a4f7: nop dword ptr cs:[rax + rax]; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x000000000015a507: nop dword ptr cs:[rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000009ddc7: nop dword ptr cs:[rax + rax]; mov dword ptr [rdi - 1], edx; ret; 
0x000000000009dde7: nop dword ptr cs:[rax + rax]; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000009ddf7: nop dword ptr cs:[rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x000000000009ddd7: nop dword ptr cs:[rax + rax]; mov dword ptr [rdi], edx; ret; 
0x000000000009cde7: nop dword ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000f11d7: nop dword ptr cs:[rax + rax]; mov eax, 0x10; syscall; 
0x00000000000f1017: nop dword ptr cs:[rax + rax]; mov eax, 0x8d; syscall; 
0x00000000000f1b47: nop dword ptr cs:[rax + rax]; mov eax, 0xaa; syscall; 
0x00000000000c24b7: nop dword ptr cs:[rax + rax]; mov eax, 0xfc17; ret; 
0x000000000007c827: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000002c047: nop dword ptr cs:[rax + rax]; mov eax, 1; ret; 
0x0000000000121447: nop dword ptr cs:[rax + rax]; mov eax, 2; ret; 
0x000000000010c537: nop dword ptr cs:[rax + rax]; mov eax, edi; bswap eax; ret; 
0x000000000014c927: nop dword ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000036fe7: nop dword ptr cs:[rax + rax]; mov esi, 8; mov eax, 0x82; syscall; 
0x000000000015a537: nop dword ptr cs:[rax + rax]; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x000000000015a527: nop dword ptr cs:[rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x000000000009de27: nop dword ptr cs:[rax + rax]; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000009de17: nop dword ptr cs:[rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x000000000007c807: nop dword ptr cs:[rax + rax]; mov rax, -1; ret; 
0x0000000000036ca7: nop dword ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000000a2ed7: nop dword ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000012d617: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012ce77: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000012e1f7: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000070b77: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000007c867: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000007c847: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x342949]; ret; 
0x0000000000030127: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x38dda1]; add rax, qword ptr fs:[0]; ret; 
0x0000000000126967: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rsp + 0x38]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000097ad7: nop dword ptr cs:[rax + rax]; mov rax, rbx; pop rbx; ret; 
0x000000000007c877: nop dword ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x000000000015a4d7: nop dword ptr cs:[rax + rax]; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000015a4c7: nop dword ptr cs:[rax + rax]; mov word ptr [rcx], dx; ret; 
0x000000000009ddb7: nop dword ptr cs:[rax + rax]; mov word ptr [rdi], dx; ret; 
0x000000000009de97: nop dword ptr cs:[rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000014cab7: nop dword ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000014ca37: nop dword ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000fa972: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x00000000000ebeb2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x00000000000ebf12: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x00000000000faaf2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x00000000000faf42: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x00000000000fa8b2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x00000000000ebee2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x00000000000cb292: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x00000000000f4982: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x00000000000fbe92: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1d; syscall; 
0x00000000000fbec2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1f; syscall; 
0x00000000000ebe82: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000c0b82: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x25; syscall; 
0x00000000000b4282: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x00000000000fb5a2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x00000000000fb1d2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x00000000000fbda2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x40; syscall; 
0x00000000000fbd72: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x41; syscall; 
0x00000000000fbe62: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x43; syscall; 
0x00000000000fbd42: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x47; syscall; 
0x00000000000f30b2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x4d; syscall; 
0x00000000000ebfd2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x00000000000eb3a2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x00000000000ec7d2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x00000000000ec802: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000f0c52: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x62; syscall; 
0x00000000000fab52: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000c1f02: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000c1f32: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000c1f92: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000c1fc2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000c1ff2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x00000000000fa462: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7a; syscall; 
0x00000000000fa492: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x00000000000fa852: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x00000000000fa882: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x00000000000fae22: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x00000000000fac12: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x87; syscall; 
0x00000000000eb252: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000000cb202: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000000cb232: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x00000000000cb262: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x00000000000cb2c2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000000cb2f2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000000cb322: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x00000000000f4a12: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x00000000000f4a42: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x00000000000f4a72: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x00000000000fa7b2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x00000000000fac42: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000000f0c22: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa0; syscall; 
0x00000000000f1d92: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x00000000000f21a2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000000f21d2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x00000000000f48c2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x00000000000fa272: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x00000000000fa8e2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x00000000000fa912: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x00000000000fa432: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x00000000000f8172: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x00000000000f8052: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x00000000000fa942: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x00000000000fa7e2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x00000000000faac2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x00000000000fab22: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x000000000005db84: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x52; syscall; 
0x00000000000faf15: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x11f; syscall; 
0x00000000000fbe35: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x1e; syscall; 
0x00000000000fb575: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x30; syscall; 
0x00000000000fb235: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x32; syscall; 
0x00000000000c11d6: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x3b; syscall; 
0x00000000000ebcb6: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x49; syscall; 
0x00000000000eb445: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x53; syscall; 
0x00000000000eceb6: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x59; syscall; 
0x00000000000374b5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x83; syscall; 
0x00000000000f49e5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x95; syscall; 
0x00000000000fa785: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x9e; syscall; 
0x00000000000fa825: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x9f; syscall; 
0x00000000000fabe5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xb4; syscall; 
0x00000000000f4895: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xb; syscall; 
0x00000000000f80e5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xc2; syscall; 
0x00000000000f8145: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xc3; syscall; 
0x00000000000f8025: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xc4; syscall; 
0x00000000000f81d5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xc5; syscall; 
0x00000000000faa95: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xfe; syscall; 
0x00000000000bd335: nop dword ptr cs:[rax + rax]; nop; mov eax, dword ptr [rdi]; ret; 
0x0000000000037b95: nop dword ptr cs:[rax + rax]; nop; mov eax, dword ptr [rip + 0x3864fa]; ret; 
0x000000000009da97: nop dword ptr cs:[rax + rax]; ret; 
0x00000000000a0c57: nop dword ptr cs:[rax + rax]; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x0000000000077ac7: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000097007: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000012e5ca: nop word ptr [rax + rax]; add dword ptr [rdi + 0x28], edx; mov eax, 1; ret; 
0x0000000000038242: nop word ptr [rax + rax]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000008bdd7: nop word ptr [rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x0000000000096f67: nop word ptr [rax + rax]; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000009eb6a: nop word ptr [rax + rax]; lea r11, qword ptr [rip + 0xd9a49]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d4ca: nop word ptr [rax + rax]; lea r11, qword ptr [rip + 0xdaf09]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000f7ef2: nop word ptr [rax + rax]; lea rbx, qword ptr [rip + 0x865af]; mov rax, rbx; pop rbx; ret; 
0x00000000000d0aea: nop word ptr [rax + rax]; mov byte ptr [rdi + 8], 0x15; mov eax, 1; ret; 
0x00000000000f321a: nop word ptr [rax + rax]; mov byte ptr [rdi], 0; mov byte ptr [rip + 0x2ce3d7], cl; mov rax, rdi; mov byte ptr [r9 - 1], 0; ret; 
0x00000000000967a2: nop word ptr [rax + rax]; mov byte ptr [rdi], sil; add rdi, 1; mov rax, rdi; ret; 
0x000000000011a102: nop word ptr [rax + rax]; mov byte ptr [rdx], 0; pop rbx; ret; 
0x000000000012771a: nop word ptr [rax + rax]; mov dword ptr [rcx + 4], 1; mov eax, 1; ret; 
0x000000000015a517: nop word ptr [rax + rax]; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x000000000015a4e7: nop word ptr [rax + rax]; mov dword ptr [rcx], edx; ret; 
0x0000000000127faa: nop word ptr [rax + rax]; mov dword ptr [rdi + 4], 1; mov eax, 1; ret; 
0x00000000000968da: nop word ptr [rax + rax]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; mov rax, rdi; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968ca: nop word ptr [rax + rax]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; mov rax, rdi; ret; 
0x0000000000120d77: nop word ptr [rax + rax]; mov dword ptr [rsi], 0xa; ret; 
0x0000000000120db7: nop word ptr [rax + rax]; mov dword ptr [rsi], 0xc; ret; 
0x0000000000120da7: nop word ptr [rax + rax]; mov dword ptr [rsi], 8; ret; 
0x00000000000a0c7a: nop word ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000f1eba: nop word ptr [rax + rax]; mov eax, 0x132; syscall; 
0x00000000000fb00a: nop word ptr [rax + rax]; mov eax, 0x134; syscall; 
0x00000000000eb75a: nop word ptr [rax + rax]; mov eax, 0x15; syscall; 
0x00000000000f495a: nop word ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x00000000000ebe5a: nop word ptr [rax + rax]; mov eax, 0x20; syscall; 
0x00000000000fb11a: nop word ptr [rax + rax]; mov eax, 0x31; syscall; 
0x00000000000fb1aa: nop word ptr [rax + rax]; mov eax, 0x34; syscall; 
0x00000000000eaf2a: nop word ptr [rax + rax]; mov eax, 0x3c; syscall; 
0x00000000000ebfaa: nop word ptr [rax + rax]; mov eax, 0x50; syscall; 
0x00000000000ecf1a: nop word ptr [rax + rax]; mov eax, 0x57; syscall; 
0x00000000000eb367: nop word ptr [rax + rax]; mov eax, 0x5f; syscall; 
0x00000000000eb367: nop word ptr [rax + rax]; mov eax, 0x5f; syscall; ret; 
0x00000000000c1eda: nop word ptr [rax + rax]; mov eax, 0x79; syscall; 
0x00000000000f1e2a: nop word ptr [rax + rax]; mov eax, 0xa2; syscall; 
0x00000000000b140a: nop word ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x00000000000fa407: nop word ptr [rax + rax]; mov eax, 0xa6; syscall; 
0x00000000000f1be7: nop word ptr [rax + rax]; mov eax, 0xab; syscall; 
0x000000000010c4b2: nop word ptr [rax + rax]; mov eax, 0xca; add rsp, 0x28; ret; 
0x00000000000f2ed7: nop word ptr [rax + rax]; mov eax, 0xeb; syscall; 
0x0000000000074532: nop word ptr [rax + rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000085dd2: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000048a5a: nop word ptr [rax + rax]; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000012ceea: nop word ptr [rax + rax]; mov eax, 1; ret; 
0x000000000007c597: nop word ptr [rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000012d732: nop word ptr [rax + rax]; mov eax, dword ptr [rdx]; lea rsi, qword ptr [rsp + 0x10]; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000753ca: nop word ptr [rax + rax]; mov eax, dword ptr [rdx]; ret; 
0x0000000000037ba7: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0x3864da]; ret; 
0x000000000012cfa2: nop word ptr [rax + rax]; mov eax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000103f5a: nop word ptr [rax + rax]; mov eax, edi; sub eax, esi; ret; 
0x000000000009ce0a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000015a567: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x000000000015a577: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x000000000015a547: nop word ptr [rax + rax]; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x000000000009de07: nop word ptr [rax + rax]; mov qword ptr [rdi - 1], rdx; ret; 
0x000000000009de57: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000009de67: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000009de37: nop word ptr [rax + rax]; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000fc76a: nop word ptr [rax + rax]; mov qword ptr [rip + 0x2c1b85], 0; pop rbp; ret; 
0x000000000010c4c2: nop word ptr [rax + rax]; mov qword ptr [rsi], rdi; xor eax, eax; ret; 
0x00000000000ed2c7: nop word ptr [rax + rax]; mov r10, rcx; mov eax, 0x28; syscall; 
0x00000000000eb54a: nop word ptr [rax + rax]; mov r10d, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x0000000000123ae2: nop word ptr [rax + rax]; mov rax, qword ptr [r8]; bswap eax; mov dword ptr [rcx + 0xb4], eax; mov eax, 1; ret; 
0x0000000000074f92: nop word ptr [rax + rax]; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000006d96a: nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012d0ba: nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000012ce42: nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x0000000000121b0a: nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 8]; mov rsi, rsp; mov rdi, rbx; call qword ptr [rax]; 
0x00000000000bd23a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 0x20]; ret; 
0x000000000007b0ba: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000012e012: nop word ptr [rax + rax]; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x00000000001365da: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x287881]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000012abea: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x293381]; add rsp, 8; ret; 
0x00000000000f4bfa: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x2c9261]; mov dword ptr fs:[rax], 0x16; pop rbx; ret; 
0x00000000000f10ea: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x2ccd71]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000ee2aa: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x2cfbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000c12aa: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x2fcbb1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000376b2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x3867a9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000036be2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x387279]; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000340e2: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x38ff21]; lea rdi, qword ptr [rip + 0x38bb8a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000032042: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x391fc1]; lea rdi, qword ptr [rip + 0x38dd0a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030392: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x393c69]; lea rdi, qword ptr [rip + 0x38f8da]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d502: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x396b01]; lea rdi, qword ptr [rip + 0x3925ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002275a: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x39b701]; add rax, qword ptr fs:[0]; ret; 
0x00000000000237c7: nop word ptr [rax + rax]; mov rax, qword ptr [rip + 0x3a0481]; ret; 
0x00000000000fe0da: nop word ptr [rax + rax]; mov rax, qword ptr [rsi + 0x68]; mov edi, edi; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x000000000002efda: nop word ptr [rax + rax]; mov rax, qword ptr [rsi + rdx*8 + 0x80]; ret; 
0x0000000000047022: nop word ptr [rax + rax]; mov rax, rbx; pop rbx; ret; 
0x00000000000a4a02: nop word ptr [rax + rax]; mov rax, rcx; ret; 
0x0000000000096b57: nop word ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000009ce6a: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000000869c2: nop word ptr [rax + rax]; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x0000000000112f32: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0x2aaf29]; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000086877: nop word ptr [rax + rax]; mov rdx, qword ptr [rip + 0x3376c1]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x000000000009688a: nop word ptr [rax + rax]; mov word ptr [rdi], si; mov rax, rdi; ret; 
0x000000000012e172: nop word ptr [rax + rax]; movsx eax, byte ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000012cf42: nop word ptr [rax + rax]; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000012e1d2: nop word ptr [rax + rax]; movzx eax, byte ptr [rsi]; mov rsi, rsp; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x000000000002585a: nop word ptr [rax + rax]; movzx edx, sil; test sil, sil; mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x00000000000d262a: nop word ptr [rax + rax]; pop rbx; pop rbp; pop r12; ret; 
0x000000000004701a: nop word ptr [rax + rax]; pop rbx; ret; 
0x00000000000a110a: nop word ptr [rax + rax]; ret; 
0x00000000000fd91a: nop word ptr [rax + rax]; sub edi, 0x30; xor eax, eax; cmp edi, 9; setbe al; ret; 
0x000000000007be02: nop word ptr [rax + rax]; sub r8, rcx; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000075102: nop word ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x00000000000d232a: nop word ptr [rax + rax]; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d1d32: nop word ptr [rax + rax]; xor eax, eax; pop rbx; ret; 
0x000000000003c0c2: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000a2bda: nop word ptr [rax + rax]; xor rax, rax; ret; 
0x000000000012e606: nop word ptr cs:[rax + rax]; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x00000000000a2eb6: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x0000000000093956: nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x0000000000162396: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xa]; ret; 
0x00000000001623a6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xb]; ret; 
0x00000000001623b6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xc]; ret; 
0x00000000001623c6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xd]; ret; 
0x00000000001623d6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 0xe]; ret; 
0x0000000000162316: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 1]; ret; 
0x0000000000162326: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 2]; ret; 
0x0000000000162336: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 3]; ret; 
0x0000000000162346: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 4]; ret; 
0x0000000000162356: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 5]; ret; 
0x0000000000162366: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 6]; ret; 
0x0000000000162376: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 8]; ret; 
0x0000000000162386: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi + 9]; ret; 
0x00000000000a34d6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi - 0xc]; ret; 
0x00000000000a34f6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi - 4]; ret; 
0x00000000000a34e6: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi - 8]; ret; 
0x0000000000162306: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rdi]; ret; 
0x0000000000022026: nop word ptr cs:[rax + rax]; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x000000000015a4b6: nop word ptr cs:[rax + rax]; mov byte ptr [rcx], dl; ret; 
0x000000000009e3d6: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000009cdd6: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000009dda6: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dl; ret; 
0x000000000009daa6: nop word ptr cs:[rax + rax]; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000015a4f6: nop word ptr cs:[rax + rax]; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x000000000015a506: nop word ptr cs:[rax + rax]; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000009ddc6: nop word ptr cs:[rax + rax]; mov dword ptr [rdi - 1], edx; ret; 
0x000000000009dde6: nop word ptr cs:[rax + rax]; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000009ddf6: nop word ptr cs:[rax + rax]; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x000000000009ddd6: nop word ptr cs:[rax + rax]; mov dword ptr [rdi], edx; ret; 
0x000000000009cde6: nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000f11d6: nop word ptr cs:[rax + rax]; mov eax, 0x10; syscall; 
0x00000000000f1016: nop word ptr cs:[rax + rax]; mov eax, 0x8d; syscall; 
0x00000000000f1b46: nop word ptr cs:[rax + rax]; mov eax, 0xaa; syscall; 
0x00000000000c24b6: nop word ptr cs:[rax + rax]; mov eax, 0xfc17; ret; 
0x000000000007c826: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000002c046: nop word ptr cs:[rax + rax]; mov eax, 1; ret; 
0x0000000000121446: nop word ptr cs:[rax + rax]; mov eax, 2; ret; 
0x000000000010c536: nop word ptr cs:[rax + rax]; mov eax, edi; bswap eax; ret; 
0x000000000014c926: nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000036fe6: nop word ptr cs:[rax + rax]; mov esi, 8; mov eax, 0x82; syscall; 
0x000000000015a536: nop word ptr cs:[rax + rax]; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x000000000015a526: nop word ptr cs:[rax + rax]; mov qword ptr [rcx], rdx; ret; 
0x000000000009de26: nop word ptr cs:[rax + rax]; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000009de16: nop word ptr cs:[rax + rax]; mov qword ptr [rdi], rdx; ret; 
0x000000000007c806: nop word ptr cs:[rax + rax]; mov rax, -1; ret; 
0x0000000000036ca6: nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000000a2ed6: nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000012d616: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012ce76: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000012e1f6: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000070b76: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000007c866: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000007c846: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x342949]; ret; 
0x0000000000030126: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x38dda1]; add rax, qword ptr fs:[0]; ret; 
0x0000000000126966: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rsp + 0x38]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000097ad6: nop word ptr cs:[rax + rax]; mov rax, rbx; pop rbx; ret; 
0x000000000007c876: nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x000000000015a4d6: nop word ptr cs:[rax + rax]; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000015a4c6: nop word ptr cs:[rax + rax]; mov word ptr [rcx], dx; ret; 
0x000000000009ddb6: nop word ptr cs:[rax + rax]; mov word ptr [rdi], dx; ret; 
0x000000000009de96: nop word ptr cs:[rax + rax]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000014cab6: nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000014ca36: nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000fa971: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x00000000000ebeb1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x00000000000ebf11: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x00000000000faaf1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x00000000000faf41: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x00000000000fa8b1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x00000000000ebee1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x00000000000cb291: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x00000000000f4981: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x00000000000fbe91: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1d; syscall; 
0x00000000000fbec1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1f; syscall; 
0x00000000000ebe81: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000c0b81: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x25; syscall; 
0x00000000000b4281: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x00000000000fb5a1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x00000000000fb1d1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x00000000000fbda1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x40; syscall; 
0x00000000000fbd71: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x41; syscall; 
0x00000000000fbe61: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x43; syscall; 
0x00000000000fbd41: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x47; syscall; 
0x00000000000f30b1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x4d; syscall; 
0x00000000000ebfd1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x00000000000eb3a1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x00000000000ec7d1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x00000000000ec801: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000f0c51: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x62; syscall; 
0x00000000000fab51: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000c1f01: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000c1f31: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000c1f91: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000c1fc1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000c1ff1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x00000000000fa461: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7a; syscall; 
0x00000000000fa491: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x00000000000fa851: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x00000000000fa881: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x00000000000fae21: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x00000000000fac11: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x87; syscall; 
0x00000000000eb251: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000000cb201: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000000cb231: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x00000000000cb261: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x00000000000cb2c1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000000cb2f1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000000cb321: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x00000000000f4a11: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x00000000000f4a41: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x00000000000f4a71: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x00000000000fa7b1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x00000000000fac41: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000000f0c21: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa0; syscall; 
0x00000000000f1d91: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x00000000000f21a1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000000f21d1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x00000000000f48c1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x00000000000fa271: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x00000000000fa8e1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x00000000000fa911: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x00000000000fa431: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x00000000000f8171: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x00000000000f8051: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x00000000000fa941: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x00000000000fa7e1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x00000000000faac1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x00000000000fab21: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x000000000005db83: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov eax, 0x52; syscall; 
0x00000000000faf14: nop word ptr cs:[rax + rax]; nop; mov eax, 0x11f; syscall; 
0x00000000000fbe34: nop word ptr cs:[rax + rax]; nop; mov eax, 0x1e; syscall; 
0x00000000000fb574: nop word ptr cs:[rax + rax]; nop; mov eax, 0x30; syscall; 
0x00000000000fb234: nop word ptr cs:[rax + rax]; nop; mov eax, 0x32; syscall; 
0x00000000000c11d5: nop word ptr cs:[rax + rax]; nop; mov eax, 0x3b; syscall; 
0x00000000000ebcb5: nop word ptr cs:[rax + rax]; nop; mov eax, 0x49; syscall; 
0x00000000000eb444: nop word ptr cs:[rax + rax]; nop; mov eax, 0x53; syscall; 
0x00000000000eceb5: nop word ptr cs:[rax + rax]; nop; mov eax, 0x59; syscall; 
0x00000000000374b4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x83; syscall; 
0x00000000000f49e4: nop word ptr cs:[rax + rax]; nop; mov eax, 0x95; syscall; 
0x00000000000fa784: nop word ptr cs:[rax + rax]; nop; mov eax, 0x9e; syscall; 
0x00000000000fa824: nop word ptr cs:[rax + rax]; nop; mov eax, 0x9f; syscall; 
0x00000000000fabe4: nop word ptr cs:[rax + rax]; nop; mov eax, 0xb4; syscall; 
0x00000000000f4894: nop word ptr cs:[rax + rax]; nop; mov eax, 0xb; syscall; 
0x00000000000f80e4: nop word ptr cs:[rax + rax]; nop; mov eax, 0xc2; syscall; 
0x00000000000f8144: nop word ptr cs:[rax + rax]; nop; mov eax, 0xc3; syscall; 
0x00000000000f8024: nop word ptr cs:[rax + rax]; nop; mov eax, 0xc4; syscall; 
0x00000000000f81d4: nop word ptr cs:[rax + rax]; nop; mov eax, 0xc5; syscall; 
0x00000000000faa94: nop word ptr cs:[rax + rax]; nop; mov eax, 0xfe; syscall; 
0x00000000000bd334: nop word ptr cs:[rax + rax]; nop; mov eax, dword ptr [rdi]; ret; 
0x0000000000037b94: nop word ptr cs:[rax + rax]; nop; mov eax, dword ptr [rip + 0x3864fa]; ret; 
0x000000000009da96: nop word ptr cs:[rax + rax]; ret; 
0x00000000000a0c56: nop word ptr cs:[rax + rax]; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x0000000000077ac6: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000097006: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000019d1c0: nop; adc bh, dl; call qword ptr [rax]; 
0x0000000000186ad0: nop; adc esp, edi; call rax; 
0x000000000018d075: nop; add al, byte ptr [rax]; and al, 0x6a; stc; jmp rsp; 
0x0000000000044ee0: nop; add byte ptr [rax], al; add bl, ch; ret 0x2e66; 
0x0000000000114bb4: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c52a91a; ret; 
0x000000000014c1f7: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000002c26c: nop; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000127ff6: nop; add byte ptr [rax], al; add byte ptr [rbx - 0x37f0fe18], al; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000a75ce: nop; add byte ptr [rax], al; add byte ptr [rcx + 0x29], cl; ret; 
0x00000000000f476e: nop; add byte ptr [rax], al; add byte ptr [rcx + 0x415d5bd8], cl; pop rsp; ret; 
0x000000000004554e: nop; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret; 
0x000000000015ff9c: nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000045871: nop; add byte ptr [rax], al; add cl, ch; cmp eax, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000003f9f6: nop; add byte ptr [rax], al; add cl, ch; xor dl, 0xff; dec dword ptr [rax + 0x63]; ret 0x3ce9; 
0x00000000000797bd: nop; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x00000000000f1bcd: nop; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000b24c2: nop; add dword ptr [rax], eax; add byte ptr [rcx], bh; ror dword ptr [rdi], 1; xchg eax, esp; ret; 
0x00000000000b718d: nop; add dword ptr [rax], eax; add byte ptr [rcx], ch; ret; 
0x00000000001afe28: nop; add dword ptr [rbx - 0x73f979f9], eax; add eax, 0x38e048d; pop qword ptr [rdx]; add dl, byte ptr [rsi + 0x41380e0a]; ret; 
0x00000000001b0fb1: nop; add dword ptr [rbx], eax; ret; 
0x000000000012e5bf: nop; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x000000000014dfc7: nop; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000004dd96: nop; add rax, r12; jmp rax; 
0x000000000004d593: nop; add rax, r12; mov byte ptr [rbp - 0x4fa], 0x20; mov dword ptr [rbp - 0x530], 1; jmp rax; 
0x000000000004ecb7: nop; add rax, r12; mov dword ptr [rbp - 0x548], 1; jmp rax; 
0x000000000004ed66: nop; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 0; jmp rax; 
0x000000000004e97e: nop; add rax, r12; mov dword ptr [rbp - 0x548], 1; mov dword ptr [rbp - 0x56c], 1; jmp rax; 
0x000000000004d53c: nop; add rax, r12; mov dword ptr [rbp - 0x550], 1; jmp rax; 
0x000000000004baa3: nop; add rax, r12; mov dword ptr [rbp - 0x554], 1; jmp rax; 
0x000000000004e9df: nop; add rax, r12; mov dword ptr [rbp - 0x558], 1; jmp rax; 
0x000000000004dec2: nop; add rax, r12; mov dword ptr [rbp - 0x568], 1; jmp rax; 
0x000000000004ec56: nop; add rax, r12; mov dword ptr [rbp - 0x570], 1; mov dword ptr [rbp - 0x568], 0; jmp rax; 
0x000000000004e799: nop; add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004e83c: nop; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000005f063: nop; add rax, r13; jmp rax; 
0x000000000005f141: nop; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005ef48: nop; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 0; jmp rax; 
0x000000000005efe6: nop; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; mov dword ptr [rbp - 0x1118], 1; jmp rax; 
0x000000000005f1d5: nop; add rax, r13; mov dword ptr [rbp - 0x1100], 0x20; mov dword ptr [rbp - 0x10fc], 1; jmp rax; 
0x000000000005f18b: nop; add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000005ef9c: nop; add rax, r13; mov dword ptr [rbp - 0x1110], 1; jmp rax; 
0x000000000005f229: nop; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f0a3: nop; add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f2de: nop; add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000005f0ed: nop; add rax, r13; mov dword ptr [rbp - 0x1138], 1; mov dword ptr [rbp - 0x1128], 0; jmp rax; 
0x000000000005f328: nop; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x00000000000b530b: nop; add rax, rdx; jmp rax; 
0x00000000000aeddf: nop; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000000c2c0f: nop; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000000237bf: nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007347f: nop; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000019a1e0: nop; and al, 0xee; call qword ptr [rsi]; 
0x00000000001afc6c: nop; and dh, dh; jmp qword ptr [rdx]; 
0x000000000003607f: nop; andpd xmm0, xmmword ptr [rip + 0x14f858]; andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x000000000008bdbf: nop; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x00000000000a07bf: nop; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd7fc9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe3f: nop; bsf rdx, rdx; lea r11, qword ptr [rip + 0xd88c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e35f: nop; bsf rdx, rdx; lea r11, qword ptr [rip + 0xda1c9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000096f5f: nop; bsr eax, eax; add rax, rdi; ret; 
0x00000000000970ef: nop; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000011c39f: nop; call 0x11af70; add rsp, 0x90; pop rbx; ret; 
0x00000000001866ec: nop; call 0xffffffffdb3966ed; sti; jmp rax; 
0x00000000001874e8: nop; cld; call qword ptr [rax]; 
0x00000000001ac3e0: nop; cld; cmc; call qword ptr [rax]; 
0x00000000001782a5: nop; cld; jmp qword ptr [rax]; 
0x000000000019f8d0: nop; cld; jmp qword ptr [rbx]; 
0x0000000000186a98: nop; cld; push qword ptr [rax + 0x30]; cld; jmp qword ptr [rax + 0x32]; 
0x000000000017abf5: nop; cli; call qword ptr [rax - 0x70]; 
0x000000000017abe9: nop; cli; call qword ptr [rax]; 
0x000000000017abe9: nop; cli; call qword ptr [rax]; nop; cli; jmp qword ptr [rax]; 
0x000000000017abe5: nop; cli; inc dword ptr [rax]; nop; cli; call qword ptr [rax]; 
0x000000000017abed: nop; cli; jmp qword ptr [rax]; 
0x00000000001a8430: nop; cmc; call qword ptr [rax]; 
0x00000000001a82e0: nop; cmp esi, ebp; jmp qword ptr [rcx]; 
0x0000000000178278: nop; cmp esp, -1; mov al, 0x84; cld; call rax; 
0x00000000001869ec: nop; cmp esp, edi; jmp qword ptr [rax]; 
0x00000000001877a8: nop; cmpsb byte ptr [rsi], byte ptr [rdi]; cld; call qword ptr [rax]; 
0x00000000001877a0: nop; cmpsd dword ptr [rsi], dword ptr [rdi]; cld; call qword ptr [rax]; 
0x00000000001a4ca0: nop; hlt; jmp qword ptr [rcx]; 
0x000000000007b7bc: nop; idiv bh; inc dword ptr [rbp + 0x483175c0]; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001b44d9: nop; idiv edi; ret; 
0x0000000000178608: nop; imul esi, edx, 0xf269c0ff; push rax; imul esi, edx, 0xf26a20ff; call qword ptr [rax + 0x6a]; 
0x00000000001866e4: nop; in al, 0xfb; call qword ptr [rax - 0x6f00041a]; call 0xffffffffdb3966ed; sti; jmp rax; 
0x00000000001874f8: nop; insb byte ptr [rdi], dx; cld; call qword ptr [rax]; 
0x000000000018676c: nop; int 0xfb; jmp rax; 
0x00000000001a0000: nop; int1; jmp qword ptr [rcx]; 
0x0000000000187544: nop; jno 0x187543; call qword ptr [rax]; 
0x00000000001a53f0: nop; jnp 0x1a53e7; jmp qword ptr [rcx]; 
0x00000000001176bf: nop; lea eax, dword ptr [rdi + 9]; and eax, 0xfffffff8; add eax, 0x10; ret; 
0x0000000000037bef: nop; lea eax, dword ptr [rdx - 1]; mov dword ptr [rip + 0x386497], eax; mov eax, edx; ret; 
0x0000000000187588: nop; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rax]; 
0x0000000000187760: nop; mov al, 0xfc; jmp qword ptr [rax]; 
0x000000000005dc2f: nop; mov byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 8], r9; add dword ptr [rdx + 4], 1; ret; 
0x000000000017802c: nop; mov dh, 0xf0; push rax; mov ch, 0xf0; call qword ptr [rax]; 
0x000000000014441f: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000120d6f: nop; mov dword ptr [rsi], 0xb; ret; 
0x00000000001445ff: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000001447df: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000faf1f: nop; mov eax, 0x11f; syscall; 
0x00000000000fbe3f: nop; mov eax, 0x1e; syscall; 
0x00000000000b425f: nop; mov eax, 0x24; syscall; 
0x00000000000fb57f: nop; mov eax, 0x30; syscall; 
0x00000000000fb23f: nop; mov eax, 0x32; syscall; 
0x00000000000c11df: nop; mov eax, 0x3b; syscall; 
0x00000000000ebcbf: nop; mov eax, 0x49; syscall; 
0x00000000000eb44f: nop; mov eax, 0x53; syscall; 
0x00000000000ece5f: nop; mov eax, 0x58; syscall; 
0x00000000000ecebf: nop; mov eax, 0x59; syscall; 
0x00000000000374bf: nop; mov eax, 0x83; syscall; 
0x00000000000f49ef: nop; mov eax, 0x95; syscall; 
0x00000000000f217f: nop; mov eax, 0x99; syscall; 
0x00000000000fa78f: nop; mov eax, 0x9e; syscall; 
0x00000000000fa82f: nop; mov eax, 0x9f; syscall; 
0x00000000000fabef: nop; mov eax, 0xb4; syscall; 
0x00000000000f489f: nop; mov eax, 0xb; syscall; 
0x00000000000f80ef: nop; mov eax, 0xc2; syscall; 
0x00000000000f814f: nop; mov eax, 0xc3; syscall; 
0x00000000000f802f: nop; mov eax, 0xc4; syscall; 
0x00000000000f81df: nop; mov eax, 0xc5; syscall; 
0x00000000000faa9f: nop; mov eax, 0xfe; syscall; 
0x00000000000c24af: nop; mov eax, 0xfffa; ret; 
0x00000000000746ff: nop; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000007b50f: nop; mov eax, 0xffffffff; ret; 
0x00000000000a3c3f: nop; mov eax, 1; ret; 
0x00000000000bd33f: nop; mov eax, dword ptr [rdi]; ret; 
0x00000000000735ef: nop; mov eax, dword ptr [rdi]; shr eax, 4; and eax, 1; ret; 
0x0000000000037b9f: nop; mov eax, dword ptr [rip + 0x3864fa]; ret; 
0x00000000000967ef: nop; mov eax, dword ptr [rsp + 0x10]; add rdi, 4; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x000000000003670f: nop; mov eax, dword ptr [rsp + 0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x000000000010c54f: nop; mov eax, edi; ror ax, 8; ret; 
0x00000000000f10bf: nop; mov ecx, 0xc; mov rsi, rdi; mov eax, ecx; syscall; 
0x000000000008ca7f: nop; mov edx, 0xffffffff; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret; 
0x000000000010726a: nop; mov edx, dword ptr [r12 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; call rax; 
0x00000000001072ea: nop; mov edx, dword ptr [r12 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; call rax; 
0x00000000001070ae: nop; mov edx, dword ptr [r13 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x00000000001076e7: nop; mov edx, dword ptr [r13 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; call rax; 
0x0000000000106ee0: nop; mov edx, dword ptr [r14 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x000000000010755e: nop; mov edx, dword ptr [r14 - 0x30]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x00000000001449bf: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000009e40f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, qword ptr [rdi + 3]; ret; 
0x0000000000187268: nop; mov esp, edi; jmp qword ptr [rax]; 
0x00000000000fb06f: nop; mov r10, rcx; mov eax, 0x137; syscall; 
0x00000000000fabbf: nop; mov r10, rcx; mov eax, 0x19; syscall; 
0x00000000000facaf: nop; mov r10, rcx; mov eax, 0xb2; syscall; 
0x00000000000facdf: nop; mov r10, rcx; mov eax, 0xb3; syscall; 
0x0000000000132d0f: nop; mov r10, rcx; mov eax, 0xb5; syscall; 
0x0000000000132d5f: nop; mov r10, rcx; mov eax, 0xb6; syscall; 
0x00000000000f80bf: nop; mov r10, rcx; mov eax, 0xbf; syscall; 
0x00000000000f7fff: nop; mov r10, rcx; mov eax, 0xc1; syscall; 
0x00000000000fbe0f: nop; mov r10, rcx; mov eax, 0xdc; syscall; 
0x0000000000036ecf: nop; mov r10d, 8; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x00000000000786ef: nop; mov rax, -1; pop rbx; ret; 
0x000000000007c7ef: nop; mov rax, -1; ret; 
0x00000000000751bf: nop; mov rax, qword ptr [rax + 0x140]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000012156f: nop; mov rax, qword ptr [rbx + 0x23b8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000007b22f: nop; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000012d63f: nop; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000003c1af: nop; mov rax, qword ptr [rcx + 8]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000072f9f: nop; mov rax, qword ptr [rdi + 0x28]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000072e8f: nop; mov rax, qword ptr [rdi + 0x40]; sub rax, qword ptr [rdi + 0x38]; ret; 
0x000000000005dc9f: nop; mov rax, qword ptr [rdi + 0x88]; mov qword ptr [rax + 8], r8; mov dword ptr [rax + 4], 1; xor eax, eax; ret; 
0x000000000007bdaf: nop; mov rax, qword ptr [rdi + 0xd8]; mov esi, 0xffffffff; call qword ptr [rax + 0x30]; 
0x000000000007b67f: nop; mov rax, qword ptr [rdi + 0xd8]; mov rax, qword ptr [rax + 0x40]; jmp rax; 
0x000000000012cfef: nop; mov rax, qword ptr [rdi + 8]; mov rax, qword ptr [rax + 8]; jmp rax; 
0x000000000012d0df: nop; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000001276af: nop; mov rax, qword ptr [rdx]; bswap eax; mov dword ptr [rcx + 0x54], eax; mov eax, 1; ret; 
0x0000000000135d4f: nop; mov rax, qword ptr [rip + 0x288109]; mov rax, qword ptr [rax + 0x108]; jmp rax; 
0x0000000000132daf: nop; mov rax, qword ptr [rip + 0x28b0b1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d8f: nop; mov rax, qword ptr [rip + 0x28b0d1]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132d3f: nop; mov rax, qword ptr [rip + 0x28b121]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000012ac1f: nop; mov rax, qword ptr [rip + 0x2933c1]; add rsp, 8; ret; 
0x000000000011c40f: nop; mov rax, qword ptr [rip + 0x2a1bd9]; mov rax, qword ptr fs:[rax]; ret; 
0x00000000000fb09f: nop; mov rax, qword ptr [rip + 0x2c2dc1]; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f827f: nop; mov rax, qword ptr [rip + 0x2c5be1]; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000eb0ef: nop; mov rax, qword ptr [rip + 0x2d2d71]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb09f: nop; mov rax, qword ptr [rip + 0x2d2dc1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000eb04f: nop; mov rax, qword ptr [rip + 0x2d2e11]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003783f: nop; mov rax, qword ptr [rip + 0x386621]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000003781f: nop; mov rax, qword ptr [rip + 0x386641]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000002cd5f: nop; mov rax, qword ptr [rip + 0x391059]; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax]; mov eax, dword ptr [rax + 0xa8]; ret; 
0x000000000002f88f: nop; mov rax, qword ptr [rip + 0x394779]; lea rdi, qword ptr [rip + 0x390262]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003c8cf: nop; mov rax, rdi; cqo; idiv rsi; ret; 
0x00000000000496df: nop; mov rax, rsi; pop rbx; ret; 
0x000000000007c58f: nop; mov rcx, qword ptr [rdi]; mov qword ptr [rdx], rcx; ret; 
0x000000000009ce7f: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000009ceaf: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000009cebf: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000009e45f: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009f28f: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000010766a: nop; mov rdx, r14; call rax; 
0x00000000000967cf: nop; mov word ptr [rdi], r9w; add rdi, 2; mov rax, rdi; ret; 
0x00000000000e44bf: nop; mov word ptr [rdi], si; xor al, al; ret; 
0x00000000001879c4: nop; movabs byte ptr [0xa170fffca200fffc], al; cld; call rax; 
0x00000000001877c0: nop; movabs dword ptr [0xa270fffca300fffc], eax; cld; jmp rax; 
0x00000000000363ff: nop; movd eax, xmm0; and eax, 0x7fffffff; sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x000000000009dbbf: nop; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000009cf1f: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x000000000009cecf: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000001877b8: nop; movsb byte ptr [rdi], byte ptr [rsi]; cld; call qword ptr [rax]; 
0x00000000001877b0: nop; movsd dword ptr [rdi], dword ptr [rsi]; cld; call qword ptr [rax]; 
0x0000000000121a4f: nop; movsxd rax, dword ptr [rsi]; mov rsi, rsp; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x000000000010880f: nop; movsxd rdi, edi; mov eax, 0xe5; syscall; 
0x00000000001874e0: nop; movsxd rdi, esp; call qword ptr [rax]; 
0x000000000007a5cf: nop; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000e449f: nop; movzx eax, word ptr [rdi]; mov word ptr [rsi], ax; xor eax, eax; ret; 
0x00000000000e4366: nop; nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000036ca0: nop; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000036c9f: nop; nop; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000001868c0: nop; or bh, ah; jmp qword ptr [rax + 0xc]; 
0x0000000000186820: nop; or edi, esp; inc dword ptr [rax - 0x7f0003f3]; paddb mm7, mm7; adc byte ptr [rcx], 0xfc; call qword ptr [rax]; 
0x000000000018683c: nop; or esp, edi; push qword ptr [rax + 0xb]; cld; call qword ptr [rax + 0xd]; 
0x0000000000186648: nop; out 0xfb, eax; call qword ptr [rax + 0x20fffbe9]; fdiv st(3), st(0); jmp rax; 
0x000000000019c231: nop; out dx, al; jmp qword ptr [rbp + 2]; 
0x0000000000198570: nop; out dx, eax; in eax, dx; jmp qword ptr [rcx]; 
0x000000000018753c: nop; outsb dx, byte ptr [rsi]; cld; call qword ptr [rax]; 
0x00000000001a5060: nop; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rcx]; 
0x0000000000187500: nop; outsd dx, dword ptr [rsi]; cld; call qword ptr [rax]; 
0x000000000003666f: nop; pmovmskb eax, xmm0; and eax, 8; ret; 
0x000000000016552f: nop; pop rbx; pop rbp; pop r12; ret; 
0x00000000000cb70f: nop; pop rbx; pop rbp; ret; 
0x00000000000865ff: nop; pop rbx; ret; 
0x00000000001862f0: nop; pop rcx; sti; push qword ptr [rax + 0x5b]; sti; call qword ptr [rax + 0x5d]; 
0x0000000000187514: nop; pop rdi; cld; call qword ptr [rax]; 
0x00000000000218f0: nop; push rax; or byte ptr [rax], al; add bl, ch; or ecx, dword ptr [rax - 1]; ret 0x9539; 
0x0000000000186f8c: nop; push rbp; cld; jmp qword ptr [rax]; 
0x000000000010abbf: nop; push rbp; xor eax, eax; mov rbp, rsp; pop rbp; ret; 
0x0000000000177eb4: nop; push rsi; out dx, eax; call qword ptr [rax + 0x56]; 
0x0000000000177f08: nop; push rsi; out dx, eax; call qword ptr [rax]; 
0x0000000000177f74: nop; push rsi; out dx, eax; call rax; 
0x0000000000177ebc: nop; push rsi; out dx, eax; jmp qword ptr [rax + 0x56]; 
0x000000000001b038: nop; ret 0x3b; 
0x0000000000002f66: nop; ret 0x5bdb; 
0x000000000001b338: nop; ret; 
0x000000000002fa67: nop; rol byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x38e365; mov qword ptr [rax], rdx; ret; 
0x00000000001aa8a0: nop; salc; cmc; jmp qword ptr [rsi]; 
0x0000000000189bd8: nop; shr bh, cl; call rsp; 
0x00000000001336fc: nop; shr dword ptr [rax], 0; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x000000000018f170: nop; shr ecx, cl; call qword ptr [rcx + 5]; 
0x0000000000186938: nop; stc; sti; jmp rax; 
0x00000000001ac480: nop; std; cmc; call qword ptr [rax]; 
0x0000000000186274: nop; sti; inc dword ptr [rax + 0x70fffb27]; sub bl, bh; jmp qword ptr [rax + 0x29]; 
0x00000000000fafb3: nop; sub al, 0; add byte ptr [rbp + 0x10], dh; mov eax, 0x130; syscall; 
0x000000000007c5cf: nop; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000001aa260: nop; xchg eax, esi; cmc; jmp qword ptr [rdi + 3]; 
0x00000000001a7d70: nop; xor ch, dh; jmp qword ptr [rcx]; 
0x00000000001869e4: nop; xor eax, 0x3790fffc; cld; call qword ptr [rax + 0x20fffc39]; sub al, 0xfc; jmp rax; 
0x0000000000070b6f: nop; xor eax, eax; ret; 
0x00000000001b5c2c: nop; xor esi, edi; jmp qword ptr [rdx]; 
0x000000000008be3f: nop; xor rax, rax; ret; 
0x000000000012e8b1: not eax; add rsp, 8; shr eax, 0x1f; ret; 
0x0000000000036010: not eax; and eax, ecx; ret; 
0x00000000000366bf: not eax; and eax, edx; ret; 
0x00000000000375f3: not eax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x00000000000d1c3e: not eax; pop rbx; and eax, 2; pop rbp; ret; 
0x0000000000149395: not ebp; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000036478: not edx; and edx, eax; movd xmm1, edx; movss dword ptr [rdi], xmm1; subss xmm0, xmm1; ret; 
0x0000000000036111: not edx; and rdx, rax; movq xmm1, rdx; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x00000000000375f2: not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000036110: not rdx; and rdx, rax; movq xmm1, rdx; movsd qword ptr [rdi], xmm1; subsd xmm0, xmm1; ret; 
0x00000000001868dd: or ah, bh; call qword ptr [rax + 0xa]; 
0x00000000001868dd: or ah, bh; call qword ptr [rax + 0xa]; cld; jmp qword ptr [rax]; 
0x000000000018689d: or ah, bh; call rax; 
0x00000000001868fd: or ah, bh; inc dword ptr [rax]; or bh, ah; call rax; 
0x00000000001867d9: or ah, bh; jmp rax; 
0x00000000000364a6: or ah, byte ptr [rip - 0x80000000]; movd xmm0, eax; ret; 
0x00000000000f0a5c: or ah, dl; sub al, 0; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000243a3: or al, 0; add byte ptr [rax - 0x73], cl; cmp eax, 0x39b6c3; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001381e7: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013bdf9: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000138215: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000f10fa: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000125f96: or al, 0; add byte ptr [rax], al; mov esi, 8; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x00000000000f10c1: or al, 0; add byte ptr [rax], al; mov rsi, rdi; mov eax, ecx; syscall; 
0x00000000000f82a2: or al, 0; add byte ptr [rax], al; ret; 
0x00000000000841da: or al, 0; add byte ptr [rax], al; xor eax, eax; add rsp, 0x18; ret; 
0x0000000000081162: or al, 0; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000081322: or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000004529: or al, 0; add byte ptr [rdx], ah; add byte ptr [rax + rax], cl; push rax; ret 0xb; 
0x000000000000a9c1: or al, 0; add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; ret 0xb; 
0x000000000016dbb5: or al, 0; add byte ptr [rsi - 0x46fffff4], dh; or al, 0; add byte ptr [rsp + rcx + 0xcbf0000], bh; add byte ptr [rax], al; ret 0xc; 
0x000000000016dbbd: or al, 0; add byte ptr [rsp + rcx + 0xcbf0000], bh; add byte ptr [rax], al; ret 0xc; 
0x000000000000044f: or al, 0; add eax, 0xc1c107c; ret 0x4412; 
0x000000000008c44a: or al, 0; lea rdx, qword ptr [rip + 0xbb71d]; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000b13fe: or al, 0; mov edx, 0x1f; call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0xa4; syscall; 
0x000000000002eb9a: or al, 0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x00000000000b5306: or al, 0; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000b4c66: or al, 0; movzx edx, dl; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000b827d: or al, 0; movzx edx, sil; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000022024: or al, 0; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x000000000000fa1e: or al, 0; push rax; call qword ptr [rax]; 
0x000000000000a1e6: or al, 0; push rax; ret 0x10; 
0x000000000000452e: or al, 0; push rax; ret 0xb; 
0x00000000000066be: or al, 0; push rax; ret 7; 
0x000000000000c29e: or al, 0; rcl ch, 1; adc al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000088429: or al, 0; ret; 
0x0000000000008956: or al, 0; rol byte ptr [rbp + 8], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x000000000000ecce: or al, 0; ror dl, 1; adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 3; 
0x00000000000883b6: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000fa4fa: or al, 0x30; ror byte ptr [rcx], 0xf8; ret; 
0x00000000000a2ac2: or al, 0x3b; or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x0000000000108278: or al, 0x41; pop rsp; ret; 
0x000000000003cada: or al, 0x48; add esp, 0x18; ret; 
0x00000000000c0b67: or al, 0x48; add esp, 0x28; ret; 
0x0000000000135f19: or al, 0x48; add esp, 0x48; ret; 
0x0000000000036623: or al, 0x48; add esp, 8; ret; 
0x0000000000073649: or al, 0x48; lea edx, dword ptr [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x00000000001176e7: or al, 0x48; mov dword ptr [rsi], edi; ret; 
0x00000000000700d6: or al, 0x48; mov eax, dword ptr [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000129466: or al, 0x48; mov eax, dword ptr [rbx]; mov rdi, qword ptr [rax]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000006e42b: or al, 0x48; mov edi, dword ptr [rdi + 0xe0]; jmp rax; 
0x0000000000108966: or al, 0x48; mov edi, ebx; mov eax, 0xe6; mov r10, rcx; syscall; 
0x00000000000fc802: or al, 0x48; mov edx, dword ptr [rip + 0x2c51c6]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000c0a4b: or al, 0x48; mov esi, dword ptr [rsp]; mov eax, ecx; movsxd rdi, dword ptr [rsp + 8]; syscall; 
0x00000000001618c0: or al, 0x4c; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000c0b4a: or al, 0x4c; movsxd rdx, ecx; syscall; 
0x00000000000b04ca: or al, 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000003d35c: or al, 0x66; mov dword ptr [rsi + 0xc], eax; mov eax, 1; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x00000000001a4cb4: or al, 0x6b; add dword ptr [rax], eax; test al, 0x65; hlt; jmp qword ptr [rcx]; 
0x00000000001ac8dc: or al, 0x72; cmc; jmp qword ptr [rdx]; 
0x000000000008b9b0: or al, 0x74; or ecx, dword ptr [rdx + 0xc38034a]; or al, 0x75; fisttp qword ptr [rax - 1]; ret 0xff48; 
0x000000000008b9b8: or al, 0x75; fisttp qword ptr [rax - 1]; ret 0xff48; 
0x000000000006ca8a: or al, 0x7e; ret; 
0x00000000000004b3: or al, 0x80; push rbx; add al, 4; ret 0x6080; 
0x000000000009d50c: or al, 0x83; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a1895: or al, 0x83; rol byte ptr [rcx], 0x83; ret 0x4101; 
0x0000000000050261: or al, 0x85; sal byte ptr [rbp + 5], 0xf6; ret 0x7450; 
0x0000000000096862: or al, 0x88; add rax, r9; jmp rax; 
0x0000000000091aef: or al, 0x88; add rax, rcx; jmp rax; 
0x00000000000fbb67: or al, 0x89; fmul dword ptr [rbx - 0x2f]; syscall; 
0x000000000005fe70: or al, 0x89; ret 0xeac0; 
0x00000000000decd4: or al, 0x8a; add rdx, rcx; jmp rdx; 
0x000000000008eec4: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000006d182: or al, 0x8e; add rsi, rcx; jmp rsi; 
0x000000000015fc7f: or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000009cc9b: or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000001a7db4: or al, 0x9c; add dword ptr [rax], eax; or byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000000d43b0: or al, 0xa8; add rax, rcx; jmp rax; 
0x0000000000127f08: or al, 0xb0; add rax, rcx; jmp rax; 
0x000000000012ef37: or al, 0xb0; shr rdx, 3; add rax, rcx; jmp rax; 
0x000000000003d360: or al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov word ptr [rsi + 0xe], ax; xor eax, eax; ret; 
0x0000000000127f1e: or al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000009cc9f: or al, 0xb; jmp rcx; 
0x00000000000f0a1e: or al, 0xbe; adc byte ptr [rax + rax], dl; call 0xf11e0; add rsp, 0x18; ret; 
0x0000000000136b90: or al, 0xbf; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0x3e; syscall; 
0x00000000001aa8b4: or al, 0xc7; add dword ptr [rax], eax; test al, 0xd6; cmc; jmp qword ptr [rsi]; 
0x0000000000135f10: or al, 0xe8; ficom dword ptr [rbp + 0x448bffee]; and al, 0xc; add rsp, 0x48; ret; 
0x000000000018fc65: or al, 0xea; jmp qword ptr [rdx]; 
0x000000000006fff2: or al, 0xeb; movabs dword ptr [0xde69058b48001f0f], eax; xor al, 0; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000012d6ed: or al, 0xeb; xor eax, 0x8478b48; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x0000000000147d80: or al, 0xec; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ccc3: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000006cd86: or al, 0xf6; ret 0x7404; 
0x000000000006d4c3: or al, 0xf6; ret 0xf04; 
0x00000000001b1d79: or al, 0xf7; call qword ptr [rbx]; 
0x00000000001b1d09: or al, 0xf7; call qword ptr [rsi]; 
0x00000000001b1de9: or al, 0xf7; jmp qword ptr [rcx]; 
0x00000000000a2ac5: or al, 0xf; test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x000000000015e857: or al, 0xf; test dword ptr [rdx + 2], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000009d793: or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x000000000013536c: or al, 0xf; xchg eax, esp; ror byte ptr [rcx], 0xc6; movsxd rdi, r12d; mov eax, 3; syscall; 
0x00000000001868c5: or al, 0xfc; jmp qword ptr [rax + 0xe]; 
0x00000000001868e5: or al, 0xfc; jmp qword ptr [rax]; 
0x0000000000186885: or al, 0xfc; jmp rax; 
0x000000000019edcd: or al, 1; add al, ah; mov bl, 0xf0; call qword ptr [rdi + 2]; 
0x0000000000189465: or al, 1; add bl, dl; std; out dx, al; jmp rsp; 
0x00000000000e4d22: or al, 1; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x0000000000000884: or al, 1; add byte ptr [rax], al; ret 0x440c; 
0x00000000000eb3f3: or al, 1; add byte ptr [rax], al; syscall; 
0x00000000000e4e12: or al, 1; add byte ptr [rax], al; xor al, al; ret; 
0x0000000000145b56: or al, 4; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000009d9d0: or al, 5; add byte ptr [rax], al; ret; 
0x00000000000fbbf2: or al, 6; xor eax, eax; cmp rdx, rcx; cmovae rax, rsi; ret; 
0x00000000001946d1: or al, 7; or byte ptr [rbx + rcx + 2], al; ret; 
0x00000000001aa532: or al, 7; or byte ptr [rdi + 0xb], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; xchg eax, esp; ret; 
0x00000000001946ca: or al, 7; or byte ptr [rsi + 0xb], al; pop rsp; or cl, byte ptr [rdi + rax]; or byte ptr [rbx + rcx + 2], al; ret; 
0x00000000001aeab4: or al, 9; add al, byte ptr [rax]; cmp byte ptr [rdx - 0xa], bl; call qword ptr [rdi]; 
0x00000000001a6ae8: or al, ah; hlt; jmp rsp; 
0x000000000018c381: or al, bh; jmp rsp; 
0x0000000000145d44: or al, byte ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000570f2: or al, byte ptr [rax]; add al, ch; mov di, bp; jmp qword ptr [rsi + 0xf]; 
0x0000000000123287: or al, byte ptr [rax]; add al, ch; push rcx; ret 0xffef; 
0x00000000000825e6: or al, byte ptr [rax]; add al, ch; xchg eax, edx; mov al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000002458b: or al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; cmp eax, 0x39b4db; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001373bd: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000139fd1: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001373e1: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000000cc68: or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000000b44a: or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000120d82: or al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000f48d1: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000039ea5: or al, byte ptr [rax]; add byte ptr [rax], al; xor esi, esi; call 0x3d3e0; add rsp, 8; ret; 
0x00000000000f5bba: or al, byte ptr [rax]; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xef; call rbx; 
0x00000000000d4459: or al, byte ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x00000000000d43a8: or al, byte ptr [rax]; movzx r13d, r13b; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x00000000000cd1af: or al, byte ptr [rbp + 0x31]; rol byte ptr [rbx + 0xf4104f8], cl; xchg eax, esp; ret 0x8b48; 
0x00000000000a3552: or al, byte ptr [rbp - 0xc0e8a37]; ret; 
0x0000000000113ae1: or al, byte ptr [rbx - 0x7bf00007]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x00000000000dca04: or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x4101; 
0x00000000000dcd1c: or al, byte ptr [rbx - 0x7cb7fe40]; ret 0x8001; 
0x00000000000f9752: or al, byte ptr [rbx]; add byte ptr [rax], al; lea rax, qword ptr [rip + 0x2c8093]; add rsp, 8; ret; 
0x0000000000108ebc: or al, byte ptr [rcx - 0x3a]; add dword ptr [r8], eax; mov rax, rdi; pop rbx; ret; 
0x00000000000c6f59: or al, byte ptr [rcx - 0x7d]; jmp qword ptr [rcx]; 
0x00000000000c8828: or al, byte ptr [rcx - 0x80]; jmp qword ptr [rcx]; 
0x00000000000ece94: or al, byte ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000000004b1: or al, byte ptr [rcx]; or al, 0x80; push rbx; add al, 4; ret 0x6080; 
0x000000000013f3a7: or al, byte ptr es:[rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000003d09f: or al, ch; add qword ptr [r8], rax; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x00000000000f4acf: or al, ch; cmp eax, dword ptr [rcx]; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000fb39c: or al, ch; dec ah; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0x2f; syscall; 
0x00000000000f131f: or al, ch; fld xword ptr [rbp + 1]; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x00000000000eb6bc: or al, ch; fmulp st(1); add dword ptr [rax], eax; mov qword ptr [rsp], rax; mov eax, 0; syscall; 
0x000000000003d0ef: or al, ch; imul eax, dword ptr [rcx], 0; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x18; ret; 
0x00000000000fb16c: or al, ch; iretd; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov eax, 0x2a; syscall; 
0x00000000000f127f: or al, ch; jnp 0xf12f1; add dword ptr [rax], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000008b85b: or al, ch; lahf; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x00000000000fbcdf: or al, ch; mov ebx, 0x480000c3; mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000f04df: or al, ch; mov ebx, 0x4800017b; mov dword ptr [rsp], eax; mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000fb0dc: or al, ch; mov esi, 0x480000cf; mov dword ptr [rsp], eax; mov eax, 0x2b; syscall; 
0x00000000000f2628: or al, ch; movabs byte ptr [0x1b8fff7b2], al; add rsp, 8; ret; 
0x00000000001651a6: or al, ch; movabs dword ptr [0x48ef72eb3948ffeb], eax; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000035b54: or al, ch; push rsi; add eax, 0x1c8d4c00; sbb byte ptr [rax - 0x77], cl; ret 0x394d; 
0x000000000002c3d8: or al, ch; ret 0x5ab; 
0x00000000000f9a88: or al, ch; ret 0xf3c5; 
0x00000000000ab728: or al, ch; ret 0xf8cd; 
0x00000000001231a7: or al, ch; ret; 
0x000000000003d11a: or al, ch; rol byte ptr [rcx], 0; add byte ptr [rax - 0x73], cl; add eax, 0x386c6f; add rsp, 8; ret; 
0x00000000000ebf6c: or al, ch; rol dword ptr cs:[rcx], 0; mov qword ptr [rsp], rax; mov eax, 0x55; syscall; 
0x000000000010bde4: or al, ch; xchg eax, esi; fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x0000000000186901: or bh, ah; call rax; 
0x00000000001868c1: or bh, ah; jmp qword ptr [rax + 0xc]; 
0x00000000001868e1: or bh, ah; jmp qword ptr [rax]; 
0x000000000011fd85: or bh, al; and al, 0x1c; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000012e0c4: or bh, bh; push rax; add rsp, 0x10; pop rbx; ret; 
0x00000000001a69c8: or bh, bl; hlt; jmp qword ptr [rcx]; 
0x00000000000732dd: or bh, byte ptr [rax - 1]; ret; 
0x00000000000a0906: or bh, byte ptr [rdi + 0xd]; add byte ptr [rbx + 0x63], cl; or al, 0x83; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000f3c7f: or bh, dh; ret 0xfc07; 
0x00000000001aa998: or bh, dl; cmc; call qword ptr [rsi]; 
0x00000000001aa948: or bh, dl; cmc; jmp qword ptr [rdi]; 
0x00000000001aa918: or bh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000000d207f: or bl, byte ptr [rbp + 0x75]; mov ch, 0x83; ret 0x8901; 
0x00000000000bc7d5: or bl, byte ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000007b47d: or bl, byte ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000164b02: or bl, byte ptr [rdi]; stc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000032052: or bl, ch; cmp byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011c7fc: or bl, ch; ret 0x4890; 
0x000000000004e745: or bl, ch; ret 0x8348; 
0x000000000014ce83: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x000000000002f96f: or bl, dh; ret; 
0x000000000018fc1c: or bpl, r10b; jmp qword ptr [rdx]; 
0x00000000000d0b48: or byte ptr [r10], r11b; mov eax, 2; ret; 
0x00000000000d0ac1: or byte ptr [r10], r8b; xor eax, eax; ret; 
0x00000000000c622b: or byte ptr [r11 + 0x5d], bl; ret; 
0x0000000000035718: or byte ptr [r11 + r9*4 + 0x57], r9b; sbb byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x0000000000121022: or byte ptr [r11 - 0x3d7cfc40], r8b; add eax, dword ptr [rbx - 0x1d7c0320]; cld; lea esi, dword ptr [rax + rdx + 0x28]; call qword ptr [rcx + 0x30]; 
0x0000000000083df4: or byte ptr [r13 - 0x77], r9b; ret; 
0x0000000000120ee2: or byte ptr [r14 + 0x20], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000099b16: or byte ptr [r14 + 0xf], spl; adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c820: or byte ptr [r14 + 0xf], spl; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x000000000009c901: or byte ptr [r14 + 0xf], spl; adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x0000000000120fa3: or byte ptr [r14 + 8], r15b; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000099c2f: or byte ptr [r14 - 0x77], spl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000d0ab7: or byte ptr [r14], r10b; mov eax, 1; ret; 
0x00000000000d0b7e: or byte ptr [r14], r11b; mov eax, 2; ret; 
0x00000000001312fc: or byte ptr [r15], 0x94; ret 0xea83; 
0x000000000007a5c3: or byte ptr [r15], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000b0abd: or byte ptr [r8 + 0x29], cl; ret; 
0x0000000000073642: or byte ptr [r8 + 0x3b], r9b; adc byte ptr [r11 + 0xc], r14b; lea rdx, qword ptr [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000000035c35: or byte ptr [r8 + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8d4c; 
0x000000000012bb46: or byte ptr [r8 + 1], dil; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d0b91: or byte ptr [r8 + r15*4], r11b; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000012d0a0: or byte ptr [r8 - 0x3f], r9b; cli; and byte ptr [rax - 0x77], cl; adc al, 0x24; call qword ptr [rax + 8]; 
0x000000000004e73c: or byte ptr [r8 - 0x73], r9b; push rax; or byte ptr [rcx - 0x77], cl; push rdi; or bl, ch; ret 0x8348; 
0x000000000004cda1: or byte ptr [r8 - 0x73], r9b; push rax; or byte ptr [rcx - 0x77], cl; push rdi; or cl, ch; jmp rcx; 
0x000000000012941e: or byte ptr [r8 - 0x73], r9b; push rsp; and al, 0x10; mov esi, 6; call qword ptr [rax + 0x28]; 
0x000000000012949c: or byte ptr [r8 - 0x73], r9b; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x000000000003c172: or byte ptr [r8 - 0x75], cl; jno 0x3c188; mov edi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003c192: or byte ptr [r8 - 0x75], cl; jns 0x3c1a8; mov esi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000038f70: or byte ptr [r8 - 0x75], r9b; adc cl, byte ptr [rax + 1]; ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x0000000000099c0e: or byte ptr [r8 - 0x76b7f7be], cl; clc; ret; 
0x0000000000067505: or byte ptr [r8 - 0x77], 0x55; mov byte ptr [rdi], cl; xchg dword ptr [rax - 0x76fffff5], ebp; ret 0x348; 
0x000000000006747e: or byte ptr [r8 - 0x77], 0x55; mov byte ptr [rdi], cl; xchg dword ptr [rbp - 0x76ffffe9], edx; ret 0x348; 
0x000000000006792d: or byte ptr [r8 - 0x77], 0x55; mov byte ptr [rdi], cl; xchg dword ptr [rbp - 0x76fffffd], ebp; ret 0x348; 
0x0000000000067577: or byte ptr [r8 - 0x77], 0x55; mov byte ptr [rdi], cl; xchg dword ptr [rdi - 0x76fffff6], esp; ret 0x348; 
0x000000000006784c: or byte ptr [r8 - 0x77], 0x55; mov byte ptr [rdi], cl; xchg dword ptr [rip - 0x76fffffd], ecx; ret 0x348; 
0x0000000000120272: or byte ptr [r8 - 0x77], cl; fisttp word ptr [rax - 0x39]; add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x0000000000101f11: or byte ptr [r8 - 0x77], cl; imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000001584d8: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000121b12: or byte ptr [r8 - 0x77], cl; out 0x48, al; mov edi, ebx; call qword ptr [rax]; 
0x0000000000123b09: or byte ptr [r8 - 0x77], cl; push rcx; adc byte ptr [rax + 1], bh; ret; 
0x000000000007b09c: or byte ptr [r8 - 0x77], cl; xor byte ptr [r8 - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000012d472: or byte ptr [r8 - 0x77], r9b; adc al, 0x24; mov rsi, rsp; call qword ptr [rax + 8]; 
0x000000000012b30a: or byte ptr [r8 - 0x77], r9b; fimul word ptr [rcx + rcx*4 - 1]; call qword ptr [rax]; 
0x000000000012db3a: or byte ptr [r8 - 0x77], r9b; out 0x48, al; mov edi, ebp; call qword ptr [rax]; 
0x000000000011fffe: or byte ptr [r8 - 0x77], r9b; out dx, eax; call qword ptr [rax + 0x20]; 
0x00000000000cbe35: or byte ptr [r8 - 0x77], r9b; ret 0x8948; 
0x000000000003c0f2: or byte ptr [r8 - 0x77], r9b; ret 0xc148; 
0x000000000008169f: or byte ptr [r8 - 0x7d], cl; sub r9, qword ptr [rax]; add ebx, ebp; ret; 
0x000000000013f582: or byte ptr [r8], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000008959: or byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x00000000001202c2: or byte ptr [r9 + r13 - 0x16], cl; mov esi, r12d; mov rdi, rbx; mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x000000000012d9d2: or byte ptr [r9 + r9*4 + 0x44], r9b; and al, 8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x00000000001202ea: or byte ptr [r9 + r9*4 - 0xa], al; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000011fced: or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x20]; 
0x000000000012b4e6: or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x28]; 
0x000000000012b452: or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 8]; 
0x000000000012aa47: or byte ptr [r9 + r9*4 - 1], r9b; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000012b52d: or byte ptr [r9 + r9*4 - 1], r9b; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000012a7f1: or byte ptr [r9 + rcx*4 + 0x3c], r9b; and al, 0x48; mov dword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x000000000011fef1: or byte ptr [r9 + rcx*4 - 0x11], r9b; call qword ptr [rax + 0x20]; 
0x000000000012a857: or byte ptr [r9 + rcx*4 - 0x11], r9b; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x00000000000e3451: or byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rax + 0x63], cl; ret; 
0x0000000000099c6e: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x00000000000f139e: or byte ptr [r9 - 0x77], cl; ror byte ptr [rcx + 0x29], cl; fimul dword ptr [rcx + 0x39]; ret 0x820f; 
0x0000000000130753: or byte ptr [r9], dil; ret 0x850f; 
0x00000000000d0b21: or byte ptr [r9], r11b; mov eax, 1; ret; 
0x00000000001176dd: or byte ptr [r9], r13b; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x76b7f3a9], 0x3e; ret; 
0x00000000000d0b0d: or byte ptr [r9], r8b; mov byte ptr [rdi], 0x5b; mov eax, 1; ret; 
0x00000000000d0b66: or byte ptr [r9], r8b; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000d0ae1: or byte ptr [r9], r8b; mov eax, 1; ret; 
0x000000000011f3e3: or byte ptr [rax + 0x10], bh; pop rbx; pop rbp; ret; 
0x00000000000f1268: or byte ptr [rax + 0x13], bh; syscall; 
0x00000000000f1308: or byte ptr [rax + 0x14], bh; syscall; 
0x0000000000036149: or byte ptr [rax + 0x21], 0xd0; movq xmm1, rax; movsd qword ptr [rdi], xmm1; ret; 
0x000000000007decc: or byte ptr [rax + 0x21], cl; xlatb; neg rdi; call qword ptr [rax]; 
0x00000000000b0abe: or byte ptr [rax + 0x29], cl; ret; 
0x00000000000fa339: or byte ptr [rax + 0x38], bh; syscall; 
0x0000000000030622: or byte ptr [rax + 0x39], cl; fbstp dword ptr [rbp + rax - 0x18]; ret; 
0x000000000008314b: or byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000008ae69: or byte ptr [rax + 0x39], cl; ret; 
0x0000000000073643: or byte ptr [rax + 0x3b], cl; adc byte ptr [r11 + 0xc], r14b; lea rdx, qword ptr [rax + 1]; mov qword ptr [rdi + 8], rdx; movzx eax, byte ptr [rax]; ret; 
0x0000000000000542: or byte ptr [rax + 0x60000201], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x2800; 
0x00000000000da1a3: or byte ptr [rax + 0x63], cl; ret 0xc148; 
0x0000000000036faa: or byte ptr [rax + 0x82], bh; syscall; 
0x000000000010c453: or byte ptr [rax + 0xca], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000035c36: or byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8d4c; 
0x000000000003606b: or byte ptr [rax + 1], 0xd0; shr rax, 0x3f; ret; 
0x000000000012bb47: or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000101c6c: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x0000000000123b26: or byte ptr [rax + 1], bh; ret; 
0x0000000000032933: or byte ptr [rax + 1], cl; ret; 
0x00000000000f83b5: or byte ptr [rax + 3], bh; pop rbx; pop rbp; ret; 
0x000000000010ac53: or byte ptr [rax + 5], bh; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000010607b: or byte ptr [rax + 7], bh; pop rbx; pop rbp; ret; 
0x0000000000145f46: or byte ptr [rax + rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001ad6d7: or byte ptr [rax + rax], bl; add byte ptr [rax], al; xor al, 0xf5; add dword ptr [rax], eax; sbb byte ptr [rcx], 0xf6; call rdi; 
0x00000000001b0e87: or byte ptr [rax + rax], dh; add byte ptr [rax], al; in al, 0x2c; add al, byte ptr [rax]; sbb dh, 0xf6; jmp qword ptr [rcx]; 
0x00000000001a87c7: or byte ptr [rax + rax], dl; add byte ptr [rax], al; and al, 0xa6; add dword ptr [rax], eax; and byte ptr [rdi - 0xb], dl; call qword ptr [rdx]; 
0x00000000001a8fcf: or byte ptr [rax + rax], dl; add byte ptr [rax], al; sub al, 0xae; add dword ptr [rax], eax; sbb byte ptr [rbx - 0xb], ah; jmp qword ptr [rcx]; 
0x00000000000d0b92: or byte ptr [rax + rdi*4], bl; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000190d58: or byte ptr [rax - 0x16], dh; call qword ptr [rdx + 1]; 
0x000000000011fee0: or byte ptr [rax - 0x39], cl; and al, 0x48; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r13; call qword ptr [rax]; 
0x00000000000b031d: or byte ptr [rax - 0x3f], 0xe0; add cl, byte ptr [rax + 0x29]; ret 0x8948; 
0x00000000000fa4d6: or byte ptr [rax - 0x3f], cl; call 0xfffffffffff725fe; sldt word ptr [rax]; and eax, 0xfffff000; or eax, edi; ret; 
0x000000000012d0a1: or byte ptr [rax - 0x3f], cl; cli; and byte ptr [rax - 0x77], cl; adc al, 0x24; call qword ptr [rax + 8]; 
0x00000000000fa51d: or byte ptr [rax - 0x3f], cl; out 0x20, eax; or eax, edx; or rax, rsi; or rax, rdi; ret; 
0x000000000017a090: or byte ptr [rax - 0x580a000b], ch; cmc; jmp rcx; 
0x00000000000c6328: or byte ptr [rax - 0x73], cl; add bl, byte ptr [r11 + 0x5d]; ret; 
0x000000000008be69: or byte ptr [rax - 0x73], cl; add eax, 0x1f; ret; 
0x0000000000091640: or byte ptr [rax - 0x73], cl; add eax, 0x6878; ret; 
0x00000000000a37cd: or byte ptr [rax - 0x73], cl; add eax, 0xbdacb; ret; 
0x00000000000a37b9: or byte ptr [rax - 0x73], cl; add eax, 0xc84f; ret; 
0x000000000008be7d: or byte ptr [rax - 0x73], cl; add eax, 0xd3ddb; ret; 
0x00000000000a2c09: or byte ptr [rax - 0x73], cl; add eax, 0xd48f; ret; 
0x00000000000c6228: or byte ptr [rax - 0x73], cl; or byte ptr [r11 + 0x5d], bl; ret; 
0x000000000004e73d: or byte ptr [rax - 0x73], cl; push rax; or byte ptr [rcx - 0x77], cl; push rdi; or bl, ch; ret 0x8348; 
0x000000000004cda2: or byte ptr [rax - 0x73], cl; push rax; or byte ptr [rcx - 0x77], cl; push rdi; or cl, ch; jmp rcx; 
0x000000000012941f: or byte ptr [rax - 0x73], cl; push rsp; and al, 0x10; mov esi, 6; call qword ptr [rax + 0x28]; 
0x000000000012949d: or byte ptr [rax - 0x73], cl; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x0000000000038f71: or byte ptr [rax - 0x75], cl; adc cl, byte ptr [rax + 1]; ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x00000000000fd481: or byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x00000000000fd4e2: or byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x40; ret; 
0x0000000000108843: or byte ptr [rax - 0x75], cl; add eax, 0x2b55cd; mov rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc4d4: or byte ptr [rax - 0x75], cl; add eax, 0x307b2c; lea rdi, qword ptr [rip + 0x30361d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000082633: or byte ptr [rax - 0x75], cl; add eax, 0x33b99d; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x33b88b]; mov qword ptr [rax], rdi; ret; 
0x000000000002f7a4: or byte ptr [rax - 0x75], cl; add eax, 0x39485c; lea rdi, qword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f5448: or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000002216f: or byte ptr [rax - 0x75], cl; and al, 0x10; mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x000000000002762a: or byte ptr [rax - 0x75], cl; and al, 0x50; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a55a: or byte ptr [rax - 0x75], cl; and al, 0x50; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000027936: or byte ptr [rax - 0x75], cl; and al, 0x50; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002873e: or byte ptr [rax - 0x75], cl; and al, 0x58; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000002813d: or byte ptr [rax - 0x75], cl; and al, 0x78; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x00000000001034e5: or byte ptr [rax - 0x75], cl; cmp byte ptr [r8 - 0x75], cl; push rbx; and byte ptr [rax + 0x2b], cl; xor r9b, bpl; ret; 
0x00000000000f5321: or byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x77], cl; and al, 8; call rbx; 
0x0000000000075b1f: or byte ptr [rax - 0x75], cl; cmp byte ptr [rax - 0x77], cl; out dx, eax; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x000000000003c173: or byte ptr [rax - 0x75], cl; jno 0x3c188; mov edi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001276e3: or byte ptr [rax - 0x75], cl; jns 0x1276f8; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x000000000003c193: or byte ptr [rax - 0x75], cl; jns 0x3c1a8; mov esi, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006e489: or byte ptr [rax - 0x75], cl; mov edi, 0xe0; call rax; 
0x0000000000120d9d: or byte ptr [rax - 0x75], cl; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000121bcf: or byte ptr [rax - 0x75], cl; pop rdi; sbb byte ptr [rbx - 0x783a17c5], cl; std; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x0000000000127eb2: or byte ptr [rax - 0x75], cl; push rax; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000120d9c: or byte ptr [rax - 0x75], r9b; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000099c0f: or byte ptr [rax - 0x76b7f7be], cl; clc; ret; 
0x0000000000067506: or byte ptr [rax - 0x77], 0x55; mov byte ptr [rdi], cl; xchg dword ptr [rax - 0x76fffff5], ebp; ret 0x348; 
0x000000000006747f: or byte ptr [rax - 0x77], 0x55; mov byte ptr [rdi], cl; xchg dword ptr [rbp - 0x76ffffe9], edx; ret 0x348; 
0x000000000006792e: or byte ptr [rax - 0x77], 0x55; mov byte ptr [rdi], cl; xchg dword ptr [rbp - 0x76fffffd], ebp; ret 0x348; 
0x0000000000067578: or byte ptr [rax - 0x77], 0x55; mov byte ptr [rdi], cl; xchg dword ptr [rdi - 0x76fffff6], esp; ret 0x348; 
0x000000000006784d: or byte ptr [rax - 0x77], 0x55; mov byte ptr [rdi], cl; xchg dword ptr [rip - 0x76fffffd], ecx; ret 0x348; 
0x000000000012e780: or byte ptr [rax - 0x77], 0xd0; pop rbx; ret; 
0x00000000001072f2: or byte ptr [rax - 0x77], 0xda; call rax; 
0x000000000012d473: or byte ptr [rax - 0x77], cl; adc al, 0x24; mov rsi, rsp; call qword ptr [rax + 8]; 
0x0000000000074114: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x7412c; mov qword ptr [rax + 0x40], rcx; ret; 
0x00000000000f38cb: or byte ptr [rax - 0x77], cl; adc eax, 0x2cdd5d; add rsp, 8; ret; 
0x000000000013592f: or byte ptr [rax - 0x77], cl; and al, 0x10; lea rdi, qword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x0000000000127f76: or byte ptr [rax - 0x77], cl; and byte ptr [r8 - 0x77], r9b; push rdi; sub byte ptr [rax + 1], bh; ret; 
0x00000000001099af: or byte ptr [rax - 0x77], cl; call 0x5c51f712; pop r13; ret; 
0x0000000000109d73: or byte ptr [rax - 0x77], cl; call 0x5c51fad6; pop r13; ret; 
0x000000000010bbf3: or byte ptr [rax - 0x77], cl; call 0x5c521956; pop r13; ret; 
0x0000000000099b20: or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000010aaf8: or byte ptr [rax - 0x77], cl; clc; sar rax, 6; ret; 
0x00000000000e39e5: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000003407d: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x00000000000c4972: or byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + 3]; push rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000012b30b: or byte ptr [rax - 0x77], cl; fimul word ptr [rcx + rcx*4 - 1]; call qword ptr [rax]; 
0x0000000000134ff8: or byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov esi, ebp; pop rbp; jmp rax; 
0x000000000012ce6e: or byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x0000000000120273: or byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x39]; add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x0000000000101f12: or byte ptr [rax - 0x77], cl; imul ecx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000a0d75: or byte ptr [rax - 0x77], cl; jns 0xffffffffed3a15d5; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000d1f3b: or byte ptr [rax - 0x77], cl; jo 0xd1f60; xor eax, eax; ret; 
0x0000000000035c32: or byte ptr [rax - 0x77], cl; or byte ptr [r8 + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8d4c; 
0x0000000000123b06: or byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x77], cl; push rcx; adc byte ptr [rax + 1], bh; ret; 
0x00000000001584d9: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000012db3b: or byte ptr [rax - 0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rax]; 
0x0000000000121b13: or byte ptr [rax - 0x77], cl; out 0x48, al; mov edi, ebx; call qword ptr [rax]; 
0x0000000000126032: or byte ptr [rax - 0x77], cl; out 0x4c, al; mov edi, esp; call qword ptr [rax + 0x48]; 
0x000000000012601c: or byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x000000000011ffff: or byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x00000000000a0d36: or byte ptr [rax - 0x77], cl; pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000123b0a: or byte ptr [rax - 0x77], cl; push rcx; adc byte ptr [rax + 1], bh; ret; 
0x00000000000bcf01: or byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x000000000007e0ed: or byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000000cbe36: or byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000003c0f3: or byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000000d6520: or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x000000000003c6d8: or byte ptr [rax - 0x77], cl; ret; 
0x000000000007b09d: or byte ptr [rax - 0x77], cl; xor byte ptr [r8 - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x0000000000127f2e: or byte ptr [rax - 0x77], cl; xor byte ptr [r8 - 0x77], r9b; push rdi; cmp byte ptr [rax + 1], bh; ret; 
0x00000000000d1f3a: or byte ptr [rax - 0x77], r9b; jo 0xd1f60; xor eax, eax; ret; 
0x0000000000030443: or byte ptr [rax - 0x7b], cl; dec dword ptr [rdi]; test bl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7bf0ffc1], al; ret 0; 
0x000000000011c178: or byte ptr [rax - 0x7b], cl; push qword ptr [rbp - 0x16]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000f312f: or byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rax + 0x48], 0x89; adc bl, dh; ret; 
0x0000000000086b69: or byte ptr [rax - 0x7bf0ffc8], al; ret 0; 
0x000000000008138b: or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000000d15fc: or byte ptr [rax - 0x7d], cl; ret 0x3901; 
0x0000000000091ca6: or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000091d2e: or byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x00000000000326a2: or byte ptr [rax - 0x7d], cl; ret 0x4c08; 
0x00000000000eeace: or byte ptr [rax - 0x7d], cl; ret 0x8308; 
0x0000000000053743: or byte ptr [rax - 0x7d], cl; ret 0x8404; 
0x0000000000053812: or byte ptr [rax - 0x7d], cl; ret 0x8504; 
0x000000000002f72e: or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000816a0: or byte ptr [rax - 0x7d], cl; sub r9, qword ptr [rax]; add ebx, ebp; ret; 
0x00000000000218a9: or byte ptr [rax - 0x7f], cl; ret; 
0x000000000003bf21: or byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000076c43: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x000000000013761c: or byte ptr [rax], 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000135d59: or byte ptr [rax], 1; add byte ptr [rax], al; jmp rax; 
0x00000000001a822e: or byte ptr [rax], al; adc al, 0; add byte ptr [rax], al; mov word ptr [rax + 0x3ae80001], fs; cmc; jmp qword ptr [rcx]; 
0x00000000000218f2: or byte ptr [rax], al; add bl, ch; or ecx, dword ptr [rax - 1]; ret 0x9539; 
0x0000000000064656: or byte ptr [rax], al; add byte ptr [rax - 0x73], cl; or eax, 0x11337c; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000113af9: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; inc byte ptr [rbx + 0x394101c0]; ret 0xd975; 
0x000000000007d3bf: or byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000013761d: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a171: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000137641: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000000b148a: or byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; cli; ret 0x10; 
0x00000000000f3650: or byte ptr [rax], al; add byte ptr [rax], 0; mov eax, 1; add rsp, 8; ret; 
0x00000000000c0f8a: or byte ptr [rax], al; add byte ptr [rax], al; add al, ch; fdivr qword ptr [rax - 0x76b70005]; ret; 
0x000000000007bbcc: or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000001e208: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cdq; ret 0x17; 
0x000000000001e430: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rdx; ret; 
0x000000000001ac20: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17c5; 
0x000000000001bef8: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17c6; 
0x0000000000018760: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x17cf; 
0x000000000001a2a8: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xlatb; ret 0x17; 
0x000000000000895a: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x00000000001090c4: or byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x00000000000ed03e: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x10f; syscall; 
0x0000000000036f31: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x7f; syscall; 
0x0000000000036f6b: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x82; syscall; 
0x0000000000047106: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000036f9f: or byte ptr [rax], al; add byte ptr [rax], al; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x82; syscall; 
0x0000000000125f59: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000120fa6: or byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000fa641: or byte ptr [rax], al; add byte ptr [rax], al; mov rsi, rbp; mov rdi, rbx; mov eax, 0x11a; syscall; 
0x0000000000037c30: or byte ptr [rax], al; add byte ptr [rax], al; mov rsi, rbx; mov eax, 0x80; syscall; 
0x0000000000036ed2: or byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0xe; syscall; 
0x00000000000a1b73: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000120db2: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000fa3aa: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000037d90: or byte ptr [rax], al; add byte ptr [rax], al; xor edx, edx; mov rsi, rbx; mov eax, 0x80; syscall; 
0x0000000000113be0: or byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret; 
0x00000000001609c0: or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000000f7efd: or byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x0000000000049840: or byte ptr [rax], al; ret; 
0x0000000000003615: or byte ptr [rax], ch; push rdi; call qword ptr [rsi + 0x6f]; 
0x00000000000a0d3d: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000a0d7b: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000a0d1b: or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000ab24c: or byte ptr [rax], dl; add byte ptr [rax], al; add cl, ch; sti; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x000000000005d46b: or byte ptr [rax], dl; add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000013db7e: or byte ptr [rax], r8b; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000869e2: or byte ptr [rbp + 0x23], dh; mov rdi, r13; call qword ptr [rbx + 0x40]; 
0x00000000000c75ef: or byte ptr [rbp + 0x31], al; in al, 0xeb; ret; 
0x000000000012d0ac: or byte ptr [rbp + 0x480f75c0], al; add esp, 0x28; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000026919: or byte ptr [rbp + 0x4c880fc9], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x0000000000117ddd: or byte ptr [rbp + 0x5d5b2b04], cl; ret; 
0x000000000005e632: or byte ptr [rbp + 0x5d8e0fd2], al; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret 0x3948; 
0x000000000006ebd9: or byte ptr [rbp + 0x64e875c9], al; mov dword ptr [rax], 5; mov rax, rdx; pop rbx; ret; 
0x000000000007c5c2: or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000047337: or byte ptr [rbp + 1], cl; ror byte ptr [rbp - 0x75], 1; add byte ptr [rcx + rcx*4 + 0x47], cl; push -0x9617; jmp qword ptr [rsi + 0xf]; 
0x000000000012785a: or byte ptr [rbp + rcx*4 + 0x70], al; dec dword ptr [rax - 0x75]; jo 0x1278a8; mov dword ptr [rbx + 0x48], esi; bswap r14d; call qword ptr [rax + 0x18]; 
0x000000000012d47d: or byte ptr [rbp - 0x14438a40], al; ret 0x1f0f; 
0x0000000000086a9f: or byte ptr [rbp - 0x2a], dh; mov rdi, rsi; call qword ptr [rbx + 0x40]; 
0x00000000000a3699: or byte ptr [rbp - 0x75], al; sbb al, byte ptr [rcx - 0x75]; add dword ptr [rcx + 0x39], eax; ret; 
0x00000000000289f7: or byte ptr [rbp - 0x77], al; ret 0x8948; 
0x0000000000083df5: or byte ptr [rbp - 0x77], cl; ret; 
0x0000000000108469: or byte ptr [rbp - 0x7b], cl; sal byte ptr [rbp - 0x3f], 0xc9; ret; 
0x00000000000e4bb9: or byte ptr [rbp - 0x7cb7febe], cl; jns 0xe4bb9; add byte ptr [rsp + rax - 0x77], dh; ret 0xeeeb; 
0x00000000001ab5e4: or byte ptr [rbp - 0xb], bl; jmp qword ptr [rdx]; 
0x000000000010799c: or byte ptr [rbp - 0xf], dh; mov rax, qword ptr [rax + 0x30]; ret; 
0x000000000001af10: or byte ptr [rbx + 0x18], bl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], dh; ret 0x3b; 
0x00000000000e325d: or byte ptr [rbx + 0x38], 8; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000006de80: or byte ptr [rbx + 0x48010442], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x0000000000021f36: or byte ptr [rbx + 0x4814247c], cl; mov edx, dword ptr [rax]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000120b7b: or byte ptr [rbx + 0x48], bl; mov edi, ebp; xor eax, eax; pop rbp; jmp rdx; 
0x0000000000003c93: or byte ptr [rbx + 0x4e], ch; ret 0x6bba; 
0x0000000000121c1b: or byte ptr [rbx + 0x5d], bl; add eax, edx; ret; 
0x0000000000074492: or byte ptr [rbx + 0x5d], bl; jmp rax; 
0x0000000000072413: or byte ptr [rbx + 0x5d], bl; pop r12; mov eax, r13d; pop r13; ret; 
0x000000000007a425: or byte ptr [rbx + 0x5d], bl; pop r12; neg eax; pop r13; ret; 
0x000000000003cee4: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000073857: or byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000237c3: or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000776d2: or byte ptr [rbx + 0xa], dh; lea rcx, qword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000012287b: or byte ptr [rbx + 0xf], bl; mov dh, 0xc0; pop rbp; ret; 
0x0000000000192dbd: or byte ptr [rbx + rcx + 0x14], al; add byte ptr [rax], al; add byte ptr [rsp + rcx*2], bl; add byte ptr [rax], al; or byte ptr [rdx - 0x15], bl; jmp qword ptr [rsi]; 
0x000000000019c225: or byte ptr [rbx + rcx + 0x3c], al; add byte ptr [rax], al; add byte ptr [rax - 0x6ff00000], al; out dx, al; jmp qword ptr [rbp + 2]; 
0x00000000001903f3: or byte ptr [rbx + rcx + 0x52], al; ret; 
0x00000000001946d3: or byte ptr [rbx + rcx + 2], al; ret; 
0x0000000000035719: or byte ptr [rbx + rcx*4 + 0x57], cl; sbb byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x00000000001862d4: or byte ptr [rbx + rdi*8 - 1], 0x60; sti; push qword ptr [rax]; push rax; sti; call qword ptr [rax]; 
0x000000000006ffee: or byte ptr [rbx - 0x14f3dbb4], cl; movabs dword ptr [0xde69058b48001f0f], eax; xor al, 0; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x00000000000d33d7: or byte ptr [rbx - 0x3a], al; add eax, 0xc0830100; add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x0000000000121023: or byte ptr [rbx - 0x3d7cfc40], al; add eax, dword ptr [rbx - 0x1d7c0320]; cld; lea esi, dword ptr [rax + rdx + 0x28]; call qword ptr [rcx + 0x30]; 
0x0000000000022639: or byte ptr [rbx - 0x3ebef020], al; call 0xffffffffc51faf48; adc eax, 0xd89003a; ret; 
0x00000000000776db: or byte ptr [rbx - 0x43163cfe], cl; int 0xff; jmp qword ptr [rsi + 0x2e]; 
0x00000000000cbacf: or byte ptr [rbx - 0x76b3fe20], al; out 0x89, al; ret 0xca83; 
0x00000000000869db: or byte ptr [rbx - 0x76b7fe1f], al; push rax; or byte ptr [rbp + 0x23], dh; mov rdi, r13; call qword ptr [rbx + 0x40]; 
0x000000000007509a: or byte ptr [rbx - 0x77c03be], cl; push qword ptr [rbx + rax - 0x7d]; and ebp, edi; pop rbx; ret; 
0x00000000001b2ac8: or byte ptr [rbx - 9], cl; jmp qword ptr [rax]; 
0x0000000000108144: or byte ptr [rbx], al; add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x00000000001312fa: or byte ptr [rbx], bh; or byte ptr [r15], 0x94; ret 0xea83; 
0x00000000001a7f38: or byte ptr [rbx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001312f9: or byte ptr [rbx], dil; or byte ptr [r15], 0x94; ret 0xea83; 
0x0000000000039c6b: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000005365a: or byte ptr [rcx + 0x415d5bd0], cl; pop rsp; pop r13; ret; 
0x000000000001f6e3: or byte ptr [rcx + 0x415d5bd8], 0x5c; ret; 
0x000000000011cf95: or byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x00000000000967bf: or byte ptr [rcx + 0x448bf847], cl; and al, 0x18; mov dword ptr [rdi - 4], eax; mov rax, rdi; ret; 
0x00000000001203f1: or byte ptr [rcx + 0x48182444], cl; mov edi, ebx; call qword ptr [rdx + 0x20]; 
0x00000000000e2b4d: or byte ptr [rcx + 0x63], cl; sbb al, 0x9a; add rbx, r10; jmp rbx; 
0x00000000000fbabc: or byte ptr [rcx + 0x7c6348d8], cl; and al, 4; movsxd r10, ecx; syscall; 
0x00000000000c113d: or byte ptr [rcx + 0xfdaf7f2], 0x44; shl dword ptr [rcx + rcx*4 + 0x14], 1; and eax, 0x2d4; mov eax, 0x3a; syscall; 
0x00000000000384db: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000039120: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x00000000001202c3: or byte ptr [rcx + rbp - 0x16], cl; mov esi, r12d; mov rdi, rbx; mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x0000000000131273: or byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x8b41; 
0x000000000012a7f2: or byte ptr [rcx + rcx*4 + 0x3c], cl; and al, 0x48; mov dword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x000000000012d9d3: or byte ptr [rcx + rcx*4 + 0x44], cl; and al, 8; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000011fef2: or byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x20]; 
0x000000000012a858: or byte ptr [rcx + rcx*4 - 0x11], cl; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x0000000000124113: or byte ptr [rcx + rcx*4 - 0x18], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000006edc3: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000007c18a: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001202eb: or byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, rbx; call qword ptr [rax + 0x28]; 
0x000000000011fcee: or byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x000000000012b4e7: or byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x28]; 
0x000000000012b453: or byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 8]; 
0x000000000012aa48: or byte ptr [rcx + rcx*4 - 1], cl; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000012b52e: or byte ptr [rcx + rcx*4 - 1], cl; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x0000000000061736: or byte ptr [rcx - 0x103f6b], cl; dec dword ptr [rax - 0x75]; add byte ptr [rcx - 0x77], cl; add bl, ch; ret; 
0x00000000000384e2: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000003742c: or byte ptr [rcx - 0x3fcef7ad], cl; add rsp, 0x140; pop rbx; ret; 
0x000000000004bf26: or byte ptr [rcx - 0x45f6b], cl; dec dword ptr [rax - 0x75]; add byte ptr [rcx - 0x77], cl; add bl, ch; ret; 
0x00000000000e3452: or byte ptr [rcx - 0x75], cl; push rbp; adc byte ptr [rax + 0x63], cl; ret; 
0x0000000000099c6f: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x00000000000d2567: or byte ptr [rcx - 0x76b7ffa3], cl; ret; 
0x000000000004e741: or byte ptr [rcx - 0x77], cl; push rdi; or bl, ch; ret 0x8348; 
0x000000000004cda6: or byte ptr [rcx - 0x77], cl; push rdi; or cl, ch; jmp rcx; 
0x0000000000034b87: or byte ptr [rcx - 0x77], cl; ret 0x1074; 
0x0000000000050d2c: or byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x48e8; 
0x00000000000f139f: or byte ptr [rcx - 0x77], cl; ror byte ptr [rcx + 0x29], cl; fimul dword ptr [rcx + 0x39]; ret 0x820f; 
0x000000000009d78b: or byte ptr [rcx - 0x7d], cl; call 0x7f971f9f; or al, 0xf; test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x00000000000364fe: or byte ptr [rcx], 0xd0; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x0000000000135d5a: or byte ptr [rcx], al; add byte ptr [rax], al; jmp rax; 
0x00000000000e4d32: or byte ptr [rcx], al; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x000000000003719f: or byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000005dbca: or byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x00000000000e4e24: or byte ptr [rcx], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000d0b0e: or byte ptr [rcx], al; mov byte ptr [rdi], 0x5b; mov eax, 1; ret; 
0x00000000000d0b67: or byte ptr [rcx], al; mov byte ptr [rdi], al; mov eax, 1; ret; 
0x00000000000d0ae2: or byte ptr [rcx], al; mov eax, 1; ret; 
0x00000000000e0d97: or byte ptr [rcx], bh; ret 0x1372; 
0x0000000000130754: or byte ptr [rcx], bh; ret 0x850f; 
0x00000000000fa55c: or byte ptr [rcx], bh; sub al, 0; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d0b22: or byte ptr [rcx], bl; mov eax, 1; ret; 
0x00000000001176de: or byte ptr [rcx], ch; add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx - 0x76b7f3a9], 0x3e; ret; 
0x0000000000135938: or byte ptr [rcx], cl; add byte ptr [rax], al; call qword ptr [rax + 0xf08]; 
0x00000000001a7db8: or byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x000000000010ac30: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x000000000002474c: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000000e3260: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000048f02: or byte ptr [rcx], dh; ror byte ptr [rbp - 0x7b], cl; dec dword ptr [rdi]; xchg eax, ebp; ret 0xc031; 
0x00000000000e415f: or byte ptr [rcx], dh; ror byte ptr [rcx - 0x7cb7fbab], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000044dac: or byte ptr [rcx], dh; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x00000000001765be: or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000112023: or byte ptr [rdi + 0x400], bh; call 0x1f490; mov qword ptr [rip + 0x2ad9b3], rax; add rsp, 8; ret; 
0x00000000001aa534: or byte ptr [rdi + 0xb], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; xchg eax, esp; ret; 
0x00000000001ac83a: or byte ptr [rdi + 0xb], al; add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rsi + 0x2880001], bl; idiv bh; ret 3; 
0x0000000000059f6e: or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rax - 0x7d], cl; ret; 
0x0000000000059c68: or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000055df7: or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0x4101; 
0x0000000000055176: or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x0000000000055a37: or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0xe901; 
0x00000000001b1d08: or byte ptr [rdi + rsi*8], cl; call qword ptr [rsi]; 
0x00000000001a50a8: or byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000000296d4: or byte ptr [rdi], 0x94; ret 0xb60f; 
0x00000000001312fd: or byte ptr [rdi], 0x94; ret 0xea83; 
0x00000000000fa15a: or byte ptr [rdi], 0x95; ret 0xcfeb; 
0x000000000012260f: or byte ptr [rdi], 0xc8; mov dword ptr [rdx], eax; mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x0000000000186828: or byte ptr [rdi], 0xfc; inc dword ptr [rax + 0x10fffc11]; add al, 0xfc; call rax; 
0x000000000002fd34: or byte ptr [rdi], cl; mov bh, 0xc0; ret; 
0x000000000007a5c4: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007b32f: or byte ptr [rdi], cl; mov dh, 0; pop rbx; ret; 
0x0000000000073651: or byte ptr [rdi], cl; mov dh, 0; ret; 
0x00000000000c3b2c: or byte ptr [rdi], cl; mov dh, 0x42; add cl, byte ptr [rax - 0x7d]; ret 0x8301; 
0x0000000000022ca7: or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000048a51: or byte ptr [rdi], cl; mov dh, 0xc0; pop rbx; neg eax; pop rbp; ret; 
0x00000000000465b8: or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000008b13c: or byte ptr [rdi], cl; test byte ptr [rcx + rax - 0x7cb80000], dl; ret 0xe901; 
0x000000000015e431: or byte ptr [rdi], cl; test dword ptr [rax + 6], ebp; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000dbe40: or byte ptr [rdi], cl; xchg dword ptr [rsp + rax], edx; add byte ptr [rcx - 0x75], al; adc al, 0x8d; add qword ptr [r8 - 0x7d], rcx; ret; 
0x0000000000021f7f: or byte ptr [rdi], cl; xchg eax, esp; ret 0xc031; 
0x0000000000039ea3: or byte ptr [rdx + 0xa], bh; xor esi, esi; call 0x3d3e0; add rsp, 8; ret; 
0x00000000001a3155: or byte ptr [rdx + 0xb], al; adc al, 0; add byte ptr [rax], al; mov ah, 0x4f; add dword ptr [rax], eax; ret 0xe7da; 
0x00000000001aa15a: or byte ptr [rdx + 0xb], cl; add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rdi + rdi*4 - 0x7127ffff], bh; cmc; jmp qword ptr [rbx + 2]; 
0x00000000001aef2b: or byte ptr [rdx + 0xe], al; adc byte ptr [rbx + 0xa550202], al; ret; 
0x000000000019e4d0: or byte ptr [rdx - 0x10], 0xff; ret; 
0x0000000000192dc8: or byte ptr [rdx - 0x15], bl; jmp qword ptr [rsi]; 
0x000000000017819c: or byte ptr [rdx - 0x732f000f], 0xf1; jmp qword ptr [rax]; 
0x000000000010c30b: or byte ptr [rdx], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000d0ac2: or byte ptr [rdx], al; xor eax, eax; ret; 
0x00000000000d0b49: or byte ptr [rdx], bl; mov eax, 2; ret; 
0x00000000000f05c2: or byte ptr [rip + 0x100f], ah; ret; 
0x00000000000f05c1: or byte ptr [rip + 0x100f], r12b; ret; 
0x000000000002a296: or byte ptr [rip + 0x29480000], al; ret 0x8b49; 
0x00000000000a06e1: or byte ptr [rip + 0xc634900], 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000186824: or byte ptr [rip + 0xf80fffc], 0xfc; inc dword ptr [rax + 0x10fffc11]; add al, 0xfc; call rax; 
0x00000000000f08b8: or byte ptr [rip - 0x80000000], 0x39; ret 0x9e75; 
0x0000000000120ee3: or byte ptr [rsi + 0x20], bh; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x00000000000d0bb5: or byte ptr [rsi + 0x32], 8; xor eax, eax; ret; 
0x00000000001946cc: or byte ptr [rsi + 0xb], al; pop rsp; or cl, byte ptr [rdi + rax]; or byte ptr [rbx + rcx + 2], al; ret; 
0x0000000000099be4: or byte ptr [rsi + 0xf], ah; adc al, byte ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000099b17: or byte ptr [rsi + 0xf], ah; adc eax, dword ptr [rdx]; movlpd qword ptr [rdx + 8], xmm1; mov rax, rdi; ret; 
0x000000000009c821: or byte ptr [rsi + 0xf], ah; adc ecx, dword ptr [rdx + 8]; mov rax, rdi; ret; 
0x000000000009c902: or byte ptr [rsi + 0xf], ah; adc ecx, dword ptr [rdx + 8]; xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x000000000011fcdc: or byte ptr [rsi + 1], bh; mov rdi, r15; call qword ptr [rax]; 
0x0000000000125f57: or byte ptr [rsi + 8], bh; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000120fa4: or byte ptr [rsi + 8], bh; mov rdi, rbp; call qword ptr [rax + 0x30]; 
0x0000000000099c30: or byte ptr [rsi - 0x77], ah; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000000d0b7f: or byte ptr [rsi], bl; mov eax, 2; ret; 
0x00000000001a7b78: or byte ptr [rsi], ch; cmc; jmp qword ptr [rcx]; 
0x00000000000d0ab8: or byte ptr [rsi], dl; mov eax, 1; ret; 
0x00000000000a076a: or byte ptr es:[rip + 0xc634900], 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000003c92: or byte ptr fs:[rbx + 0x4e], ch; ret 0x6bba; 
0x00000000000d4a1a: or byte ptr gs:[rax - 0x77], cl; ret; 
0x00000000000f7efc: or byte ptr gs:[rax], al; mov rax, rbx; pop rbx; ret; 
0x0000000000165e20: or ch, 0xeb; call qword ptr [rax]; 
0x0000000000189561: or ch, bh; jmp rsp; 
0x0000000000093d41: or ch, bl; ret 0x1f0f; 
0x00000000000fd424: or ch, byte ptr [rax + rax]; mov eax, dword ptr [rax + 0x38]; ret; 
0x000000000013387f: or ch, byte ptr [rcx]; add byte ptr [rdi], cl; test dword ptr [rip + 0x48000001], edx; mov eax, edx; add rsp, 8; ret; 
0x00000000000ed374: or ch, byte ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ed3a4: or ch, byte ptr [rip + 0xc76400]; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000ed38c: or ch, byte ptr [rip + 0xc76400]; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000073ce2: or ch, byte ptr [rsi - 0x74b70002]; xchg eax, esp; and al, 0xf0; add dword ptr [rax], eax; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000013387e: or ch, byte ptr ss:[rcx]; add byte ptr [rdi], cl; test dword ptr [rip + 0x48000001], edx; mov eax, edx; add rsp, 8; ret; 
0x000000000018fc1d: or ch, dl; jmp qword ptr [rdx]; 
0x000000000018fe51: or ch, dl; jmp rcx; 
0x000000000003686b: or cl, bl; std; fstp st(1); ret; 
0x00000000000b43d8: or cl, byte ptr [r11 + 0x66042444]; mov dword ptr [rbx + 0xc], eax; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x00000000000b015e: or cl, byte ptr [rax + 0x29]; ret 0x5589; 
0x0000000000131c40: or cl, byte ptr [rax + 0x63]; clc; mov eax, 3; syscall; 
0x000000000012f157: or cl, byte ptr [rax + 0x63]; stc; mov eax, 3; syscall; 
0x0000000000075cd8: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x00000000000776d4: or cl, byte ptr [rax - 0x73]; add al, 0x48; mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; ret; 
0x000000000015a402: or cl, byte ptr [rax - 0x73]; or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x000000000015e7f3: or cl, byte ptr [rax - 0x73]; or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000e3ad6: or cl, byte ptr [rax - 0x77]; ret 0x1e8; 
0x0000000000041bbc: or cl, byte ptr [rax - 0x7b]; sal byte ptr [rbp + rdx + 0x4c], 0x39; ret 0x1075; 
0x0000000000129ffa: or cl, byte ptr [rax - 0x7d]; ret 0x4104; 
0x00000000000b2fba: or cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x00000000000c41a9: or cl, byte ptr [rax - 0x7d]; ret 0x8001; 
0x000000000005e5a4: or cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x00000000000c2775: or cl, byte ptr [rbp + 0x6348d070]; test byte ptr [rdi], 0x1f; add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x0000000000074457: or cl, byte ptr [rbx + 0x5bd08910]; ret; 
0x00000000000b43d9: or cl, byte ptr [rbx + 0x66042444]; mov dword ptr [rbx + 0xc], eax; xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x000000000007b48d: or cl, byte ptr [rbx + 0xc097]; add byte ptr [rbp + 0x48487ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000010c5e5: or cl, byte ptr [rcx + 0x18e8c1f8]; ret; 
0x00000000000d0245: or cl, byte ptr [rcx + 0x63]; cld; mov eax, 3; syscall; 
0x00000000000ec4ab: or cl, byte ptr [rcx + 0x63]; std; mov eax, 3; syscall; 
0x00000000000fc264: or cl, byte ptr [rcx + rcx*4 - 0x12]; mov rdi, r9; mov eax, ebx; syscall; 
0x0000000000136258: or cl, byte ptr [rcx + rcx*4 - 0x1e]; add r9, r11; call rax; 
0x000000000010c565: or cl, byte ptr [rcx - 0xda08]; inc dword ptr [rax]; ret; 
0x00000000001946d0: or cl, byte ptr [rdi + rax]; or byte ptr [rbx + rcx + 2], al; ret; 
0x00000000001aa531: or cl, byte ptr [rdi + rax]; or byte ptr [rdi + 0xb], al; add byte ptr [rax + rax], dl; add byte ptr [rax], al; xchg eax, esp; ret; 
0x00000000001946c9: or cl, byte ptr [rdi + rax]; or byte ptr [rsi + 0xb], al; pop rsp; or cl, byte ptr [rdi + rax]; or byte ptr [rbx + rcx + 2], al; ret; 
0x00000000000257a4: or cl, byte ptr [rdi]; mov esi, 0x4a890b40; push rax; mov dword ptr [rdx + 0x54], eax; ret; 
0x000000000006fe6e: or cl, byte ptr [rdi]; test dword ptr [rbp + 0x5b000000], edx; mov eax, ebp; pop rbp; pop r12; ret; 
0x000000000015a406: or cl, byte ptr [rdi]; test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x000000000015e7f7: or cl, byte ptr [rdi]; test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x0000000000130521: or cl, byte ptr [rdi]; xchg eax, esp; ret; 
0x00000000001273d8: or cl, ch; adc bl, byte ptr [rbx - 0xc]; jmp qword ptr [rsi - 0x70]; 
0x0000000000057dc6: or cl, ch; and ebp, 0x8348ffff; ret 0xeb08; 
0x000000000004cdaa: or cl, ch; jmp rcx; 
0x0000000000067693: or cl, ch; ret 0xfff0; 
0x00000000000cd2c4: or cl, ch; ret 0xfff8; 
0x000000000003ab40: or cl, ch; ret 0xfffa; 
0x00000000000bcdd7: or cl, ch; ret; 
0x000000000008aa65: or cl, cl; cmove rax, rdx; ret; 
0x0000000000109162: or dh, ah; dec dword ptr [rax - 0x7f]; ret; 
0x0000000000137269: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000004983d: or dh, al; or byte ptr [rax], al; ret; 
0x000000000014cda3: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x00000000000fddea: or dh, bl; ret; 
0x000000000007084d: or dh, byte ptr [rbp + 0x23]; mov eax, r8d; pop rbx; ret; 
0x000000000007119c: or dh, byte ptr [rbp + 0x3f]; ret; 
0x0000000000071296: or dh, byte ptr [rbp + 0x43]; mov eax, esi; ret; 
0x0000000000072061: or dh, byte ptr [rbp + 0x60]; pop rbx; ret; 
0x0000000000070501: or dh, byte ptr [rbp + 0x63]; pop rbx; pop rbp; pop r12; ret; 
0x00000000001097d0: or dh, byte ptr [rbp + 0x69]; pop rbx; pop rbp; mov eax, esi; pop r12; ret; 
0x00000000001094d8: or dh, byte ptr [rbp + 0x6e]; add rsp, 0xd8; mov eax, esi; pop rbx; pop rbp; ret; 
0x00000000000bc7f2: or dh, byte ptr [rbx]; xor byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000092f34: or dh, byte ptr [rcx]; dec dword ptr [rax - 0x77]; ret 0xf0e9; 
0x0000000000135e75: or dh, byte ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x0000000000097a8e: or dh, byte ptr [rcx]; test byte ptr [rax - 0x77], 0xdf; call 0x8c4b0; lea rax, qword ptr [rbx - 1]; pop rbx; ret; 
0x00000000000d1bea: or dh, byte ptr [rdi + rax*2 + 0x48]; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000001aca49: or dh, dh; call rax; 
0x000000000007feeb: or dh, dh; ret 0x7404; 
0x0000000000081299: or dh, dh; ret 0x7502; 
0x0000000000104957: or dh, dh; ret 0x7508; 
0x0000000000081a2a: or dh, dh; ret 0xf01; 
0x000000000007ff07: or dh, dh; ret 0xf04; 
0x00000000000310cf: or dh, dh; ret 0xfdf; 
0x0000000000112602: or dl, byte ptr [rbp - 8]; jmp qword ptr [rsi + 0x2e]; 
0x00000000000aeffb: or dword ptr [rax + 0x31], edx; add byte ptr [rax - 0x73], cl; cmp eax, 0x310afa; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000048823: or dword ptr [rax + 0x44e80037], eax; mov ah, 5; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000009d3d3: or dword ptr [rax + 0x6349000d], esi; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000123ba3: or dword ptr [rax + 0x66000000], 0x6c408941; mov eax, 1; ret; 
0x00000000000a1b42: or dword ptr [rax + 1], 0xb8e1fff1; adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000034edc: or dword ptr [rax + 1], 0xffffffd8; jmp rax; 
0x0000000000114915: or dword ptr [rax + rax - 0x74bf0000], 0xc; and al, 0x89; ret 0xc148; 
0x00000000001349c3: or dword ptr [rax + rax], eax; add byte ptr [rax + 0x63], cl; std; mov eax, 3; syscall; 
0x0000000000145df6: or dword ptr [rax + rax], eax; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000f0a86: or dword ptr [rax + rax], edx; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000f0a42: or dword ptr [rax + rax], edx; movsxd rdi, edi; mov eax, 0x10; syscall; 
0x00000000001355e3: or dword ptr [rax - 0x389bffd8], 0x2600; add byte ptr [rax - 1], bh; ret; 
0x00000000001117e4: or dword ptr [rax - 0x73], ecx; cmp eax, 0x2b1734; call rax; 
0x0000000000123a83: or dword ptr [rax - 0x73], ecx; mov ebx, 0xc8; call rax; 
0x000000000015a3e2: or dword ptr [rax - 0x73], ecx; or qword ptr [rdi], rcx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x0000000000103464: or dword ptr [rax - 0x75], ecx; adc byte ptr [rax + 0x39], cl; ret; 
0x000000000005d64a: or dword ptr [rax - 0x77], ecx; ret 0x8348; 
0x000000000011c470: or dword ptr [rax - 0x7d], ecx; in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000011efaf: or dword ptr [rax - 0x7d], ecx; ret 0x3904; 
0x00000000000c7980: or dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x0000000000086cfe: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x00000000000f364f: or dword ptr [rax], 0x8000; mov eax, 1; add rsp, 8; ret; 
0x00000000001467c3: or dword ptr [rax], eax; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000021c80: or dword ptr [rax], eax; add bl, dh; ret; 
0x00000000000447fc: or dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x0000000000194a65: or dword ptr [rax], eax; add byte ptr [rax - 0x72], ch; in eax, dx; call qword ptr [rax]; 
0x00000000000b210b: or dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x311d03; add rsp, 8; ret; 
0x000000000013754d: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013da2f: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001374a7: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000005e413: or dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x00000000000e412a: or dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000464d4: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0x3e; movsxd rdi, ebx; syscall; 
0x0000000000136b92: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0x3e; syscall; 
0x00000000000357da: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000071422: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000022cb8: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, edi; ret; 
0x00000000000ebae1: or dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r10; mov eax, r9d; syscall; 
0x00000000000ebbf9: or dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r9; mov eax, r8d; syscall; 
0x00000000000fa403: or dword ptr [rax], eax; add byte ptr [rax], al; nop word ptr [rax + rax]; mov eax, 0xa6; syscall; 
0x00000000000e426f: or dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000088e13: or dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000f4874: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000016d7bd: or dword ptr [rax], eax; add byte ptr [rcx + rcx + 0x9bf0000], bh; add byte ptr [rax], al; ret 9; 
0x00000000000804ca: or dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf01; 
0x000000000016d7b5: or dword ptr [rax], eax; add byte ptr [rsi - 0x46fffff7], dh; or dword ptr [rax], eax; add byte ptr [rcx + rcx + 0x9bf0000], bh; add byte ptr [rax], al; ret 9; 
0x000000000009bd75: or dword ptr [rax], eax; add cl, ch; ret; 
0x00000000000eaf1e: or dword ptr [rax], eax; mov edx, 0x193; call 0x2fc60; nop word ptr [rax + rax]; mov eax, 0x3c; syscall; 
0x00000000000dfbf4: or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x00000000000e7277: or dword ptr [rax], eax; movsxd rdx, dword ptr [rax + r11*4]; add rax, rdx; jmp rax; 
0x00000000000dc8f7: or dword ptr [rax], eax; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000decca: or dword ptr [rax], eax; movzx ecx, al; mov r14d, r8d; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000e1879: or dword ptr [rax], eax; movzx ecx, al; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x0000000000111387: or dword ptr [rbp + rcx*4 + 0x68], ecx; add eax, ebp; jmp rax; 
0x000000000018e64c: or dword ptr [rbp - 0x17], ebx; jmp qword ptr [rdx]; 
0x00000000001610b6: or dword ptr [rbp - 0xcffffff], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x00000000000bc503: or dword ptr [rbx + 0x30], edi; add byte ptr [rax - 0x73], cl; cmp eax, 0x3035f2; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000101356: or dword ptr [rbx + 0x5d], ebx; pop r12; pop r13; pop r14; ret; 
0x0000000000121566: or dword ptr [rbx + 0x5d], ebx; xor eax, eax; pop r12; ret; 
0x00000000000847b6: or dword ptr [rbx - 0xd], ebx; ret; 
0x0000000000076935: or dword ptr [rbx], 0x20; add rsp, 0x28; pop rbx; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000006e466: or dword ptr [rbx], 0x20; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000078d20: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000007d078: or dword ptr [rbx], 8; pop rbx; ret; 
0x000000000019265a: or dword ptr [rbx], eax; ret 0xa03; 
0x00000000000ebb7c: or dword ptr [rcx + rbp + 0x48], esi; mov edx, ebx; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x48; syscall; 
0x000000000002579d: or dword ptr [rcx - 0x41f0b3b6], ecx; or cl, byte ptr [rdi]; mov esi, 0x4a890b40; push rax; mov dword ptr [rdx + 0x54], eax; ret; 
0x000000000009e073: or dword ptr [rcx - 0x73], 0xc; or edi, edi; loope 0x9e0e1; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000009f883: or dword ptr [rcx - 0x73], 0xc; or edi, edi; loope 0x9f8f1; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000000a097f: or dword ptr [rcx - 0x73], 0xc; or edi, edi; loope 0xa09ed; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000a1103: or dword ptr [rcx - 0x73], 0xc; or edi, edi; loope 0xa1171; nop dword ptr [rax + rax]; ret; 
0x0000000000135d53: or dword ptr [rcx - 0x74b7ffd8], eax; or byte ptr [rax], 1; add byte ptr [rax], al; jmp rax; 
0x00000000000d4058: or dword ptr [rcx - 0x7d], ecx; ret 0x4c01; 
0x0000000000084044: or dword ptr [rcx - 0x7d], ecx; ret; 
0x0000000000083e5e: or dword ptr [rcx - 0x7d], ecx; sti; adc al, 0x77; sub ecx, dword ptr [rcx - 0x7d]; ret; 
0x00000000000c246f: or dword ptr [rcx - 0x7f], ecx; clc; add byte ptr [rcx], al; sbb dword ptr [rbp + rsi*2 - 0x7e], edx; mov eax, 0x7d00; ret; 
0x00000000000ece3d: or dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000003cd5b: or dword ptr [rcx], edx; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000009d4d3: or dword ptr [rdi + 0x6349000d], ebp; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d553: or dword ptr [rdi + 0x634b000d], ebp; or al, 0x83; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000d1ed0: or dword ptr [rdi + 0x90], eax; xor eax, eax; ret; 
0x00000000000375d3: or dword ptr [rdi + rax*8], edx; xor eax, eax; ret; 
0x00000000000f0677: or dword ptr [rdi], 0x80000000; xor eax, eax; ret; 
0x0000000000037796: or dword ptr [rdi], eax; xor eax, eax; ret; 
0x000000000015a3e6: or dword ptr [rdi], ecx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x000000000015e7c7: or dword ptr [rdi], ecx; test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000a8a00: or dword ptr [rdi], ecx; xchg dword ptr [rax + rdx - 0x7cb80000], ebx; ret; 
0x00000000000f9e1a: or dword ptr [rdi], ecx; xchg dword ptr [rdi], ebx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000f985a: or dword ptr [rdi], ecx; xchg dword ptr [rdi], edx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a7824: or dword ptr [rdi], ecx; xchg ecx, esi; add al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000acc24: or dword ptr [rdi], ecx; xchg edi, esp; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000014e809: or dword ptr [rdx + 0x63490003], 0x14; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000135c53: or dword ptr [rdx - 0x76b7ffd8], eax; dec byte ptr [rax - 0x75]; cmp al, 0x24; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x000000000011ede5: or dword ptr [rip + 0x2a4894], 2; add rsp, 0x30; lea rax, qword ptr [rip + 0x2a48a9]; pop rbx; ret; 
0x000000000011bcb1: or dword ptr [rip + 0x2a7718], 2; add rsp, 8; ret; 
0x000000000008eec0: or dword ptr [rip - 0x75f37500], 0xffffff8b; add al, 0x82; sub eax, ecx; ret; 
0x0000000000179460: or dword ptr [rsi - 0x66a9000c], ebx; hlt; jmp qword ptr [rax - 0x67]; 
0x0000000000110f88: or dword ptr [rsi - 0x7f], esi; pop rbx; pop rbp; mov eax, 0xffffffff; pop r12; ret; 
0x000000000008402b: or dword ptr [rsi], 0xc0310000; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000c2bb8: or dword ptr [rsi], eax; add byte ptr [rax], al; lea rax, qword ptr [rip + 0xb67f9]; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000143a03: or dword ptr [rsp + rax], ebp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000b210a: or dword ptr ds:[rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x311d03; add rsp, 8; ret; 
0x0000000000135ee2: or eax, 0x10247c80; add byte ptr [rbp + 0x1e], dh; add rsp, 0x48; ret; 
0x000000000006d28e: or eax, 0x10ac1d; movsxd rdx, dword ptr [rcx + rdx*4]; add rcx, rdx; jmp rcx; 
0x0000000000099c84: or eax, 0x1120f66; movlpd qword ptr [rdx], xmm0; movlpd xmm1, qword ptr [rcx + 5]; movlpd qword ptr [rdx + 5], xmm1; mov rax, rdi; ret; 
0x000000000006465b: or eax, 0x11337c; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000054a4d: or eax, 0x122522; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x000000000003608b: or eax, 0x14f840; orpd xmm0, xmm1; ret; 
0x00000000001296ae: or eax, 0x18247c80; add byte ptr [rdx + 1], bh; cmovne eax, edx; sub rsp, -0x80; pop rbx; ret; 
0x00000000001201da: or eax, 0x18c48348; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000009e6d1: or eax, 0x1c478d48; ret; 
0x000000000009f521: or eax, 0x1d478d48; ret; 
0x000000000015a468: or eax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x000000000012925a: or eax, 0x1f0f5beb; add byte ptr [rax - 0x75], cl; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rsi*2 - 0x75], 0x50; adc dh, dh; ret 0x7401; 
0x000000000015e889: or eax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000013fd8f: or eax, 0x274ec; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000132d75: or eax, 0x28b0ee; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000132d25: or eax, 0x28b13e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013e6ae: or eax, 0x28bcd; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013e3ea: or eax, 0x28e91; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000039cd8: or eax, 0x29fffffc; ror dword ptr [rax - 0x77], 0x37; mov eax, 1; mov dword ptr [rdx], ecx; ret; 
0x000000000013cfd5: or eax, 0x2a2a6; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013c9ef: or eax, 0x2a88c; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000fbee2: or eax, 0x2c1f81; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbeb2: or eax, 0x2c1fb1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbe82: or eax, 0x2c1fe1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbe52: or eax, 0x2c2011; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbe25: or eax, 0x2c203e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbdf5: or eax, 0x2c206e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbdc2: or eax, 0x2c20a1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd92: or eax, 0x2c20d1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd62: or eax, 0x2c2101; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd32: or eax, 0x2c2131; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbd11: or eax, 0x2c2152; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fbcb1: or eax, 0x2c21b2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb5f5: or eax, 0x2c286e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb5c2: or eax, 0x2c28a1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb592: or eax, 0x2c28d1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb565: or eax, 0x2c28fe; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb541: or eax, 0x2c2922; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb4db: or eax, 0x2c2988; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb3cb: or eax, 0x2c2a98; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb371: or eax, 0x2c2af2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb252: or eax, 0x2c2c11; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb225: or eax, 0x2c2c3e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb1f2: or eax, 0x2c2c71; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb1c2: or eax, 0x2c2ca1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb19b: or eax, 0x2c2cc8; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb132: or eax, 0x2c2d31; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb10b: or eax, 0x2c2d58; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb085: or eax, 0x2c2dde; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb055: or eax, 0x2c2e0e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb022: or eax, 0x2c2e41; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faffb: or eax, 0x2c2e68; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf95: or eax, 0x2c2ece; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf62: or eax, 0x2c2f01; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf32: or eax, 0x2c2f31; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faf05: or eax, 0x2c2f5e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faed2: or eax, 0x2c2f91; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faeb1: or eax, 0x2c2fb2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fae42: or eax, 0x2c3021; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fae12: or eax, 0x2c3051; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fadf1: or eax, 0x2c3072; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fad82: or eax, 0x2c30e1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fad61: or eax, 0x2c3102; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000facf5: or eax, 0x2c316e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000facc5: or eax, 0x2c319e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac95: or eax, 0x2c31ce; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac62: or eax, 0x2c3201; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac32: or eax, 0x2c3231; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fac02: or eax, 0x2c3261; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fabd5: or eax, 0x2c328e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faba5: or eax, 0x2c32be; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fab72: or eax, 0x2c32f1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fab42: or eax, 0x2c3321; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fab12: or eax, 0x2c3351; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faae2: or eax, 0x2c3381; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faab2: or eax, 0x2c33b1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faa85: or eax, 0x2c33de; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faa52: or eax, 0x2c3411; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000faa31: or eax, 0x2c3432; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa9c5: or eax, 0x2c349e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa992: or eax, 0x2c34d1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa962: or eax, 0x2c3501; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa932: or eax, 0x2c3531; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa902: or eax, 0x2c3561; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa8d2: or eax, 0x2c3591; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa8a2: or eax, 0x2c35c1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa872: or eax, 0x2c35f1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa842: or eax, 0x2c3621; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa815: or eax, 0x2c364e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa7d2: or eax, 0x2c3691; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa7a2: or eax, 0x2c36c1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa775: or eax, 0x2c36ee; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa4b2: or eax, 0x2c39b1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa482: or eax, 0x2c39e1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa452: or eax, 0x2c3a11; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa422: or eax, 0x2c3a41; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa3eb: or eax, 0x2c3a78; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa387: or eax, 0x2c3adc; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa292: or eax, 0x2c3bd1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa262: or eax, 0x2c3c01; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013ad5e: or eax, 0x2c51d; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000f8225: or eax, 0x2c5c3e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f81f2: or eax, 0x2c5c71; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8192: or eax, 0x2c5cd1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8162: or eax, 0x2c5d01; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8135: or eax, 0x2c5d2e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8102: or eax, 0x2c5d61; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f80d5: or eax, 0x2c5d8e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f80a5: or eax, 0x2c5dbe; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8042: or eax, 0x2c5e21; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f8015: or eax, 0x2c5e4e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013aa2a: or eax, 0x2c851; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000f4a92: or eax, 0x2c93d1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4a62: or eax, 0x2c9401; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4a32: or eax, 0x2c9431; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4a02: or eax, 0x2c9461; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f49d5: or eax, 0x2c948e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f49a2: or eax, 0x2c94c1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f494b: or eax, 0x2c9518; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f48e2: or eax, 0x2c9581; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f48b2: or eax, 0x2c95b1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4885: or eax, 0x2c95de; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4714: or eax, 0x2c974f; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f30a2: or eax, 0x2cadc1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f21f2: or eax, 0x2cbc71; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f21c2: or eax, 0x2cbca1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f2192: or eax, 0x2cbcd1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1ed2: or eax, 0x2cbf91; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1eab: or eax, 0x2cbfb8; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1e42: or eax, 0x2cc021; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1e1b: or eax, 0x2cc048; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1db2: or eax, 0x2cc0b1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1d82: or eax, 0x2cc0e1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1c71: or eax, 0x2cc1f2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1c02: or eax, 0x2cc261; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f11f2: or eax, 0x2ccc71; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1032: or eax, 0x2cce31; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0c72: or eax, 0x2cd1f1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0c42: or eax, 0x2cd221; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0c12: or eax, 0x2cd251; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0511: or eax, 0x2cd952; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f3224: or eax, 0x2ce3d7; mov rax, rdi; mov byte ptr [r9 - 1], 0; ret; 
0x00000000000ed2e5: or eax, 0x2d0b7e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecffb: or eax, 0x2d0e68; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecf92: or eax, 0x2d0ed1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecf32: or eax, 0x2d0f31; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eced2: or eax, 0x2d0f91; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ece72: or eax, 0x2d0ff1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ece12: or eax, 0x2d1051; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec822: or eax, 0x2d1641; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec7f2: or eax, 0x2d1671; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ec7c2: or eax, 0x2d16a1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebff2: or eax, 0x2d1e71; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebfc2: or eax, 0x2d1ea1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebf9b: or eax, 0x2d1ec8; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebf32: or eax, 0x2d1f31; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebf02: or eax, 0x2d1f61; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebed2: or eax, 0x2d1f91; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebea2: or eax, 0x2d1fc1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebe72: or eax, 0x2d1ff1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebe4b: or eax, 0x2d2018; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebcd2: or eax, 0x2d2191; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb772: or eax, 0x2d26f1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb74b: or eax, 0x2d2718; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb6eb: or eax, 0x2d2778; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb4fb: or eax, 0x2d2968; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb462: or eax, 0x2d2a01; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb3c2: or eax, 0x2d2aa1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb392: or eax, 0x2d2ad1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb272: or eax, 0x2d2bf1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb242: or eax, 0x2d2c21; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eafb2: or eax, 0x2d2eb1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eaf91: or eax, 0x2d2ed2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eaf41: or eax, 0x2d2f22; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000139155: or eax, 0x2e126; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000cb5f1: or eax, 0x2f2872; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb591: or eax, 0x2f28d2; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb342: or eax, 0x2f2b21; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb312: or eax, 0x2f2b51; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb2e2: or eax, 0x2f2b81; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb2b2: or eax, 0x2f2bb1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb282: or eax, 0x2f2be1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb252: or eax, 0x2f2c11; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb222: or eax, 0x2f2c41; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb1f2: or eax, 0x2f2c71; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb105: or eax, 0x2f625e; mov rdx, qword ptr [rip + 0x2f2e47]; mov dword ptr [rdx], ecx; add rsp, 0x10; pop rbx; ret; 
0x00000000000c2012: or eax, 0x2fbe51; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1fe2: or eax, 0x2fbe81; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1fb2: or eax, 0x2fbeb1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1f82: or eax, 0x2fbee1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1f22: or eax, 0x2fbf41; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1ef2: or eax, 0x2fbf71; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c1d62: or eax, 0x2fc101; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c116c: or eax, 0x2fccf7; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0e1b: or eax, 0x2fd048; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0dbb: or eax, 0x2fd0a8; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0ba2: or eax, 0x2fd2c1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0ac5: or eax, 0x2fd39e; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c08e2: or eax, 0x2fd581; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b42a2: or eax, 0x309bc1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0b41: or eax, 0x30; mov dword ptr [rdi + 8], eax; ret; 
0x00000000000b1422: or eax, 0x30ca41; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a3e7a: or eax, 0x358d4800; ret 0xd9d; 
0x000000000005dba2: or eax, 0x3602c1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000474f2: or eax, 0x376971; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000471b2: or eax, 0x376cb1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000004711e: or eax, 0x376d45; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000374d2: or eax, 0x386991; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000117e12: or eax, 0x3901c283; bnd jb 0x117e04; mov eax, 0xffffffff; ret; 
0x000000000002274f: or eax, 0x3a14eb; add al, 0xe9; paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x0000000000070b5a: or eax, 0x3b48428b; cmovne r8, rcx; ret; 
0x00000000000a76ec: or eax, 0x3d8d4800; ret; 
0x000000000007a318: or eax, 0x40; mov dword ptr [rdi], eax; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x48]; 
0x00000000000b2bc3: or eax, 0x440f4800; ret 0x8d48; 
0x00000000000780f8: or eax, 0x4418d48; mov qword ptr [rdx + 0x20], rax; mov dword ptr [rcx], edi; mov eax, edi; ret; 
0x000000000004759f: or eax, 0x48000000; add esp, 0xd8; ret; 
0x0000000000036db2: or eax, 0x48000000; mov esi, eax; mov eax, ecx; syscall; 
0x00000000000939f2: or eax, 0x48c0bc0f; lea eax, dword ptr [rdi + rax]; ret; 
0x00000000000b4a0a: or eax, 0x48d08948; add esp, 8; ret; 
0x00000000000f51df: or eax, 0x49fff2a3; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000123f20: or eax, 0x49ffffff; mov edi, dword ptr [rbp]; lea rsi, qword ptr [r12 + 0x18]; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 0x10]; 
0x000000000011810a: or eax, 0x4e6c148; lea rax, qword ptr [rdi + rsi + 8]; ret; 
0x0000000000070663: or eax, 0x5b000001; pop rbp; mov eax, edx; pop r12; ret; 
0x000000000005d552: or eax, 0x5bd88948; ret; 
0x0000000000145a06: or eax, 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000009d7b5: or eax, 0x724850f; add byte ptr [rax], al; ret; 
0x000000000009e6c8: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009f518: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009d038: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000a0f88: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x000000000012260b: or eax, 0x80000000; bswap eax; mov dword ptr [rdx], eax; mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x00000000001380f7: or eax, 0x83480000; ret 0x4910; 
0x0000000000139c91: or eax, 0x83480000; ret 0xe910; 
0x0000000000138125: or eax, 0x83480000; ret 0xeb10; 
0x00000000001659cd: or eax, 0x83489066; ret 0x4810; 
0x000000000009ee69: or eax, 0x880850f; add byte ptr [rax], al; ret; 
0x0000000000067854: or eax, 0x89000003; ret 0x348; 
0x00000000000ad00c: or eax, 0x89440031; ret 0x5441; 
0x0000000000041b96: or eax, 0x894c0000; ret; 
0x000000000008eec1: or eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000036f9c: or eax, 0x8be00; add byte ptr [rax], al; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x82; syscall; 
0x00000000000e40df: or eax, 0x8bfff3b4; push rbp; add al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x000000000007346a: or eax, 0x8c48348; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000008aae2: or eax, 0x8c48348; ret; 
0x00000000000d4456: or eax, 0xa5c35; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000088870: or eax, 0xba000f3e; add eax, 0xe8000000; ret 0xfa7d; 
0x0000000000031f08: or eax, 0xc4814800; add byte ptr [rax], 0; add cl, ch; ret; 
0x000000000009cc97: or eax, 0xc634900; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a10fe: or eax, 0xc634b00; or dword ptr [rcx - 0x73], 0xc; or edi, edi; loope 0xa1171; nop dword ptr [rax + rax]; ret; 
0x0000000000002b54: or eax, 0xc8928a39; mov cl, 0xda; fnsave dword ptr [rdx - 0x6b]; test word ptr [rbx - 0x2e], bp; cmp dl, byte ptr [rdi]; ret; 
0x00000000000a1b37: or eax, 0xce8c100; and eax, 0xf; movsxd rsi, dword ptr [rcx + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000a1af7: or eax, 0xce8c100; and eax, 0xf; movsxd rsi, dword ptr [rdx + rax*4]; add rdx, rsi; jmp rdx; 
0x000000000010ad38: or eax, 0xd0758d48; lea rdi, qword ptr [rip - 0x174]; call rax; 
0x00000000000c2424: or eax, 0xd0f88149; or edx, eax; or esp, dword ptr [rsi - 0x48]; call 0xfffffffff3d59a30; ret; 
0x0000000000117bca: or eax, 0xd175d739; mov qword ptr [rsi], rcx; xor eax, eax; ret; 
0x00000000000a1b34: or eax, 0xd6deb; shr eax, 0xc; and eax, 0xf; movsxd rsi, dword ptr [rcx + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000d1d22: or eax, 0xe8c1c889; add eax, dword ptr [rbx + 0x1f0f01e0]; add byte ptr [rax], r8b; pop rbx; ret; 
0x000000000002f5ef: or eax, 0xe9000000; ret; 
0x000000000014cc4a: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000b827c: or eax, 0xf40000c; mov dh, 0xd6; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000186845: or eax, 0xf50fffc; cld; call qword ptr [rax + 0x11]; cld; jmp rax; 
0x000000000014cc53: or eax, 0xf7f0ff3; ret; 
0x00000000000d47b5: or eax, 0xf7fffffc; ret 0; 
0x0000000000186825: or eax, 0xf80fffc; cld; inc dword ptr [rax + 0x10fffc11]; add al, 0xfc; call rax; 
0x00000000001867e5: or eax, 0xfc0fffc; cld; inc eax; adc esp, edi; call qword ptr [rax + 4]; 
0x000000000018e71d: or eax, 0xffe95f4f; sbb al, 0xd; add bl, byte ptr [rsi - 0x17]; jmp qword ptr [rdx]; 
0x000000000018e645: or eax, 0xffe96012; sbb al, 0xd; or dword ptr [rbp - 0x17], ebx; jmp qword ptr [rdx]; 
0x000000000018e5fd: or eax, 0xffe96053; sbb al, 0xd; sub bl, byte ptr [rbp - 0x17]; jmp qword ptr [rdx]; 
0x000000000018fced: or eax, 0xffea1d6e; sbb al, 0xd; push rbp; adc edx, ebp; jmp qword ptr [rdx]; 
0x000000000018fc5d: or eax, 0xffea1df0; sbb al, 0xd; stosb byte ptr [rdi], al; or al, 0xea; jmp qword ptr [rdx]; 
0x000000000018fc15: or eax, 0xffea1e31; sbb al, 0xd; or bpl, r10b; jmp qword ptr [rdx]; 
0x0000000000192a7d: or eax, 0xffeb25bb; sbb al, 0xd; xchg eax, ecx; and al, 0xeb; jmp qword ptr [rdx]; 
0x0000000000192a35: or eax, 0xffeb25fc; sbb al, 0xd; sahf; and al, 0xeb; jmp qword ptr [rdx]; 
0x00000000001929ed: or eax, 0xffeb263d; sbb al, 0xd; shl dword ptr [rbx], -0x15; jmp qword ptr [rdx]; 
0x00000000001929a5: or eax, 0xffeb267e; sbb al, 0xd; shl dword ptr [rbx], -0x15; jmp qword ptr [rdx]; 
0x000000000019295d: or eax, 0xffeb26bf; sbb al, 0xd; insd dword ptr [rdi], dx; and ebp, ebx; jmp qword ptr [rdx]; 
0x0000000000192915: or eax, 0xffeb2700; sbb al, 0xd; insb byte ptr [rdi], dx; and ebp, ebx; jmp qword ptr [rdx]; 
0x0000000000193045: or eax, 0xffeb4af5; sbb al, 0xd; add ecx, dword ptr [rdx - 0x15]; jmp qword ptr [rdx]; 
0x0000000000192ffd: or eax, 0xffeb4b36; sbb al, 0xd; fmul dword ptr [rcx - 0x15]; jmp qword ptr [rdx]; 
0x0000000000193efd: or eax, 0xffec7fa6; sbb al, 0xd; jp 0x193f85; in al, dx; jmp qword ptr [rdx]; 
0x0000000000194195: or eax, 0xffec802b; sbb al, 0xd; fdivr dword ptr [rdi - 0x14]; jmp qword ptr [rdx]; 
0x000000000019431d: or eax, 0xffec80f8; sbb al, 0xd; xor al, 0x80; in al, dx; jmp qword ptr [rdx]; 
0x0000000000194575: or eax, 0xffecdc77; sbb al, 0xd; fucomi st(4); jmp qword ptr [rdx]; 
0x000000000019452d: or eax, 0xffecdcbc; sbb al, 0xd; mov al, 0x87; in al, dx; jmp qword ptr [rdx]; 
0x00000000001944e5: or eax, 0xffecdd01; sbb al, 0xd; xchg r12d, r13d; jmp qword ptr [rdx]; 
0x0000000000194a45: or eax, 0xffed6fbd; sbb al, 0xd; sub al, 0x6f; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001949fd: or eax, 0xffed7002; sbb al, 0xd; outsd dx, dword ptr [rsi]; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001949b5: or eax, 0xffed7047; sbb al, 0xd; adc byte ptr [rdi - 0x13], ch; jmp qword ptr [rdx]; 
0x0000000000194925: or eax, 0xffed70c9; sbb al, 0xd; cld; outsb dx, byte ptr [rsi]; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000194ba5: or eax, 0xffed71e0; sbb al, 0xd; lea esi, dword ptr [rcx - 0x13]; jmp qword ptr [rdx]; 
0x0000000000194c5d: or eax, 0xffed72ad; sbb al, 0xd; ret; 
0x0000000000194c15: or eax, 0xffed72f2; sbb al, 0xd; mov dh, byte ptr [rcx - 0x13]; jmp qword ptr [rdx]; 
0x0000000000194d1d: or eax, 0xffed733d; sbb al, 0xd; and byte ptr [rdx - 0x13], dh; jmp qword ptr [rdx]; 
0x0000000000195155: or eax, 0xffed747f; sbb al, 0xd; sub al, 0x74; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000195445: or eax, 0xffed756a; sbb al, 0xd; bnd je 0x19543c; jmp qword ptr [rdx]; 
0x00000000001955cd: or eax, 0xffed76bd; sbb al, 0xd; push 0x76; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019572d: or eax, 0xffed7873; sbb al, 0xd; int 0x77; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000195af5: or eax, 0xffed7d8b; sbb al, 0xd; loope 0x195b7a; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000195965: or eax, 0xffed7d91; sbb al, 0xd; pop rsp; jp 0x19595c; jmp qword ptr [rdx]; 
0x000000000019591d: or eax, 0xffed7dd2; sbb al, 0xd; jp 0x195914; jmp qword ptr [rdx]; 
0x00000000001958d5: or eax, 0xffed7e13; sbb al, 0xd; push rsp; jns 0x1958cc; jmp qword ptr [rdx]; 
0x0000000000195c05: or eax, 0xffed7f06; sbb al, 0xd; sbb dword ptr [rsi - 0x13], edi; jmp qword ptr [rdx]; 
0x00000000001960a5: or eax, 0xffed7f14; sbb al, 0xd; fdivr qword ptr [rsi - 0x13]; jmp qword ptr [rdx]; 
0x000000000019605d: or eax, 0xffed7f5c; sbb al, 0xd; out 0x7e, al; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000196735: or eax, 0xffed837f; sbb al, 0xd; sub al, 0x83; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000196b65: or eax, 0xffed8500; sbb al, 0xd; lodsd eax, dword ptr [rsi]; test ch, ch; jmp qword ptr [rdx]; 
0x0000000000196835: or eax, 0xffed8567; sbb al, 0xd; adc al, 0x85; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000196915: or eax, 0xffed856b; sbb al, 0xd; out dx, eax; test ch, ch; jmp qword ptr [rdx]; 
0x00000000001969d5: or eax, 0xffed8586; sbb al, 0xd; ret 0xed84; 
0x0000000000196ad5: or eax, 0xffed858a; sbb al, 0xd; mov ch, 0x84; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001968cd: or eax, 0xffed85b0; sbb al, 0xd; in al, dx; test ch, ch; jmp qword ptr [rdx]; 
0x0000000000196d05: or eax, 0xffed85bf; sbb al, 0xd; insb byte ptr [rdi], dx; test ebp, ebp; jmp qword ptr [rdx]; 
0x00000000001971d5: or eax, 0xffed8a69; sbb al, 0xd; pop rdx; mov ebp, ebp; jmp qword ptr [rdx]; 
0x0000000000197365: or eax, 0xffed8bb7; sbb al, 0xd; mov ebp, ebp; jmp qword ptr [rdx]; 
0x0000000000198735: or eax, 0xffedbcfd; sbb al, 0xd; jno 0x1986fa; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000198895: or eax, 0xffedbd16; sbb al, 0xd; ret; 
0x000000000019884d: or eax, 0xffedbd5b; sbb al, 0xd; test al, 0xbc; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001980cd: or eax, 0xffedbe22; sbb al, 0xd; int1; stosd dword ptr [rdi], eax; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000198ff5: or eax, 0xffede143; sbb al, 0xd; in eax, dx; fsubp st(5); jmp qword ptr [rdx]; 
0x0000000000198fad: or eax, 0xffede188; sbb al, 0xd; add esi, ebx; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000198f65: or eax, 0xffede1cd; sbb al, 0xd; neg ch; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000199b6d: or eax, 0xffedf669; sbb al, 0xd; in al, 0xf3; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000199b25: or eax, 0xffedf6aa; sbb al, 0xd; sti; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000199add: or eax, 0xffedf6eb; sbb al, 0xd; mov cl, 0xef; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000199a95: or eax, 0xffedf72c; sbb al, 0xd; test al, 0xef; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000199a4d: or eax, 0xffedf771; sbb al, 0xd; cmpsd dword ptr [rsi], dword ptr [rdi]; out dx, eax; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001999bd: or eax, 0xffedf7f7; sbb al, 0xd; cmp ch, bh; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000199975: or eax, 0xffedf83c; sbb al, 0xd; shr ebp, cl; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001998e5: or eax, 0xffedf8c2; sbb al, 0xd; in eax, dx; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000199855: or eax, 0xffedf948; sbb al, 0xd; add ch, bl; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019980d: or eax, 0xffedf98d; sbb al, 0xd; mov ah, 0xdc; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001997c5: or eax, 0xffedf9ce; sbb al, 0xd; jns 0x1997aa; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000199735: or eax, 0xffedfa54; sbb al, 0xd; adc ah, bl; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001996ed: or eax, 0xffedfa99; sbb al, 0xd; out 0xdb, eax; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001996a5: or eax, 0xffedfada; sbb al, 0xd; mov bl, bl; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000199615: or eax, 0xffedfb60; sbb al, 0xd; jns 0x1995f9; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019b60d: or eax, 0xffee5aa4; sbb al, 0xd; mov ch, 0x51; out dx, al; jmp qword ptr [rdx]; 
0x000000000019b57d: or eax, 0xffee5b2e; sbb al, 0xd; push r9; out dx, al; jmp qword ptr [rdx]; 
0x000000000019b535: or eax, 0xffee5b73; sbb al, 0xd; sti; out dx, al; jmp qword ptr [rdx]; 
0x000000000019b4ed: or eax, 0xffee5bb8; sbb al, 0xd; xor ecx, dword ptr [rdi - 0x12]; jmp qword ptr [rdx]; 
0x000000000019b45d: or eax, 0xffee5c3e; sbb al, 0xd; dec dword ptr [rcx - 0x12]; jmp qword ptr [rdx]; 
0x000000000019b3cd: or eax, 0xffee5cc0; sbb al, 0xd; stosb byte ptr [rdi], al; out dx, al; jmp qword ptr [rdx]; 
0x000000000019b385: or eax, 0xffee5d01; sbb al, 0xd; cmp dword ptr [rdx - 0x12], eax; jmp qword ptr [rdx]; 
0x000000000019b33d: or eax, 0xffee5d46; sbb al, 0xd; out dx, al; jmp qword ptr [rdx]; 
0x000000000019b265: or eax, 0xffee5e15; sbb al, 0xd; cld; out dx, al; jmp qword ptr [rdx]; 
0x000000000019b1d5: or eax, 0xffee5e9e; sbb al, 0xd; ret 0xee3c; 
0x000000000019b145: or eax, 0xffee5f26; sbb al, 0xd; xchg byte ptr [rsi + rbp*8], bh; jmp qword ptr [rdx]; 
0x000000000019b0fd: or eax, 0xffee5f67; sbb al, 0xd; cmp byte ptr [rbx], bh; out dx, al; jmp qword ptr [rdx]; 
0x000000000019b0b5: or eax, 0xffee5fa8; sbb al, 0xd; xchg eax, edi; cmp ch, dh; jmp qword ptr [rdx]; 
0x000000000019b06d: or eax, 0xffee5fe9; sbb al, 0xd; sar dword ptr [rdx], cl; out dx, al; jmp qword ptr [rdx]; 
0x000000000019b025: or eax, 0xffee602a; sbb al, 0xd; mov cl, 0x3a; out dx, al; jmp qword ptr [rdx]; 
0x000000000019ae75: or eax, 0xffee61bc; sbb al, 0xd; jns 0x19aeb5; out dx, al; jmp qword ptr [rdx]; 
0x000000000019ae2d: or eax, 0xffee61fd; sbb al, 0xd; cmpsd dword ptr [rsi], dword ptr [rdi]; xor ebp, esi; jmp qword ptr [rdx]; 
0x000000000019ade5: or eax, 0xffee623e; sbb al, 0xd; xor bpl, sil; jmp qword ptr [rdx]; 
0x000000000019c53d: or eax, 0xffee627a; sbb al, 0xd; pop rax; pop rdi; out dx, al; jmp qword ptr [rdx]; 
0x000000000019c4f5: or eax, 0xffee62bb; sbb al, 0xd; xchg dword ptr [rdi - 0x12], ebx; jmp qword ptr [rdx]; 
0x000000000019ad55: or eax, 0xffee62c0; sbb al, 0xd; cdq; xor dh, ch; jmp qword ptr [rdx]; 
0x000000000019c4ad: or eax, 0xffee62fc; sbb al, 0xd; scasb al, byte ptr [rdi]; pop rsi; out dx, al; jmp qword ptr [rdx]; 
0x000000000019ad0d: or eax, 0xffee6301; sbb al, 0xd; mov dl, 0x2b; out dx, al; jmp qword ptr [rdx]; 
0x000000000019c41d: or eax, 0xffee637e; sbb al, 0xd; pop rbp; out dx, al; jmp qword ptr [rdx]; 
0x000000000019ac7d: or eax, 0xffee6383; sbb al, 0xd; loope 0x19acae; out dx, al; jmp qword ptr [rdx]; 
0x000000000019ac35: or eax, 0xffee63c4; sbb al, 0xd; ljmp ptr [rax]; out dx, al; jmp qword ptr [rdx]; 
0x000000000019abed: or eax, 0xffee6405; sbb al, 0xd; mov dword ptr [rbx], edx; out dx, al; jmp qword ptr [rdx]; 
0x000000000019aba5: or eax, 0xffee6449; sbb al, 0xd; movsd dword ptr [rdi], dword ptr [rsi]; adc ebp, esi; jmp qword ptr [rdx]; 
0x000000000019ab5d: or eax, 0xffee648d; sbb al, 0xd; out dx, al; adc ch, dh; jmp qword ptr [rdx]; 
0x000000000019a9f5: or eax, 0xffee65df; sbb al, 0xd; mov dl, 0xff; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019a965: or eax, 0xffee6665; sbb al, 0xd; mov ch, 0xff; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019a8d5: or eax, 0xffee66eb; sbb al, 0xd; idiv dh; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019a88d: or eax, 0xffee6730; sbb al, 0xd; xor edi, esi; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019a7fd: or eax, 0xffee67b6; sbb al, 0xd; mov edi, esi; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019a7b5: or eax, 0xffee67f7; sbb al, 0xd; sar ah, 0xed; jmp qword ptr [rdx]; 
0x000000000019a725: or eax, 0xffee687d; sbb al, 0xd; sub al, 0xfb; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019a6dd: or eax, 0xffee68c2; sbb al, 0xd; add bh, dl; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019fd25: or eax, 0xfff0dca5; sbb al, 0xd; push rdi; fcomi st(0); jmp qword ptr [rdx]; 
0x000000000019fc95: or eax, 0xfff0dd27; sbb al, 0xd; fcomi st(0); jmp qword ptr [rdx]; 
0x00000000001a052d: or eax, 0xfff176d2; sbb al, 0xd; and al, 0x76; int1; jmp qword ptr [rdx]; 
0x00000000001a06dd: or eax, 0xfff176df; sbb al, 0xd; xchg dword ptr [rsi - 0xf], esi; jmp qword ptr [rdx]; 
0x00000000001a05fd: or eax, 0xfff17762; sbb al, 0xd; sub al, 0x76; int1; jmp qword ptr [rdx]; 
0x00000000001a0c2d: or eax, 0xfff17ec9; sbb al, 0xd; mov byte ptr [rsi - 0xf], bh; jmp qword ptr [rdx]; 
0x00000000001a0da5: or eax, 0xfff17fc2; sbb al, 0xd; cmp bh, byte ptr [rdi - 0xf]; jmp qword ptr [rdx]; 
0x00000000001a0d5d: or eax, 0xfff18003; sbb al, 0xd; fidivr word ptr [rsi - 0xf]; jmp qword ptr [rdx]; 
0x00000000001a0e2d: or eax, 0xfff18154; sbb al, 0xd; test byte ptr [rdi - 0xf], bh; jmp qword ptr [rdx]; 
0x00000000001a102d: or eax, 0xfff1819e; sbb al, 0xd; cmp al, 0x80; int1; jmp qword ptr [rdx]; 
0x00000000001a12fd: or eax, 0xfff188e0; sbb al, 0xd; mov r9b, sil; jmp qword ptr [rdx]; 
0x00000000001a12b5: or eax, 0xfff18925; sbb al, 0xd; mov r9b, r14b; jmp qword ptr [rdx]; 
0x00000000001a1415: or eax, 0xfff18964; sbb al, 0xd; cmc; xchg ecx, esi; jmp qword ptr [rdx]; 
0x00000000001a126d: or eax, 0xfff1896a; sbb al, 0xd; push rsi; mov cl, dh; jmp qword ptr [rdx]; 
0x00000000001a160d: or eax, 0xfff18adb; sbb al, 0xd; mov dh, 0x89; int1; jmp qword ptr [rdx]; 
0x00000000001a1915: or eax, 0xfff18b64; sbb al, 0xd; movsb byte ptr [rdi], byte ptr [rsi]; mov dh, cl; jmp qword ptr [rdx]; 
0x00000000001a17f5: or eax, 0xfff18c68; sbb al, 0xd; xchg eax, esi; mov dh, cl; jmp qword ptr [rdx]; 
0x00000000001a1b55: or eax, 0xfff192e7; sbb al, 0xd; xchg eax, edx; int1; jmp qword ptr [rdx]; 
0x00000000001a1a7d: or eax, 0xfff193b6; sbb al, 0xd; hlt; xchg eax, ecx; int1; jmp qword ptr [rdx]; 
0x00000000001a2dd5: or eax, 0xfff3b072; sbb al, 0xd; ret; 
0x00000000001a671d: or eax, 0xfff46e75; sbb al, 0xd; add ch, byte ptr [rcx - 0xc]; jmp qword ptr [rdx]; 
0x00000000001a8a6d: or eax, 0xfff4de61; sbb al, 0xd; and dh, bl; hlt; jmp qword ptr [rdx]; 
0x00000000001a8b15: or eax, 0xfff4def2; sbb al, 0xd; push -0x22; hlt; jmp qword ptr [rdx]; 
0x00000000001a8be5: or eax, 0xfff4df91; sbb al, 0xd; out dx, al; fdivrp st(4); jmp qword ptr [rdx]; 
0x00000000001a8b9d: or eax, 0xfff4dfd2; sbb al, 0xd; xchg dh, bl; hlt; jmp qword ptr [rdx]; 
0x00000000001a8dad: or eax, 0xfff4e36b; sbb al, 0xd; cmp cl, ah; hlt; jmp qword ptr [rdx]; 
0x00000000001a8d65: or eax, 0xfff4e3b0; sbb al, 0xd; out 0xdf, al; hlt; jmp qword ptr [rdx]; 
0x00000000001a8f9d: or eax, 0xfff4e3c4; sbb al, 0xd; add al, 0xe3; hlt; jmp qword ptr [rdx]; 
0x00000000001a8f0d: or eax, 0xfff4e446; sbb al, 0xd; in al, 0xe2; hlt; jmp qword ptr [rdx]; 
0x00000000001a8e7d: or eax, 0xfff4e4c8; sbb al, 0xd; mul dl; hlt; jmp qword ptr [rdx]; 
0x00000000001a91ad: or eax, 0xfff4e9cc; sbb al, 0xd; or ecx, ebp; hlt; jmp qword ptr [rdx]; 
0x00000000001a9165: or eax, 0xfff4ea11; sbb al, 0xd; sbb ecx, ebp; hlt; jmp qword ptr [rdx]; 
0x00000000001a959d: or eax, 0xfff4eb3a; sbb al, 0xd; mov dl, 0xea; hlt; jmp qword ptr [rdx]; 
0x00000000001a9625: or eax, 0xfff4ec1e; sbb al, 0xd; shr dl, 1; hlt; jmp qword ptr [rdx]; 
0x00000000001a983d: or eax, 0xfff4edcf; sbb al, 0xd; and ebp, ebp; hlt; jmp qword ptr [rdx]; 
0x00000000001a97f5: or eax, 0xfff4ee14; sbb al, 0xd; sub ch, ah; hlt; jmp qword ptr [rdx]; 
0x00000000001a9a3d: or eax, 0xfff4ee24; sbb al, 0xd; in eax, dx; hlt; jmp qword ptr [rdx]; 
0x00000000001a99ad: or eax, 0xfff4eea6; sbb al, 0xd; in eax, dx; hlt; jmp qword ptr [rdx]; 
0x00000000001a9965: or eax, 0xfff4eee7; sbb al, 0xd; in eax, dx; hlt; jmp qword ptr [rdx]; 
0x00000000001a991d: or eax, 0xfff4ef28; sbb al, 0xd; push rsi; in eax, dx; hlt; jmp qword ptr [rdx]; 
0x00000000001a98d5: or eax, 0xfff4ef69; sbb al, 0xd; in eax, dx; hlt; jmp qword ptr [rdx]; 
0x00000000001a9c85: or eax, 0xfff4f3cc; sbb al, 0xd; or ebx, esi; hlt; jmp qword ptr [rdx]; 
0x00000000001a9c3d: or eax, 0xfff4f411; sbb al, 0xd; sbb al, 0xf3; hlt; jmp qword ptr [rdx]; 
0x00000000001a9bf5: or eax, 0xfff4f456; sbb al, 0xd; xchg eax, esp; hlt; jmp qword ptr [rdx]; 
0x00000000001aaadd: or eax, 0xfff5520c; sbb al, 0xd; push rcx; cmc; jmp qword ptr [rdx]; 
0x00000000001aaa95: or eax, 0xfff5524d; sbb al, 0xd; cli; push rax; cmc; jmp qword ptr [rdx]; 
0x00000000001aabdd: or eax, 0xfff55274; sbb al, 0xd; mov ch, 0x51; cmc; jmp qword ptr [rdx]; 
0x00000000001aaff5: or eax, 0xfff55ae0; sbb al, 0xd; lea ebx, dword ptr [rdx - 0xb]; jmp qword ptr [rdx]; 
0x00000000001ab335: or eax, 0xfff55b38; sbb al, 0xd; in eax, 0x5a; cmc; jmp qword ptr [rdx]; 
0x00000000001ab21d: or eax, 0xfff55b4b; sbb al, 0xd; clc; pop rdx; cmc; jmp qword ptr [rdx]; 
0x00000000001ab2ed: or eax, 0xfff55b7d; sbb al, 0xd; lcall ptr [rdx - 0xb]; jmp qword ptr [rdx]; 
0x00000000001ab0c5: or eax, 0xfff55b82; sbb al, 0xd; lcall ptr [rdx - 0xb]; jmp qword ptr [rdx]; 
0x00000000001ab1d5: or eax, 0xfff55b90; sbb al, 0xd; add bl, byte ptr [rbx - 0xb]; jmp qword ptr [rdx]; 
0x00000000001ab2a5: or eax, 0xfff55bc2; sbb al, 0xd; out dx, eax; pop rdx; cmc; jmp qword ptr [rdx]; 
0x00000000001ab07d: or eax, 0xfff55bc7; sbb al, 0xd; ret; 
0x00000000001ab18d: or eax, 0xfff55bd5; sbb al, 0xd; pop rdx; cmc; jmp qword ptr [rdx]; 
0x00000000001ab3b5: or eax, 0xfff55c5a; sbb al, 0xd; in eax, dx; pop rdx; cmc; jmp qword ptr [rdx]; 
0x00000000001ab845: or eax, 0xfff55d39; sbb al, 0xd; out 0x5c, al; cmc; jmp qword ptr [rdx]; 
0x00000000001ab5dd: or eax, 0xfff55d5b; sbb al, 0xd; or byte ptr [rbp - 0xb], bl; jmp qword ptr [rdx]; 
0x00000000001ab7fd: or eax, 0xfff55d7e; sbb al, 0xd; mov dh, 0x5c; cmc; jmp qword ptr [rdx]; 
0x00000000001ab595: or eax, 0xfff55da0; sbb al, 0xd; hlt; pop rsp; cmc; jmp qword ptr [rdx]; 
0x00000000001ab7b5: or eax, 0xfff55dc3; sbb al, 0xd; mov cl, 0x5c; cmc; jmp qword ptr [rdx]; 
0x00000000001abff5: or eax, 0xfff56a03; sbb al, 0xd; mov al, 0x69; cmc; jmp qword ptr [rdx]; 
0x00000000001abd3d: or eax, 0xfff56a22; sbb al, 0xd; sbb dword ptr [rcx - 0xb], ebp; jmp qword ptr [rdx]; 
0x00000000001ac0c5: or eax, 0xfff56a35; sbb al, 0xd; mov bh, 0x69; cmc; jmp qword ptr [rdx]; 
0x00000000001abe9d: or eax, 0xfff56a3a; sbb al, 0xd; mov bh, 0x69; cmc; jmp qword ptr [rdx]; 
0x00000000001abe55: or eax, 0xfff56a7f; sbb al, 0xd; jnp 0x1abec7; cmc; jmp qword ptr [rdx]; 
0x00000000001ac58d: or eax, 0xfff56cf4; sbb al, 0xd; shr dword ptr [rdx - 0xb], cl; jmp qword ptr [rdx]; 
0x00000000001ac7d5: or eax, 0xfff56f2f; sbb al, 0xd; mov byte ptr [rsi - 0xb], ch; jmp qword ptr [rdx]; 
0x00000000001ac78d: or eax, 0xfff56f70; sbb al, 0xd; add ch, byte ptr [rsi - 0xb]; jmp qword ptr [rdx]; 
0x00000000001ac8d5: or eax, 0xfff5739b; sbb al, 0xd; or al, 0x72; cmc; jmp qword ptr [rdx]; 
0x00000000001ac99d: or eax, 0xfff5749f; sbb al, 0xd; add byte ptr [rbx - 0xb], dh; jmp qword ptr [rdx]; 
0x00000000001acd7d: or eax, 0xfff57b0b; sbb al, 0xd; jp 0x1acd7c; jmp qword ptr [rdx]; 
0x00000000001ace5d: or eax, 0xfff57bb7; sbb al, 0xd; adc byte ptr [rbx - 0xb], bh; jmp qword ptr [rdx]; 
0x00000000001acca5: or eax, 0xfff57bce; sbb al, 0xd; and edi, dword ptr [rdx - 0xb]; jmp qword ptr [rdx]; 
0x00000000001ace15: or eax, 0xfff57bf8; sbb al, 0xd; xchg eax, ebp; jp 0x1ace14; jmp qword ptr [rdx]; 
0x00000000001acc5d: or eax, 0xfff57c0f; sbb al, 0xd; xor dword ptr [rdx - 0xb], edi; jmp qword ptr [rdx]; 
0x00000000001acc15: or eax, 0xfff57c50; sbb al, 0xd; sub byte ptr [rdx - 0xb], bh; jmp qword ptr [rdx]; 
0x00000000001acfa5: or eax, 0xfff57e7e; sbb al, 0xd; fdivr dword ptr [rbp - 0xb]; jmp qword ptr [rdx]; 
0x00000000001ad16d: or eax, 0xfff57f7e; sbb al, 0xd; sar dword ptr [rbp - 0xb], cl; jmp qword ptr [rdx]; 
0x00000000001ad125: or eax, 0xfff57fbf; sbb al, 0xd; loope 0x1ad1ab; cmc; jmp qword ptr [rdx]; 
0x00000000001ad0dd: or eax, 0xfff58000; sbb al, 0xd; fdivr dword ptr [rbp - 0xb]; jmp qword ptr [rdx]; 
0x00000000001ad76d: or eax, 0xfff5834a; sbb al, 0xd; ret 0xf582; 
0x00000000001ad8a5: or eax, 0xfff5855b; sbb al, 0xd; int 0x84; cmc; jmp qword ptr [rdx]; 
0x00000000001ad9e5: or eax, 0xfff587db; sbb al, 0xd; push rax; xchg ebp, esi; jmp qword ptr [rdx]; 
0x00000000001ad99d: or eax, 0xfff5881c; sbb al, 0xd; xchg ch, dh; jmp qword ptr [rdx]; 
0x00000000001adb25: or eax, 0xfff58991; sbb al, 0xd; push rax; mov ebp, esi; jmp qword ptr [rdx]; 
0x00000000001adadd: or eax, 0xfff589d5; sbb al, 0xd; pop rbp; mov ebp, esi; jmp qword ptr [rdx]; 
0x00000000001adced: or eax, 0xfff58a0f; sbb al, 0xd; mov r13, r14; jmp qword ptr [rdx]; 
0x00000000001ade75: or eax, 0xfff58a4a; sbb al, 0xd; ret 0xf589; 
0x00000000001ade2d: or eax, 0xfff58a8b; sbb al, 0xd; mov bp, si; jmp qword ptr [rdx]; 
0x00000000001adc5d: or eax, 0xfff58a91; sbb al, 0xd; sub al, 0x89; cmc; jmp qword ptr [rdx]; 
0x00000000001adbcd: or eax, 0xfff58b13; sbb al, 0xd; mov r13d, esi; jmp qword ptr [rdx]; 
0x00000000001ae135: or eax, 0xfff58b17; sbb al, 0xd; push rdi; mov dh, ch; jmp qword ptr [rdx]; 
0x00000000001ae0a5: or eax, 0xfff58b99; sbb al, 0xd; xor al, 0x8a; cmc; jmp qword ptr [rdx]; 
0x00000000001ae015: or eax, 0xfff58c1b; sbb al, 0xd; mov sil, r13b; jmp qword ptr [rdx]; 
0x00000000001adfcd: or eax, 0xfff58c5c; sbb al, 0xd; mov sil, bpl; jmp qword ptr [rdx]; 
0x00000000001ae55d: or eax, 0xfff59d2c; sbb al, 0xd; movsb byte ptr [rdi], byte ptr [rsi]; xchg eax, edi; cmc; jmp qword ptr [rdx]; 
0x00000000001ae515: or eax, 0xfff59d6d; sbb al, 0xd; mov dl, 0x97; cmc; jmp qword ptr [rdx]; 
0x00000000001ae7ed: or eax, 0xfff5a8f2; sbb al, 0xd; mov al, 0x9b; cmc; jmp qword ptr [rdx]; 
0x00000000001af19d: or eax, 0xfff5e1fd; sbb al, 0xd; test ecx, esp; cmc; jmp qword ptr [rdx]; 
0x00000000001af105: or eax, 0xfff5e21c; sbb al, 0xd; pop rsp; loope 0x1af104; jmp qword ptr [rdx]; 
0x00000000001af28d: or eax, 0xfff5e24a; sbb al, 0xd; ret 0xf5e1; 
0x00000000001af245: or eax, 0xfff5e28b; sbb al, 0xd; loope 0x1af244; jmp qword ptr [rdx]; 
0x00000000001af075: or eax, 0xfff5e29e; sbb al, 0xd; cmp al, 0xe1; cmc; jmp qword ptr [rdx]; 
0x00000000001af02d: or eax, 0xfff5e2df; sbb al, 0xd; loope 0x1af02c; jmp qword ptr [rdx]; 
0x00000000001aefe5: or eax, 0xfff5e320; sbb al, 0xd; loope 0x1aefe4; jmp qword ptr [rdx]; 
0x00000000001aef9d: or eax, 0xfff5e361; sbb al, 0xd; loope 0x1aef9c; jmp qword ptr [rdx]; 
0x00000000001af6d5: or eax, 0xfff5f23d; sbb al, 0xd; mov cl, 0xf1; cmc; jmp qword ptr [rdx]; 
0x00000000001af645: or eax, 0xfff5f2bf; sbb al, 0xd; jno 0x1af63e; cmc; jmp qword ptr [rdx]; 
0x00000000001aff1d: or eax, 0xfff62354; sbb al, 0xd; cwde; and dh, dh; jmp qword ptr [rdx]; 
0x00000000001afc65: or eax, 0xfff6240a; sbb al, 0xd; nop; and dh, dh; jmp qword ptr [rdx]; 
0x00000000001b0f1d: or eax, 0xfff63ffb; sbb al, 0xd; and bh, byte ptr [rsi + rsi*8]; jmp qword ptr [rdx]; 
0x00000000001b5ccd: or eax, 0xfff73391; sbb al, 0xd; xor esi, r15d; jmp qword ptr [rdx]; 
0x00000000001b5c6d: or eax, 0xfff7339a; sbb al, 0xd; pop rsi; xor esi, edi; jmp qword ptr [rdx]; 
0x00000000001b5c25: or eax, 0xfff733de; sbb al, 0xd; nop; xor esi, edi; jmp qword ptr [rdx]; 
0x00000000001b595d: or eax, 0xfff73573; sbb al, 0xd; xor byte ptr [rdi + rsi*8], dh; jmp qword ptr [rdx]; 
0x00000000001b5915: or eax, 0xfff735b4; sbb al, 0xd; xor al, 0xf7; jmp qword ptr [rdx]; 
0x00000000001b5885: or eax, 0xfff73636; sbb al, 0xd; mov dh, byte ptr [rdi + rsi*8]; jmp qword ptr [rdx]; 
0x00000000001aaa4d: or eax, 0xfffb22e7; sbb al, 0xd; xchg eax, ebx; and bh, bl; jmp qword ptr [rdx]; 
0x00000000001aaa05: or eax, 0xfffb232b; sbb al, 0xd; mov cl, 0x22; sti; jmp qword ptr [rdx]; 
0x000000000019a695: or eax, 0xfffc7c29; sbb al, 0xd; bnd jnp 0x19a69b; jmp qword ptr [rdx]; 
0x0000000000036714: or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret; 
0x0000000000036c6a: or eax, 0xffffffff; ret; 
0x00000000000e3f07: or eax, 2; mov byte ptr [rdi + 0x38], al; mov dword ptr [rsi], edx; mov qword ptr [rsi + 8], rcx; mov qword ptr [rsi + 0x10], r8; ret; 
0x00000000000c2bc0: or eax, dword ptr [eax]; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x00000000001aa492: or eax, dword ptr [r8]; add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; hlt; ret 1; 
0x00000000001aba3a: or eax, dword ptr [r8]; add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + rbx*8 - 0x1407ffff], bl; cmc; jmp qword ptr [rax + 1]; 
0x0000000000145bf4: or eax, dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001aa536: or eax, dword ptr [rax]; adc al, 0; add byte ptr [rax], al; xchg eax, esp; ret; 
0x00000000001372ed: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000139e31: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000137311: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001aa493: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; hlt; ret 1; 
0x00000000001aba3b: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + rbx*8 - 0x1407ffff], bl; cmc; jmp qword ptr [rax + 1]; 
0x000000000000fb60: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x48; 
0x00000000001aa15c: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rdi + rdi*4 - 0x7127ffff], bh; cmc; jmp qword ptr [rbx + 2]; 
0x00000000001ac83c: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rsi + 0x2880001], bl; idiv bh; ret 3; 
0x000000000003d31b: or eax, dword ptr [rax]; add byte ptr [rax], al; mov word ptr [rsi + 0xc], ax; xor eax, eax; ret; 
0x0000000000120d72: or eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000f48a1: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000003fef2: or eax, dword ptr [rax]; add byte ptr [rcx], dh; test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x000000000008c451: or eax, dword ptr [rax]; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000ba140: or eax, dword ptr [rax]; mov eax, esi; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000c2867: or eax, dword ptr [rax]; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000c6451: or eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000000c2bc1: or eax, dword ptr [rax]; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x00000000000c7c12: or eax, dword ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000088536: or eax, dword ptr [rax]; ret; 
0x00000000000755d4: or eax, dword ptr [rbx + 0x674fffe]; mov eax, 0xffffffff; ret; 
0x00000000000ecef7: or eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000001946d5: or eax, dword ptr [rdx]; ret; 
0x0000000000037b73: or eax, dword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000c3285: or eax, dword ptr gs:[rax]; mov esi, esi; movsxd rdx, dword ptr [rax + rsi*4]; add rax, rdx; jmp rax; 
0x00000000000fbc3f: or eax, ebx; add rsp, 0x90; pop rbx; ret; 
0x00000000000362d2: or eax, ecx; movq xmm0, rax; mov dword ptr [rdi], edx; ret; 
0x0000000000093b07: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x00000000000fa4e6: or eax, edi; ret; 
0x0000000000093b0e: or eax, edx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x0000000000036733: or eax, edx; mov dword ptr [rsp + 0x10], eax; fld xword ptr [rsp + 8]; ret; 
0x0000000000091c97: or eax, edx; mov qword ptr [rdi], rax; pop rbx; pop rbp; ret; 
0x00000000000364ff: or eax, edx; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x00000000000fbc3d: or eax, edx; or eax, ebx; add rsp, 0x90; pop rbx; ret; 
0x00000000000fa522: or eax, edx; or rax, rsi; or rax, rdi; ret; 
0x000000000003c8cc: or eax, edx; ret; 
0x00000000000363c9: or eax, edx; sar eax, 0x1f; not eax; and eax, ecx; ret; 
0x000000000003600a: or eax, edx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x000000000010c5b2: or eax, esi; bswap eax; ret; 
0x00000000000f060e: or eax, esi; mov dword ptr [rdi + 8], eax; xor eax, eax; ret; 
0x0000000000039cfb: or eax, esi; mov qword ptr [rdi], rax; mov eax, 1; ret; 
0x00000000000fa525: or eax, esi; or rax, rdi; ret; 
0x000000000007c5c4: or ebp, dword ptr [rbx]; push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000133785: or ebp, dword ptr [rcx]; add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000001], edx; add esp, 8; ret; 
0x0000000000133758: or ebp, dword ptr [rcx]; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000001], esp; mov eax, dword ptr [rip + 0x28c128]; call qword ptr [rax]; 
0x00000000000ed2e7: or ebp, dword ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ed320: or ebp, dword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000003c0bc: or ebp, ecx; mov esi, 0x66fffff6; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000001365d4: or ebp, ecx; out 0, al; int1; jmp qword ptr [rsi + 0xf]; 
0x00000000001b66fb: or ebp, edx; add dword ptr [rbx], eax; ret; 
0x0000000000074e14: or ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000dbb22: or ebx, edi; call rcx; 
0x00000000001a9c8c: or ebx, esi; hlt; jmp qword ptr [rdx]; 
0x000000000014ce13: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x000000000007140e: or ebx, esi; ret; 
0x000000000002fab3: or ebx, esp; cmp byte ptr [rax], al; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000083592: or ecx, dword ptr [rax + 0x63]; ret; 
0x0000000000078f1f: or ecx, dword ptr [rax + 1]; ret 0x8949; 
0x000000000012ac74: or ecx, dword ptr [rax + 5]; test al, 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000008c5e8: or ecx, dword ptr [rax + rax]; ret; 
0x00000000000782ae: or ecx, dword ptr [rax - 0x73]; jno 0x782b7; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x000000000012a80d: or ecx, dword ptr [rax - 0x75]; and al, 0x18; mov dword ptr [rax], 0xf; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x000000000012a9f9: or ecx, dword ptr [rax - 0x75]; and al, 0x18; mov dword ptr [rax], 0xf; mov rax, qword ptr [r15 + 8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x000000000003d180: or ecx, dword ptr [rax - 0x77]; ret 0xb848; 
0x000000000002a7ee: or ecx, dword ptr [rax - 0x77]; ret 0xc889; 
0x00000000000f38c7: or ecx, dword ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000103e2d: or ecx, dword ptr [rax - 0x7d]; ret 0x4830; 
0x0000000000077e33: or ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000218f6: or ecx, dword ptr [rax - 1]; ret 0x9539; 
0x000000000007d079: or ecx, dword ptr [rax]; pop rbx; ret; 
0x00000000000a2b64: or ecx, dword ptr [rbx + 0x463b2847]; sub byte ptr [rbp + 0x63], dh; ret; 
0x00000000000a2bb4: or ecx, dword ptr [rbx + 0x463b3847]; cmp byte ptr [rbp + 0x13], dh; ret; 
0x00000000000257a8: or ecx, dword ptr [rcx + 0x4289504a]; push rsp; ret; 
0x0000000000070499: or ecx, dword ptr [rcx + rcx*4 - 0x1a]; cmovne rbp, rdx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x0000000000102a8f: or ecx, dword ptr [rcx - 0x7d]; ret; 
0x000000000015e827: or ecx, dword ptr [rdi]; test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000009d773: or ecx, dword ptr [rdi]; test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x000000000008b9b2: or ecx, dword ptr [rdx + 0xc38034a]; or al, 0x75; fisttp qword ptr [rax - 1]; ret 0xff48; 
0x0000000000107e53: or ecx, eax; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001a91b4: or ecx, ebp; hlt; jmp qword ptr [rdx]; 
0x0000000000097db7: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000c09bd: or edi, 0xffffffff; mov eax, ecx; syscall; 
0x00000000001931d4: or edi, dword ptr [rax + 0xa]; ret; 
0x0000000000126834: or edi, dword ptr [rax + 1]; ret; 
0x00000000001211c4: or edi, dword ptr [rax + 2]; ret; 
0x00000000001063d4: or edi, dword ptr [rax + 7]; ret; 
0x00000000000369e2: or edi, eax; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x00000000000361bf: or edi, eax; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x0000000000189559: or edi, ebp; inc esp; adc eax, dword ptr [rcx]; add byte ptr [rdx + rcx - 0x11], dh; jmp rsp; 
0x000000000012eafe: or edi, ebp; jmp qword ptr [rsi + 0x2e]; 
0x000000000016517f: or edi, edi; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000009cdd3: or edi, edi; loope 0x9ce3d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000009e077: or edi, edi; loope 0x9e0e1; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000009e3d3: or edi, edi; loope 0x9e43d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000009f887: or edi, edi; loope 0x9f8f1; nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x000000000009feb3: or edi, edi; loope 0x9ff1d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000a0983: or edi, edi; loope 0xa09ed; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x00000000000a1107: or edi, edi; loope 0xa1171; nop dword ptr [rax + rax]; ret; 
0x0000000000186841: or edi, esp; call qword ptr [rax + 0xd]; 
0x0000000000186905: or edi, esp; call rax; 
0x0000000000186821: or edi, esp; inc dword ptr [rax - 0x7f0003f3]; paddb mm7, mm7; adc byte ptr [rcx], 0xfc; call qword ptr [rax]; 
0x0000000000186861: or edi, esp; jmp qword ptr [rax]; 
0x0000000000186881: or edi, esp; jmp rax; 
0x00000000000368e8: or edx, 0x3ffe; mov word ptr [rsp - 0x10], dx; mov dword ptr [rdi], eax; fld xword ptr [rsp - 0x18]; ret; 
0x00000000001a3156: or edx, dword ptr [rax + r8]; add byte ptr [rax], al; mov ah, 0x4f; add dword ptr [rax], eax; ret 0xe7da; 
0x00000000001a3157: or edx, dword ptr [rax + rax]; add byte ptr [rax], al; mov ah, 0x4f; add dword ptr [rax], eax; ret 0xe7da; 
0x0000000000192dbf: or edx, dword ptr [rax + rax]; add byte ptr [rax], al; sbb al, 0x4c; add byte ptr [rax], al; or byte ptr [rdx - 0x15], bl; jmp qword ptr [rsi]; 
0x0000000000039df7: or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x00000000000366f8: or edx, eax; mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x0000000000039e3c: or edx, eax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x00000000000c2429: or edx, eax; or esp, dword ptr [rsi - 0x48]; call 0xfffffffff3d59a30; ret; 
0x0000000000088b57: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000088d28: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000039e39: or edx, ecx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000039df5: or edx, esi; or edx, eax; mov dword ptr [rsp - 4], edx; movss xmm0, dword ptr [rsp - 4]; ret; 
0x0000000000136a51: or esi, dword ptr [rbx - 5]; jmp qword ptr [rsi + 0x2e]; 
0x000000000011ee54: or esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000003708f: or esi, dword ptr [rcx]; ror byte ptr [rax - 0x7f], 0xc4; cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000828d0: or esi, dword ptr [rcx]; salc; mov byte ptr [rax + rbx], sil; pop rbx; ret; 
0x000000000009cd51: or esi, dword ptr [rsi + 0x6349000d]; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000006e566: or esi, eax; mov dword ptr [rbx], esi; pop rbx; pop rbp; pop r12; ret; 
0x0000000000135370: or esi, eax; movsxd rdi, r12d; mov eax, 3; syscall; 
0x000000000014cd33: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000000fa6b4: or esi, ebx; ret; 
0x000000000019f989: or esi, ecx; jmp rcx; 
0x0000000000076936: or esp, dword ptr [rax]; add rsp, 0x28; pop rbx; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000006e467: or esp, dword ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000078d21: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000c242b: or esp, dword ptr [rsi - 0x48]; call 0xfffffffff3d59a30; ret; 
0x00000000000efcb4: or esp, dword ptr [rsi - 0x77]; push rsi; xor ax, ax; ret; 
0x0000000000193a31: or esp, ebp; jmp qword ptr [rcx]; 
0x000000000018687d: or esp, edi; call qword ptr [rax]; 
0x000000000018687d: or esp, edi; call qword ptr [rax]; or edi, esp; jmp rax; 
0x000000000018685d: or esp, edi; inc dword ptr [rax + 0xb]; cld; jmp qword ptr [rax]; 
0x000000000018683d: or esp, edi; push qword ptr [rax + 0xb]; cld; call qword ptr [rax + 0xd]; 
0x00000000001092b5: or esp, esi; inc dword ptr [rbp - 0x7b]; in al, 0x89; ret 0x87e; 
0x00000000001a4851: or esp, esi; jmp rdx; 
0x000000000002579c: or qword ptr [rcx - 0x41f0b3b6], rcx; or cl, byte ptr [rdi]; mov esi, 0x4a890b40; push rax; mov dword ptr [rdx + 0x54], eax; ret; 
0x00000000000d1ecf: or qword ptr [rdi + 0x90], rax; xor eax, eax; ret; 
0x00000000000375d2: or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x0000000000037795: or qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000015a3e5: or qword ptr [rdi], rcx; test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x000000000015e7c6: or qword ptr [rdi], rcx; test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000192dbe: or r10d, dword ptr [rax + rax]; add byte ptr [rax], al; sbb al, 0x4c; add byte ptr [rax], al; or byte ptr [rdx - 0x15], bl; jmp qword ptr [rsi]; 
0x000000000014ce82: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x000000000014ce12: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x00000000000ed31f: or r13d, dword ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000137268: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000014cda2: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x0000000000104956: or r14b, r14b; ret 0x7508; 
0x000000000014cd32: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x000000000012e0c3: or r15b, r15b; push rax; add rsp, 0x10; pop rbx; ret; 
0x000000000011fd84: or r15b, r8b; and al, 0x1c; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x00000000001931d3: or r15d, dword ptr [rax + 0xa]; ret; 
0x00000000001aa535: or r8d, dword ptr [r8]; adc al, 0; add byte ptr [rax], al; xchg eax, esp; ret; 
0x00000000001ac83b: or r8d, dword ptr [r8]; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rsi + 0x2880001], bl; idiv bh; ret 3; 
0x0000000000088535: or r8d, dword ptr [r8]; ret; 
0x00000000001946d4: or r8d, dword ptr [rdx]; ret; 
0x00000000000cd2c3: or r9b, r13b; ret 0xfff8; 
0x000000000015a467: or rax, 0x1e1850f; add byte ptr [rax], al; ret; 
0x000000000015e888: or rax, 0x210850f; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000036c69: or rax, 0xffffffffffffffff; ret; 
0x000000000013f282: or rax, qword ptr [r8]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001aa15b: or rax, qword ptr [rax]; add byte ptr [rax], al; add byte ptr fs:[rax], al; add byte ptr [rdi + rdi*4 - 0x7127ffff], bh; cmc; jmp qword ptr [rbx + 2]; 
0x0000000000037b72: or rax, qword ptr [rsi]; mov qword ptr [rdi], rax; xor eax, eax; ret; 
0x0000000000091c96: or rax, r10; mov qword ptr [rdi], rax; pop rbx; pop rbp; ret; 
0x00000000000362d1: or rax, rcx; movq xmm0, rax; mov dword ptr [rdi], edx; ret; 
0x0000000000093b06: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x00000000000fa527: or rax, rdi; ret; 
0x0000000000093b0d: or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x000000000003c8cb: or rax, rdx; ret; 
0x0000000000036009: or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000039cfa: or rax, rsi; mov qword ptr [rdi], rax; mov eax, 1; ret; 
0x00000000000fa524: or rax, rsi; or rax, rdi; ret; 
0x000000000015e826: or rcx, qword ptr [rdi]; test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000097db6: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000000c09bc: or rdi, 0xffffffffffffffff; mov eax, ecx; syscall; 
0x00000000000361be: or rdi, rax; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x0000000000039e3b: or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000088b56: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000088d27: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000039e38: or rdx, rcx; or rdx, rax; mov qword ptr [rsp - 8], rdx; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000036090: orpd xmm0, xmm1; ret; 
0x0000000000036091: orps xmm0, xmm1; ret; 
0x000000000010896b: out 0, al; add byte ptr [rax], al; mov r10, rcx; syscall; 
0x0000000000108924: out 0, al; add byte ptr [rax], al; syscall; 
0x00000000001365d6: out 0, al; int1; jmp qword ptr [rsi + 0xf]; 
0x00000000000fa520: out 0x20, eax; or eax, edx; or rax, rsi; or rax, rdi; ret; 
0x0000000000143425: out 0x31, eax; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000007ffc5: out 0x33, eax; add byte ptr [rax + 0x39], cl; ror dword ptr [rdi], cl; xchg eax, ebp; ret 0x8348; 
0x00000000000361b9: out 0x34, eax; and rax, rdx; or rdi, rax; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x00000000000369db: out 0x3f, eax; pcmpgtd mm4, qword ptr [rip - 0x38f60f40]; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x00000000000264ce: out 0x41, al; call qword ptr [rdi + 8]; 
0x0000000000028b2e: out 0x41, al; call qword ptr [rsi + 8]; 
0x0000000000105555: out 0x41, eax; call qword ptr [rdx + 0x28]; 
0x000000000001ffe3: out 0x41, eax; call qword ptr [rsi]; 
0x0000000000035751: out 0x43, al; mov eax, dword ptr [rdx + rax*4 + 8]; add rax, qword ptr [rdi + 0x20]; pop rbx; ret; 
0x000000000010c434: out 0x44, al; mov edx, ebp; pop r12; pop r13; jmp rax; 
0x000000000007049c: out 0x48, al; cmovne ebp, edx; mov rdi, rbx; mov rdx, rbp; call qword ptr [rax + 0x58]; 
0x0000000000079029: out 0x48, al; mov dword ptr [rbx + 0xd8], eax; mov qword ptr [rcx + 0x140], rdx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x00000000001336a8: out 0x48, al; mov dword ptr [rip + 0x28c1e0], eax; mov rax, qword ptr [rip + 0x288441]; pop r12; jmp rax; 
0x0000000000133648: out 0x48, al; mov dword ptr [rip + 0x28c240], eax; mov rax, qword ptr [rip + 0x288499]; pop r12; jmp rax; 
0x0000000000121acd: out 0x48, al; mov dword ptr [rsp + 8], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000121a55: out 0x48, al; mov dword ptr [rsp], eax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000a31a9: out 0x48, al; mov eax, ebx; pop rbx; ret; 
0x0000000000079698: out 0x48, al; mov edi, ebp; call qword ptr [rax + 0x78]; 
0x000000000012db3e: out 0x48, al; mov edi, ebp; call qword ptr [rax]; 
0x000000000012a590: out 0x48, al; mov edi, ebp; call rax; 
0x000000000012dafd: out 0x48, al; mov edi, ebp; mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x000000000011dfe0: out 0x48, al; mov edi, ebp; mov rcx, r13; call rbx; 
0x00000000000700e2: out 0x48, al; mov edi, ebx; call qword ptr [rax + 0x48]; 
0x00000000000704cc: out 0x48, al; mov edi, ebx; call qword ptr [rax + 0x58]; 
0x000000000007a3d5: out 0x48, al; mov edi, ebx; call qword ptr [rax + 0x78]; 
0x0000000000121b16: out 0x48, al; mov edi, ebx; call qword ptr [rax]; 
0x0000000000085304: out 0x48, al; mov edi, ebx; call rax; 
0x00000000001202c9: out 0x48, al; mov edi, ebx; mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x0000000000036b49: out 0x48, al; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000bdfc4: out 0x48, eax; mov dword ptr [rsp + 0x10], esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c20ee: out 0x48, eax; mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rip + 0x301f5d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c207e: out 0x48, eax; mov dword ptr [rsp + 0x18], eax; mov rax, qword ptr [rip + 0x301fcd]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007dec7: out 0x48, eax; mov dword ptr [rsp + 8], ecx; and rdi, rdx; neg rdi; call qword ptr [rax]; 
0x00000000000f18ea: out 0x48, eax; mov eax, dword ptr [rip + 0x2d2766]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f187a: out 0x48, eax; mov eax, dword ptr [rip + 0x2d27d6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1e21: out 0x48, eax; mov eax, dword ptr [rip + 0x30222f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c1dc1: out 0x48, eax; mov eax, dword ptr [rip + 0x30228f]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000a2c50: out 0x48, eax; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000641a1: out 0x48, eax; mov edx, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000004efb1: out 0x48, eax; mov edx, ebx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x00000000000cb424: out 0x49, al; movsxd rdi, ebp; mov eax, 0xcb; syscall; 
0x0000000000144466: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000073195: out 0x4c, al; mov edi, ebp; mov eax, r9d; syscall; 
0x00000000000fc1cb: out 0x4c, al; mov edi, ecx; mov qword ptr [rbp - 0x6d0], rax; mov eax, ebx; syscall; 
0x000000000002eb93: out 0x4c, al; mov edi, esi; call 0xf48a0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000126035: out 0x4c, al; mov edi, esp; call qword ptr [rax + 0x48]; 
0x000000000007b604: out 0x4c, eax; lea ebp, dword ptr [rbp + 1]; call qword ptr [rax + 0x18]; 
0x0000000000144296: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144392: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442de: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001616e5: out 0x4d, eax; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000001b12: out 0x59, eax; pop rbx; ret 0x2a63; 
0x000000000007bdc3: out 0x5b, al; ret; 
0x000000000012b868: out 0x5b, eax; ret; 
0x00000000001ab84c: out 0x5c, al; cmc; jmp qword ptr [rdx]; 
0x00000000000eb366: out 0x66, al; nop dword ptr [rax + rax]; mov eax, 0x5f; syscall; 
0x00000000000eb366: out 0x66, al; nop dword ptr [rax + rax]; mov eax, 0x5f; syscall; ret; 
0x00000000000bc326: out 0x7c, al; xor byte ptr [rax], al; lea rdi, qword ptr [rip + 0x3037cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000196064: out 0x7e, al; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000081df6: out 0x80, al; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000002ff53: out 0x80, eax; sete al; ret; 
0x000000000012e0bd: out 0x89, al; add al, 0x24; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x48]; 
0x0000000000118bb5: out 0x89, al; fucompi st(0); ret; 
0x00000000000cbad5: out 0x89, al; ret 0xca83; 
0x00000000000e6ad8: out 0x89, eax; ret 0x8b49; 
0x000000000003b921: out 0x89, eax; ret; 
0x0000000000179394: out 0x95, al; hlt; jmp rsi; 
0x000000000019bb0b: out 0xa, al; ret; 
0x0000000000186418: out 0xa5, al; std; jmp rsi; 
0x000000000018641c: out 0xa6, al; std; jmp rsi; 
0x0000000000186420: out 0xa7, al; std; jmp qword ptr [rsi - 0x58]; 
0x0000000000186428: out 0xa8, al; std; jmp qword ptr [rsi - 0x57]; 
0x0000000000002462: out 0xa9, al; ret 0xbd07; 
0x0000000000186430: out 0xa9, al; std; jmp qword ptr [rsi - 0x56]; 
0x000000000018644c: out 0xad, al; std; jmp qword ptr [rdi - 0x52]; 
0x0000000000039cd6: out 0xb9, al; or eax, 0x29fffffc; ror dword ptr [rax - 0x77], 0x37; mov eax, 1; mov dword ptr [rdx], ecx; ret; 
0x00000000000f75e9: out 0xbf, al; add dword ptr [rax], eax; add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000000087d: out 0xc, eax; movabs eax, dword ptr [0x10c0449000e]; ret 0x440c; 
0x00000000001232a6: out 0xc1, al; out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000012b1da: out 0xc7, al; and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rsp + 0x20], 5; call qword ptr [rax + 0x18]; 
0x0000000000174aa0: out 0xcf, eax; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x0000000000148fa5: out 0xd9, eax; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001996f4: out 0xdb, eax; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a8d6c: out 0xdf, al; hlt; jmp qword ptr [rdx]; 
0x000000000000269d: out 0xdf, eax; syscall; 
0x0000000000133552: out 0xe8, al; add al, byte ptr [rax]; add byte ptr [rbp + 0x482c78c0], al; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000000e639b: out 0xe8, al; call qword ptr [rdx]; 
0x00000000000ecde6: out 0xe8, al; cmp r8d, dword ptr [rax]; add byte ptr [rbp - 0x3f6bf040], al; add rsp, 0x48; movzx eax, al; ret; 
0x000000000010915f: out 0xe8, al; fisttp dword ptr [rdx]; hlt; dec dword ptr [rax - 0x7f]; ret; 
0x000000000005c2dd: out 0xe8, al; lea edx, dword ptr [rbx + 3]; add byte ptr [rcx - 0x77], cl; ret 0x92e9; 
0x00000000000f3c05: out 0xe8, al; xchg eax, ebp; xor edi, ecx; inc dword ptr [rbp - 0x7cee8b40]; ret; 
0x000000000011edbb: out 0xe8, eax; fistp word ptr [rip - 0x74b80000]; and al, 8; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x00000000001314f8: out 0xe8, eax; fucompi st(6); jmp qword ptr [rsi - 0x70]; 
0x000000000011ece0: out 0xe8, eax; mov edx, 0x4800001e; mov eax, dword ptr [rsp + 8]; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x0000000000069db8: out 0xe8, eax; ret 0xfb56; 
0x0000000000025328: out 0xe8, eax; ret 0xffa1; 
0x000000000005b0b7: out 0xe8, eax; ret; 
0x0000000000037325: out 0xe8, eax; xor eax, 0x48fffffc; add esp, 0x88; pop rbx; pop rbp; ret; 
0x000000000003d2ce: out 0xec, al; fiadd word ptr [rip + 0x48000000]; mov dword ptr [rsi + 0x10], eax; xor eax, eax; ret; 
0x0000000000194755: out 0xec, al; jmp qword ptr [rdx]; 
0x00000000000f964b: out 0xf0, eax; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x0000000000178201: out 0xf1, al; call qword ptr [rax]; 
0x00000000001114ce: out 0xf1, eax; jmp qword ptr [rsi + 0x66]; 
0x00000000001a1b79: out 0xf1, eax; jmp rsi; 
0x000000000014c61a: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000092bd9: out 0xf3, al; ret; 
0x000000000014c69a: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000001767c8: out 0xf5, eax; mov ch, 0xab; ret; 
0x00000000001b1119: out 0xf6, al; jmp rdx; 
0x000000000018cd09: out 0xf8, al; dec dword ptr [rbx + rsi*2 - 0x18bbfffe]; clc; call rsp; 
0x000000000018cd11: out 0xf8, eax; call rsp; 
0x0000000000186709: out 0xfb, al; call qword ptr [rax - 0x18]; 
0x0000000000186709: out 0xfb, al; call qword ptr [rax - 0x18]; sti; jmp rax; 
0x0000000000186729: out 0xfb, al; call qword ptr [rax]; 
0x0000000000186729: out 0xfb, al; call qword ptr [rax]; call 0xffffffffdab9672d; sti; call qword ptr [rax - 0x24]; 
0x00000000001866c9: out 0xfb, al; call rax; 
0x00000000001866c9: out 0xfb, al; call rax; call 0xffffffffdb7966cd; sti; jmp qword ptr [rax]; 
0x0000000000186649: out 0xfb, eax; call qword ptr [rax + 0x20fffbe9]; fdiv st(3), st(0); jmp rax; 
0x00000000001866a9: out 0xfb, eax; call qword ptr [rax]; 
0x0000000000186689: out 0xfb, eax; inc dword ptr [rax - 0x17]; sti; call rax; 
0x0000000000120f84: out 0xfc, al; call qword ptr [rax + 0x30]; 
0x0000000000045b28: out 0xff, al; dec dword ptr [rax + 0x39]; ret; 
0x0000000000082ed6: out 0xff, al; dec dword ptr [rax - 0x77]; ret 0x3d83; 
0x0000000000044f8c: out 0xff, al; dec dword ptr [rax - 0x77]; ret; 
0x0000000000067a5f: out 0xff, al; dec dword ptr [rax - 0x7d]; ret 0xeb08; 
0x0000000000177909: out 0xff, al; jmp qword ptr [rsi]; 
0x000000000012d47a: out 0xff, al; push rax; or byte ptr [rbp - 0x14438a40], al; ret 0x1f0f; 
0x00000000000618a8: out 0xff, eax; dec dword ptr [rbp + rcx*4 + 0x2d]; ret; 
0x0000000000177911: out 0xff, eax; inc esp; out 0xff, eax; jmp qword ptr [rcx]; 
0x0000000000177915: out 0xff, eax; jmp qword ptr [rcx]; 
0x000000000005931f: out 0xff, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000006165b: out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x00000000000efb12: out 0xff, eax; jmp qword ptr [rsi - 0x7d]; 
0x00000000000fa4dc: out 0xff, eax; sldt word ptr [rax]; and eax, 0xfffff000; or eax, edi; ret; 
0x00000000001ac7f5: out 1, al; add al, ch; add dh, dh; jmp qword ptr [rbx + 1]; 
0x00000000000712a4: out 1, al; mov eax, esi; ret; 
0x000000000018dd45: out 2, eax; add byte ptr [rbx + rbx*8 - 0x18330006], ah; add al, byte ptr [rax]; mov ah, 0xdb; cli; jmp rsp; 
0x0000000000148324: out 3, al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001481d4: out 3, eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000011810d: out 4, al; lea rax, qword ptr [rdi + rsi + 8]; ret; 
0x00000000001461e5: out 5, eax; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000012ef33: out 7, al; movsxd rcx, dword ptr [rax + rsi*4]; shr rdx, 3; add rax, rcx; jmp rax; 
0x0000000000115955: out dx, al; adc bh, dh; ret 0x8080; 
0x0000000000091b09: out dx, al; adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x000000000019ab64: out dx, al; adc ch, dh; jmp qword ptr [rdx]; 
0x00000000000e3297: out dx, al; add ah, byte ptr [rsi - 0x77]; push rdi; inc byte ptr [rax - 0xa]; mov dword ptr [rdi + rcx], 0xffff0d84; jmp qword ptr [rsi + 0xf]; 
0x00000000000712a1: out dx, al; add al, 0x83; out 1, al; mov eax, esi; ret; 
0x0000000000082be6: out dx, al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x000000000019d03d: out dx, al; add byte ptr [rax], al; cli; out dx, al; call qword ptr [rcx]; 
0x000000000019cfcd: out dx, al; add byte ptr [rax], al; xor dh, dh; out dx, al; call qword ptr [rdx + 4]; 
0x00000000001252e1: out dx, al; add cl, byte ptr [rcx - 0x77]; ret 0xc148; 
0x000000000009737b: out dx, al; add dword ptr [rbp - 0xf], esi; xor eax, eax; ret; 
0x000000000011f3ce: out dx, al; add rdi, 0x18; xor eax, eax; pop rbp; jmp rcx; 
0x00000000001214b1: out dx, al; add rdi, 0x23b0; xor eax, eax; pop rbp; jmp rcx; 
0x000000000017719a: out dx, al; call qword ptr [rax + 0x75]; 
0x000000000017719a: out dx, al; call qword ptr [rax + 0x75]; out dx, al; call qword ptr [rax]; 
0x0000000000177186: out dx, al; call qword ptr [rax]; 
0x000000000019bfb2: out dx, al; call qword ptr [rbp]; 
0x0000000000086a0e: out dx, al; call qword ptr [rbx + 0x40]; 
0x000000000019bcca: out dx, al; call qword ptr [rbx + 1]; 
0x00000000000274dd: out dx, al; call qword ptr [rbx + 8]; 
0x000000000019c5c2: out dx, al; call qword ptr [rbx]; 
0x0000000000199ef2: out dx, al; call qword ptr [rcx]; 
0x0000000000199ec2: out dx, al; call qword ptr [rdi]; 
0x000000000019cfd2: out dx, al; call qword ptr [rdx + 4]; 
0x000000000019a4d2: out dx, al; call qword ptr [rdx]; 
0x000000000019a45a: out dx, al; call qword ptr [rsi]; 
0x0000000000085fba: out dx, al; call rax; 
0x0000000000188bea: out dx, al; call rsp; 
0x0000000000135f14: out dx, al; dec dword ptr [rbx + 0x480c2444]; add esp, 0x48; ret; 
0x0000000000188be2: out dx, al; dec dword ptr [rsi + rcx*8 + 0x608f0000]; out dx, al; call rsp; 
0x00000000001a8bec: out dx, al; fdivrp st(4); jmp qword ptr [rdx]; 
0x00000000001a1c91: out dx, al; int1; call qword ptr [rdx]; 
0x00000000001a1ce1: out dx, al; int1; jmp qword ptr [rcx]; 
0x000000000019a372: out dx, al; jmp qword ptr [rax]; 
0x000000000019c232: out dx, al; jmp qword ptr [rbp + 2]; 
0x0000000000199f3a: out dx, al; jmp qword ptr [rbx]; 
0x000000000019a0a2: out dx, al; jmp qword ptr [rcx + 1]; 
0x0000000000199d0a: out dx, al; jmp qword ptr [rcx]; 
0x000000000019aad6: out dx, al; jmp qword ptr [rdx]; 
0x00000000001314fc: out dx, al; jmp qword ptr [rsi - 0x70]; 
0x000000000019d14a: out dx, al; jmp qword ptr [rsi]; 
0x000000000019929a: out dx, al; jmp rax; 
0x000000000019b7ea: out dx, al; jmp rcx; 
0x000000000019cc52: out dx, al; jmp rdx; 
0x0000000000188f92: out dx, al; jmp rsp; 
0x0000000000188faa: out dx, al; lcall ptr [rsp + rbp*8 - 0x64ec0000]; out dx, al; jmp rsp; 
0x0000000000189462: out dx, al; lcall ptr [rsp + rcx - 0x22cffff]; out dx, al; jmp rsp; 
0x000000000014ca20: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000000a3bb0: out dx, al; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000001890ba: out dx, al; ljmp ptr [rsp + rsi*8 - 0x564c0000]; out dx, al; jmp rsp; 
0x0000000000132d76: out dx, al; mov al, 0x28; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000012b523: out dx, al; mov dword ptr [rsp + 0xc0], eax; mov rax, qword ptr [r15 + 8]; mov rdi, r15; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000000314f: out dx, al; mov eax, 0xa1a3e95a; ret 0xba88; 
0x000000000008ac78: out dx, al; mov edi, dword ptr [rip + 0x336071]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000014446a: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000012b440: out dx, al; mov qword ptr [rsp + 0xc8], rax; mov rax, qword ptr [r15 + 8]; call qword ptr [rax + 0x18]; 
0x000000000007448a: out dx, al; mov rax, qword ptr [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x000000000011f485: out dx, al; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000a3a64: out dx, al; mov rdi, qword ptr [r12]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x00000000000bdc01: out dx, al; mov rdi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 0x10]; mov qword ptr [rsp], rdx; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x000000000012122f: out dx, al; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000006f5c7: out dx, al; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000012601f: out dx, al; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000086176: out dx, al; mov rdi, r12; call rax; 
0x0000000000060da5: out dx, al; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000005fd81: out dx, al; mov rdi, r14; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1148], rcx; call qword ptr [rax + 0x38]; 
0x0000000000061b5d: out dx, al; mov rdi, r14; sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1158], rcx; call qword ptr [rax + 0x38]; 
0x00000000000fc243: out dx, al; mov rdi, r9; mov eax, ebx; syscall; 
0x000000000012d9fa: out dx, al; mov rdi, rbp; mov edx, 0xffffffff; xor eax, eax; call rcx; 
0x000000000004b7ed: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078da5: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000070326: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000008632e: out dx, al; mov rdi, rbx; call rax; 
0x00000000000fa647: out dx, al; mov rdi, rbx; mov eax, 0x11a; syscall; 
0x0000000000103081: out dx, al; mov rdx, rax; mov edi, 0x2000003; call qword ptr [rbx + 0x28]; 
0x000000000014ca2a: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000020c67: out dx, al; movsxd rcx, ecx; mov eax, 1; mov dword ptr [r9 + rcx*4], esi; inc dword ptr [rdi + 4]; ret; 
0x00000000000f1577: out dx, al; movsxd rdi, ebx; mov eax, 0x127; syscall; 
0x00000000000f17d7: out dx, al; movsxd rdi, ebx; mov eax, 0x128; syscall; 
0x000000000013d8de: out dx, al; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000022638: out dx, al; or byte ptr [rbx - 0x3ebef020], al; call 0xffffffffc51faf48; adc eax, 0xd89003a; ret; 
0x0000000000134fff: out dx, al; pop rbp; jmp rax; 
0x00000000001214f6: out dx, al; pop rbx; pop rbp; add rdi, 0x23b0; xor eax, eax; jmp rcx; 
0x00000000001771b2: out dx, al; push qword ptr [rax + 0x75]; out dx, al; call qword ptr [rax]; 
0x000000000018923a: out dx, al; push qword ptr [rbp + rdi*8 - 0x416c0000]; out dx, al; jmp rsp; 
0x00000000001892fa: out dx, al; push qword ptr [rdx + rax - 0x2b2bffff]; out dx, al; jmp rsp; 
0x00000000000fa776: out dx, al; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000147ed0: out dx, al; sub rdi, 0x40; lea r11, qword ptr [rip + 0x3eab3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145500: out dx, al; sub rdi, 0x40; lea r11, qword ptr [rip + 0x412c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142b30: out dx, al; sub rdi, 0x40; lea r11, qword ptr [rip + 0x43ad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000a3639: out dx, al; xor eax, eax; ret; 
0x00000000000a1efd: out dx, eax; adc byte ptr [rax + 1], cl; clc; ret; 
0x0000000000091f85: out dx, eax; adc byte ptr [rax - 0x7d], cl; ret 0x4c01; 
0x000000000019d18d: out dx, eax; add byte ptr [rax], al; add cl, bl; stc; call qword ptr [rax]; 
0x000000000019d12d: out dx, eax; add byte ptr [rax], al; cmp bl, 0xee; call qword ptr [rax]; 
0x000000000019d115: out dx, eax; add byte ptr [rax], al; fdivr st(4); stc; call qword ptr [rsi + 0x16]; 
0x00000000001281f1: out dx, eax; add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x0000000000049667: out dx, eax; add ecx, ebp; ret; 
0x000000000008c33e: out dx, eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000001651b0: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000fba75: out dx, eax; and ebp, dword ptr [rax + rax]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000120f82: out dx, eax; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x00000000000f5369: out dx, eax; call 0x1f4f0; mov rdi, qword ptr [r12]; call rbx; 
0x00000000000f50a8: out dx, eax; call 0x1f4f0; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000105f45: out dx, eax; call 0x5dcc0; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000000ee0a4: out dx, eax; call 0xebfe0; movsxd rdi, r13d; mov eax, 3; syscall; 
0x00000000001216fd: out dx, eax; call qword ptr [rax + 0x10]; 
0x000000000007959d: out dx, eax; call qword ptr [rax + 0x18]; 
0x000000000011f4b0: out dx, eax; call qword ptr [rax + 0x20]; 
0x0000000000121554: out dx, eax; call qword ptr [rax + 0x28]; 
0x0000000000120eeb: out dx, eax; call qword ptr [rax + 0x30]; 
0x0000000000177c1a: out dx, eax; call qword ptr [rax + 0x4c]; 
0x0000000000177eb6: out dx, eax; call qword ptr [rax + 0x56]; 
0x000000000007969b: out dx, eax; call qword ptr [rax + 0x78]; 
0x000000000011f473: out dx, eax; call qword ptr [rax + 8]; 
0x0000000000177f02: out dx, eax; call qword ptr [rax - 0x6f0010aa]; push rsi; out dx, eax; call qword ptr [rax]; 
0x0000000000177f6e: out dx, eax; call qword ptr [rax - 0x6f0010aa]; push rsi; out dx, eax; call rax; 
0x0000000000177f26: out dx, eax; call qword ptr [rax - 0x6f0010aa]; push rsi; out dx, eax; jmp qword ptr [rax + 0x56]; 
0x000000000011feec: out dx, eax; call qword ptr [rax]; 
0x000000000011feec: out dx, eax; call qword ptr [rax]; mov rax, qword ptr [r13 + 8]; mov rdi, r13; call qword ptr [rax + 0x20]; 
0x0000000000177f3a: out dx, eax; call qword ptr [rax]; push rsi; out dx, eax; jmp qword ptr [rax + 0x56]; 
0x0000000000075a97: out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000019d3a2: out dx, eax; call qword ptr [rbp + 4]; 
0x00000000000869e7: out dx, eax; call qword ptr [rbx + 0x40]; 
0x000000000012170b: out dx, eax; call qword ptr [rbx]; 
0x00000000001898f2: out dx, eax; call qword ptr [rcx + rbp + 0x54e40001]; out dx, eax; jmp rsp; 
0x000000000019deea: out dx, eax; call qword ptr [rdi]; 
0x000000000019d302: out dx, eax; call qword ptr [rsi + 1]; 
0x000000000011f69b: out dx, eax; call rax; 
0x00000000000a419e: out dx, eax; call rbx; 
0x000000000012e402: out dx, eax; call rcx; 
0x000000000008608c: out dx, eax; call rdx; 
0x00000000001895f2: out dx, eax; call rsp; 
0x00000000001abb91: out dx, eax; cmc; call qword ptr [rax]; 
0x00000000001abb49: out dx, eax; cmc; call qword ptr [rdi]; 
0x00000000001abb09: out dx, eax; cmc; jmp qword ptr [rax]; 
0x00000000000cb79d: out dx, eax; cmp al, 0xf5; jmp qword ptr [rsi + 0x2e]; 
0x00000000001898d2: out dx, eax; dec dword ptr [rax + 0x51180001]; out dx, eax; call rsp; 
0x0000000000121bac: out dx, eax; dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; cmp ecx, ebx; out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x00000000001232a8: out dx, eax; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000128865: out dx, eax; dec dword ptr [rax - 0x77]; ret; 
0x000000000012ab69: out dx, eax; dec dword ptr [rax - 0x7b]; sal byte ptr [rcx + rdx*8 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000189bd2: out dx, eax; dec dword ptr [rbp + rsi - 0x2d6fffff]; out dx, eax; call rsp; 
0x0000000000189b92: out dx, eax; dec dword ptr [rbx + rsi + 1]; add byte ptr [rcx + rdx*8 + 0x3394ffef], ah; add dword ptr [rax], eax; ret; 
0x0000000000189ad2: out dx, eax; dec dword ptr [rsp + rbp - 0x311cffff]; out dx, eax; call rsp; 
0x0000000000189822: out dx, eax; dec esp; sub byte ptr [rcx], al; add byte ptr [rsi + rcx*2 - 0x11], dh; jmp rsp; 
0x0000000000057dbf: out dx, eax; fdivr st(7); dec dword ptr [rax - 0x7d]; ror dword ptr [rax], -0x17; and ebp, 0x8348ffff; ret 0xeb08; 
0x0000000000198571: out dx, eax; in eax, dx; jmp qword ptr [rcx]; 
0x00000000001999c5: out dx, eax; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000177f36: out dx, eax; inc dword ptr [rax]; push rsi; out dx, eax; call qword ptr [rax]; 
0x00000000001222ac: out dx, eax; inc dword ptr [rbx - 0x76b79c03]; ret; 
0x00000000001895ea: out dx, eax; inc dword ptr [rdi + rdx + 0x17940001]; out dx, eax; call rsp; 
0x000000000018955a: out dx, eax; inc esp; adc eax, dword ptr [rcx]; add byte ptr [rdx + rcx - 0x11], dh; jmp rsp; 
0x0000000000177c12: out dx, eax; jmp qword ptr [rax + 0x4c]; 
0x0000000000177eae: out dx, eax; jmp qword ptr [rax + 0x56]; 
0x000000000019daba: out dx, eax; jmp qword ptr [rax]; 
0x000000000019d26a: out dx, eax; jmp qword ptr [rbp + 4]; 
0x000000000019de72: out dx, eax; jmp qword ptr [rbx + 2]; 
0x000000000019e0e2: out dx, eax; jmp qword ptr [rbx]; 
0x000000000019d9fa: out dx, eax; jmp qword ptr [rcx + 0xd]; 
0x000000000019d602: out dx, eax; jmp qword ptr [rcx]; 
0x000000000019e112: out dx, eax; jmp qword ptr [rdi + 6]; 
0x000000000019daea: out dx, eax; jmp qword ptr [rdx]; 
0x000000000012eaff: out dx, eax; jmp qword ptr [rsi + 0x2e]; 
0x0000000000125dc2: out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x000000000011fa48: out dx, eax; jmp qword ptr [rsi + 0xf]; 
0x000000000019d2c2: out dx, eax; jmp qword ptr [rsi]; 
0x000000000019de0a: out dx, eax; jmp rdi; 
0x0000000000189532: out dx, eax; jmp rsp; 
0x0000000000177c0a: out dx, eax; lcall ptr [rbx + rcx*2 + 0x4b9cffef]; out dx, eax; jmp qword ptr [rax + 0x4c]; 
0x0000000000189b62: out dx, eax; lcall ptr [rcx + rsi - 0x2f15ffff]; out dx, eax; jmp rsp; 
0x0000000000189c62: out dx, eax; lcall ptr [rdx + rdi - 0x2b66ffff]; out dx, eax; jmp rsp; 
0x000000000018952a: out dx, eax; lcall ptr [rdx + rdx + 0x7fe0001]; out dx, eax; jmp rsp; 
0x0000000000189862: out dx, eax; lcall ptr [rsp + rbx + 0x4f820001]; out dx, eax; jmp rsp; 
0x0000000000177eaa: out dx, eax; lcall ptr [rsp + rdx*2 - 0x11]; jmp qword ptr [rax + 0x56]; 
0x000000000014caa0: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000147f93: out dx, eax; lea r11, qword ptr [rip + 0x3e9f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147ed4: out dx, eax; lea r11, qword ptr [rip + 0x3eab3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001455c3: out dx, eax; lea r11, qword ptr [rip + 0x41204]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145504: out dx, eax; lea r11, qword ptr [rip + 0x412c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142bf3: out dx, eax; lea r11, qword ptr [rip + 0x43a14]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142b34: out dx, eax; lea r11, qword ptr [rip + 0x43ad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000108370: out dx, eax; leave; ret; 
0x00000000001281d5: out dx, eax; mov dword ptr [r14 + 0x58], 0; call qword ptr [rax + 0x28]; 
0x000000000011f556: out dx, eax; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000011f4c6: out dx, eax; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x000000000012a85b: out dx, eax; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000012675a: out dx, eax; mov dword ptr [rsp + 0x40], 0; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x00000000000ec07a: out dx, eax; mov eax, 0x4f; syscall; 
0x000000000002c20f: out dx, eax; mov eax, 3; syscall; 
0x0000000000073198: out dx, eax; mov eax, r9d; syscall; 
0x000000000012d9fd: out dx, eax; mov edx, 0xffffffff; xor eax, eax; call rcx; 
0x000000000011f56f: out dx, eax; mov edx, dword ptr [rbx + 0x22c0]; mov rsi, qword ptr [rsp + 8]; call qword ptr [rax + 0x18]; 
0x0000000000120202: out dx, eax; mov qword ptr [rbx], rax; xor eax, eax; call qword ptr [rbx + 0x18]; 
0x000000000014429a: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144396: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442e2: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000012a7e9: out dx, eax; mov qword ptr [rsp + 0x50], rax; mov rax, qword ptr [r13 + 8]; mov qword ptr [rsp], r15; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x0000000000075b26: out dx, eax; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x000000000012db00: out dx, eax; mov qword ptr [rsp], rax; mov rax, qword ptr [rbp + 8]; call qword ptr [rax + 8]; 
0x00000000000a42e7: out dx, eax; mov r9, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x00000000000f8278: out dx, eax; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000128224: out dx, eax; mov rcx, qword ptr [rbp - 0x168]; call rcx; 
0x0000000000123f83: out dx, eax; mov rcx, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000123d8c: out dx, eax; mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x000000000011dfe3: out dx, eax; mov rcx, r13; call rbx; 
0x0000000000135237: out dx, eax; mov rdx, rsp; lea rsi, qword ptr [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x0000000000022f06: out dx, eax; mov rsi, qword ptr [rdx + rbx + 0x20]; call rax; 
0x000000000014caaa: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000013d9dd: out dx, eax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000012eafd: out dx, eax; or edi, ebp; jmp qword ptr [rsi + 0x2e]; 
0x000000000019e0f9: out dx, eax; out dx, eax; call rsp; 
0x000000000011adcd: out dx, eax; outsb dx, byte ptr [rsi]; cli; jmp qword ptr [rsi - 0x77]; 
0x0000000000075061: out dx, eax; pop rbx; ret; 
0x00000000001ab2ac: out dx, eax; pop rdx; cmc; jmp qword ptr [rdx]; 
0x0000000000177f62: out dx, eax; push qword ptr [rax]; push rsi; out dx, eax; call qword ptr [rax]; 
0x00000000001899ea: out dx, eax; push qword ptr [rcx + rax*2 + 1]; add byte ptr [rdi], dh; out dx, eax; call rsp; 
0x000000000015fd03: out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000015fd18: out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000015fd2d: out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000002906b: out dx, eax; ret 0; 
0x00000000000a1353: out dx, eax; ret 0xf66; 
0x00000000000364b7: out dx, eax; ret; 
0x0000000000091b05: out dx, eax; sbb byte ptr [rax - 0x7d], cl; out dx, al; adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x000000000016121c: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x0000000000161205: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000001611ee: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000015fcaa: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000186959: out dx, eax; sti; call rax; 
0x000000000013223e: out dx, eax; sti; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000186919: out dx, eax; sti; jmp qword ptr [rax - 0x10]; 
0x000000000019691c: out dx, eax; test ch, ch; jmp qword ptr [rdx]; 
0x0000000000134e9d: out dx, eax; test eax, 0xed310028; call qword ptr [rax + 0x28]; 
0x000000000015ff7f: out dx, eax; xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016003c: out dx, eax; xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000015ffeb: out dx, eax; xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000fd921: out dx, eax; xor byte ptr [rcx], dh; rol byte ptr [rbx - 0x69f0f601], 0xc0; ret; 
0x0000000000120b7f: out dx, eax; xor eax, eax; pop rbp; jmp rdx; 
0x00000000000381d0: out dx, eax; xor eax, eax; ret; 
0x000000000013959e: outsb dx, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001246c5: outsb dx, byte ptr [rsi]; add byte ptr [rax], al; add al, ch; imul edi, ebp, 0x89c085ff; ret; 
0x00000000001a4fad: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; adc byte ptr [rbp - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000000b4358: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add bl, dh; ret; 
0x00000000001621be: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x000000000018a31d: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; in al, 0xcf; int1; jmp rsp; 
0x00000000000f1282: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000001a505d: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; nop; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rcx]; 
0x00000000001a50a5: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; or byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001a5015: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rcx]; 
0x00000000001a5075: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; test al, 0x6e; hlt; jmp qword ptr [rcx]; 
0x0000000000004b08: outsb dx, byte ptr [rsi]; add eax, 0; add byte ptr [rax], al; ret 0x26; 
0x00000000001094da: outsb dx, byte ptr [rsi]; add rsp, 0xd8; mov eax, esi; pop rbx; pop rbp; ret; 
0x0000000000034079: outsb dx, byte ptr [rsi]; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000fbdf6: outsb dx, byte ptr [rsi]; and byte ptr [rax + rax], ch; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000017462c: outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x000000000018753d: outsb dx, byte ptr [rsi]; cld; call qword ptr [rax]; 
0x000000000011adce: outsb dx, byte ptr [rsi]; cli; jmp qword ptr [rsi - 0x77]; 
0x000000000018da01: outsb dx, byte ptr [rsi]; cli; jmp rsp; 
0x00000000001a9769: outsb dx, byte ptr [rsi]; cmc; jmp qword ptr [rdi + 1]; 
0x00000000001ac795: outsb dx, byte ptr [rsi]; cmc; jmp qword ptr [rdx]; 
0x0000000000036f83: outsb dx, byte ptr [rsi]; cmp byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000002d114: outsb dx, byte ptr [rsi]; cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x3929e2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001a5019: outsb dx, byte ptr [rsi]; hlt; jmp qword ptr [rcx]; 
0x000000000015ed3e: outsb dx, byte ptr [rsi]; idiv edi; jmp qword ptr [rsi + 0x66]; 
0x000000000019492d: outsb dx, byte ptr [rsi]; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000361c4: outsb dx, byte ptr [rsi]; iretd; movapd xmm0, xmm1; ret; 
0x0000000000071ac1: outsb dx, byte ptr [rsi]; mov eax, edx; pop rbx; ret; 
0x000000000011f54d: outsb dx, byte ptr [rsi]; mov rax, qword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x0000000000086a9e: outsb dx, byte ptr [rsi]; or byte ptr [rbp - 0x2a], dh; mov rdi, rsi; call qword ptr [rbx + 0x40]; 
0x00000000001740e4: outsb dx, byte ptr [rsi]; sahf; ret 0x38ae; 
0x000000000018fcee: outsb dx, byte ptr [rsi]; sbb eax, 0xd1cffea; push rbp; adc edx, ebp; jmp qword ptr [rdx]; 
0x0000000000186315: outsb dx, byte ptr [rsi]; sti; inc dword ptr [rax - 0x2f000491]; jo 0x18631a; jmp qword ptr [rax]; 
0x00000000000fb5f6: outsb dx, byte ptr [rsi]; sub byte ptr [rax + rax], ch; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d4d82: outsb dx, byte ptr [rsi]; sub byte ptr [rbx + rcx*4 + 0x76], cl; xor byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000008c9aa: outsb dx, byte ptr [rsi]; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x00000000000facf6: outsb dx, byte ptr [rsi]; xor dword ptr [rax + rax], ebp; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000006f7fd: outsd dx, dword ptr [rsi]; adc dword ptr [rip - 0x766b1500], esi; ret 0x8b48; 
0x00000000000ae4a0: outsd dx, dword ptr [rsi]; add al, 0xe8; jns 0xae4b9; clc; inc dword ptr [rbp + 0x79c789c0]; ret; 
0x00000000000ff8c5: outsd dx, dword ptr [rsi]; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001a50bd: outsd dx, dword ptr [rsi]; add dword ptr [rax], eax; and byte ptr [rdi - 0xc], ch; jmp qword ptr [rcx]; 
0x00000000001a50d5: outsd dx, dword ptr [rsi]; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xc], ch; call qword ptr [rax + 6]; 
0x00000000001ab015: outsd dx, dword ptr [rsi]; add dword ptr [rax], eax; cwde; loope 0x1ab010; jmp qword ptr [rcx + 0x4000001]; 
0x00000000001a5185: outsd dx, dword ptr [rsi]; add dword ptr [rax], eax; sub byte ptr [rsi - 0xc], dh; jmp qword ptr [rcx]; 
0x0000000000150627: outsd dx, dword ptr [rsi]; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000f1cd2: outsd dx, dword ptr [rsi]; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000160d98: outsd dx, dword ptr [rsi]; call 0xf7cf651; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000161f68: outsd dx, dword ptr [rsi]; call 0xf7d0821; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000187501: outsd dx, dword ptr [rsi]; cld; call qword ptr [rax]; 
0x000000000018da39: outsd dx, dword ptr [rsi]; cli; call qword ptr [rdx + rdx*8 + 0x70a40002]; cli; jmp rsp; 
0x0000000000131a58: outsd dx, dword ptr [rsi]; cmc; dec dword ptr [rax - 0x77]; ret 0x854d; 
0x0000000000036ec1: outsd dx, dword ptr [rsi]; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x0000000000036f14: outsd dx, dword ptr [rsi]; cmp byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036eee: outsd dx, dword ptr [rsi]; cmp byte ptr [rax], al; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000160d7d: outsd dx, dword ptr [rsi]; fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000160b7d: outsd dx, dword ptr [rsi]; fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000006adfb: outsd dx, dword ptr [rsi]; fisub dword ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; mul dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x0000000000087178: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x000000000008d07e: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x0000000000160cfd: outsd dx, dword ptr [rsi]; fnstenv dword ptr [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000871be: outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x00000000001a50d9: outsd dx, dword ptr [rsi]; hlt; call qword ptr [rax + 6]; 
0x00000000001a50a9: outsd dx, dword ptr [rsi]; hlt; jmp qword ptr [rcx]; 
0x0000000000194975: outsd dx, dword ptr [rsi]; in eax, dx; jmp qword ptr [rdx]; 
0x000000000003d123: outsd dx, dword ptr [rsi]; insb byte ptr [rdi], dx; cmp byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001781ad: outsd dx, dword ptr [rsi]; int1; dec eax; cdq; int1; jmp rax; 
0x0000000000002f5d: outsd dx, dword ptr [rsi]; mov byte ptr [rbx], cl; and bh, byte ptr [rax - 0x52]; sub ebx, dword ptr [rsp + rax*2]; nop; ret 0x5bdb; 
0x000000000009cced: outsd dx, dword ptr [rsi]; mov dh, 0xd; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000160a47: outsd dx, dword ptr [rsi]; movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000160b47: outsd dx, dword ptr [rsi]; movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000006adff: outsd dx, dword ptr [rsi]; mul dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x0000000000160c7d: outsd dx, dword ptr [rsi]; push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000160a7d: outsd dx, dword ptr [rsi]; push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000001610bd: outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x000000000016101d: outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000008a7da: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000009d096: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000001608ad: outsd dx, dword ptr [rsi]; push rsi; fbstp dword ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016097d: outsd dx, dword ptr [rsi]; push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000009e6c6: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009f516: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009d036: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000174aa6: outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x000000000008a82a: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000008a7df: outsd dx, dword ptr [rsi]; ret; 
0x00000000001610dd: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000001611fe: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000016103d: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016117d: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000036b1c: outsd dx, dword ptr [rsi]; sbb byte ptr [rbx + rcx*4 + 0x77], cl; and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx; 
0x000000000006af34: outsd dx, dword ptr [rsi]; shl byte ptr [rsi + 0xf], cl; outsd dx, dword ptr [rsi]; mul dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x0000000000186319: outsd dx, dword ptr [rsi]; sti; call rax; 
0x0000000000186319: outsd dx, dword ptr [rsi]; sti; call rax; jo 0x18631a; jmp qword ptr [rax]; 
0x0000000000064cb9: outsd dx, dword ptr [rsi]; sub byte ptr [rax], al; add byte ptr [rbx - 0x10f6b], cl; inc dword ptr [rbx - 0x7cf0cf06]; ret; 
0x0000000000150626: outsd dx, dword ptr es:[rsi]; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000174aa5: outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x0000000000186829: paddb mm7, mm7; adc byte ptr [rcx], 0xfc; call qword ptr [rax]; 
0x0000000000186829: paddb mm7, mm7; adc byte ptr [rcx], 0xfc; call qword ptr [rax]; add al, 0xfc; call rax; 
0x0000000000186849: paddb mm7, mm7; push rax; adc esp, edi; jmp rax; 
0x00000000001867e9: paddb mm7, mm7; rcl byte ptr [rcx], 0xfc; call qword ptr [rax + 4]; 
0x00000000001867e9: paddb mm7, mm7; rcl byte ptr [rcx], 0xfc; call qword ptr [rax + 4]; cld; call qword ptr [rax]; 
0x000000000018690d: paddb mm7, mm7; sub cl, 0xfb; inc eax; in eax, dx; sti; call qword ptr [rax]; 
0x0000000000022756: paddd mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x0000000000105018: paddw mm7, mm7; jmp qword ptr [rsi - 9]; 
0x00000000000a2b88: pcmpeqb mm2, qword ptr [rip + 0x3b30478b]; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000000a2ea4: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x00000000000a2e8f: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x0000000000175ea5: pcmpeqw mm5, qword ptr [rbp + r12*2 - 0x5f]; mov cs, edi; ret 0x8b36; 
0x0000000000175ea6: pcmpeqw mm5, qword ptr [rbp - 0x5f]; mov cs, edi; ret 0x8b36; 
0x00000000000a0d39: pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000a0cd7: pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000968e1: pcmpgtd mm1, qword ptr [rcx - 0x76b7fba9]; clc; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968d1: pcmpgtd mm1, qword ptr [rcx - 0x76b7fba9]; clc; ret; 
0x0000000000096ea5: pcmpgtd mm1, qword ptr [rdi]; xlatb; ret 0xc085; 
0x0000000000096f16: pcmpgtd mm1, qword ptr [rdi]; xlatb; rol dword ptr [rbp + 0x7d850fc0], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000369dd: pcmpgtd mm4, qword ptr [rip - 0x38f60f40]; mov word ptr [rsp - 2], di; fldcw word ptr [rsp - 2]; ret; 
0x000000000013cac8: pcmpistri xmm3, xmm3, 0x3a; movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x000000000013cfce: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; cmpsb byte ptr [rsi], byte ptr [rdi]; movabs byte ptr [0x91148b81048b0002], al; sub eax, edx; ret; 
0x000000000013914e: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; loope 0x13915b; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x000000000013ad57: pi2fd mm6, qword ptr [rsi - 0x72b7f1ec]; sbb eax, 0x8b0002c5; add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x00000000000421dd: pminsw mm7, mm7; dec dword ptr [rax - 0x77]; ret; 
0x00000000000363a1: pmovmskb eax, mm0; and eax, 0x80; ret; 
0x0000000000036671: pmovmskb eax, mm0; and eax, 8; ret; 
0x000000000008bd0c: pmovmskb eax, mm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000096eb3: pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret; 
0x00000000000363a0: pmovmskb eax, xmm0; and eax, 0x80; ret; 
0x0000000000036670: pmovmskb eax, xmm0; and eax, 8; ret; 
0x000000000008bd0b: pmovmskb eax, xmm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x0000000000096eb2: pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret; 
0x00000000000cb211: pop qword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000014e147: pop qword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001a70fd: pop qword ptr [rcx]; add byte ptr [rax + 7], dl; cmc; jmp qword ptr [rdi + 1]; 
0x000000000018d06d: pop qword ptr [rdx]; add byte ptr [rcx + rbp*2 - 0x6fa30007], ah; add al, byte ptr [rax]; and al, 0x6a; stc; jmp rsp; 
0x000000000018d065: pop qword ptr [rdx]; add byte ptr [rcx + rbp*2], ah; stc; call rsp; 
0x00000000001afe34: pop qword ptr [rdx]; add dl, byte ptr [rsi + 0x41380e0a]; ret; 
0x00000000001aa2b0: pop qword ptr [rdx]; add ecx, dword ptr [rbx + 1]; ret; 
0x0000000000108074: pop r10; ret; 
0x0000000000070272: pop r12; jmp rax; 
0x000000000005386b: pop r12; mov eax, 1; pop r13; ret; 
0x00000000000aed36: pop r12; mov eax, r13d; pop r13; pop r14; ret; 
0x0000000000072416: pop r12; mov eax, r13d; pop r13; ret; 
0x00000000000f0793: pop r12; mov eax, r9d; pop r13; ret; 
0x0000000000030750: pop r12; mov rax, rcx; pop r13; ret; 
0x000000000007a428: pop r12; neg eax; pop r13; ret; 
0x000000000010c438: pop r12; pop r13; jmp rax; 
0x00000000001177eb: pop r12; pop r13; mov eax, 0xffffffff; pop r14; ret; 
0x000000000005379b: pop r12; pop r13; mov eax, 1; pop r14; ret; 
0x0000000000094158: pop r12; pop r13; mov eax, edx; pop r14; ret; 
0x00000000000bd318: pop r12; pop r13; mov rax, r14; pop r14; ret; 
0x000000000008511d: pop r12; pop r13; mov rax, rcx; pop r14; ret; 
0x0000000000075e7f: pop r12; pop r13; pop r14; mov eax, 0xffffffff; pop r15; ret; 
0x00000000000410e6: pop r12; pop r13; pop r14; mulsd xmm0, xmm0; pop r15; ret; 
0x000000000003e2c6: pop r12; pop r13; pop r14; mulss xmm0, xmm0; pop r15; ret; 
0x00000000001009f0: pop r12; pop r13; pop r14; neg eax; pop r15; ret; 
0x00000000000a4dfc: pop r12; pop r13; pop r14; neg rax; pop r15; ret; 
0x00000000000439d0: pop r12; pop r13; pop r14; pop r15; fmulp st(1); ret; 
0x00000000000830b1: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x000000000001f81f: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000022b93: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000001fff4: pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000024880: pop r12; pop r13; pop r14; ret; 
0x00000000000759b4: pop r12; pop r13; pop r14; sar rax, 2; ret; 
0x00000000000d4ea0: pop r12; pop r13; pop r14; xor eax, eax; pop r15; ret; 
0x000000000006cfec: pop r12; pop r13; pop rbp; ret; 
0x000000000001ff75: pop r12; pop r13; ret; 
0x0000000000074c29: pop r12; pop r13; sub rax, r14; pop r14; pop r15; ret; 
0x00000000000aecf0: pop r12; pop r13; xor eax, eax; pop r14; ret; 
0x000000000003b8d2: pop r12; pop rbp; ret; 
0x000000000001f6e8: pop r12; ret; 
0x0000000000122584: pop r12; sete al; movzx eax, al; ret; 
0x000000000011d51f: pop r12; sub eax, 1; pop r13; ret; 
0x000000000007b7fa: pop r12; sub rax, r13; pop r13; pop r14; ret; 
0x0000000000038796: pop r13; cqo; pop r14; idiv r9; pop r15; ret; 
0x000000000010c43a: pop r13; jmp rax; 
0x00000000001177ed: pop r13; mov eax, 0xffffffff; pop r14; ret; 
0x000000000005379d: pop r13; mov eax, 1; pop r14; ret; 
0x000000000009415a: pop r13; mov eax, edx; pop r14; ret; 
0x00000000000bd31a: pop r13; mov rax, r14; pop r14; ret; 
0x000000000008511f: pop r13; mov rax, rcx; pop r14; ret; 
0x0000000000075e81: pop r13; pop r14; mov eax, 0xffffffff; pop r15; ret; 
0x00000000000410e8: pop r13; pop r14; mulsd xmm0, xmm0; pop r15; ret; 
0x000000000003e2c8: pop r13; pop r14; mulss xmm0, xmm0; pop r15; ret; 
0x00000000001009f2: pop r13; pop r14; neg eax; pop r15; ret; 
0x00000000000a4dfe: pop r13; pop r14; neg rax; pop r15; ret; 
0x00000000000439d2: pop r13; pop r14; pop r15; fmulp st(1); ret; 
0x00000000000830b3: pop r13; pop r14; pop r15; jmp rax; 
0x000000000001f821: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000022b95: pop r13; pop r14; pop r15; ret; 
0x000000000001fff6: pop r13; pop r14; pop rbp; ret; 
0x0000000000024882: pop r13; pop r14; ret; 
0x00000000000759b6: pop r13; pop r14; sar rax, 2; ret; 
0x00000000000d4ea2: pop r13; pop r14; xor eax, eax; pop r15; ret; 
0x000000000006cfee: pop r13; pop rbp; ret; 
0x000000000001ff77: pop r13; ret; 
0x0000000000070ef7: pop r13; sub rax, r14; pop r14; pop r15; pop rbp; ret; 
0x0000000000074c2b: pop r13; sub rax, r14; pop r14; pop r15; ret; 
0x00000000000aecf2: pop r13; xor eax, eax; pop r14; ret; 
0x000000000003879a: pop r14; idiv r9; pop r15; ret; 
0x0000000000075e83: pop r14; mov eax, 0xffffffff; pop r15; ret; 
0x00000000000bc7e6: pop r14; mov rax, qword ptr [rip + 0x307821]; lea rdi, qword ptr [rip + 0x30330a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000410ea: pop r14; mulsd xmm0, xmm0; pop r15; ret; 
0x000000000003e2ca: pop r14; mulss xmm0, xmm0; pop r15; ret; 
0x00000000001009f4: pop r14; neg eax; pop r15; ret; 
0x00000000000a4e00: pop r14; neg rax; pop r15; ret; 
0x00000000000439d4: pop r14; pop r15; fmulp st(1); ret; 
0x00000000000830b5: pop r14; pop r15; jmp rax; 
0x000000000001f823: pop r14; pop r15; pop rbp; ret; 
0x0000000000022b97: pop r14; pop r15; ret; 
0x000000000001fff8: pop r14; pop rbp; ret; 
0x0000000000024884: pop r14; ret; 
0x00000000000759b8: pop r14; sar rax, 2; ret; 
0x00000000000d4ea4: pop r14; xor eax, eax; pop r15; ret; 
0x00000000000439d6: pop r15; fmulp st(1); ret; 
0x00000000000830b7: pop r15; jmp rax; 
0x000000000001f825: pop r15; pop rbp; ret; 
0x0000000000022b99: pop r15; ret; 
0x0000000000127ecd: pop r8; add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0x58; jmp rcx; 
0x0000000000127769: pop r8; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000127786: pop r8; mov eax, 1; ret; 
0x00000000001860ff: pop r9; clc; ret 0x6e1f; 
0x00000000001867d0: pop rax; add al, 0xfc; jmp qword ptr [rax]; 
0x0000000000127ece: pop rax; add al, byte ptr [rax]; add byte ptr [rax], al; add rdi, 0x58; jmp rcx; 
0x00000000001b3a15: pop rax; add al, byte ptr [rax]; cmp byte ptr [rax - 9], bh; call qword ptr [rax]; 
0x0000000000193a2d: pop rax; add byte ptr [rax], al; adc byte ptr [rcx], cl; in al, dx; jmp qword ptr [rcx]; 
0x00000000001281d9: pop rax; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x00000000000cc6d3: pop rax; add cl, byte ptr [rcx - 0xdf63]; inc dword ptr [rbp + 0x31]; rol byte ptr [rbx + 0xf4104f8], cl; xchg eax, esp; ret 0x8944; 
0x000000000012a336: pop rax; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000008b8d9: pop rax; add dword ptr [rax], eax; lea rdx, qword ptr [rip - 0x5e3]; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000028e74: pop rax; add dword ptr [rcx + rcx*4 + 0x55], eax; add byte ptr [rcx], dh; ror byte ptr [rax + 0x39], cl; ret; 
0x00000000000d6519: pop rax; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret 0xe283; 
0x0000000000199298: pop rax; add esi, ebp; jmp rax; 
0x000000000012202b: pop rax; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x000000000018fee8: pop rax; and dl, ch; call qword ptr [rsi]; 
0x0000000000031aa4: pop rax; and eax, 0x8d480039; cmp eax, 0x38e051; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012776a: pop rax; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x0000000000128094: pop rax; call rax; 
0x0000000000036084: pop rax; clc; adc al, 0; andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x000000000010bdfb: pop rax; clc; call qword ptr [rax - 0x18]; 
0x000000000018c879: pop rax; clc; call rsp; 
0x000000000018c871: pop rax; clc; dec dword ptr [rdi + rcx*2 + 2]; add byte ptr [rax + rbx*2 - 8], al; call rsp; 
0x00000000001b0a98: pop rax; clc; jmp qword ptr [rbx]; 
0x00000000000aa404: pop rax; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000186ef5: pop rax; cld; call qword ptr [rax + rbx*2 - 4]; call rsp; 
0x0000000000186ef9: pop rax; cld; call rsp; 
0x0000000000186db9: pop rax; cld; jmp qword ptr [rax]; 
0x00000000001a8208: pop rax; cmp dh, ch; jmp qword ptr [rax]; 
0x0000000000178f84: pop rax; fpatan; jmp qword ptr [rsi]; 
0x00000000000aedbd: pop rax; idiv edi; add rsp, 0x20; xor eax, eax; pop rbx; ret; 
0x00000000001a00d8: pop rax; int1; call qword ptr [rdx]; 
0x0000000000127ed6: pop rax; jmp rcx; 
0x0000000000192058: pop rax; mov al, 0xea; jmp qword ptr [rdx]; 
0x0000000000027815: pop rax; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000127787: pop rax; mov eax, 1; ret; 
0x000000000002ff14: pop rax; mov eax, dword ptr [rax + rdi*4 + 0x200]; ret; 
0x0000000000121b6e: pop rax; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000075b1a: pop rax; mov qword ptr [rsp + 8], rdi; mov rax, qword ptr [rax + 0x38]; mov rdi, rbp; mov qword ptr [rsp], rax; call qword ptr [rbp + 0x18]; 
0x0000000000028743: pop rax; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x00000000000f150e: pop rax; mov r10, rcx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x127; syscall; 
0x00000000000f176e: pop rax; mov r10, rcx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x128; syscall; 
0x00000000000301ad: pop rax; mov rax, qword ptr [rip + 0x38dd6b]; add rdx, 0x200; mov qword ptr fs:[rax], rdx; ret; 
0x0000000000027f17: pop rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x20]; mov dword ptr [rsp + 8], esi; mov rsi, qword ptr [rsp + 0x50]; call rax; 
0x0000000000126a8b: pop rax; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000025adb: pop rax; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x00000000000e415e: pop rax; or byte ptr [rcx], dh; ror byte ptr [rcx - 0x7cb7fbab], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000003ab3f: pop rax; or cl, ch; ret 0xfffa; 
0x000000000009bd74: pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x000000000019f988: pop rax; or esi, ecx; jmp rcx; 
0x00000000001a8938: pop rax; pop rbp; cmc; call qword ptr [rcx]; 
0x000000000011ff00: pop rax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001f5f6: pop rax; pop rbx; pop rbp; ret; 
0x00000000000fa379: pop rax; pop rdi; call rax; 
0x000000000019c544: pop rax; pop rdi; out dx, al; jmp qword ptr [rdx]; 
0x00000000001b0288: pop rax; push rcx; sti; call rsi; 
0x000000000001af90: pop rax; ret 0x3b; 
0x000000000001b290: pop rax; ret; 
0x000000000018f399: pop rax; std; jmp qword ptr [rax]; 
0x0000000000196408: pop rax; stosb byte ptr [rdi], al; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000172aa8: pop rax; sub ah, ch; jmp rcx; 
0x00000000000fb10c: pop rax; sub eax, 0xd8f7002c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001911a8: pop rax; test edx, ebp; jmp qword ptr [rbx + 3]; 
0x00000000000d884f: pop rbp; add al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x000000000018ca0d: pop rbp; add al, byte ptr [rax]; fidivr dword ptr [rax - 8]; dec dword ptr [rsp + rbx*2 + 0x78f90002]; clc; call rsp; 
0x00000000001605ce: pop rbp; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001b3f2d: pop rbp; add al, byte ptr [rax]; test dil, sil; jmp qword ptr [rdx + 2]; 
0x00000000000d2569: pop rbp; add byte ptr [rax - 0x77], cl; ret; 
0x000000000009791e: pop rbp; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000001347f9: pop rbp; add byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000005e637: pop rbp; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret 0x3948; 
0x0000000000121c1d: pop rbp; add eax, edx; ret; 
0x00000000001214f8: pop rbp; add rdi, 0x23b0; xor eax, eax; jmp rcx; 
0x0000000000108275: pop rbp; and eax, 0xc; pop r12; ret; 
0x000000000011d51b: pop rbp; and eax, 2; pop r12; sub eax, 1; pop r13; ret; 
0x00000000001874d1: pop rbp; cld; call qword ptr [rax]; 
0x00000000001a8939: pop rbp; cmc; call qword ptr [rcx]; 
0x00000000001a8999: pop rbp; cmc; call qword ptr [rdx]; 
0x00000000001ab5e5: pop rbp; cmc; jmp qword ptr [rdx]; 
0x0000000000038797: pop rbp; cqo; pop r14; idiv r9; pop r15; ret; 
0x0000000000074494: pop rbp; jmp rax; 
0x000000000011f3d5: pop rbp; jmp rcx; 
0x0000000000120b82: pop rbp; jmp rdx; 
0x00000000000a17cc: pop rbp; lea rax, qword ptr [r9 + 1]; pop r12; ret; 
0x00000000000bd27f: pop rbp; mov cl, 0xfc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000085ac9: pop rbp; mov dword ptr [rip + 0x33b07c], 1; pop r12; ret; 
0x00000000000739e6: pop rbp; mov eax, 0xffffffff; pop r12; ret; 
0x00000000001177ee: pop rbp; mov eax, 0xffffffff; pop r14; ret; 
0x00000000000739cf: pop rbp; mov eax, 1; pop r12; ret; 
0x000000000005379e: pop rbp; mov eax, 1; pop r14; ret; 
0x00000000000e520c: pop rbp; mov eax, 5; pop r12; ret; 
0x00000000000a1779: pop rbp; mov eax, dword ptr [r9 + 4]; pop r12; ret; 
0x000000000005dfbf: pop rbp; mov eax, edx; pop r12; ret; 
0x000000000009415b: pop rbp; mov eax, edx; pop r14; ret; 
0x00000000001097d4: pop rbp; mov eax, esi; pop r12; ret; 
0x00000000000aecb3: pop rbp; mov eax, r12d; pop r12; pop r13; ret; 
0x00000000000aebe1: pop rbp; mov eax, r12d; pop r12; ret; 
0x00000000001adae4: pop rbp; mov ebp, esi; jmp qword ptr [rdx]; 
0x0000000000070268: pop rbp; mov ecx, r12d; mov rax, qword ptr [rax + 0x48]; xor edx, edx; pop r12; jmp rax; 
0x0000000000021b19: pop rbp; mov qword ptr [rip + 0x39c70f], rax; pop r12; ret; 
0x00000000000f0871: pop rbp; mov r9d, eax; pop r12; mov eax, r9d; pop r13; ret; 
0x00000000000b1679: pop rbp; mov rax, r12; pop r12; pop r13; pop r14; ret; 
0x000000000006cd4e: pop rbp; mov rax, r12; pop r12; ret; 
0x00000000000bd31b: pop rbp; mov rax, r14; pop r14; ret; 
0x0000000000085120: pop rbp; mov rax, rcx; pop r14; ret; 
0x0000000000070366: pop rbp; mov rax, rdx; pop r12; ret; 
0x000000000010c431: pop rbp; mov rsi, r12; mov edx, r13d; pop r12; pop r13; jmp rax; 
0x00000000001336a5: pop rbp; mov rsi, r12; mov qword ptr [rip + 0x28c1e0], rax; mov rax, qword ptr [rip + 0x288441]; pop r12; jmp rax; 
0x0000000000133645: pop rbp; mov rsi, r12; mov qword ptr [rip + 0x28c240], rax; mov rax, qword ptr [rip + 0x288499]; pop r12; jmp rax; 
0x0000000000125fd2: pop rbp; movzx eax, al; pop r12; ret; 
0x000000000002eb99: pop rbp; or al, 0; movsxd rdi, r15d; mov eax, 3; syscall; 
0x0000000000133757: pop rbp; or ebp, dword ptr [rcx]; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000001], esp; mov eax, dword ptr [rip + 0x28c128]; call qword ptr [rax]; 
0x000000000019c425: pop rbp; out dx, al; jmp qword ptr [rdx]; 
0x0000000000082cd3: pop rbp; pop r12; jmp rax; 
0x000000000005386a: pop rbp; pop r12; mov eax, 1; pop r13; ret; 
0x0000000000072415: pop rbp; pop r12; mov eax, r13d; pop r13; ret; 
0x00000000000f0792: pop rbp; pop r12; mov eax, r9d; pop r13; ret; 
0x000000000003074f: pop rbp; pop r12; mov rax, rcx; pop r13; ret; 
0x000000000007a427: pop rbp; pop r12; neg eax; pop r13; ret; 
0x00000000001177ea: pop rbp; pop r12; pop r13; mov eax, 0xffffffff; pop r14; ret; 
0x000000000005379a: pop rbp; pop r12; pop r13; mov eax, 1; pop r14; ret; 
0x0000000000094157: pop rbp; pop r12; pop r13; mov eax, edx; pop r14; ret; 
0x00000000000bd317: pop rbp; pop r12; pop r13; mov rax, r14; pop r14; ret; 
0x000000000008511c: pop rbp; pop r12; pop r13; mov rax, rcx; pop r14; ret; 
0x00000000000830b0: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x0000000000022b92: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000002487f: pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000001ff74: pop rbp; pop r12; pop r13; ret; 
0x00000000000aecef: pop rbp; pop r12; pop r13; xor eax, eax; pop r14; ret; 
0x000000000001f6e7: pop rbp; pop r12; ret; 
0x0000000000122583: pop rbp; pop r12; sete al; movzx eax, al; ret; 
0x0000000000075e82: pop rbp; pop r14; mov eax, 0xffffffff; pop r15; ret; 
0x00000000000410e9: pop rbp; pop r14; mulsd xmm0, xmm0; pop r15; ret; 
0x000000000003e2c9: pop rbp; pop r14; mulss xmm0, xmm0; pop r15; ret; 
0x00000000001009f3: pop rbp; pop r14; neg eax; pop r15; ret; 
0x00000000000a4dff: pop rbp; pop r14; neg rax; pop r15; ret; 
0x00000000000439d3: pop rbp; pop r14; pop r15; fmulp st(1); ret; 
0x00000000000830b4: pop rbp; pop r14; pop r15; jmp rax; 
0x000000000001f822: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x0000000000022b96: pop rbp; pop r14; pop r15; ret; 
0x000000000001fff7: pop rbp; pop r14; pop rbp; ret; 
0x0000000000024883: pop rbp; pop r14; ret; 
0x00000000000759b7: pop rbp; pop r14; sar rax, 2; ret; 
0x00000000000d4ea3: pop rbp; pop r14; xor eax, eax; pop r15; ret; 
0x000000000006cfef: pop rbp; pop rbp; ret; 
0x00000000000384e8: pop rbp; pop rbx; ret; 
0x000000000001f593: pop rbp; ret; 
0x000000000001b349: pop rbp; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cwde; ret; 
0x000000000001b331: pop rbp; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; ret; 
0x00000000000c0b07: pop rbp; shr dword ptr [rdi], cl; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x000000000018cff9: pop rbp; stc; call rsp; 
0x000000000018cff1: pop rbp; stc; dec dword ptr [rsi + rax*4 + 0x5d3d0002]; stc; call rsp; 
0x00000000001862f9: pop rbp; sti; push qword ptr [rax]; pop rdi; sti; call qword ptr [rax]; 
0x00000000000f8074: pop rbp; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb107: pop rbp; sub eax, 0xd8f7002d; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000070ef8: pop rbp; sub rax, r14; pop r14; pop r15; pop rbp; ret; 
0x0000000000074c2c: pop rbp; sub rax, r14; pop r14; pop r15; ret; 
0x000000000011105f: pop rbp; xor eax, eax; mov byte ptr [rdx], 0; pop r12; ret; 
0x000000000007a351: pop rbp; xor eax, eax; pop r12; ret; 
0x00000000000aecf3: pop rbp; xor eax, eax; pop r14; ret; 
0x0000000000106401: pop rbp; xor eax, eax; pop rbx; ret; 
0x00000000000857b1: pop rbx; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fisttp word ptr [rcx + rcx*4 - 6]; call rax; 
0x00000000000f1c41: pop rbx; add dword ptr fs:[rax], eax; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x17; syscall; 
0x0000000000173678: pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000000a1adf: pop rbx; and eax, 0x3fc00; ret; 
0x00000000000a1b1f: pop rbx; and eax, 0x7ff80000; ret; 
0x00000000000d1c40: pop rbx; and eax, 2; pop rbp; ret; 
0x00000000000a17c4: pop rbx; and r9d, 0xfff; pop rbp; lea rax, qword ptr [r9 + 1]; pop r12; ret; 
0x0000000000001b59: pop rbx; cdq; xchg eax, esp; pop rdx; int 0x4f; jmp rdx; 
0x0000000000186edd: pop rbx; cld; call qword ptr [rbx + rbx*2 - 4]; call rsp; 
0x0000000000186ee1: pop rbx; cld; call rsp; 
0x0000000000186da1: pop rbx; cld; jmp qword ptr [rax]; 
0x00000000001ab1dd: pop rbx; cmc; jmp qword ptr [rdx]; 
0x0000000000173676: pop rbx; cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000107e81: pop rbx; dec dword ptr [rax - 0x75]; add eax, 0x2bc114; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000006ed73: pop rbx; div rbp; pop rbp; pop r12; pop r13; ret; 
0x000000000007387e: pop rbx; div rbp; pop rbp; pop r12; ret; 
0x00000000001273db: pop rbx; hlt; jmp qword ptr [rsi - 0x70]; 
0x0000000000052d18: pop rbx; idiv bh; jmp qword ptr [rsi - 0x7b]; 
0x000000000006ffaa: pop rbx; jmp rax; 
0x00000000000f94ec: pop rbx; mov dword ptr [rip + 0x2c82ed], eax; mov eax, dword ptr [rip + 0x2c82bb]; mov dword ptr [rip + 0x2c82e5], eax; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f932c: pop rbx; mov dword ptr [rip + 0x2c84ad], eax; mov eax, dword ptr [rip + 0x2c847b]; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x000000000007693c: pop rbx; mov eax, 0xffffffff; pop rbp; ret; 
0x00000000000d0b12: pop rbx; mov eax, 1; ret; 
0x00000000000487a5: pop rbx; mov eax, dword ptr [rax + 0x58]; ret; 
0x00000000000a1b89: pop rbx; mov eax, eax; ret; 
0x00000000000c0cb3: pop rbx; mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x000000000006da25: pop rbx; mov eax, ebp; pop rbp; pop r12; ret; 
0x000000000004f142: pop rbx; mov eax, ebp; pop rbp; ret; 
0x000000000019884e: pop rbx; mov ebp, 0xd1cffed; test al, 0xbc; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001336f8: pop rbx; mov qword ptr [rip + 0x28c190], rax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000000769da: pop rbx; mov rax, qword ptr [rax + 0x140]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000007482a: pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000007462f: pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000006f607: pop rbx; mov rax, rbp; pop rbp; pop r12; pop r13; ret; 
0x000000000006e250: pop rbx; mov rax, rbp; pop rbp; pop r12; ret; 
0x0000000000120b7c: pop rbx; mov rdi, rbp; xor eax, eax; pop rbp; jmp rdx; 
0x000000000011f3cb: pop rbx; mov rsi, rbp; add rdi, 0x18; xor eax, eax; pop rbp; jmp rcx; 
0x00000000001214ae: pop rbx; mov rsi, rbp; add rdi, 0x23b0; xor eax, eax; pop rbp; jmp rcx; 
0x0000000000134ffc: pop rbx; mov rsi, rbp; pop rbp; jmp rax; 
0x000000000012287c: pop rbx; movzx eax, al; pop rbp; ret; 
0x0000000000048a55: pop rbx; neg eax; pop rbp; ret; 
0x00000000000d43a7: pop rbx; or al, byte ptr [rax]; movzx r13d, r13b; movsxd rcx, dword ptr [rax + r13*4]; add rax, rcx; jmp rax; 
0x000000000019c3dd: pop rbx; out dx, al; jmp qword ptr [rdx]; 
0x000000000001fff3: pop rbx; pop r12; pop r13; pop r14; pop rbp; ret; 
0x000000000006cfeb: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000003b8d1: pop rbx; pop r12; pop rbp; ret; 
0x0000000000121c1c: pop rbx; pop rbp; add eax, edx; ret; 
0x00000000001214f7: pop rbx; pop rbp; add rdi, 0x23b0; xor eax, eax; jmp rcx; 
0x0000000000108274: pop rbx; pop rbp; and eax, 0xc; pop r12; ret; 
0x0000000000074493: pop rbx; pop rbp; jmp rax; 
0x0000000000085ac8: pop rbx; pop rbp; mov dword ptr [rip + 0x33b07c], 1; pop r12; ret; 
0x00000000000739e5: pop rbx; pop rbp; mov eax, 0xffffffff; pop r12; ret; 
0x00000000000739ce: pop rbx; pop rbp; mov eax, 1; pop r12; ret; 
0x00000000000e520b: pop rbx; pop rbp; mov eax, 5; pop r12; ret; 
0x00000000000a1778: pop rbx; pop rbp; mov eax, dword ptr [r9 + 4]; pop r12; ret; 
0x000000000005dfbe: pop rbx; pop rbp; mov eax, edx; pop r12; ret; 
0x00000000001097d3: pop rbx; pop rbp; mov eax, esi; pop r12; ret; 
0x00000000000aecb2: pop rbx; pop rbp; mov eax, r12d; pop r12; pop r13; ret; 
0x000000000006cd4d: pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000070365: pop rbx; pop rbp; mov rax, rdx; pop r12; ret; 
0x0000000000125fd1: pop rbx; pop rbp; movzx eax, al; pop r12; ret; 
0x0000000000082cd2: pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000053869: pop rbx; pop rbp; pop r12; mov eax, 1; pop r13; ret; 
0x0000000000072414: pop rbx; pop rbp; pop r12; mov eax, r13d; pop r13; ret; 
0x00000000000f0791: pop rbx; pop rbp; pop r12; mov eax, r9d; pop r13; ret; 
0x000000000003074e: pop rbx; pop rbp; pop r12; mov rax, rcx; pop r13; ret; 
0x000000000007a426: pop rbx; pop rbp; pop r12; neg eax; pop r13; ret; 
0x000000000002487e: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000001ff73: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000001f6e6: pop rbx; pop rbp; pop r12; ret; 
0x0000000000122582: pop rbx; pop rbp; pop r12; sete al; movzx eax, al; ret; 
0x000000000001f592: pop rbx; pop rbp; ret; 
0x000000000011105e: pop rbx; pop rbp; xor eax, eax; mov byte ptr [rdx], 0; pop r12; ret; 
0x000000000007a350: pop rbx; pop rbp; xor eax, eax; pop r12; ret; 
0x0000000000179564: pop rbx; popfq; hlt; jmp qword ptr [rbp - 0x63]; 
0x0000000000001b14: pop rbx; ret 0x2a63; 
0x0000000000176960: pop rbx; ret 0x6f9; 
0x0000000000022228: pop rbx; ret; 
0x000000000001b049: pop rbx; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cwde; ret 0x3b; 
0x000000000001af89: pop rbx; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret 0x3b; 
0x000000000001af71: pop rbx; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret 0x3b; 
0x00000000001862f5: pop rbx; sti; call qword ptr [rax + 0x5d]; 
0x00000000000f8284: pop rbx; sub al, 0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000fb409: pop rbx; sub ch, byte ptr [rax + rax]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000aebdd: pop rbx; sub r12d, eax; pop rbp; mov eax, r12d; pop r12; ret; 
0x00000000000a4028: pop rbx; sub rax, rbp; pop rbp; pop r12; ret; 
0x000000000007840e: pop rbx; xor al, 0; mov rdi, qword ptr [rax]; call 0x5eaf0; add rsp, 0xd8; ret; 
0x0000000000146673: pop rcx; add dword ptr [rax + rax], eax; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000f2cf3: pop rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x3f7cb7f0], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000102bad: pop rcx; add eax, dword ptr [rax]; add al, ch; stosb byte ptr [rdi], al; sal dl, 1; jmp qword ptr [rsi + 0x2e]; 
0x00000000001858f0: pop rcx; clc; ret 0x6e1f; 
0x0000000000186eed: pop rcx; cld; call qword ptr [rcx + rbx*2 - 4]; call rsp; 
0x0000000000186ef1: pop rcx; cld; call rsp; 
0x0000000000186db1: pop rcx; cld; jmp qword ptr [rax]; 
0x0000000000174626: pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000082583: pop rcx; jns 0x82581; jmp qword ptr [rsi + 0xf]; 
0x0000000000077b5e: pop rcx; mov rax, qword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000133da6: pop rcx; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000047073: pop rcx; movsxd rdi, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000e2b4c: pop rcx; or byte ptr [rcx + 0x63], cl; sbb al, 0x9a; add rbx, r10; jmp rbx; 
0x00000000000aa403: pop rcx; pop rax; clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000001b13: pop rcx; pop rbx; ret 0x2a63; 
0x00000000000f9b02: pop rcx; ret 0xc383; 
0x0000000000164e03: pop rcx; scasb al, byte ptr [rdi]; in al, dx; jmp qword ptr [rsi + 0xf]; 
0x0000000000107df3: pop rcx; shr dword ptr [rbx], 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000018f211: pop rcx; std; jmp qword ptr [rdi]; 
0x00000000001862f1: pop rcx; sti; push qword ptr [rax + 0x5b]; sti; call qword ptr [rax + 0x5d]; 
0x00000000001438b3: pop rcx; sub eax, 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000009ea63: pop rcx; wait; or eax, 0xc634900; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a365f: pop rdi; adc byte ptr [rbx - 0x72b3efba], cl; push rdi; adc byte ptr [rbp + rcx*4 + 0x4e], cl; adc byte ptr [rcx + 0x39], al; ret; 
0x00000000000c97ae: pop rdi; add al, 0; add byte ptr [rdi], cl; mov ss, word ptr [rax - 0x7efffffd]; jmp qword ptr [rax + 4]; 
0x000000000009681f: pop rdi; add al, 0x48; add edi, 6; mov dword ptr [rdi - 6], eax; mov rax, rdi; ret; 
0x00000000001603c3: pop rdi; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000018ca55: pop rdi; add al, byte ptr [rax]; ret 0xf880; 
0x00000000000eb43a: pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000013e06d: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000fa37a: pop rdi; call rax; 
0x0000000000186b51: pop rdi; cld; call qword ptr [rax + 0x66]; 
0x0000000000186b51: pop rdi; cld; call qword ptr [rax + 0x66]; cld; jmp rax; 
0x0000000000187515: pop rdi; cld; call qword ptr [rax]; 
0x0000000000186c11: pop rdi; cld; jmp qword ptr [rdx]; 
0x00000000001a8cd9: pop rdi; cmc; jmp qword ptr [rdi + 1]; 
0x00000000000439d7: pop rdi; fmulp st(1); ret; 
0x0000000000144839: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144649: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000175c1e: pop rdi; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000000830b8: pop rdi; jmp rax; 
0x0000000000174be1: pop rdi; mov dh, 0x4e; ret 0x474c; 
0x000000000012c388: pop rdi; mov rax, qword ptr [rbx + 0x18]; lea r12, qword ptr [rbx + 0x10]; mov dword ptr [rbx + 0x10], 0; mov rdi, r12; call qword ptr [rax + 0x28]; 
0x000000000019c4fd: pop rdi; out dx, al; jmp qword ptr [rdx]; 
0x0000000000144469: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144299: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144395: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442e1: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000001f826: pop rdi; pop rbp; ret; 
0x0000000000116d5d: pop rdi; ret 0x2a; 
0x0000000000022b9a: pop rdi; ret; 
0x000000000001b271: pop rdi; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret; 
0x0000000000121bd2: pop rdi; sbb byte ptr [rbx - 0x783a17c5], cl; std; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x0000000000188890: pop rdi; sbb esp, ebp; call rsp; 
0x00000000001862fd: pop rdi; sti; call qword ptr [rax]; 
0x00000000001793d0: pop rdi; wait; hlt; call rsi; 
0x000000000008acaa: pop rdi; xor eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bca44: pop rdx; adc byte ptr [rdi - 0x42], bh; nop dword ptr [rax + rax]; add rsp, 0x10; pop rbx; ret; 
0x000000000001f5f2: pop rdx; add al, 0x3a; add byte ptr [rax + 0x5b], bl; pop rbp; ret; 
0x00000000001b3c2d: pop rdx; add al, byte ptr [rax]; add byte ptr [rbp - 9], bh; call qword ptr [rbp + 1]; 
0x0000000000138966: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x00000000000794e7: pop rdx; cdqe; ret; 
0x0000000000186ee5: pop rdx; cld; call qword ptr [rdx + rbx*2 - 4]; call rsp; 
0x0000000000186ee9: pop rdx; cld; call rsp; 
0x0000000000186da9: pop rdx; cld; jmp qword ptr [rax]; 
0x000000000008abe7: pop rdx; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000001aaf6d: pop rdx; cmc; jmp qword ptr [rdx]; 
0x0000000000001b5c: pop rdx; int 0x4f; jmp rdx; 
0x0000000000003a56: pop rdx; int1; mov dl, 0x1e; ret; 
0x0000000000174624: pop rdx; jp 0x174680; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000001971dc: pop rdx; mov ebp, ebp; jmp qword ptr [rdx]; 
0x00000000001767c7: pop rdx; out 0xf5, eax; mov ch, 0xab; ret; 
0x0000000000108073: pop rdx; pop r10; ret; 
0x000000000008278f: pop rdx; pop rbx; pop rbp; jmp rax; 
0x0000000000108099: pop rdx; pop rsi; ret; 
0x0000000000107e12: pop rdx; ret 0x2b; 
0x0000000000001b8e: pop rdx; ret; 
0x00000000001115c2: pop rdx; sbb dword ptr [rbx], ebp; add byte ptr [rax - 0x77], cl; fucompi st(0); ret 0x201; 
0x0000000000085d32: pop rdx; scasb al, byte ptr [rdi]; xor eax, dword ptr [rax]; add rsp, 0x18; ret; 
0x00000000000784c0: pop rdx; xor al, 0; mov rdi, qword ptr [rax]; call 0x64230; add rsp, 0xd8; ret; 
0x000000000013df6e: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000d31db: pop rsi; add al, 0; add byte ptr [rbx - 0x7bf0fd06], al; add dword ptr [rip + 0x438d0000], eax; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000008550e: pop rsi; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x1e], cl; mov rdi, r15; call rax; 
0x00000000000a94b5: pop rsi; add eax, 0xa2e80000; clc; jmp qword ptr [rsi - 0x70]; 
0x000000000004e1be: pop rsi; add eax, 0xf8834800; dec dword ptr [rcx - 0x77]; ret 0x840f; 
0x000000000008c9a2: pop rsi; and byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x00000000000ed92a: pop rsi; cli; dec dword ptr [rax + 0x39]; ret; 
0x000000000002d49e: pop rsi; cmp dword ptr es:[rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003879b: pop rsi; idiv r9; pop r15; ret; 
0x000000000017804c: pop rsi; mov bh, 0xf0; jmp rdi; 
0x0000000000075e84: pop rsi; mov eax, 0xffffffff; pop r15; ret; 
0x000000000007c151: pop rsi; mov rax, qword ptr [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000000bc7e7: pop rsi; mov rax, qword ptr [rip + 0x307821]; lea rdi, qword ptr [rip + 0x30330a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000410eb: pop rsi; mulsd xmm0, xmm0; pop r15; ret; 
0x000000000003e2cb: pop rsi; mulss xmm0, xmm0; pop r15; ret; 
0x00000000001009f5: pop rsi; neg eax; pop r15; ret; 
0x00000000000a4e01: pop rsi; neg rax; pop r15; ret; 
0x00000000000d0b7c: pop rsi; or byte ptr [r14], r11b; mov eax, 2; ret; 
0x0000000000091ca5: pop rsi; or byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000019c4b5: pop rsi; out dx, al; jmp qword ptr [rdx]; 
0x00000000000439d5: pop rsi; pop r15; fmulp st(1); ret; 
0x00000000000830b6: pop rsi; pop r15; jmp rax; 
0x000000000001f824: pop rsi; pop r15; pop rbp; ret; 
0x0000000000022b98: pop rsi; pop r15; ret; 
0x000000000001fff9: pop rsi; pop rbp; ret; 
0x0000000000105a9e: pop rsi; ret 0xffff; 
0x0000000000024885: pop rsi; ret; 
0x000000000017495c: pop rsi; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0x1749d7; mov ebp, 0xfb67d10d; ret; 
0x00000000000759b9: pop rsi; sar rax, 2; ret; 
0x00000000000ed944: pop rsi; sbb byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000001b169: pop rsi; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; clc; ret 0x3b; 
0x000000000001b031: pop rsi; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; ret 0x3b; 
0x00000000000f8017: pop rsi; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb406: pop rsi; sub ch, byte ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000d4ea5: pop rsi; xor eax, eax; pop r15; ret; 
0x00000000001b5c74: pop rsi; xor esi, edi; jmp qword ptr [rdx]; 
0x00000000001397b0: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000002ed90: pop rsp; adc eax, 0x37ba0015; add dword ptr [rax], eax; add al, ch; ret 0xe; 
0x00000000000266f0: pop rsp; adc eax, 0x3d8d4800; ret; 
0x0000000000138c64: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001606d7: pop rsp; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000196330: pop rsp; add byte ptr [rax], al; add byte ptr [rcx + rax*4 - 0x56b80000], cl; in eax, dx; call rcx; 
0x00000000001a8930: pop rsp; add byte ptr [rax], al; add byte ptr [rdi + 0x5d580001], cl; cmc; call qword ptr [rcx]; 
0x000000000018a03d: pop rsp; add dword ptr [rax], eax; hlt; ret 0xfff0; 
0x000000000013a4b0: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x0000000000032d4b: pop rsp; add eax, 0xc6834900; or byte ptr [rax + 1], cl; ret; 
0x0000000000151885: pop rsp; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000080843: pop rsp; and al, 0x28; call rax; 
0x00000000000b0785: pop rsp; and al, 0xf0; movsd xmm0, qword ptr [rsp - 0x10]; ret; 
0x0000000000116289: pop rsp; and al, 4; call 0x115190; add rsp, 0x88; ret; 
0x0000000000186f55: pop rsp; cld; call qword ptr [rax + 0x5c]; 
0x0000000000186ed9: pop rsp; cld; call rsp; 
0x0000000000186d99: pop rsp; cld; jmp qword ptr [rax]; 
0x00000000001ab555: pop rsp; cmc; jmp qword ptr [rdx]; 
0x00000000001b1d04: pop rsp; cmp eax, dword ptr [rdx]; add byte ptr [rax], cl; or al, 0xf7; call qword ptr [rsi]; 
0x000000000002f7a8: pop rsp; cmp qword ptr [rax], rax; lea rdi, qword ptr [rip + 0x39034d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010be20: pop rsp; fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x00000000001abb04: pop rsp; fld dword ptr [rcx]; add byte ptr [rax - 0x11], cl; cmc; jmp qword ptr [rax]; 
0x00000000000f72c4: pop rsp; idiv edi; add rsp, 0x408; ret; 
0x0000000000070273: pop rsp; jmp rax; 
0x00000000001a5d04: pop rsp; jnp 0x1a5d08; add byte ptr [rax], cl; mov ch, 0xf4; call qword ptr [rbx]; 
0x000000000019596c: pop rsp; jp 0x19595c; jmp qword ptr [rdx]; 
0x000000000011ebfe: pop rsp; lea rsi, qword ptr [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000001af10c: pop rsp; loope 0x1af104; jmp qword ptr [rdx]; 
0x000000000005386c: pop rsp; mov eax, 1; pop r13; ret; 
0x0000000000053937: pop rsp; mov eax, edx; pop rbx; ret; 
0x00000000000aed37: pop rsp; mov eax, r13d; pop r13; pop r14; ret; 
0x0000000000072417: pop rsp; mov eax, r13d; pop r13; ret; 
0x00000000000f0794: pop rsp; mov eax, r9d; pop r13; ret; 
0x000000000013cb40: pop rsp; mov ebp, 0x63480003; ret 0xf66; 
0x0000000000199d04: pop rsp; mov ebx, 0x14180000; out dx, al; jmp qword ptr [rcx]; 
0x000000000006e003: pop rsp; mov qword ptr [rbp], rax; mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x000000000011f67b: pop rsp; mov rax, qword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000318ec: pop rsp; mov rax, qword ptr [rip + 0x39271c]; lea rdi, qword ptr [rip + 0x38e385]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000030751: pop rsp; mov rax, rcx; pop r13; ret; 
0x00000000000eb59b: pop rsp; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x000000000007a429: pop rsp; neg eax; pop r13; ret; 
0x000000000018d074: pop rsp; nop; add al, byte ptr [rax]; and al, 0x6a; stc; jmp rsp; 
0x00000000000d4458: pop rsp; or al, byte ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x0000000000137640: pop rsp; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001946cf: pop rsp; or cl, byte ptr [rdi + rax]; or byte ptr [rbx + rcx + 2], al; ret; 
0x00000000000915b5: pop rsp; or eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000010c439: pop rsp; pop r13; jmp rax; 
0x00000000001177ec: pop rsp; pop r13; mov eax, 0xffffffff; pop r14; ret; 
0x000000000005379c: pop rsp; pop r13; mov eax, 1; pop r14; ret; 
0x0000000000094159: pop rsp; pop r13; mov eax, edx; pop r14; ret; 
0x00000000000bd319: pop rsp; pop r13; mov rax, r14; pop r14; ret; 
0x000000000008511e: pop rsp; pop r13; mov rax, rcx; pop r14; ret; 
0x0000000000075e80: pop rsp; pop r13; pop r14; mov eax, 0xffffffff; pop r15; ret; 
0x00000000000410e7: pop rsp; pop r13; pop r14; mulsd xmm0, xmm0; pop r15; ret; 
0x000000000003e2c7: pop rsp; pop r13; pop r14; mulss xmm0, xmm0; pop r15; ret; 
0x00000000001009f1: pop rsp; pop r13; pop r14; neg eax; pop r15; ret; 
0x00000000000a4dfd: pop rsp; pop r13; pop r14; neg rax; pop r15; ret; 
0x00000000000439d1: pop rsp; pop r13; pop r14; pop r15; fmulp st(1); ret; 
0x00000000000830b2: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x000000000001f820: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000022b94: pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000001fff5: pop rsp; pop r13; pop r14; pop rbp; ret; 
0x0000000000024881: pop rsp; pop r13; pop r14; ret; 
0x00000000000759b5: pop rsp; pop r13; pop r14; sar rax, 2; ret; 
0x00000000000d4ea1: pop rsp; pop r13; pop r14; xor eax, eax; pop r15; ret; 
0x000000000006cfed: pop rsp; pop r13; pop rbp; ret; 
0x000000000001ff76: pop rsp; pop r13; ret; 
0x0000000000074c2a: pop rsp; pop r13; sub rax, r14; pop r14; pop r15; ret; 
0x00000000000aecf1: pop rsp; pop r13; xor eax, eax; pop r14; ret; 
0x000000000003b8d3: pop rsp; pop rbp; ret; 
0x00000000001a7f04: pop rsp; popfq; add dword ptr [rax], eax; fdiv dword ptr [rdx]; cmc; jmp qword ptr [rcx]; 
0x0000000000193204: pop rsp; push rax; add byte ptr [rax], al; sbb byte ptr [rsi - 0x15], ah; jmp qword ptr [rbx]; 
0x0000000000177eac: pop rsp; push rsp; out dx, eax; jmp qword ptr [rax + 0x56]; 
0x000000000019a404: pop rsp; ret 0; 
0x0000000000003159: pop rsp; ret 0x52c0; 
0x000000000008cc80: pop rsp; ret 0xa; 
0x00000000000efba0: pop rsp; ret 0xffff; 
0x00000000000037f8: pop rsp; ret; 
0x000000000014d1f0: pop rsp; sahf; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000178de0: pop rsp; sal bl, 0xff; std; ret 0xfff3; 
0x000000000001b289: pop rsp; sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x0000000000049b52: pop rsp; sbb byte ptr [rcx], al; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000122585: pop rsp; sete al; movzx eax, al; ret; 
0x000000000010c067: pop rsp; stc; call qword ptr [rax - 0x18]; 
0x00000000000f8194: pop rsp; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000017a54e: pop rsp; sub dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rbx + rdx*8 - 0xa], ch; call rdx; 
0x000000000011d520: pop rsp; sub eax, 1; pop r13; ret; 
0x000000000007b7fb: pop rsp; sub rax, r13; pop r13; pop r14; ret; 
0x000000000010c066: pop sp; stc; call qword ptr [rax - 0x18]; 
0x000000000018d245: popfq; add al, byte ptr [rax]; add al, 0xa0; stc; jmp rsp; 
0x00000000001a7f05: popfq; add dword ptr [rax], eax; fdiv dword ptr [rdx]; cmc; jmp qword ptr [rcx]; 
0x00000000001a7f35: popfq; add dword ptr [rax], eax; or byte ptr [rbx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001a7eed: popfq; add dword ptr [rax], eax; sal byte ptr [rdx], 0xf5; jmp qword ptr [rcx]; 
0x000000000010ad97: popfq; add rsp, 0x28; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000f1dd2: popfq; and ch, byte ptr [rip + 0x10750000]; mov eax, 0x4a; syscall; 
0x00000000001782c9: popfq; cld; call qword ptr [rax]; 
0x0000000000179545: popfq; hlt; call qword ptr [rcx]; 
0x0000000000179565: popfq; hlt; jmp qword ptr [rbp - 0x63]; 
0x0000000000179595: popfq; hlt; jmp rcx; 
0x0000000000179561: popfq; hlt; lcall ptr [rbx - 0x63]; hlt; jmp qword ptr [rbp - 0x63]; 
0x000000000017958d: popfq; hlt; ljmp ptr [rcx - 0x65]; hlt; call rdi; 
0x00000000001a01f1: popfq; int1; call qword ptr [rax]; 
0x00000000000a08a2: popfq; lea r11, qword ptr [rip + 0xd7f6a]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ebd2: popfq; lea r11, qword ptr [rip + 0xd9a66]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d532: popfq; lea r11, qword ptr [rip + 0xdaf26]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe73: popfq; mov byte ptr [rip + 0xc634900], cl; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000082637: popfq; mov ecx, 0x89480033; xor byte ptr [rax - 0x75], cl; add eax, 0x33b88b; mov qword ptr [rax], rdi; ret; 
0x00000000000973bd: popfq; mov rax, rdi; ret; 
0x000000000009e393: popfq; movabs eax, dword ptr [0x8d49930c6349000d]; or al, 0xb; jmp rcx; 
0x000000000004ff6b: popfq; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a3e79: popfq; or eax, 0x358d4800; ret 0xd9d; 
0x000000000019de71: popfq; out dx, eax; jmp qword ptr [rbx + 2]; 
0x00000000000a1a39: popfq; ret 0xea81; 
0x000000000006b592: popfq; sar dh, 0xff; jmp qword ptr [rsi + 0x44]; 
0x000000000013ae90: popfq; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000eb1c7: popfq; sub al, 0x2d; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x0000000000188341: por mm7, mm7; mov esp, 0xb4000095; adc bl, ch; call rsp; 
0x00000000000b3e8f: psubb mm1, qword ptr [rax - 0x77]; ret; 
0x000000000018624d: psubq mm7, mm7; and byte ptr [rsi], bl; sti; call qword ptr [rax]; 
0x00000000001a8b1c: push -0x22; hlt; jmp qword ptr [rdx]; 
0x00000000000f678f: push -0x41000003; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x000000000017462a: push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000000e7f2c: push -0x46117; jmp qword ptr [rsi + 0xf]; 
0x00000000001797b4: push -0x47000b65; wait; hlt; call rsi; 
0x00000000000fe5d3: push -0x48f00077; add al, 0x78; and ax, 0x1000; movzx eax, ax; ret; 
0x00000000000fe543: push -0x48f00077; add al, 0x78; and ax, 0x100; movzx eax, ax; ret; 
0x00000000000fe4b3: push -0x48f00077; add al, 0x78; and ax, 0x2000; movzx eax, ax; ret; 
0x00000000000fe273: push -0x48f00077; add al, 0x78; and ax, 0x200; movzx eax, ax; ret; 
0x00000000000fe393: push -0x48f00077; add al, 0x78; and ax, 0x4000; movzx eax, ax; ret; 
0x00000000000fe053: push -0x48f00077; add al, 0x78; and ax, 0x400; movzx eax, ax; ret; 
0x00000000000fe303: push -0x48f00077; add al, 0x78; and ax, 0x8000; movzx eax, ax; ret; 
0x00000000000fe0e3: push -0x48f00077; add al, 0x78; and eax, 1; ret; 
0x00000000000fe163: push -0x48f00077; add al, 0x78; and eax, 2; movzx eax, ax; ret; 
0x00000000000fe423: push -0x48f00077; add al, 0x78; and eax, 4; movzx eax, ax; ret; 
0x00000000000fdfc3: push -0x48f00077; add al, 0x78; and eax, 8; movzx eax, ax; ret; 
0x00000000000cc560: push -0x62a17; jmp qword ptr [rsi + 0x2e]; 
0x000000000018cb85: push -0x69cbfffe; clc; call rsp; 
0x000000000018cb7d: push -0x6b8bfffe; clc; call qword ptr [rax + rbp*2 - 0x69cbfffe]; clc; call rsp; 
0x000000000018d061: push -0x70b30007; add al, byte ptr [rax]; and al, 0x69; stc; call rsp; 
0x000000000002d751: push -0x72b7ffc7; cmp eax, 0x3923a5; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002d72f: push -0x72b7ffc7; cmp eax, 0x3923c7; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000156e14: push -0x74fffefc; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000128bf4: push -0x76b70011; ret; 
0x0000000000123ba0: push -0x777e48f1; add byte ptr [rax], al; add byte ptr [rsi + 0x41], ah; mov dword ptr [rax + 0x6c], eax; mov eax, 1; ret; 
0x000000000017abfc: push -0x7f000570; nop; cli; jmp qword ptr [rax]; 
0x000000000015e434: push -0x7ffffffa; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000eb4fc: push -0x8ffd2d7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecffc: push -0x8ffd2f2; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000faffc: push -0x8ffd3d2; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000047341: push -0x9617; jmp qword ptr [rsi + 0xf]; 
0x00000000001621a4: push -0x9ffffff; ret 0x7501; 
0x00000000001ac595: push -0xb; jmp qword ptr [rdx]; 
0x0000000000021c7f: push -0xcfffff7; ret; 
0x0000000000178615: push -0xe; call qword ptr [rax + 0x6a]; 
0x0000000000178615: push -0xe; call qword ptr [rax + 0x6a]; inc dword ptr [rax - 0x4f000d96]; push -0xe; jmp rax; 
0x0000000000178625: push -0xe; call qword ptr [rax]; 
0x0000000000178619: push -0xe; inc dword ptr [rax - 0x4f000d96]; push -0xe; jmp rax; 
0x0000000000178621: push -0xe; jmp rax; 
0x000000000017861d: push -0xe; push qword ptr [rax - 0x1f000d96]; push -0xe; call qword ptr [rax]; 
0x00000000000a34a7: push -0xfb872b8; ret; 
0x000000000003774b: push -1; mov qword ptr [rdi + 0x70], -1; mov qword ptr [rdi + 0x78], -1; ret; 
0x000000000018d079: push -7; jmp rsp; 
0x000000000018c931: push -8; jmp rsp; 
0x000000000018c929: push -8; lcall ptr [rbp + rdx*2 + 0x6a980002]; clc; jmp rsp; 
0x0000000000005840: push 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x4c; 
0x00000000000c1ded: push 0; add byte ptr [rax], al; syscall; 
0x0000000000028739: push 0x24448948; or byte ptr [rax - 0x75], cl; and al, 0x58; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000028138: push 0x24448948; or byte ptr [rax - 0x75], cl; and al, 0x78; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x00000000000446a7: push 0x2444c701; adc byte ptr [rcx], al; add byte ptr [rax], al; add cl, ch; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000017a545: push 0x29206465; and byte ptr [rdi + 0x72], ch; and byte ptr [rcx + rbp], bl; add byte ptr [rax], al; add byte ptr [rbx + rdx*8 - 0xa], ch; call rdx; 
0x0000000000186990: push 0x30fffc2c; cld; call qword ptr [rax]; 
0x000000000004bf42: push 0x348d089; test dword ptr [rax - 0x7c000005], esi; ret 0x8908; 
0x00000000000bc392: push 0x37; xor byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000498a4: push 0x480004e2; add esp, 0x440; pop rbx; ret; 
0x0000000000047594: push 0x48640037; mov eax, dword ptr [rax]; mov rdx, rax; call 0x475b0; add rsp, 0xd8; ret; 
0x000000000005eed5: push 0x48ffffee; lea ecx, dword ptr [rbp - 0x1000]; mov qword ptr [rbp - 0x11a0], rcx; jmp rax; 
0x0000000000049ffd: push 0x48fffffa; lea ecx, dword ptr [rbp - 0x480]; mov qword ptr [rbp - 0x5b0], rcx; jmp rax; 
0x000000000004a199: push 0x48fffffa; mov edi, ebx; call qword ptr [rax + 0x38]; 
0x000000000011ed34: push 0x5b002a49; ret; 
0x00000000000f34d4: push 0x5b002ce0; pop rbp; pop r12; pop r13; ret; 
0x000000000011f6cd: push 0x5c415d5b; pop r13; ret; 
0x0000000000074e3b: push 0x60894c30; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000001785e9: push 0x6870fff2; bnd call qword ptr [rax - 0x3f000d98]; push 0x68f0fff2; bnd jmp qword ptr [rax]; imul esi, edx, 0xf26940ff; jmp qword ptr [rax + 0x69]; 
0x00000000001785ed: push 0x6890fff2; inc eax; push 0x68f0fff2; bnd jmp qword ptr [rax]; imul esi, edx, 0xf26940ff; jmp qword ptr [rax + 0x69]; 
0x00000000001785f5: push 0x68f0fff2; bnd jmp qword ptr [rax]; imul esi, edx, 0xf26940ff; jmp qword ptr [rax + 0x69]; 
0x00000000001874ed: push 0x6990fffc; cld; call qword ptr [rax]; 
0x00000000001955d4: push 0x76; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000e43ee: push 0x78578b48; mov qword ptr [rsi + 0x70], rdx; mov rax, qword ptr [rdi + 0x80]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x0000000000076c3f: push 0x8c48348; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000000c2866: push 0xb; add byte ptr [rcx + 0x146348f6], cl; mov al, 0x48; add eax, edx; jmp rax; 
0x000000000019a6df: push 0xd1cffee; add bh, dl; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019a727: push 0xd1cffee; sub al, 0xfb; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a4bc5: push 1; add al, bl; movsxd rsi, esp; jmp qword ptr [rcx]; 
0x00000000001a4c55: push 1; add al, cl; hlt; call qword ptr [rbp]; 
0x00000000001a4bdd: push 1; add al, dh; movsxd rsi, esp; jmp qword ptr [rbx]; 
0x00000000001a4c6d: push 1; add byte ptr [rax], dl; hlt; call qword ptr [rbp]; 
0x000000000018a265: push 1; add byte ptr [rdi + rsi*4 - 0xf], ah; push qword ptr [rdx + rbp*2 - 0x485bffff]; int1; jmp rsp; 
0x000000000012761e: push 2; add rdi, 0x68; jmp rcx; 
0x0000000000150aa7: push 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000009d972: push 5; add byte ptr [rax], al; ret; 
0x000000000004f209: push qword ptr [r9]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x0000000000186223: push qword ptr [rax + 0x14]; sti; inc dword ptr [rax + 0x15]; sti; call qword ptr [rax]; 
0x0000000000186adb: push qword ptr [rax + 0x18]; cld; inc eax; sbb esp, edi; call qword ptr [rax]; 
0x000000000018628b: push qword ptr [rax + 0x1d]; sti; jmp rax; 
0x0000000000186b2f: push qword ptr [rax + 0x1f]; cld; inc eax; and ah, bh; call qword ptr [rax]; 
0x000000000018627b: push qword ptr [rax + 0x28]; sti; jmp qword ptr [rax + 0x29]; 
0x0000000000186ab3: push qword ptr [rax + 0x2c]; cld; inc dword ptr [rax + 0x2e]; cld; jmp qword ptr [rax]; 
0x0000000000186a9b: push qword ptr [rax + 0x30]; cld; jmp qword ptr [rax + 0x32]; 
0x0000000000186a1b: push qword ptr [rax + 0x31]; cld; call qword ptr [rax + 0x33]; 
0x000000000017933b: push qword ptr [rax + 0x38fff41a]; adc ah, dh; inc dword ptr [rcx]; sbb ah, dh; jmp qword ptr [rbx]; 
0x0000000000186b6b: push qword ptr [rax + 0x40fffc63]; movsxd rdi, esp; call rax; 
0x000000000018726f: push qword ptr [rax + 0x40fffc88]; mov ah, bh; call rax; 
0x0000000000187057: push qword ptr [rax + 0x40fffc8b]; mov edi, esp; call rax; 
0x0000000000187767: push qword ptr [rax + 0x40fffcaf]; scasd eax, dword ptr [rdi]; cld; call rax; 
0x000000000017312f: push qword ptr [rax + 0x41]; in eax, dx; jmp rax; 
0x00000000000220a0: push qword ptr [rax + 0x48]; add esp, 8; ret; 
0x00000000001862f3: push qword ptr [rax + 0x5b]; sti; call qword ptr [rax + 0x5d]; 
0x00000000001863bf: push qword ptr [rax + 0x60fffda4]; movsd dword ptr [rdi], dword ptr [rsi]; std; call qword ptr [rax - 0x5a]; 
0x00000000001785eb: push qword ptr [rax + 0x68]; bnd call qword ptr [rax - 0x3f000d98]; push 0x68f0fff2; bnd jmp qword ptr [rax]; imul esi, edx, 0xf26940ff; jmp qword ptr [rax + 0x69]; 
0x00000000001781ab: push qword ptr [rax + 0x6f]; int1; dec eax; cdq; int1; jmp rax; 
0x00000000001771b3: push qword ptr [rax + 0x75]; out dx, al; call qword ptr [rax]; 
0x00000000001874c3: push qword ptr [rax + 0x7c]; cld; jmp rax; 
0x00000000001872bf: push qword ptr [rax + 0x7d]; cld; jmp rax; 
0x000000000018683f: push qword ptr [rax + 0xb]; cld; call qword ptr [rax + 0xd]; 
0x0000000000186333: push qword ptr [rax + 0xfffb78]; jp 0x186336; call qword ptr [rax + 0x7b]; 
0x000000000018691f: push qword ptr [rax + 0xfffbf1]; sti; call qword ptr [rax - 0xc]; 
0x0000000000186973: push qword ptr [rax + 0xfffbf8]; cli; sti; call qword ptr [rax - 5]; 
0x0000000000186b3f: push qword ptr [rax + 0xfffc24]; cld; call qword ptr [rax + 0x27]; 
0x0000000000186873: push qword ptr [rax + 5]; cld; call qword ptr [rax + 7]; 
0x00000000000f4edb: push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0xf4e90; mov rdi, qword ptr [r14]; call rbx; 
0x00000000000f4f1c: push qword ptr [rax + rcx + 0x48]; mov esi, ebx; call 0xf4e90; mov rdi, qword ptr [r15]; call rbx; 
0x00000000000fa61d: push qword ptr [rax + rcx + 0x5b]; pop rbp; ret; 
0x000000000011b07d: push qword ptr [rax + rdx + 0x44]; mov eax, esp; syscall; 
0x000000000006e495: push qword ptr [rax + rdx + 0x48]; mov eax, dword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000bd38e: push qword ptr [rax + rsi - 0x77]; ret 0xe283; 
0x000000000018d50b: push qword ptr [rax + rsi*4 - 0x3dbfffe]; stc; jmp rsp; 
0x000000000017861f: push qword ptr [rax - 0x1f000d96]; push -0xe; call qword ptr [rax]; 
0x0000000000186697: push qword ptr [rax - 0x21]; sti; call qword ptr [rax - 0x1f]; 
0x0000000000186717: push qword ptr [rax - 0x22]; sti; call qword ptr [rax - 0x20]; 
0x0000000000186783: push qword ptr [rax - 0x2b]; sti; inc eax; salc; sti; call qword ptr [rax]; 
0x000000000017863f: push qword ptr [rax - 0x3f000d95]; imul esi, edx, -1; shr byte ptr [rbx - 0xe], 1; jmp rax; 
0x00000000001864c3: push qword ptr [rax - 0x54]; std; call qword ptr [rax]; 
0x000000000018774f: push qword ptr [rax - 0x55]; cld; jmp rax; 
0x00000000001863ab: push qword ptr [rax - 0x59]; std; call qword ptr [rsi + 0x42fffda4]; movsd dword ptr [rdi], dword ptr [rsi]; std; call qword ptr [rdx]; 
0x00000000001877c7: push qword ptr [rax - 0x5e]; cld; jmp rax; 
0x000000000018626b: push qword ptr [rax - 0x5f0004dc]; and eax, 0x2690fffb; sti; inc dword ptr [rax + 0x70fffb27]; sub bl, bh; jmp qword ptr [rax + 0x29]; 
0x00000000001879cb: push qword ptr [rax - 0x5f]; cld; call rax; 
0x0000000000186387: push qword ptr [rax - 0x68]; sti; jmp qword ptr [rax]; 
0x00000000001782b3: push qword ptr [rax - 0x6a]; cld; jmp rax; 
0x000000000018681b: push qword ptr [rax - 0x6f0003f7]; or edi, esp; inc dword ptr [rax - 0x7f0003f3]; paddb mm7, mm7; adc byte ptr [rcx], 0xfc; call qword ptr [rax]; 
0x00000000001868bb: push qword ptr [rax - 0x6f0003f8]; or bh, ah; jmp qword ptr [rax + 0xc]; 
0x0000000000186837: push qword ptr [rax - 0x6f0003f9]; or esp, edi; push qword ptr [rax + 0xb]; cld; call qword ptr [rax + 0xd]; 
0x00000000001862eb: push qword ptr [rax - 0x6f0004a9]; pop rcx; sti; push qword ptr [rax + 0x5b]; sti; call qword ptr [rax + 0x5d]; 
0x00000000001782db: push qword ptr [rax - 0x72]; cld; jmp qword ptr [rax - 0x59]; 
0x0000000000178273: push qword ptr [rax - 0x7e]; cld; call qword ptr [rax - 0x4f00037d]; test ah, bh; call rax; 
0x0000000000186233: push qword ptr [rax - 0x7f0004e9]; sbb bl, bh; call qword ptr [rax + 0x19]; 
0x0000000000186233: push qword ptr [rax - 0x7f0004e9]; sbb bl, bh; call qword ptr [rax + 0x19]; sti; jmp qword ptr [rax]; 
0x0000000000186963: push qword ptr [rax - 0xd]; sti; inc eax; hlt; sti; call qword ptr [rax]; 
0x0000000000186893: push qword ptr [rax]; add eax, 0x710fffc; cld; push rax; or ah, bh; call rax; 
0x00000000001868af: push qword ptr [rax]; add edi, esp; push rax; add al, 0xfc; call rax; 
0x0000000000186993: push qword ptr [rax]; cld; call qword ptr [rax]; 
0x0000000000186d63: push qword ptr [rax]; cld; inc eax; movsxd rdi, esp; call qword ptr [rax + 0x63]; 
0x000000000009c77f: push qword ptr [rax]; leave; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x0000000000187077: push qword ptr [rax]; mov ah, bh; inc eax; xchg esp, edi; call qword ptr [rax - 0x79]; 
0x000000000017828b: push qword ptr [rax]; mov esp, edi; call qword ptr [rax - 0x76]; 
0x000000000018687b: push qword ptr [rax]; or esp, edi; call qword ptr [rax]; 
0x000000000018687b: push qword ptr [rax]; or esp, edi; call qword ptr [rax]; or edi, esp; jmp rax; 
0x0000000000186313: push qword ptr [rax]; outsb dx, byte ptr [rsi]; sti; inc dword ptr [rax - 0x2f000491]; jo 0x18631a; jmp qword ptr [rax]; 
0x00000000001862fb: push qword ptr [rax]; pop rdi; sti; call qword ptr [rax]; 
0x0000000000178133: push qword ptr [rax]; push rax; int1; inc dword ptr [rax + 0x52]; int1; call qword ptr [rax + 0x54]; 
0x00000000001862db: push qword ptr [rax]; push rax; sti; call qword ptr [rax]; 
0x0000000000177f63: push qword ptr [rax]; push rsi; out dx, eax; call qword ptr [rax]; 
0x0000000000186773: push qword ptr [rax]; sar bl, 1; inc dword ptr [rax - 0x2f00042f]; sar bl, cl; jmp qword ptr [rax]; 
0x0000000000186b1f: push qword ptr [rax]; sbb bh, ah; inc dword ptr [rax - 0x2f0003e5]; sbb al, 0xfc; jmp qword ptr [rax]; 
0x00000000001867c7: push qword ptr [rax]; xlatb; sti; inc dword ptr [rax + 0x58fffbd8]; add al, 0xfc; jmp qword ptr [rax]; 
0x0000000000163b28: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x000000000010888b: push qword ptr [rbp + 0x1a]; xor edi, edi; mov eax, 0xe3; syscall; 
0x00000000000769cb: push qword ptr [rbp + 2]; pop rbx; ret; 
0x00000000000fa35f: push qword ptr [rbp + 7]; mov eax, 0x27; syscall; 
0x00000000000fccf8: push qword ptr [rbp + rax - 0x7d]; ret 0x8901; 
0x0000000000132f90: push qword ptr [rbp + rcx + 0x48]; add esp, 8; ret; 
0x000000000018923b: push qword ptr [rbp + rdi*8 - 0x416c0000]; out dx, al; jmp rsp; 
0x00000000000ec072: push qword ptr [rbp + rdx*8 + 0x48]; mov ebp, edi; mov rdi, rbp; mov eax, 0x4f; syscall; 
0x00000000001116f2: push qword ptr [rbp - 0x15]; pop rbx; ret; 
0x000000000011c17b: push qword ptr [rbp - 0x16]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007bdc1: push qword ptr [rbp - 0x1a]; pop rbx; ret; 
0x000000000018dcf3: push qword ptr [rbp - 0x29ebfffe]; cli; jmp rsp; 
0x00000000000c0d85: push qword ptr [rbx + 0x31]; ret; 
0x00000000000cb558: push qword ptr [rbx + 0x34]; ret; 
0x0000000000073692: push qword ptr [rbx + 0x48]; sub esp, 8; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x60]; 
0x0000000000036f0c: push qword ptr [rbx + 1]; ret; 
0x000000000018d31b: push qword ptr [rbx + 2]; add byte ptr [rax + rsi*4 - 7], ah; ljmp ptr [rbx - 0x4f0bfffe]; stc; jmp rsp; 
0x00000000000eaf89: push qword ptr [rbx + 3]; mov eax, edx; ret; 
0x0000000000047116: push qword ptr [rbx + 3]; xor eax, eax; ret; 
0x00000000000fb9a5: push qword ptr [rbx + rax - 0x75]; add al, 0x24; add rsp, 0x18; ret; 
0x000000000007505c: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; pop rbx; ret; 
0x000000000011b118: push qword ptr [rbx + rbx + 0x48]; movsxd rdi, edx; mov eax, r12d; syscall; 
0x0000000000165d11: push qword ptr [rbx + rbx + 0x48]; movsxd rdi, edx; mov eax, r13d; syscall; 
0x00000000000f2622: push qword ptr [rbx + rbx + 0x48]; sub esp, 8; call 0x6d8d0; mov eax, 1; add rsp, 8; ret; 
0x00000000000fa6b2: push qword ptr [rbx + rcx - 0xd]; ret; 
0x000000000018c7cb: push qword ptr [rbx + rcx*2 + 2]; add byte ptr [rdx + rcx*2], al; clc; call rsp; 
0x000000000018de33: push qword ptr [rbx + rcx*8 - 0x141bffff]; cli; jmp rsp; 
0x00000000000377ca: push qword ptr [rbx + rdx + 0x48]; mov eax, 0xfffffffe; rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000fc33f: push qword ptr [rbx - 0x48]; adc al, 0; add byte ptr [rax], al; syscall; 
0x000000000007de9c: push qword ptr [rbx]; add byte ptr [rcx], dh; dec dword ptr [rcx - 0x77]; salc; call qword ptr [rax]; 
0x00000000000eaf3c: push qword ptr [rbx]; mov rcx, qword ptr [rip + 0x2d2f22]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001899eb: push qword ptr [rcx + rax*2 + 1]; add byte ptr [rdi], dh; out dx, eax; call rsp; 
0x000000000018db0b: push qword ptr [rcx + rbx*8 - 0x56cbfffe]; cli; jmp rsp; 
0x00000000001871eb: push qword ptr [rcx + rcx*4]; cld; inc esp; mov ah, bh; call qword ptr [rax + rcx*4 - 4]; jmp rsp; 
0x000000000018ae3b: push qword ptr [rcx + rdi*4 - 0x2d1bffff]; hlt; jmp rsp; 
0x000000000011afe6: push qword ptr [rcx + rdx - 0x48]; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000000739e2: push qword ptr [rcx + rdx*8 + 0x5b]; pop rbp; mov eax, 0xffffffff; pop r12; ret; 
0x00000000000cd91a: push qword ptr [rcx]; fild dword ptr [rbx - 0x6af0fd08]; ret; 
0x00000000000c530d: push qword ptr [rcx]; fisttp dword ptr [rax - 0x77]; fmul dword ptr [rcx + 3]; adc byte ptr [r8 - 0x7d], r9b; ret; 
0x0000000000118a5c: push qword ptr [rcx]; jmp qword ptr [rsi - 0x77]; 
0x0000000000076e34: push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000577f3: push qword ptr [rcx]; rol byte ptr [rbp - 0x7b], cl; ror byte ptr [rdi], 0x9f; ret 0x9529; 
0x000000000005c89d: push qword ptr [rcx]; rol byte ptr [rbp - 0x7b], cl; ror byte ptr [rdi], cl; lahf; ret 0x9529; 
0x0000000000123f79: push qword ptr [rcx]; ror byte ptr [rax - 0x75], 0x74; and al, 0x40; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000101f96: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0x7b; sub byte ptr [rax], al; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000001273d2: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or cl, ch; adc bl, byte ptr [rbx - 0xc]; jmp qword ptr [rsi - 0x70]; 
0x0000000000071946: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x000000000004f20a: push qword ptr [rcx]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x00000000000f72bf: push qword ptr [rcx]; shr al, 0x29; pop rsp; idiv edi; add rsp, 0x408; ret; 
0x000000000004814f: push qword ptr [rcx]; shr cl, 0x25; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000cde33: push qword ptr [rcx]; shr cl, cl; ret 0xfff9; 
0x00000000000c11ad: push qword ptr [rdi + 0x1b]; hlt; mov rdi, rdx; mov eax, r9d; syscall; 
0x00000000000eb5ae: push qword ptr [rdi + 0x35]; add rsp, 0x70; pop rbx; ret; 
0x00000000000ebaf2: push qword ptr [rdi + 0x37]; mov dword ptr [rip + 0x2d59b1], 1; ret; 
0x00000000000ed04e: push qword ptr [rdi + 0x66]; add rsp, 0x38; ret; 
0x00000000000f1cd0: push qword ptr [rdi + 0x6f]; add rsp, 0x58; pop rbx; pop rbp; ret; 
0x0000000000036f7b: push qword ptr [rdi + 1]; ret; 
0x00000000000ecf02: push qword ptr [rdi + 3]; cdqe; ret; 
0x00000000000fa2f2: push qword ptr [rdi + 3]; pop rbx; pop rbp; ret; 
0x000000000011c46e: push qword ptr [rdi + 9]; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000011fa37: push qword ptr [rdi + rax + 0x48]; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x0000000000186c0f: push qword ptr [rdx + 0x22fffc5f]; cld; push qword ptr [rdx + 0x42fffc65]; cld; call rdx; 
0x0000000000186c17: push qword ptr [rdx + 0x42fffc65]; cld; call rdx; 
0x0000000000187143: push qword ptr [rdx + 0x42fffc86]; xchg ah, bh; call rdx; 
0x000000000018763b: push qword ptr [rdx + 0x42fffcad]; lodsd eax, dword ptr [rsi]; cld; call rdx; 
0x0000000000186e3f: push qword ptr [rdx + 0x57]; cld; jmp rdx; 
0x00000000001892fb: push qword ptr [rdx + rax - 0x2b2bffff]; out dx, al; jmp rsp; 
0x000000000018a26b: push qword ptr [rdx + rbp*2 - 0x485bffff]; int1; jmp rsp; 
0x000000000018c9ab: push qword ptr [rdx + rbx*2 + 2]; add byte ptr [rsp + rsi*2 - 8], bl; jmp rsp; 
0x00000000000c2b73: push qword ptr [rdx + rbx*8 + 0x49]; movsxd rdi, esp; mov eax, 3; syscall; 
0x0000000000129d9f: push qword ptr [rdx + rcx + 0x48]; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x000000000006ebc3: push qword ptr [rdx + rcx + 0x48]; mov eax, edx; pop rbx; ret; 
0x0000000000131c3e: push qword ptr [rdx + rcx + 0x48]; movsxd rdi, eax; mov eax, 3; syscall; 
0x000000000012f155: push qword ptr [rdx + rcx + 0x48]; movsxd rdi, ecx; mov eax, 3; syscall; 
0x00000000001310b7: push qword ptr [rdx + rcx + 0x49]; movsxd rdi, esi; mov eax, 3; syscall; 
0x00000000000d0243: push qword ptr [rdx + rcx + 0x49]; movsxd rdi, esp; mov eax, 3; syscall; 
0x0000000000114813: push qword ptr [rdx - 0x3dbbf0fe]; ret; 
0x0000000000187817: push qword ptr [rdx - 0x58]; cld; jmp rdx; 
0x0000000000187123: push qword ptr [rdx]; mov bh, ah; inc edx; mov esp, edi; call qword ptr [rdx - 0x77]; 
0x000000000018761b: push qword ptr [rdx]; mov cl, 0xfc; inc edx; mov al, 0xfc; call qword ptr [rdx - 0x50]; 
0x000000000018758f: push qword ptr [rsi + 0x26fffcab]; mov dl, 0xfc; push qword ptr [rsi + 0x46fffcb1]; mov cl, 0xfc; call rsi; 
0x000000000018709f: push qword ptr [rsi + 0x46fffc8a]; mov bh, ah; call rsi; 
0x0000000000187597: push qword ptr [rsi + 0x46fffcb1]; mov cl, 0xfc; call rsi; 
0x00000000000fcaa9: push qword ptr [rsi + rax - 0x7d]; ret 0x6601; 
0x000000000011f7dd: push qword ptr [rsi + rcx + 0x48]; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 0x20]; 
0x0000000000074e7d: push qword ptr [rsi + rsi*4 - 0xa]; ret 0x7508; 
0x00000000000fa6e6: push qword ptr [rsi - 0x34]; neg eax; mov dword ptr fs:[rsi], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000186b93: push qword ptr [rsi]; cld; inc esi; cld; call qword ptr [rsi + 0x65]; 
0x00000000001870bf: push qword ptr [rsi]; xchg esp, edi; inc esi; xchg ah, bh; call qword ptr [rsi - 0x7a]; 
0x0000000000186cdf: push qword ptr [rsp + 0x6444fffc]; cld; call rsp; 
0x0000000000187703: push qword ptr [rsp + rbp*4 - 0x53bb0004]; cld; call rsp; 
0x000000000007bd61: push qword ptr [rsp + rbx + 0x48]; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000018a03b: push qword ptr [rsp + rbx*2]; add dword ptr [rax], eax; hlt; ret 0xfff0; 
0x000000000018db8b: push qword ptr [rsp + rbx*8 + 2]; add byte ptr [rdi + rsi*4 - 0x23530006], dl; add al, byte ptr [rax]; in al, 0xb7; cli; call rsp; 
0x0000000000127791: push r12; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x00000000001276b6: push r12; mov eax, 1; ret; 
0x00000000000bd2bc: push r12; push rbp; push rbx; mov rbx, rsi; syscall; 
0x00000000000bd2ba: push r13; push r12; push rbp; push rbx; mov rbx, rsi; syscall; 
0x0000000000105b8c: push r14; sub byte ptr [rbx + 0x2b87ff35], cl; add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x000000000007b10c: push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000086a99: push r8; add dword ptr [rax - 0x75], ecx; outsb dx, byte ptr [rsi]; or byte ptr [rbp - 0x2a], dh; mov rdi, rsi; call qword ptr [rbx + 0x40]; 
0x00000000001248cf: push r8; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f23dc: push r8; sbb byte ptr [rax + 0x65], bh; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x000000000019b584: push r9; out dx, al; jmp qword ptr [rdx]; 
0x0000000000080253: push rax; adc byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000012803d: push rax; adc byte ptr [rax + 1], bh; ret; 
0x00000000001216ff: push rax; adc byte ptr [rbp - 0x267bf040], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbx]; 
0x000000000007c5d1: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000011fc1d: push rax; adc dh, dh; ret 0x7401; 
0x000000000018684c: push rax; adc esp, edi; jmp rax; 
0x000000000003cd25: push rax; add al, 0x31; ror byte ptr [rax - 0x77], 0xf; mov qword ptr [rdi + 8], rdx; ret; 
0x00000000001867f0: push rax; add al, 0xfc; call qword ptr [rax]; 
0x00000000001868b3: push rax; add al, 0xfc; call rax; 
0x00000000001931ed: push rax; add byte ptr [rax], al; adc byte ptr [rsi - 0x15], ah; call qword ptr [rdi]; 
0x0000000000075011: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x000000000007b10d: push rax; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000193205: push rax; add byte ptr [rax], al; sbb byte ptr [rsi - 0x15], ah; jmp qword ptr [rbx]; 
0x0000000000086a9a: push rax; add dword ptr [rax - 0x75], ecx; outsb dx, byte ptr [rsi]; or byte ptr [rbp - 0x2a], dh; mov rdi, rsi; call qword ptr [rbx + 0x40]; 
0x000000000004f9a0: push rax; add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x1a817], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000052aa0: push rax; add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0x73617], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000000526e8: push rax; add dword ptr [rax - 0x77], ecx; push rbx; sub dh, al; add byte ptr [rip - 0xac517], ch; jmp qword ptr [rsi + 0x2e]; 
0x000000000007364c: push rax; add dword ptr [rax - 0x77], ecx; push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x0000000000112c40: push rax; add dword ptr [rbx - 0x2037b], ecx; dec dword ptr [rax + 0x39]; ret 0x870f; 
0x0000000000059f69: push rax; add dword ptr [rcx - 0x77], ecx; push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rax - 0x7d], cl; ret; 
0x0000000000055df2: push rax; add dword ptr [rcx - 0x77], ecx; push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0x4101; 
0x0000000000055171: push rax; add dword ptr [rcx - 0x77], ecx; push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x0000000000055a32: push rax; add dword ptr [rcx - 0x77], ecx; push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0xe901; 
0x00000000000b22c0: push rax; add eax, dword ptr [rdi + rcx + 0x48]; ret 0x93ba; 
0x00000000000f794a: push rax; add ecx, dword ptr [rax - 0x7b]; ror byte ptr [rax + 0xf], 0x48; ret 0xc148; 
0x000000000007966b: push rax; add ecx, ebp; sar esi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000016177c: push rax; add r8b, byte ptr [r8]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000012e0c6: push rax; add rsp, 0x10; pop rbx; ret; 
0x000000000018625b: push rax; and bl, bh; jmp rax; 
0x000000000013385f: push rax; and byte ptr [rax - 0x77], cl; ret 0x3d83; 
0x000000000012157b: push rax; and byte ptr [rbx + 0x5d], bl; mov eax, 1; pop r12; ret; 
0x00000000001b2280: push rax; and esi, edi; call qword ptr [rdx]; 
0x00000000001355da: push rax; call 0x109a80; mov rax, qword ptr [rip + 0x288881]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000000fa20: push rax; call qword ptr [rax]; 
0x0000000000027f2a: push rax; call rax; 
0x00000000001781c8: push rax; cdq; int1; call qword ptr [rax - 0x66]; 
0x00000000001781c8: push rax; cdq; int1; call qword ptr [rax - 0x66]; int1; jmp qword ptr [rax]; 
0x000000000018c841: push rax; clc; call rsp; 
0x0000000000186b54: push rax; cld; jmp rax; 
0x00000000001ac280: push rax; cli; cmc; jmp qword ptr [rax]; 
0x00000000001aaa9d: push rax; cmc; jmp qword ptr [rdx]; 
0x00000000000f7fe8: push rax; cmp byte ptr [rax + 0x64], bh; test edx, edx; cmovne eax, edx; ret; 
0x00000000001275fd: push rax; cmp byte ptr [rax - 0x77], cl; push rsi; or byte ptr [rax - 0x75], cl; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000126722: push rax; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x48], cl; mov edi, ebp; call rdx; 
0x000000000006ed9b: push rax; cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf40; 
0x00000000000f09c1: push rax; cmp byte ptr [rsi + 0x41], ah; mov dword ptr [rax + 0x21], esi; ret; 
0x0000000000178270: push rax; cmp esp, 0xfc8270ff; call qword ptr [rax - 0x4f00037d]; test ah, bh; call rax; 
0x0000000000179f28: push rax; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x000000000017a010: push rax; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; call rbx; 
0x000000000008674a: push rax; dec byte ptr [rax - 0x77]; cmp byte ptr [r9 + r9*4 + 0x43], cl; mov qword ptr [rbx], rdi; mov dword ptr [rbx + 0x30], eax; call rcx; 
0x00000000000b185c: push rax; div byte ptr [rax]; add byte ptr [rdi], cl; xchg eax, ebp; ret 0x3145; 
0x00000000001abdf0: push rax; div ch; jmp qword ptr [rcx + 0x4000001]; 
0x00000000001b5a70: push rax; fcomi st(7); call qword ptr [rbx]; 
0x00000000001a1480: push rax; fcompi st(1); jmp qword ptr [rdi + 1]; 
0x0000000000186734: push rax; fdiv st(3), st(0); jmp qword ptr [rax]; 
0x00000000000f7152: push rax; hlt; jmp qword ptr [rsi + 0x66]; 
0x00000000000cf8ee: push rax; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000017860f: push rax; imul esi, edx, 0xf26a20ff; call qword ptr [rax + 0x6a]; 
0x000000000017860f: push rax; imul esi, edx, 0xf26a20ff; call qword ptr [rax + 0x6a]; inc dword ptr [rax - 0x4f000d96]; push -0xe; jmp rax; 
0x0000000000186704: push rax; in al, 0xfb; call qword ptr [rax - 0x1a]; 
0x00000000001781fb: push rax; in eax, 0xf1; inc dword ptr [rax]; out 0xf1, al; call qword ptr [rax]; 
0x000000000010a44a: push rax; int1; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000178135: push rax; int1; inc dword ptr [rax + 0x52]; int1; call qword ptr [rax + 0x54]; 
0x00000000000ee65f: push rax; jmp qword ptr [rsi - 0x7d]; 
0x0000000000187487: push rax; jnp 0x187487; jmp qword ptr [rax + 0x7b]; 
0x00000000001874cc: push rax; jnp 0x1874cb; push rax; pop rbp; cld; call qword ptr [rax]; 
0x000000000017802f: push rax; mov ch, 0xf0; call qword ptr [rax]; 
0x00000000001afd10: push rax; mov ch, 0xf6; call qword ptr [rax]; 
0x00000000000257ab: push rax; mov dword ptr [rdx + 0x54], eax; ret; 
0x00000000001248d0: push rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000001adb2c: push rax; mov ebp, esi; jmp qword ptr [rdx]; 
0x00000000000794de: push rax; mov edi, dword ptr [rdi + 0x70]; call 0xeb6a9; pop rdx; cdqe; ret; 
0x0000000000187258: push rax; mov edi, esp; jmp rax; 
0x0000000000127eb6: push rax; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000127ead: push rax; mov qword ptr [rsi + 8], rdx; mov rax, qword ptr [rax + 0x50]; mov qword ptr [rsi + 0x10], rax; ret; 
0x000000000002762f: push rax; mov qword ptr [rsp], rax; call qword ptr [rbp]; 
0x000000000002a55f: push rax; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000012a7ee: push rax; mov rax, qword ptr [r13 + 8]; mov qword ptr [rsp], r15; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x0000000000028517: push rax; mov rdi, qword ptr [rsp + 0x48]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002793b: push rax; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x0000000000025fa8: push rax; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002a436: push rax; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x00000000001063f6: push rax; mov rsi, rdx; call rax; 
0x0000000000186d6c: push rax; movsxd rdi, esp; jmp rax; 
0x000000000018689b: push rax; or ah, bh; call rax; 
0x0000000000127f1d: push rax; or al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000001868e0: push rax; or bh, ah; jmp qword ptr [rax]; 
0x0000000000123b25: push rax; or byte ptr [rax + 1], bh; ret; 
0x0000000000074113: push rax; or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x7412c; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000123b05: push rax; or byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x77], cl; push rcx; adc byte ptr [rax + 1], bh; ret; 
0x00000000000218f1: push rax; or byte ptr [rax], al; add bl, ch; or ecx, dword ptr [rax - 1]; ret 0x9539; 
0x00000000000869e1: push rax; or byte ptr [rbp + 0x23], dh; mov rdi, r13; call qword ptr [rbx + 0x40]; 
0x000000000007c5c1: push rax; or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000012d47c: push rax; or byte ptr [rbp - 0x14438a40], al; ret 0x1f0f; 
0x00000000000776d1: push rax; or byte ptr [rbx + 0xa], dh; lea rcx, qword ptr [rdx + 4]; mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; ret; 
0x000000000004e740: push rax; or byte ptr [rcx - 0x77], cl; push rdi; or bl, ch; ret 0x8348; 
0x000000000004cda5: push rax; or byte ptr [rcx - 0x77], cl; push rdi; or cl, ch; jmp rcx; 
0x000000000007feea: push rax; or dh, dh; ret 0x7404; 
0x000000000007ff06: push rax; or dh, dh; ret 0xf04; 
0x000000000013754c: push rax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000186844: push rax; or eax, 0xf50fffc; cld; call qword ptr [rax + 0x11]; cld; jmp rax; 
0x0000000000186708: push rax; out 0xfb, al; call qword ptr [rax - 0x18]; 
0x0000000000186708: push rax; out 0xfb, al; call qword ptr [rax - 0x18]; sti; jmp rax; 
0x00000000001898d1: push rax; out dx, eax; dec dword ptr [rax + 0x51180001]; out dx, eax; call rsp; 
0x0000000000186848: push rax; paddb mm7, mm7; push rax; adc esp, edi; jmp rax; 
0x00000000001860fe: push rax; pop r9; clc; ret 0x6e1f; 
0x00000000000301ac: push rax; pop rax; mov rax, qword ptr [rip + 0x38dd6b]; add rdx, 0x200; mov qword ptr fs:[rax], rdx; ret; 
0x00000000001874cf: push rax; pop rbp; cld; call qword ptr [rax]; 
0x0000000000178618: push rax; push -0xe; inc dword ptr [rax - 0x4f000d96]; push -0xe; jmp rax; 
0x0000000000186dcb: push rax; push rbp; cld; jmp qword ptr [rsi + 0x55]; 
0x00000000001862e3: push rax; push rbx; sti; call rax; 
0x000000000017813c: push rax; push rsp; int1; jmp qword ptr [rax + 0x56]; 
0x000000000000a1e8: push rax; ret 0x10; 
0x000000000001af78: push rax; ret 0x3b; 
0x0000000000004530: push rax; ret 0xb; 
0x00000000001aa930: push rax; ret 0xfff8; 
0x00000000000066c0: push rax; ret 7; 
0x000000000001b278: push rax; ret; 
0x00000000000b5121: push rax; ror byte ptr [rax - 0x46], 1; ret; 
0x0000000000186243: push rax; sbb bh, bl; inc eax; sbb edi, ebx; jmp rax; 
0x00000000000f23dd: push rax; sbb byte ptr [rax + 0x65], bh; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x00000000000c81df: push rax; sbb byte ptr [rbx + 0x1f0f404a], cl; add byte ptr [rax - 0x77], cl; fisttp qword ptr [rax - 0x7d]; ret; 
0x000000000007c5c6: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000074f7a: push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000012b44e: push rax; sbb byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 8]; 
0x00000000001025d1: push rax; sbb dh, dh; ret 0x7504; 
0x000000000018623c: push rax; sbb ebx, edi; jmp qword ptr [rax]; 
0x00000000001a24b0: push rax; sbb edx, esi; call qword ptr [rdx]; 
0x0000000000187578: push rax; scasb al, byte ptr [rdi]; cld; jmp rax; 
0x0000000000186490: push rax; scasb al, byte ptr [rdi]; std; jmp rax; 
0x00000000001079f5: push rax; shr ax, 0xe; and eax, 1; ret; 
0x00000000001862dd: push rax; sti; call qword ptr [rax]; 
0x00000000001864bc: push rax; stosd dword ptr [rdi], eax; std; jmp rax; 
0x0000000000074f76: push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x0000000000122442: push rax; sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbp + 0x40]; 
0x0000000000121f4a: push rax; sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x0000000000121d4e: push rax; sub edx, r14d; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x0000000000187250: push rax; test esp, edi; inc eax; mov edi, esp; call qword ptr [rax - 0x75]; 
0x0000000000178283: push rax; xchg ah, bh; call qword ptr [rax]; 
0x000000000019c140: push rax; xchg dh, ch; call qword ptr [rdi]; 
0x0000000000186383: push rax; xchg eax, esi; sti; push qword ptr [rax - 0x68]; sti; jmp qword ptr [rax]; 
0x00000000001ad9ec: push rax; xchg ebp, esi; jmp qword ptr [rdx]; 
0x0000000000187080: push rax; xchg esp, edi; jmp rax; 
0x00000000000f09bd: push rax; xor al, 0x41; mov dword ptr [rax + 0x38], edx; mov word ptr [r8 + 0x21], si; ret; 
0x000000000007bd6f: push rax; xor byte ptr [rbx + 0x374fff8], al; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000007bdbd: push rax; xor byte ptr [rbx - 0x198a0008], al; pop rbx; ret; 
0x00000000000aeffc: push rax; xor dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x310afa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aef45: push rax; xor dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x310bb1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001a7e00: push rax; xor ebp, esi; jmp qword ptr [rcx]; 
0x000000000018699b: push rax; xor esp, edi; call rax; 
0x00000000000e3455: push rbp; adc byte ptr [rax + 0x63], cl; ret; 
0x000000000012c42d: push rbp; adc byte ptr [rbx + rcx*4 + 0x24], cl; ret 0x854d; 
0x000000000012c585: push rbp; adc byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8348; 
0x00000000001641f6: push rbp; adc byte ptr [rcx - 0x75], cl; sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000018fcf4: push rbp; adc edx, ebp; jmp qword ptr [rdx]; 
0x00000000000d9402: push rbp; add al, 0x31; fild dword ptr [rbp - 0x14ea802e]; imul ecx, dword ptr [rdi], 0x8d00401f; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000000e4163: push rbp; add al, 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000d945f: push rbp; add al, 0x8d; add dword ptr [r8 - 0x7d], ecx; ret; 
0x000000000018c92d: push rbp; add al, byte ptr [rax]; cwde; push -8; jmp rsp; 
0x000000000012384d: push rbp; add byte ptr [rbx + 0x634801ea], al; ret 0xd285; 
0x0000000000086083: push rbp; add byte ptr [rcx + rdi*2 + 0x48], dh; mov esi, ebx; mov rdi, r13; call rdx; 
0x0000000000028e78: push rbp; add byte ptr [rcx], dh; ror byte ptr [rax + 0x39], cl; ret; 
0x0000000000112603: push rbp; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000186e4d: push rbp; cld; call qword ptr [rdx + 0x55]; 
0x0000000000186f51: push rbp; cld; call rax; 
0x0000000000186f51: push rbp; cld; call rax; pop rsp; cld; call qword ptr [rax + 0x5c]; 
0x0000000000186f8d: push rbp; cld; jmp qword ptr [rax]; 
0x0000000000186dcd: push rbp; cld; jmp qword ptr [rsi + 0x55]; 
0x0000000000186ed1: push rbp; cld; jmp rsp; 
0x0000000000186f4d: push rbp; cld; ljmp ptr [rdx]; push rbp; cld; call rax; 
0x00000000001a8711: push rbp; cmc; call qword ptr [rcx]; 
0x000000000017a093: push rbp; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp rcx; 
0x00000000000e9ef4: push rbp; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret; 
0x000000000008a6a7: push rbp; fisttp word ptr [rax + rax]; ret; 
0x0000000000067509: push rbp; mov byte ptr [rdi], cl; xchg dword ptr [rax - 0x76fffff5], ebp; ret 0x348; 
0x0000000000067482: push rbp; mov byte ptr [rdi], cl; xchg dword ptr [rbp - 0x76ffffe9], edx; ret 0x348; 
0x0000000000067931: push rbp; mov byte ptr [rdi], cl; xchg dword ptr [rbp - 0x76fffffd], ebp; ret 0x348; 
0x000000000006757b: push rbp; mov byte ptr [rdi], cl; xchg dword ptr [rdi - 0x76fffff6], esp; ret 0x348; 
0x0000000000067850: push rbp; mov byte ptr [rdi], cl; xchg dword ptr [rip - 0x76fffffd], ecx; ret 0x348; 
0x000000000007b975: push rbp; mov rbp, rsi; push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x60]; 
0x0000000000022f02: push rbp; movabs al, byte ptr [0x201a748b48ef894c]; call rax; 
0x00000000000038a2: push rbp; movabs dword ptr [0x7972d6f857775fc9], eax; cmpsq qword ptr [rsi], qword ptr [rdi]; ret 0x49ec; 
0x00000000000c256a: push rbp; nop dword ptr [rax + rax]; mov eax, 0x20; ret; 
0x0000000000107269: push rbp; nop; mov edx, dword ptr [r12 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; call rax; 
0x00000000001072e9: push rbp; nop; mov edx, dword ptr [r12 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; call rax; 
0x00000000001070ad: push rbp; nop; mov edx, dword ptr [r13 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x00000000001076e6: push rbp; nop; mov edx, dword ptr [r13 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r14; call rax; 
0x0000000000106edf: push rbp; nop; mov edx, dword ptr [r14 + 0x18]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x000000000010755d: push rbp; nop; mov edx, dword ptr [r14 - 0x30]; mov dword ptr [rbp - 0x80], edx; mov rdx, r12; call rax; 
0x0000000000107669: push rbp; nop; mov rdx, r14; call rax; 
0x000000000013bfd8: push rbp; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001072f1: push rbp; or byte ptr [rax - 0x77], 0xda; call rax; 
0x000000000005e631: push rbp; or byte ptr [rbp + 0x5d8e0fd2], al; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret 0x3948; 
0x00000000000869da: push rbp; or byte ptr [rbx - 0x76b7fe1f], al; push rax; or byte ptr [rbp + 0x23], dh; mov rdi, r13; call qword ptr [rbx + 0x40]; 
0x0000000000081298: push rbp; or dh, dh; ret 0x7502; 
0x0000000000177f6d: push rbp; out dx, eax; call qword ptr [rax - 0x6f0010aa]; push rsi; out dx, eax; call rax; 
0x0000000000131a57: push rbp; outsd dx, dword ptr [rsi]; cmc; dec dword ptr [rax - 0x77]; ret 0x854d; 
0x00000000000bd2bb: push rbp; push r12; push rbp; push rbx; mov rbx, rsi; syscall; 
0x00000000000bd2be: push rbp; push rbx; mov rbx, rsi; syscall; 
0x00000000000f0746: push rbp; push rbx; movsxd rbx, edi; mov rdi, rbx; lea rdx, qword ptr [rsp - 0x38]; syscall; 
0x00000000000618a1: push rbp; rol byte ptr [rbp + 0x31], 1; in al, 0xe9; out 0xff, eax; dec dword ptr [rbp + rcx*4 + 0x2d]; ret; 
0x0000000000104952: push rbp; sbb byte ptr [rcx - 0x75], al; or r14b, r14b; ret 0x7508; 
0x0000000000104bd5: push rbp; sub byte ptr [rax - 0x77], cl; ret; 
0x00000000001202ab: push rbp; sub byte ptr [rbp + 0x488a74c0], al; mov eax, dword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000001088d4: push rbp; sub eax, dword ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000108848: push rbp; sub eax, dword ptr [rax]; mov rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001088be: push rbp; sub eax, dword ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010abc0: push rbp; xor eax, eax; mov rbp, rsp; pop rbp; ret; 
0x000000000008bdba: push rbp; xor rax, rax; ret; 
0x00000000000d4ab8: push rbx; adc byte ptr [rax + 0x39], cl; ret 0x574; 
0x00000000000004b5: push rbx; add al, 4; ret 0x6080; 
0x00000000000800d0: push rbx; add al, byte ptr [rax]; add byte ptr [rbp - 0x77cfdb9], cl; add al, 0x74; cmp al, 0x89; ret 0xb48b; 
0x00000000000c2645: push rbx; add byte ptr [r13 + rbp - 0x48], sil; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000f7eb1: push rbx; add dword ptr [rax - 0x73], ecx; add cl, byte ptr [r8 + 0x39]; ret 0xf48; 
0x0000000000033af3: push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000001034ec: push rbx; and byte ptr [rax + 0x2b], cl; xor r9b, bpl; ret; 
0x00000000000725d6: push rbx; and byte ptr [rax - 0x77], cl; and byte ptr [r8 - 0x75], r9b; sbb byte ptr [r8 + 0x29], cl; ret 0x8948; 
0x0000000000002043: push rbx; cmp byte ptr [rdi - 0x19ade7f3], dl; ret; 
0x00000000000a348c: push rbx; lea rax, qword ptr [rdi - 0x10]; ret; 
0x000000000014bd39: push rbx; mov al, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b739: push rbx; mov dh, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000464d0: push rbx; mov ebx, dword ptr [rdi]; mov esi, 9; mov eax, 0x3e; movsxd rdi, ebx; syscall; 
0x000000000014b439: push rbx; mov ecx, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ae39: push rbx; mov edi, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b139: push rbx; mov esp, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000075caa: push rbx; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r15; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x0000000000074430: push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x20]; 
0x000000000007b979: push rbx; mov rax, qword ptr [rdi + 0xd8]; mov rbx, rdi; call qword ptr [rax + 0x60]; 
0x0000000000127025: push rbx; mov rbx, rsi; sub rsp, 0x438; mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x00000000000bd2bf: push rbx; mov rbx, rsi; syscall; 
0x000000000009f7e2: push rbx; movq qword ptr [rdi + 0x30], mm7; lea rax, qword ptr [rdi + 0x40]; ret; 
0x000000000009dfd2: push rbx; movq qword ptr [rdi + 0x30], mm7; ret; 
0x00000000000a1062: push rbx; movq qword ptr [rdi + 0x30], mm7; xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000fa604: push rbx; movsxd rbx, edi; mov eax, ecx; mov rdi, rbx; syscall; 
0x00000000000f0747: push rbx; movsxd rbx, edi; mov rdi, rbx; lea rdx, qword ptr [rsp - 0x38]; syscall; 
0x000000000006cd85: push rbx; or al, 0xf6; ret 0x7404; 
0x000000000006d4c2: push rbx; or al, 0xf6; ret 0xf04; 
0x00000000000f5412: push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000001203f0: push rbx; or byte ptr [rcx + 0x48182444], cl; mov edi, ebx; call qword ptr [rdx + 0x20]; 
0x000000000007b32e: push rbx; or byte ptr [rdi], cl; mov dh, 0; pop rbx; ret; 
0x0000000000003c90: push rbx; or byte ptr fs:[rbx + 0x4e], ch; ret 0x6bba; 
0x00000000001898f1: push rbx; out dx, eax; call qword ptr [rcx + rbp + 0x54e40001]; out dx, eax; jmp rsp; 
0x000000000014ab39: push rbx; ret 3; 
0x0000000000037bec: push rbx; ret; 
0x000000000003c817: push rbx; sbb byte ptr [rax - 0x75], cl; jnp 0x3c825; mov qword ptr [rax + 0x60], rdx; call qword ptr [rbx]; 
0x00000000001862e5: push rbx; sti; call rax; 
0x000000000004f9a4: push rbx; sub dh, al; add byte ptr [rip - 0x1a817], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000052aa4: push rbx; sub dh, al; add byte ptr [rip - 0x73617], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000000526ec: push rbx; sub dh, al; add byte ptr [rip - 0xac517], ch; jmp qword ptr [rsi + 0x2e]; 
0x0000000000078bcf: push rbx; sub rdx, rsi; mov rdi, rbx; call rax; 
0x00000000001793cc: push rbx; wait; hlt; lcall ptr [rdi - 0x65]; hlt; call rsi; 
0x000000000006cde9: push rbx; xor al, 0x48; lea ecx, dword ptr [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000008b9db: push rbx; xor eax, dword ptr [rax]; add rsp, 0x100; ret; 
0x0000000000123b0d: push rcx; adc byte ptr [rax + 1], bh; ret; 
0x0000000000123b1e: push rcx; adc byte ptr [rcx - 0x77], cl; add byte ptr [rcx - 0x77], cl; push rax; or byte ptr [rax + 1], bh; ret; 
0x00000000000ece13: push rcx; adc byte ptr [rip + 0x64d8f700], ch; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001613b9: push rcx; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000008b66d: push rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000096c92: push rcx; add esi, eax; add dword ptr [rax], eax; mov qword ptr [rdi], rdx; ret; 
0x0000000000174a85: push rcx; call qword ptr [rsi]; 
0x00000000001aaae5: push rcx; cmc; jmp qword ptr [rdx]; 
0x000000000006033b: push rcx; cmp eax, 0x83480004; clc; dec dword ptr [rcx - 0x77]; ret 0x8b4c; 
0x0000000000001b28: push rcx; jns 0x1b32; ret; 
0x000000000008581b: push rcx; mov bl, 0x33; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000001865c7: push rcx; mov ebx, 0xbbf1fffd; std; call qword ptr [rax - 0x45]; 
0x0000000000186517: push rcx; mov ebx, 0xbbf1fffd; std; call qword ptr [rcx]; 
0x0000000000186607: push rcx; mov ebx, 0xbbf1fffd; std; dec dword ptr [rax - 0x24]; sti; call qword ptr [rax]; 
0x0000000000186587: push rcx; mov ebx, 0xbbf1fffd; std; jmp qword ptr [rdi - 0x45]; 
0x000000000018660b: push rcx; mov ebx, 0xdc48fffd; sti; call qword ptr [rax]; 
0x00000000000f1f13: push rcx; mov edi, 0xd8f7002c; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c2013: push rcx; mov esi, 0xd8f7002f; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a76eb: push rcx; or eax, 0x3d8d4800; ret; 
0x000000000019b585: push rcx; out dx, al; jmp qword ptr [rdx]; 
0x00000000001898d9: push rcx; out dx, eax; call rsp; 
0x000000000012328b: push rcx; ret 0xffef; 
0x000000000019c14e: push rcx; ret; 
0x00000000000f0c13: push rcx; shr byte ptr [rax + rax], cl; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000107f73: push rcx; shr byte ptr [rbx], 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001b0289: push rcx; sti; call rsi; 
0x00000000000fc807: push rcx; sub al, 0; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000cb313: push rcx; sub ebp, dword ptr [rdi]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000fae13: push rcx; xor byte ptr [rax + rax], ch; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fab13: push rcx; xor ebp, dword ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a0e92: push rdi; adc al, 0x30; in eax, dx; mov byte ptr [rdi + 0x15], ch; ret; 
0x000000000009f422: push rdi; adc al, 0x48; lea eax, dword ptr [rdi + 0x15]; ret; 
0x00000000000a1013: push rdi; adc byte ptr [rax - 0x12cfdfb1], cl; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000a0f11: push rdi; adc byte ptr [rax - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000c4978: push rdi; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a0ff0: push rdi; adc byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000a3666: push rdi; adc byte ptr [rbp + rcx*4 + 0x4e], cl; adc byte ptr [rcx + 0x39], al; ret; 
0x00000000000a0f71: push rdi; adc byte ptr [rcx - 0x12cfe7b1], cl; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000a0f51: push rdi; adc byte ptr [rcx - 0x12cfe8b1], cl; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000a0f32: push rdi; adc byte ptr [rsi - 0x77], ah; sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000a0cc8: push rdi; add al, 0x30; in eax, dx; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000a0cda: push rdi; add al, 0x30; in eax, dx; mov byte ptr [rdi + 6], ch; ret; 
0x0000000000096974: push rdi; add al, 0x48; lea eax, dword ptr [rdi + 5]; ret; 
0x0000000000096984: push rdi; add al, 0x48; lea eax, dword ptr [rdi + 6]; mov byte ptr [rdi + 6], 0; ret; 
0x000000000009f26a: push rdi; add al, 0x48; lea eax, dword ptr [rdi + 6]; ret; 
0x000000000014ccd9: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x00000000000968e4: push rdi; add al, 0x48; mov eax, edi; mov byte ptr [rdi + 6], 0; ret; 
0x00000000000968d4: push rdi; add al, 0x48; mov eax, edi; ret; 
0x000000000002f96c: push rdi; add al, 0x72; or bl, dh; ret; 
0x00000000000a0c9a: push rdi; add dh, byte ptr [rax]; in eax, dx; mov byte ptr [rdi + 3], ch; ret; 
0x000000000009e4ec: push rdi; add eax, 0xc478d48; ret; 
0x000000000009f32c: push rdi; add eax, 0xd478d48; ret; 
0x00000000000a0cf8: push rdi; add esi, dword ptr [rax]; in eax, dx; mov byte ptr [rdi + 7], ch; ret; 
0x0000000000148135: push rdi; call 0x635d813e; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001440e2: push rdi; call 0xfffffffff073ca34; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144120: push rdi; call 0xfffffffff073ca72; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144158: push rdi; call 0xfffffffff073caaa; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000144196: push rdi; call 0xfffffffff073cae8; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001441ce: push rdi; call 0xfffffffff073cb20; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001441f6: push rdi; call 0xfffffffff073cb48; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014421e: push rdi; call 0xfffffffff073cb70; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000146ab2: push rdi; call 0xfffffffff073f404; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000146af0: push rdi; call 0xfffffffff073f442; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000146b28: push rdi; call 0xfffffffff073f47a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000146b66: push rdi; call 0xfffffffff073f4b8; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000146b9e: push rdi; call 0xfffffffff073f4f0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000146bc6: push rdi; call 0xfffffffff073f518; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000146bee: push rdi; call 0xfffffffff073f540; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000149482: push rdi; call 0xfffffffff0741dd4; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001494c0: push rdi; call 0xfffffffff0741e12; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001494f8: push rdi; call 0xfffffffff0741e4a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000149536: push rdi; call 0xfffffffff0741e88; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014956e: push rdi; call 0xfffffffff0741ec0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000149596: push rdi; call 0xfffffffff0741ee8; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001495be: push rdi; call 0xfffffffff0741f10; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001b65f1: push rdi; call qword ptr [rcx]; 
0x0000000000003617: push rdi; call qword ptr [rsi + 0x6f]; 
0x0000000000144128: push rdi; clc; ret; 
0x0000000000186dc1: push rdi; cld; call qword ptr [rax]; 
0x0000000000186dc5: push rdi; cld; inc dword ptr [rax - 0xf0003aa]; push rbp; cld; jmp qword ptr [rsi + 0x55]; 
0x0000000000186e41: push rdi; cld; jmp rdx; 
0x0000000000186e3d: push rdi; cld; push qword ptr [rdx + 0x57]; cld; jmp rdx; 
0x00000000001442a0: push rdi; cld; ret; 
0x0000000000144dc7: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001a87d1: push rdi; cmc; call qword ptr [rdx]; 
0x000000000014c5b9: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000127f35: push rdi; cmp byte ptr [rax + 1], bh; ret; 
0x000000000018c231: push rdi; dec esp; sub al, byte ptr [rdx]; add byte ptr [rdi + rdi*8 - 9], al; jmp rsp; 
0x000000000019fd2c: push rdi; fcomi st(0); jmp qword ptr [rdx]; 
0x0000000000160c7e: push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000ad5b8: push rdi; fild word ptr [rcx + 0x29]; ret; 
0x0000000000085d6a: push rdi; fmul dword ptr [rax + 0x39]; ret 0x2f74; 
0x0000000000160a7e: push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000014c539: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000144835: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144645: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000188a31: push rdi; in eax, dx; call rsp; 
0x0000000000188a29: push rdi; in eax, dx; lcall ptr [rcx + rax*8 + 0x57d40000]; in eax, dx; call rsp; 
0x00000000000e329b: push rdi; inc byte ptr [rax - 0xa]; mov dword ptr [rdi + rcx], 0xffff0d84; jmp qword ptr [rsi + 0xf]; 
0x0000000000146875: push rdi; inc dword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c38a: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000018c239: push rdi; jmp rsp; 
0x0000000000144e06: push rdi; loope 0x144e55; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144e4e: push rdi; loope 0x144e9d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144e8c: push rdi; loope 0x144edb; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144ec4: push rdi; loope 0x144f13; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f02: push rdi; loope 0x144f51; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f3a: push rdi; loope 0x144f89; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f62: push rdi; loope 0x144fb1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001477d6: push rdi; loope 0x147825; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014781e: push rdi; loope 0x14786d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014785c: push rdi; loope 0x1478ab; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000147894: push rdi; loope 0x1478e3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001478d2: push rdi; loope 0x147921; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014790a: push rdi; loope 0x147959; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000147932: push rdi; loope 0x147981; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a1a6: push rdi; loope 0x14a1f5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a1ee: push rdi; loope 0x14a23d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a22c: push rdi; loope 0x14a27b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a264: push rdi; loope 0x14a2b3; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a2a2: push rdi; loope 0x14a2f1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a2da: push rdi; loope 0x14a329; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014a302: push rdi; loope 0x14a351; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000001ae13c: push rdi; mov dh, ch; jmp qword ptr [rdx]; 
0x0000000000160d48: push rdi; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000160bc8: push rdi; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000160cc8: push rdi; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000160c48: push rdi; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000007b030: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000007b064: push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000014c41a: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000001176e6: push rdi; or al, 0x48; mov dword ptr [rsi], edi; ret; 
0x000000000004e744: push rdi; or bl, ch; ret 0x8348; 
0x0000000000035c31: push rdi; or byte ptr [rax - 0x77], cl; or byte ptr [r8 + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8d4c; 
0x00000000000a0d3c: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000a0d7a: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000a0d1a: push rdi; or byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 9], ch; ret; 
0x0000000000039c6a: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x00000000000384da: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000131272: push rdi; or byte ptr [rcx + rcx*4 + 0x2c], cl; ret 0x8b41; 
0x00000000000384e1: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000000059f6d: push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rax - 0x7d], cl; ret; 
0x0000000000059c67: push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000055df6: push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0x4101; 
0x0000000000055175: push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x0000000000055a36: push rdi; or byte ptr [rdi + rcx - 0x4a], al; xor byte ptr [rcx - 0x7d], cl; ret 0xe901; 
0x0000000000073650: push rdi; or byte ptr [rdi], cl; mov dh, 0; ret; 
0x000000000004cda9: push rdi; or cl, ch; jmp rcx; 
0x000000000009e6d0: push rdi; or eax, 0x1c478d48; ret; 
0x000000000009f520: push rdi; or eax, 0x1d478d48; ret; 
0x0000000000144465: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144295: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144391: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x00000000001442dd: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000177ea9: push rdi; out dx, eax; lcall ptr [rsp + rdx*2 - 0x11]; jmp qword ptr [rax + 0x56]; 
0x000000000011ebfd: push rdi; pop rsp; lea rsi, qword ptr [rdi + 0x48]; mov rdi, rax; mov rcx, qword ptr [rcx + 0x18]; jmp rcx; 
0x00000000000d470e: push rdi; ret 0; 
0x0000000000033b65: push rdi; ret 0x38; 
0x00000000001610be: push rdi; ret 0xff3; 
0x000000000003d6fa: push rdi; ret 0xffef; 
0x0000000000058a3d: push rdi; ret 0xffff; 
0x00000000000c4b07: push rdi; ret; 
0x000000000012e2a5: push rdi; sbb bl, dh; ret; 
0x000000000007b028: push rdi; sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000001027d9: push rdi; sbb byte ptr [rax - 0x77], cl; ret; 
0x00000000000f5572: push rdi; sbb byte ptr [rcx - 0xa], al; ret 0x7401; 
0x000000000003571c: push rdi; sbb byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x0000000000144fc7: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001447ea: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x00000000001862ed: push rdi; sti; call qword ptr [rax + 0x70fffb59]; pop rbx; sti; call qword ptr [rax + 0x5d]; 
0x0000000000144bc7: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000127f7d: push rdi; sub byte ptr [rax + 1], bh; ret; 
0x00000000000cfee6: push rdi; sub byte ptr [rax - 0x7d], cl; ret; 
0x0000000000143ab5: push rdi; sub eax, dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000a0fd0: push rdi; wrmsr; in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x000000000008a7db: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000010a22a: push rdx; adc al, 0xf7; dec dword ptr [rax - 0x77]; ret 0x894c; 
0x00000000000e3473: push rdx; adc byte ptr [rax + 0x39], cl; ret 0x930f; 
0x00000000001b3435: push rdx; add al, byte ptr [rax]; mov byte ptr [rbp - 9], ah; jmp qword ptr [rbx]; 
0x00000000001b3465: push rdx; add al, byte ptr [rax]; mov byte ptr [rsi - 9], ah; call rdi; 
0x00000000001612b8: push rdx; add al, byte ptr [rax]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000189e7d: push rdx; add dword ptr [rax], eax; xchg eax, esp; xor esi, eax; call rsp; 
0x0000000000117e4e: push rdx; add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x00000000000fbd12: push rdx; and dword ptr [rax + rax], ebp; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f07fd: push rdx; and ecx, dword ptr [rcx + rcx*4 - 0x2e]; mov byte ptr [rsp - 0x58], al; mov eax, ebp; syscall; 
0x0000000000121261: push rdx; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x4c], cl; mov edi, esp; call rdx; 
0x00000000000f0512: push rdx; fldcw word ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b3752: push rdx; idiv bh; dec dword ptr [rcx + 0x29]; ret; 
0x0000000000178139: push rdx; int1; call qword ptr [rax + 0x54]; 
0x0000000000178139: push rdx; int1; call qword ptr [rax + 0x54]; int1; jmp qword ptr [rax + 0x56]; 
0x00000000000ef542: push rdx; jmp qword ptr [rsi - 0x7d]; 
0x0000000000187624: push rdx; mov al, 0xfc; jmp rdx; 
0x000000000014ba3a: push rdx; mov bl, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000009cd0a: push rdx; mov dh, 0xd; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000108081: push rdx; mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000001651f6: push rdx; mov esp, 0x25; add byte ptr [rax], al; pop rbx; ret; 
0x000000000018712c: push rdx; mov esp, edi; jmp rdx; 
0x0000000000149429: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d559]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001492d9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d6a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149039: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3d949]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148d99: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dbe9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148c49: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dd39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148af9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3de89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001489a9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3dfd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148859: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e129]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148709: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e279]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001485b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e3c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148469: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e519]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148319: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e669]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001481c9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3e7b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146a59: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3fd69]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146909: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3feb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001467b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40009]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146669: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40159]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146519: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x402a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001463c9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x403f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146279: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40549]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146129: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40699]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145fd9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x407e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145e89: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40939]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145d39: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40a89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145be9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40bd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a99: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40d29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145949: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40e79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001457f9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40fc9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000144089: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42579]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143f39: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x426c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143de9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42819]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c99: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42969]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143b49: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ab9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001439f9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42c09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001438a9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42d59]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143759: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ea9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143609: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42ff9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001434b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43149]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143369: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43299]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143219: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x433e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001430c9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43539]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142f79: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x43689]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142e29: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x437d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000127f75: push rdx; or byte ptr [rax - 0x77], cl; and byte ptr [r8 - 0x77], r9b; push rdi; sub byte ptr [rax + 1], bh; ret; 
0x0000000000127f2d: push rdx; or byte ptr [rax - 0x77], cl; xor byte ptr [r8 - 0x77], r9b; push rdi; cmp byte ptr [rax + 1], bh; ret; 
0x00000000000ef5da: push rdx; push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000186e3b: push rdx; push rdi; cld; push qword ptr [rdx + 0x57]; cld; jmp rdx; 
0x00000000001903f6: push rdx; ret; 
0x00000000000f243a: push rdx; sal dl, 1; dec dword ptr [rax - 0x77]; add eax, 0x2cd4db; add rsp, 8; ret; 
0x00000000001862e1: push rdx; sti; push rax; push rbx; sti; call rax; 
0x0000000000174c14: push rdx; sub byte ptr [rsi + 0x33763bf6], ch; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x000000000010d62e: push rdx; sub eax, dword ptr [rax]; add ecx, ebp; ret; 
0x0000000000187813: push rdx; test al, 0xfc; push qword ptr [rdx - 0x58]; cld; jmp rdx; 
0x0000000000001b0d: push rdx; test dword ptr [rbx + 0x59e7c8ee], esi; pop rbx; ret 0x2a63; 
0x0000000000075058: push rdx; xor byte ptr [rbx + 0x374fff8], al; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x000000000009dc08: push rsi; adc al, 0xf3; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dl; ret; 
0x000000000009e727: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x1f]; ret; 
0x000000000009f577: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, qword ptr [rdi + 0x20]; ret; 
0x000000000009d097: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000015fd04: push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000745bd: push rsi; add al, 0x48; mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; pop rbx; ret; 
0x000000000014ccd2: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000000a0cd4: push rsi; add al, 0x89; pcmpgtd mm1, qword ptr [rcx - 0x12cffba9]; mov byte ptr [rdi + 6], ch; ret; 
0x000000000017913f: push rsi; add al, 0xf4; dec edx; add al, 0xf4; call qword ptr [rdi]; 
0x000000000014cf71: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000014cfe1: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000035b56: push rsi; add eax, 0x1c8d4c00; sbb byte ptr [rax - 0x77], cl; ret 0x394d; 
0x000000000014cc62: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000009e4e5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, qword ptr [rdi + 0xc]; ret; 
0x000000000009f325: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, qword ptr [rdi + 0xd]; ret; 
0x000000000009cea5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x00000000000a0d95: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000c4487: push rsi; add eax, dword ptr [rax]; add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000014cf01: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x000000000009e453: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000009f283: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, qword ptr [rdi + 7]; ret; 
0x000000000009ce43: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x00000000000a0cf3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x000000000015fd19: push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000002bbd: push rsi; call 0xfffffffff3f8f43c; ret; 
0x0000000000179464: push rsi; cdq; hlt; jmp qword ptr [rax - 0x67]; 
0x0000000000144236: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144b8a: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144d8a: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144f8a: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000014421a: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144ba6: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144da6: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144fa6: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000144252: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000186fc5: push rsi; cld; call qword ptr [rax]; 
0x0000000000186e45: push rsi; cld; call qword ptr [rdx + 0x56]; 
0x0000000000186e49: push rsi; cld; inc edx; push rbp; cld; call qword ptr [rdx + 0x55]; 
0x0000000000186f85: push rsi; cld; jmp qword ptr [rax]; 
0x0000000000186b9c: push rsi; cld; jmp rsi; 
0x0000000000186f49: push rsi; cld; lcall ptr [rdx + 0x2afffc55]; push rbp; cld; call rax; 
0x0000000000186ec9: push rsi; cld; ljmp ptr [rsi + 0x3efffc55]; push rbp; cld; jmp rsp; 
0x00000000001449c1: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001443f9: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001445d9: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001447b9: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144999: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001445f5: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001447d5: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000001449b5: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000144415: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000186dc9: push rsi; cld; push rax; push rbp; cld; jmp qword ptr [rsi + 0x55]; 
0x0000000000144dc1: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000014c5b2: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000163666: push rsi; cmc; sub eax, edx; ret; 
0x00000000001608ae: push rsi; fbstp dword ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016097e: push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000014c532: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000163656: push rsi; hlt; sub eax, edx; ret; 
0x00000000001a9924: push rsi; in eax, dx; hlt; jmp qword ptr [rdx]; 
0x000000000014c382: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000163626: push rsi; int1; sub eax, edx; ret; 
0x000000000017607d: push rsi; jnp 0x176096; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000000e43f5: push rsi; jo 0xe4440; mov eax, dword ptr [rdi + 0x80]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x00000000000e4483: push rsi; jo 0xe44ce; mov dword ptr [rdi + 0x78], edx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x80], rdx; ret; 
0x00000000000e4d02: push rsi; jo 0xe4d4d; mov eax, dword ptr [rdi + 0x100]; mov qword ptr [rsi + 0x78], rax; xor eax, eax; ret; 
0x00000000000e4ddd: push rsi; jo 0xe4e28; mov dword ptr [rdi + 0xf8], edx; mov rdx, qword ptr [rsi + 0x78]; mov qword ptr [rdi + 0x100], rdx; ret; 
0x000000000014bdf6: push rsi; lodsd eax, dword ptr [rsi]; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001875c0: push rsi; lodsd eax, dword ptr [rsi]; cld; jmp rsi; 
0x000000000014baf6: push rsi; mov al, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b7f6: push rsi; mov bl, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001a1274: push rsi; mov cl, dh; jmp qword ptr [rdx]; 
0x000000000014b4f6: push rsi; mov dh, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b1f6: push rsi; mov ecx, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014abf6: push rsi; mov edi, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000160878: push rsi; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000160948: push rsi; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000014aef6: push rsi; mov esp, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000037c2d: push rsi; mov r10d, 8; mov rsi, rbx; mov eax, 0x80; syscall; 
0x0000000000037d8d: push rsi; mov r10d, 8; xor edx, edx; mov rsi, rbx; mov eax, 0x80; syscall; 
0x000000000014c4a2: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000014c412: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000050260: push rsi; or al, 0x85; sal byte ptr [rbp + 5], 0xf6; ret 0x7450; 
0x0000000000127601: push rsi; or byte ptr [rax - 0x75], cl; mov qword ptr [rsi + 0x10], rax; ret; 
0x0000000000127eb1: push rsi; or byte ptr [rax - 0x75], cl; push rax; mov qword ptr [rsi + 0x10], rax; ret; 
0x00000000000a0d74: push rsi; or byte ptr [rax - 0x77], cl; jns 0xffffffffed3a15d5; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000a0d35: push rsi; or byte ptr [rax - 0x77], cl; pcmpgtd mm1, qword ptr [rcx - 0x12cff7a9]; mov byte ptr [rdi + 0xa], ch; ret; 
0x0000000000091d2d: push rsi; or byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x000000000009e6c7: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009f517: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, qword ptr [rdi + 0x1d]; ret; 
0x000000000009d037: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000000a0f87: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x0000000000177eb5: push rsi; out dx, eax; call qword ptr [rax + 0x56]; 
0x0000000000177f01: push rsi; out dx, eax; call qword ptr [rax - 0x6f0010aa]; push rsi; out dx, eax; call qword ptr [rax]; 
0x0000000000177f25: push rsi; out dx, eax; call qword ptr [rax - 0x6f0010aa]; push rsi; out dx, eax; jmp qword ptr [rax + 0x56]; 
0x0000000000177f09: push rsi; out dx, eax; call qword ptr [rax]; 
0x0000000000177f39: push rsi; out dx, eax; call qword ptr [rax]; push rsi; out dx, eax; jmp qword ptr [rax + 0x56]; 
0x0000000000177f75: push rsi; out dx, eax; call rax; 
0x0000000000177f35: push rsi; out dx, eax; inc dword ptr [rax]; push rsi; out dx, eax; call qword ptr [rax]; 
0x0000000000177ebd: push rsi; out dx, eax; jmp qword ptr [rax + 0x56]; 
0x0000000000177f61: push rsi; out dx, eax; push qword ptr [rax]; push rsi; out dx, eax; call qword ptr [rax]; 
0x000000000008abe6: push rsi; pop rdx; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000000ddd86: push rsi; ret 0x7408; 
0x00000000000ddd95: push rsi; ret 0x7420; 
0x000000000009806a: push rsi; ret 0x7518; 
0x000000000003642f: push rsi; ret; 
0x0000000000178f38: push rsi; sal ebx, cl; call qword ptr [rsi - 0x2d]; 
0x0000000000178f3c: push rsi; sal ebx, cl; jmp qword ptr [rsi]; 
0x000000000012f7ea: push rsi; sbb byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8b41; 
0x0000000000144fc1: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000001447e2: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000144bc1: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000105b8d: push rsi; sub byte ptr [rbx + 0x2b87ff35], cl; add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x0000000000108828: push rsi; sub eax, dword ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000163636: push rsi; sub eax, edx; ret; 
0x000000000014c6b2: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x00000000001870c8: push rsi; xchg ah, bh; jmp rsi; 
0x00000000000efcb7: push rsi; xor ax, ax; ret; 
0x000000000015fd2e: push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000018cea0: push rsp; adc edi, ecx; call rsp; 
0x00000000000dbe43: push rsp; add al, 0; add byte ptr [rcx - 0x75], al; adc al, 0x8d; add qword ptr [r8 - 0x7d], rcx; ret; 
0x00000000001b3655: push rsp; add al, byte ptr [rax]; fsubr dword ptr [rdi - 9]; jmp qword ptr [rbp]; 
0x000000000018cafb: push rsp; add al, byte ptr fs:[rax]; ret 0xf88a; 
0x000000000019f928: push rsp; add byte ptr [rax], al; add byte ptr [rdi + rdx + 0x7a00001], al; int1; call qword ptr [rax]; 
0x00000000000f0a21: push rsp; add byte ptr [rax], al; call 0xf11e0; add rsp, 0x18; ret; 
0x00000000000f0827: push rsp; add byte ptr [rax], al; mov rdi, rbx; mov eax, ebp; mov r13d, dword ptr fs:[r12]; syscall; 
0x00000000000f0a87: push rsp; add byte ptr [rax], al; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000000f0a43: push rsp; add byte ptr [rax], al; movsxd rdi, edi; mov eax, 0x10; syscall; 
0x00000000000f093f: push rsp; add byte ptr [rax], al; movsxd rdi, edi; mov eax, ecx; syscall; 
0x000000000018ceec: push rsp; add byte ptr [rdx], 0; xor al, 0x2a; stc; jmp rsp; 
0x0000000000050432: push rsp; add cl, byte ptr es:[rax + 1]; ret 0x8348; 
0x00000000001b62fc: push rsp; add dword ptr [rdx], 0xf7f43000; call rcx; 
0x0000000000036082: push rsp; add eax, 0x14f858; andpd xmm1, xmmword ptr [rip + 0x14f840]; orpd xmm0, xmm1; ret; 
0x00000000000e7621: push rsp; add eax, 0xbe0f4101; ret 0xe883; 
0x00000000000ebbbd: push rsp; and al, 0x10; mov esi, 0x10; mov rdi, r9; mov eax, r8d; syscall; 
0x0000000000129422: push rsp; and al, 0x10; mov esi, 6; call qword ptr [rax + 0x28]; 
0x00000000001293ec: push rsp; and al, 0x10; mov esi, 6; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x28]; 
0x00000000000fd47a: push rsp; and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000000fd4db: push rsp; and al, 0x10; mov rcx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; add rsp, 0x40; ret; 
0x00000000000f057f: push rsp; and al, 0x10; movsxd rsi, dword ptr [rsp + 0xc]; movsxd rdi, dword ptr [rsp + 8]; mov eax, ebx; syscall; 
0x000000000010726d: push rsp; and al, 0x18; mov dword ptr [rbp - 0x80], edx; mov rdx, r13; call rax; 
0x00000000001072ed: push rsp; and al, 0x18; mov dword ptr [rbp - 0x80], edx; mov rdx, rbx; call rax; 
0x0000000000102185: push rsp; and al, 0x18; mov edi, 0x2000004; call rax; 
0x000000000013580a: push rsp; and al, 0x18; mov esi, 0x40; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000102088: push rsp; and al, 0x18; mov rsi, qword ptr [rsp + 8]; call rax; 
0x00000000000eb61e: push rsp; and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; syscall; 
0x00000000000f1d15: push rsp; and al, 0x20; mov eax, 0x10e; mov rsi, qword ptr [rsp + 0x18]; movsxd rdi, dword ptr [rsp + 0x14]; syscall; 
0x000000000004aaac: push rsp; and al, 0x20; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000005fdfb: push rsp; and al, 0x20; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x00000000000bdc12: push rsp; and al, 0x28; call rax; 
0x000000000008083e: push rsp; and al, 0x30; mov dword ptr [rsp + 0x28], r11d; call rax; 
0x000000000010765d: push rsp; and al, 0x38; mov dword ptr [rbp - 0x80], 0; mov qword ptr [rbp - 0x70], rdx; mov rdx, r14; call rax; 
0x00000000000f2316: push rsp; and al, 0x38; mov eax, edx; add rsp, 0x48; ret; 
0x0000000000036e88: push rsp; and al, 0x38; mov qword ptr [r8 + 0x90], rdx; add rsp, 0xd0; ret; 
0x0000000000135e64: push rsp; and al, 0x48; add rax, qword ptr [rdx + 8]; add rsp, 0x58; ret; 
0x0000000000025fa6: push rsp; and al, 0x50; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002a434: push rsp; and al, 0x50; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000025ad9: push rsp; and al, 0x58; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x00000000000ebaad: push rsp; and al, 0x98; mov esi, 0x10; mov rdi, r10; mov eax, r9d; syscall; 
0x00000000000f093a: push rsp; and al, 0xc8; mov esi, 0x5401; movsxd rdi, edi; mov eax, ecx; syscall; 
0x00000000000f0750: push rsp; and al, 0xc8; syscall; 
0x00000000001294a0: push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax + 0x28]; 
0x00000000000c0a49: push rsp; and al, 0xc; mov rsi, qword ptr [rsp]; mov eax, ecx; movsxd rdi, dword ptr [rsp + 8]; syscall; 
0x00000000000368f0: push rsp; and al, 0xf0; mov dword ptr [rdi], eax; fld xword ptr [rsp - 0x18]; ret; 
0x0000000000039e40: push rsp; and al, 0xf8; movsd xmm0, qword ptr [rsp - 8]; ret; 
0x0000000000039dfa: push rsp; and al, 0xfc; movss xmm0, dword ptr [rsp - 4]; ret; 
0x000000000003d09d: push rsp; and al, 8; call 0x3d1f0; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003d0ed: push rsp; and al, 8; call 0x3d260; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000fa337: push rsp; and al, 8; mov eax, 0x38; syscall; 
0x000000000013592d: push rsp; and al, 8; mov qword ptr [rsp + 0x10], rcx; lea rdi, qword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x000000000002216d: push rsp; and al, 8; mov rcx, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; add rsp, 0x28; jmp rax; 
0x00000000001180b7: push rsp; and eax, 0x7d884010; add esi, dword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000018d660: push rsp; and eax, 0xba9cfffa; add al, byte ptr [rax]; cli; jmp rsp; 
0x0000000000127792: push rsp; bswap eax; mov eax, eax; mov qword ptr [rdx], rax; mov eax, 1; ret; 
0x000000000018cdc8: push rsp; cld; clc; jmp rsp; 
0x00000000001a1dfc: push rsp; cmp al, 1; add al, ah; int1; jmp qword ptr [rdx]; 
0x000000000017813d: push rsp; int1; jmp qword ptr [rax + 0x56]; 
0x00000000001734e5: push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000001958dc: push rsp; jns 0x1958cc; jmp qword ptr [rdx]; 
0x00000000000c6438: push rsp; jns 0xc643e; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000096fbb: push rsp; lea rax, qword ptr [rdi + rax + 0x10]; ret; 
0x00000000001871f4: push rsp; mov ah, bh; jmp rsp; 
0x00000000001aa8fc: push rsp; mov dword ptr [rcx], 0xf5d6f000; jmp qword ptr [rsi]; 
0x00000000001276b7: push rsp; mov eax, 1; ret; 
0x0000000000103d4b: push rsp; nop dword ptr [rax]; sub eax, r8d; ret; 
0x000000000003608a: push rsp; or eax, 0x14f840; orpd xmm0, xmm1; ret; 
0x0000000000177ead: push rsp; out dx, eax; jmp qword ptr [rax + 0x56]; 
0x00000000001898f9: push rsp; out dx, eax; jmp rsp; 
0x000000000018da38: push rsp; outsd dx, dword ptr [rsi]; cli; call qword ptr [rdx + rdx*8 + 0x70a40002]; cli; jmp rsp; 
0x00000000001a70fc: push rsp; pop qword ptr [rcx]; add byte ptr [rax + 7], dl; cmc; jmp qword ptr [rdi + 1]; 
0x0000000000186ef8: push rsp; pop rax; cld; call rsp; 
0x0000000000186ee0: push rsp; pop rbx; cld; call rsp; 
0x0000000000186ef0: push rsp; pop rcx; cld; call rsp; 
0x0000000000186ee8: push rsp; pop rdx; cld; call rsp; 
0x00000000000bd2bd: push rsp; push rbp; push rbx; mov rbx, rsi; syscall; 
0x00000000001a7dfc: push rsp; pushfq; add dword ptr [rax], eax; push rax; xor ebp, esi; jmp qword ptr [rcx]; 
0x000000000018afb0: push rsp; ret 0xfff5; 
0x00000000001aa3fc: push rsp; ret 1; 
0x00000000000257ae: push rsp; ret; 
0x000000000018ae38: push rsp; sal ah, cl; push qword ptr [rcx + rdi*4 - 0x2d1bffff]; hlt; jmp rsp; 
0x00000000001876ec: push rsp; scasd eax, dword ptr [rdi]; cld; jmp rsp; 
0x000000000018ae98: push rsp; std; hlt; call rsp; 
0x000000000018c5d8: push rsp; sub al, bh; jmp rsp; 
0x0000000000175fca: push rsp; syscall; 
0x00000000001890b8: push rsp; test eax, 0xf4acffee; add byte ptr [rax], al; mov ah, 0xa9; out dx, al; jmp rsp; 
0x00000000000a8a03: pushfq; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000139470: pushfq; adc eax, 0x83480000; ret 0xe910; 
0x000000000018bf74: pushfq; adc eax, dword ptr [rdx]; add byte ptr [rdi], ah; jp 0x18bf72; jmp rsp; 
0x00000000001a7e8d: pushfq; add dword ptr [rax], eax; adc byte ptr [rdx], dh; cmc; call qword ptr [rsi]; 
0x00000000001a7de5: pushfq; add dword ptr [rax], eax; cmp byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001a7db5: pushfq; add dword ptr [rax], eax; or byte ptr [rcx], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001a7dfd: pushfq; add dword ptr [rax], eax; push rax; xor ebp, esi; jmp qword ptr [rcx]; 
0x000000000018a98d: pushfq; add dword ptr [rax], eax; ret 0xf380; 
0x000000000014d3ce: pushfq; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000004554c: pushfq; and al, 0x90; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], al; ret; 
0x00000000001a0744: pushfq; and eax, 0xc9b80001; int1; jmp qword ptr [rbp]; 
0x000000000019df49: pushfq; cli; jmp qword ptr [rdi + 0x2b]; 
0x000000000002f468: pushfq; cmp qword ptr [r8], rax; lea rdi, qword ptr [rip + 0x39068d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000179501: pushfq; hlt; call qword ptr [rbp - 0x64]; 
0x00000000001794fd: pushfq; hlt; dec dword ptr [rbx - 0x64]; hlt; call qword ptr [rbp - 0x64]; 
0x00000000001794e9: pushfq; hlt; ljmp ptr [rcx - 0x65]; hlt; jmp qword ptr [rbx]; 
0x0000000000188fac: pushfq; in al, dx; add byte ptr [rax], al; adc al, 0x9b; out dx, al; jmp rsp; 
0x0000000000193ea9: pushfq; in al, dx; jmp qword ptr [rcx]; 
0x00000000001781d9: pushfq; int1; call qword ptr [rax - 0x4f000e64]; pushfq; int1; call rax; 
0x00000000001781e1: pushfq; int1; call rax; 
0x000000000018730c: pushfq; jnp 0x18730b; ljmp ptr [rbx + rdi*2]; cld; call rdx; 
0x00000000001a5b44: pushfq; jns 0x1a5b48; add al, ch; mov al, 0xf4; jmp qword ptr [rcx]; 
0x000000000018d60c: pushfq; mov ch, 2; add byte ptr [rax], dl; and al, 0xfa; jmp rsp; 
0x00000000001aa944: pushfq; mov dword ptr [rcx], 0xf5d70800; jmp qword ptr [rdi]; 
0x00000000000787ac: pushfq; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000018d664: pushfq; mov edx, 0x26440002; cli; jmp rsp; 
0x00000000000ebac7: pushfq; mov edx, eax; neg edx; cmp dword ptr [rsp - 0x68], 2; cmove eax, edx; ret; 
0x00000000000fa2e0: pushfq; mov qword ptr [rsp - 0x38], r8; mov qword ptr [rsp - 0x30], r9; syscall; 
0x0000000000189464: pushfq; or al, 1; add bl, dl; std; out dx, al; jmp rsp; 
0x000000000013a170: pushfq; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000138124: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x0000000000177c18: pushfq; out dx, eax; call qword ptr [rax + 0x4c]; 
0x0000000000177c10: pushfq; out dx, eax; jmp qword ptr [rax + 0x4c]; 
0x000000000019de09: pushfq; out dx, eax; jmp rdi; 
0x0000000000177c08: pushfq; out dx, eax; lcall ptr [rbx + rcx*2 + 0x4b9cffef]; out dx, eax; jmp qword ptr [rax + 0x4c]; 
0x000000000018c92c: pushfq; push rbp; add al, byte ptr [rax]; cwde; push -8; jmp rsp; 
0x000000000018d41c: pushfq; stosb byte ptr [rdi], al; add al, byte ptr [rax]; rcl esp, 1; stc; jmp rsp; 
0x00000000000fa3a3: pushfq; sub al, 0; add byte ptr [rbp + 0x10], dh; mov eax, 8; syscall; 
0x00000000001aa644: pushfq; vaddps xmm10, xmm15, xmm13; cmc; jmp qword ptr [rsi]; 
0x00000000001a7344: pushfq; xchg eax, ecx; add dword ptr [rax], eax; test al, 0xd; cmc; jmp qword ptr [rcx]; 
0x0000000000189b64: pushfq; xor dword ptr [rcx], eax; add dl, ch; shr bh, 1; jmp rsp; 
0x00000000000841d4: pushfq; xor eax, dword ptr [rax]; mov dword ptr fs:[rax], 0xc; xor eax, eax; add rsp, 0x18; ret; 
0x00000000001a0ee0: rcl ah, 1; int1; jmp qword ptr [rbx]; 
0x000000000017a5b8: rcl ah, cl; idiv bh; adc ah, 0xf6; call rdx; 
0x000000000017a558: rcl ah, cl; idiv bh; insb byte ptr [rdi], dx; sal esi, cl; call rdx; 
0x000000000017a570: rcl ah, cl; idiv bh; sal r14b, cl; call rdx; 
0x00000000000b718c: rcl byte ptr [rax + 0x29000001], cl; ret; 
0x00000000000b24c1: rcl byte ptr [rax + 0x39000001], cl; ror dword ptr [rdi], 1; xchg eax, esp; ret; 
0x000000000009f78c: rcl byte ptr [rax], 0x4c; lea ebx, dword ptr [rip + 0xd8f3b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df7c: rcl byte ptr [rax], 0x4c; lea ebx, dword ptr [rip + 0xda56b]; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000179380: rcl byte ptr [rbp - 0x6a87000c], 1; hlt; call rax; 
0x0000000000179380: rcl byte ptr [rbp - 0x6a87000c], 1; hlt; call rax; xchg eax, ebp; hlt; jmp rsi; 
0x000000000019e620: rcl byte ptr [rcx - 0x10], 1; jmp qword ptr [rdi]; 
0x00000000001867ec: rcl byte ptr [rcx], 0xfc; call qword ptr [rax + 4]; 
0x00000000001867ec: rcl byte ptr [rcx], 0xfc; call qword ptr [rax + 4]; cld; call qword ptr [rax]; 
0x0000000000178480: rcl byte ptr [rsi - 0xe], 0xff; rcl byte ptr [rsi - 0xe], 1; jmp rax; 
0x0000000000178484: rcl byte ptr [rsi - 0xe], 1; jmp rax; 
0x000000000000c2a0: rcl ch, 1; adc al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001aa6c0: rcl ch, 1; cmc; jmp qword ptr [rsi]; 
0x00000000001aa8d0: rcl dh, 0xf5; jmp qword ptr [rsi]; 
0x0000000000186788: rcl dh, 0xfb; call qword ptr [rax]; 
0x0000000000186788: rcl dh, 0xfb; call qword ptr [rax]; fdivr st(3); call qword ptr [rax - 0x3d]; 
0x000000000018677c: rcl dl, 1; sti; jmp qword ptr [rax]; 
0x00000000000f4a93: rcl dword ptr [rbx - 0x2708ffd4], 1; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000080bb3: rcl dword ptr [rip + 0x33d60f], -0x7d; ret 0x8b01; 
0x0000000000022633: rcl dword ptr [rip - 0x113effc6], 1; or byte ptr [rbx - 0x3ebef020], al; call 0xffffffffc51faf48; adc eax, 0xd89003a; ret; 
0x00000000000c0ba3: rcl edx, 0x2f; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000018d420: rcl esp, 1; stc; jmp rsp; 
0x00000000000f395c: rcr ah, 1; sub al, 0; add rsp, 8; ret; 
0x00000000000367a0: rcr bl, 0x3f; fsubp st(1); ret; 
0x000000000001b1f8: rcr byte ptr [rax + rbx], 0; add byte ptr [rax], al; add byte ptr [rax], ch; ret; 
0x00000000001784f4: rcr byte ptr [rax - 0xe], 0xff; rcr byte ptr [rax - 0xe], 1; jmp rax; 
0x00000000001784f8: rcr byte ptr [rax - 0xe], 1; jmp rax; 
0x000000000019fb50: rcr byte ptr [rax], 0xf1; jmp qword ptr [rcx]; 
0x00000000000384e7: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000012ce3f: rcr byte ptr [rbp - 0x3d], 0x66; nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012d0db: rcr byte ptr [rbp - 0x3d], 0x66; nop; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x000000000001fff2: rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop r14; pop rbp; ret; 
0x000000000010ac32: rcr byte ptr [rbx + 0x41], 0x5c; pop r13; pop rbp; ret; 
0x000000000006ed72: rcr byte ptr [rbx + 0x48], cl; div ebp; pop rbp; pop r12; pop r13; ret; 
0x000000000007387d: rcr byte ptr [rbx + 0x48], cl; div ebp; pop rbp; pop r12; ret; 
0x0000000000070c69: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000002474e: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000003c3fe: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000012d4c5: rcr byte ptr [rbx + 0x5d], 0xc3; nop dword ptr [rax]; mov rax, qword ptr [rdi + 8]; mov qword ptr [rsp], rdx; mov rsi, rsp; call qword ptr [rax + 8]; 
0x000000000012d0b6: rcr byte ptr [rbx + 0x5d], 0xc3; nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 8]; 
0x000000000005365c: rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x0000000000049350: rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x000000000005de5c: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000048a54: rcr byte ptr [rbx - 9], 0xd8; pop rbp; ret; 
0x0000000000186248: rcr byte ptr [rbx], 0xfb; jmp rax; 
0x0000000000186ae0: rcr byte ptr [rcx], 0xfc; call qword ptr [rax]; 
0x0000000000186ae0: rcr byte ptr [rcx], 0xfc; call qword ptr [rax]; sbb edi, esp; jmp qword ptr [rax + 0x1c]; 
0x0000000000175c1d: rcr byte ptr [rdi + 0x6d], cl; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x0000000000186b28: rcr byte ptr [rsp + rdi*8], 1; jmp qword ptr [rax]; 
0x00000000000739e4: rcr dword ptr [rbx + 0x5d], 1; mov eax, 0xffffffff; pop r12; ret; 
0x00000000000b42a3: rcr dword ptr [rbx - 0x2708ffd0], 0x64; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001794d0: rcr dword ptr [rbx - 0x6422000c], cl; hlt; jmp rdi; 
0x0000000000038519: rcr dword ptr [rcx], -0x40; and eax, 2; sub eax, 1; ret; 
0x0000000000117ad6: rcr dword ptr [rcx], -0x40; ret; 
0x00000000000ebea3: rcr dword ptr [rdi], 0x2d; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000003204b: rcr dword ptr [rdi], 0x39; add byte ptr [rax - 0x73], cl; cmp eax, 0x38dd0a; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000139e2c: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013ddc9: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000013d5e9: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000013d9d9: rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d1f9: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a98c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013a16c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000013994c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000013d398: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013a4ac: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000139c8c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013946c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000013a64c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000013d889: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d0a9: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013e1b9: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001397ac: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001398e2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a5e2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a102: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d78a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013e0ba: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013a922: rcr dword ptr [rdx], 0xf; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000139c22: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000139742: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a442: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000013d8da: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013d0fa: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000f8193: rcr dword ptr [rsp + rbp], 1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000038011: rep stosq qword ptr [rdi], rax; mov edi, r8d; call 0x36eb0; add rsp, 0xa8; ret; 
0x00000000000372c6: rep stosq qword ptr [rdi], rax; mov rdi, rsp; call 0x36f60; add rsp, 0x88; ret; 
0x000000000000edb0: ret 0; 
0x000000000002f0bf: ret 0x100; 
0x000000000002e968: ret 0x101; 
0x00000000000007bf: ret 0x102; 
0x0000000000034b8a: ret 0x1074; 
0x0000000000041bc4: ret 0x1075; 
0x000000000006d51f: ret 0x107; 
0x00000000000047d1: ret 0x10; 
0x00000000000801c2: ret 0x110; 
0x00000000000384bc: ret 0x114d; 
0x00000000000bd894: ret 0x1174; 
0x000000000005f4ba: ret 0x1183; 
0x0000000000008bb1: ret 0x11; 
0x00000000000a5529: ret 0x11e9; 
0x000000000005d85a: ret 0x127f; 
0x000000000016e3c8: ret 0x12; 
0x000000000005c665: ret 0x12e9; 
0x000000000004f462: ret 0x1368; 
0x00000000000e0d99: ret 0x1372; 
0x00000000000dab48: ret 0x1376; 
0x00000000000406a3: ret 0x13; 
0x00000000000494db: ret 0x13eb; 
0x000000000008869d: ret 0x144; 
0x00000000000d958b: ret 0x1476; 
0x0000000000048349: ret 0x1477; 
0x0000000000096ff9: ret 0x147c; 
0x00000000000548db: ret 0x148; 
0x00000000000e30bb: ret 0x148d; 
0x000000000007bdd2: ret 0x149; 
0x00000000000330dd: ret 0x14; 
0x00000000000ec3b8: ret 0x14c; 
0x00000000000365ca: ret 0x14fb; 
0x0000000000036460: ret 0x1575; 
0x000000000007f87b: ret 0x1589; 
0x000000000000a138: ret 0x15; 
0x00000000000283fa: ret 0x15d2; 
0x000000000001ff10: ret 0x15d7; 
0x000000000003d7bf: ret 0x1676; 
0x000000000003c596: ret 0x1677; 
0x0000000000056a9a: ret 0x16; 
0x00000000000e84d4: ret 0x16e9; 
0x000000000001a1f1: ret 0x17; 
0x000000000001ac28: ret 0x17c5; 
0x000000000001bf00: ret 0x17c6; 
0x0000000000018768: ret 0x17cf; 
0x00000000000eb4e3: ret 0x17e8; 
0x00000000000af983: ret 0x17e9; 
0x000000000008be25: ret 0x1876; 
0x0000000000047267: ret 0x18b9; 
0x00000000000c7701: ret 0x18eb; 
0x000000000008bac5: ret 0x1974; 
0x0000000000010720: ret 0x19; 
0x00000000000c41a2: ret 0x19eb; 
0x00000000000965d4: ret 0x1a75; 
0x000000000017617a: ret 0x1ad4; 
0x000000000017490d: ret 0x1b49; 
0x00000000000fbbe2: ret 0x1b72; 
0x00000000000eb192: ret 0x1b75; 
0x0000000000050c13: ret 0x1b8; 
0x0000000000056d8a: ret 0x1b; 
0x0000000000001bf1: ret 0x1bb7; 
0x00000000000da26f: ret 0x1be8; 
0x00000000000220b4: ret 0x1be; 
0x000000000004c74e: ret 0x1beb; 
0x000000000000346f: ret 0x1bf9; 
0x000000000016fe00: ret 0x1d4; 
0x0000000000170598: ret 0x1d5; 
0x000000000008b9c6: ret 0x1d74; 
0x00000000000021c9: ret 0x1dd4; 
0x00000000000d1a1e: ret 0x1de9; 
0x00000000000c4fca: ret 0x1e73; 
0x0000000000095a09: ret 0x1e75; 
0x00000000000e3ad9: ret 0x1e8; 
0x000000000003e9ea: ret 0x1e; 
0x0000000000027048: ret 0x1f0f; 
0x00000000000c5019: ret 0x1f73; 
0x00000000001303da: ret 0x1f; 
0x00000000000b7321: ret 0x1fbf; 
0x000000000002f0ce: ret 0x200; 
0x00000000001115ca: ret 0x201; 
0x00000000000dfbc9: ret 0x2041; 
0x0000000000086c3d: ret 0x2074; 
0x000000000003602e: ret 0x2148; 
0x0000000000194bd1: ret 0x21a; 
0x00000000000cb5d9: ret 0x21e8; 
0x0000000000086bcb: ret 0x2275; 
0x0000000000086cf8: ret 0x2288; 
0x0000000000161222: ret 0x2373; 
0x0000000000096c6a: ret 0x2374; 
0x00000000000d8dff: ret 0x237e; 
0x00000000000025c7: ret 0x23cb; 
0x00000000000a74ef: ret 0x23eb; 
0x00000000000027b8: ret 0x244f; 
0x000000000016ee08: ret 0x24; 
0x0000000000165208: ret 0x25; 
0x00000000001650c9: ret 0x25b8; 
0x00000000000f7c5c: ret 0x25eb; 
0x00000000001601ca: ret 0x261; 
0x00000000000d94c1: ret 0x267e; 
0x0000000000004b10: ret 0x26; 
0x00000000000f7d2d: ret 0x26eb; 
0x0000000000088cb6: ret 0x2774; 
0x00000000000eb6d3: ret 0x27e8; 
0x000000000000054f: ret 0x2800; 
0x0000000000098855: ret 0x280f; 
0x000000000008be15: ret 0x2876; 
0x0000000000131c2f: ret 0x28; 
0x00000000000b512a: ret 0x28f5; 
0x00000000000adf48: ret 0x2941; 
0x00000000000a7192: ret 0x2944; 
0x00000000000d7bdf: ret 0x2945; 
0x000000000003e780: ret 0x2948; 
0x000000000004425f: ret 0x2949; 
0x0000000000092e75: ret 0x294c; 
0x0000000000079026: ret 0x294d; 
0x0000000000038c44: ret 0x2973; 
0x000000000005df92: ret 0x2975; 
0x0000000000060409: ret 0x29; 
0x0000000000001b15: ret 0x2a63; 
0x0000000000111c4c: ret 0x2a; 
0x0000000000031d40: ret 0x2ae8; 
0x000000000010eca2: ret 0x2af1; 
0x000000000010daa2: ret 0x2b03; 
0x00000000001117a2: ret 0x2b17; 
0x0000000000110662: ret 0x2b27; 
0x00000000001117ad: ret 0x2b28; 
0x00000000000b1a4e: ret 0x2b3c; 
0x00000000001101ad: ret 0x2b3e; 
0x000000000010e612: ret 0x2b44; 
0x0000000000024ed6: ret 0x2b49; 
0x0000000000127332: ret 0x2b74; 
0x00000000000a1a42: ret 0x2b77; 
0x0000000000107c14: ret 0x2b; 
0x0000000000100392: ret 0x2bf5; 
0x0000000000100aad: ret 0x2c35; 
0x0000000000082db1: ret 0x2c75; 
0x00000000000f3ea2: ret 0x2c9f; 
0x00000000000f1c04: ret 0x2c; 
0x00000000000f3cfa: ret 0x2ca5; 
0x0000000000047f9b: ret 0x2ce9; 
0x000000000005de24: ret 0x2d75; 
0x00000000000f10d4: ret 0x2d77; 
0x0000000000044ee5: ret 0x2e66; 
0x00000000000d3f8c: ret 0x2e9; 
0x00000000000d1b0c: ret 0x2e; 
0x00000000000f9f79: ret 0x2eb; 
0x0000000000085d6e: ret 0x2f74; 
0x000000000007e218: ret 0x2fe9; 
0x00000000000bf7ad: ret 0x3048; 
0x0000000000001b84: ret 0x306a; 
0x00000000000af11b: ret 0x30; 
0x00000000000b3aaa: ret 0x30d4; 
0x000000000011a627: ret 0x3108; 
0x000000000005ffec: ret 0x3145; 
0x0000000000125957: ret 0x3148; 
0x000000000012558d: ret 0x314c; 
0x00000000000e3557: ret 0x3173; 
0x00000000000055a8: ret 0x31; 
0x00000000000e9539: ret 0x31e9; 
0x000000000004c5ea: ret 0x31eb; 
0x000000000000ffb8: ret 0x33; 
0x0000000000082d9a: ret 0x33b0; 
0x000000000007e16a: ret 0x3428; 
0x000000000007a4aa: ret 0x3453; 
0x0000000000096fd9: ret 0x347c; 
0x0000000000057daa: ret 0x348; 
0x000000000000f3e8: ret 0x34; 
0x0000000000077fad: ret 0x34c0; 
0x0000000000085d78: ret 0x3574; 
0x00000000000078e8: ret 0x35; 
0x000000000006e877: ret 0x3675; 
0x0000000000051b96: ret 0x36; 
0x00000000000463a2: ret 0x377a; 
0x00000000000059c8: ret 0x37; 
0x0000000000069efa: ret 0x37d; 
0x00000000000fb4c3: ret 0x37e8; 
0x0000000000175a5a: ret 0x3827; 
0x00000000000f54ba: ret 0x3845; 
0x000000000010a0d5: ret 0x3875; 
0x000000000008be05: ret 0x3876; 
0x000000000010a20b: ret 0x3877; 
0x0000000000033b55: ret 0x38; 
0x00000000001740e6: ret 0x38ae; 
0x000000000006eb8f: ret 0x38b; 
0x00000000000478cb: ret 0x3901; 
0x0000000000113b85: ret 0x3904; 
0x0000000000117cc7: ret 0x3941; 
0x00000000000d887d: ret 0x3944; 
0x0000000000060e57: ret 0x3945; 
0x000000000003ea0b: ret 0x3948; 
0x000000000002ed42: ret 0x3949; 
0x00000000001044c0: ret 0x394c; 
0x0000000000035a0a: ret 0x394d; 
0x0000000000021cb7: ret 0x39; 
0x0000000000033e0a: ret 0x39a; 
0x00000000000a1202: ret 0x3a01; 
0x000000000016120b: ret 0x3a73; 
0x000000000005a47a: ret 0x3b01; 
0x00000000000d85e0: ret 0x3b42; 
0x000000000002c6fa: ret 0x3b48; 
0x00000000001273a2: ret 0x3b74; 
0x00000000000f1f73: ret 0x3b8; 
0x0000000000004a08: ret 0x3b; 
0x0000000000103084: ret 0x3bf; 
0x0000000000035aff: ret 0x3c01; 
0x0000000000086bb1: ret 0x3c75; 
0x000000000003fa01: ret 0x3ce9; 
0x00000000000360d0: ret 0x3d75; 
0x0000000000024532: ret 0x3d83; 
0x00000000000df862: ret 0x3d; 
0x0000000000046ea7: ret 0x3dbe; 
0x00000000000a54fd: ret 0x3de9; 
0x00000000000ae7e6: ret 0x3e89; 
0x00000000000e81d1: ret 0x3ee9; 
0x000000000002445e: ret 0x3f74; 
0x00000000000700eb: ret 0x3f7; 
0x00000000000d3c6a: ret 0x4001; 
0x00000000000b1327: ret 0x400; 
0x00000000000009f5: ret 0x4021; 
0x00000000000d45b1: ret 0x402; 
0x00000000000e73f9: ret 0x403c; 
0x000000000002299a: ret 0x4101; 
0x0000000000117e52: ret 0x4102; 
0x00000000000645f5: ret 0x4104; 
0x000000000004a258: ret 0x4108; 
0x000000000002082b: ret 0x4110; 
0x00000000000cf3b8: ret 0x4118; 
0x00000000000c5d26: ret 0x4164; 
0x0000000000088a10: ret 0x4166; 
0x000000000002586e: ret 0x41c3; 
0x000000000008693a: ret 0x4201; 
0x00000000000b14f3: ret 0x4240; 
0x0000000000097dfa: ret 0x4266; 
0x00000000000d89a9: ret 0x428b; 
0x00000000000b2312: ret 0x428d; 
0x00000000000de821: ret 0x42c7; 
0x000000000005b958: ret 0x42e8; 
0x00000000000ed530: ret 0x43f6; 
0x000000000005517d: ret 0x4401; 
0x00000000000c1af5: ret 0x4408; 
0x0000000000000888: ret 0x440c; 
0x0000000000000456: ret 0x4412; 
0x000000000012dd78: ret 0x4489; 
0x0000000000123862: ret 0x448b; 
0x00000000000e7cab: ret 0x44c6; 
0x0000000000029f95: ret 0x44c7; 
0x00000000000249b9: ret 0x44f6; 
0x0000000000050837: ret 0x4501; 
0x0000000000130034: ret 0x4502; 
0x0000000000064c57: ret 0x4504; 
0x00000000000ad03e: ret 0x4505; 
0x00000000000d7c0d: ret 0x4510; 
0x00000000000edee0: ret 0x4574; 
0x00000000000ea7cd: ret 0x4576; 
0x00000000000c59a0: ret 0x45e9; 
0x00000000000cb7ef: ret 0x460f; 
0x00000000000a1e97: ret 0x4675; 
0x0000000000174be4: ret 0x474c; 
0x00000000000bc30b: ret 0x4775; 
0x0000000000091605: ret 0x4788; 
0x00000000000098b0: ret 0x47; 
0x00000000000fb3b3: ret 0x47e8; 
0x0000000000021d21: ret 0x4801; 
0x0000000000027cde: ret 0x4802; 
0x0000000000050a32: ret 0x4803; 
0x0000000000027a95: ret 0x4804; 
0x0000000000091bbd: ret 0x4805; 
0x00000000000285ea: ret 0x4806; 
0x00000000000fe2a2: ret 0x4807; 
0x00000000000218a8: ret 0x4808; 
0x00000000000fe102: ret 0x4809; 
0x00000000000fe3c2: ret 0x480a; 
0x00000000000fdf62: ret 0x480b; 
0x00000000000b060e: ret 0x480e; 
0x0000000000039ac6: ret 0x4810; 
0x000000000002c130: ret 0x4811; 
0x000000000012a033: ret 0x4812; 
0x00000000000fbffd: ret 0x4814; 
0x000000000008117e: ret 0x4817; 
0x00000000000ccaf0: ret 0x481e; 
0x00000000000b89e3: ret 0x4830; 
0x0000000000096e2d: ret 0x4840; 
0x0000000000021fd5: ret 0x4847; 
0x00000000000c0f35: ret 0x4864; 
0x0000000000036115: ret 0x4866; 
0x00000000000a894e: ret 0x4890; 
0x000000000000fb68: ret 0x48; 
0x00000000000f0b80: ret 0x48b; 
0x00000000001261e4: ret 0x48bf; 
0x00000000000889ef: ret 0x48c3; 
0x00000000000bf3ba: ret 0x48c; 
0x000000000003cc24: ret 0x48d; 
0x0000000000050d32: ret 0x48e8; 
0x0000000000023681: ret 0x48e9; 
0x00000000001763a6: ret 0x48f; 
0x0000000000025c25: ret 0x4901; 
0x0000000000092021: ret 0x4902; 
0x0000000000025ee5: ret 0x4904; 
0x00000000001250c5: ret 0x4907; 
0x000000000004ded5: ret 0x4908; 
0x00000000000ab690: ret 0x4909; 
0x00000000001372f2: ret 0x4910; 
0x00000000000ae410: ret 0x491e; 
0x0000000000085eb1: ret 0x49e8; 
0x00000000000038af: ret 0x49ec; 
0x00000000000f4d6f: ret 0x4b01; 
0x000000000004a6f5: ret 0x4b77; 
0x00000000001115d1: ret 0x4b78; 
0x00000000000867fb: ret 0x4b80; 
0x00000000000292a2: ret 0x4c01; 
0x0000000000091d81: ret 0x4c02; 
0x000000000006827a: ret 0x4c04; 
0x00000000000326a5: ret 0x4c08; 
0x0000000000049a2e: ret 0x4c10; 
0x000000000005024f: ret 0x4c30; 
0x00000000000bca0c: ret 0x4c48; 
0x00000000000e6a96: ret 0x4c6; 
0x0000000000127bb1: ret 0x4c74; 
0x0000000000125067: ret 0x4c8b; 
0x0000000000005848: ret 0x4c; 
0x000000000005d86e: ret 0x4ce8; 
0x0000000000025974: ret 0x4d02; 
0x000000000010c84e: ret 0x4d04; 
0x000000000007d47f: ret 0x4d07; 
0x000000000003fe16: ret 0x4d09; 
0x000000000009d112: ret 0x4d10; 
0x00000000001039cb: ret 0x4d30; 
0x0000000000052d67: ret 0x4d64; 
0x000000000004fbbd: ret 0x4de8; 
0x000000000004fd1b: ret 0x4e0f; 
0x0000000000175e07: ret 0x4e27; 
0x0000000000020822: ret 0x4eb; 
0x00000000000fa6ad: ret 0x5077; 
0x00000000001611f4: ret 0x5173; 
0x0000000000046fd4: ret 0x5174; 
0x0000000000113619: ret 0x51e8; 
0x000000000000315a: ret 0x52c0; 
0x00000000000e6ee8: ret 0x52e9; 
0x0000000000033a7a: ret 0x532; 
0x000000000006d6a7: ret 0x5389; 
0x00000000000d773a: ret 0x538b; 
0x000000000011167b: ret 0x53e9; 
0x00000000001221db: ret 0x53ff; 
0x00000000000ad011: ret 0x5441; 
0x0000000000049524: ret 0x5474; 
0x0000000000096fb9: ret 0x547c; 
0x0000000000039df8: ret 0x5489; 
0x0000000000128b81: ret 0x548d; 
0x0000000000067ba6: ret 0x54e8; 
0x000000000017406c: ret 0x5508; 
0x0000000000002442: ret 0x5576; 
0x00000000000b0161: ret 0x5589; 
0x00000000000475b7: ret 0x5641; 
0x0000000000086b97: ret 0x5675; 
0x000000000009374a: ret 0x56e9; 
0x00000000000d4abc: ret 0x574; 
0x0000000000109f12: ret 0x577; 
0x00000000001273cd: ret 0x57b; 
0x00000000000c0da3: ret 0x57e8; 
0x0000000000176338: ret 0x5803; 
0x00000000000afcba: ret 0x583; 
0x0000000000073e9d: ret 0x5877; 
0x0000000000080814: ret 0x58b; 
0x0000000000173d40: ret 0x591c; 
0x0000000000132157: ret 0x59e9; 
0x0000000000003239: ret 0x5a51; 
0x000000000002c3da: ret 0x5ab; 
0x0000000000174aa7: ret 0x5ae4; 
0x00000000000e314c: ret 0x5ba; 
0x0000000000002f67: ret 0x5bdb; 
0x0000000000095fdb: ret 0x5be9; 
0x0000000000104bcd: ret 0x5bf; 
0x00000000000b2e2b: ret 0x5c89; 
0x0000000000003021: ret 0x5cbe; 
0x000000000005ae2f: ret 0x5ce9; 
0x00000000000f3555: ret 0x5e9; 
0x00000000000b66ca: ret 0x5e; 
0x00000000000ae874: ret 0x5ee9; 
0x00000000000004b9: ret 0x6080; 
0x00000000000b64ca: ret 0x60; 
0x0000000000076ea4: ret 0x60e9; 
0x0000000000002705: ret 0x617e; 
0x00000000000fae99: ret 0x61e8; 
0x00000000001767d2: ret 0x62c1; 
0x0000000000040173: ret 0x6348; 
0x0000000000053754: ret 0x6349; 
0x00000000000a1e7a: ret 0x6375; 
0x000000000008ab8f: ret 0x63be; 
0x0000000000096fa9: ret 0x647c; 
0x00000000000b9284: ret 0x64b8; 
0x0000000000033d78: ret 0x65e9; 
0x00000000000d65c8: ret 0x6601; 
0x000000000009705a: ret 0x6610; 
0x000000000008bd92: ret 0x6620; 
0x000000000000280b: ret 0x6642; 
0x000000000011e15a: ret 0x665; 
0x000000000011e05a: ret 0x666; 
0x0000000000086eb3: ret 0x66c3; 
0x00000000000c0914: ret 0x676; 
0x00000000000d8186: ret 0x677e; 
0x0000000000173d5f: ret 0x67b2; 
0x00000000000b2291: ret 0x67ba; 
0x00000000000eaba3: ret 0x67e8; 
0x00000000000b14f0: ret 0x6948; 
0x00000000000d3f19: ret 0x697e; 
0x00000000000737e9: ret 0x6ae9; 
0x00000000000c1a4a: ret 0x6b74; 
0x00000000000c2e99: ret 0x6b8; 
0x0000000000003c96: ret 0x6bba; 
0x0000000000102db2: ret 0x6bf; 
0x00000000001858f3: ret 0x6e1f; 
0x0000000000176961: ret 0x6f9; 
0x00000000000a3918: ret 0x6fe9; 
0x0000000000034624: ret 0x70e9; 
0x000000000004f406: ret 0x71eb; 
0x00000000000794da: ret 0x721; 
0x00000000000217c0: ret 0x7401; 
0x0000000000037673: ret 0x7402; 
0x000000000006cd88: ret 0x7404; 
0x000000000007540e: ret 0x7408; 
0x000000000006e261: ret 0x7420; 
0x0000000000050267: ret 0x7450; 
0x0000000000098347: ret 0x7501; 
0x0000000000037634: ret 0x7502; 
0x000000000008c57d: ret 0x7504; 
0x0000000000072ea8: ret 0x7508; 
0x000000000016217b: ret 0x7510; 
0x000000000008c578: ret 0x7518; 
0x0000000000162188: ret 0x7520; 
0x00000000000d3969: ret 0x7540; 
0x00000000000f0951: ret 0x7577; 
0x0000000000082537: ret 0x7675; 
0x00000000001600e2: ret 0x7677; 
0x00000000000b0501: ret 0x76c; 
0x0000000000024eca: ret 0x774; 
0x00000000000c533c: ret 0x775; 
0x000000000002c237: ret 0x7773; 
0x000000000006d366: ret 0x778d; 
0x00000000000ebf83: ret 0x77e8; 
0x00000000000b2366: ret 0x77e; 
0x00000000000826c5: ret 0x7874; 
0x00000000000a63ea: ret 0x7901; 
0x0000000000002eb4: ret 0x793b; 
0x000000000006d3e9: ret 0x7a8b; 
0x0000000000116d67: ret 0x7a8d; 
0x00000000000365a5: ret 0x7c7; 
0x00000000000eea33: ret 0x7c83; 
0x00000000000dbcf6: ret 0x7c8b; 
0x000000000012f3d0: ret 0x7de9; 
0x000000000008bd22: ret 0x7e20; 
0x00000000000fb0f3: ret 0x7e8; 
0x00000000000d8dca: ret 0x7eb; 
0x000000000008717c: ret 0x7f10; 
0x00000000000ff0b3: ret 0x7fd; 
0x0000000000088359: ret 0x8000; 
0x0000000000033f5c: ret 0x8001; 
0x00000000000b4223: ret 0x8010; 
0x0000000000034c5b: ret 0x8040; 
0x000000000009d54d: ret 0x8072; 
0x0000000000115958: ret 0x8080; 
0x000000000014a86e: ret 0x80; 
0x0000000000003870: ret 0x80fc; 
0x0000000000042c74: ret 0x8136; 
0x000000000004559b: ret 0x8141; 
0x0000000000051f03: ret 0x8166; 
0x00000000000cb579: ret 0x81e8; 
0x00000000000fb838: ret 0x81e9; 
0x0000000000066086: ret 0x820f; 
0x000000000011f063: ret 0x828d; 
0x00000000000ca855: ret 0x82e9; 
0x00000000000d0c99: ret 0x82eb; 
0x000000000002d2c5: ret 0x8301; 
0x00000000001130f9: ret 0x8303; 
0x000000000001fc6e: ret 0x8304; 
0x0000000000096261: ret 0x8305; 
0x000000000005620f: ret 0x8308; 
0x00000000000475ec: ret 0x830f; 
0x000000000002ea88: ret 0x8310; 
0x00000000000525ea: ret 0x832d; 
0x000000000001f63f: ret 0x8341; 
0x000000000001f96b: ret 0x8348; 
0x00000000000514d5: ret 0x8349; 
0x0000000000134bfc: ret 0x8366; 
0x000000000013341a: ret 0x8380; 
0x00000000000d7cac: ret 0x839; 
0x00000000000d7f1c: ret 0x83b; 
0x00000000000979fb: ret 0x8401; 
0x0000000000053746: ret 0x8404; 
0x0000000000021a92: ret 0x840f; 
0x0000000000049a01: ret 0x841; 
0x000000000007d538: ret 0x8441; 
0x00000000000789f5: ret 0x8445; 
0x00000000000cbb13: ret 0x84e9; 
0x000000000006cbbf: ret 0x8502; 
0x0000000000053815: ret 0x8504; 
0x000000000006d5be: ret 0x8508; 
0x000000000002e248: ret 0x850f; 
0x00000000000b257e: ret 0x8545; 
0x0000000000055da1: ret 0x8548; 
0x000000000004902f: ret 0x854d; 
0x00000000000cbae9: ret 0x8589; 
0x0000000000050ae3: ret 0x858b; 
0x000000000004b92e: ret 0x860f; 
0x00000000000f87ea: ret 0x861; 
0x0000000000036dc5: ret 0x870f; 
0x000000000017367e: ret 0x871e; 
0x000000000008be35: ret 0x876; 
0x00000000001092bc: ret 0x87e; 
0x0000000000022835: ret 0x8801; 
0x0000000000098082: ret 0x8802; 
0x00000000000c70b2: ret 0x8804; 
0x00000000000c8b5d: ret 0x880f; 
0x00000000000b0d8f: ret 0x8840; 
0x000000000011a385: ret 0x8841; 
0x00000000001257ce: ret 0x8844; 
0x00000000000ea4f9: ret 0x8845; 
0x0000000000002594: ret 0x88ad; 
0x000000000002dbbd: ret 0x8901; 
0x000000000004bf25: ret 0x8908; 
0x000000000004bf95: ret 0x8910; 
0x00000000000ae837: ret 0x8941; 
0x00000000000373a6: ret 0x8944; 
0x00000000000213a8: ret 0x8948; 
0x00000000000217f0: ret 0x8949; 
0x000000000001f88f: ret 0x894c; 
0x000000000007d483: ret 0x894d; 
0x000000000003911b: ret 0x894e; 
0x000000000003d39d: ret 0x8966; 
0x0000000000103bfe: ret 0x89eb; 
0x000000000008b99a: ret 0x8a04; 
0x0000000000002537: ret 0x8a4c; 
0x00000000000a3900: ret 0x8aeb; 
0x0000000000025d07: ret 0x8b01; 
0x00000000001061fb: ret 0x8b02; 
0x00000000000a354f: ret 0x8b04; 
0x000000000002f92e: ret 0x8b05; 
0x00000000001027fe: ret 0x8b28; 
0x0000000000175eae: ret 0x8b36; 
0x000000000002e9f2: ret 0x8b41; 
0x000000000004b731: ret 0x8b44; 
0x0000000000094bd3: ret 0x8b46; 
0x00000000000d24d8: ret 0x8b47; 
0x0000000000022ad9: ret 0x8b48; 
0x00000000000211ac: ret 0x8b49; 
0x000000000003909e: ret 0x8b4a; 
0x0000000000031cc5: ret 0x8b4c; 
0x000000000006ea58: ret 0x8b64; 
0x00000000000e330e: ret 0x8c0f; 
0x000000000000377a: ret 0x8cba; 
0x00000000000c72f8: ret 0x8d01; 
0x000000000005e5a7: ret 0x8d04; 
0x0000000000050eca: ret 0x8d0f; 
0x00000000000b92e3: ret 0x8d41; 
0x00000000000b8ea0: ret 0x8d44; 
0x00000000000cf2f9: ret 0x8d47; 
0x0000000000021e88: ret 0x8d48; 
0x0000000000031cde: ret 0x8d49; 
0x000000000005ea9f: ret 0x8d4a; 
0x00000000000ae2f1: ret 0x8d4b; 
0x0000000000024d1b: ret 0x8d4c; 
0x0000000000051ef5: ret 0x8d4d; 
0x000000000005f722: ret 0x8d89; 
0x00000000000e8dcd: ret 0x8de9; 
0x00000000000273b6: ret 0x8e0f; 
0x00000000001210dc: ret 0x8ee8; 
0x000000000006199c: ret 0x8f0f; 
0x00000000000f24dd: ret 0x8feb; 
0x000000000002f91d: ret 0x90c3; 
0x00000000000dbfd9: ret 0x91e8; 
0x00000000001326df: ret 0x9274; 
0x000000000005c2e5: ret 0x92e9; 
0x00000000000e3477: ret 0x930f; 
0x00000000000b22c5: ret 0x93ba; 
0x00000000000850fe: ret 0x93be; 
0x00000000000b0e6f: ret 0x943a; 
0x00000000000e3481: ret 0x944; 
0x000000000008168f: ret 0x948; 
0x000000000008a878: ret 0x94c; 
0x00000000000577fb: ret 0x9529; 
0x00000000000218f9: ret 0x9539; 
0x00000000000323e6: ret 0x953d; 
0x0000000000174cd3: ret 0x9576; 
0x0000000000112672: ret 0x9588; 
0x000000000010c8a9: ret 0x96eb; 
0x00000000000e7326: ret 0x970; 
0x00000000000cb501: ret 0x970f; 
0x000000000000375c: ret 0x975; 
0x00000000000c44c3: ret 0x97e9; 
0x00000000000f9a40: ret 0x9848; 
0x0000000000086be5: ret 0x9874; 
0x000000000005d7b6: ret 0x98e9; 
0x0000000000176939: ret 0x990e; 
0x00000000000c4733: ret 0x9aeb; 
0x0000000000032dfd: ret 0x9be9; 
0x00000000000ebadf: ret 0x9be; 
0x000000000009d530: ret 0x9d72; 
0x0000000000056516: ret 0x9d8b; 
0x00000000000b0c32: ret 0x9e0f; 
0x00000000000f08bf: ret 0x9e75; 
0x00000000001210cc: ret 0x9ee8; 
0x000000000019265c: ret 0xa03; 
0x000000000005d7ae: ret 0xa0e9; 
0x00000000000f1c59: ret 0xa1e8; 
0x0000000000077462: ret 0xa1eb; 
0x00000000000460af: ret 0xa274; 
0x00000000001749c3: ret 0xa514; 
0x00000000000a5497: ret 0xa6eb; 
0x0000000000041bba: ret 0xa77; 
0x0000000000080bc3: ret 0xa7e; 
0x000000000013411e: ret 0xa802; 
0x0000000000051335: ret 0xa9e9; 
0x000000000008cc1e: ret 0xa; 
0x000000000003dd14: ret 0xaba; 
0x0000000000174e47: ret 0xac65; 
0x0000000000175804: ret 0xacfc; 
0x00000000000fad49: ret 0xb1e8; 
0x00000000000800c4: ret 0xb48b; 
0x00000000000781ee: ret 0xb4eb; 
0x0000000000071c3b: ret 0xb5eb; 
0x00000000000296d7: ret 0xb60f; 
0x00000000000f9228: ret 0xb6e9; 
0x00000000000777c3: ret 0xb6eb; 
0x0000000000029a85: ret 0xb70f; 
0x0000000000037c4e: ret 0xb74; 
0x000000000012e29c: ret 0xb804; 
0x0000000000036031: ret 0xb848; 
0x00000000000472b5: ret 0xb87f; 
0x00000000000d421a: ret 0xb880; 
0x0000000000022282: ret 0xb8; 
0x00000000000b3eb2: ret 0xb8e9; 
0x0000000000070a7f: ret 0xb8eb; 
0x000000000004fd1e: ret 0xb941; 
0x00000000000be1d3: ret 0xb9; 
0x0000000000174d0e: ret 0xb9b9; 
0x0000000000004531: ret 0xb; 
0x0000000000036d9c: ret 0xba41; 
0x00000000000756a3: ret 0xba74; 
0x0000000000003155: ret 0xba88; 
0x00000000000bf571: ret 0xbae9; 
0x00000000000714ea: ret 0xbbeb; 
0x0000000000078044: ret 0xbceb; 
0x0000000000002464: ret 0xbd07; 
0x000000000005fb8c: ret 0xbd83; 
0x000000000005214a: ret 0xbe07; 
0x00000000000b89ed: ret 0xbe41; 
0x0000000000174a64: ret 0xbe57; 
0x00000000000bf764: ret 0xbe7; 
0x0000000000071acf: ret 0xbfeb; 
0x0000000000088219: ret 0xc000; 
0x000000000011b361: ret 0xc001; 
0x00000000000d6478: ret 0xc030; 
0x00000000000203c1: ret 0xc031; 
0x0000000000047772: ret 0xc083; 
0x000000000004f479: ret 0xc085; 
0x000000000004c9c3: ret 0xc0; 
0x00000000000af505: ret 0xc0e9; 
0x0000000000029207: ret 0xc101; 
0x00000000000224bd: ret 0xc141; 
0x0000000000036167: ret 0xc148; 
0x000000000011ef87: ret 0xc166; 
0x0000000000037113: ret 0xc189; 
0x000000000002d065: ret 0xc1e9; 
0x00000000000daf83: ret 0xc209; 
0x000000000003cc2a: ret 0xc229; 
0x000000000003cdd8: ret 0xc269; 
0x00000000000e414b: ret 0xc283; 
0x00000000001610c4: ret 0xc2b2; 
0x00000000000dc5c0: ret 0xc339; 
0x000000000004877b: ret 0xc35b; 
0x00000000000f9b03: ret 0xc383; 
0x0000000000101fdb: ret 0xc3f3; 
0x0000000000172902: ret 0xc4c3; 
0x0000000000174618: ret 0xc4ff; 
0x0000000000022855: ret 0xc601; 
0x0000000000036bc7: ret 0xc748; 
0x0000000000130c44: ret 0xc749; 
0x00000000000a1ed1: ret 0xc75; 
0x0000000000080328: ret 0xc789; 
0x00000000000eb733: ret 0xc7e8; 
0x0000000000042c7e: ret 0xc801; 
0x000000000007b420: ret 0xc883; 
0x000000000002a7f1: ret 0xc889; 
0x000000000008c3e9: ret 0xc88; 
0x00000000000c86a1: ret 0xc8d; 
0x00000000000e4a15: ret 0xc8e9; 
0x00000000000d7633: ret 0xc931; 
0x0000000000136451: ret 0xc984; 
0x000000000011266b: ret 0xc985; 
0x00000000000f7b81: ret 0xc9e8; 
0x00000000000a5474: ret 0xc9eb; 
0x0000000000086c56: ret 0xc9ff; 
0x000000000003e73a: ret 0xc; 
0x000000000013cb0c: ret 0xca39; 
0x00000000000373a9: ret 0xca81; 
0x00000000000cbad7: ret 0xca83; 
0x00000000000f9ec9: ret 0xcad9; 
0x00000000000a85fa: ret 0xcad; 
0x00000000000847d4: ret 0xcb8; 
0x000000000003bd7a: ret 0xcbc; 
0x000000000001f72c: ret 0xcbeb; 
0x00000000000f0258: ret 0xcc80; 
0x00000000001740aa: ret 0xcca7; 
0x000000000017618d: ret 0xcd11; 
0x000000000009d500: ret 0xcd72; 
0x000000000003a1ba: ret 0xcde; 
0x0000000000033a31: ret 0xce80; 
0x000000000001f8c2: ret 0xce89; 
0x00000000000a5bf9: ret 0xceb; 
0x000000000004f5a6: ret 0xcee9; 
0x000000000012f36a: ret 0xcf89; 
0x00000000000daf85: ret 0xcfe9; 
0x00000000000f38ee: ret 0xcfeb; 
0x00000000000c2342: ret 0xd029; 
0x000000000007d2f5: ret 0xd075; 
0x00000000000364c3: ret 0xd089; 
0x00000000000cf9f1: ret 0xd101; 
0x000000000011259c: ret 0xd120; 
0x00000000000b0bc5: ret 0xd138; 
0x000000000005b8d4: ret 0xd189; 
0x00000000000fb529: ret 0xd1e8; 
0x0000000000035720: ret 0xd231; 
0x00000000000b7104: ret 0xd269; 
0x0000000000032a9d: ret 0xd284; 
0x00000000000dbe6c: ret 0xd285; 
0x000000000003e3d0: ret 0xd349; 
0x00000000000aca4a: ret 0xd3a; 
0x000000000000089a: ret 0xd5a4; 
0x00000000000cd44a: ret 0xd5e9; 
0x00000000000d776c: ret 0xd675; 
0x000000000010b248: ret 0xd72; 
0x00000000000f7e96: ret 0xd74; 
0x00000000000f0ff6: ret 0xd77; 
0x00000000000d2193: ret 0xd7e8; 
0x00000000000485f0: ret 0xd7e9; 
0x00000000000fce05: ret 0xd889; 
0x0000000000175c25: ret 0xd8f; 
0x00000000000acade: ret 0xd96; 
0x0000000000113b04: ret 0xd975; 
0x00000000000a3e7f: ret 0xd9d; 
0x00000000000e103f: ret 0xd9e9; 
0x0000000000082380: ret 0xda29; 
0x0000000000108243: ret 0xda75; 
0x00000000000d94e7: ret 0xda7f; 
0x00000000000366ed: ret 0xdaf7; 
0x00000000000bc47b: ret 0xdb31; 
0x0000000000124242: ret 0xdb78; 
0x00000000000cacd5: ret 0xdb84; 
0x00000000000af8b0: ret 0xdc00; 
0x0000000000175d06: ret 0xdcd9; 
0x00000000000d8e22: ret 0xdd7f; 
0x0000000000174c82: ret 0xde5d; 
0x000000000004759d: ret 0xde8; 
0x0000000000173a11: ret 0xde9e; 
0x000000000002c31a: ret 0xdf89; 
0x00000000000880d9: ret 0xe000; 
0x0000000000162139: ret 0xe074; 
0x000000000003e315: ret 0xe083; 
0x00000000000ed64b: ret 0xe0e9; 
0x00000000001211da: ret 0xe0ff; 
0x0000000000055ef6: ret 0xe181; 
0x000000000005fe79: ret 0xe183; 
0x00000000000faa19: ret 0xe1e8; 
0x0000000000076965: ret 0xe274; 
0x00000000000285d0: ret 0xe281; 
0x0000000000028a7e: ret 0xe283; 
0x00000000000e2d23: ret 0xe2c1; 
0x0000000000022b72: ret 0xe2ff; 
0x00000000000587a8: ret 0xe3e9; 
0x0000000000175e26: ret 0xe71f; 
0x0000000000022371: ret 0xe783; 
0x00000000001a3160: ret 0xe7da; 
0x00000000000ef871: ret 0xe801; 
0x00000000000ae965: ret 0xe877; 
0x00000000000e7627: ret 0xe883; 
0x000000000006f792: ret 0xe8; 
0x0000000000021be4: ret 0xe8c1; 
0x00000000000229ab: ret 0xe901; 
0x000000000006ccac: ret 0xe902; 
0x000000000006769b: ret 0xe908; 
0x00000000001392d6: ret 0xe910; 
0x0000000000174187: ret 0xe970; 
0x00000000000a550c: ret 0xe974; 
0x000000000004ab2e: ret 0xe9c0; 
0x00000000000b0c35: ret 0xe9c1; 
0x000000000002ec81: ret 0xe9e8; 
0x000000000002ed9a: ret 0xe; 
0x000000000003c5ac: ret 0xea76; 
0x00000000000a1a3a: ret 0xea81; 
0x000000000012f2ff: ret 0xea83; 
0x000000000005fe72: ret 0xeac0; 
0x0000000000021a89: ret 0xeac1; 
0x00000000000b7290: ret 0xeaf7; 
0x00000000000d7604: ret 0xeb01; 
0x000000000006cb60: ret 0xeb02; 
0x000000000001fca3: ret 0xeb04; 
0x0000000000057dce: ret 0xeb08; 
0x0000000000137316: ret 0xeb10; 
0x00000000000beb92: ret 0xeb11; 
0x000000000003d832: ret 0xeb75; 
0x0000000000176938: ret 0xec2; 
0x00000000000d959f: ret 0xec77; 
0x0000000000130061: ret 0xec7c; 
0x00000000000d8282: ret 0xece9; 
0x00000000000ad248: ret 0xed77; 
0x00000000001969dc: ret 0xed84; 
0x00000000001998e6: ret 0xedf8; 
0x000000000019b1dc: ret 0xee3c; 
0x000000000019a6de: ret 0xee68; 
0x000000000006ca74: ret 0xee83; 
0x000000000007fafc: ret 0xee9; 
0x0000000000177bd0: ret 0xeed4; 
0x00000000000f9fb9: ret 0xeed9; 
0x00000000000bd79d: ret 0xeee9; 
0x00000000000e4bc5: ret 0xeeeb; 
0x00000000001765da: ret 0xef32; 
0x000000000006c8ae: ret 0xef83; 
0x0000000000022365: ret 0xefc1; 
0x0000000000087f99: ret 0xf000; 
0x00000000000310ff: ret 0xf01; 
0x000000000007c0d3: ret 0xf02; 
0x000000000005ba30: ret 0xf039; 
0x000000000006d4c5: ret 0xf04; 
0x0000000000098063: ret 0xf077; 
0x000000000012ea32: ret 0xf08; 
0x0000000000092f39: ret 0xf0e9; 
0x00000000001005c1: ret 0xf0eb; 
0x0000000000087132: ret 0xf10; 
0x00000000001a0da6: ret 0xf17f; 
0x00000000000970bc: ret 0xf188; 
0x0000000000076fe0: ret 0xf189; 
0x0000000000102a2a: ret 0xf1ca; 
0x0000000000097a15: ret 0xf1eb; 
0x0000000000098364: ret 0xf20; 
0x00000000000f9cca: ret 0xf257; 
0x00000000000dae79: ret 0xf2e9; 
0x000000000003a403: ret 0xf301; 
0x000000000003762c: ret 0xf304; 
0x0000000000102a8a: ret 0xf375; 
0x000000000018a990: ret 0xf380; 
0x0000000000114818: ret 0xf3c3; 
0x00000000000f9a8a: ret 0xf3c5; 
0x0000000000178d18: ret 0xf3c8; 
0x000000000004f677: ret 0xf3f; 
0x000000000006eda3: ret 0xf40; 
0x000000000002c599: ret 0xf41; 
0x000000000005a178: ret 0xf44; 
0x000000000002644f: ret 0xf48; 
0x000000000017942c: ret 0xf49a; 
0x0000000000050911: ret 0xf4a; 
0x00000000000d1e2a: ret 0xf4d6; 
0x000000000003cdda: ret 0xf4ec; 
0x00000000001ab2a6: ret 0xf55b; 
0x00000000001acb6e: ret 0xf57a; 
0x00000000001ad774: ret 0xf582; 
0x00000000001ade7c: ret 0xf589; 
0x00000000000f70ea: ret 0xf5d1; 
0x00000000001af294: ret 0xf5e1; 
0x00000000000e512d: ret 0xf601; 
0x00000000000bd39f: ret 0xf631; 
0x0000000000025192: ret 0xf641; 
0x000000000003647b: ret 0xf66; 
0x00000000001b257e: ret 0xf683; 
0x00000000000a15e6: ret 0xf685; 
0x000000000017a2f8: ret 0xf68a; 
0x0000000000121faa: ret 0xf6f6; 
0x00000000000b22dc: ret 0xf741; 
0x000000000003daaf: ret 0xf748; 
0x00000000000b18ac: ret 0xf749; 
0x00000000000c0e03: ret 0xf7e8; 
0x00000000000e2398: ret 0xf7e9; 
0x0000000000087e59: ret 0xf800; 
0x000000000010be3a: ret 0xf807; 
0x000000000018c490: ret 0xf81a; 
0x00000000001738f0: ret 0xf869; 
0x000000000018ca58: ret 0xf880; 
0x00000000000a44f4: ret 0xf883; 
0x0000000000032cb1: ret 0xf889; 
0x000000000018cb00: ret 0xf88a; 
0x00000000000ab72a: ret 0xf8cd; 
0x000000000008c5ba: ret 0xf95b; 
0x00000000000e22b2: ret 0xf980; 
0x00000000000a60fe: ret 0xf983; 
0x00000000000427a4: ret 0xf9e9; 
0x000000000008183b: ret 0xf; 
0x000000000011c44a: ret 0xfa58; 
0x000000000008887a: ret 0xfa7d; 
0x00000000000885fd: ret 0xfa80; 
0x00000000000422fd: ret 0xfa81; 
0x000000000003cc2c: ret 0xfa83; 
0x000000000004f614: ret 0xfac1; 
0x0000000000057391: ret 0xfae9; 
0x0000000000069dba: ret 0xfb56; 
0x0000000000083a1a: ret 0xfb99; 
0x0000000000061c2a: ret 0xfbd8; 
0x000000000012ca3a: ret 0xfbf3; 
0x0000000000087d19: ret 0xfc00; 
0x00000000000f3c81: ret 0xfc07; 
0x0000000000088a99: ret 0xfc3; 
0x0000000000186e4c: ret 0xfc55; 
0x0000000000186c3c: ret 0xfc61; 
0x000000000018733c: ret 0xfc7d; 
0x0000000000187334: ret 0xfc7e; 
0x000000000018732c: ret 0xfc7f; 
0x0000000000187324: ret 0xfc80; 
0x000000000018731c: ret 0xfc81; 
0x0000000000187128: ret 0xfc89; 
0x0000000000187620: ret 0xfcb0; 
0x00000000000c36aa: ret 0xfcdf; 
0x00000000000807a2: ret 0xfcf; 
0x000000000004c0ca: ret 0xfd33; 
0x000000000011673a: ret 0xfd56; 
0x00000000000d0c18: ret 0xfd83; 
0x00000000000310d1: ret 0xfdf; 
0x0000000000087bd9: ret 0xfe00; 
0x00000000000ba2fa: ret 0xfe79; 
0x00000000000d78d6: ret 0xfe83; 
0x00000000000a7ccb: ret 0xfe9; 
0x00000000000366f9: ret 0xfeb8; 
0x00000000000a8335: ret 0xfeb; 
0x0000000000087a99: ret 0xff00; 
0x0000000000045ff0: ret 0xff2; 
0x0000000000048ed9: ret 0xff31; 
0x0000000000097d2a: ret 0xff3; 
0x000000000009679e: ret 0xff41; 
0x0000000000086b94: ret 0xff48; 
0x000000000001f9b5: ret 0xff49; 
0x000000000007e01a: ret 0xff4f; 
0x0000000000087959: ret 0xff80; 
0x000000000011a076: ret 0xff81; 
0x00000000000cee23: ret 0xff83; 
0x000000000002532a: ret 0xffa1; 
0x000000000005a6bc: ret 0xffb7; 
0x0000000000048771: ret 0xffb8; 
0x0000000000043958: ret 0xffbf; 
0x0000000000087819: ret 0xffc0; 
0x00000000000a6dfe: ret 0xffc1; 
0x000000000002312a: ret 0xffc3; 
0x00000000000573d2: ret 0xffd8; 
0x000000000012937a: ret 0xffd9; 
0x000000000008124a: ret 0xffdb; 
0x00000000000667ea: ret 0xffdc; 
0x00000000000876d9: ret 0xffe0; 
0x0000000000060a91: ret 0xffec; 
0x0000000000197951: ret 0xffed; 
0x0000000000189279: ret 0xffee; 
0x000000000003d6fc: ret 0xffef; 
0x0000000000067695: ret 0xfff0; 
0x000000000004445a: ret 0xfff1; 
0x0000000000051750: ret 0xfff2; 
0x00000000000b7ea3: ret 0xfff3; 
0x00000000001a6289: ret 0xfff4; 
0x00000000000618b5: ret 0xfff5; 
0x00000000000b32aa: ret 0xfff6; 
0x000000000004201a: ret 0xfff7; 
0x000000000005088d: ret 0xfff8; 
0x00000000000cde37: ret 0xfff9; 
0x0000000000030f9b: ret 0xfffa; 
0x000000000011d47a: ret 0xfffb; 
0x000000000004daaa: ret 0xfffc; 
0x000000000008b2ea: ret 0xfffd; 
0x0000000000027fae: ret 0xfffe; 
0x000000000003e827: ret 0xffff; 
0x0000000000000e20: ret 1; 
0x0000000000001010: ret 2; 
0x000000000000ecd8: ret 3; 
0x000000000008bef9: ret 4; 
0x0000000000001588: ret 5; 
0x0000000000001728: ret 6; 
0x00000000000066c1: ret 7; 
0x000000000008bf15: ret 8; 
0x0000000000162bea: ret 9; 
0x000000000011496d: ret; 
0x000000000007141b: retfq 0x34; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000001aacf4: retfq; add dword ptr [rax], eax; clc; fcomi st(5); call qword ptr [rax]; 
0x0000000000050d2a: retfq; or byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x48e8; 
0x000000000008131b: retfq; xor eax, dword ptr [rax]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x00000000001a6120: rol al, 0xf4; jmp qword ptr [rcx]; 
0x000000000010880c: rol bl, 0x66; nop; movsxd rdi, edi; mov eax, 0xe5; syscall; 
0x00000000000a89fc: rol byte ptr [r11 - 0x78f0f608], 1; pushfq; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000007f873: rol byte ptr [rax + 0x3230247c], cl; sete dl; mov dword ptr [rip + 0x33e8de], edx; movsxd rdi, ecx; mov eax, 3; syscall; 
0x0000000000048747: rol byte ptr [rax + 0x375003f], 0x5b; ret; 
0x0000000000097d02: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000088cb2: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x0000000000076c3b: rol byte ptr [rax + rax*8 - 0x7cb7978c], 0xc4; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000001717c0: rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000117e47: rol byte ptr [rax + rcx*4 + 0x19], cl; movzx edx, byte ptr [r10 + 1]; add r10, 2; mov dword ptr [r8], edx; mov qword ptr [r9], r10; ret; 
0x00000000000c62bc: rol byte ptr [rax - 0x6bf0a207], cl; ret 0x8d48; 
0x000000000002fa68: rol byte ptr [rax], 0; add byte ptr [rax - 0x75], cl; add eax, 0x38e365; mov qword ptr [rax], rdx; ret; 
0x00000000000797a0: rol byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; fild word ptr [rbp + 0x4f0f48c9]; ret 0x8948; 
0x000000000006e9ed: rol byte ptr [rax], 0; add byte ptr [rbp + 0x48117ec0], al; mov eax, dword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x000000000007b490: rol byte ptr [rax], 0; add byte ptr [rbp + 0x48487ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x000000000006dffc: rol byte ptr [rax], 0; add byte ptr [rbp + 0x485c7ef6], al; mov dword ptr [rbp], eax; mov rax, qword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x000000000012b527: rol byte ptr [rax], 0; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000015ffed: rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000019a1dd: rol byte ptr [rax], 0; nop; and al, 0xee; call qword ptr [rsi]; 
0x00000000000fafcf: rol byte ptr [rax], 1; add byte ptr [rax - 0x77], cl; add al, 0x24; mov eax, 0x130; syscall; 
0x0000000000123d37: rol byte ptr [rax], 1; add byte ptr [rax], al; mov dword ptr [rbx + 0xa8], r14d; bswap r14d; call qword ptr [rax + 0x18]; 
0x000000000005e19c: rol byte ptr [rax], 1; add byte ptr [rax], al; mov eax, edx; pop rbx; ret; 
0x000000000012443e: rol byte ptr [rax], 1; add byte ptr [rax], al; mov rdi, r12; call qword ptr [rax + 0x20]; 
0x0000000000123d56: rol byte ptr [rax], 1; add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x00000000000f75d5: rol byte ptr [rax], 1; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b1507: rol byte ptr [rax], 1; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000036dd3: rol byte ptr [rax], 1; add byte ptr [rax], al; ret; 
0x00000000000fadc2: rol byte ptr [rax], cl; add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000fae82: rol byte ptr [rax], cl; add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000c09b1: rol byte ptr [rbp + 0x31], 0xd2; xor edx, edx; mov rsi, qword ptr [rsp + 8]; or rdi, 0xffffffffffffffff; mov eax, ecx; syscall; 
0x00000000000618a2: rol byte ptr [rbp + 0x31], 1; in al, 0xe9; out 0xff, eax; dec dword ptr [rbp + rcx*4 + 0x2d]; ret; 
0x00000000000ba084: rol byte ptr [rbp + 0x31], cl; fild dword ptr [rbp + 0x31]; ror byte ptr [rax - 0x7d], cl; ret; 
0x000000000008aab7: rol byte ptr [rbp + 0x480e74c0], 1; lea eax, dword ptr [rip + 0x3361bd]; mov qword ptr [rip + 0x3361a6], rax; add rsp, 8; ret; 
0x0000000000093922: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000097039: rol byte ptr [rbp + 0xfd274c0], 1; mov ebp, 0xf80148c0; ret; 
0x0000000000008958: rol byte ptr [rbp + 8], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 1; 
0x0000000000088cd9: rol byte ptr [rbp - 0x149d8a2e], 1; ror byte ptr [rcx + 0x39], 1; ret; 
0x00000000000c3615: rol byte ptr [rbp - 0x5f7af037], cl; add dword ptr [rax], eax; add bh, dh; ret; 
0x0000000000020241: rol byte ptr [rbp - 0x6af0be40], cl; ret 0x8341; 
0x000000000010beef: rol byte ptr [rbp - 0x77], 0x44; mov dword ptr [rsi*2 - 0x776b717], eax; add rsp, 8; ret; 
0x00000000000f5770: rol byte ptr [rbp - 0x77], 0xf7; mov rax, qword ptr [rbp - 0x48]; call rax; 
0x0000000000178280: rol byte ptr [rbp - 0x790f0004], 1; cld; call qword ptr [rax]; 
0x00000000000c7447: rol byte ptr [rbp - 0x7b], cl; rol byte ptr [rcx + 0xf], 0x95; ret 0x8944; 
0x00000000000577f5: rol byte ptr [rbp - 0x7b], cl; ror byte ptr [rdi], 0x9f; ret 0x9529; 
0x000000000005c89f: rol byte ptr [rbp - 0x7b], cl; ror byte ptr [rdi], cl; lahf; ret 0x9529; 
0x000000000006e492: rol byte ptr [rbx + 0x1074fff8], 1; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000011ede4: rol byte ptr [rbx + 0x2a48940d], 1; add byte ptr [rdx], al; add rsp, 0x30; lea rax, qword ptr [rip + 0x2a48a9]; pop rbx; ret; 
0x00000000000d1be7: rol byte ptr [rbx + 0x47740afb], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000012d079: rol byte ptr [rbx + 0x617401fa], 0x48; add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000cc6dd: rol byte ptr [rbx + 0xf4104f8], cl; xchg eax, esp; ret 0x8944; 
0x00000000000cd1b2: rol byte ptr [rbx + 0xf4104f8], cl; xchg eax, esp; ret 0x8b48; 
0x00000000000cd443: rol byte ptr [rbx + 0xf4104f8], cl; xchg eax, esp; ret 0xd5e9; 
0x0000000000070697: rol byte ptr [rbx + rcx*4 + 3], 0xf; xchg eax, esp; ret 0xdaf7; 
0x0000000000129c81: rol byte ptr [rbx - 0x177cfd20], 1; add rsp, 0x20; pop rbx; ret; 
0x000000000003851b: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x000000000010ab89: rol byte ptr [rbx - 0x24e6fe08], 0x83; ret; 
0x00000000000f236c: rol byte ptr [rbx - 0x3f7c0f20], 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000000fd924: rol byte ptr [rbx - 0x69f0f601], 0xc0; ret; 
0x000000000002ff51: rol byte ptr [rbx - 0x6bf07f19], 0xc0; ret; 
0x00000000000c60b4: rol byte ptr [rbx - 0x6bf0fe06], 0xc0; ret; 
0x0000000000027f2c: rol byte ptr [rbx - 0x76befb08], 1; ret; 
0x000000000003461b: rol byte ptr [rbx - 0x77cfc20], cl; add ecx, dword ptr [rdi]; xchg eax, esp; ret 0x70e9; 
0x00000000000a89fd: rol byte ptr [rbx - 0x78f0f608], 1; pushfq; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000a2f02: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000014aa77: rol byte ptr [rbx], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000114075: rol byte ptr [rbx], 0x25; cld; inc dword ptr [rcx]; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000121025: rol byte ptr [rbx], 0x83; ret 0x8303; 
0x00000000000f63d2: rol byte ptr [rbx], cl; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000000b792b: rol byte ptr [rcx + 0x29], 1; ret; 
0x000000000004b8ae: rol byte ptr [rcx + 0x39], 1; ret; 
0x00000000000f2ed3: rol byte ptr [rcx + 0x5c], 0xc3; nop word ptr [rax + rax]; mov eax, 0xeb; syscall; 
0x000000000012156a: rol byte ptr [rcx + 0x5c], 0xc3; nop; mov rax, qword ptr [rbx + 0x23b8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000005dfc1: rol byte ptr [rcx + 0x5c], 1; ret; 
0x0000000000070271: rol byte ptr [rcx + 0x5c], cl; jmp rax; 
0x000000000009415d: rol byte ptr [rcx + 0x5e], 1; ret; 
0x00000000000a1a31: rol byte ptr [rcx + 0xbfff], cl; add byte ptr [rdi], cl; popfq; ret 0xea81; 
0x00000000000800a8: rol byte ptr [rcx + 0xf], 0x94; ret; 
0x0000000000020243: rol byte ptr [rcx + 0xf], 0x95; ret 0x8341; 
0x00000000000d3ade: rol byte ptr [rcx + 0xf], 0x95; ret 0x840f; 
0x00000000000c744a: rol byte ptr [rcx + 0xf], 0x95; ret 0x8944; 
0x00000000000e2d18: rol byte ptr [rcx + 0xf], 0xb6; test dword ptr [rax + 0xf000000], esp; xchg eax, ebp; ret 0xe2c1; 
0x000000000008865d: rol byte ptr [rcx + 0xf], 1; xchg eax, esp; ret 0x8341; 
0x0000000000095550: rol byte ptr [rcx + 0xf], cl; xchg eax, ebp; ret 0x5474; 
0x00000000000ae2b8: rol byte ptr [rcx + 0xf], cl; xchg eax, ebp; ret; 
0x000000000010c57e: rol byte ptr [rcx + 0xfa], 0x80; cmovne eax, edi; ret; 
0x0000000000127f00: rol byte ptr [rcx + 5], 0; mov esi, esi; movsxd rcx, dword ptr [rax + rsi*4]; add rax, rcx; jmp rax; 
0x00000000000d3f15: rol byte ptr [rcx + rax*2], 0x39; ret 0x697e; 
0x0000000000103dba: rol byte ptr [rcx + rbp - 0x38], 1; ret; 
0x000000000002bcd9: rol byte ptr [rcx + rcx*2], 0x39; ret; 
0x00000000000ec842: rol byte ptr [rcx - 0x77], 0xca; mov edx, edx; movsxd rdi, edi; mov eax, 0x104; syscall; 
0x00000000000dad2e: rol byte ptr [rcx - 0x77], 1; ret; 
0x00000000000ed289: rol byte ptr [rcx - 0x77], cl; clc; mov rdx, rsi; mov eax, 0x11d; xor esi, esi; syscall; 
0x00000000001227bb: rol byte ptr [rcx - 0x77], cl; ror byte ptr [rcx + rcx*4 - 1], 0x89; ret; 
0x0000000000108e45: rol byte ptr [rcx - 0x78], 0x41; add dword ptr [rbp - 0x6c], esi; nop dword ptr [rax]; mov rax, rdi; pop rbx; ret; 
0x000000000009625e: rol byte ptr [rcx - 0x7d], cl; ret 0x8305; 
0x00000000000b731a: rol byte ptr [rcx - 0x7d], cl; stc; add dword ptr [rdi], ecx; sahf; ret 0x1fbf; 
0x00000000000973b2: rol byte ptr [rcx - 0x80], 0xf8; cmp eax, 0x8445f174; sal byte ptr [rbp - 0x63], 0x48; mov eax, edi; ret; 
0x000000000003d11c: rol byte ptr [rcx], 0; add byte ptr [rax - 0x73], cl; add eax, 0x386c6f; add rsp, 8; ret; 
0x00000000000a2ee2: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x00000000001aa25d: rol byte ptr [rcx], 0; nop; xchg eax, esi; cmc; jmp qword ptr [rdi + 3]; 
0x00000000000472b2: rol byte ptr [rcx], 0x39; ret 0xb87f; 
0x00000000000e3719: rol byte ptr [rcx], 0x39; ret; 
0x000000000011128e: rol byte ptr [rcx], 0x48; mov dword ptr [rbx + 0x30], eax; mov eax, 1; pop rbx; ret; 
0x00000000000d3c67: rol byte ptr [rcx], 0x83; ret 0x4001; 
0x00000000000a1897: rol byte ptr [rcx], 0x83; ret 0x4101; 
0x000000000002d2c2: rol byte ptr [rcx], 0x83; ret 0x8301; 
0x0000000000106349: rol byte ptr [rcx], 0x89; ret 0x8948; 
0x0000000000037405: rol byte ptr [rcx], 0xf7; ret 0; 
0x00000000001ab4a5: rol byte ptr [rcx], cl; add al, bl; in eax, 0xf5; call qword ptr [rax]; 
0x000000000010806c: rol byte ptr [rdi + 0x75c08507], 1; int1; pop rdx; pop r10; ret; 
0x000000000018707c: rol byte ptr [rdi - 0x78af0004], 0xfc; jmp rax; 
0x00000000000a2f42: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x00000000000d988e: rol byte ptr [rdx + 0x39], 0x34; xchg dword ptr [rbx + rbp*8 + 0x39], edi; ret 0xc189; 
0x00000000000a2ef2: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000000fa375: rol byte ptr [rdx], 1; add byte ptr [rax], al; pop rax; pop rdi; call rax; 
0x00000000000c1cf6: rol byte ptr [rdx], 1; add byte ptr [rax], al; ret; 
0x00000000000c0ed2: rol byte ptr [rdx], 1; add byte ptr [rax], al; xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x000000000011adc8: rol byte ptr [rdx], 8; add al, ch; out dx, eax; outsb dx, byte ptr [rsi]; cli; jmp qword ptr [rsi - 0x77]; 
0x000000000015e7ca: rol byte ptr [rdx], cl; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000000542a1: rol byte ptr [rip + 0x107], 0x89; add bh, byte ptr [rax + 1]; ret; 
0x0000000000186834: rol byte ptr [rip + 0x7b0fffc], 1; cld; call qword ptr [rax + 0x70fffc09]; or edi, esp; call qword ptr [rax + 0xd]; 
0x00000000000a2f32: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x00000000001868b8: rol byte ptr [rsi], 1; cld; push qword ptr [rax - 0x6f0003f8]; or bh, ah; jmp qword ptr [rax + 0xc]; 
0x00000000001a6350: rol ch, 0xf4; call qword ptr [rax + 5]; 
0x0000000000172900: rol cl, 0xc2; ret; 
0x0000000000037627: rol cl, 0xe9; add esi, esi; ret 0xf304; 
0x00000000000b21d6: rol cl, 1; clc; add eax, 0x89d02944; ret; 
0x00000000000b23cb: rol cl, 1; clc; add eax, 0xfd02944; scasd eax, dword ptr [rdi]; ret; 
0x0000000000111061: rol dh, 2; add byte ptr [rcx + 0x5c], al; ret; 
0x00000000000a2e8c: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x00000000000009ef: rol dword ptr [rax + 0x4260a120], cl; ret 0x4021; 
0x000000000003649f: rol dword ptr [rax + 0x7110ff3], 0x74; or ah, byte ptr [rip - 0x80000000]; movd xmm0, eax; ret; 
0x00000000000d40c7: rol dword ptr [rax], 0; add byte ptr [rcx - 0x7d], cl; ret 0x4c01; 
0x000000000019a36d: rol dword ptr [rax], 0; mov al, 0x25; out dx, al; jmp qword ptr [rax]; 
0x0000000000188a25: rol dword ptr [rax], 0; push rdi; in eax, dx; lcall ptr [rcx + rax*8 + 0x57d40000]; in eax, dx; call rsp; 
0x000000000019a385: rol dword ptr [rax], 0; sub byte ptr [rax], ch; out dx, al; call qword ptr [rsi]; 
0x0000000000121225: rol dword ptr [rax], 1; add byte ptr [rax - 0x75], cl; and al, 0x18; mov esi, r13d; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x0000000000116d57: rol dword ptr [rax], 1; ror byte ptr [rax - 0x73], 5; pop rdi; ret 0x2a; 
0x000000000012a027: rol dword ptr [rax], 1; ror byte ptr [rax - 0x7d], 0xda; add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0x4812; 
0x0000000000115924: rol dword ptr [rax], 1; ror byte ptr [rax - 0x7d], 0xda; add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0xe801; 
0x00000000000fad32: rol dword ptr [rax], cl; add byte ptr [rax - 0x77], cl; add al, 0x24; mov r10, rcx; mov eax, 0x113; syscall; 
0x0000000000096f57: rol dword ptr [rbp + 0x317475c0], -0x40; ret; 
0x00000000000f31aa: rol dword ptr [rbp + 0x49e575d2], 1; mov ecx, esi; mov byte ptr [r9 - 1], 0; ret; 
0x000000000016213f: rol dword ptr [rbp + 0x661075c0], cl; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000096f1a: rol dword ptr [rbp + 0x7d850fc0], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008bd76: rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000091ae9: rol dword ptr [rbx + 0x634807e1], 1; or al, 0x88; add rax, rcx; jmp rax; 
0x000000000012e404: rol dword ptr [rbx + 0x7402007d], 1; sub eax, 0x10c48348; pop rbx; pop rbp; pop r12; ret; 
0x0000000000112592: rol dword ptr [rbx - 0x20343], -1; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xd120; 
0x0000000000126a7b: rol dword ptr [rbx - 0x3f7a0001], 0xf; test byte ptr [rdx + 1], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x58]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000f0874: rol dword ptr [rcx + 0x5c], 0x44; mov eax, ecx; pop r13; ret; 
0x000000000005fe6b: rol dword ptr [rcx + 0xf], -0x4a; or al, 0x89; ret 0xeac0; 
0x00000000000e347d: rol dword ptr [rcx + 0xf], 1; xchg eax, ebx; ret 0x944; 
0x00000000000ebf6f: rol dword ptr [rcx], 0; mov qword ptr [rsp], rax; mov eax, 0x55; syscall; 
0x00000000000d7769: rol dword ptr [rcx], 0x39; ret 0xd675; 
0x0000000000049b6a: rol dword ptr [rcx], 0xf; mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x00000000001ab4bd: rol dword ptr [rcx], cl; add al, dl; in eax, 0xf5; jmp rbx; 
0x0000000000173e8a: rol dword ptr [rdi + 0x42923bbd], 1; jmp qword ptr [rdx - 0x71]; 
0x000000000009ef19: rol dword ptr [rdi], cl; add byte ptr [rax], al; ret; 
0x000000000005dba3: rol dword ptr [rdx], 0x36; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000117ef6: rol dword ptr [rdx], 0x41; mov dword ptr [rax], edi; mov qword ptr [r9], rcx; ret; 
0x000000000018d9fd: rol dword ptr [rdx], 1; add byte ptr [rsi + rbp*2], ah; cli; jmp rsp; 
0x00000000000ebf6e: rol dword ptr cs:[rcx], 0; mov qword ptr [rsp], rax; mov eax, 0x55; syscall; 
0x000000000014acb9: rol eax, cl; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000377d5: rol eax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000014a9b9: rol ebx, cl; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000107d63: rol ecx, 1; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000009ee: rol qword ptr [rax + 0x4260a120], cl; ret 0x4021; 
0x00000000000377d4: rol rax, cl; and qword ptr [rdi], rax; xor eax, eax; ret; 
0x000000000018679c: ror al, 0xfb; call qword ptr [rax]; 
0x000000000010c552: ror ax, 8; ret; 
0x000000000003ba28: ror byte ptr [r15], 0x84; ret 1; 
0x000000000002ef7f: ror byte ptr [r8 - 0x73], 1; add eax, 0x390c98; mov byte ptr [rip + 0x390cef], dl; ret; 
0x000000000010acd5: ror byte ptr [r8 - 0x77], 1; adc eax, 0x2b7ae2; pop rbp; ret; 
0x0000000000147f8f: ror byte ptr [r8 - 0x7d], 0xef; lea r11, qword ptr [rip + 0x3e9f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001455bf: ror byte ptr [r8 - 0x7d], 0xef; lea r11, qword ptr [rip + 0x41204]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142bef: ror byte ptr [r8 - 0x7d], 0xef; lea r11, qword ptr [rip + 0x43a14]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000375f4: ror byte ptr [rax + 0x21], 1; add al, 0xd7; xor eax, eax; ret; 
0x00000000000377d6: ror byte ptr [rax + 0x21], 7; xor eax, eax; ret; 
0x0000000000036112: ror byte ptr [rax + 0x21], cl; ret 0x4866; 
0x0000000000088b5f: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000000fbbf5: ror byte ptr [rax + 0x39], 0xca; cmovae rax, rsi; ret; 
0x0000000000107a78: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000001ff5c: ror byte ptr [rax + 0x39], 1; fidiv dword ptr [rdx + rdx*8 + 0x49]; movsxd rdi, ebp; mov eax, 3; syscall; 
0x000000000003945f: ror byte ptr [rax + 0x39], 1; ret 0x8948; 
0x0000000000038f77: ror byte ptr [rax + 0x39], 1; ret 0x8949; 
0x00000000000b0c2f: ror byte ptr [rax + 0x39], 1; ret 0x9e0f; 
0x0000000000082352: ror byte ptr [rax + 0x39], 1; ret; 
0x000000000002619a: ror byte ptr [rax + 0x39], cl; ret; 
0x0000000000097a7b: ror byte ptr [rax + 0x48c07503], 0x83; ret; 
0x0000000000108bba: ror byte ptr [rax + 0x48e97507], 0x89; clc; ret; 
0x00000000000eb61b: ror byte ptr [rax + 0x63], 0x54; and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; syscall; 
0x00000000000b1006: ror byte ptr [rax + 0x63], 0x84; and al, 0x18; add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000ece35: ror byte ptr [rax + 0x63], 0xd2; movsxd rdi, edi; mov eax, 0x109; syscall; 
0x00000000000c2778: ror byte ptr [rax + 0x63], 1; test byte ptr [rdi], 0x1f; add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x00000000000c7c16: ror byte ptr [rax + 0x63], 4; xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x00000000000b4c6a: ror byte ptr [rax + 0x63], cl; adc al, 0x97; add rdx, rdi; jmp rdx; 
0x00000000000cb376: ror byte ptr [rax + 0x63], cl; dec dword ptr [rcx + 0xf]; int1; mov eax, ecx; syscall; 
0x00000000000cb639: ror byte ptr [rax + 0xf], 0x44; adc al, 0x24; add rsp, 0x18; mov rax, rdx; ret; 
0x0000000000046ec5: ror byte ptr [rax + 0xf], 0x44; ret; 
0x000000000010acd2: ror byte ptr [rax + 0xf], 0x45; ror byte ptr [rax - 0x77], 1; adc eax, 0x2b7ae2; pop rbp; ret; 
0x0000000000107a72: ror byte ptr [rax + 0xf], 0x45; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000000f794e: ror byte ptr [rax + 0xf], 0x48; ret 0xc148; 
0x00000000000970a3: ror byte ptr [rax + 1], 0xf8; add rax, r8; ret; 
0x00000000000937fc: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x000000000008a709: ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000117ec3: ror byte ptr [rax + 1], 1; xlatb; mov qword ptr [r9], rdi; ret; 
0x00000000000a5509: ror byte ptr [rax + 1], cl; ret 0xe974; 
0x0000000000088b5c: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x0000000000054e1f: ror byte ptr [rax + 3], 1; test dword ptr [rax - 0x7c000002], eax; ret 0x8908; 
0x000000000004bf1c: ror byte ptr [rax + 3], 1; test dword ptr [rax - 0x7c000005], esi; ret 0x8908; 
0x000000000004bf8c: ror byte ptr [rax + 3], 1; test dword ptr [rax - 0x7c000005], esi; ret 0x8910; 
0x0000000000093b05: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x000000000003c8ca: ror byte ptr [rax + 9], 0xd0; ret; 
0x0000000000097ace: ror byte ptr [rax - 0x1b8a00bd], 0xeb; mov ah, 0x66; nop dword ptr cs:[rax + rax]; mov rax, rbx; pop rbx; ret; 
0x000000000008bf85: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x00000000000b5122: ror byte ptr [rax - 0x46], 1; ret; 
0x00000000000b0483: ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x0000000000088693: ror byte ptr [rax - 0x73], 0x35; and eax, 0xf000efa; xchg eax, esi; ret 0x144; 
0x00000000000c2690: ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x000000000008bdc2: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x000000000008bdf2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x0000000000096f92: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dh; ret; 
0x000000000008bde2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x00000000000f3bd2: ror byte ptr [rax - 0x73], 0x65; call 0x416b7d36; pop rbp; pop rbp; ret; 
0x0000000000157023: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000000986b0: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13; 
0x000000000015705f: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000014a6bb: ror byte ptr [rax - 0x73], 0x7f; ror byte ptr [rax - 0x7d], 0xea; lea r11, qword ptr [rip + 0x3c2c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000002ef80: ror byte ptr [rax - 0x73], 1; add eax, 0x390c98; mov byte ptr [rip + 0x390cef], dl; ret; 
0x00000000000b5fc5: ror byte ptr [rax - 0x73], 1; add eax, 0xc2efb; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000b5300: ror byte ptr [rax - 0x73], 1; add eax, 0xc3ae4; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x000000000010ad3c: ror byte ptr [rax - 0x73], 1; cmp eax, 0xfffffe8c; call rax; 
0x0000000000116d59: ror byte ptr [rax - 0x73], 5; pop rdi; ret 0x2a; 
0x00000000000f057c: ror byte ptr [rax - 0x75], 0x54; and al, 0x10; movsxd rsi, dword ptr [rsp + 0xc]; movsxd rdi, dword ptr [rsp + 8]; mov eax, ebx; syscall; 
0x00000000000f125e: ror byte ptr [rax - 0x75], 0x74; and al, 0x10; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x13; syscall; 
0x00000000000f12fe: ror byte ptr [rax - 0x75], 0x74; and al, 0x10; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x14; syscall; 
0x0000000000123d84: ror byte ptr [rax - 0x75], 0x74; and al, 0x28; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x0000000000123f7b: ror byte ptr [rax - 0x75], 0x74; and al, 0x40; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000036fa5: ror byte ptr [rax - 0x75], 0x7c; and al, 8; mov eax, 0x82; syscall; 
0x0000000000036651: ror byte ptr [rax - 0x75], cl; add eax, 0x38780f; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret; 
0x0000000000085d2e: ror byte ptr [rax - 0x77], 0x15; pop rdx; scasb al, byte ptr [rdi]; xor eax, dword ptr [rax]; add rsp, 0x18; ret; 
0x00000000000382a3: ror byte ptr [rax - 0x77], 0x34; ror dword ptr [rax - 0x7d], -0x40; add dword ptr [rax + 0x39], ecx; sal byte ptr [rbp - 0x11], 1; xor eax, eax; ret; 
0x0000000000096bd9: ror byte ptr [rax - 0x77], 0xa; ret; 
0x00000000001245d8: ror byte ptr [rax - 0x77], 0xd6; add rdi, 0x10; jmp rcx; 
0x00000000001245f8: ror byte ptr [rax - 0x77], 0xd6; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x0000000000127ec8: ror byte ptr [rax - 0x77], 0xd6; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x0000000000127618: ror byte ptr [rax - 0x77], 0xd6; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x0000000000123a38: ror byte ptr [rax - 0x77], 0xd6; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x000000000010abc2: ror byte ptr [rax - 0x77], 0xe5; pop rbp; ret; 
0x00000000000372c2: ror byte ptr [rax - 0x77], 0xf7; rep stosq qword ptr [rdi], rax; mov rdi, rsp; call 0x36f60; add rsp, 0x88; ret; 
0x000000000003cd28: ror byte ptr [rax - 0x77], 0xf; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000010acd6: ror byte ptr [rax - 0x77], 1; adc eax, 0x2b7ae2; pop rbp; ret; 
0x000000000008169c: ror byte ptr [rax - 0x77], 1; or byte ptr [r8 - 0x7d], cl; sub r9, qword ptr [rax]; add ebx, ebp; ret; 
0x0000000000050d2f: ror byte ptr [rax - 0x77], 1; ret 0x48e8; 
0x000000000003d39a: ror byte ptr [rax - 0x77], 1; ret 0x8966; 
0x00000000000792a5: ror byte ptr [rax - 0x77], 1; ret 0x8b48; 
0x00000000000b3e65: ror byte ptr [rax - 0x77], 1; ret 0x8d48; 
0x0000000000035499: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x00000000000857bc: ror byte ptr [rax - 0x77], 1; ret; 
0x0000000000127746: ror byte ptr [rax - 0x77], 2; mov eax, 1; ret; 
0x000000000012e87e: ror byte ptr [rax - 0x77], 3; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x00000000000f4baf: ror byte ptr [rax - 0x77], 3; setne al; movzx eax, al; pop rbx; ret; 
0x000000000012d55b: ror byte ptr [rax - 0x77], 4; and al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000000f3645: ror byte ptr [rax - 0x77], 5; movabs dword ptr [0x8811174002cdf], eax; add byte ptr [rax], 0; mov eax, 1; add rsp, 8; ret; 
0x000000000010e3f7: ror byte ptr [rax - 0x77], 5; xchg eax, ecx; adc eax, 0x8948002b; ret 0xb9; 
0x0000000000037d95: ror byte ptr [rax - 0x77], cl; fidivr word ptr [rax + 0x80]; syscall; 
0x0000000000070323: ror byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000086080: ror byte ptr [rax - 0x77], cl; push rbp; add byte ptr [rcx + rdi*2 + 0x48], dh; mov esi, ebx; mov rdi, r13; call rdx; 
0x0000000000070694: ror byte ptr [rax - 0x7b], cl; rol byte ptr [rbx + rcx*4 + 3], 0xf; xchg eax, esp; ret 0xdaf7; 
0x0000000000097a54: ror byte ptr [rax - 0x7bf0fdbd], 0x9a; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; mov byte ptr [rdi + rcx], 0xb6; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000f4b0d: ror byte ptr [rax - 0x7d], 0x3e; add byte ptr [rsi + rbx + 0x5b], dh; ret; 
0x0000000000101f98: ror byte ptr [rax - 0x7d], 0x7b; sub byte ptr [rax], al; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x000000000010826f: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; and eax, 0xc; pop r12; ret; 
0x000000000003ce44: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000012e089: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx - 0x3d], bl; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x0000000000121a29: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx - 0x3d], bl; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x0000000000075acf: ror byte ptr [rax - 0x7d], 0xc4; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000ecdf0: ror byte ptr [rax - 0x7d], 0xc4; movzx rax, al; ret; 
0x000000000003cee0: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000003c23d: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000122877: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0xf], bl; mov dh, 0xc0; pop rbp; ret; 
0x0000000000022ca3: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000000465b4: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000001273d4: ror byte ptr [rax - 0x7d], 0xc4; or cl, ch; adc bl, byte ptr [rbx - 0xc]; jmp qword ptr [rsi - 0x70]; 
0x0000000000135dbd: ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x0000000000125fcc: ror byte ptr [rax - 0x7d], 0xc4; pop rbx; pop rbp; movzx eax, al; pop r12; ret; 
0x00000000001298f8: ror byte ptr [rax - 0x7d], 0xc4; pop rbx; pop rbp; ret; 
0x0000000000051809: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000005db44: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000012e7c7: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000000e5826: ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000113743: ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000012d0d3: ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0xf], bl; mov dh, 0xc0; pop rbp; ret; 
0x00000000000e4046: ror byte ptr [rax - 0x7d], 0xc7; add ah, byte ptr [rsi - 0x77]; inc byte ptr [r11 + 0x37401e2]; mov byte ptr [rdi], 0; xor eax, eax; ret; 
0x000000000012a029: ror byte ptr [rax - 0x7d], 0xda; add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0x4812; 
0x0000000000115926: ror byte ptr [rax - 0x7d], 0xda; add ecx, dword ptr [rax + 0x29]; fimul dword ptr [rax - 0x7d]; ret 0xe801; 
0x0000000000096ff2: ror byte ptr [rax - 0x7d], 0xea; adc byte ptr [rax + 1], cl; ret 0x147c; 
0x0000000000096fd2: ror byte ptr [rax - 0x7d], 0xea; and byte ptr [rax + 1], cl; ret 0x347c; 
0x000000000014a6bf: ror byte ptr [rax - 0x7d], 0xea; lea r11, qword ptr [rip + 0x3c2c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a5ff: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, qword ptr [rip + 0x3c382]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147b3b: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, qword ptr [rip + 0x3ec86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014516b: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, qword ptr [rip + 0x41496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000096fb2: ror byte ptr [rax - 0x7d], 0xea; xor byte ptr [rax + 1], cl; ret 0x547c; 
0x0000000000147f90: ror byte ptr [rax - 0x7d], 0xef; lea r11, qword ptr [rip + 0x3e9f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001455c0: ror byte ptr [rax - 0x7d], 0xef; lea r11, qword ptr [rip + 0x41204]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142bf0: ror byte ptr [rax - 0x7d], 0xef; lea r11, qword ptr [rip + 0x43a14]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000c2b6f: ror byte ptr [rax - 0x7d], 1; cli; push qword ptr [rdx + rbx*8 + 0x49]; movsxd rdi, esp; mov eax, 3; syscall; 
0x000000000012e77c: ror byte ptr [rax - 0x7d], 1; in al, dx; or byte ptr [rax - 0x77], 0xd0; pop rbx; ret; 
0x000000000003c310: ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000050a2f: ror byte ptr [rax - 0x7d], 1; ret 0x4803; 
0x000000000010c6ed: ror byte ptr [rax - 0x7d], 1; ret 0xf01; 
0x000000000003f526: ror byte ptr [rax - 0x7d], 1; ret; 
0x0000000000071948: ror byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rdi]; xchg eax, esp; ret 0xdaf7; 
0x00000000000eb583: ror byte ptr [rax - 0x7d], cl; in al, dx; jo 0xeb57f; ret 0x4840; 
0x00000000000296da: ror byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x00000000000285e7: ror byte ptr [rax - 0x7d], cl; ret 0x4806; 
0x000000000009d526: ror byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000047d40: ror byte ptr [rax - 0x7d], cl; ret; 
0x00000000000e4bb5: ror byte ptr [rax - 0x7d], cl; ror dword ptr [rax], -0x73; add dword ptr [rax - 0x7d], ecx; jns 0xe4bb9; add byte ptr [rsp + rax - 0x77], dh; ret 0xeeeb; 
0x00000000000885cb: ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000037091: ror byte ptr [rax - 0x7f], 0xc4; cwde; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000002c268: ror byte ptr [rax - 0x7f], 0xc4; nop; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000f1bc9: ror byte ptr [rax - 0x7f], 0xc4; nop; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000885c8: ror byte ptr [rax - 1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000000885c5: ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000001b2a50: ror byte ptr [rax - 9], 1; jmp qword ptr [rsi]; 
0x00000000000738ba: ror byte ptr [rax - 9], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a6e42: ror byte ptr [rax], 0x83; ret 0x4801; 
0x000000000008aa64: ror byte ptr [rax], cl; leave; cmove rax, rdx; ret; 
0x0000000000094ece: ror byte ptr [rbp + 0x29], cl; ret 0x8b46; 
0x0000000000066678: ror byte ptr [rbp + 1], 1; ret 0x8d4a; 
0x00000000000a078b: ror byte ptr [rbp + rcx*4 + 0x1d], cl; add dword ptr [rax + 0x6349000d], eax; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe0b: ror byte ptr [rbp + rcx*4 + 0x1d], cl; add dword ptr [rcx + 0x6349000d], ecx; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e32b: ror byte ptr [rbp + rcx*4 + 0x1d], cl; add dword ptr [rdx + 0x6349000d], esp; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe43: ror byte ptr [rbp + rcx*4 + 0x1d], cl; leave; mov byte ptr [rip + 0xc634900], cl; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e363: ror byte ptr [rbp + rcx*4 + 0x1d], cl; leave; movabs eax, dword ptr [0x8d49930c6349000d]; or al, 0xb; jmp rcx; 
0x000000000009fdc9: ror byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr [rip + 0xc634900], ecx; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fde6: ror byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr es:[rip + 0xc634900], ecx; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e2e9: ror byte ptr [rbp + rcx*4 + 0x1d], cl; movabs byte ptr [0x8d49930c6349000d], al; or al, 0xb; jmp rcx; 
0x000000000009e306: ror byte ptr [rbp + rcx*4 + 0x1d], cl; movabs byte ptr es:[0x8d49930c6349000d], al; or al, 0xb; jmp rcx; 
0x00000000000a0749: ror byte ptr [rbp + rcx*4 + 0x1d], cl; or byte ptr [rip + 0xc634900], 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0766: ror byte ptr [rbp + rcx*4 + 0x1d], cl; or byte ptr es:[rip + 0xc634900], 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3cf: ror byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rax + 0x6349000d], esi; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3a6: ror byte ptr [rbp + rcx*4 + 0x1d], cl; xor dh, byte ptr [rax + 0x6349000d]; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000004733a: ror byte ptr [rbp - 0x75], 1; add byte ptr [rcx + rcx*4 + 0x47], cl; push -0x9617; jmp qword ptr [rsi + 0xf]; 
0x0000000000048f04: ror byte ptr [rbp - 0x7b], cl; dec dword ptr [rdi]; xchg eax, ebp; ret 0xc031; 
0x00000000000a5464: ror byte ptr [rbp - 0x7bf0febe], 1; ret 0; 
0x00000000001312f7: ror byte ptr [rbx + 0x453b0840], cl; or byte ptr [rdi], 0x94; ret 0xea83; 
0x00000000000d1b07: ror byte ptr [rbx + rcx*4 + 0x15], 1; int1; ret 0x2e; 
0x00000000000fb3ef: ror byte ptr [rbx - 0x2f], 0x48; movsxd rdi, edi; mov eax, 0x2c; syscall; 
0x00000000000fb27f: ror byte ptr [rbx - 0x2f], 0x48; movsxd rdi, edi; mov eax, 0x2d; syscall; 
0x00000000000cc6cd: ror byte ptr [rbx - 0x72be4fbb], 0x58; add cl, byte ptr [rcx - 0xdf63]; inc dword ptr [rbp + 0x31]; rol byte ptr [rbx + 0xf4104f8], cl; xchg eax, esp; ret 0x8944; 
0x0000000000187254: ror byte ptr [rbx - 0x74af0004], 0xfc; jmp rax; 
0x0000000000186904: ror byte ptr [rbx], 1; cld; call rax; 
0x00000000000f13a2: ror byte ptr [rcx + 0x29], cl; fimul dword ptr [rcx + 0x39]; ret 0x820f; 
0x000000000008a643: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000f3c77: ror byte ptr [rcx + 0x2cda9235], cl; add byte ptr [rax + rcx - 9], dh; ret 0xfc07; 
0x00000000000eb18f: ror byte ptr [rcx + 0x39], 1; ret 0x1b75; 
0x0000000000088cdf: ror byte ptr [rcx + 0x39], 1; ret; 
0x0000000000135247: ror byte ptr [rcx + 0x487478c5], 0x8b; add eax, 0x28a63d; call qword ptr [rax + 0x28]; 
0x00000000000a3877: ror byte ptr [rcx + 0x48c47503], 0x83; ret; 
0x00000000000f1571: ror byte ptr [rcx + 0x63], 0xd4; mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x127; syscall; 
0x00000000000f17d1: ror byte ptr [rcx + 0x63], 0xd4; mov rsi, rbp; movsxd rdi, ebx; mov eax, 0x128; syscall; 
0x0000000000118749: ror byte ptr [rcx + 0x63], 0xfe; mov eax, 3; syscall; 
0x000000000001ff61: ror byte ptr [rcx + 0x63], cl; std; mov eax, 3; syscall; 
0x00000000000b3673: ror byte ptr [rcx + rcx*4 + 0x15], 0xa5; fdiv dword ptr [rax]; add byte ptr [rcx - 0x76dbdbbc], cl; ret; 
0x0000000000053854: ror byte ptr [rcx + rcx*4 + 0x2f], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x000000000011dfdd: ror byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rbp; mov rcx, r13; call rbx; 
0x000000000006f75a: ror byte ptr [rcx + rcx*4 - 0x32], cl; mov eax, r8d; syscall; 
0x00000000001227be: ror byte ptr [rcx + rcx*4 - 1], 0x89; ret; 
0x0000000000122444: ror byte ptr [rcx - 0x1976b33e], 1; call qword ptr [rbp + 0x40]; 
0x0000000000121f4c: ror byte ptr [rcx - 0x1976b33e], 1; call qword ptr [rbx + 0x40]; 
0x0000000000036734: ror byte ptr [rcx - 0x24efdbbc], 1; insb byte ptr [rdi], dx; and al, 8; ret; 
0x000000000007b42f: ror byte ptr [rcx - 0x3b7cb7ed], 1; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000012d53a: ror byte ptr [rcx - 0x3b7cb7fd], 0x10; mov eax, 1; pop rbx; ret; 
0x000000000008a88c: ror byte ptr [rcx - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, qword ptr [rcx + rsi]; ret; 
0x0000000000036a6e: ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x00000000001176e4: ror byte ptr [rcx - 0x76b7f3a9], 0x3e; ret; 
0x0000000000123bf1: ror byte ptr [rcx - 0x77], 0; mov eax, 1; ret; 
0x00000000000b084c: ror byte ptr [rcx - 0x77], 1; ret 0x8948; 
0x0000000000136c17: ror byte ptr [rcx - 0x77], 4; and al, 0x74; ficomp dword ptr [rbx + 0x5d]; xor eax, eax; pop r12; ret; 
0x0000000000086321: ror byte ptr [rcx - 0x77], 4; and al, 0xf; test byte ptr [rax + rax - 0x76b80000], ah; out dx, al; mov rdi, rbx; call rax; 
0x000000000007416d: ror byte ptr [rcx - 0x7cb78bbd], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000e4161: ror byte ptr [rcx - 0x7cb7fbab], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000009d10f: ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x00000000000954c7: ror byte ptr [rcx - 0x7d], 1; ret 0xe901; 
0x0000000000092180: ror byte ptr [rcx - 0x7d], 1; ret; 
0x00000000000a3810: ror byte ptr [rcx - 0xc0c8af0], cl; ret; 
0x000000000013536f: ror byte ptr [rcx], 0xc6; movsxd rdi, r12d; mov eax, 3; syscall; 
0x00000000000fa4fc: ror byte ptr [rcx], 0xf8; ret; 
0x000000000008c779: ror byte ptr [rdi + rcx + 0x47], 1; ret 0x894c; 
0x0000000000036cb2: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000007d61c: ror byte ptr [rdi], 0x1f; add bl, dh; ret; 
0x00000000000c1cdc: ror byte ptr [rdi], 0x1f; add byte ptr [rbp - 0x13], dh; mov ecx, 0x27; mov eax, ecx; syscall; 
0x000000000012f7e3: ror byte ptr [rdi], 0x1f; add byte ptr [rcx - 0x75], cl; push rsi; sbb byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8b41; 
0x00000000000f1aa7: ror byte ptr [rdi], 0x49; adc al, 0x24; add rsp, 0x18; mov eax, edx; ret; 
0x0000000000048e04: ror byte ptr [rdi], 0x84; add al, 0; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x0000000000094301: ror byte ptr [rdi], 0x84; add byte ptr [rcx], 0; add byte ptr [rax - 0x77], cl; ret 0x894c; 
0x0000000000126a80: ror byte ptr [rdi], 0x84; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; and al, 0x58; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000a60ef: ror byte ptr [rdi], 0x84; and al, byte ptr [rip + 0x7c830000]; and al, 8; adc byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0xf983; 
0x000000000011f4a3: ror byte ptr [rdi], 0x84; fadd qword ptr [rax]; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x20]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000121702: ror byte ptr [rdi], 0x84; fld dword ptr [rax]; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbx]; 
0x0000000000118740: ror byte ptr [rdi], 0x84; mov ecx, 0x45000000; xor eax, eax; movsxd rdi, r14d; mov eax, 3; syscall; 
0x0000000000126059: ror byte ptr [rdi], 0x84; movabs dword ptr [0x824448b49fffffe], eax; mov rsi, rsp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x00000000000dde42: ror byte ptr [rdi], 0x84; ret 0; 
0x000000000003ba29: ror byte ptr [rdi], 0x84; ret 1; 
0x00000000000e0269: ror byte ptr [rdi], 0x84; ret 5; 
0x000000000003ba36: ror byte ptr [rdi], 0x84; ret; 
0x000000000015702a: ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000000ab44d: ror byte ptr [rdi], 0x85; call qword ptr [rsi]; 
0x00000000000952e3: ror byte ptr [rdi], 0x85; cmpsb byte ptr [rsi], byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000015ed22: ror byte ptr [rdi], 0x85; cmpsd dword ptr [rsi], dword ptr [rdi]; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000015ecdc: ror byte ptr [rdi], 0x85; in eax, dx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000008bd78: ror byte ptr [rdi], 0x85; mov cl, 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000096eab: ror byte ptr [rdi], 0x85; mov esi, 0x66000000; pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret; 
0x0000000000064cb6: ror byte ptr [rdi], 0x85; outsd dx, dword ptr [rsi]; sub byte ptr [rax], al; add byte ptr [rbx - 0x10f6b], cl; inc dword ptr [rbx - 0x7cf0cf06]; ret; 
0x000000000009bd71: ror byte ptr [rdi], 0x85; pop rax; or dword ptr [rax], eax; add cl, ch; ret; 
0x00000000000986b7: ror byte ptr [rdi], 0x85; ret 0x13; 
0x00000000000d69a1: ror byte ptr [rdi], 0x85; ret 2; 
0x000000000009a386: ror byte ptr [rdi], 0x85; ret; 
0x00000000000adc1a: ror byte ptr [rdi], 0x85; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000001349c0: ror byte ptr [rdi], 0x88; or dword ptr [rax + rax], eax; add byte ptr [rax + 0x63], cl; std; mov eax, 3; syscall; 
0x0000000000131f67: ror byte ptr [rdi], 0x88; ret 0; 
0x000000000006f8ff: ror byte ptr [rdi], 0x88; ret 1; 
0x00000000001306af: ror byte ptr [rdi], 0x89; ret; 
0x00000000000c233f: ror byte ptr [rdi], 0x92; ret 0xd029; 
0x000000000012959f: ror byte ptr [rdi], 0x94; ret 0x3d83; 
0x00000000000b0d8c: ror byte ptr [rdi], 0x94; ret 0x8840; 
0x0000000000021e85: ror byte ptr [rdi], 0x94; ret 0x8d48; 
0x00000000000b0e6c: ror byte ptr [rdi], 0x94; ret 0x943a; 
0x000000000013caae: ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000005b8d1: ror byte ptr [rdi], 0x94; ret 0xd189; 
0x00000000000ecded: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; movzx rax, al; ret; 
0x00000000000465b1: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000005db41: ror byte ptr [rdi], 0x94; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000036a68: ror byte ptr [rdi], 0x94; ror byte ptr [rdi], 0xb6; ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x0000000000076ea1: ror byte ptr [rdi], 0x95; ret 0x60e9; 
0x00000000001228fd: ror byte ptr [rdi], 0x95; ret 0x8348; 
0x0000000000121b02: ror byte ptr [rdi], 0x95; ret 0xd089; 
0x0000000000076e06: ror byte ptr [rdi], 0x95; ret 0xd284; 
0x000000000006de95: ror byte ptr [rdi], 0x95; ret 0xdaf7; 
0x00000000000a44f1: ror byte ptr [rdi], 0x95; ret 0xf883; 
0x000000000001f912: ror byte ptr [rdi], 0x95; ret; 
0x0000000000122874: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0xf], bl; mov dh, 0xc0; pop rbp; ret; 
0x0000000000022ca0: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000012291a: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000012d0d0: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0xf], bl; mov dh, 0xc0; pop rbp; ret; 
0x00000000001215d8: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000005db78: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbx; ret; 
0x00000000000577f8: ror byte ptr [rdi], 0x9f; ret 0x9529; 
0x00000000000b0480: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000c268d: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x0000000000121a8c: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000012e086: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx - 0x3d], bl; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax + 0x40]; 
0x0000000000121a26: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx - 0x3d], bl; mov rax, qword ptr [rdi + 8]; mov rsi, rsp; call qword ptr [rax]; 
0x00000000001215db: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000012dd4a: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000036a6b: ror byte ptr [rdi], 0xb6; ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x0000000000101e8f: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbx; pop rbp; pop r12; ret; 
0x000000000005db7b: ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbx; ret; 
0x00000000000ed3ea: ror byte ptr [rdi], 0xb6; shr byte ptr [rcx], cl; sal bl, 1; ret; 
0x00000000001867e8: ror byte ptr [rdi], 0xfc; inc eax; adc esp, edi; call qword ptr [rax + 4]; 
0x00000000001867e8: ror byte ptr [rdi], 0xfc; inc eax; adc esp, edi; call qword ptr [rax + 4]; cld; call qword ptr [rax]; 
0x000000000018690c: ror byte ptr [rdi], 1; cld; inc dword ptr [rax - 0x3f000417]; in eax, dx; sti; call qword ptr [rax]; 
0x00000000000b228e: ror byte ptr [rdi], 1; scasd eax, dword ptr [rdi]; ret 0x67ba; 
0x00000000000b23d1: ror byte ptr [rdi], 1; scasd eax, dword ptr [rdi]; ret; 
0x00000000000499fe: ror byte ptr [rdi], 1; xchg eax, ebx; ret 0x841; 
0x000000000005c8a2: ror byte ptr [rdi], cl; lahf; ret 0x9529; 
0x000000000009703d: ror byte ptr [rdi], cl; mov ebp, 0xf80148c0; ret; 
0x00000000000c8a42: ror byte ptr [rdi], cl; test byte ptr [rbx + rsi*8 + 0x2ae9ffff], al; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000088c12: ror byte ptr [rdi], cl; test byte ptr [rdi + 0x48000000], dl; bsf eax, edx; ret; 
0x00000000000fc275: ror byte ptr [rdi], cl; test dword ptr [rdi + rdi*8 - 1], eax; dec dword ptr [rcx + rcx*4 - 0x31]; mov eax, 3; syscall; 
0x00000000000ff86f: ror byte ptr [rdi], cl; test edx, eax; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000ff93f: ror byte ptr [rdi], cl; test edx, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000b0f49: ror byte ptr [rdi], cl; xchg eax, ebp; ret 0xb60f; 
0x00000000000daf80: ror byte ptr [rdi], cl; xchg eax, ebp; ret 0xc209; 
0x00000000000b0bc2: ror byte ptr [rdi], cl; xchg eax, ebp; ret 0xd138; 
0x00000000000e61de: ror byte ptr [rdi], cl; xchg eax, ebp; ret; 
0x000000000012d558: ror byte ptr [rdi], cl; xchg eax, ebp; ror byte ptr [rax - 0x77], 4; and al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000001295d2: ror byte ptr [rdi], cl; xchg eax, ebp; sal bh, 0xd8; add rsp, 0x20; pop rbx; ret; 
0x0000000000085b9d: ror byte ptr [rdi], cl; xchg eax, esp; ret; 
0x00000000001617fa: ror byte ptr [rdx + rax], cl; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000178370: ror byte ptr [rdx - 0xe], 0xff; ror byte ptr [rdx - 0xe], 1; jmp rax; 
0x0000000000178374: ror byte ptr [rdx - 0xe], 1; jmp rax; 
0x00000000001867e4: ror byte ptr [rip + 0xfc0fffc], 0xfc; inc eax; adc esp, edi; call qword ptr [rax + 4]; 
0x000000000018704c: ror byte ptr [rsi - 4], 0xff; sahf; test esp, edi; jmp qword ptr [rax]; 
0x000000000000ecd0: ror dl, 1; adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 3; 
0x000000000008b9d5: ror dword ptr [r8 - 0x77], 1; adc eax, 0x335316; add rsp, 0x100; ret; 
0x000000000012ebfd: ror dword ptr [rax + 0x4800154c], -0x7d; ret 0x4101; 
0x00000000000c1e61: ror dword ptr [rax + 0x63], cl; ret; 
0x0000000000110ce4: ror dword ptr [rax + 0xf], -0x42; add qword ptr [r8 - 0x7d], r9; cli; add al, 0xf; xchg eax, esi; ret; 
0x000000000013cbf8: ror dword ptr [rax + 1], -8; ret; 
0x000000000013cab8: ror dword ptr [rax + 1], -8; sub rax, rsi; ret; 
0x000000000003dfd4: ror dword ptr [rax + 1], 1; ret 0x8b48; 
0x0000000000131a82: ror dword ptr [rax + 1], cl; ret; 
0x00000000000375ca: ror dword ptr [rax - 0x2d], -0x1e; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x00000000000375aa: ror dword ptr [rax - 0x2d], -0x1e; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000012ae52: ror dword ptr [rax - 0x39], 1; ret 0xfffe; 
0x000000000007491e: ror dword ptr [rax - 0x73], 0x41; adc byte ptr [rdi], cl; xchg eax, ebx; ret 0x3948; 
0x0000000000116d4f: ror dword ptr [rax - 0x73], 0x4a; add cl, byte ptr [rax + 0xf]; rol dword ptr [rax], 1; ror byte ptr [rax - 0x73], 5; pop rdi; ret 0x2a; 
0x00000000001063ea: ror dword ptr [rax - 0x75], cl; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rbx + 0x48], 0x8b; jp 0x106447; mov rsi, rdx; call rax; 
0x00000000000f532b: ror dword ptr [rax - 0x75], cl; and al, 8; mov rdi, rax; call 0x1f4f0; mov rdi, qword ptr [r15]; call rbx; 
0x00000000000d4ab5: ror dword ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 0x39], cl; ret 0x574; 
0x000000000004586c: ror dword ptr [rax - 0x77], -0x44; and al, 0x90; add byte ptr [rax], al; add cl, ch; cmp eax, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000039cdd: ror dword ptr [rax - 0x77], 0x37; mov eax, 1; mov dword ptr [rdx], ecx; ret; 
0x000000000008b9d6: ror dword ptr [rax - 0x77], 1; adc eax, 0x335316; add rsp, 0x100; ret; 
0x00000000000f7ebd: ror dword ptr [rax - 0x77], 1; fadd st(6); add al, byte ptr [rax]; pop rbx; ret; 
0x000000000002ad1c: ror dword ptr [rax - 0x77], 1; fimul word ptr [rax - 0x77]; ret 0x8948; 
0x00000000000e22f2: ror dword ptr [rax - 0x77], 1; ret 0x8b48; 
0x0000000000029a82: ror dword ptr [rax - 0x77], 1; ret 0xb70f; 
0x00000000000f5366: ror dword ptr [rax - 0x77], cl; out dx, eax; call 0x1f4f0; mov rdi, qword ptr [r12]; call rbx; 
0x00000000000c6784: ror dword ptr [rax - 0x77], cl; ret; 
0x00000000000382a7: ror dword ptr [rax - 0x7d], -0x40; add dword ptr [rax + 0x39], ecx; sal byte ptr [rbp - 0x11], 1; xor eax, eax; ret; 
0x0000000000039715: ror dword ptr [rax - 0x7d], cl; in al, dx; cmp dh, dh; ret 0x7401; 
0x0000000000044f2f: ror dword ptr [rax - 0x7d], cl; ret; 
0x0000000000057dc5: ror dword ptr [rax], -0x17; and ebp, 0x8348ffff; ret 0xeb08; 
0x0000000000067692: ror dword ptr [rax], -0x17; ret 0xfff0; 
0x00000000000e4bb8: ror dword ptr [rax], -0x73; add dword ptr [rax - 0x7d], ecx; jns 0xe4bb9; add byte ptr [rsp + rax - 0x77], dh; ret 0xeeeb; 
0x0000000000039a8f: ror dword ptr [rbp + rcx*4 + 0x44], 0x24; cmovns eax, dword ptr [rbx - 0x6d170f20]; idiv edi; dec ecx; ret; 
0x00000000000d1b79: ror dword ptr [rcx + 0x47892c47], 0x30; ret; 
0x0000000000051ef2: ror dword ptr [rcx + 1], 1; ret 0x8d4d; 
0x00000000000f50a5: ror dword ptr [rcx + rcx*4 - 0x11], cl; call 0x1f4f0; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000006f5f6: ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000116207: ror dword ptr [rcx + rcx*4 - 0x29], 1; mov edx, r11d; call 0x115190; sub rsp, -0x80; pop rbx; ret; 
0x00000000000f4f63: ror dword ptr [rcx + rcx*4 - 1], cl; call 0x1f4f0; mov rdi, qword ptr [r14]; call rbx; 
0x00000000000f4f70: ror dword ptr [rcx + rcx*4 - 9], cl; call 0x1f4f0; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000039118: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000003e855: ror dword ptr [rcx - 0x3f], cl; sti; add cl, byte ptr [rcx + 0x29]; ret; 
0x000000000003cd22: ror dword ptr [rcx - 0x73], 1; push rax; add al, 0x31; ror byte ptr [rax - 0x77], 0xf; mov qword ptr [rdi + 8], rdx; ret; 
0x0000000000108368: ror dword ptr [rcx - 0x75], 1; adc dword ptr [rax - 0x7b], ecx; sal byte ptr [rbp - 0x11], cl; leave; ret; 
0x00000000000b9f26: ror dword ptr [rcx - 0x77], -0x20; mov byte ptr [rsp], 0; call 0xb80f0; add rsp, 0x18; ret; 
0x00000000000bc256: ror dword ptr [rcx - 0x77], -0x20; mov byte ptr [rsp], 0; call 0xb9fa0; add rsp, 0x18; ret; 
0x00000000000c7bd1: ror dword ptr [rcx - 0x77], cl; ret 0x1f0f; 
0x00000000000fba5c: ror dword ptr [rcx - 0x9cb72e], 1; mov eax, 0x12b; syscall; 
0x00000000000fbb0c: ror dword ptr [rcx - 0x9cb72e], 1; mov eax, 0x133; syscall; 
0x0000000000162137: ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000096eb5: ror dword ptr [rdi], -0x43; ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000003e3cd: ror dword ptr [rdi], -0x6b; ret 0xd349; 
0x00000000000f0255: ror dword ptr [rdi], -0x6e; ret 0xcc80; 
0x00000000000d2e69: ror dword ptr [rdi], -0x6e; ret 0xd138; 
0x0000000000160858: ror dword ptr [rdi], -0x7b; adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000160f64: ror dword ptr [rdi], -0x7b; add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000160d36: ror dword ptr [rdi], -0x7b; add eax, 0xc0310000; ret; 
0x0000000000161e60: ror dword ptr [rdi], -0x7b; cmp al, 2; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000160cb6: ror dword ptr [rdi], -0x7b; cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x0000000000160aeb: ror dword ptr [rdi], -0x7b; jno 0x160af7; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000160bb3: ror dword ptr [rdi], -0x7b; mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000160830: ror dword ptr [rdi], -0x7b; sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000004ef46: ror dword ptr [rdi], -0x7c; mov ebx, 0xebfffffe; fst dword ptr [rax - 0x776c74b8]; add byte ptr [rax], al; add byte ptr [rbx + 0x7501046a], al; ret; 
0x000000000012f1f4: ror dword ptr [rdi], -0x7c; wait; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000133c2b: ror dword ptr [rdi], 0x1f; add bl, sil; ret; 
0x00000000000b06ab: ror dword ptr [rdi], 0x1f; add byte ptr [rax - 0x75], cl; add eax, 0x30d7b1; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000ed3cc: ror dword ptr [rdi], 1; xchg eax, edx; ret 0x970f; 
0x00000000000b24c7: ror dword ptr [rdi], 1; xchg eax, esp; ret; 
0x00000000000819d6: ror dword ptr [rdi], cl; xchg dword ptr [rcx - 0x9fffffb], edi; ret; 
0x000000000007ffca: ror dword ptr [rdi], cl; xchg eax, ebp; ret 0x8348; 
0x00000000000ed3a3: ror dword ptr [rdx], 0x2d; add byte ptr [rdi + rax*8], ah; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000008ad47: ror dword ptr [rsi + 0x33], 0x10; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0xb1f68]; ret; 
0x00000000000ecf93: ror dword ptr [rsi], 1; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000008ab00: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; add rsp, 8; jmp rax; 
0x0000000000021f5b: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036b4b: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001120a4: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x0000000000046328: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006f7dd: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c07d: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c47d: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab65: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb39: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007adcd: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x0000000000065a9e: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x00000000000641a6: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed2a: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fc0: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efb6: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e82: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x000000000010c553: ror eax, 8; ret; 
0x000000000011ce89: ror edi, 0x11; xor rdi, qword ptr fs:[0x30]; call rax; 
0x0000000000031e15: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000008aaff: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; add rsp, 8; jmp rax; 
0x0000000000021f5a: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000036b4a: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001120a3: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x0000000000046327: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006f7dc: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c07c: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c47c: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab64: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb38: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007adcc: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x0000000000065a9d: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x00000000000641a5: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed29: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fbf: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efb5: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e81: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x000000000011ce88: ror rdi, 0x11; xor rdi, qword ptr fs:[0x30]; call rax; 
0x0000000000031e14: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000061d8b: sahf; add byte ptr [rax], al; add byte ptr [rbx - 0x111743], al; call qword ptr [rax]; 
0x0000000000061a3c: sahf; add byte ptr [rax], al; add byte ptr [rbx - 0x116b43], al; call qword ptr [rax]; 
0x00000000001a7ff5: sahf; add dword ptr [rax], eax; clc; xor al, 0xf5; jmp qword ptr [rax]; 
0x00000000001a803d: sahf; add dword ptr [rax], eax; jo 0x1a8077; cmc; jmp qword ptr [rcx]; 
0x000000000014d1f1: sahf; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000117ef3: sahf; add rcx, 2; mov dword ptr [r8], edi; mov qword ptr [r9], rcx; ret; 
0x0000000000192a3c: sahf; and al, 0xeb; jmp qword ptr [rdx]; 
0x0000000000070010: sahf; cld; jmp qword ptr [rsi + 0x66]; 
0x0000000000080ace: sahf; cmp eax, 0x83480007; clc; dec dword ptr [rax - 0x77]; ret 0x840f; 
0x00000000000dfbf2: sahf; cmpsb byte ptr [rsi], byte ptr [rdi]; or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x0000000000179461: sahf; hlt; call qword ptr [rsi - 0x67]; 
0x0000000000179461: sahf; hlt; call qword ptr [rsi - 0x67]; hlt; jmp qword ptr [rax - 0x67]; 
0x0000000000173f32: sahf; int 0xe0; fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x0000000000105615: sahf; int1; dec dword ptr [rcx - 0x75]; cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x000000000013da2e: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001899e9: sahf; out dx, eax; push qword ptr [rcx + rax*2 + 1]; add byte ptr [rdi], dh; out dx, eax; call rsp; 
0x00000000000b7320: sahf; ret 0x1fbf; 
0x00000000001740e5: sahf; ret 0x38ae; 
0x00000000000b0c34: sahf; ret 0xe9c1; 
0x00000000000438be: sahf; ret; 
0x000000000000243f: sahf; sbb byte ptr [rax], cl; ret 0x5576; 
0x00000000000c0ac6: sahf; shr dword ptr [rdi], cl; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000187050: sahf; test esp, edi; jmp qword ptr [rax]; 
0x00000000000fa9c6: sahf; xor al, 0x2c; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000facc6: sahf; xor dword ptr [rax + rax], ebp; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000186968: sal ah, 0xfb; call qword ptr [rax]; 
0x0000000000186968: sal ah, 0xfb; call qword ptr [rax]; idiv bl; jmp qword ptr [rax - 9]; 
0x000000000018ae31: sal ah, 1; ljmp ptr [rcx + rdi*4 + 1]; add byte ptr [rdx + rdx*8 - 0xc], dl; push qword ptr [rcx + rdi*4 - 0x2d1bffff]; hlt; jmp rsp; 
0x000000000018ae41: sal ah, cl; jmp rsp; 
0x000000000018ae39: sal ah, cl; push qword ptr [rcx + rdi*4 - 0x2d1bffff]; hlt; jmp rsp; 
0x000000000018695c: sal al, 1; sti; jmp qword ptr [rax]; 
0x00000000000f212d: sal bh, 0xd8; add rsp, 0x10; pop rbx; ret; 
0x00000000001295d5: sal bh, 0xd8; add rsp, 0x20; pop rbx; ret; 
0x0000000000129bb4: sal bh, 0xd8; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000101e92: sal bh, 0xd8; pop rbx; pop rbp; pop r12; ret; 
0x000000000005db7e: sal bh, 0xd8; pop rbx; ret; 
0x0000000000022caa: sal bh, 0xd8; ret; 
0x00000000000a1b86: sal bh, 0xf1; pop rbx; mov eax, eax; ret; 
0x0000000000088357: sal bh, 1; ret 0x8000; 
0x0000000000088217: sal bh, 1; ret 0xc000; 
0x00000000000880d7: sal bh, 1; ret 0xe000; 
0x0000000000087f97: sal bh, 1; ret 0xf000; 
0x0000000000087e57: sal bh, 1; ret 0xf800; 
0x0000000000087d17: sal bh, 1; ret 0xfc00; 
0x0000000000087bd7: sal bh, 1; ret 0xfe00; 
0x0000000000087a97: sal bh, 1; ret 0xff00; 
0x0000000000087957: sal bh, 1; ret 0xff80; 
0x0000000000087817: sal bh, 1; ret 0xffc0; 
0x00000000000876d7: sal bh, 1; ret 0xffe0; 
0x0000000000087597: sal bh, 1; ret 0xfff0; 
0x0000000000087457: sal bh, 1; ret 0xfff8; 
0x0000000000087317: sal bh, 1; ret 0xfffc; 
0x00000000000871d7: sal bh, 1; ret 0xfffe; 
0x00000000000ed0f0: sal bh, cl; fnstcw word ptr [rip - 0x1000]; cmova edx, ecx; mov eax, edx; ret; 
0x000000000004f20c: sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x0000000000178de1: sal bl, 0xff; std; ret 0xfff3; 
0x000000000003857b: sal bl, 1; ret; 
0x0000000000038010: sal bl, cl; stosq qword ptr [rdi], rax; mov edi, r8d; call 0x36eb0; add rsp, 0xa8; ret; 
0x0000000000107a75: sal byte ptr [r9], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000000304f5: sal byte ptr [rax + 0x48], 0x8b; add eax, 0x393b11; lea rdi, qword ptr [rip + 0x38f77a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000a368f: sal byte ptr [rax + rbx + 0x49], 0x83; ret 0x4908; 
0x00000000000e22a9: sal byte ptr [rax + rdi + 0xf], 0xb6; xor byte ptr [rax - 0x77], cl; ret 0xf980; 
0x0000000000129265: sal byte ptr [rax + rsi*2 - 0x75], 0x50; adc dh, dh; ret 0x7401; 
0x000000000018631c: sal byte ptr [rax - 5], 1; jmp qword ptr [rax]; 
0x000000000005429f: sal byte ptr [rax], 0xc0; add eax, 0x107; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000001a7da0: sal byte ptr [rax], 0xf5; jmp qword ptr [rax]; 
0x00000000000b3d52: sal byte ptr [rax], cl; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000122b0d: sal byte ptr [rbp + 0x10], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000162141: sal byte ptr [rbp + 0x10], 0x66; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000122b8c: sal byte ptr [rbp + 0x11], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000008aa77: sal byte ptr [rbp + 0x16], 0x48; lea eax, dword ptr [rip + 0x3361ff]; mov qword ptr [rip + 0x3361e8], rax; ret; 
0x000000000005d5a7: sal byte ptr [rbp + 0x16], 0x48; mov edi, esp; call 0x88710; add rsp, 0x1000; pop rbx; ret; 
0x00000000000e3ee1: sal byte ptr [rbp + 0x1c], cl; and byte ptr [rdi + 0x38], 0xf9; mov dword ptr [rsi], 0; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x000000000007b195: sal byte ptr [rbp + 0x1d], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000007b2e5: sal byte ptr [rbp + 0x1d], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x00000000000fa6d4: sal byte ptr [rbp + 0x21], 0x4c; mov edi, ecx; mov eax, 0x11c; syscall; 
0x0000000000093d9c: sal byte ptr [rbp + 0x25], 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000036f67: sal byte ptr [rbp + 0x26], 0xbe; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x82; syscall; 
0x00000000000f1217: sal byte ptr [rbp + 0x27], 0x48; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x13; syscall; 
0x00000000000f12b7: sal byte ptr [rbp + 0x27], 0x48; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x14; syscall; 
0x00000000000f052a: sal byte ptr [rbp + 0x27], 0x48; movsxd rsi, esi; movsxd rdi, edi; mov eax, 0x11d; syscall; 
0x00000000000fb9b7: sal byte ptr [rbp + 0x27], 0x4c; movsxd rdx, ecx; movsxd rdi, edi; mov eax, 0x120; syscall; 
0x00000000000ed039: sal byte ptr [rbp + 0x28], 0x41; mov eax, 8; mov eax, 0x10f; syscall; 
0x0000000000108917: sal byte ptr [rbp + 0x28], 0x49; mov edx, ecx; movsxd rsi, esi; mov rdi, rbx; mov eax, 0xe6; syscall; 
0x00000000000f1cb9: sal byte ptr [rbp + 0x29], 0x4c; lea ecx, dword ptr [rsp + 0x40]; movsxd rdi, edi; mov eax, 0x10e; syscall; 
0x00000000000fba57: sal byte ptr [rbp + 0x29], 0x4c; movsxd rdx, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x12b; syscall; 
0x00000000000fbb07: sal byte ptr [rbp + 0x29], 0x4c; movsxd rdx, ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x133; syscall; 
0x000000000012d45a: sal byte ptr [rbp + 0x2b], 0x48; add esp, 0x18; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000c096c: sal byte ptr [rbp + 0x2c], 0x45; xor edx, edx; xor edx, edx; mov rdi, -1; mov eax, 0x3d; syscall; 
0x000000000007b7c1: sal byte ptr [rbp + 0x31], 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000000e5208: sal byte ptr [rbp + 0x33], cl; pop rbx; pop rbp; mov eax, 5; pop r12; ret; 
0x000000000011fff9: sal byte ptr [rbp + 0x34], 0x48; mov eax, dword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000007dee6: sal byte ptr [rbp + 0x3f], 0x48; mov eax, dword ptr [rip + 0x33fec8]; xor edi, edi; mov qword ptr [rsp + 8], rcx; call qword ptr [rax]; 
0x00000000000f191c: sal byte ptr [rbp + 0x42], 0x48; mov edx, 0xffffffff; mov esi, edi; mov eax, 0x75; mov rdi, rdx; syscall; 
0x00000000000f19bc: sal byte ptr [rbp + 0x42], 0x48; mov edx, 0xffffffff; mov esi, edi; mov eax, 0x77; mov rdi, rdx; syscall; 
0x000000000012dd63: sal byte ptr [rbp + 0x4a], 0x48; add esp, 0x28; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000093942: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, qword ptr [rdi + rax + 0x30]; ret; 
0x000000000008bdb8: sal byte ptr [rbp + 0x55], 0x48; xor eax, eax; ret; 
0x00000000000f150c: sal byte ptr [rbp + 0x58], 0x49; mov edx, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x127; syscall; 
0x00000000000f176c: sal byte ptr [rbp + 0x58], 0x49; mov edx, ecx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x128; syscall; 
0x00000000000eb599: sal byte ptr [rbp + 0x5c], 0x48; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x0000000000034077: sal byte ptr [rbp + 0x6e], 0x48; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000011fce8: sal byte ptr [rbp + 0x74], 0x49; mov eax, dword ptr [rdi + 8]; mov rdi, r15; call qword ptr [rax + 0x20]; 
0x00000000000bc7d3: sal byte ptr [rbp + 0xa], 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000011ee52: sal byte ptr [rbp + 0xb], 0x31; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000120072: sal byte ptr [rbp + 0xb], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000003c0ba: sal byte ptr [rbp + 0xb], 0xe9; mov esi, 0x66fffff6; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000136b8e: sal byte ptr [rbp + 0xc], 0xbf; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0x3e; syscall; 
0x00000000001201d8: sal byte ptr [rbp + 0xd], 0x48; add esp, 0x18; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000008aae0: sal byte ptr [rbp + 0xd], 0x48; add esp, 8; ret; 
0x000000000005d550: sal byte ptr [rbp + 0xd], 0x48; mov eax, ebx; pop rbx; ret; 
0x00000000001229d7: sal byte ptr [rbp + 0xe], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000002e6c6: sal byte ptr [rbp + 0xe], 0x48; mov eax, dword ptr [rip + 0x38f798]; mov dword ptr fs:[rax], 0x16; movsxd rdi, r13d; mov eax, 3; syscall; 
0x000000000012d0ae: sal byte ptr [rbp + 0xf], 0x48; add esp, 0x28; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000050263: sal byte ptr [rbp + 5], 0xf6; ret 0x7450; 
0x0000000000107a87: sal byte ptr [rbp + 6], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000036b37: sal byte ptr [rbp + 6], 0xf3; ret; 
0x0000000000108061: sal byte ptr [rbp + 7], 1; mov eax, 0xca; syscall; 
0x0000000000121564: sal byte ptr [rbp + 9], 0x5b; pop rbp; xor eax, eax; pop r12; ret; 
0x0000000000108164: sal byte ptr [rbp + 9], 0xf3; ret; 
0x000000000011f696: sal byte ptr [rbp + rax + 0x48], 0x89; out dx, eax; call rax; 
0x0000000000126726: sal byte ptr [rbp + rax + 0x48], cl; mov edi, ebp; call rdx; 
0x0000000000121265: sal byte ptr [rbp + rax + 0x4c], cl; mov edi, esp; call rdx; 
0x00000000000887c1: sal byte ptr [rbp + rax + 0x5b], 0x5d; pop r12; ret; 
0x00000000001063f0: sal byte ptr [rbp + rbx + 0x48], 0x8b; jp 0x106447; mov rsi, rdx; call rax; 
0x0000000000135ee0: sal byte ptr [rbp + rcx - 0x80], 0x7c; and al, 0x10; add byte ptr [rbp + 0x1e], dh; add rsp, 0x48; ret; 
0x0000000000041bbf: sal byte ptr [rbp + rdx + 0x4c], 0x39; ret 0x1075; 
0x00000000000a2e88: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x0000000000124438: sal byte ptr [rbp + rsi*2 + 0x49], 0x8b; xchg al, dl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x0000000000120ce0: sal byte ptr [rbp + rsi*2 - 0x7d], 0xf8; add dword ptr [rbp + 0x38], esi; mov dword ptr [rsi], 7; mov eax, dword ptr [rdi + 0x20]; mov dword ptr [rsi + 8], eax; ret; 
0x000000000007c585: sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x00000000000381ce: sal byte ptr [rbp - 0x11], 1; xor eax, eax; ret; 
0x000000000010836e: sal byte ptr [rbp - 0x11], cl; leave; ret; 
0x0000000000177184: sal byte ptr [rbp - 0x12], 1; call qword ptr [rax]; 
0x00000000000a1430: sal byte ptr [rbp - 0x13], cl; lea rax, qword ptr [rcx - 1]; ret; 
0x000000000010bddc: sal byte ptr [rbp - 0x17], 0xf3; ret; 
0x0000000000039daa: sal byte ptr [rbp - 0x18], 0xc7; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000012b866: sal byte ptr [rbp - 0x19], cl; pop rbx; ret; 
0x00000000000f31ac: sal byte ptr [rbp - 0x1b], cl; mov r9, rsi; mov byte ptr [r9 - 1], 0; ret; 
0x0000000000096a5a: sal byte ptr [rbp - 0x1d], 0xf3; ret; 
0x00000000000c60b0: sal byte ptr [rbp - 0x1e], 0x31; rol byte ptr [rbx - 0x6bf0fe06], 0xc0; ret; 
0x0000000000097eab: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x00000000000a356a: sal byte ptr [rbp - 0x35], 0xf3; ret; 
0x00000000000d52dd: sal byte ptr [rbp - 0x38], cl; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000f7c97: sal byte ptr [rbp - 0x3a], 0x49; movsxd rdi, edi; mov eax, 3; syscall; 
0x00000000000f7d69: sal byte ptr [rbp - 0x3c], 0x49; movsxd rdi, edi; mov al, 3; syscall; 
0x000000000010846c: sal byte ptr [rbp - 0x3f], 0xc9; ret; 
0x00000000000a30bf: sal byte ptr [rbp - 0x42], 0x85; sal byte ptr [rdx + rdi*4 + 0x48], 0x39; sal dword ptr [rbp - 0x1b], 1; sub eax, r8d; nop; ret; 
0x000000000012d47f: sal byte ptr [rbp - 0x44], 0xeb; ret 0x1f0f; 
0x0000000000122c2c: sal byte ptr [rbp - 0x50], 0x90; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000010ad95: sal byte ptr [rbp - 0x63], 0x48; add esp, 0x28; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000973bb: sal byte ptr [rbp - 0x63], 0x48; mov eax, edi; ret; 
0x00000000000a1ad5: sal byte ptr [rbp - 0x66], 1; lea eax, dword ptr [rcx*4]; pop rbx; and eax, 0x3fc00; ret; 
0x0000000000108070: sal byte ptr [rbp - 0xf], 0x5a; pop r10; ret; 
0x00000000000f3132: sal byte ptr [rbx + rax + 0x48], 0x89; adc bl, dh; ret; 
0x0000000000088c82: sal byte ptr [rbx + rbx + 0x48], cl; bsf eax, edx; ret; 
0x00000000000f38c5: sal byte ptr [rbx + rcx + 0x48], 0x83; ret 0x4808; 
0x00000000000c0399: sal byte ptr [rbx + rcx + 0x48], 0x83; ret; 
0x000000000012ac42: sal byte ptr [rbx + rcx + 0x48], 1; add eax, 0xa0; add rsp, 8; ret; 
0x000000000012ac72: sal byte ptr [rbx + rcx + 0x48], 1; add eax, 0xa8; add rsp, 8; ret; 
0x000000000012abe2: sal byte ptr [rbx + rcx + 0x48], 1; add esp, 8; ret; 
0x000000000012ac12: sal byte ptr [rbx + rcx + 0x48], 1; sub eax, -0x80; add rsp, 8; ret; 
0x0000000000120711: sal byte ptr [rbx + rcx*4 + 0x48], 0x8b; test byte ptr [rax + rbp*8], ah; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax + 0x20]; 
0x0000000000031971: sal byte ptr [rbx + rdx + 0x48], 0x83; ret 0x4901; 
0x000000000018629c: sal byte ptr [rbx], 0xfb; jmp qword ptr [rax + 0x35]; 
0x0000000000086b3b: sal byte ptr [rbx], 1; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rdi + rax + 0x48], dh; lea eax, dword ptr [rip + 0x11595]; ret; 
0x00000000001869a0: sal byte ptr [rbx], 1; cld; call rax; 
0x000000000012012a: sal byte ptr [rcx + 0x48], 0x8b; sbb ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000126b65: sal byte ptr [rcx + 0x48], 0x8b; test byte ptr [rax + rcx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000013fd89: sal byte ptr [rcx + rax - 0x6e], 0x48; lea ecx, dword ptr [rip + 0x274ec]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013e3e4: sal byte ptr [rcx + rax - 0x6e], 0x48; lea ecx, dword ptr [rip + 0x28e91]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013c9e9: sal byte ptr [rcx + rax - 0x6e], 0x48; lea ecx, dword ptr [rip + 0x2a88c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013aa24: sal byte ptr [rcx + rax - 0x6e], 0x48; lea ecx, dword ptr [rip + 0x2c851]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000103462: sal byte ptr [rcx + rcx + 0x48], 0x8b; adc byte ptr [rax + 0x39], cl; ret; 
0x00000000001117e2: sal byte ptr [rcx + rcx + 0x48], 0x8d; cmp eax, 0x2b1734; call rax; 
0x0000000000123a81: sal byte ptr [rcx + rcx + 0x48], 0x8d; mov ebx, 0xc8; call rax; 
0x00000000000c246d: sal byte ptr [rcx + rcx + 0x49], 0x81; clc; add byte ptr [rcx], al; sbb dword ptr [rbp + rsi*2 - 0x7e], edx; mov eax, 0x7d00; ret; 
0x0000000000103d37: sal byte ptr [rcx + rcx - 0x77], cl; ret 0xeac1; 
0x00000000000c1092: sal byte ptr [rcx + rdx - 0x46], 1; add byte ptr [rax], al; add byte ptr [rbx - 0x2776d787], cl; mov esi, 0x81; syscall; 
0x000000000012ab6d: sal byte ptr [rcx + rdx*8 + 0x64], 0x48; mov dword ptr [rbx], eax; pop rbx; ret; 
0x00000000000bc320: sal byte ptr [rcx + rsi*4 + 0x48], 0x8b; add eax, 0x307ce6; lea rdi, qword ptr [rip + 0x3037cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000738b8: sal byte ptr [rcx], 0xd2; div rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000007387b: sal byte ptr [rcx], 1; rcr byte ptr [rbx + 0x48], cl; div ebp; pop rbp; pop r12; ret; 
0x0000000000107a76: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000000b194f: sal byte ptr [rcx], cl; jmp qword ptr [rsi - 0x77]; 
0x000000000006f758: sal byte ptr [rcx], cl; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov eax, r8d; syscall; 
0x00000000000ed359: sal byte ptr [rcx], cl; test byte ptr [rax + 0x63], 0xff; mov eax, 0x118; syscall; 
0x000000000007c15a: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x58]; 
0x000000000003706e: sal byte ptr [rcx], cl; test byte ptr [rcx + rcx*4 - 0x31], 0x44; mov eax, eax; syscall; 
0x0000000000037107: sal byte ptr [rcx], cl; test byte ptr [rcx + rcx*4 - 0x39], 0x89; call 0xffffffff894b7622; ret 0xc189; 
0x000000000010bd8a: sal byte ptr [rdi + 0x11], 1; lea rdx, qword ptr [rip + 0x2b8014]; call 0xa3ea0; add rsp, 8; ret; 
0x00000000000a2c4e: sal byte ptr [rdi + 0x48], 0x89; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000010c49c: sal byte ptr [rdi + rbp + 0x48], 0x83; clc; add dword ptr [rbx + rdx + 0x48], esi; mov eax, dword ptr [rip + 0x2b6364]; add rsp, 0x28; jmp rax; 
0x00000000000fd5ae: sal byte ptr [rdi + rdx - 0x77], cl; shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; adc al, 0x8a; add eax, dword ptr [rsi + rdx]; ret; 
0x000000000007958c: sal byte ptr [rdi + rdx*8 + 0x48], 0x8b; test eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x00000000001869a8: sal byte ptr [rdi], 1; cld; call rax; 
0x00000000001869a8: sal byte ptr [rdi], 1; cld; call rax; cmp esp, edi; jmp qword ptr [rax + 0x2c]; 
0x00000000000217bc: sal byte ptr [rdx + rax*2 - 0xa], cl; ret 0x7401; 
0x000000000013cbf3: sal byte ptr [rdx + rbx*8 + 0x48], 0x63; ror dword ptr [rax + 1], -8; ret; 
0x000000000013cab3: sal byte ptr [rdx + rbx*8 + 0x48], 0x63; ror dword ptr [rax + 1], -8; sub rax, rsi; ret; 
0x0000000000097a8c: sal byte ptr [rdx + rcx + 0x31], cl; test byte ptr [rax - 0x77], 0xdf; call 0x8c4b0; lea rax, qword ptr [rbx - 1]; pop rbx; ret; 
0x0000000000088a93: sal byte ptr [rdx + rcx + 0x48], cl; bsf eax, edx; ret; 
0x00000000000ec4a9: sal byte ptr [rdx + rcx + 0x49], cl; movsxd rdi, ebp; mov eax, 3; syscall; 
0x00000000000fc262: sal byte ptr [rdx + rcx + 0x4c], cl; mov esi, ebp; mov rdi, r9; mov eax, ebx; syscall; 
0x0000000000098343: sal byte ptr [rdx + rdi - 0xa], cl; ret 0x7501; 
0x00000000000a30c3: sal byte ptr [rdx + rdi*4 + 0x48], 0x39; sal dword ptr [rbp - 0x1b], 1; sub eax, r8d; nop; ret; 
0x0000000000022efd: sal byte ptr [rdx + rdx + 0x48], 0x8b; push rbp; movabs al, byte ptr [0x201a748b48ef894c]; call rax; 
0x0000000000086cf3: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x000000000009703b: sal byte ptr [rdx + rdx*8 + 0xf], 0xbd; ror byte ptr [rax + 1], 0xf8; ret; 
0x00000000001610df: sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000161200: sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000000865fa: sal byte ptr [rdx - 2], cl; jmp qword ptr [rsi - 0x70]; 
0x00000000001a7ef0: sal byte ptr [rdx], 0xf5; jmp qword ptr [rcx]; 
0x00000000001869a4: sal byte ptr [rip + 0x37d0fffc], 1; cld; call rax; cmp esp, edi; jmp qword ptr [rax + 0x2c]; 
0x00000000001305c7: sal byte ptr [rsi + rax + 0x31], 0xc0; ret; 
0x000000000012765e: sal byte ptr [rsi + rax + 0x48], 0x8d; jnp 0x1276cd; call rax; 
0x000000000012808e: sal byte ptr [rsi + rax + 0x48], 0x8d; jnp 0x1280ed; call rax; 
0x000000000011f54b: sal byte ptr [rsi + rbp*2 + 0x48], 0x8b; and byte ptr [r9], sil; test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x0000000000126816: sal byte ptr [rsi + rbp*4 + 0x48], 0x8b; and al, 0x78; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000013359b: sal byte ptr [rsi + rcx + 0x48], 0x8d; adc eax, 0x28853b; mov qword ptr [rip + 0x28c2e4], rdx; add rsp, 8; ret; 
0x000000000008aab9: sal byte ptr [rsi + rcx + 0x48], 0x8d; add eax, 0x3361bd; mov qword ptr [rip + 0x3361a6], rax; add rsp, 8; ret; 
0x0000000000022467: sal byte ptr [rsi + rcx + 0x48], 0x8d; add eax, 0x3a178f; ret; 
0x0000000000092b87: sal byte ptr [rsi + rcx + 0x48], 0x8d; add eax, 0xfffffaef; ret; 
0x0000000000080839: sal byte ptr [rsi + rdx + 0x48], 0x89; push rsp; and al, 0x30; mov dword ptr [rsp + 0x28], r11d; call rax; 
0x00000000000937f7: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x000000000004f1ef: sal byte ptr [rsi + rdx + 0xf], cl; mov esi, 0x77cf390e; fild word ptr [rcx + rcx*4 - 0x40]; ret; 
0x0000000000088a37: sal byte ptr [rsi + rsi*2 + 0x48], cl; bsf eax, edx; ret; 
0x00000000000ec751: sal byte ptr [rsp + rbx + 0x31], 0xf6; xor edi, edi; call 0xec010; add rsp, 0x120; pop rbx; ret; 
0x0000000000129d97: sal byte ptr [rsp + rbx + 0x48], 0x8b; cmp byte ptr [rax - 0x7b], cl; push qword ptr [rdx + rcx + 0x48]; mov eax, dword ptr [rdi + 0x38]; call qword ptr [rax + 0x20]; 
0x00000000000318ea: sal byte ptr [rsp + rbx*2 + 0x48], 0x8b; add eax, 0x39271c; lea rdi, qword ptr [rip + 0x38e385]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011f679: sal byte ptr [rsp + rbx*2 + 0x48], 0x8b; and byte ptr [r8 - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000006e429: sal byte ptr [rsp + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x00000000000a3079: sal byte ptr [rsp + rsi*4 + 0xf], 0x1f; add byte ptr [rcx + rbp - 0x40], al; ret; 
0x00000000001b6350: sal ch, 0xf7; call rdx; 
0x000000000018a371: sal cl, 1; call rsp; 
0x00000000000d1d71: sal dh, 0xc1; add dword ptr [rbp - 0x79], esi; pop rbx; ret; 
0x00000000000fa155: sal dh, cl; and al, 0x29; or byte ptr [rdi], 0x95; ret 0xcfeb; 
0x000000000017a575: sal dh, cl; call rdx; 
0x00000000000f243b: sal dl, 1; dec dword ptr [rax - 0x77]; add eax, 0x2cd4db; add rsp, 8; ret; 
0x0000000000102bb3: sal dl, 1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000036991: sal dword ptr [rax + rdi], cl; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbx; ret; 
0x0000000000096aa5: sal dword ptr [rax + rsi*8 - 0xd], 1; ret; 
0x0000000000132d93: sal dword ptr [rax - 0x389bffd8], 1; add byte ptr [rsi], ah; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000036621: sal dword ptr [rbp + 0xc], 0x48; add esp, 8; ret; 
0x0000000000036346: sal dword ptr [rbp + 7], 0x48; add esp, 8; ret; 
0x00000000000a30c8: sal dword ptr [rbp - 0x1b], 1; sub eax, r8d; nop; ret; 
0x000000000014b8b9: sal dword ptr [rbx + rax + 0x14634900], cl; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bbb9: sal dword ptr [rcx + 0x63490003], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000ed0ee: sal dword ptr [rcx], -0x2e; neg ecx; cmp eax, 0xfffff000; cmova edx, ecx; mov eax, edx; ret; 
0x00000000000b14fd: sal dword ptr [rcx], -0x40; mov qword ptr [rbx + 8], rcx; add rsp, 0xd0; pop rbx; ret; 
0x0000000000096bd7: sal dword ptr [rcx], -0x40; mov qword ptr [rdx], rcx; ret; 
0x000000000008897d: sal dword ptr [rcx], 1; ret; 
0x0000000000037625: sal dword ptr [rcx], 1; rol cl, 0xe9; add esi, esi; ret 0xf304; 
0x0000000000040be2: sal dword ptr [rcx], 1; shr cl, cl; fcos; jmp qword ptr [rsi + 0xf]; 
0x0000000000045ed2: sal dword ptr [rcx], 1; shr cl, cl; xchg eax, esi; fdivp st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000000f60e4: sal dword ptr [rcx], cl; sar byte ptr [rsi + 1], cl; mov rdi, rbp; call rbx; 
0x000000000014b5b9: sal dword ptr [rdi + 0x63490003], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000016103f: sal dword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016117f: sal dword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000fa8a3: sal dword ptr [rip - 0x2708ffd4], 0x64; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000086883: sal dword ptr [rsi + 0x33], 0; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x000000000008a646: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000fa7a3: sal dword ptr [rsi], 0x2c; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa993: sal dword ptr [rsp + rbp], 1; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000178f39: sal ebx, cl; call qword ptr [rsi - 0x2d]; 
0x0000000000178f3d: sal ebx, cl; jmp qword ptr [rsi]; 
0x00000000001a0b69: sal ecx, cl; call rsi; 
0x000000000017a57d: sal esi, 1; call rdx; 
0x00000000001b05a9: sal esi, cl; call qword ptr [rcx + 1]; 
0x000000000017a555: sal esi, cl; call rdx; 
0x000000000016103e: sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000016117e: sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000017a574: sal r14b, cl; call rdx; 
0x00000000000faa02: salc; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0xe8; syscall; 
0x00000000000ac232: salc; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000162176: salc; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000001492e4: salc; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001245db: salc; add rdi, 0x10; jmp rcx; 
0x0000000000161cff: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x247c6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161c85: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x24840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161bf6: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x248cf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001619eb: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x24ada]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001618b9: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x24c0c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001617f3: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x24cd2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161775: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x24d50]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001616de: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x24de7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001614e2: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x24fe3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001613b1: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x25114]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001612b0: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x25215]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001606cf: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x25cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160655: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x25d30]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001605c6: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x25dbf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001603bb: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x25fca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160289: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x260fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001601c3: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x261c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160145: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x26240]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001600ae: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x262d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015feb2: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x264d3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fd81: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x26604]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fc72: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x26713]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001516ca: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x360bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fe25: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x37960]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fcc9: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x37abc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ebd6: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x386af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d345: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x39f40]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1d6: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x3a0af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c106: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x3ac7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a518: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x3c46d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a875: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x3c510]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a703: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x3c682]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147d79: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x3ec0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147cb4: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x3ecd1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001453a9: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x4141c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001452e4: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x414e1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001429d9: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x43c2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142914: salc; add rdi, rdx; lea r11, qword ptr [rip + 0x43cf1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000164f11: salc; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007dea3: salc; call qword ptr [rax]; 
0x00000000001063f9: salc; call rax; 
0x000000000018dcf9: salc; cli; jmp rsp; 
0x00000000001aa6f1: salc; cmc; jmp qword ptr [rsi]; 
0x00000000001a1111: salc; int1; call rsp; 
0x000000000014c60b: salc; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000151522: salc; lea r11, qword ptr [rip + 0x36026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001513a2: salc; lea r11, qword ptr [rip + 0x361a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151465: salc; lea r11, qword ptr [rip + 0x36323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151222: salc; lea r11, qword ptr [rip + 0x36326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001512e5: salc; lea r11, qword ptr [rip + 0x364a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001510a2: salc; lea r11, qword ptr [rip + 0x364a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151165: salc; lea r11, qword ptr [rip + 0x36623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150f22: salc; lea r11, qword ptr [rip + 0x36626]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150fe6: salc; lea r11, qword ptr [rip + 0x367a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150da2: salc; lea r11, qword ptr [rip + 0x367a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150e65: salc; lea r11, qword ptr [rip + 0x36923]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150c22: salc; lea r11, qword ptr [rip + 0x36926]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150ce5: salc; lea r11, qword ptr [rip + 0x36aa3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150aa2: salc; lea r11, qword ptr [rip + 0x36aa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150b65: salc; lea r11, qword ptr [rip + 0x36c23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150922: salc; lea r11, qword ptr [rip + 0x36c26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001509e5: salc; lea r11, qword ptr [rip + 0x36da3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001507a2: salc; lea r11, qword ptr [rip + 0x36da6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150865: salc; lea r11, qword ptr [rip + 0x36f23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150622: salc; lea r11, qword ptr [rip + 0x36f26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001506e5: salc; lea r11, qword ptr [rip + 0x370a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001504a2: salc; lea r11, qword ptr [rip + 0x370a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150565: salc; lea r11, qword ptr [rip + 0x37223]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150322: salc; lea r11, qword ptr [rip + 0x37226]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001503e5: salc; lea r11, qword ptr [rip + 0x373a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001501a2: salc; lea r11, qword ptr [rip + 0x373a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150265: salc; lea r11, qword ptr [rip + 0x37523]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150022: salc; lea r11, qword ptr [rip + 0x37526]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fea9: salc; lea r11, qword ptr [rip + 0x3769f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001500e5: salc; lea r11, qword ptr [rip + 0x376a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ff65: salc; lea r11, qword ptr [rip + 0x37823]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ea42: salc; lea r11, qword ptr [rip + 0x38606]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e8c2: salc; lea r11, qword ptr [rip + 0x38786]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e985: salc; lea r11, qword ptr [rip + 0x38903]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e742: salc; lea r11, qword ptr [rip + 0x38906]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e805: salc; lea r11, qword ptr [rip + 0x38a83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e5c2: salc; lea r11, qword ptr [rip + 0x38a86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e685: salc; lea r11, qword ptr [rip + 0x38c03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e442: salc; lea r11, qword ptr [rip + 0x38c06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e506: salc; lea r11, qword ptr [rip + 0x38d82]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e2c2: salc; lea r11, qword ptr [rip + 0x38d86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e385: salc; lea r11, qword ptr [rip + 0x38f03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e142: salc; lea r11, qword ptr [rip + 0x38f06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e205: salc; lea r11, qword ptr [rip + 0x39083]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dfc2: salc; lea r11, qword ptr [rip + 0x39086]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e085: salc; lea r11, qword ptr [rip + 0x39203]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014de42: salc; lea r11, qword ptr [rip + 0x39206]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014df05: salc; lea r11, qword ptr [rip + 0x39383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dcc2: salc; lea r11, qword ptr [rip + 0x39386]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dd85: salc; lea r11, qword ptr [rip + 0x39503]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014db42: salc; lea r11, qword ptr [rip + 0x39506]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dc05: salc; lea r11, qword ptr [rip + 0x39683]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d9c2: salc; lea r11, qword ptr [rip + 0x39686]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014da85: salc; lea r11, qword ptr [rip + 0x39803]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d842: salc; lea r11, qword ptr [rip + 0x39806]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d905: salc; lea r11, qword ptr [rip + 0x39983]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d6c2: salc; lea r11, qword ptr [rip + 0x39986]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d785: salc; lea r11, qword ptr [rip + 0x39b03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d542: salc; lea r11, qword ptr [rip + 0x39b06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d3c9: salc; lea r11, qword ptr [rip + 0x39c7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d605: salc; lea r11, qword ptr [rip + 0x39c83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d485: salc; lea r11, qword ptr [rip + 0x39e03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bf72: salc; lea r11, qword ptr [rip + 0x3abd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bdf2: salc; lea r11, qword ptr [rip + 0x3ad56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014beb5: salc; lea r11, qword ptr [rip + 0x3aed3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bc72: salc; lea r11, qword ptr [rip + 0x3aed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bd35: salc; lea r11, qword ptr [rip + 0x3b053]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014baf2: salc; lea r11, qword ptr [rip + 0x3b056]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bbb5: salc; lea r11, qword ptr [rip + 0x3b1d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b972: salc; lea r11, qword ptr [rip + 0x3b1d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ba36: salc; lea r11, qword ptr [rip + 0x3b352]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b7f2: salc; lea r11, qword ptr [rip + 0x3b356]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b8b5: salc; lea r11, qword ptr [rip + 0x3b4d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b672: salc; lea r11, qword ptr [rip + 0x3b4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b735: salc; lea r11, qword ptr [rip + 0x3b653]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b4f2: salc; lea r11, qword ptr [rip + 0x3b656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b5b5: salc; lea r11, qword ptr [rip + 0x3b7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b372: salc; lea r11, qword ptr [rip + 0x3b7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b435: salc; lea r11, qword ptr [rip + 0x3b953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b1f2: salc; lea r11, qword ptr [rip + 0x3b956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b2b5: salc; lea r11, qword ptr [rip + 0x3bad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b072: salc; lea r11, qword ptr [rip + 0x3bad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b135: salc; lea r11, qword ptr [rip + 0x3bc53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aef2: salc; lea r11, qword ptr [rip + 0x3bc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014afb5: salc; lea r11, qword ptr [rip + 0x3bdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ad72: salc; lea r11, qword ptr [rip + 0x3bdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ae35: salc; lea r11, qword ptr [rip + 0x3bf53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014abf2: salc; lea r11, qword ptr [rip + 0x3bf56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014acb5: salc; lea r11, qword ptr [rip + 0x3c0d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aa72: salc; lea r11, qword ptr [rip + 0x3c0d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a8f9: salc; lea r11, qword ptr [rip + 0x3c24f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ab35: salc; lea r11, qword ptr [rip + 0x3c253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a9b5: salc; lea r11, qword ptr [rip + 0x3c3d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149391: salc; lea r11, qword ptr [rip + 0x3d5f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149241: salc; lea r11, qword ptr [rip + 0x3d747]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001490f1: salc; lea r11, qword ptr [rip + 0x3d897]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148fa1: salc; lea r11, qword ptr [rip + 0x3d9e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148e51: salc; lea r11, qword ptr [rip + 0x3db37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148d01: salc; lea r11, qword ptr [rip + 0x3dc87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148bb1: salc; lea r11, qword ptr [rip + 0x3ddd7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148911: salc; lea r11, qword ptr [rip + 0x3e077]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001487c1: salc; lea r11, qword ptr [rip + 0x3e1c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148671: salc; lea r11, qword ptr [rip + 0x3e317]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148521: salc; lea r11, qword ptr [rip + 0x3e467]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001483d1: salc; lea r11, qword ptr [rip + 0x3e5b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148281: salc; lea r11, qword ptr [rip + 0x3e707]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148131: salc; lea r11, qword ptr [rip + 0x3e857]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147e6b: salc; lea r11, qword ptr [rip + 0x3eb1d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001469c1: salc; lea r11, qword ptr [rip + 0x3fe07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146871: salc; lea r11, qword ptr [rip + 0x3ff57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146721: salc; lea r11, qword ptr [rip + 0x400a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001465d1: salc; lea r11, qword ptr [rip + 0x401f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146481: salc; lea r11, qword ptr [rip + 0x40347]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146331: salc; lea r11, qword ptr [rip + 0x40497]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001461e1: salc; lea r11, qword ptr [rip + 0x405e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145f41: salc; lea r11, qword ptr [rip + 0x40887]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145df1: salc; lea r11, qword ptr [rip + 0x409d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145ca1: salc; lea r11, qword ptr [rip + 0x40b27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145b51: salc; lea r11, qword ptr [rip + 0x40c77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a01: salc; lea r11, qword ptr [rip + 0x40dc7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001458b1: salc; lea r11, qword ptr [rip + 0x40f17]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145761: salc; lea r11, qword ptr [rip + 0x41067]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014549b: salc; lea r11, qword ptr [rip + 0x4132d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ff1: salc; lea r11, qword ptr [rip + 0x42617]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ea1: salc; lea r11, qword ptr [rip + 0x42767]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143d51: salc; lea r11, qword ptr [rip + 0x428b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c01: salc; lea r11, qword ptr [rip + 0x42a07]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ab1: salc; lea r11, qword ptr [rip + 0x42b57]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143961: salc; lea r11, qword ptr [rip + 0x42ca7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143811: salc; lea r11, qword ptr [rip + 0x42df7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143571: salc; lea r11, qword ptr [rip + 0x43097]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143421: salc; lea r11, qword ptr [rip + 0x431e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001432d1: salc; lea r11, qword ptr [rip + 0x43337]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143181: salc; lea r11, qword ptr [rip + 0x43487]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143031: salc; lea r11, qword ptr [rip + 0x435d7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ee1: salc; lea r11, qword ptr [rip + 0x43727]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142d91: salc; lea r11, qword ptr [rip + 0x43877]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142acb: salc; lea r11, qword ptr [rip + 0x43b3d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000003fc06: salc; loope 0x3fc08; dec dword ptr [rax - 0x77]; ret; 
0x000000000014b676: salc; mov ah, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001875a0: salc; mov al, 0xfc; jmp qword ptr [rsi - 0x50]; 
0x000000000014b376: salc; mov bh, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000828d2: salc; mov byte ptr [rax + rbx], sil; pop rbx; ret; 
0x000000000014b976: salc; mov cl, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001245fb: salc; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x0000000000127ecb: salc; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x000000000012761b: salc; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x0000000000123a3b: salc; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x00000000000eb03d: salc; mov eax, 4; syscall; 
0x00000000000eb08c: salc; mov eax, 5; syscall; 
0x00000000000eb0dd: salc; mov eax, 6; syscall; 
0x00000000000886bc: salc; mov eax, edx; ret; 
0x000000000014ad76: salc; mov ebp, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000001bec: salc; mov ebp, dword ptr [rsi + rbx*8 + 0x6d]; ret 0x1bb7; 
0x000000000014b076: salc; mov edx, 0x63490003; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001870a8: salc; mov esp, edi; jmp qword ptr [rsi - 0x77]; 
0x0000000000133b25: salc; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x0000000000133bc8: salc; mov rdi, r9; call qword ptr [rax + 0x18]; 
0x000000000007068c: salc; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000086aa1: salc; mov rdi, rsi; call qword ptr [rbx + 0x40]; 
0x00000000000bcd8c: salc; mov rdx, qword ptr [rip + 0x3010d4]; movsxd rdi, ebp; mov al, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000f46f8: salc; mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x00000000001765b2: salc; movabs al, byte ptr [0xc8c62d12fc87aa3c]; lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000006ab9f: salc; movsd dword ptr [rdi], dword ptr [rsi]; sar dh, 0xff; jmp qword ptr [rsi + 0x45]; 
0x00000000000b8282: salc; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000e3b25: salc; pop rbx; pop rbp; xor eax, eax; pop r12; ret; 
0x00000000000025c6: salc; ret 0x23cb; 
0x000000000010bba6: salc; ret 0xfff6; 
0x00000000000022d4: salc; ret; 
0x000000000014aa76: salc; rol byte ptr [rbx], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bc76: salc; scasb al, byte ptr [rdi]; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000013706e: salc; shr byte ptr [rax], 1; add bl, ch; vminsd xmm15, xmm4, qword ptr [rax - 1]; pop r12; ret; 
0x0000000000186789: salc; sti; call qword ptr [rax]; 
0x0000000000186789: salc; sti; call qword ptr [rax]; fdivr st(3); call qword ptr [rax - 0x3d]; 
0x000000000014bf76: salc; stosd dword ptr [rdi], eax; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000006cdd6: salc; sub dh, byte ptr [rip + 0x48b4800]; ret 0x8548; 
0x000000000015187d: salc; sub rdi, rdx; lea r11, qword ptr [rip + 0x35cc8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ed69: salc; sub rdi, rdx; lea r11, qword ptr [rip + 0x382dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c299: salc; sub rdi, rdx; lea r11, qword ptr [rip + 0x3a8ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000025863: salc; test sil, sil; mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x00000000001797c4: salc; wait; hlt; call rsi; 
0x000000000019a7bc: sar ah, 0xed; jmp qword ptr [rdx]; 
0x000000000008194d: sar ah, 0xff; jmp qword ptr [rsi + 0x66]; 
0x00000000001588ed: sar bh, 0xff; jmp qword ptr [rsi + 0x66]; 
0x000000000015f743: sar bh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000039d8d: sar bh, 0xff; sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000176bc1: sar bh, 1; jmp qword ptr [rdi]; 
0x0000000000057c8f: sar bh, 1; jmp qword ptr [rsi + 0xf]; 
0x000000000004c5e5: sar bh, cl; dec dword ptr [rax - 0x77]; ret 0x31eb; 
0x0000000000068a5f: sar bh, cl; dec dword ptr [rax - 0x7d]; ret 0xeb08; 
0x0000000000186775: sar bl, 1; inc dword ptr [rax - 0x2f00042f]; sar bl, cl; jmp qword ptr [rax]; 
0x000000000018677d: sar bl, cl; jmp qword ptr [rax]; 
0x00000000000f0b85: sar byte ptr [rax + 0x10], cl; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fc113: sar byte ptr [rax + 0x14], cl; syscall; 
0x0000000000135166: sar byte ptr [rax + 0x17], 0x48; lea edx, dword ptr [rip + 0x28ea30]; mov eax, 0; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000cb607: sar byte ptr [rax + 0x1c], cl; syscall; 
0x00000000000cb607: sar byte ptr [rax + 0x1c], cl; syscall; neg eax; ret; 
0x0000000000112f18: sar byte ptr [rax + 0x1d], 0x48; movsxd rdi, ebx; mov eax, 3; syscall; 
0x00000000000d2261: sar byte ptr [rax + 0x25], 0x89; ret 0x8b49; 
0x00000000000f1167: sar byte ptr [rax + 0x26], 0x48; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000133559: sar byte ptr [rax + 0x2c], 0x48; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x0000000000133a20: sar byte ptr [rax + 0x2d], 0x48; mov eax, dword ptr [rsp]; add rsp, 0x10; pop rbx; ret; 
0x00000000000786e3: sar byte ptr [rax + 0xa], 0x48; mov dword ptr [rbx + 0x90], eax; pop rbx; ret; 
0x00000000000f05d3: sar byte ptr [rax + 0xa], 0x8b; or byte ptr [rip + 0x100f], r12b; ret; 
0x0000000000135572: sar byte ptr [rax + 0xb], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000103f33: sar byte ptr [rax + 5], 0x45; test ecx, ecx; jns 0x103f6e; mov eax, r8d; sub eax, r9d; ret; 
0x0000000000103db1: sar byte ptr [rax + 5], cl; test r9d, r9d; jns 0x103d88; mov eax, edx; sub eax, r9d; ret; 
0x0000000000083ae7: sar byte ptr [rax + 6], 0xf3; ret; 
0x00000000000f09f4: sar byte ptr [rax + 9], 0x8b; add al, 0x24; add rsp, 0x18; ret; 
0x000000000007140c: sar byte ptr [rax + 9], 0xf3; ret; 
0x00000000001a8310: sar byte ptr [rbx], 0xf5; jmp qword ptr [rcx]; 
0x0000000000036dcd: sar byte ptr [rcx + 0x10], cl; add rsp, 0xd0; ret; 
0x00000000000f2223: sar byte ptr [rcx + 3], 0xc6; add eax, dword ptr [rax]; mov rax, rbx; pop rbx; ret; 
0x00000000001869ac: sar byte ptr [rcx], 1; cld; jmp qword ptr [rax + 0x2c]; 
0x0000000000047139: sar byte ptr [rdi + 2], cl; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000fa343: sar byte ptr [rdi + rdi + 0x74], 1; ret; 
0x00000000000f0a7f: sar byte ptr [rdx + 1], 0xbe; or dword ptr [rax + rax], edx; movsxd rdi, dword ptr [rsp + 0xc]; mov eax, ecx; syscall; 
0x00000000001a5330: sar byte ptr [rdx - 0xc], 1; jmp qword ptr [rcx]; 
0x000000000012e3f7: sar byte ptr [rdx - 1], 0x48; mov esi, ebx; mov rdi, rbp; call rcx; 
0x0000000000086d85: sar byte ptr [rdx], 0x48; lea eax, dword ptr [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000002b61: sar byte ptr [rdx], cl; adc al, 0xe7; ret; 
0x000000000017495d: sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0x1749d7; mov ebp, 0xfb67d10d; ret; 
0x00000000000b9f71: sar byte ptr [rip - 0x1000], 1; setbe al; add rsp, 8; movzx eax, al; ret; 
0x000000000006e9f2: sar byte ptr [rsi + 0x11], 0x48; mov eax, dword ptr [rbx + 0x98]; mov rdi, rax; call qword ptr [rax + 0x20]; 
0x0000000000072f87: sar byte ptr [rsi + 0x16], 0x48; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x20]; sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x0000000000072e77: sar byte ptr [rsi + 0x16], 0x48; mov edx, dword ptr [rdi + 0xa0]; mov rax, qword ptr [rdx + 0x38]; sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x000000000007b495: sar byte ptr [rsi + 0x48], cl; mov rax, qword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000000f0824: sar byte ptr [rsi + 0x5401], cl; mov rdi, rbx; mov eax, ebp; mov r13d, dword ptr fs:[r12]; syscall; 
0x00000000000f60e6: sar byte ptr [rsi + 1], cl; mov rdi, rbp; call rbx; 
0x000000000002cb21: sar byte ptr [rsi + 8], 0x83; call 0x846542b; pop rbx; ret; 
0x0000000000174a7f: sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000000e4a73: sar ch, cl; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000019f370: sar dh, 0xf0; jmp qword ptr [rax + 3]; 
0x000000000006aa4c: sar dh, 0xff; jmp qword ptr [rsi + 0x44]; 
0x000000000006aba1: sar dh, 0xff; jmp qword ptr [rsi + 0x45]; 
0x000000000006a92c: sar dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000132509: sar dh, 0xff; jmp qword ptr [rsi - 0x77]; 
0x00000000001a6ee0: sar dh, 1; hlt; jmp rax; 
0x0000000000186948: sar dh, 1; sti; jmp qword ptr [rax]; 
0x00000000000321f3: sar dh, cl; jmp qword ptr [rsi + 0x2e]; 
0x000000000018dc69: sar dl, 0xff; mov ecx, fs; add al, byte ptr [rax]; add ecx, eax; cli; call rsp; 
0x00000000000721f8: sar dl, cl; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x0000000000036daf: sar dword ptr [r9 + 0xd], 0x48; mov esi, eax; mov eax, ecx; syscall; 
0x0000000000036f63: sar dword ptr [rax], 1; add byte ptr [rbp - 0x41d98a40], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x82; syscall; 
0x000000000014afb9: sar dword ptr [rbp + 0x63490003], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001ad174: sar dword ptr [rbp - 0xb], cl; jmp qword ptr [rdx]; 
0x00000000000fa293: sar dword ptr [rbx], 1; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa5ad: sar dword ptr [rcx + 0x119], 1; mov eax, ecx; syscall; 
0x0000000000036db0: sar dword ptr [rcx + 0xd], 0x48; mov esi, eax; mov eax, ecx; syscall; 
0x000000000003cd41: sar dword ptr [rcx], 0x30; add byte ptr [rax], al; and ecx, 0x7fffffff; mov dword ptr [rdx], ecx; mov dword ptr [rsi], ecx; ret; 
0x000000000014b2b9: sar dword ptr [rdx + 0x63490003], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000f5e57: sar dword ptr [rdx + 1], cl; mov esi, 1; mov rdi, r12; call rbx; 
0x00000000000f60d5: sar dword ptr [rdx + 1], cl; mov esi, 2; mov rdi, r12; call rbx; 
0x00000000000f5d23: sar dword ptr [rdx + 2], cl; mov esi, 1; mov rdi, r13; call rbx; 
0x00000000000f5e48: sar dword ptr [rdx + 2], cl; mov esi, 2; mov rdi, r13; call rbx; 
0x00000000000f5c9b: sar dword ptr [rdx + 3], cl; mov esi, 1; mov rdi, r14; call rbx; 
0x00000000000f5d14: sar dword ptr [rdx + 3], cl; mov esi, 2; mov rdi, r14; call rbx; 
0x000000000011fa7b: sar dword ptr [rdx + rbp], 0; add rsp, 8; ret; 
0x0000000000142b39: sar dword ptr [rdx], cl; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000019b074: sar dword ptr [rdx], cl; out dx, al; jmp qword ptr [rdx]; 
0x00000000000a094f: sar dword ptr [rsi + 0xd], 0; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000f2193: sar dword ptr [rsp + rbp + 0x64d8f700], 1; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000036701: sar eax, 0x10; ret; 
0x0000000000037555: sar eax, 0x1f; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000bf652: sar eax, 0x1f; lea rsp, qword ptr [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret; 
0x00000000000363cb: sar eax, 0x1f; not eax; and eax, ecx; ret; 
0x00000000000bf709: sar eax, 0x1f; pop rbx; ret; 
0x0000000000132ce4: sar eax, 0x1f; ret; 
0x00000000000366ba: sar eax, 0x1f; sub edx, ecx; not eax; and eax, edx; ret; 
0x000000000003600d: sar eax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000003aa9: sar eax, 1; cmp eax, ecx; mov bl, 0xf7; adc bh, byte ptr [rax]; cwde; ret; 
0x0000000000021b17: sar eax, 1; pop rbp; mov qword ptr [rip + 0x39c70f], rax; pop r12; ret; 
0x000000000007510c: sar eax, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x00000000000771d0: sar eax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000072e8a: sar eax, 2; ret; 
0x000000000010aafd: sar eax, 6; ret; 
0x000000000008bf81: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000005ec4a: sar ebp, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000189468: sar ebp, cl; out dx, al; jmp rsp; 
0x0000000000186779: sar ebx, 1; call rax; 
0x0000000000186779: sar ebx, 1; call rax; sar bl, cl; jmp qword ptr [rax]; 
0x00000000000529b2: sar ecx, -1; jmp qword ptr [rsi + 0x2e]; 
0x00000000001747e3: sar ecx, 1; jnp 0x1747a0; ret; 
0x000000000005fd86: sar ecx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1148], rcx; call qword ptr [rax + 0x38]; 
0x0000000000061b62: sar ecx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1158], rcx; call qword ptr [rax + 0x38]; 
0x00000000000f9647: sar edi, 0x1f; and edi, 0xfffffff0; add edi, 0x26; mov dword ptr fs:[rax], edi; mov eax, 0xffffffff; ret; 
0x000000000004c749: sar edi, 1; dec dword ptr [rax - 0x77]; ret 0x1beb; 
0x0000000000073348: sar edx, -1; xor eax, eax; pop rbx; ret; 
0x00000000000b154f: sar edx, 0x12; sub rdx, rcx; mov qword ptr [rbx], rdx; add rsp, 0xd0; pop rbx; ret; 
0x000000000003c874: sar edx, 0x1f; xor eax, edx; sub eax, edx; ret; 
0x000000000012dd82: sar edx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d0a3: sar edx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x000000000003c887: sar edx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x000000000005fe02: sar edx, 2; call qword ptr [rax + 0x38]; 
0x000000000005fa6f: sar edx, 2; mov rdx, r10; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x0000000000118f9a: sar edx, 4; add rdx, 1; syscall; 
0x00000000000b070a: sar edx, 7; sub rdx, rcx; lea rax, qword ptr [rsi + rdx]; add rsp, 0x18; ret; 
0x00000000000f6ce7: sar edx, cl; dec dword ptr [rax + 0x39]; ret; 
0x000000000008bf87: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000007966e: sar esi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000005fa6e: sar r10, 2; mov rdx, r10; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x000000000005ec49: sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000007510b: sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x000000000003600c: sar rax, 0x3f; not eax; and eax, ecx; ret; 
0x0000000000021b16: sar rax, 1; pop rbp; mov qword ptr [rip + 0x39c70f], rax; pop r12; ret; 
0x00000000000771cf: sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000072e89: sar rax, 2; ret; 
0x000000000010aafc: sar rax, 6; ret; 
0x000000000008bf80: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000005fd85: sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1148], rcx; call qword ptr [rax + 0x38]; 
0x0000000000061b61: sar rcx, 2; mov rdx, rcx; mov qword ptr [rbp - 0x1158], rcx; call qword ptr [rax + 0x38]; 
0x00000000000b154e: sar rdx, 0x12; sub rdx, rcx; mov qword ptr [rbx], rdx; add rsp, 0xd0; pop rbx; ret; 
0x000000000012dd81: sar rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d0a2: sar rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x000000000003c886: sar rdx, 0x3f; xor rax, rdx; sub rax, rdx; ret; 
0x000000000005fe01: sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000118f99: sar rdx, 4; add rdx, 1; syscall; 
0x00000000000b0709: sar rdx, 7; sub rdx, rcx; lea rax, qword ptr [rsi + rdx]; add rsp, 0x18; ret; 
0x000000000008bf86: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000001aad50: sbb ah, 0xf5; call qword ptr [rax]; 
0x0000000000186add: sbb ah, bh; inc eax; sbb esp, edi; call qword ptr [rax]; 
0x0000000000186add: sbb ah, bh; inc eax; sbb esp, edi; call qword ptr [rax]; sbb edi, esp; jmp qword ptr [rax + 0x1c]; 
0x0000000000186b1d: sbb ah, bh; push qword ptr [rax]; sbb bh, ah; inc dword ptr [rax - 0x2f0003e5]; sbb al, 0xfc; jmp qword ptr [rax]; 
0x0000000000022f0a: sbb ah, byte ptr [rax]; call rax; 
0x0000000000002699: sbb ah, cl; mov ah, 0xf4; out 0xdf, eax; syscall; 
0x0000000000179345: sbb ah, dh; jmp qword ptr [rbx]; 
0x000000000011fd89: sbb al, 0; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x00000000001aa498: sbb al, 0; add byte ptr [rax], al; hlt; ret 1; 
0x00000000001a6888: sbb al, 0; add byte ptr [rax], al; in al, 0x86; add dword ptr [rax], eax; sbb bl, 0xf4; call qword ptr [rdi]; 
0x0000000000198e30: sbb al, 0; add byte ptr [rax], al; mov word ptr [rax + rax - 0x120a0800], gs; jmp qword ptr [rbx]; 
0x000000000019ca48: sbb al, 0; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; call 0xffffffffbb09ca52; out dx, al; call qword ptr [rdi]; 
0x00000000001aeab0: sbb al, 0; add byte ptr [rax], al; or al, 9; add al, byte ptr [rax]; cmp byte ptr [rdx - 0xa], bl; call qword ptr [rdi]; 
0x00000000001a0740: sbb al, 0; add byte ptr [rax], al; pushfq; and eax, 0xc9b80001; int1; jmp qword ptr [rbp]; 
0x00000000000cb609: sbb al, 0; add byte ptr [rax], al; syscall; 
0x00000000000cb609: sbb al, 0; add byte ptr [rax], al; syscall; neg eax; ret; 
0x0000000000193a28: sbb al, 0; add byte ptr [rax], al; test byte ptr [rax], bl; add byte ptr [rax], dl; or esp, ebp; jmp qword ptr [rcx]; 
0x00000000001ad6d8: sbb al, 0; add byte ptr [rax], al; xor al, 0xf5; add dword ptr [rax], eax; sbb byte ptr [rcx], 0xf6; call rdi; 
0x000000000007ad65: sbb al, 0; add byte ptr [rbp + 0x482c75ed], al; add esp, 0x28; pop rbx; pop rbp; ret; 
0x000000000012a689: sbb al, 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000023fea: sbb al, 0x11; add byte ptr [rcx + rcx*4 - 9], cl; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x00000000001453b0: sbb al, 0x14; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000318f0: sbb al, 0x27; cmp dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x38e385]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f125b: sbb al, 0x41; mov eax, eax; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x13; syscall; 
0x00000000000f12fb: sbb al, 0x41; mov eax, eax; mov rsi, qword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 8]; mov eax, 0x14; syscall; 
0x0000000000002f64: sbb al, 0x44; nop; ret 0x5bdb; 
0x000000000007bd63: sbb al, 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x00000000001276fb: sbb al, 0x48; mov edi, dword ptr [rcx + 0x24]; mov eax, 1; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x00000000000eb620: sbb al, 0x48; mov esi, dword ptr [rsp + 0x10]; movsxd rdi, dword ptr [rsp + 0x18]; mov eax, ebx; syscall; 
0x00000000001b2ac4: sbb al, 0x49; add al, byte ptr [rax]; or byte ptr [rbx - 9], cl; jmp qword ptr [rax]; 
0x0000000000192dc4: sbb al, 0x4c; add byte ptr [rax], al; or byte ptr [rdx - 0x15], bl; jmp qword ptr [rsi]; 
0x000000000018ca0c: sbb al, 0x5d; add al, byte ptr [rax]; fidivr dword ptr [rax - 8]; dec dword ptr [rsp + rbx*2 + 0x78f90002]; clc; call rsp; 
0x00000000001a4bc4: sbb al, 0x6a; add dword ptr [rax], eax; fsub dword ptr [rbx - 0xc]; jmp qword ptr [rcx]; 
0x000000000018cc24: sbb al, 0x6d; add al, byte ptr [rax]; mov ah, 0xa6; clc; jmp rsp; 
0x00000000000e3ee3: sbb al, 0x80; cmp cl, bh; mov dword ptr [rsi], 0; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x00000000001a62c4: sbb al, 0x81; add dword ptr [rax], eax; pop rax; ret; 
0x00000000000f3bc3: sbb al, 0x83; ret; 
0x00000000001a69c4: sbb al, 0x88; add dword ptr [rax], eax; or bh, bl; hlt; jmp qword ptr [rcx]; 
0x00000000000e2b50: sbb al, 0x9a; add rbx, r10; jmp rbx; 
0x00000000001a7cc4: sbb al, 0x9b; add dword ptr [rax], eax; mov byte ptr [rdi], ch; cmc; jmp qword ptr [rcx]; 
0x00000000000d0b93: sbb al, 0xb8; add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000c7c11: sbb al, 0xb; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000001aa7c4: sbb al, 0xc6; add dword ptr [rax], eax; sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x0000000000000454: sbb al, 0xc; ret 0x4412; 
0x000000000019973a: sbb al, 0xd; adc ah, bl; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019683a: sbb al, 0xd; adc al, 0x85; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001ace62: sbb al, 0xd; adc byte ptr [rbx - 0xb], bh; jmp qword ptr [rdx]; 
0x00000000001949ba: sbb al, 0xd; adc byte ptr [rdi - 0x13], ch; jmp qword ptr [rdx]; 
0x00000000001a8fa2: sbb al, 0xd; add al, 0xe3; hlt; jmp qword ptr [rdx]; 
0x000000000019a6e2: sbb al, 0xd; add bh, dl; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001ab1da: sbb al, 0xd; add bl, byte ptr [rbx - 0xb]; jmp qword ptr [rdx]; 
0x000000000018e722: sbb al, 0xd; add bl, byte ptr [rsi - 0x17]; jmp qword ptr [rdx]; 
0x00000000001ac9a2: sbb al, 0xd; add byte ptr [rbx - 0xb], dh; jmp qword ptr [rdx]; 
0x000000000019985a: sbb al, 0xd; add ch, bl; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a6722: sbb al, 0xd; add ch, byte ptr [rcx - 0xc]; jmp qword ptr [rdx]; 
0x00000000001ac792: sbb al, 0xd; add ch, byte ptr [rsi - 0xb]; jmp qword ptr [rdx]; 
0x000000000019304a: sbb al, 0xd; add ecx, dword ptr [rdx - 0x15]; jmp qword ptr [rdx]; 
0x0000000000198fb2: sbb al, 0xd; add esi, ebx; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a0532: sbb al, 0xd; and al, 0x76; int1; jmp qword ptr [rdx]; 
0x00000000001b0f22: sbb al, 0xd; and bh, byte ptr [rsi + rsi*8]; jmp qword ptr [rdx]; 
0x0000000000194d22: sbb al, 0xd; and byte ptr [rdx - 0x13], dh; jmp qword ptr [rdx]; 
0x00000000001a8a72: sbb al, 0xd; and dh, bl; hlt; jmp qword ptr [rdx]; 
0x00000000001a9842: sbb al, 0xd; and ebp, ebp; hlt; jmp qword ptr [rdx]; 
0x00000000001accaa: sbb al, 0xd; and edi, dword ptr [rdx - 0xb]; jmp qword ptr [rdx]; 
0x000000000019544a: sbb al, 0xd; bnd je 0x19543c; jmp qword ptr [rdx]; 
0x000000000019a69a: sbb al, 0xd; bnd jnp 0x19a69b; jmp qword ptr [rdx]; 
0x000000000019ad5a: sbb al, 0xd; cdq; xor dh, ch; jmp qword ptr [rdx]; 
0x00000000001ab222: sbb al, 0xd; clc; pop rdx; cmc; jmp qword ptr [rdx]; 
0x000000000019b26a: sbb al, 0xd; cld; out dx, al; jmp qword ptr [rdx]; 
0x000000000019492a: sbb al, 0xd; cld; outsb dx, byte ptr [rsi]; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001aaa9a: sbb al, 0xd; cli; push rax; cmc; jmp qword ptr [rdx]; 
0x00000000001a141a: sbb al, 0xd; cmc; xchg ecx, esi; jmp qword ptr [rdx]; 
0x00000000001a1032: sbb al, 0xd; cmp al, 0x80; int1; jmp qword ptr [rdx]; 
0x00000000001af07a: sbb al, 0xd; cmp al, 0xe1; cmc; jmp qword ptr [rdx]; 
0x00000000001a0daa: sbb al, 0xd; cmp bh, byte ptr [rdi - 0xf]; jmp qword ptr [rdx]; 
0x000000000019b102: sbb al, 0xd; cmp byte ptr [rbx], bh; out dx, al; jmp qword ptr [rdx]; 
0x00000000001999c2: sbb al, 0xd; cmp ch, bh; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a8db2: sbb al, 0xd; cmp cl, ah; hlt; jmp qword ptr [rdx]; 
0x000000000019b38a: sbb al, 0xd; cmp dword ptr [rdx - 0x12], eax; jmp qword ptr [rdx]; 
0x0000000000199a52: sbb al, 0xd; cmpsd dword ptr [rsi], dword ptr [rdi]; out dx, eax; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019ae32: sbb al, 0xd; cmpsd dword ptr [rsi], dword ptr [rdi]; xor ebp, esi; jmp qword ptr [rdx]; 
0x00000000001aff22: sbb al, 0xd; cwde; and dh, dh; jmp qword ptr [rdx]; 
0x000000000019b462: sbb al, 0xd; dec dword ptr [rcx - 0x12]; jmp qword ptr [rdx]; 
0x000000000019fc9a: sbb al, 0xd; fcomi st(0); jmp qword ptr [rdx]; 
0x00000000001acfaa: sbb al, 0xd; fdivr dword ptr [rbp - 0xb]; jmp qword ptr [rdx]; 
0x000000000019419a: sbb al, 0xd; fdivr dword ptr [rdi - 0x14]; jmp qword ptr [rdx]; 
0x00000000001960aa: sbb al, 0xd; fdivr qword ptr [rsi - 0x13]; jmp qword ptr [rdx]; 
0x00000000001a0d62: sbb al, 0xd; fidivr word ptr [rsi - 0xf]; jmp qword ptr [rdx]; 
0x0000000000193002: sbb al, 0xd; fmul dword ptr [rcx - 0x15]; jmp qword ptr [rdx]; 
0x000000000019457a: sbb al, 0xd; fucomi st(4); jmp qword ptr [rdx]; 
0x00000000001ab59a: sbb al, 0xd; hlt; pop rsp; cmc; jmp qword ptr [rdx]; 
0x00000000001a1a82: sbb al, 0xd; hlt; xchg eax, ecx; int1; jmp qword ptr [rdx]; 
0x000000000019a8da: sbb al, 0xd; idiv dh; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a8f12: sbb al, 0xd; in al, 0xe2; hlt; jmp qword ptr [rdx]; 
0x0000000000199b72: sbb al, 0xd; in al, 0xf3; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001968d2: sbb al, 0xd; in al, dx; test ch, ch; jmp qword ptr [rdx]; 
0x00000000001ab33a: sbb al, 0xd; in eax, 0x5a; cmc; jmp qword ptr [rdx]; 
0x0000000000198ffa: sbb al, 0xd; in eax, dx; fsubp st(5); jmp qword ptr [rdx]; 
0x00000000001a98da: sbb al, 0xd; in eax, dx; hlt; jmp qword ptr [rdx]; 
0x00000000001998ea: sbb al, 0xd; in eax, dx; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001ab3ba: sbb al, 0xd; in eax, dx; pop rdx; cmc; jmp qword ptr [rdx]; 
0x000000000019291a: sbb al, 0xd; insb byte ptr [rdi], dx; and ebp, ebx; jmp qword ptr [rdx]; 
0x0000000000196d0a: sbb al, 0xd; insb byte ptr [rdi], dx; test ebp, ebp; jmp qword ptr [rdx]; 
0x0000000000192962: sbb al, 0xd; insd dword ptr [rdi], dx; and ebp, ebx; jmp qword ptr [rdx]; 
0x0000000000195732: sbb al, 0xd; int 0x77; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001ad8aa: sbb al, 0xd; int 0x84; cmc; jmp qword ptr [rdx]; 
0x00000000001980d2: sbb al, 0xd; int1; stosd dword ptr [rdi], eax; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019873a: sbb al, 0xd; jno 0x1986fa; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001af64a: sbb al, 0xd; jno 0x1af63e; cmc; jmp qword ptr [rdx]; 
0x00000000001abe5a: sbb al, 0xd; jnp 0x1abec7; cmc; jmp qword ptr [rdx]; 
0x000000000019961a: sbb al, 0xd; jns 0x1995f9; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001997ca: sbb al, 0xd; jns 0x1997aa; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019ae7a: sbb al, 0xd; jns 0x19aeb5; out dx, al; jmp qword ptr [rdx]; 
0x0000000000193f02: sbb al, 0xd; jp 0x193f85; in al, dx; jmp qword ptr [rdx]; 
0x0000000000195922: sbb al, 0xd; jp 0x195914; jmp qword ptr [rdx]; 
0x00000000001acd82: sbb al, 0xd; jp 0x1acd7c; jmp qword ptr [rdx]; 
0x00000000001ab0ca: sbb al, 0xd; lcall ptr [rdx - 0xb]; jmp qword ptr [rdx]; 
0x00000000001aaffa: sbb al, 0xd; lea ebx, dword ptr [rdx - 0xb]; jmp qword ptr [rdx]; 
0x0000000000194baa: sbb al, 0xd; lea esi, dword ptr [rcx - 0x13]; jmp qword ptr [rdx]; 
0x000000000019ac3a: sbb al, 0xd; ljmp ptr [rax]; out dx, al; jmp qword ptr [rdx]; 
0x0000000000196b6a: sbb al, 0xd; lodsd eax, dword ptr [rsi]; test ch, ch; jmp qword ptr [rdx]; 
0x0000000000195afa: sbb al, 0xd; loope 0x195b7a; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019ac82: sbb al, 0xd; loope 0x19acae; out dx, al; jmp qword ptr [rdx]; 
0x00000000001ad12a: sbb al, 0xd; loope 0x1ad1ab; cmc; jmp qword ptr [rdx]; 
0x00000000001aefa2: sbb al, 0xd; loope 0x1aef9c; jmp qword ptr [rdx]; 
0x00000000001aefea: sbb al, 0xd; loope 0x1aefe4; jmp qword ptr [rdx]; 
0x00000000001af032: sbb al, 0xd; loope 0x1af02c; jmp qword ptr [rdx]; 
0x00000000001af24a: sbb al, 0xd; loope 0x1af244; jmp qword ptr [rdx]; 
0x0000000000199812: sbb al, 0xd; mov ah, 0xdc; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001abffa: sbb al, 0xd; mov al, 0x69; cmc; jmp qword ptr [rdx]; 
0x0000000000194532: sbb al, 0xd; mov al, 0x87; in al, dx; jmp qword ptr [rdx]; 
0x00000000001ae7f2: sbb al, 0xd; mov al, 0x9b; cmc; jmp qword ptr [rdx]; 
0x00000000001abea2: sbb al, 0xd; mov bh, 0x69; cmc; jmp qword ptr [rdx]; 
0x00000000001996aa: sbb al, 0xd; mov bl, bl; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001ade32: sbb al, 0xd; mov bp, si; jmp qword ptr [rdx]; 
0x00000000001ac7da: sbb al, 0xd; mov byte ptr [rsi - 0xb], ch; jmp qword ptr [rdx]; 
0x00000000001a0c32: sbb al, 0xd; mov byte ptr [rsi - 0xf], bh; jmp qword ptr [rdx]; 
0x00000000001aabe2: sbb al, 0xd; mov ch, 0x51; cmc; jmp qword ptr [rdx]; 
0x000000000019b612: sbb al, 0xd; mov ch, 0x51; out dx, al; jmp qword ptr [rdx]; 
0x0000000000196ada: sbb al, 0xd; mov ch, 0x84; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019a96a: sbb al, 0xd; mov ch, 0xff; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001aaa0a: sbb al, 0xd; mov cl, 0x22; sti; jmp qword ptr [rdx]; 
0x000000000019b02a: sbb al, 0xd; mov cl, 0x3a; out dx, al; jmp qword ptr [rdx]; 
0x00000000001ab7ba: sbb al, 0xd; mov cl, 0x5c; cmc; jmp qword ptr [rdx]; 
0x0000000000199ae2: sbb al, 0xd; mov cl, 0xef; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001af6da: sbb al, 0xd; mov cl, 0xf1; cmc; jmp qword ptr [rdx]; 
0x00000000001ab802: sbb al, 0xd; mov dh, 0x5c; cmc; jmp qword ptr [rdx]; 
0x00000000001a1612: sbb al, 0xd; mov dh, 0x89; int1; jmp qword ptr [rdx]; 
0x0000000000194c1a: sbb al, 0xd; mov dh, byte ptr [rcx - 0x13]; jmp qword ptr [rdx]; 
0x00000000001b588a: sbb al, 0xd; mov dh, byte ptr [rdi + rsi*8]; jmp qword ptr [rdx]; 
0x000000000019ad12: sbb al, 0xd; mov dl, 0x2b; out dx, al; jmp qword ptr [rdx]; 
0x00000000001ae51a: sbb al, 0xd; mov dl, 0x97; cmc; jmp qword ptr [rdx]; 
0x00000000001a95a2: sbb al, 0xd; mov dl, 0xea; hlt; jmp qword ptr [rdx]; 
0x000000000019a9fa: sbb al, 0xd; mov dl, 0xff; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019abf2: sbb al, 0xd; mov dword ptr [rbx], edx; out dx, al; jmp qword ptr [rdx]; 
0x000000000019736a: sbb al, 0xd; mov ebp, ebp; jmp qword ptr [rdx]; 
0x000000000019a802: sbb al, 0xd; mov edi, esi; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001adcf2: sbb al, 0xd; mov r13, r14; jmp qword ptr [rdx]; 
0x00000000001adbd2: sbb al, 0xd; mov r13d, esi; jmp qword ptr [rdx]; 
0x00000000001a12ba: sbb al, 0xd; mov r9b, r14b; jmp qword ptr [rdx]; 
0x00000000001a1302: sbb al, 0xd; mov r9b, sil; jmp qword ptr [rdx]; 
0x00000000001adfd2: sbb al, 0xd; mov sil, bpl; jmp qword ptr [rdx]; 
0x00000000001ae01a: sbb al, 0xd; mov sil, r13b; jmp qword ptr [rdx]; 
0x00000000001a191a: sbb al, 0xd; movsb byte ptr [rdi], byte ptr [rsi]; mov dh, cl; jmp qword ptr [rdx]; 
0x00000000001ae562: sbb al, 0xd; movsb byte ptr [rdi], byte ptr [rsi]; xchg eax, edi; cmc; jmp qword ptr [rdx]; 
0x000000000019abaa: sbb al, 0xd; movsd dword ptr [rdi], dword ptr [rsi]; adc ebp, esi; jmp qword ptr [rdx]; 
0x00000000001a8e82: sbb al, 0xd; mul dl; hlt; jmp qword ptr [rdx]; 
0x0000000000198f6a: sbb al, 0xd; neg ch; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001afc6a: sbb al, 0xd; nop; and dh, dh; jmp qword ptr [rdx]; 
0x00000000001b5c2a: sbb al, 0xd; nop; xor esi, edi; jmp qword ptr [rdx]; 
0x00000000001ac8da: sbb al, 0xd; or al, 0x72; cmc; jmp qword ptr [rdx]; 
0x000000000018fc1a: sbb al, 0xd; or bpl, r10b; jmp qword ptr [rdx]; 
0x00000000001ab5e2: sbb al, 0xd; or byte ptr [rbp - 0xb], bl; jmp qword ptr [rdx]; 
0x000000000018e64a: sbb al, 0xd; or dword ptr [rbp - 0x17], ebx; jmp qword ptr [rdx]; 
0x00000000001a9c8a: sbb al, 0xd; or ebx, esi; hlt; jmp qword ptr [rdx]; 
0x00000000001a91b2: sbb al, 0xd; or ecx, ebp; hlt; jmp qword ptr [rdx]; 
0x00000000001ab84a: sbb al, 0xd; out 0x5c, al; cmc; jmp qword ptr [rdx]; 
0x0000000000196062: sbb al, 0xd; out 0x7e, al; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001996f2: sbb al, 0xd; out 0xdb, eax; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a8d6a: sbb al, 0xd; out 0xdf, al; hlt; jmp qword ptr [rdx]; 
0x000000000019ab62: sbb al, 0xd; out dx, al; adc ch, dh; jmp qword ptr [rdx]; 
0x00000000001a8bea: sbb al, 0xd; out dx, al; fdivrp st(4); jmp qword ptr [rdx]; 
0x000000000019b342: sbb al, 0xd; out dx, al; jmp qword ptr [rdx]; 
0x00000000001ab2aa: sbb al, 0xd; out dx, eax; pop rdx; cmc; jmp qword ptr [rdx]; 
0x000000000019691a: sbb al, 0xd; out dx, eax; test ch, ch; jmp qword ptr [rdx]; 
0x0000000000194a02: sbb al, 0xd; outsd dx, dword ptr [rsi]; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019c542: sbb al, 0xd; pop rax; pop rdi; out dx, al; jmp qword ptr [rdx]; 
0x00000000001adae2: sbb al, 0xd; pop rbp; mov ebp, esi; jmp qword ptr [rdx]; 
0x000000000019c422: sbb al, 0xd; pop rbp; out dx, al; jmp qword ptr [rdx]; 
0x00000000001ab192: sbb al, 0xd; pop rdx; cmc; jmp qword ptr [rdx]; 
0x00000000001971da: sbb al, 0xd; pop rdx; mov ebp, ebp; jmp qword ptr [rdx]; 
0x00000000001b5c72: sbb al, 0xd; pop rsi; xor esi, edi; jmp qword ptr [rdx]; 
0x000000000019596a: sbb al, 0xd; pop rsp; jp 0x19595c; jmp qword ptr [rdx]; 
0x00000000001af10a: sbb al, 0xd; pop rsp; loope 0x1af104; jmp qword ptr [rdx]; 
0x00000000001a8b1a: sbb al, 0xd; push -0x22; hlt; jmp qword ptr [rdx]; 
0x00000000001955d2: sbb al, 0xd; push 0x76; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019b582: sbb al, 0xd; push r9; out dx, al; jmp qword ptr [rdx]; 
0x00000000001adb2a: sbb al, 0xd; push rax; mov ebp, esi; jmp qword ptr [rdx]; 
0x00000000001ad9ea: sbb al, 0xd; push rax; xchg ebp, esi; jmp qword ptr [rdx]; 
0x000000000018fcf2: sbb al, 0xd; push rbp; adc edx, ebp; jmp qword ptr [rdx]; 
0x00000000001aaae2: sbb al, 0xd; push rcx; cmc; jmp qword ptr [rdx]; 
0x000000000019fd2a: sbb al, 0xd; push rdi; fcomi st(0); jmp qword ptr [rdx]; 
0x00000000001ae13a: sbb al, 0xd; push rdi; mov dh, ch; jmp qword ptr [rdx]; 
0x00000000001a9922: sbb al, 0xd; push rsi; in eax, dx; hlt; jmp qword ptr [rdx]; 
0x00000000001a1272: sbb al, 0xd; push rsi; mov cl, dh; jmp qword ptr [rdx]; 
0x00000000001958da: sbb al, 0xd; push rsp; jns 0x1958cc; jmp qword ptr [rdx]; 
0x00000000001969da: sbb al, 0xd; ret 0xed84; 
0x000000000019b1da: sbb al, 0xd; ret 0xee3c; 
0x00000000001ad772: sbb al, 0xd; ret 0xf582; 
0x00000000001ade7a: sbb al, 0xd; ret 0xf589; 
0x00000000001af292: sbb al, 0xd; ret 0xf5e1; 
0x0000000000194c62: sbb al, 0xd; ret; 
0x0000000000192a3a: sbb al, 0xd; sahf; and al, 0xeb; jmp qword ptr [rdx]; 
0x000000000019a7ba: sbb al, 0xd; sar ah, 0xed; jmp qword ptr [rdx]; 
0x00000000001ad172: sbb al, 0xd; sar dword ptr [rbp - 0xb], cl; jmp qword ptr [rdx]; 
0x000000000019b072: sbb al, 0xd; sar dword ptr [rdx], cl; out dx, al; jmp qword ptr [rdx]; 
0x00000000001a9c42: sbb al, 0xd; sbb al, 0xf3; hlt; jmp qword ptr [rdx]; 
0x00000000001abd42: sbb al, 0xd; sbb dword ptr [rcx - 0xb], ebp; jmp qword ptr [rdx]; 
0x0000000000195c0a: sbb al, 0xd; sbb dword ptr [rsi - 0x13], edi; jmp qword ptr [rdx]; 
0x00000000001a916a: sbb al, 0xd; sbb ecx, ebp; hlt; jmp qword ptr [rdx]; 
0x000000000019c4b2: sbb al, 0xd; scasb al, byte ptr [rdi]; pop rsi; out dx, al; jmp qword ptr [rdx]; 
0x00000000001929aa: sbb al, 0xd; shl dword ptr [rbx], -0x15; jmp qword ptr [rdx]; 
0x00000000001a962a: sbb al, 0xd; shr dl, 1; hlt; jmp qword ptr [rdx]; 
0x00000000001ac592: sbb al, 0xd; shr dword ptr [rdx - 0xb], cl; jmp qword ptr [rdx]; 
0x000000000019997a: sbb al, 0xd; shr ebp, cl; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000199b2a: sbb al, 0xd; sti; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019b53a: sbb al, 0xd; sti; out dx, al; jmp qword ptr [rdx]; 
0x000000000018fc62: sbb al, 0xd; stosb byte ptr [rdi], al; or al, 0xea; jmp qword ptr [rdx]; 
0x000000000019b3d2: sbb al, 0xd; stosb byte ptr [rdi], al; out dx, al; jmp qword ptr [rdx]; 
0x0000000000194a4a: sbb al, 0xd; sub al, 0x6f; in eax, dx; jmp qword ptr [rdx]; 
0x000000000019515a: sbb al, 0xd; sub al, 0x74; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a0602: sbb al, 0xd; sub al, 0x76; int1; jmp qword ptr [rdx]; 
0x000000000019673a: sbb al, 0xd; sub al, 0x83; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001adc62: sbb al, 0xd; sub al, 0x89; cmc; jmp qword ptr [rdx]; 
0x000000000019a72a: sbb al, 0xd; sub al, 0xfb; in eax, dx; jmp qword ptr [rdx]; 
0x000000000018e602: sbb al, 0xd; sub bl, byte ptr [rbp - 0x17]; jmp qword ptr [rdx]; 
0x00000000001acc1a: sbb al, 0xd; sub byte ptr [rdx - 0xb], bh; jmp qword ptr [rdx]; 
0x00000000001a97fa: sbb al, 0xd; sub ch, ah; hlt; jmp qword ptr [rdx]; 
0x0000000000198852: sbb al, 0xd; test al, 0xbc; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000199a9a: sbb al, 0xd; test al, 0xef; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a0e32: sbb al, 0xd; test byte ptr [rdi - 0xf], bh; jmp qword ptr [rdx]; 
0x00000000001af1a2: sbb al, 0xd; test ecx, esp; cmc; jmp qword ptr [rdx]; 
0x000000000019b14a: sbb al, 0xd; xchg byte ptr [rsi + rbp*8], bh; jmp qword ptr [rdx]; 
0x00000000001ad9a2: sbb al, 0xd; xchg ch, dh; jmp qword ptr [rdx]; 
0x00000000001a8ba2: sbb al, 0xd; xchg dh, bl; hlt; jmp qword ptr [rdx]; 
0x000000000019c4fa: sbb al, 0xd; xchg dword ptr [rdi - 0x12], ebx; jmp qword ptr [rdx]; 
0x00000000001a06e2: sbb al, 0xd; xchg dword ptr [rsi - 0xf], esi; jmp qword ptr [rdx]; 
0x00000000001ace1a: sbb al, 0xd; xchg eax, ebp; jp 0x1ace14; jmp qword ptr [rdx]; 
0x00000000001aaa52: sbb al, 0xd; xchg eax, ebx; and bh, bl; jmp qword ptr [rdx]; 
0x0000000000192a82: sbb al, 0xd; xchg eax, ecx; and al, 0xeb; jmp qword ptr [rdx]; 
0x000000000019b0ba: sbb al, 0xd; xchg eax, edi; cmp ch, dh; jmp qword ptr [rdx]; 
0x00000000001a1b5a: sbb al, 0xd; xchg eax, edx; int1; jmp qword ptr [rdx]; 
0x00000000001a17fa: sbb al, 0xd; xchg eax, esi; mov dh, cl; jmp qword ptr [rdx]; 
0x00000000001a9bfa: sbb al, 0xd; xchg eax, esp; hlt; jmp qword ptr [rdx]; 
0x00000000001944ea: sbb al, 0xd; xchg r12d, r13d; jmp qword ptr [rdx]; 
0x0000000000194322: sbb al, 0xd; xor al, 0x80; in al, dx; jmp qword ptr [rdx]; 
0x00000000001ae0aa: sbb al, 0xd; xor al, 0x8a; cmc; jmp qword ptr [rdx]; 
0x00000000001b591a: sbb al, 0xd; xor al, 0xf7; jmp qword ptr [rdx]; 
0x000000000019adea: sbb al, 0xd; xor bpl, sil; jmp qword ptr [rdx]; 
0x00000000001b5962: sbb al, 0xd; xor byte ptr [rdi + rsi*8], dh; jmp qword ptr [rdx]; 
0x00000000001acc62: sbb al, 0xd; xor dword ptr [rdx - 0xb], edi; jmp qword ptr [rdx]; 
0x000000000019b4f2: sbb al, 0xd; xor ecx, dword ptr [rdi - 0x12]; jmp qword ptr [rdx]; 
0x000000000019a892: sbb al, 0xd; xor edi, esi; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001b5cd2: sbb al, 0xd; xor esi, r15d; jmp qword ptr [rdx]; 
0x000000000019bdc4: sbb al, 0xdc; add byte ptr [rax], al; cmp byte ptr [rax - 0x12], dh; call qword ptr [rsi]; 
0x00000000001ac3c4: sbb al, 0xe2; add dword ptr [rax], eax; cwde; cld; cmc; call qword ptr [rax]; 
0x0000000000029c8c: sbb al, 0xeb; ret 0x8948; 
0x0000000000177004: sbb al, 0xf1; in eax, dx; jmp rax; 
0x0000000000177000: sbb al, 0xf1; in eax, dx; lcall ptr [rcx + rsi*8]; in eax, dx; jmp rax; 
0x00000000001a9c44: sbb al, 0xf3; hlt; jmp qword ptr [rdx]; 
0x00000000001a74c1: sbb al, 0xf5; call qword ptr [rdi + 1]; 
0x000000000018c4c1: sbb al, 0xf8; inc dword ptr [rdi + rsi + 0x1ca40002]; clc; jmp rsp; 
0x000000000018c4c9: sbb al, 0xf8; jmp rsp; 
0x00000000001867cc: sbb al, 0xfb; lcall ptr [rax + 4]; cld; jmp qword ptr [rax]; 
0x0000000000186b29: sbb al, 0xfc; jmp qword ptr [rax]; 
0x00000000000fa6db: sbb al, 1; add byte ptr [rax], al; syscall; 
0x000000000018985d: sbb al, 1; add byte ptr [rdi + 0x4f], ah; out dx, eax; lcall ptr [rsp + rbx + 0x4f820001]; out dx, eax; jmp rsp; 
0x0000000000007c88: sbb al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000f490a: sbb al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000000fa19: sbb al, byte ptr [rax]; add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; call qword ptr [rax]; 
0x00000000000a369c: sbb al, byte ptr [rcx - 0x75]; add dword ptr [rcx + 0x39], eax; ret; 
0x00000000000fa64c: sbb al, byte ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000001afbbd: sbb al, byte ptr [rdx]; add al, al; mov bl, 0xf6; call qword ptr [rcx]; 
0x00000000001afbd5: sbb al, byte ptr [rdx]; add al, cl; mov bl, 0xf6; jmp qword ptr [rcx]; 
0x0000000000187248: sbb al, byte ptr [rsi - 0x7a550004]; cld; call qword ptr [rax - 0x7b]; 
0x000000000000fa18: sbb al, byte ptr cs:[rax]; add byte ptr [rdx], dl; add byte ptr [rax + rax], cl; push rax; call qword ptr [rax]; 
0x0000000000108f77: sbb al, ch; and eax, dword ptr [rax]; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x00000000001092b2: sbb al, ch; mov byte ptr [rcx], cl; hlt; inc dword ptr [rbp - 0x7b]; in al, 0x89; ret 0x87e; 
0x0000000000054591: sbb al, ch; mov ebx, ebx; add dword ptr [rax], eax; add rsp, 0xd8; ret; 
0x00000000001090c2: sbb al, ch; or byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x000000000005e411: sbb al, ch; or dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0xd8; ret; 
0x0000000000041d87: sbb al, ch; ret; 
0x000000000004066f: sbb al, ch; sti; syscall; 
0x000000000010b542: sbb al, ch; test al, 0x35; cmc; inc dword ptr [rbp - 0x7b]; in al, 0x89; ret 0x87e; 
0x00000000001a6a10: sbb bh, 0xf4; jmp qword ptr [rcx]; 
0x0000000000186b21: sbb bh, ah; inc dword ptr [rax - 0x2f0003e5]; sbb al, 0xfc; jmp qword ptr [rax]; 
0x000000000012a9fe: sbb bh, al; add byte ptr [rdi], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x20]; 
0x000000000012a812: sbb bh, al; add byte ptr [rdi], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + rcx*4 - 0x11], r9b; call qword ptr [rax + 0x20]; 
0x00000000000ae1a9: sbb bh, al; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000018c491: sbb bh, al; jmp rsp; 
0x0000000000186245: sbb bh, bl; inc eax; sbb edi, ebx; jmp rax; 
0x0000000000186241: sbb bh, bl; push rax; sbb bh, bl; inc eax; sbb edi, ebx; jmp rax; 
0x00000000000d0b4a: sbb bh, byte ptr [rax + 2]; ret; 
0x000000000002221e: sbb bh, byte ptr [rdx]; add byte ptr [rcx + rcx*4 + 5], al; fcomp dword ptr [rcx]; cmp al, byte ptr [rax]; pop rbx; ret; 
0x00000000001a6890: sbb bl, 0xf4; call qword ptr [rdi]; 
0x00000000000cb1de: sbb bl, al; mov eax, 0x8e; syscall; 
0x0000000000186239: sbb bl, bh; call qword ptr [rax + 0x19]; 
0x0000000000186239: sbb bl, bh; call qword ptr [rax + 0x19]; sti; jmp qword ptr [rax]; 
0x0000000000173565: sbb bl, byte ptr [rsi]; ret; 
0x000000000007b22b: sbb bl, ch; fldenv dword ptr [rsi - 0x70]; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000027046: sbb bl, ch; ret 0x1f0f; 
0x000000000009f49a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009dc8a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x000000000009e6aa: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009f4fa: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009d01a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000009e66b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009f4bb: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009cfdb: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000000eb09b: sbb bl, dh; ret; 
0x000000000009f499: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009dc89: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov byte ptr [rdi + 0x18], cl; ret; 
0x000000000009e6a9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1b]; ret; 
0x000000000009f4f9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, qword ptr [rdi + 0x1c]; ret; 
0x000000000009d019: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000009e66a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x19]; ret; 
0x000000000009f4ba: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, qword ptr [rdi + 0x1a]; ret; 
0x000000000009cfda: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000007d19a: sbb byte ptr [r11 + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000091f6b: sbb byte ptr [r11 + 0x5d], r11b; pop r12; pop r13; ret; 
0x000000000012e66d: sbb byte ptr [r11 + 0x5d], r11b; pop r12; ret; 
0x00000000001211be: sbb byte ptr [r11 + 0xb7603f8], r8b; mov eax, 2; ret; 
0x000000000012c38c: sbb byte ptr [r13 + r9*4 + 0x63], cl; adc bh, al; adc byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x0000000000073467: sbb byte ptr [r15 + 0xd], sil; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000000725de: sbb byte ptr [r8 + 0x29], cl; ret 0x8948; 
0x0000000000101f71: sbb byte ptr [r8 - 0x77], cl; imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000007b060: sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x00000000001641fa: sbb byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000007b9f9: sbb byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000a0f14: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000a0f36: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000a0f74: sbb byte ptr [r8], r14b; in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x000000000012c3d2: sbb byte ptr [r9 + r9*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x00000000000725f3: sbb byte ptr [r9 + r9*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000012c429: sbb byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rbx + rcx*4 + 0x24], cl; ret 0x854d; 
0x000000000012c581: sbb byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8348; 
0x000000000009d966: sbb byte ptr [r9 - 0x7d], r9b; call 0x7f972189; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x000000000009f085: sbb byte ptr [r9 - 0x7d], r9b; call 0x7f9738a7; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x00000000000725df: sbb byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000007bf45: sbb byte ptr [rax + 0x39], cl; and byte ptr [rsi + 0x1e], sil; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000000373a0: sbb byte ptr [rax + 0x450f4402], ch; ret 0x8944; 
0x00000000000f23de: sbb byte ptr [rax + 0x65], bh; mov dword ptr [rsp - 0x58], 0x18; syscall; 
0x00000000000c0b41: sbb byte ptr [rax + 0xf7], bh; mov edi, dword ptr [rsp + 0xc]; movsxd r10, ecx; syscall; 
0x00000000000f9038: sbb byte ptr [rax + 1], bh; add rsp, 0x10; pop rbx; ret; 
0x000000000012e368: sbb byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000011afb1: sbb byte ptr [rax + 3], bh; syscall; 
0x0000000000127503: sbb byte ptr [rax + rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000ed089: sbb byte ptr [rax - 0x75], cl; adc al, 0x24; mov rsi, qword ptr [rsp + 0x10]; mov eax, 0x10f; mov rdi, qword ptr [rsp + 8]; syscall; 
0x00000000000c20f3: sbb byte ptr [rax - 0x75], cl; add eax, 0x301f5d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c2083: sbb byte ptr [rax - 0x75], cl; add eax, 0x301fcd; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000078409: sbb byte ptr [rax - 0x75], cl; add eax, 0x345b2f; mov rdi, qword ptr [rax]; call 0x5eaf0; add rsp, 0xd8; ret; 
0x000000000005d11b: sbb byte ptr [rax - 0x75], cl; add eax, 0x360e95; mov rdi, qword ptr [rax]; call 0x54630; add rsp, 0xd8; ret; 
0x00000000000543c9: sbb byte ptr [rax - 0x75], cl; add eax, 0x369b6f; mov rdi, qword ptr [rax]; call 0x49c40; add rsp, 0xd8; ret; 
0x00000000000bdc06: sbb byte ptr [rax - 0x75], cl; and al, 0x10; mov qword ptr [rsp], rdx; mov rdx, qword ptr [rsp + 0x28]; call rax; 
0x000000000003c818: sbb byte ptr [rax - 0x75], cl; jnp 0x3c825; mov qword ptr [rax + 0x60], rdx; call qword ptr [rbx]; 
0x000000000007b029: sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000012125e: sbb byte ptr [rax - 0x75], cl; push rdx; cmp byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rax + 0x4c], cl; mov edi, esp; call rdx; 
0x000000000007b059: sbb byte ptr [rax - 0x77], cl; adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000027931: sbb byte ptr [rax - 0x77], cl; and al, 8; mov rax, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x70]; mov qword ptr [rsp], rax; call qword ptr [rbx]; 
0x000000000006f5da: sbb byte ptr [rax - 0x77], cl; call 0x5c48533d; pop r13; ret; 
0x0000000000023421: sbb byte ptr [rax - 0x77], cl; cwde; call rcx; 
0x000000000002cc74: sbb byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000007d79a: sbb byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000e4f10: sbb byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000101f72: sbb byte ptr [rax - 0x77], cl; imul ebx, dword ptr [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000011f470: sbb byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 8]; 
0x000000000007b061: sbb byte ptr [rax - 0x77], cl; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000035a07: sbb byte ptr [rax - 0x77], cl; ret 0x394d; 
0x00000000000bc308: sbb byte ptr [rax - 0x77], cl; ret 0x4775; 
0x00000000000e8324: sbb byte ptr [rax - 0x77], cl; ret 0x4c6; 
0x0000000000053751: sbb byte ptr [rax - 0x77], cl; ret 0x6349; 
0x000000000012171a: sbb byte ptr [rax - 0x77], cl; ret 0x894c; 
0x00000000000ed7a7: sbb byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000001027da: sbb byte ptr [rax - 0x77], cl; ret; 
0x00000000000c353f: sbb byte ptr [rax - 0x7b], cl; div byte ptr [rcx + rbx - 0x17]; xchg eax, esi; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000000b4e21: sbb byte ptr [rax - 0x7bf0f706], al; ret; 
0x0000000000091b06: sbb byte ptr [rax - 0x7d], cl; out dx, al; adc byte ptr [rax - 0x75], cl; sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x00000000000ed945: sbb byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000091b0e: sbb byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x0000000000082987: sbb byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000000da323: sbb byte ptr [rax - 0x7d], cl; ret; 
0x0000000000091b0d: sbb byte ptr [rax - 0x7d], r9b; ret 0x4802; 
0x0000000000112111: sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x0000000000186238: sbb byte ptr [rax], 0xfb; call qword ptr [rax + 0x19]; 
0x0000000000186238: sbb byte ptr [rax], 0xfb; call qword ptr [rax + 0x19]; sti; jmp qword ptr [rax]; 
0x00000000000ebe4c: sbb byte ptr [rax], ah; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000647f5: sbb byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x113299; movsxd rdx, dword ptr [rax + r12*4]; add rax, rdx; jmp rax; 
0x000000000001b16a: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; clc; ret 0x3b; 
0x000000000001b04a: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cwde; ret 0x3b; 
0x000000000001b34a: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; cwde; ret; 
0x000000000001b032: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; ret 0x3b; 
0x000000000001b332: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; ret; 
0x000000000001af8a: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret 0x3b; 
0x000000000001b28a: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rax; ret; 
0x000000000001af72: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret 0x3b; 
0x000000000001b272: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; push rax; ret; 
0x000000000007b9fa: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000001038d0: sbb byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; ret; 
0x00000000000cb2a1: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000001296b2: sbb byte ptr [rax], al; mov edx, 1; cmovne eax, edx; sub rsp, -0x80; pop rbx; ret; 
0x0000000000002440: sbb byte ptr [rax], cl; ret 0x5576; 
0x00000000000a0f15: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000a0f37: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000a0f75: sbb byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000cb163: sbb byte ptr [rbp + 0x31], al; leave; mov dword ptr [rsp], 0; call 0xcb0b0; add rsp, 0x18; ret; 
0x000000000011f549: sbb byte ptr [rbp + 0x486e74c0], al; mov eax, dword ptr [rbx + 0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000012c38d: sbb byte ptr [rbp + rcx*4 + 0x63], cl; adc bh, al; adc byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x28]; 
0x00000000000f494c: sbb byte ptr [rbp - 0x2708ffd4], dl; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000b9f23: sbb byte ptr [rbp - 0x77], cl; ror dword ptr [rcx - 0x77], -0x20; mov byte ptr [rsp], 0; call 0xb80f0; add rsp, 0x18; ret; 
0x00000000000bc253: sbb byte ptr [rbp - 0x77], cl; ror dword ptr [rcx - 0x77], -0x20; mov byte ptr [rsp], 0; call 0xb9fa0; add rsp, 0x18; ret; 
0x00000000000d3339: sbb byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x000000000001af28: sbb byte ptr [rbx + 0x18], bl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], bh; ret 0x3b; 
0x00000000000c81e0: sbb byte ptr [rbx + 0x1f0f404a], cl; add byte ptr [rax - 0x77], cl; fisttp qword ptr [rax - 0x7d]; ret; 
0x00000000000a3ae2: sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x00000000000a3950: sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000072552: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000008697a: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000012e66e: sbb byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000003d1ba: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000371e7: sbb byte ptr [rbx + 0x802484], cl; add byte ptr [rax], al; add rsp, 0x108; ret; 
0x0000000000037637: sbb byte ptr [rbx + 0xb7501e2], al; xor eax, eax; nop; ret; 
0x00000000001211bf: sbb byte ptr [rbx + 0xb7603f8], al; mov eax, 2; ret; 
0x000000000008c99f: sbb byte ptr [rbx + rcx*4 + 0x5e], cl; and byte ptr [rbx + rcx*4 + 0x66], cl; sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x00000000000d4d7f: sbb byte ptr [rbx + rcx*4 + 0x6e], cl; sub byte ptr [rbx + rcx*4 + 0x76], cl; xor byte ptr [rax + 0x39], cl; ret 0x830f; 
0x0000000000036b1d: sbb byte ptr [rbx + rcx*4 + 0x77], cl; and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx; 
0x00000000001b51d8: sbb byte ptr [rbx + rdi*8], al; jmp qword ptr [rdx]; 
0x000000000002ae58: sbb byte ptr [rbx - 0x14dbdbbc], cl; ret 0x8948; 
0x0000000000029c88: sbb byte ptr [rbx - 0x14e3dbbc], cl; ret 0x8948; 
0x000000000007c5c7: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000013051e: sbb byte ptr [rbx - 0x6bf0f502], al; ret; 
0x0000000000121bd3: sbb byte ptr [rbx - 0x783a17c5], cl; std; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x00000000001a8fd8: sbb byte ptr [rbx - 0xb], ah; jmp qword ptr [rcx]; 
0x0000000000186b24: sbb byte ptr [rbx], 0xfc; call rax; 
0x0000000000186b24: sbb byte ptr [rbx], 0xfc; call rax; sbb al, 0xfc; jmp qword ptr [rax]; 
0x00000000001a8268: sbb byte ptr [rbx], bh; cmc; jmp qword ptr [rcx]; 
0x00000000001a7928: sbb byte ptr [rbx], ch; cmc; jmp qword ptr [rcx]; 
0x000000000012e243: sbb byte ptr [rcx + 0x1b02857], cl; ret; 
0x0000000000041d99: sbb byte ptr [rcx + 0x39], cl; ret 0x840f; 
0x00000000000e4f96: sbb byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x000000000011c452: sbb byte ptr [rcx + 0x48142444], cl; mov edx, esp; movsxd rdi, dword ptr [rsp + 0x10]; movsxd rsi, ebp; mov eax, 0x81; syscall; 
0x0000000000037eff: sbb byte ptr [rcx + 0x48142444], cl; mov edx, esp; movsxd rsi, ebp; movsxd rdi, r12d; mov eax, 0x81; syscall; 
0x0000000000074f7b: sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000000759d0: sbb byte ptr [rcx + 0x5c], al; pop r13; pop r14; sar rax, 2; ret; 
0x000000000012f7eb: sbb byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8b41; 
0x000000000012122c: sbb byte ptr [rcx + rcx*4 - 0x12], al; mov rdi, r12; call qword ptr [rax + 0x30]; 
0x000000000012c3d3: sbb byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x0000000000126051: sbb byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x48]; 
0x00000000000725f4: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000814d0: sbb byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000011f5ab: sbb byte ptr [rcx + rcx*4 - 0xa], cl; call qword ptr [rax + 0x10]; 
0x00000000001898d8: sbb byte ptr [rcx - 0x11], dl; call rsp; 
0x00000000000fb2e3: sbb byte ptr [rcx - 0x2e9cb328], cl; syscall; 
0x0000000000104953: sbb byte ptr [rcx - 0x75], al; or r14b, r14b; ret 0x7508; 
0x000000000012b44f: sbb byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 8]; 
0x000000000012aa44: sbb byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000012a854: sbb byte ptr [rcx - 0x75], cl; or byte ptr [r9 + rcx*4 - 0x11], r9b; mov dword ptr [rdx], 0xe; lea rsi, qword ptr [rdx + 8]; call qword ptr [rax + 0x10]; 
0x000000000012c42a: sbb byte ptr [rcx - 0x75], cl; push rbp; adc byte ptr [rbx + rcx*4 + 0x24], cl; ret 0x854d; 
0x000000000012c582: sbb byte ptr [rcx - 0x75], cl; push rbp; adc byte ptr [rcx + rcx*4 + 0x24], cl; ret 0x8348; 
0x000000000004aaa9: sbb byte ptr [rcx - 0x75], cl; push rsp; and al, 0x20; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x000000000005fdf8: sbb byte ptr [rcx - 0x75], cl; push rsp; and al, 0x20; sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x000000000010207c: sbb byte ptr [rcx - 0x75], cl; sub byte ptr [r15 + 0x2000001], r15b; mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x00000000000967c6: sbb byte ptr [rcx - 0x76b703b9], cl; clc; ret; 
0x000000000009d967: sbb byte ptr [rcx - 0x7d], cl; call 0x7f972189; sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x000000000009f086: sbb byte ptr [rcx - 0x7d], cl; call 0x7f9738a7; sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x00000000000a3691: sbb byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x00000000000f5573: sbb byte ptr [rcx - 0xa], al; ret 0x7401; 
0x00000000001ad6e0: sbb byte ptr [rcx], 0xf6; call rdi; 
0x00000000000ed30c: sbb byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x0000000000049b53: sbb byte ptr [rcx], al; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x00000000000f0f50: sbb byte ptr [rcx], al; ret 0x8d48; 
0x0000000000102bee: sbb byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000102187: sbb byte ptr [rdi + 0x2000004], bh; call rax; 
0x000000000011bcb3: sbb byte ptr [rdi + 0x2a], dh; add byte ptr [rdx], al; add rsp, 8; ret; 
0x0000000000073468: sbb byte ptr [rdi + 0xd], dh; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000000eb74c: sbb byte ptr [rdi], ah; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000115f23: sbb byte ptr [rdi], cl; mov bh, 0xf6; mov dword ptr [rsp], 2; call 0x1154d0; add rsp, 0x18; ret; 
0x000000000005db48: sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000012e7cb: sbb byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000003571d: sbb byte ptr [rdi], cl; scasd eax, dword ptr [rdi]; ret 0xd231; 
0x000000000008278e: sbb byte ptr [rdx + 0x5b], bl; pop rbp; jmp rax; 
0x0000000000002047: sbb byte ptr [rdx - 0x1a], dl; ret; 
0x00000000000f5d4c: sbb byte ptr [rdx], cl; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x000000000013513d: sbb byte ptr [rip - 0x3fcf0000], al; pop rbx; pop rbp; ret; 
0x000000000013510b: sbb byte ptr [rip - 0x76b80000], al; fcomp dword ptr [rbx + 0x5d]; ret; 
0x000000000013580c: sbb byte ptr [rsi + 0x40], bh; mov rdi, rbx; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000199d08: sbb byte ptr [rsi + rbp*8], dl; jmp qword ptr [rcx]; 
0x0000000000193208: sbb byte ptr [rsi - 0x15], ah; jmp qword ptr [rbx]; 
0x00000000000fcac2: sbb byte ptr [rsi - 0x7d], ah; add byte ptr [rcx], al; ret; 
0x00000000000fcac1: sbb byte ptr [rsi - 0x7d], spl; add byte ptr [rcx], al; ret; 
0x00000000001a4d68: sbb byte ptr [rsi - 0xc], ah; jmp qword ptr [rcx]; 
0x00000000001a2038: sbb ch, bh; int1; jmp qword ptr [rcx]; 
0x0000000000199ec1: sbb ch, dh; call qword ptr [rdi]; 
0x000000000012ff10: sbb cl, byte ptr [rax + 0x39]; ret; 
0x00000000001252de: sbb cl, byte ptr [rax - 0x3f]; out dx, al; add cl, byte ptr [rcx - 0x77]; ret 0xc148; 
0x00000000000c8bd2: sbb cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000011cb43: sbb cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x0000000000132a66: sbb cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000002bb5: sbb cl, byte ptr [rbx + 0x28]; add cl, byte ptr [rdi + 0x56c003e6]; call 0xfffffffff3f8f43c; ret; 
0x00000000000a5c58: sbb cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000009d96f: sbb cl, byte ptr [rdi]; test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x0000000000137cbd: sbb cl, byte ptr [rdi]; xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000139e2d: sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001378ad: sbb cl, byte ptr [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x00000000001373b9: sbb cl, byte ptr [rdi]; xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000137bc9: sbb cl, byte ptr [rdi]; xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013ddca: sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000013d5ea: sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000013d9da: sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d1fa: sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a98d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013a16d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000013763d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000013994d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000013797d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000137c99: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d399: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000137d69: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a4ad: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000139c8d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013946d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000013a64d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000137b1d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000013730d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000013770d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x000000000013d88a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d0aa: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013e1ba: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000137bed: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x00000000001373dd: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x00000000001397ad: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013747f: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001377dd: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x00000000001398e3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a5e3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a103: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d78b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013e0bb: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000137a4d: sbb cl, byte ptr [rdi]; xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000013a923: sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000139c23: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000139743: sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a443: sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000013d8db: sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013d0fb: sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001374a3: sbb cl, byte ptr [rdi]; xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000019fb69: sbb cl, dh; jmp qword ptr [rax + 1]; 
0x000000000019fb51: sbb cl, dh; jmp qword ptr [rcx]; 
0x00000000001b0e90: sbb dh, 0xf6; jmp qword ptr [rcx]; 
0x0000000000179295: sbb dh, ah; ljmp ptr [rsi]; sbb esp, esi; inc dword ptr [rdi]; sbb esp, esi; jmp rsp; 
0x00000000001b20b1: sbb dh, bh; jmp qword ptr [rbx + 1]; 
0x00000000000eb201: sbb dh, bl; ret; 
0x00000000000bf817: sbb dh, byte ptr [rax]; add byte ptr [rbp + 0x28], dh; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x000000000008c774: sbb dh, byte ptr [rbx]; add byte ptr [rcx + 0x39], cl; ror byte ptr [rdi + rcx + 0x47], 1; ret 0x894c; 
0x00000000001ad6c9: sbb dh, dh; jmp qword ptr [rcx]; 
0x00000000001025d2: sbb dh, dh; ret 0x7504; 
0x00000000000eefcb: sbb dh, dh; ret; 
0x00000000001aa708: sbb dh, dl; cmc; jmp qword ptr [rsi]; 
0x00000000001a0838: sbb dl, cl; int1; call qword ptr [rsi]; 
0x000000000013b0e8: sbb dword ptr [r8], r8d; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000eb086: sbb dword ptr [rax + 0x63], ecx; clc; mov rsi, rdx; mov eax, 5; syscall; 
0x00000000000d0b23: sbb dword ptr [rax + 1], edi; ret; 
0x00000000000f7e76: sbb dword ptr [rax - 0x77], ecx; ret 0xf66; 
0x000000000013b071: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013b0e9: sbb dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000011f955: sbb dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsp + 8], 0; call qword ptr [rax]; 
0x00000000000fabc4: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000143df3: sbb dword ptr [rax], ebp; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000c2475: sbb dword ptr [rbp + rsi*2 - 0x7e], edx; mov eax, 0x7d00; ret; 
0x0000000000110f8a: sbb dword ptr [rbx + 0x5d], 0xffffffb8; inc dword ptr [rcx + 0x5c]; ret; 
0x000000000014d609: sbb dword ptr [rbx + rax + 0x14634900], -0x6d; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000010ef93: sbb dword ptr [rbx + rbp], edi; add byte ptr [rdi], cl; test dword ptr [rcx + 0x64000001], edi; mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x00000000001115c3: sbb dword ptr [rbx], ebp; add byte ptr [rax - 0x77], cl; fucompi st(0); ret 0x201; 
0x0000000000175e1d: sbb dword ptr [rbx], edx; mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000014d909: sbb dword ptr [rcx + 0x63490003], 0x14; xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000117e4a: sbb dword ptr [rcx + 0xf], eax; mov dh, 0x52; add dword ptr [rcx - 0x7d], ecx; ret 0x4102; 
0x0000000000023fe9: sbb dword ptr [rcx + rdx], 0; mov rdi, r14; mov rax, qword ptr [rbp - 0x60]; call rax; 
0x000000000011b58b: sbb dword ptr [rcx - 0x80], eax; jmp qword ptr [rbx]; 
0x00000000001abd44: sbb dword ptr [rcx - 0xb], ebp; jmp qword ptr [rdx]; 
0x000000000019fb4d: sbb dword ptr [rcx], eax; add al, al; sbb cl, dh; jmp qword ptr [rcx]; 
0x000000000019fb65: sbb dword ptr [rcx], eax; add al, bl; sbb cl, dh; jmp qword ptr [rax + 1]; 
0x00000000000fa5af: sbb dword ptr [rcx], eax; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x00000000000fa54a: sbb dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000000b0574: sbb dword ptr [rdi + 0x19], esi; mov rax, rbx; add rsp, 0x20; pop rbx; ret; 
0x00000000000fbee3: sbb dword ptr [rdi], 0xd8f7002c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000009f08e: sbb dword ptr [rdi], ecx; test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x0000000000022271: sbb dword ptr [rdx], edi; add byte ptr [rbx + 0x15890fe6], al; xchg eax, edi; sbb dword ptr [rdx], edi; add byte ptr [rbx - 0x76bef019], al; ret 0xb8; 
0x000000000002227a: sbb dword ptr [rdx], edi; add byte ptr [rbx - 0x76bef019], al; ret 0xb8; 
0x0000000000195c0c: sbb dword ptr [rsi - 0x13], edi; jmp qword ptr [rdx]; 
0x000000000009685a: sbb dword ptr [rsi], ecx; add byte ptr [rbp - 0x77], al; leave; movsxd r9, dword ptr [rax + r9*4]; add rax, r9; jmp rax; 
0x000000000015e43c: sbb eax, -1; ret; 
0x000000000009c77d: sbb eax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000000797c4: sbb eax, 0; add byte ptr [rax], al; call qword ptr [rax + 0x20]; 
0x00000000000700d9: sbb eax, 0; add byte ptr [rax], al; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x000000000007b232: sbb eax, 0; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000007995a: sbb eax, 0; add byte ptr [rax], al; mov qword ptr [rcx + 0x140], rdx; call qword ptr [rax + 0x20]; 
0x000000000007902c: sbb eax, 0; add byte ptr [rax], al; mov qword ptr [rcx + 0x140], rdx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x000000000007b7c6: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000007bd66: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x30]; 
0x000000000006de87: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x60]; 
0x00000000000706ef: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x0000000000074822: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000074627: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x28]; jmp rax; 
0x000000000004a70e: sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; sub r13, rsi; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000004c1f8: sbb eax, 0; add byte ptr [rax], al; mov rdx, r12; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006ed8c: sbb eax, 0; add byte ptr [rax], al; mov rdx, r12; mov rsi, r9; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000006e6e3: sbb eax, 0; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000078d9b: sbb eax, 0; add byte ptr [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000004a18e: sbb eax, 0; add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x598]; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007a3cb: sbb eax, 0; add byte ptr [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000004aaa0: sbb eax, 0; add byte ptr [rax], al; mov rsi, qword ptr [r12 + 0x18]; mov rdx, qword ptr [r12 + 0x20]; sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000070685: sbb eax, 0; add byte ptr [rax], al; mov rsi, r10; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000000792ab: sbb eax, 0; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x0000000000075cae: sbb eax, 0; add byte ptr [rax], al; mov rsi, r15; mov rdi, rbx; sub rdx, r15; call qword ptr [rax + 0x70]; 
0x000000000004eeff: sbb eax, 0; add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000007c154: sbb eax, 0; add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x000000000006d972: sbb eax, 0; add byte ptr [rax], al; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000010ad5b: sbb eax, 0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000011b02a: sbb eax, 0x10bb6348; add al, byte ptr [rax]; add byte ptr [rbx + 0x1174ffff], al; mov eax, 3; syscall; 
0x00000000000066b9: sbb eax, 0x120000; or al, 0; push rax; ret 7; 
0x0000000000034ed4: sbb eax, 0x13dadf; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000013174b: sbb eax, 0x1d2444c6; add byte ptr [rax - 0x77], cl; fsubp st(0); xchg dword ptr [rcx + 0x2948fff1], eax; ret; 
0x0000000000186aed: sbb eax, 0x1f00fffc; cld; call qword ptr [rax + 0x20]; 
0x0000000000161d05: sbb eax, 0x247c6; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161c8b: sbb eax, 0x24840; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161bfc: sbb eax, 0x248cf; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001619f1: sbb eax, 0x24ada; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001618bf: sbb eax, 0x24c0c; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001617f9: sbb eax, 0x24cd2; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016177b: sbb eax, 0x24d50; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001616e4: sbb eax, 0x24de7; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001614e8: sbb eax, 0x24fe3; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001613b7: sbb eax, 0x25114; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001612b6: sbb eax, 0x25215; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001606d5: sbb eax, 0x25cb6; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016065b: sbb eax, 0x25d30; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001605cc: sbb eax, 0x25dbf; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001603c1: sbb eax, 0x25fca; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016028f: sbb eax, 0x260fc; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001601c9: sbb eax, 0x261c2; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016014b: sbb eax, 0x26240; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001600b4: sbb eax, 0x262d7; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015feb8: sbb eax, 0x264d3; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fd87: sbb eax, 0x26604; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fc78: sbb eax, 0x26713; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000fc631: sbb eax, 0x2c1cca; pop rbx; ret; 
0x00000000001312f2: sbb eax, 0x31038b48; ror byte ptr [rbx + 0x453b0840], cl; or byte ptr [rdi], 0x94; ret 0xea83; 
0x0000000000151883: sbb eax, 0x35cc8; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151525: sbb eax, 0x36026; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001516d0: sbb eax, 0x360bb; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001513a5: sbb eax, 0x361a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151468: sbb eax, 0x36323; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151225: sbb eax, 0x36326; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001512e8: sbb eax, 0x364a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001510a5: sbb eax, 0x364a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151168: sbb eax, 0x36623; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150f25: sbb eax, 0x36626; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150fe9: sbb eax, 0x367a2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150da5: sbb eax, 0x367a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150e68: sbb eax, 0x36923; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150c25: sbb eax, 0x36926; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150ce8: sbb eax, 0x36aa3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150aa5: sbb eax, 0x36aa6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150b68: sbb eax, 0x36c23; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150925: sbb eax, 0x36c26; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001509e8: sbb eax, 0x36da3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001507a5: sbb eax, 0x36da6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150868: sbb eax, 0x36f23; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150625: sbb eax, 0x36f26; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001506e8: sbb eax, 0x370a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001504a5: sbb eax, 0x370a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150568: sbb eax, 0x37223; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150325: sbb eax, 0x37226; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001503e8: sbb eax, 0x373a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001501a5: sbb eax, 0x373a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150268: sbb eax, 0x37523; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150025: sbb eax, 0x37526; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014feac: sbb eax, 0x3769f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001500e8: sbb eax, 0x376a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ff68: sbb eax, 0x37823; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fcad: sbb eax, 0x3789e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fe2b: sbb eax, 0x37960; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fccf: sbb eax, 0x37abc; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ed6f: sbb eax, 0x382dc; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ea45: sbb eax, 0x38606; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ebdc: sbb eax, 0x386af; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e8c5: sbb eax, 0x38786; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e988: sbb eax, 0x38903; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e745: sbb eax, 0x38906; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e808: sbb eax, 0x38a83; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e5c5: sbb eax, 0x38a86; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000034132: sbb eax, 0x38b049; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000014e688: sbb eax, 0x38c03; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e445: sbb eax, 0x38c06; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e509: sbb eax, 0x38d82; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e2c5: sbb eax, 0x38d86; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e388: sbb eax, 0x38f03; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e145: sbb eax, 0x38f06; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e208: sbb eax, 0x39083; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dfc5: sbb eax, 0x39086; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e088: sbb eax, 0x39203; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014de45: sbb eax, 0x39206; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014df08: sbb eax, 0x39383; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dcc5: sbb eax, 0x39386; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dd88: sbb eax, 0x39503; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014db45: sbb eax, 0x39506; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dc08: sbb eax, 0x39683; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d9c5: sbb eax, 0x39686; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014da88: sbb eax, 0x39803; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d845: sbb eax, 0x39806; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d908: sbb eax, 0x39983; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d6c5: sbb eax, 0x39986; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d788: sbb eax, 0x39b03; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d545: sbb eax, 0x39b06; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d3cc: sbb eax, 0x39c7f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d608: sbb eax, 0x39c83; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d488: sbb eax, 0x39e03; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1ef: sbb eax, 0x39e5c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d34b: sbb eax, 0x39f40; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1dc: sbb eax, 0x3a0af; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c29f: sbb eax, 0x3a8ac; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bf75: sbb eax, 0x3abd6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c10c: sbb eax, 0x3ac7f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bdf5: sbb eax, 0x3ad56; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014beb8: sbb eax, 0x3aed3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bc75: sbb eax, 0x3aed6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bd38: sbb eax, 0x3b053; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014baf5: sbb eax, 0x3b056; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bbb8: sbb eax, 0x3b1d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b975: sbb eax, 0x3b1d6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ba39: sbb eax, 0x3b352; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b7f5: sbb eax, 0x3b356; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b8b8: sbb eax, 0x3b4d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b675: sbb eax, 0x3b4d6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b738: sbb eax, 0x3b653; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b4f5: sbb eax, 0x3b656; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b5b8: sbb eax, 0x3b7d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b375: sbb eax, 0x3b7d6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b438: sbb eax, 0x3b953; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b1f5: sbb eax, 0x3b956; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b2b8: sbb eax, 0x3bad3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b075: sbb eax, 0x3bad6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b138: sbb eax, 0x3bc53; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aef5: sbb eax, 0x3bc56; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014afb8: sbb eax, 0x3bdd3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ad75: sbb eax, 0x3bdd6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ae38: sbb eax, 0x3bf53; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014abf5: sbb eax, 0x3bf56; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014acb8: sbb eax, 0x3c0d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aa75: sbb eax, 0x3c0d6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a8fc: sbb eax, 0x3c24f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ab38: sbb eax, 0x3c253; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a6c6: sbb eax, 0x3c2c5; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a609: sbb eax, 0x3c382; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a9b8: sbb eax, 0x3c3d3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a71c: sbb eax, 0x3c42f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a51e: sbb eax, 0x3c46d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a87b: sbb eax, 0x3c510; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a453: sbb eax, 0x3c538; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a709: sbb eax, 0x3c682; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149432: sbb eax, 0x3d559; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149394: sbb eax, 0x3d5f7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001492e2: sbb eax, 0x3d6a9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149244: sbb eax, 0x3d747; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149192: sbb eax, 0x3d7f9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001490f4: sbb eax, 0x3d897; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000149042: sbb eax, 0x3d949; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148fa4: sbb eax, 0x3d9e7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148ef2: sbb eax, 0x3da99; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148e54: sbb eax, 0x3db37; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148da2: sbb eax, 0x3dbe9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148d04: sbb eax, 0x3dc87; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148c52: sbb eax, 0x3dd39; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148bb4: sbb eax, 0x3ddd7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148b02: sbb eax, 0x3de89; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148a69: sbb eax, 0x3df22; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001489b2: sbb eax, 0x3dfd9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148914: sbb eax, 0x3e077; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148862: sbb eax, 0x3e129; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001487c4: sbb eax, 0x3e1c7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148712: sbb eax, 0x3e279; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148674: sbb eax, 0x3e317; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001485c2: sbb eax, 0x3e3c9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148524: sbb eax, 0x3e467; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148472: sbb eax, 0x3e519; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001483d4: sbb eax, 0x3e5b7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148322: sbb eax, 0x3e669; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148284: sbb eax, 0x3e707; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001481d2: sbb eax, 0x3e7b9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148134: sbb eax, 0x3e857; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000148088: sbb eax, 0x3e903; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147f97: sbb eax, 0x3e9f4; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147ed8: sbb eax, 0x3eab3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147e6e: sbb eax, 0x3eb1d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147d7f: sbb eax, 0x3ec0c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147b45: sbb eax, 0x3ec86; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147cba: sbb eax, 0x3ecd1; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147a6b: sbb eax, 0x3ed60; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146a62: sbb eax, 0x3fd69; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001469c4: sbb eax, 0x3fe07; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146912: sbb eax, 0x3feb9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146874: sbb eax, 0x3ff57; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001467c2: sbb eax, 0x40009; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146724: sbb eax, 0x400a7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146672: sbb eax, 0x40159; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001465d4: sbb eax, 0x401f7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146522: sbb eax, 0x402a9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146484: sbb eax, 0x40347; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001463d2: sbb eax, 0x403f9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146334: sbb eax, 0x40497; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146282: sbb eax, 0x40549; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001461e4: sbb eax, 0x405e7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146132: sbb eax, 0x40699; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146099: sbb eax, 0x40732; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145fe2: sbb eax, 0x407e9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145f44: sbb eax, 0x40887; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145e92: sbb eax, 0x40939; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145df4: sbb eax, 0x409d7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145d42: sbb eax, 0x40a89; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145ca4: sbb eax, 0x40b27; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145bf2: sbb eax, 0x40bd9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145b54: sbb eax, 0x40c77; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145aa2: sbb eax, 0x40d29; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145a04: sbb eax, 0x40dc7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145952: sbb eax, 0x40e79; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001458b4: sbb eax, 0x40f17; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145802: sbb eax, 0x40fc9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145764: sbb eax, 0x41067; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001456b8: sbb eax, 0x41113; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001455c7: sbb eax, 0x41204; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145508: sbb eax, 0x412c3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014549e: sbb eax, 0x4132d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001453af: sbb eax, 0x4141c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145175: sbb eax, 0x41496; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001452ea: sbb eax, 0x414e1; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014509b: sbb eax, 0x41570; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000144092: sbb eax, 0x42579; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ff4: sbb eax, 0x42617; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143f42: sbb eax, 0x426c9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ea4: sbb eax, 0x42767; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143df2: sbb eax, 0x42819; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143d54: sbb eax, 0x428b7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ca2: sbb eax, 0x42969; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143c04: sbb eax, 0x42a07; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143b52: sbb eax, 0x42ab9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143ab4: sbb eax, 0x42b57; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143a02: sbb eax, 0x42c09; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143964: sbb eax, 0x42ca7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001438b2: sbb eax, 0x42d59; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143814: sbb eax, 0x42df7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143762: sbb eax, 0x42ea9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001436c9: sbb eax, 0x42f42; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143612: sbb eax, 0x42ff9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143574: sbb eax, 0x43097; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001434c2: sbb eax, 0x43149; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143424: sbb eax, 0x431e7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143372: sbb eax, 0x43299; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001432d4: sbb eax, 0x43337; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143222: sbb eax, 0x433e9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143184: sbb eax, 0x43487; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001430d2: sbb eax, 0x43539; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000143034: sbb eax, 0x435d7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142f82: sbb eax, 0x43689; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ee4: sbb eax, 0x43727; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142e32: sbb eax, 0x437d9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142d94: sbb eax, 0x43877; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ce8: sbb eax, 0x43923; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142bf7: sbb eax, 0x43a14; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142b38: sbb eax, 0x43ad3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ace: sbb eax, 0x43b3d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001429df: sbb eax, 0x43c2c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014291a: sbb eax, 0x43cf1; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014cc45: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000014cc40: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000000738d4: sbb eax, 0x48000000; mov esi, edi; mov rdx, rbp; mov rdi, rcx; call qword ptr [rax + 0x38]; 
0x000000000008c44f: sbb eax, 0x48000bb7; cmove eax, edx; add rsp, 8; ret; 
0x00000000000bc4df: sbb eax, 0x48003036; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008b8df: sbb eax, 0x48fffffa; cmove eax, edx; add rsp, 8; ret; 
0x000000000018c870: sbb eax, 0x4cfff858; add r8b, byte ptr [r8]; pop rax; clc; call rsp; 
0x000000000009d9f9: sbb eax, 0x4e0850f; add byte ptr [rax], al; ret; 
0x00000000001063f2: sbb eax, 0x507a8b48; mov rsi, rdx; call rax; 
0x000000000009f14d: sbb eax, 0x59c850f; add byte ptr [rax], al; ret; 
0x00000000000f7efa: sbb eax, 0x865af; mov rax, rbx; pop rbx; ret; 
0x00000000000428de: sbb eax, 0x89000001; ret; 
0x000000000007803f: sbb eax, 0x89ffffc4; ret 0xbceb; 
0x000000000013ad5f: sbb eax, 0x8b0002c5; add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000013aa5f: sbb eax, 0x8b0002c8; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000011edbe: sbb eax, 0x8b480000; and al, 8; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x000000000011afdc: sbb eax, 0x8bb6348; add al, byte ptr [rax]; add byte ptr [rbx + 0x1174ffff], al; mov eax, 3; syscall; 
0x00000000000eb132: sbb eax, 0xb8c7894c; test dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000112f1a: sbb eax, 0xb8fb6348; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000011b003: sbb eax, 0xcbb6348; add al, byte ptr [rax]; add byte ptr [rbx + 0x1174ffff], al; mov eax, 3; syscall; 
0x000000000018fcef: sbb eax, 0xd1cffea; push rbp; adc edx, ebp; jmp qword ptr [rdx]; 
0x000000000018fc5f: sbb eax, 0xd1cffea; stosb byte ptr [rdi], al; or al, 0xea; jmp qword ptr [rdx]; 
0x00000000000a10fb: sbb eax, 0xd7714; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0977: sbb eax, 0xd7e98; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a094e: sbb eax, 0xd7ec1; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a092e: sbb eax, 0xd7ee1; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0905: sbb eax, 0xd7f0a; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a08e0: sbb eax, 0xd7f2f; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a08c2: sbb eax, 0xd7f4d; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0842: sbb eax, 0xd7f4d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0827: sbb eax, 0xd7f68; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a08a5: sbb eax, 0xd7f6a; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0875: sbb eax, 0xd7f9a; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a07f2: sbb eax, 0xd7f9d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a07c6: sbb eax, 0xd7fc9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a07b0: sbb eax, 0xd7fdf; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a078e: sbb eax, 0xd8001; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a0769: sbb eax, 0xd8026; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a074c: sbb eax, 0xd8043; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000a06df: sbb eax, 0xd80b0; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000007b197: sbb eax, 0xd8838b48; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x000000000007b2e7: sbb eax, 0xd8838b48; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x28]; jmp rax; 
0x000000000009fea7: sbb eax, 0xd8868; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe72: sbb eax, 0xd889d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe46: sbb eax, 0xd88c9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe30: sbb eax, 0xd88df; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe0e: sbb eax, 0xd8901; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fde9: sbb eax, 0xd8926; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000007504a: sbb eax, 0xd8938b48; add byte ptr [rax], al; add byte ptr [rcx - 0x2076b73a], cl; call qword ptr [rdx + 0x30]; 
0x000000000009fdcc: sbb eax, 0xd8943; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fd74: sbb eax, 0xd899b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f87b: sbb eax, 0xd8dc0; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f790: sbb eax, 0xd8f3b; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f77b: sbb eax, 0xd8f50; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009f75c: sbb eax, 0xd8f6f; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009eca7: sbb eax, 0xd9994; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec7e: sbb eax, 0xd99bd; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec5e: sbb eax, 0xd99dd; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec35: sbb eax, 0xd9a06; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ec10: sbb eax, 0xd9a2b; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ebf2: sbb eax, 0xd9a49; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009eb72: sbb eax, 0xd9a49; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ebd5: sbb eax, 0xd9a66; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009eba5: sbb eax, 0xd9a96; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea90: sbb eax, 0xd9b2b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea62: sbb eax, 0xd9b59; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea39: sbb eax, 0xd9b82; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e3c7: sbb eax, 0xda168; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e392: sbb eax, 0xda19d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e366: sbb eax, 0xda1c9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e350: sbb eax, 0xda1df; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e32e: sbb eax, 0xda201; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e309: sbb eax, 0xda226; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e2ec: sbb eax, 0xda243; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e294: sbb eax, 0xda29b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e06b: sbb eax, 0xda3f0; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df80: sbb eax, 0xda56b; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df6b: sbb eax, 0xda580; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009df4c: sbb eax, 0xda59f; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d607: sbb eax, 0xdae54; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d5de: sbb eax, 0xdae7d; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d5be: sbb eax, 0xdae9d; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d595: sbb eax, 0xdaec6; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d570: sbb eax, 0xdaeeb; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d552: sbb eax, 0xdaf09; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d4d2: sbb eax, 0xdaf09; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d535: sbb eax, 0xdaf26; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d505: sbb eax, 0xdaf56; movsxd rcx, dword ptr [r11 + r8*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d400: sbb eax, 0xdafdb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3d2: sbb eax, 0xdb009; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3a9: sbb eax, 0xdb032; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cdc7: sbb eax, 0xdb594; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd92: sbb eax, 0xdb5c9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd66: sbb eax, 0xdb5f5; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd50: sbb eax, 0xdb60b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd2e: sbb eax, 0xdb62d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd09: sbb eax, 0xdb652; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ccec: sbb eax, 0xdb66f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cc94: sbb eax, 0xdb6c7; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000113882: sbb eax, 0xf8834166; adc byte ptr [rsi + rbx*2 + 0x31], dh; jmp qword ptr [rsi + 0x41]; 
0x000000000013ae91: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013af09: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000f4991: sbb eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000021a12: sbb eax, dword ptr [rbx - 0x7bf0fd08]; adc eax, 0x5b000001; pop rbp; pop r12; ret; 
0x00000000000faec1: sbb eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x00000000001afd75: sbb eax, dword ptr [rdx]; add al, bh; mov dh, 0xf6; call qword ptr [rdi]; 
0x0000000000003612: sbb eax, dword ptr [rip + 0x572808a8]; call qword ptr [rsi + 0x6f]; 
0x000000000017913c: sbb eax, dword ptr [rsp + rsi*8]; push rsi; add al, 0xf4; dec edx; add al, 0xf4; call qword ptr [rdi]; 
0x0000000000124860: sbb eax, eax; add rsp, 8; add eax, 2; ret; 
0x00000000000f236b: sbb eax, eax; and eax, 0xfffffff0; add eax, 0x26; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000129c80: sbb eax, eax; and eax, 2; sub eax, 1; add rsp, 0x20; pop rbx; ret; 
0x000000000003851a: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000117ad7: sbb eax, eax; ret; 
0x0000000000163b45: sbb eax, eax; sbb eax, -1; ret; 
0x000000000005429e: sbb eax, eax; xor al, al; add eax, 0x107; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000fbc81: sbb eax, esp; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000fc722: sbb ebp, dword ptr [rax + rax]; add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; ret; 
0x00000000000fc774: sbb ebp, dword ptr [rax + rax]; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000036f49: sbb ebp, dword ptr [rdi + 0x38]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x0000000000199ef1: sbb ebp, esi; call qword ptr [rcx]; 
0x0000000000199f39: sbb ebp, esi; jmp qword ptr [rbx]; 
0x0000000000148473: sbb ebp, esp; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000002221d: sbb ebx, dword ptr [rdx]; cmp al, byte ptr [rax]; mov dword ptr [rip + 0x3a19d8], r8d; pop rbx; ret; 
0x000000000018623d: sbb ebx, edi; jmp qword ptr [rax]; 
0x000000000011b11a: sbb ecx, dword ptr [rax + 0x63]; cli; mov eax, r12d; syscall; 
0x0000000000165d13: sbb ecx, dword ptr [rax + 0x63]; cli; mov eax, r13d; syscall; 
0x000000000004eefc: sbb ecx, dword ptr [rax - 0x75]; sbb eax, 0; add byte ptr [rax], al; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x0000000000053820: sbb ecx, dword ptr [rax - 0x77]; ret 0x6348; 
0x00000000000f2624: sbb ecx, dword ptr [rax - 0x7d]; in al, dx; or al, ch; movabs byte ptr [0x1b8fff7b2], al; add rsp, 8; ret; 
0x00000000000dab64: sbb ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000001ae016: sbb ecx, dword ptr [rbp + rsi*8 + 0x490d1cff]; mov dh, ch; jmp qword ptr [rdx]; 
0x00000000000eb194: sbb ecx, dword ptr [rcx - 0x69cb636]; mov eax, 0x103; syscall; 
0x00000000001a916c: sbb ecx, ebp; hlt; jmp qword ptr [rdx]; 
0x00000000000c3544: sbb ecx, ebp; xchg eax, esi; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000186249: sbb edi, ebx; jmp rax; 
0x000000000007de9b: sbb edi, edi; xor eax, dword ptr [rax]; xor edi, edi; mov r14, rdx; call qword ptr [rax]; 
0x00000000001b2081: sbb edi, esi; call qword ptr [rcx]; 
0x0000000000186b25: sbb edi, esp; call rax; 
0x0000000000186b25: sbb edi, esp; call rax; sbb al, 0xfc; jmp qword ptr [rax]; 
0x0000000000186ae5: sbb edi, esp; jmp qword ptr [rax + 0x1c]; 
0x0000000000039b31: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000000fae81: sbb edx, edx; add byte ptr [rax], al; mov qword ptr [rsp], rax; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000001a24b1: sbb edx, esi; call qword ptr [rdx]; 
0x00000000000e0263: sbb edx, esi; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; ret 5; 
0x00000000000eb1a8: sbb esi, ebx; ret; 
0x000000000018b9a1: sbb esi, edi; call rsp; 
0x00000000001ad6e1: sbb esi, esi; call rdi; 
0x00000000000c11af: sbb esi, esp; mov rdi, rdx; mov eax, r9d; syscall; 
0x0000000000031af1: sbb esp, dword ptr [rip - 0x72b7ffc7]; cmp eax, 0x38e204; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000188891: sbb esp, ebp; call rsp; 
0x0000000000188889: sbb esp, ebp; dec dword ptr [rsp + rsi*4 + 0x195f0000]; in al, dx; call rsp; 
0x00000000001888b1: sbb esp, ebp; jmp rsp; 
0x00000000001888a9: sbb esp, ebp; ljmp ptr [rbp + rsi*4 + 0x19e40000]; in al, dx; jmp rsp; 
0x0000000000186ae1: sbb esp, edi; call qword ptr [rax]; 
0x0000000000186ae1: sbb esp, edi; call qword ptr [rax]; sbb edi, esp; jmp qword ptr [rax + 0x1c]; 
0x0000000000179299: sbb esp, esi; inc dword ptr [rdi]; sbb esp, esi; jmp rsp; 
0x000000000017929d: sbb esp, esi; jmp rsp; 
0x0000000000039b30: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000007b22a: sbb r11b, bpl; fldenv dword ptr [rsi - 0x70]; mov rax, qword ptr [rbx + 0xd8]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000015e43b: sbb rax, -1; ret; 
0x000000000009c77c: sbb rax, -1; xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x0000000000138e12: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000018acbd: scasb al, byte ptr [rdi]; add dword ptr [rax], eax; cmp esp, esi; call rsp; 
0x00000000001a8fed: scasb al, byte ptr [rdi]; add dword ptr [rax], eax; mov al, 0x63; cmc; call rsp; 
0x00000000001a8fd5: scasb al, byte ptr [rdi]; add dword ptr [rax], eax; sbb byte ptr [rbx - 0xb], ah; jmp qword ptr [rcx]; 
0x000000000013de1e: scasb al, byte ptr [rdi]; add eax, 0x83480000; ret 0xe910; 
0x000000000014bc77: scasb al, byte ptr [rdi]; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a605: scasb al, byte ptr [rdi]; clc; lea r11, qword ptr [rip + 0x3c382]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a44f: scasb al, byte ptr [rdi]; clc; lea r11, qword ptr [rip + 0x3c538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147b41: scasb al, byte ptr [rdi]; clc; lea r11, qword ptr [rip + 0x3ec86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147a67: scasb al, byte ptr [rdi]; clc; lea r11, qword ptr [rip + 0x3ed60]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145171: scasb al, byte ptr [rdi]; clc; lea r11, qword ptr [rip + 0x41496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145097: scasb al, byte ptr [rdi]; clc; lea r11, qword ptr [rip + 0x41570]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000187575: scasb al, byte ptr [rdi]; cld; call qword ptr [rax - 0x52]; 
0x0000000000187575: scasb al, byte ptr [rdi]; cld; call qword ptr [rax - 0x52]; cld; jmp rax; 
0x00000000001875b9: scasb al, byte ptr [rdi]; cld; inc esi; lodsd eax, dword ptr [rsi]; cld; call qword ptr [rsi - 0x53]; 
0x0000000000187771: scasb al, byte ptr [rdi]; cld; jmp qword ptr [rax - 0x52]; 
0x0000000000187635: scasb al, byte ptr [rdi]; cld; jmp qword ptr [rdx]; 
0x0000000000187579: scasb al, byte ptr [rdi]; cld; jmp rax; 
0x0000000000187639: scasb al, byte ptr [rdi]; cld; push qword ptr [rdx + 0x42fffcad]; lodsd eax, dword ptr [rsi]; cld; call rdx; 
0x0000000000164e04: scasb al, byte ptr [rdi]; in al, dx; jmp qword ptr [rsi + 0xf]; 
0x0000000000126818: scasb al, byte ptr [rdi]; mov rax, qword ptr [rsp + 0x78]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x000000000011a0fe: scasb al, byte ptr [rdi]; mov rdx, rax; nop word ptr [rax + rax]; mov byte ptr [rdx], 0; pop rbx; ret; 
0x000000000019c4b4: scasb al, byte ptr [rdi]; pop rsi; out dx, al; jmp qword ptr [rdx]; 
0x00000000000630d8: scasb al, byte ptr [rdi]; ret; 
0x0000000000186411: scasb al, byte ptr [rdi]; std; call qword ptr [rsi]; 
0x0000000000186411: scasb al, byte ptr [rdi]; std; call qword ptr [rsi]; movsd dword ptr [rdi], dword ptr [rsi]; std; jmp rsi; 
0x0000000000186491: scasb al, byte ptr [rdi]; std; jmp rax; 
0x00000000000f2f8c: scasb al, byte ptr [rdi]; sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000f2fa0: scasb al, byte ptr [rdi]; sub al, 0; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e3174: scasb al, byte ptr [rdi]; sub eax, 0x28b4800; mov qword ptr [rdx], rdi; ret; 
0x0000000000002f62: scasb al, byte ptr [rdi]; sub ebx, dword ptr [rsp + rax*2]; nop; ret 0x5bdb; 
0x0000000000085c80: scasb al, byte ptr [rdi]; xor eax, dword ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000085d33: scasb al, byte ptr [rdi]; xor eax, dword ptr [rax]; add rsp, 0x18; ret; 
0x000000000000eda9: scasd eax, dword ptr [rdi]; adc al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret 0; 
0x000000000003d395: scasd eax, dword ptr [rdi]; adc byte ptr [rax + 1], r9b; ror byte ptr [rax - 0x77], 1; ret 0x8966; 
0x000000000013df1d: scasd eax, dword ptr [rdi]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000019919d: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; adc ch, bh; in eax, dx; call qword ptr [rax]; 
0x00000000000c6172: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000adc1d: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000018acfd: scasd eax, dword ptr [rdi]; add dword ptr [rax], eax; and al, 0x3d; hlt; jmp rsp; 
0x00000000000b15cf: scasd eax, dword ptr [rdi]; add eax, esi; ret; 
0x0000000000165bf9: scasd eax, dword ptr [rdi]; and eax, 0xf31e7500; ret; 
0x0000000000164b6a: scasd eax, dword ptr [rdi]; and eax, 0xfd2ee900; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000001876e9: scasd eax, dword ptr [rdi]; cld; call qword ptr [rdi + rbp*4 - 4]; jmp rsp; 
0x00000000001875ad: scasd eax, dword ptr [rdi]; cld; call qword ptr [rsi]; 
0x000000000018776d: scasd eax, dword ptr [rdi]; cld; call rax; 
0x000000000018776d: scasd eax, dword ptr [rdi]; cld; call rax; scasb al, byte ptr [rdi]; cld; jmp qword ptr [rax - 0x52]; 
0x0000000000187769: scasd eax, dword ptr [rdi]; cld; inc dword ptr [rax - 0x51]; cld; call rax; 
0x0000000000187571: scasd eax, dword ptr [rdi]; cld; inc eax; scasb al, byte ptr [rdi]; cld; call qword ptr [rax - 0x52]; 
0x00000000001876ed: scasd eax, dword ptr [rdi]; cld; jmp rsp; 
0x0000000000075a90: scasd eax, dword ptr [rdi]; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000001a5a61: scasd eax, dword ptr [rdi]; hlt; call qword ptr [rax]; 
0x00000000001a5a29: scasd eax, dword ptr [rdi]; hlt; jmp qword ptr [rdi]; 
0x0000000000196b89: scasd eax, dword ptr [rdi]; in eax, dx; call qword ptr [rcx]; 
0x000000000011ee4d: scasd eax, dword ptr [rdi]; loope 0x11ee50; add byte ptr [rbp + 0x310b75c0], al; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000014d1dd: scasd eax, dword ptr [rdi]; movabs al, byte ptr [0x8d49931463490003]; adc al, 0x13; jmp rdx; 
0x000000000011c7fb: scasd eax, dword ptr [rdi]; or bl, ch; ret 0x4890; 
0x00000000000f7efb: scasd eax, dword ptr [rdi]; or byte ptr gs:[rax], al; mov rax, rbx; pop rbx; ret; 
0x000000000009d402: scasd eax, dword ptr [rdi]; or eax, 0xc634900; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000012abac: scasd eax, dword ptr [rdi]; pop rbx; ret; 
0x00000000000b2290: scasd eax, dword ptr [rdi]; ret 0x67ba; 
0x00000000000a18a4: scasd eax, dword ptr [rdi]; ret 0x8341; 
0x00000000000b6fdd: scasd eax, dword ptr [rdi]; ret 0x8941; 
0x00000000000b8e9f: scasd eax, dword ptr [rdi]; ret 0x8d44; 
0x0000000000035c39: scasd eax, dword ptr [rdi]; ret 0x8d4c; 
0x000000000003571f: scasd eax, dword ptr [rdi]; ret 0xd231; 
0x000000000010599d: scasd eax, dword ptr [rdi]; ret 0xffff; 
0x000000000003a34c: scasd eax, dword ptr [rdi]; ret; 
0x00000000001782f1: scasd eax, dword ptr [rdi]; std; jmp qword ptr [rax - 0x4f]; 
0x00000000000f2ef5: scasd eax, dword ptr [rdi]; sub al, 0; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000112f3c: scasd eax, dword ptr [rdi]; sub al, byte ptr [rax]; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x0000000000132ecc: scasd eax, dword ptr [rdi]; sub byte ptr [rax], al; mov dword ptr fs:[rax], 2; mov eax, 0xffffffff; ret; 
0x000000000014ebdd: scasd eax, dword ptr [rdi]; xchg byte ptr [rbx], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000010378d: scasd eax, dword ptr [rdi]; xor eax, 0x8548fff8; ror byte ptr [rdi], 0x95; ret; 
0x0000000000107a7c: setae al; ret; 
0x00000000000b9f77: setbe al; add rsp, 8; movzx eax, al; ret; 
0x00000000000fd928: setbe al; ret; 
0x000000000005db42: sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x000000000012e7c5: sete al; add rsp, 0x18; movzx eax, al; ret; 
0x00000000000ecdee: sete al; add rsp, 0x48; movzx eax, al; ret; 
0x00000000000465b2: sete al; add rsp, 8; movzx eax, al; ret; 
0x000000000012ce35: sete al; add rsp, 8; pop rbx; movzx eax, al; pop rbp; ret; 
0x0000000000121a24: sete al; movzx eax, al; add rsp, 0x10; pop rbx; ret; 
0x000000000012dd48: sete al; movzx eax, al; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000c268b: sete al; movzx eax, al; lea rax, qword ptr [rax + rax - 1]; ret; 
0x0000000000036a69: sete al; movzx eax, al; mov dword ptr [rbx + 0x40], eax; xor eax, eax; pop rbx; ret; 
0x0000000000122586: sete al; movzx eax, al; ret; 
0x000000000013536d: sete al; or esi, eax; movsxd rdi, r12d; mov eax, 3; syscall; 
0x000000000002ff55: sete al; ret; 
0x000000000007f879: sete dl; mov dword ptr [rip + 0x33e8de], edx; movsxd rdi, ecx; mov eax, 3; syscall; 
0x00000000000b0072: setg al; movzx eax, al; lea eax, dword ptr [rax + rax - 1]; ret; 
0x00000000001794e8: setl ah; ljmp ptr [rcx - 0x65]; hlt; jmp qword ptr [rbx]; 
0x00000000000fa74c: setne al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x000000000012d0d1: setne al; add rsp, 0x28; pop rbx; movzx eax, al; pop rbp; ret; 
0x0000000000022ca1: setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000012291b: setne al; add rsp, 8; movzx eax, al; ret; 
0x0000000000122875: setne al; add rsp, 8; pop rbx; movzx eax, al; pop rbp; ret; 
0x000000000012d538: setne al; mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000012d559: setne al; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000001215d9: setne al; movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000005db79: setne al; movzx eax, al; neg eax; pop rbx; ret; 
0x00000000000f4bb3: setne al; movzx eax, al; pop rbx; ret; 
0x00000000000375b6: setne al; movzx eax, al; ret; 
0x00000000000f212b: setne al; neg eax; add rsp, 0x10; pop rbx; ret; 
0x00000000001295d3: setne al; neg eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000129bb2: setne al; neg eax; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000001228fe: setne dl; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000000cb7ed: setne dl; cmovbe eax, edx; ret; 
0x000000000014a604: sfence; lea r11, qword ptr [rip + 0x3c382]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a44e: sfence; lea r11, qword ptr [rip + 0x3c538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147b40: sfence; lea r11, qword ptr [rip + 0x3ec86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147a66: sfence; lea r11, qword ptr [rip + 0x3ed60]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145170: sfence; lea r11, qword ptr [rip + 0x41496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145096: sfence; lea r11, qword ptr [rip + 0x41570]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000088dc8: sgdt ptr [rax]; ret; 
0x00000000001866c4: shl ah, 1; sti; call rax; 
0x00000000001aae30: shl al, 0xf5; call qword ptr [rax]; 
0x00000000001a4771: shl bh, cl; jmp qword ptr [rax]; 
0x00000000001a7530: shl byte ptr [rax], 0xf5; jmp qword ptr [rsi]; 
0x0000000000186b34: shl byte ptr [rax], 0xfc; call qword ptr [rax]; 
0x0000000000186b34: shl byte ptr [rax], 0xfc; call qword ptr [rax]; and bh, ah; jmp qword ptr [rax + 0x23]; 
0x0000000000186308: shl byte ptr [rbx + rdi*8 - 1], 1; add byte ptr [rcx - 5], cl; jmp rax; 
0x0000000000186d68: shl byte ptr [rbx - 4], 0xff; push rax; movsxd rdi, esp; jmp rax; 
0x0000000000036479: shl byte ptr [rcx], cl; ret 0xf66; 
0x000000000019ad56: shl byte ptr [rdx - 0x12], 0xff; sbb al, 0xd; cdq; xor dh, ch; jmp qword ptr [rdx]; 
0x0000000000186b74: shl byte ptr [rdx - 4], 1; jmp qword ptr [rax + 0x62]; 
0x00000000001add40: shl byte ptr [rdx], 0xf6; call rdi; 
0x00000000000a1b7f: shl byte ptr [rip + 0x3ffc0000], cl; add eax, eax; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000077ac5: shl byte ptr [rsi + 0x2e], 1; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x00000000000a134f: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x00000000000360e3: shl byte ptr [rsi + 0x48], 1; movd mm0, eax; ret; 
0x000000000003614c: shl byte ptr [rsi + 0x48], 1; movd mm1, eax; movsd qword ptr [rdi], xmm1; ret; 
0x00000000000d2629: shl byte ptr [rsi + 0xf], 0x1f; add byte ptr [rax], r8b; pop rbx; pop rbp; pop r12; ret; 
0x0000000000162133: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000086f35: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x00000000001611eb: shl byte ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x0000000000161202: shl byte ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000008a827: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000008a816: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x0000000000096e78: shl byte ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x00000000001610e1: shl byte ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000006af35: shl byte ptr [rsi + 0xf], cl; outsd dx, dword ptr [rsi]; mul dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000010ab3a: shl byte ptr [rsi + rdi*8], cl; call qword ptr [rax - 0x18]; 
0x0000000000179f3c: shl byte ptr [rsi - 0x591f000b], 0xf5; push rax; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; call rbx; 
0x00000000000f2371: shl byte ptr [rsi], 0x64; mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000001ab4c0: shl ch, 1; cmc; jmp rbx; 
0x00000000001866c8: shl dh, 1; sti; call rax; 
0x00000000001866c8: shl dh, 1; sti; call rax; call 0xffffffffdb7966cd; sti; jmp qword ptr [rax]; 
0x00000000001a1950: shl dl, 1; int1; jmp qword ptr [rcx]; 
0x000000000016ee00: shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000000fbd93: shl dword ptr [rax], 1; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001929ac: shl dword ptr [rbx], -0x15; jmp qword ptr [rdx]; 
0x00000000000fd5b2: shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; adc al, 0x8a; add eax, dword ptr [rsi + rdx]; ret; 
0x00000000000c1144: shl dword ptr [rcx + rcx*4 + 0x14], 1; and eax, 0x2d4; mov eax, 0x3a; syscall; 
0x00000000000cbe2b: shl dword ptr [rcx], 0x2f; add byte ptr [rsp + rcx*2 - 0x75], ah; sub byte ptr [rcx - 0x75], cl; or byte ptr [r8 - 0x77], r9b; ret 0x8948; 
0x000000000017a008: shl dword ptr [rdi - 0x582c000b], cl; cmc; call qword ptr [rax - 0x59]; 
0x0000000000179f20: shl dword ptr [rdi - 0x582c000b], cl; cmc; call qword ptr [rax - 0x5a]; 
0x0000000000179f48: shl dword ptr [rdi - 0x582c000b], cl; cmc; call qword ptr [rax]; 
0x0000000000179f8c: shl dword ptr [rdi - 0x582c000b], cl; cmc; jmp qword ptr [rax]; 
0x000000000017a00c: shl dword ptr [rdi - 0x58af000b], cl; cmc; call rbx; 
0x000000000017a000: shl dword ptr [rdi - 0x58bf000b], cl; cmc; call rbx; 
0x0000000000179f90: shl dword ptr [rdi - 0x58df000b], cl; cmc; call rbx; 
0x0000000000179f4c: shl dword ptr [rdi - 0x58ef000b], cl; cmc; call rbx; 
0x0000000000179f34: shl dword ptr [rdi - 0x5957000b], cl; cmc; inc eax; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp rax; 
0x0000000000179f24: shl dword ptr [rdi - 0x59af000b], cl; cmc; call rbx; 
0x0000000000174968: shl dword ptr [rdi - 5], 1; ret; 
0x000000000015feb9: shl dword ptr [rdx + rax], cl; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000000377a3: shl dword ptr [rsi + 0x38], 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000161166: shl dword ptr [rsi + 0xf], -0x11; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000a11ab: shl dword ptr [rsi + 0xf], -0x26; ret; 
0x000000000008a812: shl dword ptr [rsi + 0xf], -0x29; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000016212b: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000016121d: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x0000000000161206: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x00000000001611ef: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000015fcab: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000161181: shl dword ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000008bbdc: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x00000000000970b8: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xf188; 
0x0000000000161041: shl dword ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000010c5c0: shl eax, 0x10; movzx esi, si; or eax, esi; bswap eax; ret; 
0x00000000000fbc3a: shl eax, 0x10; or eax, edx; or eax, ebx; add rsp, 0x90; pop rbx; ret; 
0x00000000000364f6: shl eax, 0x17; and edx, 0x807fffff; or eax, edx; movd xmm1, eax; movaps xmm0, xmm1; ret; 
0x000000000010c5d0: shl eax, 0x18; and esi, 0xffffff; or eax, esi; bswap eax; ret; 
0x00000000001180da: shl eax, 3; cdqe; shr rax, 4; ret; 
0x0000000000117f3d: shl eax, 4; add eax, 8; ret; 
0x000000000010c5af: shl eax, 8; or eax, esi; bswap eax; ret; 
0x00000000000fa51b: shl eax, 8; shl rdi, 0x20; or eax, edx; or rax, rsi; or rax, rdi; ret; 
0x00000000000d1ec8: shl eax, cl; mov dword ptr [rsi + 0x28], ecx; cdqe; or qword ptr [rdi + 0x90], rax; xor eax, eax; ret; 
0x0000000000037793: shl eax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000375ec: shl eax, cl; shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000037813: shl eax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x0000000000088b53: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000038b0c: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000038a97: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000038a66: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000000fa51f: shl edi, 0x20; or eax, edx; or rax, rsi; or rax, rdi; ret; 
0x00000000000361b8: shl edi, 0x34; and rax, rdx; or rdi, rax; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x00000000001a4891: shl edi, 1; jmp qword ptr [rax]; 
0x000000000003c8c6: shl edx, 0x20; mov eax, eax; or rax, rdx; ret; 
0x0000000000093b0a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x00000000000a3168: shl edx, 2; xor esi, esi; call 0x8c4b0; mov rax, rbx; pop rbx; ret; 
0x0000000000021fd8: shl edx, 4; lea rdi, qword ptr [r14 + rdx]; call rax; 
0x00000000000375cc: shl edx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x00000000000375ac: shl edx, cl; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000011810c: shl esi, 4; lea rax, qword ptr [rdi + rsi + 8]; ret; 
0x0000000000038b0b: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000038a96: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000038a65: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000037792: shl rax, cl; or qword ptr [rdi], rax; xor eax, eax; ret; 
0x00000000000375eb: shl rax, cl; shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000037812: shl rax, cl; test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x0000000000088b52: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000000fa51e: shl rdi, 0x20; or eax, edx; or rax, rsi; or rax, rdi; ret; 
0x00000000000361b7: shl rdi, 0x34; and rax, rdx; or rdi, rax; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x00000000001a4890: shl rdi, 1; jmp qword ptr [rax]; 
0x000000000003c8c5: shl rdx, 0x20; mov eax, eax; or rax, rdx; ret; 
0x0000000000093b09: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, qword ptr [rdi + rax]; ret; 
0x00000000000a3167: shl rdx, 2; xor esi, esi; call 0x8c4b0; mov rax, rbx; pop rbx; ret; 
0x0000000000021fd7: shl rdx, 4; lea rdi, qword ptr [r14 + rdx]; call rax; 
0x00000000000375cb: shl rdx, cl; shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x00000000000375ab: shl rdx, cl; shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000011810b: shl rsi, 4; lea rax, qword ptr [rdi + rsi + 8]; ret; 
0x0000000000038b04: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000038a90: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000038b03: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000038a8f: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000001a1c10: shr ah, 0xf1; jmp qword ptr [rcx]; 
0x00000000001059d6: shr al, 0x24; ret; 
0x00000000000f72c1: shr al, 0x29; pop rsp; idiv edi; add rsp, 0x408; ret; 
0x0000000000105a9c: shr al, 0x5e; ret 0xffff; 
0x00000000000321f0: shr al, 0xfa; sar dh, cl; jmp qword ptr [rsi + 0x2e]; 
0x00000000001866cc: shr al, 1; sti; jmp qword ptr [rax - 0x25]; 
0x0000000000132151: shr al, cl; add eax, dword ptr [rax]; add byte ptr [rcx], al; ret 0x59e9; 
0x00000000000ef804: shr al, cl; xchg dl, cl; stc; jmp qword ptr [rsi + 0x44]; 
0x00000000001079f6: shr ax, 0xe; and eax, 1; ret; 
0x00000000001abb90: shr bh, 0xf5; call qword ptr [rax]; 
0x0000000000061739: shr bh, 0xff; dec dword ptr [rax - 0x75]; add byte ptr [rcx - 0x77], cl; add bl, ch; ret; 
0x0000000000061654: shr bh, 0xff; dec dword ptr [rdi]; test al, ch; out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000189b69: shr bh, 1; jmp rsp; 
0x0000000000189b61: shr bh, 1; lcall ptr [rcx + rsi - 0x2f15ffff]; out dx, eax; jmp rsp; 
0x0000000000189bd9: shr bh, cl; call rsp; 
0x0000000000189bd1: shr bh, cl; dec dword ptr [rbp + rsi - 0x2d6fffff]; out dx, eax; call rsp; 
0x0000000000082787: shr bl, 0xa7; mov rsi, qword ptr [rsp + 0x18]; pop rdx; pop rbx; pop rbp; jmp rax; 
0x00000000000b06a9: shr bl, 0xc1; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x30d7b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000b05a9: shr bl, 0xce; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x30d8b1]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000001365c1: shr bl, 0xdb; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000000497e8: shr bl, 0xec; mov rax, rsi; nop; ret; 
0x0000000000048efe: shr byte ptr [rax + 0x31087410], cl; ror byte ptr [rbp - 0x7b], cl; dec dword ptr [rdi]; xchg eax, ebp; ret 0xc031; 
0x00000000000f1d84: shr byte ptr [rax + rax], 0xf7; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0c14: shr byte ptr [rax + rax], cl; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000019e020: shr byte ptr [rax - 5], 1; call qword ptr [rax]; 
0x0000000000133858: shr byte ptr [rax], 0; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x00000000001337db: shr byte ptr [rax], 0; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x000000000013706f: shr byte ptr [rax], 1; add bl, ch; vminsd xmm15, xmm4, qword ptr [rax - 1]; pop r12; ret; 
0x0000000000136e6f: shr byte ptr [rax], cl; add bl, ch; vminsd xmm15, xmm4, qword ptr [rax - 1]; pop r12; ret; 
0x000000000018778c: shr byte ptr [rbx - 0x5e9f0004], 0xfc; jmp qword ptr [rax]; 
0x0000000000178644: shr byte ptr [rbx - 0xe], 0xff; shr byte ptr [rbx - 0xe], 1; jmp rax; 
0x0000000000178648: shr byte ptr [rbx - 0xe], 1; jmp rax; 
0x0000000000107eb4: shr byte ptr [rbx], 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000097eaf: shr byte ptr [rcx], 0xc8; ret; 
0x000000000002bdb8: shr byte ptr [rcx], cl; ret; 
0x00000000000ed3ed: shr byte ptr [rcx], cl; sal bl, 1; ret; 
0x000000000008cc36: shr byte ptr [rdi + 0x33], cl; add byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rbp + 7], dh; lea rax, qword ptr [rip + 0x79]; ret; 
0x0000000000178708: shr byte ptr [rdi - 0xe], 0xff; shr byte ptr [rdi - 0xe], 1; jmp rax; 
0x000000000017870c: shr byte ptr [rdi - 0xe], 1; jmp rax; 
0x00000000000c1da0: shr byte ptr [rdi], 0; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0dbd: shr byte ptr [rdi], 1; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0ba4: shr byte ptr [rdi], cl; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001864b8: shr byte ptr [rdx - 0x54af0003], 0xfd; jmp rax; 
0x0000000000186ab0: shr byte ptr [rdx], 0xfc; push qword ptr [rax + 0x2c]; cld; inc dword ptr [rax + 0x2e]; cld; jmp qword ptr [rax]; 
0x0000000000187574: shr byte ptr [rsi - 0x51af0004], 0xfc; jmp rax; 
0x00000000000eaf92: shr byte ptr [rsi], cl; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000186a94: shr byte ptr [rsp + rdi*8], 0xff; nop; cld; push qword ptr [rax + 0x30]; cld; jmp qword ptr [rax + 0x32]; 
0x00000000000c1dff: shr byte ptr gs:[rdi], 0; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000186914: shr ch, 0xfb; call qword ptr [rax]; 
0x0000000000186914: shr ch, 0xfb; call qword ptr [rax]; out dx, eax; sti; jmp qword ptr [rax - 0x10]; 
0x0000000000048151: shr cl, 0x25; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000ca94c: shr cl, 0xf7; idiv edi; dec dword ptr [rax - 0x7d]; ret; 
0x00000000000d19f0: shr cl, 1; ret 0xfffd; 
0x000000000011ad54: shr cl, 1; ret 0xfffe; 
0x000000000010c8a2: shr cl, 1; sub eax, 0x89ffffff; ret 0x96eb; 
0x0000000000040be4: shr cl, cl; fcos; jmp qword ptr [rsi + 0xf]; 
0x00000000000cde35: shr cl, cl; ret 0xfff9; 
0x0000000000045ed4: shr cl, cl; xchg eax, esi; fdivp st(7); jmp qword ptr [rsi + 0xf]; 
0x0000000000060c3b: shr dh, 0xff; call qword ptr [rbx + 0xf]; 
0x00000000001a962c: shr dl, 1; hlt; jmp qword ptr [rdx]; 
0x00000000000f1c73: shr dword ptr [rax + rax], -9; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000f0c74: shr dword ptr [rax + rax], 1; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000016217e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000133765: shr dword ptr [rax], 0; call qword ptr [rax]; 
0x00000000001336fd: shr dword ptr [rax], 0; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000001336ad: shr dword ptr [rax], 0; mov rax, qword ptr [rip + 0x288441]; pop r12; jmp rax; 
0x0000000000136faf: shr dword ptr [rax], 1; add bl, ch; vminsd xmm15, xmm4, qword ptr [rax - 1]; pop r12; ret; 
0x00000000000fb593: shr dword ptr [rax], 1; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000051929: shr dword ptr [rbp + 0x1480001], cl; ret; 
0x0000000000186404: shr dword ptr [rbp + rdi*8 - 0x2529e01], -1; add dword ptr [rsi - 0x51810003], ebp; std; call qword ptr [rsi]; 
0x00000000000f30a3: shr dword ptr [rbp - 0x2708ffd4], 0x64; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000107e89: shr dword ptr [rbx], 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000107d34: shr dword ptr [rbx], 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000012bae9: shr dword ptr [rcx - 1], cl; inc dword ptr [rbx - 0x3fe6fe08]; add rsp, 8; add eax, 2; ret; 
0x00000000000c1d64: shr dword ptr [rdi], 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0ac7: shr dword ptr [rdi], cl; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000c0b08: shr dword ptr [rdi], cl; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x00000000001ac594: shr dword ptr [rdx - 0xb], cl; jmp qword ptr [rdx]; 
0x00000000000eb393: shr dword ptr [rdx], 1; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000014beb9: shr dword ptr [rsi + 0x63490003], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000013700e: shr dword ptr cs:[rax], 1; add bl, ch; vminsd xmm15, xmm4, qword ptr [rax - 1]; pop r12; ret; 
0x000000000004d631: shr eax, -0x57; ret 0xffff; 
0x000000000010c5fd: shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000010c5e8: shr eax, 0x18; ret; 
0x00000000000363f1: shr eax, 0x1f; ret; 
0x00000000000fa4d8: shr eax, 0x20; and edi, 0xfff; and eax, 0xfffff000; or eax, edi; ret; 
0x0000000000039e83: shr eax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000003d3a2: shr eax, 0x20; shr rdx, 0x10; mov word ptr [rdi + 4], ax; xor eax, eax; mov word ptr [rdi + 2], dx; ret; 
0x0000000000036040: shr eax, 0x3f; ret; 
0x0000000000081137: shr eax, 0xb; xor edi, eax; mov byte ptr [rsi + rbx], dil; mov rax, rsi; pop rbx; ret; 
0x00000000000a1b39: shr eax, 0xc; and eax, 0xf; movsxd rsi, dword ptr [rcx + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000000a1af9: shr eax, 0xc; and eax, 0xf; movsxd rsi, dword ptr [rdx + rax*4]; add rdx, rsi; jmp rdx; 
0x00000000000fa4f8: shr eax, 0xc; xor al, al; or eax, edi; ret; 
0x00000000000a1aba: shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x00000000001079f7: shr eax, 0xe; and eax, 1; ret; 
0x00000000000d1d25: shr eax, 3; and eax, 1; nop dword ptr [rax + rax]; pop rbx; ret; 
0x00000000000735f2: shr eax, 4; and eax, 1; ret; 
0x00000000001180e0: shr eax, 4; ret; 
0x0000000000073602: shr eax, 5; and eax, 1; ret; 
0x00000000000a1b94: shr eax, 6; and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x00000000000a1a99: shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x00000000000375cf: shr eax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x00000000000375af: shr eax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000019997c: shr ebp, cl; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000036c5a: shr ebx, -0x36; mov rdx, qword ptr [rip + 0x387204]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000109f37: shr ecx, 0x33; adc edi, edi; call qword ptr [rax - 0x18]; 
0x000000000018f171: shr ecx, cl; call qword ptr [rcx + 5]; 
0x00000000000f685c: shr ecx, cl; cmp ebp, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000038c1c: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000038ba1: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000038b70: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000000d2d1c: shr ecx, cl; ret 0xfffc; 
0x00000000000f66bc: shr ecx, cl; ret; 
0x00000000000f693c: shr ecx, cl; std; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000f691c: shr ecx, cl; xchg eax, esi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000189b91: shr edi, 1; dec dword ptr [rbx + rsi + 1]; add byte ptr [rcx + rdx*8 + 0x3394ffef], ah; add dword ptr [rax], eax; ret; 
0x00000000001222ab: shr edi, 1; inc dword ptr [rbx - 0x76b79c03]; ret; 
0x000000000010c5f4: shr edi, 8; and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret; 
0x000000000003d004: shr edx, 0x10; and edx, 0x3ff; xor eax, edx; ret; 
0x000000000003d3a6: shr edx, 0x10; mov word ptr [rdi + 4], ax; xor eax, eax; mov word ptr [rdi + 2], dx; ret; 
0x00000000000366f5: shr edx, 0x1f; or edx, eax; mov eax, 0xfffe; sub eax, edx; sar eax, 0x10; ret; 
0x000000000012dee2: shr edx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d163: shr edx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x00000000000828ce: shr edx, 0xb; xor esi, edx; mov byte ptr [rax + rbx], sil; pop rbx; ret; 
0x0000000000075213: shr edx, 2; sub eax, edx; ret; 
0x000000000012ef3a: shr edx, 3; add rax, rcx; jmp rax; 
0x00000000000375ef: shr edx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x0000000000091c94: shr edx, cl; or rax, r10; mov qword ptr [rdi], rax; pop rbx; pop rbp; ret; 
0x00000000000828ca: shr esi, 3; shr rdx, 0xb; xor esi, edx; mov byte ptr [rax + rbx], sil; pop rbx; ret; 
0x0000000000117c2b: shr esi, 3; sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x00000000000712a0: shr esi, 4; and esi, 1; mov eax, esi; ret; 
0x00000000000713a0: shr esi, 5; and esi, 1; mov eax, esi; ret; 
0x0000000000147cbb: shr esp, 1; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000091c93: shr r10, cl; or rax, r10; mov qword ptr [rdi], rax; pop rbx; pop rbp; ret; 
0x0000000000038c1b: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000038ba0: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000038b6f: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000011ad53: shr r9b, 1; ret 0xfffe; 
0x00000000000fa4d7: shr rax, 0x20; and edi, 0xfff; and eax, 0xfffff000; or eax, edi; ret; 
0x0000000000039e82: shr rax, 0x20; mov dword ptr [rsp - 0x14], eax; fld xword ptr [rsp - 0x18]; ret; 
0x000000000003d3a1: shr rax, 0x20; shr rdx, 0x10; mov word ptr [rdi + 4], ax; xor eax, eax; mov word ptr [rdi + 2], dx; ret; 
0x000000000003603f: shr rax, 0x3f; ret; 
0x0000000000081136: shr rax, 0xb; xor edi, eax; mov byte ptr [rsi + rbx], dil; mov rax, rsi; pop rbx; ret; 
0x00000000000fa4f7: shr rax, 0xc; xor al, al; or eax, edi; ret; 
0x00000000001180df: shr rax, 4; ret; 
0x00000000000375ce: shr rax, 6; or qword ptr [rdi + rax*8], rdx; xor eax, eax; ret; 
0x00000000000375ae: shr rax, 6; test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x000000000003d3a5: shr rdx, 0x10; mov word ptr [rdi + 4], ax; xor eax, eax; mov word ptr [rdi + 2], dx; ret; 
0x000000000012dee1: shr rdx, 0x20; mov dword ptr [rsp], edx; call qword ptr [rax + 0x48]; 
0x000000000012d162: shr rdx, 0x20; mov qword ptr [rsp], rdx; call qword ptr [rax + 8]; 
0x00000000000828cd: shr rdx, 0xb; xor esi, edx; mov byte ptr [rax + rbx], sil; pop rbx; ret; 
0x0000000000075212: shr rdx, 2; sub eax, edx; ret; 
0x000000000012ef39: shr rdx, 3; add rax, rcx; jmp rax; 
0x00000000000375ee: shr rdx, 6; not rax; and qword ptr [rdi + rdx*8], rax; xor eax, eax; ret; 
0x00000000000828c9: shr rsi, 3; shr rdx, 0xb; xor esi, edx; mov byte ptr [rax + rbx], sil; pop rbx; ret; 
0x0000000000038c14: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000038b9a: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000038c13: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000038b99: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000096961: shufps xmm0, xmmword ptr [rdi + 4], 0; lea rax, qword ptr [rdi + 4]; ret; 
0x00000000000968c1: shufps xmm0, xmmword ptr [rdi + 4], 0; mov rax, rdi; ret; 
0x0000000000023765: sldt word ptr [r8]; mov rdi, qword ptr [rbx + 0x18]; call rax; 
0x000000000012aa01: sldt word ptr [rax]; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; call qword ptr [rax + 0x20]; 
0x000000000012a815: sldt word ptr [rax]; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + rcx*4 - 0x11], r9b; call qword ptr [rax + 0x20]; 
0x00000000000fa4de: sldt word ptr [rax]; and eax, 0xfffff000; or eax, edi; ret; 
0x000000000016dfbd: sldt word ptr [rax]; mov esp, 0xbf00000f; sldt word ptr [rax]; ret 0xf; 
0x0000000000023766: sldt word ptr [rax]; mov rdi, qword ptr [rbx + 0x18]; call rax; 
0x000000000018f16d: sldt word ptr [rax]; nop; shr ecx, cl; call qword ptr [rcx + 5]; 
0x00000000000a17c9: sldt word ptr [rax]; pop rbp; lea rax, qword ptr [r9 + 1]; pop r12; ret; 
0x000000000016dfc5: sldt word ptr [rax]; ret 0xf; 
0x00000000000f2313: sldt word ptr [rbx]; push rsp; and al, 0x38; mov eax, edx; add rsp, 0x48; ret; 
0x000000000016376f: stc; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000001adfa5: stc; add dword ptr [rax], eax; jmp qword ptr [rdi]; 
0x00000000000b731d: stc; add dword ptr [rdi], ecx; sahf; ret 0x1fbf; 
0x00000000001463d3: stc; add eax, dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018ceea: stc; call qword ptr [rax + rax*4 + 2]; add byte ptr [rdx + rbp], dh; stc; jmp rsp; 
0x000000000010be98: stc; call qword ptr [rax - 0x18]; 
0x000000000019d0d2: stc; call qword ptr [rax]; 
0x000000000018d2ca: stc; call qword ptr [rcx - 0x533bfffe]; stc; jmp rsp; 
0x000000000019d11a: stc; call qword ptr [rsi + 0x16]; 
0x000000000018cea2: stc; call rsp; 
0x000000000003776b: stc; cmp byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000003037b: stc; cmp byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000eeff3: stc; dec dword ptr [rax + 0x39]; ret; 
0x00000000000f25d3: stc; dec dword ptr [rax - 0x73]; adc cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x0000000000085a16: stc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000095909: stc; dec dword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x000000000008aad7: stc; dec dword ptr [rbx + 0x33959105]; add byte ptr [rbp + 0x480d75c0], al; add esp, 8; ret; 
0x0000000000095dcb: stc; dec dword ptr [rcx - 0x77]; ret 0x840f; 
0x000000000018d062: stc; dec dword ptr [rdi + rcx*4 + 2]; add byte ptr [rcx + rbp*2], ah; stc; call rsp; 
0x0000000000113c03: stc; dec dword ptr [rdi]; test byte ptr [rdx], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x000000000018cff2: stc; dec dword ptr [rsi + rax*4 + 0x5d3d0002]; stc; call rsp; 
0x000000000013437f: stc; imul dword ptr [rax]; add byte ptr [rax - 0x9ffffff], al; ret; 
0x000000000018d3d2: stc; inc dword ptr [rax + rbp*4 - 0x326bfffe]; stc; call rsp; 
0x00000000000f3c09: stc; inc dword ptr [rbp - 0x7cee8b40]; ret; 
0x0000000000164b04: stc; jmp qword ptr [rsi + 0x2e]; 
0x00000000000ef808: stc; jmp qword ptr [rsi + 0x44]; 
0x00000000000971dc: stc; jmp qword ptr [rsi - 0x70]; 
0x000000000018cdfa: stc; jmp rsp; 
0x00000000001747e4: stc; jnp 0x1747a0; ret; 
0x000000000018d072: stc; lcall ptr [rax + rdx*4 + 2]; add byte ptr [rdx + rbp*2], ah; stc; jmp rsp; 
0x000000000018d41a: stc; lcall ptr [rdx + rbp*4 - 0x2b2efffe]; stc; jmp rsp; 
0x00000000000f4783: stc; leave; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000018d17a: stc; ljmp ptr [rax + rbx*4 - 0x784bfffe]; stc; jmp rsp; 
0x000000000018d322: stc; ljmp ptr [rbx - 0x4f0bfffe]; stc; jmp rsp; 
0x0000000000144fc8: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000e3ee7: stc; mov dword ptr [rsi], 0; mov qword ptr [rsi + 0x10], 0; mov qword ptr [rsi + 8], 0; ret; 
0x00000000000eb199: stc; mov eax, 0x103; syscall; 
0x0000000000036c2f: stc; mov eax, 0xea; syscall; 
0x000000000007f884: stc; mov eax, 3; syscall; 
0x0000000000144fc2: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000096bc5: stc; mov qword ptr [rdx], rcx; ret; 
0x000000000011b242: stc; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000096843: stc; mov rax, rdi; ret; 
0x0000000000025fa3: stc; mov rdx, qword ptr [rsp + 0x50]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov dword ptr [rsp + 8], eax; call rbx; 
0x00000000000a5663: stc; movsd dword ptr [rdi], dword ptr [rsi]; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000000c2bbf: stc; or eax, dword ptr [eax]; movsxd rdx, dword ptr [rax + rbx*4]; add rax, rdx; jmp rax; 
0x000000000003879e: stc; pop r15; ret; 
0x000000000018d50a: stc; push qword ptr [rax + rsi*4 - 0x3dbfffe]; stc; jmp rsp; 
0x000000000018d31a: stc; push qword ptr [rbx + 2]; add byte ptr [rax + rsi*4 - 7], ah; ljmp ptr [rbx - 0x4f0bfffe]; stc; jmp rsp; 
0x000000000012f154: stc; push qword ptr [rdx + rcx + 0x48]; movsxd rdi, ecx; mov eax, 3; syscall; 
0x00000000001898d0: stc; push rax; out dx, eax; dec dword ptr [rax + 0x51180001]; out dx, eax; call rsp; 
0x0000000000107ac3: stc; ret; 
0x0000000000107d33: stc; shr dword ptr [rbx], 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000186939: stc; sti; jmp rax; 
0x0000000000133703: stc; sub dword ptr [rax], 0; jmp rax; 
0x0000000000149193: stc; xlatb; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000640f5: std; add al, byte ptr [rbp + 0x481b7eed]; mov eax, dword ptr [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x00000000000df309: std; add byte ptr [rax + 0x4d0f0000], al; call 0xfffffffffd918600; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x000000000005ec4b: std; add cl, byte ptr [rcx + rcx*4 - 0x16]; call qword ptr [rax + 0x38]; 
0x000000000018ba1d: std; add dword ptr [rax], eax; sub dil, r14b; jmp rsp; 
0x0000000000111e1a: std; add dword ptr [rdi], ecx; xchg eax, esp; ret; 
0x0000000000146a64: std; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001352d0: std; add ecx, dword ptr [rdi]; call 0x12c5c2; jmp qword ptr [rsi + 0xf]; 
0x000000000001f58a: std; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x00000000001865ce: std; call qword ptr [rax - 0x45]; 
0x000000000018648e: std; call qword ptr [rax - 0x52]; 
0x000000000018648e: std; call qword ptr [rax - 0x52]; std; jmp rax; 
0x00000000001864ba: std; call qword ptr [rax - 0x55]; 
0x00000000001864ba: std; call qword ptr [rax - 0x55]; std; jmp rax; 
0x00000000001863c6: std; call qword ptr [rax - 0x5a]; 
0x000000000017835a: std; call qword ptr [rax]; 
0x00000000001863f6: std; call qword ptr [rcx]; 
0x00000000001863b6: std; call qword ptr [rdx]; 
0x00000000001863ae: std; call qword ptr [rsi + 0x42fffda4]; movsd dword ptr [rdi], dword ptr [rsi]; std; call qword ptr [rdx]; 
0x0000000000186412: std; call qword ptr [rsi]; 
0x0000000000186412: std; call qword ptr [rsi]; movsd dword ptr [rdi], dword ptr [rsi]; std; jmp rsi; 
0x000000000018e13a: std; call qword ptr [rsp + rdx*8]; add al, byte ptr [rax]; and al, 0xdb; std; jmp rsp; 
0x000000000018e0da: std; call rsp; 
0x0000000000164b6f: std; clc; jmp qword ptr [rsi + 0xf]; 
0x00000000001ac481: std; cmc; call qword ptr [rax]; 
0x00000000001ac5b1: std; cmc; jmp rsp; 
0x00000000000df314: std; dec byte ptr [rdi]; xchg eax, esp; ret 0xd284; 
0x00000000001132eb: std; dec dword ptr [rax + 0x63]; sti; mov edx, eax; mov eax, 3; syscall; 
0x000000000018660e: std; dec dword ptr [rax - 0x24]; sti; call qword ptr [rax]; 
0x00000000000e4a74: std; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000006d008: std; dec dword ptr [rax - 0x73]; call 0x4163116d; pop rbp; pop rbp; ret; 
0x00000000001355de: std; dec dword ptr [rax - 0x75]; add eax, 0x288881; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000121bd9: std; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x0000000000072497: std; dec dword ptr [rax - 0x7f]; ret; 
0x000000000018648a: std; dec ebx; lodsd eax, dword ptr [rsi]; std; call qword ptr [rax - 0x52]; 
0x000000000003686d: std; fstp st(1); ret; 
0x000000000018ae99: std; hlt; call rsp; 
0x00000000000f693e: std; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000001991a1: std; in eax, dx; call qword ptr [rax]; 
0x00000000001991f9: std; in eax, dx; call qword ptr [rsi + 2]; 
0x0000000000112f15: std; inc dword ptr [rbp + 0x481d78c0]; movsxd rdi, ebx; mov eax, 3; syscall; 
0x000000000004820b: std; inc dword ptr [rdi + rcx + 0x44]; call 0xfffffffffff9a6fe; jmp qword ptr [rsi + 0x2e]; 
0x00000000001863b2: std; inc dword ptr [rdx - 0x5b]; std; call qword ptr [rdx]; 
0x0000000000186446: std; inc dword ptr [rsi - 0x53]; std; jmp rsi; 
0x00000000001864b6: std; inc eax; stosb byte ptr [rdi], al; std; call qword ptr [rax - 0x55]; 
0x0000000000186402: std; inc ecx; lodsb al, byte ptr [rsi]; std; jmp qword ptr [rcx - 0x53]; 
0x00000000001a2039: std; int1; jmp qword ptr [rcx]; 
0x0000000000178316: std; jmp qword ptr [rax - 0x3d]; 
0x0000000000178312: std; jmp qword ptr [rax - 0x3f]; 
0x000000000017830e: std; jmp qword ptr [rax - 0x41]; 
0x000000000017830a: std; jmp qword ptr [rax - 0x43]; 
0x0000000000178306: std; jmp qword ptr [rax - 0x45]; 
0x0000000000178302: std; jmp qword ptr [rax - 0x47]; 
0x00000000001782fe: std; jmp qword ptr [rax - 0x49]; 
0x00000000001782fa: std; jmp qword ptr [rax - 0x4b]; 
0x00000000001782f6: std; jmp qword ptr [rax - 0x4d]; 
0x00000000001782f2: std; jmp qword ptr [rax - 0x4f]; 
0x00000000001782ee: std; jmp qword ptr [rax - 0x51]; 
0x00000000001782ea: std; jmp qword ptr [rax - 0x53]; 
0x00000000001782e6: std; jmp qword ptr [rax - 0x55]; 
0x00000000001782e2: std; jmp qword ptr [rax - 0x57]; 
0x00000000001863c2: std; jmp qword ptr [rax - 0x5b]; 
0x000000000018f39a: std; jmp qword ptr [rax]; 
0x0000000000186406: std; jmp qword ptr [rcx - 0x53]; 
0x000000000018658e: std; jmp qword ptr [rdi - 0x45]; 
0x000000000018644e: std; jmp qword ptr [rdi - 0x52]; 
0x000000000018f212: std; jmp qword ptr [rdi]; 
0x000000000018eaf2: std; jmp qword ptr [rdx]; 
0x00000000000570f8: std; jmp qword ptr [rsi + 0xf]; 
0x0000000000186432: std; jmp qword ptr [rsi - 0x56]; 
0x000000000018642a: std; jmp qword ptr [rsi - 0x57]; 
0x0000000000186422: std; jmp qword ptr [rsi - 0x58]; 
0x000000000017831a: std; jmp rax; 
0x0000000000186416: std; jmp rsi; 
0x000000000018e142: std; jmp rsp; 
0x0000000000179c64: std; ljmp ptr [rdx]; add bh, bh; dec dword ptr [rdi]; cld; jmp qword ptr [rsi]; 
0x00000000000bcd96: std; mov al, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000001447e3: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000000cb427: std; mov eax, 0xcb; syscall; 
0x000000000001ff64: std; mov eax, 3; syscall; 
0x0000000000198736: std; mov esp, 0xd1cffed; jno 0x1986fa; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000ec077: std; mov rdi, rbp; mov eax, 0x4f; syscall; 
0x00000000001447eb: std; mov word ptr [rdi - 2], cx; ret; 
0x000000000008cbf8: std; or al, 0; ret; 
0x0000000000189469: std; out dx, al; jmp rsp; 
0x0000000000189461: std; out dx, al; lcall ptr [rsp + rcx - 0x22cffff]; out dx, al; jmp rsp; 
0x00000000001863be: std; push qword ptr [rax + 0x60fffda4]; movsd dword ptr [rdi], dword ptr [rsi]; std; call qword ptr [rax - 0x5a]; 
0x00000000001864c2: std; push qword ptr [rax - 0x54]; std; call qword ptr [rax]; 
0x00000000001865c6: std; push rcx; mov ebx, 0xbbf1fffd; std; call qword ptr [rax - 0x45]; 
0x0000000000186516: std; push rcx; mov ebx, 0xbbf1fffd; std; call qword ptr [rcx]; 
0x0000000000186586: std; push rcx; mov ebx, 0xbbf1fffd; std; jmp qword ptr [rdi - 0x45]; 
0x000000000018660a: std; push rcx; mov ebx, 0xdc48fffd; sti; call qword ptr [rax]; 
0x0000000000178de4: std; ret 0xfff3; 
0x0000000000186945: std; sti; call rax; 
0x00000000000eb167: std; sub al, 0x2d; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb067: std; sub eax, 0xd8f7002d; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000083e61: sti; adc al, 0x77; sub ecx, dword ptr [rcx - 0x7d]; ret; 
0x0000000000084041: sti; add al, 0x77; or dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000001338bd: sti; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x28bfc8; call qword ptr [rax + 0x28]; 
0x000000000003d051: sti; add byte ptr [rax], al; add dl, dh; movups xmm0, xmmword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x000000000003e858: sti; add cl, byte ptr [rcx + 0x29]; ret; 
0x00000000001add3d: sti; add dword ptr [rax], eax; shl byte ptr [rdx], 0xf6; call rdi; 
0x00000000000b7964: sti; add eax, 0x2941c229; ret; 
0x000000000015e6a1: sti; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000018623a: sti; call qword ptr [rax + 0x19]; 
0x000000000018623a: sti; call qword ptr [rax + 0x19]; sti; jmp qword ptr [rax]; 
0x000000000007443a: sti; call qword ptr [rax + 0x20]; 
0x000000000018664a: sti; call qword ptr [rax + 0x20fffbe9]; fdiv st(3), st(0); jmp rax; 
0x0000000000186282: sti; call qword ptr [rax + 0x2a]; 
0x00000000001862f6: sti; call qword ptr [rax + 0x5d]; 
0x000000000007b983: sti; call qword ptr [rax + 0x60]; 
0x00000000001862ee: sti; call qword ptr [rax + 0x70fffb59]; pop rbx; sti; call qword ptr [rax + 0x5d]; 
0x000000000018633a: sti; call qword ptr [rax + 0x7b]; 
0x000000000010a268: sti; call qword ptr [rax - 0x18]; 
0x000000000018670a: sti; call qword ptr [rax - 0x18]; sti; jmp rax; 
0x0000000000186706: sti; call qword ptr [rax - 0x1a]; 
0x0000000000186706: sti; call qword ptr [rax - 0x1a]; sti; call qword ptr [rax - 0x18]; sti; jmp rax; 
0x0000000000186702: sti; call qword ptr [rax - 0x1c]; 
0x000000000018669a: sti; call qword ptr [rax - 0x1f]; 
0x000000000018671a: sti; call qword ptr [rax - 0x20]; 
0x000000000018671a: sti; call qword ptr [rax - 0x20]; sti; inc dword ptr [rax - 0x1e]; sti; call qword ptr [rax]; 
0x0000000000186732: sti; call qword ptr [rax - 0x24]; 
0x0000000000186732: sti; call qword ptr [rax - 0x24]; sti; jmp qword ptr [rax]; 
0x00000000001867ae: sti; call qword ptr [rax - 0x31]; 
0x000000000018675a: sti; call qword ptr [rax - 0x38]; 
0x000000000018678e: sti; call qword ptr [rax - 0x3d]; 
0x000000000018678e: sti; call qword ptr [rax - 0x3d]; sti; jmp qword ptr [rax]; 
0x00000000001866e6: sti; call qword ptr [rax - 0x6f00041a]; call 0xffffffffdb3966ed; sti; jmp rax; 
0x0000000000186642: sti; call qword ptr [rax - 0x6f00041b]; out 0xfb, eax; call qword ptr [rax + 0x20fffbe9]; fdiv st(3), st(0); jmp rax; 
0x0000000000186926: sti; call qword ptr [rax - 0xc]; 
0x000000000018697a: sti; call qword ptr [rax - 5]; 
0x000000000017c116: sti; call qword ptr [rax]; 
0x0000000000186216: sti; call qword ptr [rax]; adc bh, bl; call rax; 
0x000000000018672a: sti; call qword ptr [rax]; call 0xffffffffdab9672d; sti; call qword ptr [rax - 0x24]; 
0x000000000018678a: sti; call qword ptr [rax]; fdivr st(3); call qword ptr [rax - 0x3d]; 
0x000000000018678a: sti; call qword ptr [rax]; fdivr st(3); call qword ptr [rax - 0x3d]; sti; jmp qword ptr [rax]; 
0x000000000018696a: sti; call qword ptr [rax]; idiv bl; jmp qword ptr [rax - 9]; 
0x0000000000186916: sti; call qword ptr [rax]; out dx, eax; sti; jmp qword ptr [rax - 0x10]; 
0x000000000018621a: sti; call rax; 
0x00000000001866ca: sti; call rax; call 0xffffffffdb7966cd; sti; jmp qword ptr [rax]; 
0x000000000018631a: sti; call rax; jo 0x18631a; jmp qword ptr [rax]; 
0x000000000018677a: sti; call rax; sar bl, cl; jmp qword ptr [rax]; 
0x0000000000186306: sti; call rax; sti; inc dword ptr [rax]; sti; jmp rax; 
0x00000000000dbb23: sti; call rcx; 
0x00000000001b028a: sti; call rsi; 
0x00000000001ac369: sti; cmc; call qword ptr [rax]; 
0x00000000000c0f9a: sti; dec dword ptr [rax + 0x39]; ret; 
0x00000000000caad0: sti; dec dword ptr [rax + 1]; ret; 
0x000000000010a283: sti; dec dword ptr [rax - 0x75]; add eax, 0x2b3bdc; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x00000000000c0f5e: sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000132180: sti; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000ab252: sti; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000135661: sti; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000199b2c: sti; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000186212: sti; inc dword ptr [rax + 0x11]; sti; call qword ptr [rax]; 
0x0000000000186212: sti; inc dword ptr [rax + 0x11]; sti; call qword ptr [rax]; adc bh, bl; call rax; 
0x0000000000186226: sti; inc dword ptr [rax + 0x15]; sti; call qword ptr [rax]; 
0x0000000000186292: sti; inc dword ptr [rax + 0x20fffb30]; xor bh, bl; inc eax; xor edi, ebx; jmp qword ptr [rax + 0x35]; 
0x0000000000186286: sti; inc dword ptr [rax + 0x2b]; sti; push qword ptr [rax + 0x1d]; sti; jmp rax; 
0x00000000001862aa: sti; inc dword ptr [rax + 0x3a]; sti; jmp rax; 
0x0000000000186236: sti; inc dword ptr [rax + 0x50fffb18]; sbb ebx, edi; jmp qword ptr [rax]; 
0x00000000001867ca: sti; inc dword ptr [rax + 0x58fffbd8]; add al, 0xfc; jmp qword ptr [rax]; 
0x0000000000186276: sti; inc dword ptr [rax + 0x70fffb27]; sub bl, bh; jmp qword ptr [rax + 0x29]; 
0x0000000000186346: sti; inc dword ptr [rax + 0x7f]; sti; call rax; 
0x000000000018668a: sti; inc dword ptr [rax - 0x17]; sti; call rax; 
0x0000000000186686: sti; inc dword ptr [rax - 0x19]; sti; inc dword ptr [rax - 0x17]; sti; call rax; 
0x000000000018671e: sti; inc dword ptr [rax - 0x1e]; sti; call qword ptr [rax]; 
0x00000000001866b6: sti; inc dword ptr [rax - 0x21]; sti; jmp qword ptr [rax]; 
0x000000000018662e: sti; inc dword ptr [rax - 0x24]; sti; inc dword ptr [rax]; fdivp st(3); jmp rax; 
0x0000000000186776: sti; inc dword ptr [rax - 0x2f00042f]; sar bl, cl; jmp qword ptr [rax]; 
0x0000000000186316: sti; inc dword ptr [rax - 0x2f000491]; jo 0x18631a; jmp qword ptr [rax]; 
0x0000000000186256: sti; inc dword ptr [rax]; and bl, bh; push rax; and bl, bh; jmp rax; 
0x0000000000186976: sti; inc dword ptr [rax]; cli; sti; call qword ptr [rax - 5]; 
0x0000000000186632: sti; inc dword ptr [rax]; fdivp st(3); jmp rax; 
0x0000000000186336: sti; inc dword ptr [rax]; jp 0x186336; call qword ptr [rax + 0x7b]; 
0x0000000000186922: sti; inc dword ptr [rax]; sti; call qword ptr [rax - 0xc]; 
0x000000000018630a: sti; inc dword ptr [rax]; sti; jmp rax; 
0x0000000000186966: sti; inc eax; hlt; sti; call qword ptr [rax]; 
0x0000000000186912: sti; inc eax; in eax, dx; sti; call qword ptr [rax]; 
0x0000000000186786: sti; inc eax; salc; sti; call qword ptr [rax]; 
0x0000000000186246: sti; inc eax; sbb edi, ebx; jmp rax; 
0x00000000001862ba: sti; inc eax; sti; jmp qword ptr [rax + 0x42]; 
0x000000000018629a: sti; inc eax; xor edi, ebx; jmp qword ptr [rax + 0x35]; 
0x0000000000179c78: sti; inc ebx; add dh, bh; jmp rdi; 
0x000000000018627e: sti; jmp qword ptr [rax + 0x29]; 
0x000000000018629e: sti; jmp qword ptr [rax + 0x35]; 
0x00000000001862be: sti; jmp qword ptr [rax + 0x42]; 
0x00000000001862d6: sti; jmp qword ptr [rax + 0x4e]; 
0x000000000018632e: sti; jmp qword ptr [rax + 0x77]; 
0x000000000018691a: sti; jmp qword ptr [rax - 0x10]; 
0x000000000018667e: sti; jmp qword ptr [rax - 0x1d]; 
0x00000000001866b2: sti; jmp qword ptr [rax - 0x23]; 
0x00000000001866ce: sti; jmp qword ptr [rax - 0x25]; 
0x00000000001867a2: sti; jmp qword ptr [rax - 0x35]; 
0x000000000018696e: sti; jmp qword ptr [rax - 9]; 
0x000000000018623e: sti; jmp qword ptr [rax]; 
0x00000000001aaa0e: sti; jmp qword ptr [rdx]; 
0x00000000000804e4: sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000007cf43: sti; jmp qword ptr [rsi + 0x66]; 
0x000000000007f4d0: sti; jmp qword ptr [rsi + 0xf]; 
0x000000000012c7cc: sti; jmp qword ptr [rsi - 0x70]; 
0x00000000001aac2a: sti; jmp qword ptr [rsi]; 
0x000000000018622e: sti; jmp rax; 
0x000000000018df62: sti; jmp rsp; 
0x00000000000a4341: sti; jns 0xa4375; add byte ptr [rax + 0x39], cl; ret; 
0x00000000001867ce: sti; lcall ptr [rax + 4]; cld; jmp qword ptr [rax]; 
0x00000000000d2307: sti; lcall ptr [rbx + 0x5d]; xor eax, eax; pop r12; ret; 
0x00000000000edcd0: sti; mov al, 3; syscall; 
0x0000000000144bc8: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000f157a: sti; mov eax, 0x127; syscall; 
0x00000000000f17da: sti; mov eax, 0x128; syscall; 
0x0000000000112f41: sti; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000c2782: sti; mov eax, 3; syscall; 
0x0000000000144bc2: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000000f1f71: sti; mov edx, eax; mov eax, 3; syscall; 
0x000000000009680d: sti; mov rax, rdi; ret; 
0x00000000000b5fc9: sti; or al, 0; movsxd rdx, dword ptr [rax + rdx*4]; add rax, rdx; jmp rax; 
0x00000000000d1be9: sti; or dh, byte ptr [rdi + rax*2 + 0x48]; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000019d131: sti; out dx, al; call qword ptr [rax]; 
0x000000000019b53c: sti; out dx, al; jmp qword ptr [rdx]; 
0x000000000019d149: sti; out dx, al; jmp qword ptr [rsi]; 
0x000000000008acf1: sti; pop rdi; xor eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000186222: sti; push qword ptr [rax + 0x14]; sti; inc dword ptr [rax + 0x15]; sti; call qword ptr [rax]; 
0x000000000018628a: sti; push qword ptr [rax + 0x1d]; sti; jmp rax; 
0x000000000018627a: sti; push qword ptr [rax + 0x28]; sti; jmp qword ptr [rax + 0x29]; 
0x00000000001862f2: sti; push qword ptr [rax + 0x5b]; sti; call qword ptr [rax + 0x5d]; 
0x0000000000186332: sti; push qword ptr [rax + 0xfffb78]; jp 0x186336; call qword ptr [rax + 0x7b]; 
0x000000000018691e: sti; push qword ptr [rax + 0xfffbf1]; sti; call qword ptr [rax - 0xc]; 
0x0000000000186972: sti; push qword ptr [rax + 0xfffbf8]; cli; sti; call qword ptr [rax - 5]; 
0x0000000000186696: sti; push qword ptr [rax - 0x21]; sti; call qword ptr [rax - 0x1f]; 
0x0000000000186716: sti; push qword ptr [rax - 0x22]; sti; call qword ptr [rax - 0x20]; 
0x0000000000186386: sti; push qword ptr [rax - 0x68]; sti; jmp qword ptr [rax]; 
0x0000000000186232: sti; push qword ptr [rax - 0x7f0004e9]; sbb bl, bh; call qword ptr [rax + 0x19]; 
0x0000000000186232: sti; push qword ptr [rax - 0x7f0004e9]; sbb bl, bh; call qword ptr [rax + 0x19]; sti; jmp qword ptr [rax]; 
0x00000000001862fa: sti; push qword ptr [rax]; pop rdi; sti; call qword ptr [rax]; 
0x00000000001862da: sti; push qword ptr [rax]; push rax; sti; call qword ptr [rax]; 
0x0000000000186772: sti; push qword ptr [rax]; sar bl, 1; inc dword ptr [rax - 0x2f00042f]; sar bl, cl; jmp qword ptr [rax]; 
0x000000000018625a: sti; push rax; and bl, bh; jmp rax; 
0x00000000001862e2: sti; push rax; push rbx; sti; call rax; 
0x0000000000186242: sti; push rax; sbb bh, bl; inc eax; sbb edi, ebx; jmp rax; 
0x0000000000043957: sti; ret 0xffbf; 
0x000000000017496a: sti; ret; 
0x000000000018d509: sti; stc; push qword ptr [rax + rsi*4 - 0x3dbfffe]; stc; jmp rsp; 
0x00000000000ee2b4: sti; sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000133e4b: sti; sub byte ptr [rax], al; mov eax, 1; add rsp, 8; ret; 
0x0000000000040671: sti; syscall; 
0x000000000008bb92: stosb byte ptr [rdi], al; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000018d41d: stosb byte ptr [rdi], al; add al, byte ptr [rax]; rcl esp, 1; stc; jmp rsp; 
0x000000000018abe5: stosb byte ptr [rdi], al; add dword ptr [rax], eax; hlt; ret; 
0x0000000000196409: stosb byte ptr [rdi], al; in eax, dx; jmp qword ptr [rdx]; 
0x000000000018fc64: stosb byte ptr [rdi], al; or al, 0xea; jmp qword ptr [rdx]; 
0x000000000019b3d4: stosb byte ptr [rdi], al; out dx, al; jmp qword ptr [rdx]; 
0x0000000000107cc2: stosb byte ptr [rdi], al; ret; 
0x0000000000102bb2: stosb byte ptr [rdi], al; sal dl, 1; jmp qword ptr [rsi + 0x2e]; 
0x00000000001864b9: stosb byte ptr [rdi], al; std; call qword ptr [rax - 0x55]; 
0x00000000001864b9: stosb byte ptr [rdi], al; std; call qword ptr [rax - 0x55]; std; jmp rax; 
0x00000000001863f5: stosb byte ptr [rdi], al; std; call qword ptr [rcx]; 
0x00000000001864b5: stosb byte ptr [rdi], al; std; inc eax; stosb byte ptr [rdi], al; std; call qword ptr [rax - 0x55]; 
0x000000000007f4cf: stosb byte ptr [rdi], al; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000018724c: stosb byte ptr [rdi], al; test esp, edi; call qword ptr [rax - 0x7b]; 
0x00000000001765b6: stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000007d479: stosd dword ptr [rdi], eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4d07; 
0x00000000001a8cd5: stosd dword ptr [rdi], eax; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xb], bl; jmp qword ptr [rdi + 1]; 
0x000000000014bf77: stosd dword ptr [rdi], eax; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000187611: stosd dword ptr [rdi], eax; cld; call qword ptr [rdx]; 
0x0000000000187551: stosd dword ptr [rdi], eax; cld; inc dword ptr [rax - 0x4e]; cld; call rax; 
0x000000000018778d: stosd dword ptr [rdi], eax; cld; jmp qword ptr [rax - 0x5f]; 
0x0000000000187591: stosd dword ptr [rdi], eax; cld; jmp qword ptr [rsi]; 
0x0000000000187751: stosd dword ptr [rdi], eax; cld; jmp rax; 
0x000000000018774d: stosd dword ptr [rdi], eax; cld; push qword ptr [rax - 0x55]; cld; jmp rax; 
0x0000000000088d2c: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x00000000001a58d1: stosd dword ptr [rdi], eax; hlt; jmp qword ptr [rax]; 
0x00000000001a58b1: stosd dword ptr [rdi], eax; hlt; jmp qword ptr [rbx]; 
0x000000000011c49d: stosd dword ptr [rdi], eax; idiv bh; xor eax, eax; ret; 
0x00000000001980d5: stosd dword ptr [rdi], eax; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000038013: stosd dword ptr [rdi], eax; mov edi, r8d; call 0x36eb0; add rsp, 0xa8; ret; 
0x00000000000372c8: stosd dword ptr [rdi], eax; mov rdi, rsp; call 0x36f60; add rsp, 0x88; ret; 
0x00000000000ef541: stosd dword ptr [rdi], eax; push rdx; jmp qword ptr [rsi - 0x7d]; 
0x00000000000ac761: stosd dword ptr [rdi], eax; ret 0xfff8; 
0x0000000000175f4c: stosd dword ptr [rdi], eax; ret; 
0x000000000018d2c9: stosd dword ptr [rdi], eax; stc; call qword ptr [rcx - 0x533bfffe]; stc; jmp rsp; 
0x000000000018643d: stosd dword ptr [rdi], eax; std; call qword ptr [rsi]; 
0x00000000001782e9: stosd dword ptr [rdi], eax; std; jmp qword ptr [rax - 0x53]; 
0x00000000001864bd: stosd dword ptr [rdi], eax; std; jmp rax; 
0x00000000001864c1: stosd dword ptr [rdi], eax; std; push qword ptr [rax - 0x54]; std; call qword ptr [rax]; 
0x0000000000083571: stosd dword ptr [rdi], eax; str word ptr [rax + 0x63]; adc al, 0xb8; add rax, rdx; jmp rax; 
0x0000000000038012: stosq qword ptr [rdi], rax; mov edi, r8d; call 0x36eb0; add rsp, 0xa8; ret; 
0x00000000000372c7: stosq qword ptr [rdi], rax; mov rdi, rsp; call 0x36f60; add rsp, 0x88; ret; 
0x0000000000083573: str word ptr [rax + 0x63]; adc al, 0xb8; add rax, rdx; jmp rax; 
0x00000000001286d5: str word ptr [rax - 0x77]; ret 0x8348; 
0x0000000000086701: str word ptr [rax - 0x77]; ret 0xff31; 
0x0000000000194197: sub ah, 0xff; sbb al, 0xd; fdivr dword ptr [rdi - 0x14]; jmp qword ptr [rdx]; 
0x000000000019431f: sub ah, 0xff; sbb al, 0xd; xor al, 0x80; in al, dx; jmp qword ptr [rdx]; 
0x0000000000186b4d: sub ah, bh; dec esi; pop rdi; cld; call qword ptr [rax + 0x66]; 
0x00000000000d1894: sub ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x0000000000172a9d: sub ah, ch; call qword ptr [rax]; 
0x0000000000172a99: sub ah, ch; inc dword ptr [rax + rbp + 0x2710ffec]; in al, dx; lcall ptr [rbx + 0x58ffec27]; sub ah, ch; jmp rcx; 
0x0000000000172a95: sub ah, ch; inc dword ptr [rax + rbp + 0x2884ffec]; in al, dx; call qword ptr [rax]; 
0x0000000000172a8d: sub ah, ch; inc dword ptr [rax + rbp + 0x2884ffec]; in al, dx; inc dword ptr [rax + rbp + 0x2884ffec]; in al, dx; call qword ptr [rax]; 
0x0000000000172aa9: sub ah, ch; jmp rcx; 
0x00000000000fc723: sub al, 0; add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000190e3d: sub al, 0; add al, dh; jno 0x190e2d; call qword ptr [rsi + 1]; 
0x00000000000f3937: sub al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000000fc775: sub al, 0; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x00000000001907c8: sub al, 0; add byte ptr [rax], al; and al, 0x26; add byte ptr [rax], al; adc byte ptr [rbx - 0x16], ah; call qword ptr [rax]; 
0x000000000019d9f0: sub al, 0; add byte ptr [rax], al; clc; add byte ptr [rax], al; fdivr dword ptr [rdi - 0x11]; jmp qword ptr [rcx + 0xd]; 
0x00000000001906e0: sub al, 0; add byte ptr [rax], al; cmp al, 0x25; add byte ptr [rax], al; sub byte ptr [rdx - 0x16], ah; call qword ptr [rdx]; 
0x00000000001a0080: sub al, 0; add byte ptr [rax], al; fcomp qword ptr [rsi]; add dword ptr [rax], eax; mov byte ptr [rbx - 0xf], al; call rsi; 
0x0000000000135c60: sub al, 0; add byte ptr [rax], al; jmp rax; 
0x000000000019fb60: sub al, 0; add byte ptr [rax], al; mov esp, 0xd8000119; sbb cl, dh; jmp qword ptr [rax + 1]; 
0x00000000000fb3f7: sub al, 0; add byte ptr [rax], al; syscall; 
0x00000000000fafb4: sub al, 0; add byte ptr [rbp + 0x10], dh; mov eax, 0x130; syscall; 
0x00000000000f4904: sub al, 0; add byte ptr [rbp + 0x10], dh; mov eax, 0x1a; syscall; 
0x00000000000fb154: sub al, 0; add byte ptr [rbp + 0x10], dh; mov eax, 0x2a; syscall; 
0x00000000000fb0c4: sub al, 0; add byte ptr [rbp + 0x10], dh; mov eax, 0x2b; syscall; 
0x00000000000fb494: sub al, 0; add byte ptr [rbp + 0x10], dh; mov eax, 0x2e; syscall; 
0x00000000000fb384: sub al, 0; add byte ptr [rbp + 0x10], dh; mov eax, 0x2f; syscall; 
0x00000000000fa3a4: sub al, 0; add byte ptr [rbp + 0x10], dh; mov eax, 8; syscall; 
0x00000000000fad14: sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x113; syscall; 
0x00000000000fada4: sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000fae64: sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000fb4f4: sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x2c; syscall; 
0x00000000000fb324: sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x2d; syscall; 
0x00000000000fbc64: sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000fbcc4: sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x46; syscall; 
0x00000000000fa9e4: sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0xe8; syscall; 
0x00000000000f96bc: sub al, 0; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f9d12: sub al, 0; add rsp, 0x18; ret; 
0x00000000000f9c6b: sub al, 0; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f2443: sub al, 0; add rsp, 8; ret; 
0x00000000000fc808: sub al, 0; add word ptr [rdx + rax*2], 1; ret; 
0x00000000000f94fd: sub al, 0; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f933d: sub al, 0; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f916a: sub al, 0; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000f4ac9: sub al, 0; lea rcx, qword ptr [rsp + 8]; call 0xf4c10; mov rax, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f94f7: sub al, 0; mov dword ptr [rip + 0x2c82e5], eax; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f9337: sub al, 0; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f9164: sub al, 0; mov dword ptr [rip + 0x2c8678], eax; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000ee2b5: sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000efcc5: sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret; 
0x00000000000f1955: sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, edi; ret; 
0x00000000000f4c05: sub al, 0; mov dword ptr fs:[rax], 0x16; pop rbx; ret; 
0x00000000000f4bc0: sub al, 0; mov dword ptr fs:[rax], 0x16; xor eax, eax; pop rbx; ret; 
0x00000000000f9665: sub al, 0; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000000f11c5: sub al, 0; mov dword ptr fs:[rax], 0x26; mov rax, -1; ret; 
0x00000000000f2145: sub al, 0; mov dword ptr fs:[rax], 0x4b; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000f10f5: sub al, 0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000000f4b25: sub al, 0; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000000f8285: sub al, 0; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000fd425: sub al, 0; mov eax, dword ptr [rax + 0x38]; ret; 
0x00000000000f94f1: sub al, 0; mov eax, dword ptr [rip + 0x2c82bb]; mov dword ptr [rip + 0x2c82e5], eax; lea rax, qword ptr [rip + 0x2c82b2]; ret; 
0x00000000000f9331: sub al, 0; mov eax, dword ptr [rip + 0x2c847b]; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f915e: sub al, 0; mov eax, dword ptr [rip + 0x2c864e]; mov dword ptr [rip + 0x2c8678], eax; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000fd7e5: sub al, 0; mov edi, edi; mov rax, qword ptr fs:[rax]; movzx eax, word ptr [rax + rdi*2]; and eax, 1; ret; 
0x00000000000f7fe5: sub al, 0; mov edx, dword ptr [rax + 0x38]; mov eax, 0x64; test edx, edx; cmovne eax, edx; ret; 
0x00000000000f1115: sub al, 0; mov qword ptr [rax], -1; xor eax, eax; ret; 
0x00000000000f8fc9: sub al, 0; mov qword ptr [rax], rbx; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x00000000000f9034: sub al, 0; mov qword ptr [rax], rbx; mov eax, 1; add rsp, 0x10; pop rbx; ret; 
0x00000000000fcd0d: sub al, 0; mov rax, qword ptr [rax + 0x18]; add dword ptr [rax], 1; ret; 
0x00000000000fcabd: sub al, 0; mov rax, qword ptr [rax + 0x18]; add word ptr [rax], 1; ret; 
0x00000000000f3227: sub al, 0; mov rax, rdi; mov byte ptr [r9 - 1], 0; ret; 
0x00000000000f0514: sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1940: sub al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x00000000000f0548: sub al, 0; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f09ce: sub al, 0; neg edx; mov dword ptr fs:[rax], edx; or eax, 0xffffffff; ret; 
0x00000000000f34d6: sub al, 0; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000f96fc: sub al, 0; pop rbx; pop rbp; pop r12; ret; 
0x00000000000fc634: sub al, 0; pop rbx; ret; 
0x00000000000f9344: sub al, 0; ret; 
0x00000000000f24a3: sub al, 0; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001a00d4: sub al, 0x1f; add dword ptr [rax], eax; pop rax; int1; call qword ptr [rdx]; 
0x00000000000f0832: sub al, 0x24; syscall; 
0x0000000000172ab0: sub al, 0x28; in al, dx; call qword ptr [rax]; 
0x00000000000fb19d: sub al, 0x2c; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb244: sub al, 0x2d; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb168: sub al, 0x2d; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x00000000000cb1f4: sub al, 0x2f; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000a2b72: sub al, 0x3b; sub al, 0x75; pop rax; ret; 
0x00000000001429e0: sub al, 0x3c; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000b4c64: sub al, 0x40; or al, 0; movzx edx, dl; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000000c096e: sub al, 0x45; xor edx, edx; xor edx, edx; mov rdi, -1; mov eax, 0x3d; syscall; 
0x000000000007ad6b: sub al, 0x48; add esp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000077c73: sub al, 0x48; mov eax, dword ptr [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x38]; 
0x000000000013355b: sub al, 0x48; mov eax, dword ptr [rsp]; add rsp, 0x18; ret; 
0x00000000001b44d4: sub al, 0x63; add al, byte ptr [rax]; clc; nop; idiv edi; ret; 
0x00000000001a50d4: sub al, 0x6f; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xc], ch; call qword ptr [rax + 6]; 
0x0000000000194a4c: sub al, 0x6f; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001b51d4: sub al, 0x70; add al, byte ptr [rax]; sbb byte ptr [rbx + rdi*8], al; jmp qword ptr [rdx]; 
0x00000000000c4782: sub al, 0x74; cmp eax, dword ptr [rax - 0x6bf08406]; ret 0xb60f; 
0x00000000000c4571: sub al, 0x74; fmul qword ptr [rax - 0x7d]; ret 0x3c01; 
0x000000000019515c: sub al, 0x74; in eax, dx; jmp qword ptr [rdx]; 
0x000000000011b1ba: sub al, 0x74; or ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000f2ec1: sub al, 0x75; mov esp, 0x401f0f; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a2b75: sub al, 0x75; pop rax; ret; 
0x00000000001a0604: sub al, 0x76; int1; jmp qword ptr [rdx]; 
0x0000000000187310: sub al, 0x7b; cld; call rdx; 
0x00000000000f9d10: sub al, 0x7b; sub al, 0; add rsp, 0x18; ret; 
0x00000000000bc4d8: sub al, 0x7b; xor byte ptr [rax], al; lea rdi, qword ptr [rip + 0x30361d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000187308: sub al, 0x7c; cld; lcall ptr [rbx + rdi*2 + 0x7b2cfffc]; cld; call rdx; 
0x000000000019673c: sub al, 0x83; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000d7567: sub al, 0x83; ret 0x4801; 
0x00000000000c1090: sub al, 0x85; sal byte ptr [rcx + rdx - 0x46], 1; add byte ptr [rax], al; add byte ptr [rbx - 0x2776d787], cl; mov esi, 0x81; syscall; 
0x00000000001adc64: sub al, 0x89; cmc; jmp qword ptr [rdx]; 
0x00000000000d4c4d: sub al, 0x89; xor byte ptr [r9], sil; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000125dc0: sub al, 0x97; out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x0000000000160833: sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000001a8cd4: sub al, 0xab; add dword ptr [rax], eax; cmp byte ptr [rdi - 0xb], bl; jmp qword ptr [rdi + 1]; 
0x00000000001a8fd4: sub al, 0xae; add dword ptr [rax], eax; sbb byte ptr [rbx - 0xb], ah; jmp qword ptr [rcx]; 
0x00000000000318d0: sub al, 0xe2; cmp byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001ae581: sub al, 0xf6; jmp qword ptr [rdi]; 
0x00000000001b012d: sub al, 0xf6; jmp qword ptr [rdx]; 
0x000000000018baa9: sub al, 0xf7; dec esp; inc dword ptr [rcx]; add ah, dh; sub al, 0xf7; jmp rsp; 
0x000000000018bab1: sub al, 0xf7; jmp rsp; 
0x00000000000c42e2: sub al, 0xf; test bh, dh; add dword ptr [rax], eax; add byte ptr [rax - 0x6bf08406], al; ret 0xb60f; 
0x00000000000c4512: sub al, 0xf; test byte ptr [rdi - 0x80000000], ah; cli; jnp 0xc452c; xchg eax, esp; ret 0xb60f; 
0x000000000019a72c: sub al, 0xfb; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000186a95: sub al, 0xfc; call qword ptr [rax + 0x70fffc2e]; xor ah, bh; jmp qword ptr [rax + 0x32]; 
0x0000000000186ab5: sub al, 0xfc; inc dword ptr [rax + 0x2e]; cld; jmp qword ptr [rax]; 
0x00000000001869d1: sub al, 0xfc; inc dword ptr [rax]; cld; jmp rax; 
0x00000000001869b1: sub al, 0xfc; jmp qword ptr [rax]; 
0x000000000006d040: sub al, 0xfc; jmp qword ptr [rsi + 0x2e]; 
0x00000000001869f1: sub al, 0xfc; jmp rax; 
0x0000000000186991: sub al, 0xfc; push qword ptr [rax]; cld; call qword ptr [rax]; 
0x000000000008a790: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x00000000000faf51: sub al, 1; add byte ptr [rax], al; syscall; 
0x0000000000128200: sub al, 3; add byte ptr [rax], al; mov rdi, qword ptr [r15]; mov rsi, r13; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x0000000000143966: sub al, 4; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000080201: sub al, 8; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000018c5d1: sub al, bh; dec esp; add al, byte ptr ds:[rax]; push rsp; sub al, bh; jmp rsp; 
0x000000000018c5d9: sub al, bh; jmp rsp; 
0x000000000011ecdb: sub al, byte ptr [r8]; mov rdi, rsp; call 0x120ba0; mov rax, qword ptr [rsp + 8]; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x000000000011ed35: sub al, byte ptr [r8]; pop rbx; ret; 
0x0000000000101ebf: sub al, byte ptr [rax + 0xf]; mov esi, 0xc48348c5; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000143b54: sub al, byte ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000120997: sub al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fisttp word ptr [rax - 0x75]; and al, 8; call rcx; 
0x000000000003576a: sub al, byte ptr [rax]; add byte ptr [rax], al; mov rax, rcx; pop rbx; ret; 
0x00000000000fb15a: sub al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000060c36: sub al, byte ptr [rax]; add byte ptr [rbx - 0x113f43], al; call qword ptr [rbx + 0xf]; 
0x0000000000112033: sub al, byte ptr [rax]; add rsp, 8; ret; 
0x000000000011ee05: sub al, byte ptr [rax]; lea rsi, qword ptr [rip - 0x1ae]; lea rdi, qword ptr [rip + 0x2a486b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011bcc5: sub al, byte ptr [rax]; lea rsi, qword ptr [rip - 0x85e]; lea rdi, qword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000011c415: sub al, byte ptr [rax]; mov rax, qword ptr fs:[rax]; ret; 
0x000000000011ecdc: sub al, byte ptr [rax]; mov rdi, rsp; call 0x120ba0; mov rax, qword ptr [rsp + 8]; mov rdi, rsp; call qword ptr [rax + 0x20]; 
0x0000000000112f3d: sub al, byte ptr [rax]; movsxd rdi, ebx; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x000000000011ed36: sub al, byte ptr [rax]; pop rbx; ret; 
0x00000000001121b5: sub al, byte ptr [rax]; ret; 
0x000000000011ee13: sub al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011bcd3: sub al, byte ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000551fa: sub al, byte ptr [rbx - 0x1ef43]; call qword ptr [rax]; 
0x0000000000133850: sub al, byte ptr [rcx]; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28c035]; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000018c235: sub al, byte ptr [rdx]; add byte ptr [rdi + rdi*8 - 9], al; jmp rsp; 
0x0000000000128bf1: sub al, ch; cdq; push -0x76b70011; ret; 
0x00000000000d0ab5: sub al, dh; or byte ptr [r14], r10b; mov eax, 1; ret; 
0x000000000018c5d0: sub al, r15b; dec esp; add al, byte ptr ds:[rax]; push rsp; sub al, bh; jmp rsp; 
0x0000000000186958: sub bh, 0xfb; call rax; 
0x0000000000186ab1: sub bh, ah; push qword ptr [rax + 0x2c]; cld; inc dword ptr [rax + 0x2e]; cld; jmp qword ptr [rax]; 
0x00000000001a03e8: sub bh, al; int1; jmp qword ptr [rbp]; 
0x0000000000186285: sub bh, bl; inc dword ptr [rax + 0x2b]; sti; push qword ptr [rax + 0x1d]; sti; jmp rax; 
0x000000000018cef1: sub bh, cl; jmp rsp; 
0x000000000018ba19: sub bh, dh; dec esp; std; add dword ptr [rax], eax; sub dil, r14b; jmp rsp; 
0x000000000018ba21: sub bh, dh; jmp rsp; 
0x000000000018d679: sub bh, dl; call qword ptr [rbx + rdi*4 + 0x2bc40002]; cli; jmp rsp; 
0x00000000001ac368: sub bl, bh; cmc; call qword ptr [rax]; 
0x000000000018627d: sub bl, bh; jmp qword ptr [rax + 0x29]; 
0x000000000018e604: sub bl, byte ptr [rbp - 0x17]; jmp qword ptr [rdx]; 
0x00000000000af114: sub bl, ch; test eax, 0xe2058d48; ret 0x30; 
0x00000000000a2b66: sub byte ptr [r11], r15b; sub byte ptr [rbp + 0x63], r14b; ret; 
0x000000000010207f: sub byte ptr [r15 + 0x2000001], r15b; mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x000000000007888b: sub byte ptr [r15], r9b; test ch, bl; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x830f; 
0x000000000012e5c1: sub byte ptr [r8 + r15*4], r8b; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000ed63b: sub byte ptr [r8 - 0x75], cl; jnp 0xed659; mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x00000000001333ed: sub byte ptr [r8 - 0x77], r9b; ret 0x8948; 
0x00000000000e220b: sub byte ptr [r8 - 0x77], r9b; ret; 
0x0000000000127f8f: sub byte ptr [rax + 1], bh; mov qword ptr [rdx], rsi; mov qword ptr [rdx + 8], rdi; ret; 
0x0000000000127f7e: sub byte ptr [rax + 1], bh; ret; 
0x00000000000e583b: sub byte ptr [rax + 5], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000f975a: sub byte ptr [rax + rax], 0x48; add esp, 8; ret; 
0x0000000000143d56: sub byte ptr [rax + rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000fb567: sub byte ptr [rax + rax], ch; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000007e19e: sub byte ptr [rax + rax], dh; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000012e5c2: sub byte ptr [rax + rdi*4], al; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000000d1ecc: sub byte ptr [rax - 0x68], cl; or qword ptr [rdi + 0x90], rax; xor eax, eax; ret; 
0x00000000000d1ecb: sub byte ptr [rax - 0x68], r9b; or qword ptr [rdi + 0x90], rax; xor eax, eax; ret; 
0x000000000005d511: sub byte ptr [rax - 0x73], cl; add eax, 0x363417; pop rbx; pop rbp; ret; 
0x00000000000e92f7: sub byte ptr [rax - 0x75], cl; adc ecx, dword ptr [rax - 0x77]; ret; 
0x00000000000ed63c: sub byte ptr [rax - 0x75], cl; jnp 0xed659; mov edx, dword ptr [rax + rsi]; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x000000000012e66a: sub byte ptr [rax - 0x75], cl; sbb byte ptr [r11 + 0x5d], r11b; pop r12; ret; 
0x00000000000bc577: sub byte ptr [rax - 0x77], cl; and cl, r13b; ret 0xfffe; 
0x00000000000fb300: sub byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x0000000000123d89: sub byte ptr [rax - 0x77], cl; out dx, eax; mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x0000000000074f77: sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000001333ee: sub byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000000e220c: sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000027043: sub byte ptr [rax - 0x77], cl; sbb bl, ch; ret 0x1f0f; 
0x000000000002ae55: sub byte ptr [rax - 0x77], cl; sbb byte ptr [rbx - 0x14dbdbbc], cl; ret 0x8948; 
0x0000000000029c85: sub byte ptr [rax - 0x77], cl; sbb byte ptr [rbx - 0x14e3dbbc], cl; ret 0x8948; 
0x0000000000070b38: sub byte ptr [rax - 0x78], al; cmp dword ptr [rax + 0xf], eax; mov dh, 0xc7; ret; 
0x0000000000073623: sub byte ptr [rax - 0x78], r8b; cmp dword ptr [rax + 0xf], eax; mov dh, 0xc7; ret; 
0x00000000000cfee7: sub byte ptr [rax - 0x7d], cl; ret; 
0x0000000000122d86: sub byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000022d1: sub byte ptr [rax], 0x10; salc; ret; 
0x000000000000053f: sub byte ptr [rax], 0x40; or byte ptr [rax + 0x60000201], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x2800; 
0x00000000000ed2d4: sub byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000064cba: sub byte ptr [rax], al; add byte ptr [rbx - 0x10f6b], cl; inc dword ptr [rbx - 0x7cf0cf06]; ret; 
0x0000000000134381: sub byte ptr [rax], al; add byte ptr [rcx], 0; add dh, dh; ret; 
0x0000000000136505: sub byte ptr [rax], al; add rax, qword ptr fs:[0]; ret; 
0x00000000001335ef: sub byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x00000000001335aa: sub byte ptr [rax], al; add rsp, 8; ret; 
0x00000000001338c6: sub byte ptr [rax], al; call qword ptr [rax + 0x28]; 
0x0000000000135f65: sub byte ptr [rax], al; call qword ptr [rax + 0xf0]; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000133766: sub byte ptr [rax], al; call qword ptr [rax]; 
0x0000000000101f9c: sub byte ptr [rax], al; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x0000000000133705: sub byte ptr [rax], al; jmp rax; 
0x00000000001365e5: sub byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000132cf5: sub byte ptr [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000132ecd: sub byte ptr [rax], al; mov dword ptr fs:[rax], 2; mov eax, 0xffffffff; ret; 
0x000000000013516e: sub byte ptr [rax], al; mov eax, 0; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000133e4c: sub byte ptr [rax], al; mov eax, 1; add rsp, 8; ret; 
0x00000000001335a3: sub byte ptr [rax], al; mov qword ptr [rip + 0x28c2e4], rdx; add rsp, 8; ret; 
0x0000000000135929: sub byte ptr [rax], al; mov qword ptr [rsp + 8], rdx; mov qword ptr [rsp + 0x10], rcx; lea rdi, qword ptr [rax + 0x908]; call qword ptr [rax + 0xf08]; 
0x0000000000135d55: sub byte ptr [rax], al; mov rax, qword ptr [rax + 0x108]; jmp rax; 
0x0000000000135cd9: sub byte ptr [rax], al; mov rax, qword ptr [rax]; mov qword ptr [rsp], rax; mov rax, qword ptr [rip + 0x288177]; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x00000000001336fe: sub byte ptr [rax], al; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x00000000001336ae: sub byte ptr [rax], al; mov rax, qword ptr [rip + 0x288441]; pop r12; jmp rax; 
0x000000000013364e: sub byte ptr [rax], al; mov rax, qword ptr [rip + 0x288499]; pop r12; jmp rax; 
0x00000000001335e8: sub byte ptr [rax], al; mov rax, qword ptr [rip + 0x2884f7]; add rsp, 8; pop rbx; pop rbp; jmp rax; 
0x0000000000135ce7: sub byte ptr [rax], al; mov rdi, qword ptr [rdi]; call qword ptr [rax + 0x100]; 
0x0000000000135233: sub byte ptr [rax], al; mov rdi, rbp; mov rdx, rsp; lea rsi, qword ptr [rsp + 0x190]; call qword ptr [rax + 0x18]; 
0x00000000001336f3: sub byte ptr [rax], al; mov rdi, rbx; pop rbx; mov qword ptr [rip + 0x28c190], rax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x0000000000133859: sub byte ptr [rax], al; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x0000000000136ba2: sub byte ptr [rax], al; mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000133b21: sub byte ptr [rax], al; mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x0000000000133bc4: sub byte ptr [rax], al; mov rsi, r10; mov rdi, r9; call qword ptr [rax + 0x18]; 
0x00000000001337dc: sub byte ptr [rax], al; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x0000000000135c55: sub byte ptr [rax], al; mov rsi, rdi; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x0000000000132d28: sub byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000133655: sub byte ptr [rax], al; pop r12; jmp rax; 
0x0000000000136a75: sub byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000134e9f: sub byte ptr [rax], al; xor ebp, ebp; call qword ptr [rax + 0x28]; 
0x000000000019a388: sub byte ptr [rax], ch; out dx, al; call qword ptr [rsi]; 
0x00000000000022d2: sub byte ptr [rax], dl; salc; ret; 
0x00000000000d9a4e: sub byte ptr [rbp + 0x44830143], cl; and al, 0x44; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000001202ac: sub byte ptr [rbp + 0x488a74c0], al; mov eax, dword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x00000000000a2b6a: sub byte ptr [rbp + 0x63], dh; ret; 
0x00000000000a2b69: sub byte ptr [rbp + 0x63], r14b; ret; 
0x00000000000d9a99: sub byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x00000000000d0bb2: sub byte ptr [rbp - 0xf], dh; or byte ptr [rsi + 0x32], 8; xor eax, eax; ret; 
0x0000000000105b8e: sub byte ptr [rbx + 0x2b87ff35], cl; add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x00000000000b26ba: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000021dcb: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000045f28: sub byte ptr [rbx + 0x5d], bl; ret; 
0x00000000000b26b9: sub byte ptr [rbx + 0x5d], r11b; pop r12; pop r13; pop r14; ret; 
0x00000000000782ac: sub byte ptr [rbx + 0xb], dh; lea rsi, qword ptr [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000000782ab: sub byte ptr [rbx + 0xb], sil; lea rsi, qword ptr [rcx + 4]; mov qword ptr [rdx + 0x20], rsi; mov dword ptr [rcx], eax; ret; 
0x00000000000780f6: sub byte ptr [rbx + 0xd], dh; lea rax, qword ptr [rcx + 4]; mov qword ptr [rdx + 0x20], rax; mov dword ptr [rcx], edi; mov eax, edi; ret; 
0x00000000000780f5: sub byte ptr [rbx + 0xd], sil; lea rax, qword ptr [rcx + 4]; mov qword ptr [rdx + 0x20], rax; mov dword ptr [rcx], edi; mov eax, edi; ret; 
0x000000000012d0d7: sub byte ptr [rbx + 0xf], bl; mov dh, 0xc0; pop rbp; ret; 
0x000000000008c9a7: sub byte ptr [rbx + rcx*4 + 0x6e], cl; xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x00000000000d4d83: sub byte ptr [rbx + rcx*4 + 0x76], cl; xor byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000019e888: sub byte ptr [rbx - 0x10], bl; jmp rsi; 
0x0000000000135c33: sub byte ptr [rbx - 0x26], dh; mov eax, 1; ret; 
0x0000000000135c32: sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x000000000010bd91: sub byte ptr [rbx], 0; call 0xa3ea0; add rsp, 8; ret; 
0x0000000000186a50: sub byte ptr [rbx], 0xfc; inc dword ptr [rax + 0x2d]; cld; jmp qword ptr [rax]; 
0x00000000000a2b67: sub byte ptr [rbx], bh; sub byte ptr [rbp + 0x63], r14b; ret; 
0x0000000000110604: sub byte ptr [rbx], ch; add byte ptr [rdi], cl; test dword ptr [rcx + 0x64000001], edi; mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x00000000000b375d: sub byte ptr [rcx + 0x39], cl; ret; 
0x00000000000c109c: sub byte ptr [rcx + 0x81bed8], cl; add byte ptr [rax], al; syscall; 
0x00000000000a83f5: sub byte ptr [rcx + 0xf], al; xchg eax, esp; ret; 
0x000000000007ff32: sub byte ptr [rcx + rcx*4 + 0x62], cl; and byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000012e697: sub byte ptr [rcx + rcx*4 + 0x63], cl; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000000a3bad: sub byte ptr [rcx + rcx*4 - 0x12], cl; lea rcx, qword ptr [rax + 4]; call rbx; 
0x00000000000e50b4: sub byte ptr [rcx + rcx*4 - 0x18], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000833b8: sub byte ptr [rcx + rcx*4 - 0x19], cl; call rax; 
0x0000000000103d87: sub byte ptr [rcx + rcx*4 - 0x38], al; sub eax, edx; ret; 
0x0000000000108456: sub byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x000000000008080c: sub byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax]; 
0x0000000000036b25: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx; 
0x00000000000ed03b: sub byte ptr [rcx - 0x48], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x10f; syscall; 
0x00000000000cbe32: sub byte ptr [rcx - 0x75], cl; or byte ptr [r8 - 0x77], r9b; ret 0x8948; 
0x00000000001a0aa5: sub byte ptr [rcx], al; add byte ptr [rax - 0x33], ch; int1; jmp qword ptr [rax]; 
0x0000000000047474: sub byte ptr [rcx], al; add byte ptr [rax], al; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000003d024: sub byte ptr [rcx], al; add byte ptr [rax], al; movsd xmm0, qword ptr [rsp + 8]; add rsp, 0x18; ret; 
0x00000000000f1779: sub byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x0000000000189825: sub byte ptr [rcx], al; add byte ptr [rsi + rcx*2 - 0x11], dh; jmp rsp; 
0x0000000000105c57: sub byte ptr [rcx], ch; ret 0x8941; 
0x0000000000070d47: sub byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x00000000000e19c7: sub byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000105c56: sub byte ptr [rcx], r13b; ret 0x8941; 
0x0000000000102080: sub byte ptr [rdi + 0x2000001], bh; mov rdx, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 8]; call rax; 
0x0000000000121b8c: sub byte ptr [rdi - 0x17], dh; mov qword ptr [rdx + 0x20], rsi; ret; 
0x0000000000186318: sub byte ptr [rdi - 5], 0xff; sal byte ptr [rax - 5], 1; jmp qword ptr [rax]; 
0x000000000019e1a0: sub byte ptr [rdi], 0xf0; call qword ptr [rbx + 4]; 
0x00000000000cb593: sub byte ptr [rdi], ch; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000007888c: sub byte ptr [rdi], cl; test ch, bl; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x830f; 
0x00000000000cf8e6: sub byte ptr [rdi], cl; test dword ptr [rbx - 0x16000009], eax; push rax; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x00000000000a5cb3: sub byte ptr [rdi], cl; xchg eax, esp; ret; 
0x00000000001906e8: sub byte ptr [rdx - 0x16], ah; call qword ptr [rdx]; 
0x00000000001acc1c: sub byte ptr [rdx - 0xb], bh; jmp qword ptr [rdx]; 
0x000000000017861c: sub byte ptr [rdx - 0xe], 0xff; mov al, 0x6a; bnd jmp rax; push -0xe; call qword ptr [rax]; 
0x00000000001b0a95: sub byte ptr [rdx], al; add byte ptr [rax + 0x64], bl; clc; jmp qword ptr [rbx]; 
0x00000000001b0a0d: sub byte ptr [rdx], al; add byte ptr [rax + 0x64], dh; clc; jmp qword ptr [rbx]; 
0x00000000001a7828: sub byte ptr [rdx], ch; cmc; jmp qword ptr [rcx]; 
0x0000000000186a34: sub byte ptr [rip + 0x2f60fffc], 0xfc; inc dword ptr [rax + 0x31]; cld; jmp qword ptr [rax]; 
0x00000000000eb56e: sub byte ptr [rip + 0x64d8f700], ch; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f1833: sub byte ptr [rip + 0x75c08500], ch; and eax, 0xff89f689; mov eax, 0x71; syscall; 
0x000000000019bb02: sub byte ptr [rsi + 0x300e4105], al; add dword ptr [rsi], 2; out 0xa, al; ret; 
0x000000000019c24a: sub byte ptr [rsi + 0x300e4105], al; add dword ptr [rsi], 2; ret; 
0x0000000000174c15: sub byte ptr [rsi + 0x33763bf6], ch; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000001a5188: sub byte ptr [rsi - 0xc], dh; jmp qword ptr [rcx]; 
0x00000000001a7bc0: sub byte ptr [rsi], 0xf5; jmp qword ptr [rcx]; 
0x00000000001b0a0c: sub byte ptr fs:[rdx], al; add byte ptr [rax + 0x64], dh; clc; jmp qword ptr [rbx]; 
0x00000000001a97fc: sub ch, ah; hlt; jmp qword ptr [rdx]; 
0x00000000000fb373: sub ch, byte ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb40a: sub ch, byte ptr [rax + rax]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010cf54: sub ch, byte ptr [rbx]; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000000eb394: sub ch, byte ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb407: sub ch, byte ptr [rip + 0x64d8f700]; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb434: sub ch, byte ptr [rip + 0xc76400]; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000019a459: sub ch, dh; call qword ptr [rsi]; 
0x00000000001aa618: sub ch, dl; cmc; jmp qword ptr [rsi]; 
0x0000000000186910: sub cl, 0xfb; inc eax; in eax, dx; sti; call qword ptr [rax]; 
0x00000000000361c8: sub cl, al; ret; 
0x0000000000133764: sub cl, al; sub byte ptr [rax], al; call qword ptr [rax]; 
0x00000000000f7e64: sub cl, bh; dec dword ptr [rax + 0x39]; ret; 
0x00000000000d135f: sub cl, byte ptr [rax + 0x39]; ret 0x860f; 
0x00000000000b0665: sub cl, byte ptr [rax - 0x73]; add eax, 0x310733; add rsp, 0x28; ret; 
0x0000000000124f12: sub cl, byte ptr [rax - 0x75]; add al, 0x24; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000bd39a: sub cl, byte ptr [rax - 0x77]; loope 0xbd328; ret 0xf631; 
0x00000000000fc3cf: sub cl, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xff31; 
0x00000000000e73f6: sub cl, byte ptr [rdi]; xchg eax, esp; ret 0x403c; 
0x00000000000f7117: sub dh, al; add byte ptr [rdx], cl; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x00000000000f6d8d: sub dh, al; add byte ptr [rdx], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000004f9a5: sub dh, al; add byte ptr [rip - 0x1a817], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000052aa5: sub dh, al; add byte ptr [rip - 0x73617], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000000526ed: sub dh, al; add byte ptr [rip - 0xac517], ch; jmp qword ptr [rsi + 0x2e]; 
0x000000000010a2a7: sub dh, bh; call qword ptr [rax - 0x18]; 
0x000000000018ba69: sub dh, bh; jmp rsp; 
0x00000000000be6c1: sub dh, byte ptr [rax]; add byte ptr [rdi], cl; test dword ptr [rcx + 0x64000001], edi; mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x000000000006cdd7: sub dh, byte ptr [rip + 0x48b4800]; ret 0x8548; 
0x00000000001a78c9: sub dh, ch; call qword ptr [rcx]; 
0x000000000019a389: sub dh, ch; call qword ptr [rsi]; 
0x00000000001a7829: sub dh, ch; jmp qword ptr [rcx]; 
0x000000000019ac3d: sub dh, ch; jmp qword ptr [rdx]; 
0x000000000018ba20: sub dil, r14b; jmp rsp; 
0x0000000000187df9: sub dl, 0xff; test byte ptr [rax + rax], bh; hlt; sub edx, 0x7cacff; add byte ptr [rdx + rax*4 - 0x16], al; call rsp; 
0x0000000000186f50: sub dl, byte ptr [rbp - 4]; call rax; 
0x0000000000186f50: sub dl, byte ptr [rbp - 4]; call rax; pop rsp; cld; call qword ptr [rax + 0x5c]; 
0x0000000000186f48: sub dl, byte ptr [rsi - 4]; lcall ptr [rdx + 0x2afffc55]; push rbp; cld; call rax; 
0x00000000001a0868: sub dl, cl; int1; call qword ptr [rbx]; 
0x0000000000047593: sub dword ptr [rax + 0x37], ebp; add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x77], cl; ret 0xde8; 
0x00000000001220a8: sub dword ptr [rax + 0x68], 4; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x00000000000f96fb: sub dword ptr [rax + rax], 0x5c415d5b; ret; 
0x0000000000143ca4: sub dword ptr [rax + rax], eax; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000fb4dd: sub dword ptr [rax + rax], ebp; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000007c854: sub dword ptr [rax + rax], esi; ret; 
0x0000000000123c09: sub dword ptr [rax - 0x48000000], 1; ret; 
0x000000000017a16c: sub dword ptr [rax - 0x57d6000b], ebp; cmc; call rsp; 
0x000000000017a1d8: sub dword ptr [rax - 0x57d6000b], ebp; cmc; jmp qword ptr [rdx - 0x5a]; 
0x000000000017a168: sub dword ptr [rax - 0x57d6000b], ebp; cmc; ljmp ptr [rcx]; test al, 0xf5; call rsp; 
0x000000000017a1d4: sub dword ptr [rax - 0x57d6000b], ebp; cmc; ljmp ptr [rcx]; test al, 0xf5; jmp qword ptr [rdx - 0x5a]; 
0x00000000000ebb7e: sub dword ptr [rax - 0x77], ecx; fimul dword ptr [rax + 0x63]; test byte ptr [rax + 0x63], 0xff; mov eax, 0x48; syscall; 
0x0000000000133704: sub dword ptr [rax], 0; jmp rax; 
0x00000000001336f2: sub dword ptr [rax], 0; mov rdi, rbx; pop rbx; mov qword ptr [rip + 0x28c190], rax; mov rax, qword ptr [rip + 0x2883f9]; jmp rax; 
0x0000000000135ce6: sub dword ptr [rax], 0x3f8b4800; call qword ptr [rax + 0x100]; 
0x0000000000135d54: sub dword ptr [rax], 0x808b4800; or byte ptr [rcx], al; add byte ptr [rax], al; jmp rax; 
0x0000000000135c85: sub dword ptr [rax], 0xfe894800; mov rdi, qword ptr [rsp]; mov rax, qword ptr [rax + 0xe8]; jmp rax; 
0x000000000012abbb: sub dword ptr [rax], eax; add al, byte ptr [rax]; add byte ptr [rax], al; mov qword ptr fs:[rbx], rax; pop rbx; ret; 
0x000000000012a9da: sub dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; adc eax, 0xffff567c; mov esi, 3; mov rdi, r15; call qword ptr [rax]; 
0x000000000017a54f: sub dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rbx + rdx*8 - 0xa], ch; call rdx; 
0x00000000000fb5b1: sub dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000001176df: sub dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x000000000012abf5: sub dword ptr [rax], eax; add rsp, 8; ret; 
0x000000000013351e: sub dword ptr [rax], eax; cmove rdx, rax; add rsp, 8; mov rax, rdx; ret; 
0x000000000012ab15: sub dword ptr [rax], eax; lea rdx, qword ptr [rip + 0x298d62]; mov qword ptr fs:[rax], rdx; ret; 
0x000000000012ab85: sub dword ptr [rax], eax; lea rsi, qword ptr [rip - 0x7e]; lea rdi, qword ptr [rip + 0x298ccb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012ab1c: sub dword ptr [rax], eax; mov qword ptr fs:[rax], rdx; ret; 
0x00000000001211d5: sub dword ptr [rax], eax; mov rax, qword ptr [rdx + rax*8]; jmp rax; 
0x000000000012ab93: sub dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f1cbb: sub dword ptr [rbp + rcx*4 + 0x4c], ecx; and al, 0x40; movsxd rdi, edi; mov eax, 0x10e; syscall; 
0x000000000002d4e3: sub dword ptr [rbx + 0x39], ebp; add byte ptr [rax - 0x73], cl; cmp eax, 0x392612; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000187a88: sub dword ptr [rbx - 0x17], edi; call rsp; 
0x00000000000fba59: sub dword ptr [rbx - 0x2f], ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x12b; syscall; 
0x00000000000fbb09: sub dword ptr [rbx - 0x2f], ecx; mov edx, edx; movsxd rdi, edi; mov eax, 0x133; syscall; 
0x00000000000cb2e3: sub dword ptr [rbx], 0xd8f7002f; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000015a323: sub dword ptr [rbx], eax; add byte ptr [rax], al; ret; 
0x00000000001863ec: sub dword ptr [rcx - 0x55fe0003], 0xaa81fffd; std; call qword ptr [rcx]; 
0x00000000001898f5: sub dword ptr [rcx], eax; add ah, ah; push rsp; out dx, eax; jmp rsp; 
0x00000000001a0b65: sub dword ptr [rcx], eax; add byte ptr [rax], bh; sal ecx, cl; call rsi; 
0x00000000001898ed: sub dword ptr [rcx], eax; add byte ptr [rbx + rdx*2 - 0x11], al; call qword ptr [rcx + rbp + 0x54e40001]; out dx, eax; jmp rsp; 
0x000000000006c754: sub dword ptr [rdi + 0x2d], esi; movzx eax, al; movsxd rax, dword ptr [r8 + rax*4]; add rax, r8; jmp rax; 
0x000000000006d0ae: sub dword ptr [rdi + 0x39], esi; nop dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000112f3b: sub dword ptr [rdi + 0x6348002a], ebp; sti; mov eax, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000f72c3: sub dword ptr [rdi + rsi*8 - 1], ebx; add rsp, 0x408; ret; 
0x00000000000c243b: sub dword ptr [rdx + 0x7fb8002f], edi; add byte ptr [rax], al; add byte ptr [rbx + rax*4 + 0x3a], ah; mov rdx, -1; cmovne rax, rdx; ret; 
0x000000000011bcc4: sub dword ptr [rdx], 0; lea rsi, qword ptr [rip - 0x85e]; lea rdi, qword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000161e89: sub dword ptr [rdx], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000145aa3: sub dword ptr [rip + 0x63490004], ecx; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000eb4fd: sub dword ptr [rip + 0x64d8f700], ebp; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb49a: sub dword ptr [rip + 0x64d8f700], ebp; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000161016: sub dword ptr [rip - 0xcfffffe], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000019a696: sub dword ptr [rsp + rdi*8 - 1], edi; sbb al, 0xd; bnd jnp 0x19a69b; jmp qword ptr [rdx]; 
0x000000000012ac16: sub eax, -0x80; add rsp, 8; ret; 
0x00000000000eb6a4: sub eax, 0x10750000; mov eax, 0; syscall; 
0x00000000000f1dd4: sub eax, 0x10750000; mov eax, 0x4a; syscall; 
0x00000000000f1e64: sub eax, 0x10750000; mov eax, 0x4b; syscall; 
0x00000000000ebf54: sub eax, 0x10750000; mov eax, 0x55; syscall; 
0x00000000000eb704: sub eax, 0x10750000; mov eax, 1; syscall; 
0x00000000000eb4b4: sub eax, 0x10750000; mov eax, 2; syscall; 
0x00000000000ebe04: sub eax, 0x10750000; mov eax, 3; syscall; 
0x00000000000ecfb4: sub eax, 0x10750000; mov eax, 7; syscall; 
0x000000000009d3c9: sub eax, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0xdb009]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000012e40a: sub eax, 0x10c48348; pop rbx; pop rbp; pop r12; ret; 
0x00000000000f04c4: sub eax, 0x13750000; mov r10, rcx; mov eax, 0x115; syscall; 
0x00000000000f1c24: sub eax, 0x13750000; mov r10, rcx; mov eax, 0x17; syscall; 
0x0000000000133a22: sub eax, 0x24048b48; add rsp, 0x10; pop rbx; ret; 
0x00000000000e3175: sub eax, 0x28b4800; mov qword ptr [rdx], rdi; ret; 
0x0000000000186a55: sub eax, 0x2f20fffc; cld; inc dword ptr [rax]; xor esp, edi; jmp rax; 
0x0000000000186a35: sub eax, 0x2f60fffc; cld; inc dword ptr [rax + 0x31]; cld; jmp qword ptr [rax]; 
0x0000000000186a15: sub eax, 0x2f90fffc; cld; push qword ptr [rax + 0x31]; cld; call qword ptr [rax + 0x33]; 
0x000000000018c305: sub eax, 0x4340002; clc; jmp rsp; 
0x000000000008024a: sub eax, 0x448d48fe; ret; 
0x00000000000fb3e9: sub eax, 0x45c93145; xor eax, eax; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2c; syscall; 
0x00000000000fb279: sub eax, 0x45c93145; xor eax, eax; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2d; syscall; 
0x00000000000d0ab3: sub eax, 0x47c62a75; or byte ptr [rsi], dl; mov eax, 1; ret; 
0x0000000000031acf: sub eax, 0x48003925; lea edi, dword ptr [rip + 0x38e1a6]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b42df: sub eax, 0x48ffffd1; add esp, 0x18; ret; 
0x000000000013203d: sub eax, 0x48ffffff; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000143816: sub eax, 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000eaf44: sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb069: sub eax, 0x64d8f700; mov dword ptr [rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebb1f: sub eax, 0x64daf700; mov dword ptr [rax], edx; mov eax, 0xffffffff; ret; 
0x00000000000f1834: sub eax, 0x75c08500; and eax, 0xff89f689; mov eax, 0x71; syscall; 
0x00000000000f18a4: sub eax, 0x75c08500; and eax, 0xff89f689; mov eax, 0x72; syscall; 
0x00000000000f1919: sub eax, 0x75c08500; mov rdx, -1; mov esi, edi; mov eax, 0x75; mov rdi, rdx; syscall; 
0x00000000000f19b9: sub eax, 0x75c08500; mov rdx, -1; mov esi, edi; mov eax, 0x77; mov rdi, rdx; syscall; 
0x00000000000eb596: sub eax, 0x75c08500; pop rsp; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x101; syscall; 
0x00000000000ed036: sub eax, 0x75c08500; sub byte ptr [rcx - 0x48], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x10f; syscall; 
0x0000000000036409: sub eax, 0x7f800000; shr eax, 0x1f; ret; 
0x000000000009566f: sub eax, 0x89ffff19; ret; 
0x000000000010c8a4: sub eax, 0x89ffffff; ret 0x96eb; 
0x00000000001765ba: sub eax, 0x8acc8c6; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000000eb0a4: sub eax, 0xc764002d; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000ed3a5: sub eax, 0xc76400; add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000ed38d: sub eax, 0xc76400; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000000eb435: sub eax, 0xc76400; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000eaf6c: sub eax, 0xc8c14800; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000001a0edd: sub eax, 0xd4d00001; int1; jmp qword ptr [rbx]; 
0x00000000000fb087: sub eax, 0xd8f7002c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb068: sub eax, 0xd8f7002d; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000176954: sub eax, 0xddb680a7; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000000e1877: sub eax, 0xf00098a; mov dh, 0xc8; movsxd rcx, dword ptr [rdx + rcx*4]; add rdx, rcx; jmp rdx; 
0x00000000000f7837: sub eax, 0xf7002c66; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x00000000000f3037: sub eax, 0xf7002cae; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x00000000000769c6: sub eax, 0xf8830000; push qword ptr [rbp + 2]; pop rbx; ret; 
0x00000000000526f0: sub eax, 0xfff53ae9; jmp qword ptr [rsi + 0x2e]; 
0x0000000000052aa8: sub eax, 0xfff8c9e9; jmp qword ptr [rsi - 0x70]; 
0x000000000004f9a8: sub eax, 0xfffe57e9; jmp qword ptr [rsi - 0x70]; 
0x0000000000129c85: sub eax, 1; add rsp, 0x20; pop rbx; ret; 
0x0000000000127753: sub eax, 1; bswap eax; mov dword ptr [rcx + 0x48], eax; mov eax, 1; ret; 
0x0000000000123c03: sub eax, 1; bswap eax; mov dword ptr [rcx + 0xa8], eax; mov eax, 1; ret; 
0x0000000000127ffa: sub eax, 1; bswap eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000002cb24: sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x000000000011d521: sub eax, 1; pop r13; ret; 
0x000000000003851f: sub eax, 1; ret; 
0x0000000000122608: sub eax, 4; or eax, 0x80000000; bswap eax; mov dword ptr [rdx], eax; mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x0000000000194196: sub eax, dword ptr [rax + 0xd1cffec]; fdivr dword ptr [rdi - 0x14]; jmp qword ptr [rdx]; 
0x0000000000143ab6: sub eax, dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000196b85: sub eax, dword ptr [rax]; add al, ch; scasd eax, dword ptr [rdi]; in eax, dx; call qword ptr [rcx]; 
0x00000000000fb0ca: sub eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000190d55: sub eax, dword ptr [rax]; add byte ptr [rax], cl; jo 0x190d45; call qword ptr [rdx + 1]; 
0x0000000000108532: sub eax, dword ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x000000000010d62f: sub eax, dword ptr [rax]; add ecx, ebp; ret; 
0x000000000010c8c5: sub eax, dword ptr [rax]; add rax, qword ptr fs:[0]; ret; 
0x00000000001086d3: sub eax, dword ptr [rax]; add rsp, 0x1010; pop rbx; pop rbp; pop r12; ret; 
0x000000000010c4aa: sub eax, dword ptr [rax]; add rsp, 0x28; jmp rax; 
0x000000000010bd92: sub eax, dword ptr [rax]; call 0xa3ea0; add rsp, 8; ret; 
0x00000000001117ea: sub eax, dword ptr [rax]; call rax; 
0x000000000010ad6d: sub eax, dword ptr [rax]; lea rsi, qword ptr [rip - 0x116]; lea rdi, qword ptr [rip + 0x2b7a23]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011209a: sub eax, dword ptr [rax]; lea rsi, qword ptr [rip - 0x83]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000010852c: sub eax, dword ptr [rax]; mov dword ptr [rip + 0x2bbb38], 1; pop rbx; ret; 
0x00000000001088d5: sub eax, dword ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000010a28a: sub eax, dword ptr [rax]; mov dword ptr fs:[rax], 0x16; or eax, 0xffffffff; ret; 
0x0000000000108849: sub eax, dword ptr [rax]; mov rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010886a: sub eax, dword ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; add rsp, 8; ret; 
0x0000000000108829: sub eax, dword ptr [rax]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000010acdc: sub eax, dword ptr [rax]; pop rbp; ret; 
0x0000000000107e8a: sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000107a95: sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000121c15: sub eax, dword ptr [rbx + 0x18]; add rsp, 8; pop rbx; pop rbp; add eax, edx; ret; 
0x0000000000071cf4: sub eax, dword ptr [rbx + 0x20]; mov rdx, qword ptr [rbx + 0xf8]; mov qword ptr [rdx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000121bfa: sub eax, dword ptr [rbx + 0x60]; add eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000003087f: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000c616c: sub eax, dword ptr [rbx - 0x7bf0d606]; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000fba63: sub eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x000000000007948d: sub eax, dword ptr [rdi + 0x10]; add rax, qword ptr [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007d08e: sub eax, dword ptr [rdi + 0x18]; ret; 
0x0000000000072fa5: sub eax, dword ptr [rdi + 0x20]; ret; 
0x0000000000072e95: sub eax, dword ptr [rdi + 0x38]; ret; 
0x00000000000759b1: sub eax, dword ptr [rdx + 0x10]; pop r12; pop r13; pop r14; sar rax, 2; ret; 
0x0000000000075875: sub eax, dword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x00000000000759ce: sub eax, dword ptr [rdx + 0x18]; pop r12; pop r13; pop r14; sar rax, 2; ret; 
0x00000000000771cc: sub eax, dword ptr [rdx + 0x18]; sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000072f96: sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x0000000000072e86: sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000001b0cb5: sub eax, dword ptr [rdx]; add al, cl; movsxd rdi, eax; jmp qword ptr [rbx]; 
0x00000000001b0d75: sub eax, dword ptr [rdx]; add byte ptr [rax], bl; fdecstp; call qword ptr [rcx + 5]; 
0x000000000018c285: sub eax, dword ptr [rdx]; add byte ptr [rcx + rax], dh; clc; call rsp; 
0x000000000007c5a3: sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000109f9a: sub eax, dword ptr ds:[rax]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000039d91: sub eax, eax; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000103da1: sub eax, eax; mov eax, r8d; ret; 
0x00000000000a30cc: sub eax, eax; nop; ret; 
0x00000000000a3081: sub eax, eax; ret; 
0x0000000000107fa3: sub eax, eax; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x000000000007b7fd: sub eax, ebp; pop r13; pop r14; ret; 
0x00000000000a3de3: sub eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000a402a: sub eax, ebp; pop rbp; pop r12; ret; 
0x000000000007be09: sub eax, ecx; lea eax, dword ptr [r8 - 1]; ret; 
0x00000000000883bc: sub eax, ecx; ret; 
0x0000000000075109: sub eax, ecx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000049b4e: sub eax, edi; lea rbx, qword ptr [rax + rbx + 1]; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000088b61: sub eax, edi; ret; 
0x0000000000122443: sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbp + 0x40]; 
0x0000000000121f4b: sub eax, edx; mov edx, eax; mov rsi, r12; call qword ptr [rbx + 0x40]; 
0x00000000000792a4: sub eax, edx; mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000003c879: sub eax, edx; ret; 
0x00000000000366ff: sub eax, edx; sar eax, 0x10; ret; 
0x00000000000363ef: sub eax, edx; shr eax, 0x1f; ret; 
0x000000000003603d: sub eax, edx; shr rax, 0x3f; ret; 
0x0000000000070efa: sub eax, esi; pop r14; pop r15; pop rbp; ret; 
0x0000000000074c2e: sub eax, esi; pop r14; pop r15; ret; 
0x0000000000103f62: sub eax, esi; ret; 
0x00000000000792f9: sub eax, esp; pop r12; pop r13; pop r14; ret; 
0x0000000000039d90: sub eax, r8d; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000a30cb: sub eax, r8d; nop; ret; 
0x00000000000a3080: sub eax, r8d; ret; 
0x0000000000103dbb: sub eax, r9d; ret; 
0x0000000000196737: sub ebp, -1; sbb al, 0xd; sub al, 0x83; in eax, dx; jmp qword ptr [rdx]; 
0x00000000000fb29a: sub ebp, dword ptr [rax + rax]; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000186488: sub ebp, dword ptr [rbp - 0x52340003]; std; call qword ptr [rax - 0x52]; 
0x0000000000110217: sub ebp, dword ptr [rbx]; add byte ptr [rbp + 0x28], dh; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x00000000000cb284: sub ebp, dword ptr [rdi]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000000eb274: sub ebp, dword ptr [rip + 0x64d8f700]; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000aed34: sub ebp, eax; pop r12; mov eax, r13d; pop r13; pop r14; ret; 
0x000000000019a4d1: sub ebp, esi; call qword ptr [rdx]; 
0x000000000019a491: sub ebp, esi; call qword ptr [rsi]; 
0x000000000019accd: sub ebp, esi; jmp qword ptr [rdx]; 
0x000000000004a717: sub ebp, esi; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000117de0: sub ebx, dword ptr [rbx + 0x5d]; ret; 
0x000000000009ea91: sub ebx, dword ptr [rbx + 0x6349000d]; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000173675: sub ebx, dword ptr [rbx - 0xb]; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x000000000009ec11: sub ebx, dword ptr [rdx + 0x634b000d]; or al, 0x83; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000002f63: sub ebx, dword ptr [rsp + rax*2]; nop; ret 0x5bdb; 
0x0000000000070849: sub ebx, ebp; add al, 0xff; or dh, byte ptr [rbp + 0x23]; mov eax, r8d; pop rbx; ret; 
0x0000000000186281: sub ebx, edi; call qword ptr [rax + 0x2a]; 
0x00000000001221d0: sub ecx, 4; mov r12, rax; bswap ecx; mov dword ptr [rdx], ecx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x000000000007ef67: sub ecx, dword ptr [rax + 0x39]; ret; 
0x000000000003c744: sub ecx, dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000011b076: sub ecx, dword ptr [rax]; add al, byte ptr [rax]; add byte ptr [rbx + 0x1074ffff], al; mov eax, r12d; syscall; 
0x000000000009d6b1: sub ecx, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x00000000000816a4: sub ecx, dword ptr [rax]; add ebx, ebp; ret; 
0x00000000000ed304: sub ecx, dword ptr [rbx - 0x2f]; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x0000000000083e64: sub ecx, dword ptr [rcx - 0x7d]; ret; 
0x0000000000103d0c: sub ecx, eax; mov eax, ecx; ret; 
0x0000000000039cdc: sub ecx, eax; mov qword ptr [rdi], rsi; mov eax, 1; mov dword ptr [rdx], ecx; ret; 
0x00000000000b14fc: sub ecx, eax; xor eax, eax; mov qword ptr [rbx + 8], rcx; add rsp, 0xd0; pop rbx; ret; 
0x0000000000121b69: sub ecx, esi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x0000000000148863: sub ecx, esp; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000a1efc: sub edi, 0x10; add rax, rdi; ret; 
0x00000000000fd920: sub edi, 0x30; xor eax, eax; cmp edi, 9; setbe al; ret; 
0x0000000000147f92: sub edi, 0x40; lea r11, qword ptr [rip + 0x3e9f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147ed3: sub edi, 0x40; lea r11, qword ptr [rip + 0x3eab3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001455c2: sub edi, 0x40; lea r11, qword ptr [rip + 0x41204]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145503: sub edi, 0x40; lea r11, qword ptr [rip + 0x412c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142bf2: sub edi, 0x40; lea r11, qword ptr [rip + 0x43a14]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142b33: sub edi, 0x40; lea r11, qword ptr [rip + 0x43ad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000012d440: sub edi, dword ptr [rax + 1]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000018c601: sub edi, eax; call rsp; 
0x000000000018c5f9: sub edi, eax; dec dword ptr [rdi + rdi + 0x2bd40002]; clc; call rsp; 
0x0000000000186289: sub edi, ebx; push qword ptr [rax + 0x1d]; sti; jmp rax; 
0x000000000018d681: sub edi, edx; jmp rsp; 
0x000000000015187f: sub edi, edx; lea r11, qword ptr [rip + 0x35cc8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ed6b: sub edi, edx; lea r11, qword ptr [rip + 0x382dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c29b: sub edi, edx; lea r11, qword ptr [rip + 0x3a8ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015151e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015139e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x361a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015121e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015109e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x364a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150f1e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36626]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150d9e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x367a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150c1e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36926]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150a9e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36aa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015091e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36c26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015079e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36da6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015061e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36f26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015049e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x370a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015031e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x37226]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015019e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x373a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015001e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x37526]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fea5: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3769f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ea3e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38606]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e8be: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38786]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e73e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38906]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e5be: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38a86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e43e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38c06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e2be: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38d86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e13e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38f06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dfbe: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39086]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014de3e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39206]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dcbe: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39386]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014db3e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39506]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d9be: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39686]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d83e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39806]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d6be: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39986]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d53e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39b06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d3c5: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39c7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bf6e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3abd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bdee: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3ad56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bc6e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3aed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014baee: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b056]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b96e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b1d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b7ee: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b356]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b66e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b4ee: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b36e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b1ee: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b06e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aeee: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ad6e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014abee: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bf56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aa6e: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3c0d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a8f5: sub edi, edx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3c24f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000176082: sub edi, esi; int 0x6b; ret; 
0x00000000000c419d: sub edi, esp; dec dword ptr [rax - 0x77]; ret 0x19eb; 
0x0000000000186a51: sub edi, esp; inc dword ptr [rax + 0x2d]; cld; jmp qword ptr [rax]; 
0x0000000000186a91: sub edi, esp; inc eax; sub al, 0xfc; call qword ptr [rax + 0x70fffc2e]; xor ah, bh; jmp qword ptr [rax + 0x32]; 
0x000000000007dec6: sub edi, esp; mov qword ptr [rsp + 8], rcx; and rdi, rdx; neg rdi; call qword ptr [rax]; 
0x000000000014a6c1: sub edx, 0x40; lea r11, qword ptr [rip + 0x3c2c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a601: sub edx, 0x40; sfence; lea r11, qword ptr [rip + 0x3c382]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147b3d: sub edx, 0x40; sfence; lea r11, qword ptr [rip + 0x3ec86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014516d: sub edx, 0x40; sfence; lea r11, qword ptr [rip + 0x41496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000187e01: sub edx, 0x7cacff; add byte ptr [rdx + rax*4 - 0x16], al; call rsp; 
0x000000000007520c: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x000000000007c5d0: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000007c5c5: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000075221: sub edx, dword ptr [rax + 8]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x0000000000117962: sub edx, dword ptr [rax]; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000001202c5: sub edx, ebp; mov esi, r12d; mov rdi, rbx; mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x0000000000118f8e: sub edx, ebp; mov qword ptr [rbx + 0x10], rax; mov eax, 0x14; sar rdx, 4; add rdx, 1; syscall; 
0x00000000000a07ac: sub edx, ecx; lea r11, qword ptr [rip + 0xd7fdf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe2c: sub edx, ecx; lea r11, qword ptr [rip + 0xd88df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea8c: sub edx, ecx; lea r11, qword ptr [rip + 0xd9b2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e34c: sub edx, ecx; lea r11, qword ptr [rip + 0xda1df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3fc: sub edx, ecx; lea r11, qword ptr [rip + 0xdafdb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd4c: sub edx, ecx; lea r11, qword ptr [rip + 0xdb60b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000b070e: sub edx, ecx; lea rax, qword ptr [rsi + rdx]; add rsp, 0x18; ret; 
0x00000000000b1553: sub edx, ecx; mov qword ptr [rbx], rdx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000366bd: sub edx, ecx; not eax; and eax, edx; ret; 
0x0000000000075cba: sub edx, edi; call qword ptr [rax + 0x70]; 
0x000000000004aab0: sub edx, esi; call qword ptr [rax + 0x38]; 
0x0000000000078bd2: sub edx, esi; mov rdi, rbx; call rax; 
0x0000000000121d50: sub edx, esi; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x000000000005fdff: sub edx, esi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000121d4f: sub edx, r14d; mov rsi, rbp; call qword ptr [rbx + 0x40]; 
0x0000000000147ecf: sub esi, 0x40; sub rdi, 0x40; lea r11, qword ptr [rip + 0x3eab3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001454ff: sub esi, 0x40; sub rdi, 0x40; lea r11, qword ptr [rip + 0x412c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142b2f: sub esi, 0x40; sub rdi, 0x40; lea r11, qword ptr [rip + 0x43ad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000117c2e: sub esi, 1; mov byte ptr [rdi + 1], sil; ret; 
0x0000000000133237: sub esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000001a7989: sub esi, ebp; call qword ptr [rax]; 
0x00000000001a7911: sub esi, ebp; jmp qword ptr [rcx]; 
0x00000000001b2631: sub esi, edi; call qword ptr [rsi + 0xb]; 
0x0000000000151521: sub esi, edx; lea r11, qword ptr [rip + 0x36026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001513a1: sub esi, edx; lea r11, qword ptr [rip + 0x361a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151221: sub esi, edx; lea r11, qword ptr [rip + 0x36326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001510a1: sub esi, edx; lea r11, qword ptr [rip + 0x364a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150f21: sub esi, edx; lea r11, qword ptr [rip + 0x36626]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150da1: sub esi, edx; lea r11, qword ptr [rip + 0x367a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150c21: sub esi, edx; lea r11, qword ptr [rip + 0x36926]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150aa1: sub esi, edx; lea r11, qword ptr [rip + 0x36aa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150921: sub esi, edx; lea r11, qword ptr [rip + 0x36c26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001507a1: sub esi, edx; lea r11, qword ptr [rip + 0x36da6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150621: sub esi, edx; lea r11, qword ptr [rip + 0x36f26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001504a1: sub esi, edx; lea r11, qword ptr [rip + 0x370a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150321: sub esi, edx; lea r11, qword ptr [rip + 0x37226]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001501a1: sub esi, edx; lea r11, qword ptr [rip + 0x373a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150021: sub esi, edx; lea r11, qword ptr [rip + 0x37526]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fea8: sub esi, edx; lea r11, qword ptr [rip + 0x3769f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ea41: sub esi, edx; lea r11, qword ptr [rip + 0x38606]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e8c1: sub esi, edx; lea r11, qword ptr [rip + 0x38786]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e741: sub esi, edx; lea r11, qword ptr [rip + 0x38906]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e5c1: sub esi, edx; lea r11, qword ptr [rip + 0x38a86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e441: sub esi, edx; lea r11, qword ptr [rip + 0x38c06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e2c1: sub esi, edx; lea r11, qword ptr [rip + 0x38d86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e141: sub esi, edx; lea r11, qword ptr [rip + 0x38f06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dfc1: sub esi, edx; lea r11, qword ptr [rip + 0x39086]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014de41: sub esi, edx; lea r11, qword ptr [rip + 0x39206]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dcc1: sub esi, edx; lea r11, qword ptr [rip + 0x39386]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014db41: sub esi, edx; lea r11, qword ptr [rip + 0x39506]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d9c1: sub esi, edx; lea r11, qword ptr [rip + 0x39686]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d841: sub esi, edx; lea r11, qword ptr [rip + 0x39806]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d6c1: sub esi, edx; lea r11, qword ptr [rip + 0x39986]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d541: sub esi, edx; lea r11, qword ptr [rip + 0x39b06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d3c8: sub esi, edx; lea r11, qword ptr [rip + 0x39c7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bf71: sub esi, edx; lea r11, qword ptr [rip + 0x3abd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bdf1: sub esi, edx; lea r11, qword ptr [rip + 0x3ad56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bc71: sub esi, edx; lea r11, qword ptr [rip + 0x3aed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014baf1: sub esi, edx; lea r11, qword ptr [rip + 0x3b056]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b971: sub esi, edx; lea r11, qword ptr [rip + 0x3b1d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b7f1: sub esi, edx; lea r11, qword ptr [rip + 0x3b356]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b671: sub esi, edx; lea r11, qword ptr [rip + 0x3b4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b4f1: sub esi, edx; lea r11, qword ptr [rip + 0x3b656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b371: sub esi, edx; lea r11, qword ptr [rip + 0x3b7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b1f1: sub esi, edx; lea r11, qword ptr [rip + 0x3b956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b071: sub esi, edx; lea r11, qword ptr [rip + 0x3bad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aef1: sub esi, edx; lea r11, qword ptr [rip + 0x3bc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ad71: sub esi, edx; lea r11, qword ptr [rip + 0x3bdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014abf1: sub esi, edx; lea r11, qword ptr [rip + 0x3bf56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aa71: sub esi, edx; lea r11, qword ptr [rip + 0x3c0d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a8f8: sub esi, edx; lea r11, qword ptr [rip + 0x3c24f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015187c: sub esi, edx; sub rdi, rdx; lea r11, qword ptr [rip + 0x35cc8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ed68: sub esi, edx; sub rdi, rdx; lea r11, qword ptr [rip + 0x382dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c298: sub esi, edx; sub rdi, rdx; lea r11, qword ptr [rip + 0x3a8ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000079028: sub esi, esp; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x000000000001f6e1: sub esp, -0x80; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a3fb0: sub esp, -0x80; mov rax, -1; pop rbx; pop rbp; pop r12; ret; 
0x000000000012e77e: sub esp, -0x80; mov rax, rdx; pop rbx; ret; 
0x00000000000a394e: sub esp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000116214: sub esp, -0x80; pop rbx; ret; 
0x00000000000a4025: sub esp, -0x80; pop rbx; sub rax, rbp; pop rbp; pop r12; ret; 
0x0000000000116221: sub esp, -0x80; xor eax, eax; pop rbx; ret; 
0x000000000012702a: sub esp, 0x438; mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x00000000001334e1: sub esp, 0x98; mov rcx, rsp; call 0x133250; add rsp, 0x98; ret; 
0x00000000000fafca: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x130; syscall; 
0x00000000000f491a: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x1a; syscall; 
0x00000000000c0d8a: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x22; syscall; 
0x00000000000c0dea: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x23; syscall; 
0x00000000000fb0da: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x2b; syscall; 
0x00000000000fb4aa: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x2e; syscall; 
0x00000000000f1dea: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x4a; syscall; 
0x00000000000f1e7a: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x4b; syscall; 
0x00000000000ebf6a: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x55; syscall; 
0x00000000000eb71a: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x00000000000eb4ca: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x00000000000ebe1a: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 3; syscall; 
0x00000000000ecfca: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 7; syscall; 
0x00000000000fa3ba: sub esp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 8; syscall; 
0x000000000011bca9: sub esp, 8; call 0x11b470; or dword ptr [rip + 0x2a7718], 2; add rsp, 8; ret; 
0x000000000003cfb1: sub esp, 8; call 0x3ca70; add rsp, 8; ret; 
0x00000000000f2626: sub esp, 8; call 0x6d8d0; mov eax, 1; add rsp, 8; ret; 
0x000000000011af81: sub esp, 8; call 0xc1cc0; add rsp, 8; movzx eax, ax; ret; 
0x000000000011fa71: sub esp, 8; call 0xf1a90; mov dword ptr [rip + 0x2a3cc1], eax; add rsp, 8; ret; 
0x00000000000f3951: sub esp, 8; call 0xf36b0; mov qword ptr [rip + 0x2cdcd0], rax; add rsp, 8; ret; 
0x0000000000112021: sub esp, 8; mov edi, 0x400; call 0x1f490; mov qword ptr [rip + 0x2ad9b3], rax; add rsp, 8; ret; 
0x0000000000039ea1: sub esp, 8; mov edx, 0xa; xor esi, esi; call 0x3d3e0; add rsp, 8; ret; 
0x0000000000073696: sub esp, 8; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x60]; 
0x000000000012e8c1: sub esp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x6eb20; add rsp, 8; ret; 
0x00000000000aebdf: sub esp, eax; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000000005ec44: sub esp, edi; mov r13, r12; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x0000000000136b63: sub esp, edx; sub byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000049d08: sub esp, esi; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000007c853: sub qword ptr [r8 + rax], rsi; ret; 
0x00000000001220a7: sub qword ptr [rax + 0x68], 4; add rsp, 0x10; mov eax, edx; pop rbx; ret; 
0x0000000000117961: sub r10d, dword ptr [rax]; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000af113: sub r11b, r13b; test eax, 0xe2058d48; ret 0x30; 
0x0000000000049d07: sub r12, r14; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000005ec43: sub r12, r15; mov r13, r12; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000000aebde: sub r12d, eax; pop rbp; mov eax, r12d; pop r12; ret; 
0x000000000004a716: sub r13, rsi; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x00000000000aed33: sub r13d, eax; pop r12; mov eax, r13d; pop r13; pop r14; ret; 
0x0000000000079027: sub r14, r12; mov qword ptr [rbx + 0xd8], rax; mov qword ptr [rcx + 0x140], rdx; mov rdx, r13; call qword ptr [rax + 0x40]; 
0x00000000000be6c0: sub r14b, byte ptr [rax]; add byte ptr [rdi], cl; test dword ptr [rcx + 0x64000001], edi; mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x000000000009d3c8: sub r8, 0x10; bsf rdx, rdx; lea r11, qword ptr [rip + 0xdb009]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000007be08: sub r8, rcx; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000075108: sub r8, rcx; sar r8, 2; lea eax, dword ptr [r8 - 1]; ret; 
0x0000000000103da0: sub r8d, eax; mov eax, r8d; ret; 
0x00000000000816a3: sub r9, qword ptr [rax]; add ebx, ebp; ret; 
0x00000000000fc3ce: sub r9b, byte ptr [r8]; add byte ptr [rax - 0x77], cl; ret 0xff31; 
0x00000000000f7e63: sub r9b, dil; dec dword ptr [rax + 0x39]; ret; 
0x000000000012ac15: sub rax, -0x80; add rsp, 8; ret; 
0x00000000000a1583: sub rax, 1; ret; 
0x0000000000122607: sub rax, 4; or eax, 0x80000000; bswap eax; mov dword ptr [rdx], eax; mov edx, ebp; call qword ptr [rbx + 0x10]; 
0x0000000000121c14: sub rax, qword ptr [rbx + 0x18]; add rsp, 8; pop rbx; pop rbp; add eax, edx; ret; 
0x0000000000071cf3: sub rax, qword ptr [rbx + 0x20]; mov rdx, qword ptr [rbx + 0xf8]; mov qword ptr [rdx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000121bf9: sub rax, qword ptr [rbx + 0x60]; add eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007948c: sub rax, qword ptr [rdi + 0x10]; add rax, qword ptr [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000007d08d: sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000072fa4: sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000072e94: sub rax, qword ptr [rdi + 0x38]; ret; 
0x00000000000759b0: sub rax, qword ptr [rdx + 0x10]; pop r12; pop r13; pop r14; sar rax, 2; ret; 
0x0000000000075874: sub rax, qword ptr [rdx + 0x10]; sar rax, 2; ret; 
0x00000000000759cd: sub rax, qword ptr [rdx + 0x18]; pop r12; pop r13; pop r14; sar rax, 2; ret; 
0x00000000000771cb: sub rax, qword ptr [rdx + 0x18]; sar rax, 2; mov qword ptr [rcx], rax; xor eax, eax; pop rbx; ret; 
0x0000000000072f95: sub rax, qword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x0000000000072e85: sub rax, qword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x00000000000792f8: sub rax, r12; pop r12; pop r13; pop r14; ret; 
0x000000000007b7fc: sub rax, r13; pop r13; pop r14; ret; 
0x0000000000070ef9: sub rax, r14; pop r14; pop r15; pop rbp; ret; 
0x0000000000074c2d: sub rax, r14; pop r14; pop r15; ret; 
0x00000000000a3de2: sub rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000000a4029: sub rax, rbp; pop rbp; pop r12; ret; 
0x0000000000049b4d: sub rax, rdi; lea rbx, qword ptr [rax + rbx + 1]; add rsp, 0x20; mov rax, rbx; pop rbx; ret; 
0x0000000000088b60: sub rax, rdi; ret; 
0x00000000000792a3: sub rax, rdx; mov rdx, rax; mov rax, qword ptr [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x70]; 
0x000000000003c88d: sub rax, rdx; ret; 
0x000000000003603c: sub rax, rdx; shr rax, 0x3f; ret; 
0x000000000013cabc: sub rax, rsi; ret; 
0x00000000001221cf: sub rcx, 4; mov r12, rax; bswap ecx; mov dword ptr [rdx], ecx; mov edx, eax; call qword ptr [rbx + 0x10]; 
0x00000000000b14fb: sub rcx, rax; xor eax, eax; mov qword ptr [rbx + 8], rcx; add rsp, 0xd0; pop rbx; ret; 
0x0000000000121b68: sub rcx, rsi; mov qword ptr [rdx + 0x58], rdi; mov qword ptr [rdx + 0x68], rcx; ret; 
0x00000000000a1efb: sub rdi, 0x10; add rax, rdi; ret; 
0x0000000000147f91: sub rdi, 0x40; lea r11, qword ptr [rip + 0x3e9f4]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147ed2: sub rdi, 0x40; lea r11, qword ptr [rip + 0x3eab3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001455c1: sub rdi, 0x40; lea r11, qword ptr [rip + 0x41204]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145502: sub rdi, 0x40; lea r11, qword ptr [rip + 0x412c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142bf1: sub rdi, 0x40; lea r11, qword ptr [rip + 0x43a14]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142b32: sub rdi, 0x40; lea r11, qword ptr [rip + 0x43ad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000007dec5: sub rdi, r12; mov qword ptr [rsp + 8], rcx; and rdi, rdx; neg rdi; call qword ptr [rax]; 
0x000000000015187e: sub rdi, rdx; lea r11, qword ptr [rip + 0x35cc8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ed6a: sub rdi, rdx; lea r11, qword ptr [rip + 0x382dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c29a: sub rdi, rdx; lea r11, qword ptr [rip + 0x3a8ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015151d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015139d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x361a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015121d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015109d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x364a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150f1d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36626]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150d9d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x367a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150c1d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36926]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150a9d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36aa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015091d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36c26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015079d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36da6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015061d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x36f26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015049d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x370a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015031d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x37226]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015019d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x373a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015001d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x37526]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fea4: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3769f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ea3d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38606]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e8bd: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38786]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e73d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38906]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e5bd: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38a86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e43d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38c06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e2bd: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38d86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e13d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x38f06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dfbd: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39086]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014de3d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39206]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dcbd: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39386]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014db3d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39506]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d9bd: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39686]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d83d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39806]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d6bd: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39986]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d53d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39b06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d3c4: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x39c7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bf6d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3abd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bded: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3ad56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bc6d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3aed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014baed: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b056]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b96d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b1d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b7ed: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b356]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b66d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b4ed: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b36d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b1ed: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b06d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aeed: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ad6d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014abed: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bf56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aa6d: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3c0d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a8f4: sub rdi, rdx; sub rsi, rdx; lea r11, qword ptr [rip + 0x3c24f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a6c0: sub rdx, 0x40; lea r11, qword ptr [rip + 0x3c2c5]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a600: sub rdx, 0x40; sfence; lea r11, qword ptr [rip + 0x3c382]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147b3c: sub rdx, 0x40; sfence; lea r11, qword ptr [rip + 0x3ec86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014516c: sub rdx, 0x40; sfence; lea r11, qword ptr [rip + 0x41496]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000007520b: sub rdx, qword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x0000000000075220: sub rdx, qword ptr [rax + 8]; mov eax, dword ptr [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret; 
0x00000000001202c4: sub rdx, r13; mov esi, r12d; mov rdi, rbx; mov qword ptr [rbp + 0x18], rdx; call qword ptr [rax + 0x28]; 
0x0000000000075cb9: sub rdx, r15; call qword ptr [rax + 0x70]; 
0x0000000000118f8d: sub rdx, rbp; mov qword ptr [rbx + 0x10], rax; mov eax, 0x14; sar rdx, 4; add rdx, 1; syscall; 
0x00000000000a07ab: sub rdx, rcx; lea r11, qword ptr [rip + 0xd7fdf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fe2b: sub rdx, rcx; lea r11, qword ptr [rip + 0xd88df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009ea8b: sub rdx, rcx; lea r11, qword ptr [rip + 0xd9b2b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e34b: sub rdx, rcx; lea r11, qword ptr [rip + 0xda1df]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009d3fb: sub rdx, rcx; lea r11, qword ptr [rip + 0xdafdb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009cd4b: sub rdx, rcx; lea r11, qword ptr [rip + 0xdb60b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x00000000000b070d: sub rdx, rcx; lea rax, qword ptr [rsi + rdx]; add rsp, 0x18; ret; 
0x00000000000b1552: sub rdx, rcx; mov qword ptr [rbx], rdx; add rsp, 0xd0; pop rbx; ret; 
0x000000000004aaaf: sub rdx, rsi; call qword ptr [rax + 0x38]; 
0x0000000000078bd1: sub rdx, rsi; mov rdi, rbx; call rax; 
0x000000000005fdfe: sub rdx, rsi; sar rdx, 2; call qword ptr [rax + 0x38]; 
0x0000000000147ece: sub rsi, 0x40; sub rdi, 0x40; lea r11, qword ptr [rip + 0x3eab3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001454fe: sub rsi, 0x40; sub rdi, 0x40; lea r11, qword ptr [rip + 0x412c3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142b2e: sub rsi, 0x40; sub rdi, 0x40; lea r11, qword ptr [rip + 0x43ad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001a7958: sub rsi, rbp; jmp qword ptr [rcx]; 
0x0000000000151520: sub rsi, rdx; lea r11, qword ptr [rip + 0x36026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001513a0: sub rsi, rdx; lea r11, qword ptr [rip + 0x361a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151220: sub rsi, rdx; lea r11, qword ptr [rip + 0x36326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001510a0: sub rsi, rdx; lea r11, qword ptr [rip + 0x364a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150f20: sub rsi, rdx; lea r11, qword ptr [rip + 0x36626]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150da0: sub rsi, rdx; lea r11, qword ptr [rip + 0x367a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150c20: sub rsi, rdx; lea r11, qword ptr [rip + 0x36926]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150aa0: sub rsi, rdx; lea r11, qword ptr [rip + 0x36aa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150920: sub rsi, rdx; lea r11, qword ptr [rip + 0x36c26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001507a0: sub rsi, rdx; lea r11, qword ptr [rip + 0x36da6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150620: sub rsi, rdx; lea r11, qword ptr [rip + 0x36f26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001504a0: sub rsi, rdx; lea r11, qword ptr [rip + 0x370a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150320: sub rsi, rdx; lea r11, qword ptr [rip + 0x37226]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001501a0: sub rsi, rdx; lea r11, qword ptr [rip + 0x373a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150020: sub rsi, rdx; lea r11, qword ptr [rip + 0x37526]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fea7: sub rsi, rdx; lea r11, qword ptr [rip + 0x3769f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ea40: sub rsi, rdx; lea r11, qword ptr [rip + 0x38606]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e8c0: sub rsi, rdx; lea r11, qword ptr [rip + 0x38786]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e740: sub rsi, rdx; lea r11, qword ptr [rip + 0x38906]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e5c0: sub rsi, rdx; lea r11, qword ptr [rip + 0x38a86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e440: sub rsi, rdx; lea r11, qword ptr [rip + 0x38c06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e2c0: sub rsi, rdx; lea r11, qword ptr [rip + 0x38d86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e140: sub rsi, rdx; lea r11, qword ptr [rip + 0x38f06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dfc0: sub rsi, rdx; lea r11, qword ptr [rip + 0x39086]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014de40: sub rsi, rdx; lea r11, qword ptr [rip + 0x39206]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dcc0: sub rsi, rdx; lea r11, qword ptr [rip + 0x39386]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014db40: sub rsi, rdx; lea r11, qword ptr [rip + 0x39506]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d9c0: sub rsi, rdx; lea r11, qword ptr [rip + 0x39686]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d840: sub rsi, rdx; lea r11, qword ptr [rip + 0x39806]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d6c0: sub rsi, rdx; lea r11, qword ptr [rip + 0x39986]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d540: sub rsi, rdx; lea r11, qword ptr [rip + 0x39b06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d3c7: sub rsi, rdx; lea r11, qword ptr [rip + 0x39c7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bf70: sub rsi, rdx; lea r11, qword ptr [rip + 0x3abd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bdf0: sub rsi, rdx; lea r11, qword ptr [rip + 0x3ad56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bc70: sub rsi, rdx; lea r11, qword ptr [rip + 0x3aed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014baf0: sub rsi, rdx; lea r11, qword ptr [rip + 0x3b056]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b970: sub rsi, rdx; lea r11, qword ptr [rip + 0x3b1d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b7f0: sub rsi, rdx; lea r11, qword ptr [rip + 0x3b356]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b670: sub rsi, rdx; lea r11, qword ptr [rip + 0x3b4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b4f0: sub rsi, rdx; lea r11, qword ptr [rip + 0x3b656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b370: sub rsi, rdx; lea r11, qword ptr [rip + 0x3b7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b1f0: sub rsi, rdx; lea r11, qword ptr [rip + 0x3b956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b070: sub rsi, rdx; lea r11, qword ptr [rip + 0x3bad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aef0: sub rsi, rdx; lea r11, qword ptr [rip + 0x3bc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ad70: sub rsi, rdx; lea r11, qword ptr [rip + 0x3bdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014abf0: sub rsi, rdx; lea r11, qword ptr [rip + 0x3bf56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aa70: sub rsi, rdx; lea r11, qword ptr [rip + 0x3c0d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a8f7: sub rsi, rdx; lea r11, qword ptr [rip + 0x3c24f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015187b: sub rsi, rdx; sub rdi, rdx; lea r11, qword ptr [rip + 0x35cc8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ed67: sub rsi, rdx; sub rdi, rdx; lea r11, qword ptr [rip + 0x382dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c297: sub rsi, rdx; sub rdi, rdx; lea r11, qword ptr [rip + 0x3a8ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000001f6e0: sub rsp, -0x80; mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000a3faf: sub rsp, -0x80; mov rax, -1; pop rbx; pop rbp; pop r12; ret; 
0x000000000012e77d: sub rsp, -0x80; mov rax, rdx; pop rbx; ret; 
0x00000000000a394d: sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000116213: sub rsp, -0x80; pop rbx; ret; 
0x00000000000a4024: sub rsp, -0x80; pop rbx; sub rax, rbp; pop rbp; pop r12; ret; 
0x0000000000116220: sub rsp, -0x80; xor eax, eax; pop rbx; ret; 
0x0000000000127029: sub rsp, 0x438; mov rax, qword ptr [rdi + 8]; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax + 0x10]; 
0x00000000001334e0: sub rsp, 0x98; mov rcx, rsp; call 0x133250; add rsp, 0x98; ret; 
0x00000000000fafc9: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x130; syscall; 
0x00000000000f4919: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x1a; syscall; 
0x00000000000c0d89: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x22; syscall; 
0x00000000000c0de9: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x23; syscall; 
0x00000000000fb0d9: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x2b; syscall; 
0x00000000000fb4a9: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x2e; syscall; 
0x00000000000f1de9: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x4a; syscall; 
0x00000000000f1e79: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x4b; syscall; 
0x00000000000ebf69: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x55; syscall; 
0x00000000000eb719: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x00000000000eb4c9: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x00000000000ebe19: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 3; syscall; 
0x00000000000ecfc9: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 7; syscall; 
0x00000000000fa3b9: sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 8; syscall; 
0x000000000011bca8: sub rsp, 8; call 0x11b470; or dword ptr [rip + 0x2a7718], 2; add rsp, 8; ret; 
0x000000000003cfb0: sub rsp, 8; call 0x3ca70; add rsp, 8; ret; 
0x00000000000f2625: sub rsp, 8; call 0x6d8d0; mov eax, 1; add rsp, 8; ret; 
0x000000000011af80: sub rsp, 8; call 0xc1cc0; add rsp, 8; movzx eax, ax; ret; 
0x000000000011fa70: sub rsp, 8; call 0xf1a90; mov dword ptr [rip + 0x2a3cc1], eax; add rsp, 8; ret; 
0x00000000000f3950: sub rsp, 8; call 0xf36b0; mov qword ptr [rip + 0x2cdcd0], rax; add rsp, 8; ret; 
0x0000000000112020: sub rsp, 8; mov edi, 0x400; call 0x1f490; mov qword ptr [rip + 0x2ad9b3], rax; add rsp, 8; ret; 
0x0000000000039ea0: sub rsp, 8; mov edx, 0xa; xor esi, esi; call 0x3d3e0; add rsp, 8; ret; 
0x0000000000073695: sub rsp, 8; mov rax, qword ptr [rdi + 0xd8]; call qword ptr [rax + 0x60]; 
0x000000000012e8c0: sub rsp, 8; mov rdi, qword ptr [rdi + 0x18]; call 0x6eb20; add rsp, 8; ret; 
0x00000000001a7840: sub sil, bpl; jmp qword ptr [rcx]; 
0x0000000000036120: subps xmm0, xmm1; ret; 
0x000000000003611f: subsd xmm0, xmm1; ret; 
0x0000000000036484: subss xmm0, xmm1; ret; 
0x000000000000269f: syscall; 
0x0000000000118fa1: syscall; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000000fa367: syscall; mov dword ptr fs:[0x2d4], eax; mov dword ptr fs:[0x2d0], eax; pop rax; pop rdi; call rax; 
0x0000000000136b9b: syscall; mov rax, qword ptr [rip + 0x28d4a4]; mov rdi, rdx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000cb60d: syscall; neg eax; ret; 
0x0000000000108097: syscall; pop rdx; pop rsi; ret; 
0x00000000000c1d05: syscall; ret; 
0x000000000007d243: sysenter; 
0x0000000000097736: test ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000081de2: test ah, al; add byte ptr [rax], al; add dh, dh; ret; 
0x000000000017827d: test ah, bh; call rax; 
0x000000000017827d: test ah, bh; call rax; test esp, edi; push rax; xchg ah, bh; call qword ptr [rax]; 
0x000000000011f4a5: test ah, bl; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and byte ptr [r8 - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x000000000003aa14: test ah, cl; add al, 0; add byte ptr [rbp - 0x7c], al; test byte ptr [rdi], 0x84; ret; 
0x0000000000021e7b: test ah, cl; add byte ptr [rax], al; add byte ptr [rbx - 0x7a2dcf00], cl; ror byte ptr [rdi], 0x94; ret 0x8d48; 
0x00000000001aae2c: test ah, cl; add dword ptr [rax], eax; shl al, 0xf5; call qword ptr [rax]; 
0x000000000012b535: test al, 0; add byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax], al; call qword ptr [rax + 0x18]; 
0x000000000012ac77: test al, 0; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000123d3e: test al, 0; add byte ptr [rax], al; bswap r14d; call qword ptr [rax + 0x18]; 
0x0000000000123c0a: test al, 0; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000002cd70: test al, 0; add byte ptr [rax], al; ret; 
0x00000000000f21e1: test al, 0; add byte ptr [rax], al; syscall; 
0x00000000001a7b18: test al, 0x2d; cmc; jmp qword ptr [rcx]; 
0x00000000001a7d88: test al, 0x30; cmc; jmp qword ptr [rcx]; 
0x000000000010b544: test al, 0x35; cmc; inc dword ptr [rbp - 0x7b]; in al, 0x89; ret 0x87e; 
0x0000000000003c8e: test al, 0x35; push rbx; or byte ptr fs:[rbx + 0x4e], ch; ret 0x6bba; 
0x0000000000074e76: test al, 0x38; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rsi + rsi*4 - 0xa]; ret 0x7508; 
0x00000000001a82f8: test al, 0x3b; cmc; jmp qword ptr [rcx]; 
0x00000000000d43b1: test al, 0x48; add eax, ecx; jmp rax; 
0x00000000001a4cb8: test al, 0x65; hlt; jmp qword ptr [rcx]; 
0x00000000001a5078: test al, 0x6e; hlt; jmp qword ptr [rcx]; 
0x0000000000194cc8: test al, 0x92; in eax, dx; jmp qword ptr [rcx + 0x4000001]; 
0x00000000001793b0: test al, 0x95; hlt; jmp rsi; 
0x0000000000173f37: test al, 0x97; xchg eax, esp; ret; 
0x0000000000179f38: test al, 0xa6; cmc; inc eax; cmpsb byte ptr [rsi], byte ptr [rdi]; cmc; jmp rax; 
0x00000000001a5928: test al, 0xac; hlt; call qword ptr [rbx]; 
0x0000000000197468: test al, 0xba; in eax, dx; jmp qword ptr [rdi]; 
0x0000000000198854: test al, 0xbc; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001a5ff8: test al, 0xbd; hlt; jmp qword ptr [rcx]; 
0x00000000001a6108: test al, 0xc0; hlt; jmp qword ptr [rcx]; 
0x00000000001aa8b8: test al, 0xd6; cmc; jmp qword ptr [rsi]; 
0x00000000001a7348: test al, 0xd; cmc; jmp qword ptr [rcx]; 
0x0000000000174a7b: test al, 0xe0; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000191a39: test al, 0xea; jmp qword ptr [rcx + 1]; 
0x00000000001962c9: test al, 0xed; jmp rbx; 
0x00000000001abb48: test al, 0xef; cmc; call qword ptr [rdi]; 
0x0000000000199a9c: test al, 0xef; in eax, dx; jmp qword ptr [rdx]; 
0x000000000017a171: test al, 0xf5; call rsp; 
0x000000000017a1dd: test al, 0xf5; jmp qword ptr [rdx - 0x5a]; 
0x000000000017a16d: test al, 0xf5; ljmp ptr [rcx]; test al, 0xf5; call rsp; 
0x000000000017a1d9: test al, 0xf5; ljmp ptr [rcx]; test al, 0xf5; jmp qword ptr [rdx - 0x5a]; 
0x000000000017a169: test al, 0xf5; ljmp ptr [rcx]; test al, 0xf5; ljmp ptr [rcx]; test al, 0xf5; call rsp; 
0x000000000017a1d5: test al, 0xf5; ljmp ptr [rcx]; test al, 0xf5; ljmp ptr [rcx]; test al, 0xf5; jmp qword ptr [rdx - 0x5a]; 
0x000000000017a091: test al, 0xf5; push rbp; cmpsd dword ptr [rsi], dword ptr [rdi]; cmc; jmp rcx; 
0x0000000000187799: test al, 0xfc; call qword ptr [rax]; 
0x0000000000187819: test al, 0xfc; jmp rdx; 
0x0000000000187815: test al, 0xfc; push qword ptr [rdx - 0x58]; cld; jmp rdx; 
0x0000000000186429: test al, 0xfd; jmp qword ptr [rsi - 0x57]; 
0x0000000000186425: test al, 0xfd; jmp rsi; 
0x000000000018d3cd: test al, 2; add byte ptr [rsp + rcx*8], dl; stc; inc dword ptr [rax + rbp*4 - 0x326bfffe]; stc; call rsp; 
0x000000000014c2a1: test al, 3; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000061659: test al, ch; out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x000000000018cd40: test al, dh; clc; call rsp; 
0x000000000018642c: test ax, 0xfffd; out 0xa9, al; std; jmp qword ptr [rsi - 0x56]; 
0x000000000012c167: test bh, 0x43; adc byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call qword ptr [rax + 0x28]; 
0x000000000006f6c4: test bh, al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000001aa92c: test bh, al; add dword ptr [rax], eax; push rax; ret 0xfff8; 
0x00000000000bc474: test bh, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xdb31; 
0x000000000007655c: test bh, bl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rdi, rbx; call rax; 
0x000000000019d12c: test bh, ch; add byte ptr [rax], al; cmp bl, 0xee; call qword ptr [rax]; 
0x000000000008616c: test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, r12; call rax; 
0x00000000000c42e4: test bh, dh; add dword ptr [rax], eax; add byte ptr [rax - 0x6bf08406], al; ret 0xb60f; 
0x00000000001b3f31: test bh, dh; jmp qword ptr [rdx + 2]; 
0x000000000008ab61: test bh, dl; add byte ptr [rax], al; add al, ch; xor eax, 0x39fffad0; ret; 
0x0000000000095dc4: test bh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; stc; dec dword ptr [rcx - 0x77]; ret 0x840f; 
0x00000000001143f3: test bl, ah; add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; ret 0x840f; 
0x000000000018af14: test bl, al; add dword ptr [rax], eax; xchg eax, esp; cmc; call rsp; 
0x00000000000f2a50: test bl, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x3c01; 
0x0000000000127d00: test bl, ch; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; jo 0x127d56; mov edi, esp; call qword ptr [rax + 0x20]; 
0x00000000000da19b: test bl, ch; add dword ptr [rax], eax; add byte ptr [rbx + rcx*4 + 0x78], cl; or byte ptr [rax + 0x63], cl; ret 0xc148; 
0x0000000000030448: test bl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7bf0ffc1], al; ret 0; 
0x00000000001336b3: test byte ptr [r8], bpl; add byte ptr [rcx + 0x5c], al; jmp rax; 
0x000000000012f78b: test byte ptr [rax + 0x1000001], al; ret 0x894c; 
0x000000000002ff16: test byte ptr [rax + 0x200], bh; ret; 
0x00000000000c286a: test byte ptr [rax + 0x63], 0x14; mov al, 0x48; add eax, edx; jmp rax; 
0x00000000001276a5: test byte ptr [rax + 0x63], 0x34; mov al, 0x48; add eax, esi; jmp rax; 
0x0000000000127f05: test byte ptr [rax + 0x63], 0xc; mov al, 0x48; add eax, ecx; jmp rax; 
0x0000000000036c2c: test byte ptr [rax + 0x63], 0xf9; mov eax, 0xea; syscall; 
0x0000000000036da9: test byte ptr [rax + 0x63], 0xff; cmovne rax, rcx; mov ecx, 0xd; mov rsi, rax; mov eax, ecx; syscall; 
0x00000000000ed35b: test byte ptr [rax + 0x63], 0xff; mov eax, 0x118; syscall; 
0x00000000000f052f: test byte ptr [rax + 0x63], 0xff; mov eax, 0x11d; syscall; 
0x00000000000eba7e: test byte ptr [rax + 0x63], 0xff; mov eax, 0x48; syscall; 
0x00000000000f0fe6: test byte ptr [rax + 0x63], 0xff; mov eax, ecx; syscall; 
0x00000000000f5d6b: test byte ptr [rax + 0xc], bh; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000000af97c: test byte ptr [rax + 0xf], 0x45; ret 0x8948; 
0x000000000005ab88: test byte ptr [rax + rax - 0x76b40000], ah; ret 0x894c; 
0x0000000000086327: test byte ptr [rax + rax - 0x76b80000], ah; out dx, al; mov rdi, rbx; call rax; 
0x00000000000c9013: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000000dc440: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000012b525: test byte ptr [rax + rax*8], ah; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; or byte ptr [r9 + r9*4 - 1], r9b; mov dword ptr [rsp + 0xa8], 1; call qword ptr [rax + 0x18]; 
0x000000000002e1ec: test byte ptr [rax + rax], 0; mov dword ptr [rbp - 0xdc], 1; mov dword ptr [rbp - 0xd8], 1; mov rdi, r14; mov eax, 3; syscall; 
0x0000000000187dfc: test byte ptr [rax + rax], bh; hlt; sub edx, 0x7cacff; add byte ptr [rdx + rax*4 - 0x16], al; call rsp; 
0x00000000000fbc63: test byte ptr [rax + rax], ch; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x45; syscall; 
0x00000000000f933c: test byte ptr [rax + rax], ch; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f9336: test byte ptr [rax + rax], ch; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f9330: test byte ptr [rax + rax], ch; mov eax, dword ptr [rip + 0x2c847b]; mov dword ptr [rip + 0x2c84a5], eax; lea rax, qword ptr [rip + 0x2c8472]; ret; 
0x00000000000f9343: test byte ptr [rax + rax], ch; ret; 
0x0000000000120716: test byte ptr [rax + rbp*8], ah; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; call qword ptr [rax + 0x20]; 
0x00000000000485e9: test byte ptr [rax + rbx*4], ah; add byte ptr [rax], al; add byte ptr [rcx], al; ret 0xd7e9; 
0x000000000006f5ee: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000749db: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], al; mov rdi, r12; call qword ptr [rax + 0x18]; 
0x000000000007234b: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x10]; 
0x000000000006f5ba: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000000b1009: test byte ptr [rax + rbx], ah; add dword ptr [rax], eax; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000126b6a: test byte ptr [rax + rcx*4], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rax + 0x20]; 
0x00000000000eadb2: test byte ptr [rax + rsi*4], ah; add byte ptr [rax], al; add al, ch; ret; 
0x0000000000188a78: test byte ptr [rax - 0x13], ah; jmp rsp; 
0x000000000018d3d4: test byte ptr [rax - 0x326bfffe], ch; stc; call rsp; 
0x0000000000046355: test byte ptr [rax - 0x3f], 0xc8; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000003c52a: test byte ptr [rax - 0x3f], 0xca; adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x00000000000da8b3: test byte ptr [rax - 0x3f], 0xe6; add ch, al; ret; 
0x00000000000d3107: test byte ptr [rax - 0x3f], 0xe6; add ebp, eax; outsd dx, dword ptr [rsi]; ret; 
0x0000000000102182: test byte ptr [rax - 0x75], 0x54; and al, 0x18; mov edi, 0x2000004; call rax; 
0x00000000001870b0: test byte ptr [rax - 0x77790004], 0xfc; call qword ptr [rsi]; 
0x0000000000097a90: test byte ptr [rax - 0x77], 0xdf; call 0x8c4b0; lea rax, qword ptr [rbx - 1]; pop rbx; ret; 
0x00000000000a3897: test byte ptr [rax - 0x77], 0xdf; call 0x8c4b0; lea rax, qword ptr [rbx - 4]; pop rbx; ret; 
0x000000000006d978: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x10]; 
0x00000000001202ee: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x28]; 
0x000000000007c15c: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x58]; 
0x00000000000792b2: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rax + 0x70]; 
0x000000000010891f: test byte ptr [rax - 0x77], 0xdf; mov eax, 0xe6; syscall; 
0x0000000000049d03: test byte ptr [rax - 0x77], 0xdf; sub r12, r14; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x00000000000f5bbe: test byte ptr [rax - 0x77], 0xef; call rbx; 
0x000000000011f553: test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000011f4c3: test byte ptr [rax - 0x77], 0xef; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x0000000000126757: test byte ptr [rax - 0x77], 0xef; mov dword ptr [rsp + 0x40], 0; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x00000000000db9d6: test byte ptr [rax], 0; add byte ptr [rax + 0x63], cl; ret 0x8b48; 
0x00000000000279ee: test byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x48; dec dword ptr [rcx - 0x7d]; ret; 
0x000000000012e60a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add dword ptr [rdi + 0x28], 4; mov eax, 1; ret; 
0x00000000000a2eba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x00000000000bca4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x000000000008bdda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000009395a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, qword ptr [rax + rdi - 0x10]; ret; 
0x0000000000096f6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsr eax, eax; lea rax, qword ptr [rax + rdi + 0x10]; ret; 
0x000000000016239a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xa]; ret; 
0x00000000001623aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xb]; ret; 
0x00000000001623ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xc]; ret; 
0x00000000001623ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xd]; ret; 
0x00000000001623da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 0xe]; ret; 
0x000000000016231a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 1]; ret; 
0x000000000016232a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 2]; ret; 
0x000000000016233a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 3]; ret; 
0x000000000016234a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 4]; ret; 
0x000000000016235a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 5]; ret; 
0x000000000016236a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 6]; ret; 
0x000000000016237a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 8]; ret; 
0x000000000016238a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi + 9]; ret; 
0x00000000000a34da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi - 0xc]; ret; 
0x00000000000a34fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi - 4]; ret; 
0x00000000000a34ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi - 8]; ret; 
0x000000000016230a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdi]; ret; 
0x000000000008346a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rdx - 0x10]; add rsp, 8; ret; 
0x000000000002202a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x000000000002203a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, qword ptr [rip + 0x15c12b]; ret; 
0x000000000015a4ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rcx], dl; ret; 
0x000000000009e3da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, qword ptr [rdi]; ret; 
0x000000000009cdda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000009ddaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dl; ret; 
0x000000000009daaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dl, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000015a4fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov byte ptr [rcx + 4], dl; ret; 
0x000000000015a51a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov dword ptr [rcx + 3], edx; ret; 
0x000000000015a50a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; mov word ptr [rcx + 4], dx; ret; 
0x000000000015a4ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rcx], edx; ret; 
0x00000000000e44da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi + 4], esi; xor eax, eax; ret; 
0x000000000009ddca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi - 1], edx; ret; 
0x000000000009ddea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; mov byte ptr [rdi + 4], dl; ret; 
0x000000000009ddfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; mov word ptr [rdi + 4], dx; ret; 
0x000000000009ddda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rdi], edx; ret; 
0x0000000000120d7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 0xa; ret; 
0x0000000000120dba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 0xc; ret; 
0x0000000000120daa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsi], 8; ret; 
0x000000000009cdea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000000f11da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x10; syscall; 
0x00000000000f308a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x4c; syscall; 
0x00000000000ecf7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x54; syscall; 
0x00000000000eb37a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x5a; syscall; 
0x00000000000eb36a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x5f; syscall; 
0x00000000000eb36a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x5f; syscall; ret; 
0x00000000000c1d0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x66; syscall; 
0x00000000000c1d0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x66; syscall; ret; 
0x00000000000c1d2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x00000000000c1d2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x00000000000c1d1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x00000000000c1d1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x00000000000c1d3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x00000000000c1d3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x00000000000c1d4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x73; syscall; 
0x00000000000f101a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x8d; syscall; 
0x00000000000fa40a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xa6; syscall; 
0x00000000000f1b4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xaa; syscall; 
0x00000000000f1bea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xab; syscall; 
0x00000000000f2eda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xeb; syscall; 
0x00000000000c24ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xfc17; ret; 
0x000000000007c7fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000002c04a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000012144a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x000000000007c59a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000037baa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rip + 0x3864da]; ret; 
0x000000000010c53a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, edi; bswap eax; ret; 
0x000000000014c92a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000036fea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 8; mov eax, 0x82; syscall; 
0x000000000015a53a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov byte ptr [rcx + 8], dl; ret; 
0x000000000015a55a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 7], edx; ret; 
0x000000000015a56a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov dword ptr [rcx + 8], edx; ret; 
0x000000000015a57a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 5], rdx; ret; 
0x000000000015a58a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 6], rdx; ret; 
0x000000000015a59a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 7], rdx; ret; 
0x000000000015a5aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov qword ptr [rcx + 8], rdx; ret; 
0x000000000015a54a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; mov word ptr [rcx + 8], dx; ret; 
0x000000000015a52a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx], rdx; ret; 
0x000000000009de0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi - 1], rdx; ret; 
0x000000000009de2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov byte ptr [rdi + 8], dl; ret; 
0x000000000009de4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000009de5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000009de6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 5], rdx; ret; 
0x000000000009de7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000009de3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; mov word ptr [rdi + 8], dx; ret; 
0x000000000009de1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi], rdx; ret; 
0x00000000000fa7fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x12d; syscall; 
0x00000000000ed2ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov r10, rcx; mov eax, 0x28; syscall; 
0x000000000007c80a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x0000000000036caa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x00000000000a2eda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x00000000000a2eea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x00000000000a2efa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000000a2f0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000000a2f1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000000a2f2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000000a2f3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000012d61a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000012ce7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 8]; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000012e1fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x18]; sub rax, qword ptr [rdi + 0x20]; ret; 
0x0000000000070b7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000007c86a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000007c84a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x342949]; ret; 
0x000000000003012a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x38dda1]; add rax, qword ptr fs:[0]; ret; 
0x00000000000237da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3a0461]; ret; 
0x00000000000237ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x3a0481]; ret; 
0x000000000012696a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x38]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x0000000000097ada: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x000000000010bfca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; add rsp, 8; ret; 
0x000000000007c87a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x00000000000c119a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rdx; mov eax, r8d; syscall; 
0x000000000008687a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x3376c1]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x000000000015a4da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rcx], dx; mov byte ptr [rcx + 2], dl; ret; 
0x000000000015a4ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rcx], dx; ret; 
0x000000000009ddba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rdi], dx; ret; 
0x000000000009de8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi - 1], xmm0; ret; 
0x000000000009de9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000134dca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movsxd rdi, ebp; mov eax, 3; syscall; 
0x000000000014caba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000014ca3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000000fa975: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x123; syscall; 
0x00000000000ebeb5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x124; syscall; 
0x00000000000ebf15: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x125; syscall; 
0x00000000000faaf5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x126; syscall; 
0x00000000000faf45: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x12c; syscall; 
0x00000000000fa8b5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x131; syscall; 
0x00000000000ebee5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x16; syscall; 
0x00000000000cb295: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x18; syscall; 
0x00000000000f4985: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1b; syscall; 
0x00000000000fbe95: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1d; syscall; 
0x00000000000fbec5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1f; syscall; 
0x00000000000ebe85: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x21; syscall; 
0x00000000000c0b85: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x25; syscall; 
0x00000000000b4285: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x26; syscall; 
0x00000000000fb5a5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x29; syscall; 
0x00000000000fb1d5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x33; syscall; 
0x00000000000fbda5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x40; syscall; 
0x00000000000fbd75: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x41; syscall; 
0x00000000000fbe65: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x43; syscall; 
0x00000000000fbd45: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x47; syscall; 
0x00000000000f30b5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x4d; syscall; 
0x00000000000ebfd5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x51; syscall; 
0x00000000000eb3a5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5b; syscall; 
0x00000000000ec7d5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5d; syscall; 
0x00000000000ec805: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x5e; syscall; 
0x00000000000f0c55: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x62; syscall; 
0x00000000000fab55: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x67; syscall; 
0x00000000000c1f05: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6d; syscall; 
0x00000000000c1f35: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x6f; syscall; 
0x00000000000c1f95: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x70; syscall; 
0x00000000000c1fc5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x76; syscall; 
0x00000000000c1ff5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x78; syscall; 
0x00000000000fa465: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7a; syscall; 
0x00000000000fa495: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7b; syscall; 
0x00000000000fa855: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7d; syscall; 
0x00000000000fa885: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x7e; syscall; 
0x00000000000fae25: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x86; syscall; 
0x00000000000fac15: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x87; syscall; 
0x00000000000eb255: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8a; syscall; 
0x00000000000cb205: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x8f; syscall; 
0x00000000000cb235: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x90; syscall; 
0x00000000000cb265: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x91; syscall; 
0x00000000000cb2c5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x92; syscall; 
0x00000000000cb2f5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x93; syscall; 
0x00000000000cb325: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x94; syscall; 
0x00000000000f4a15: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x96; syscall; 
0x00000000000f4a45: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x97; syscall; 
0x00000000000f4a75: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x98; syscall; 
0x00000000000fa7b5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9a; syscall; 
0x00000000000fac45: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x9b; syscall; 
0x00000000000f0c25: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa0; syscall; 
0x00000000000f1d95: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa1; syscall; 
0x00000000000f21a5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa7; syscall; 
0x00000000000f21d5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa8; syscall; 
0x00000000000f48c5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x00000000000fa275: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xac; syscall; 
0x00000000000fa8e5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xae; syscall; 
0x00000000000fa915: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xb0; syscall; 
0x00000000000fa435: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xbb; syscall; 
0x00000000000f8175: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc6; syscall; 
0x00000000000f8055: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xc7; syscall; 
0x00000000000fa945: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xd5; syscall; 
0x00000000000fa7e5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xe4; syscall; 
0x00000000000faac5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xfd; syscall; 
0x00000000000fab25: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xff; syscall; 
0x000000000005db87: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov eax, 0x52; syscall; 
0x00000000000faf18: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x11f; syscall; 
0x00000000000fbe38: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x1e; syscall; 
0x00000000000fb578: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x30; syscall; 
0x00000000000fb238: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x32; syscall; 
0x00000000000c11d9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x3b; syscall; 
0x00000000000ebcb9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x49; syscall; 
0x00000000000eb448: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x53; syscall; 
0x00000000000eceb9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x59; syscall; 
0x00000000000374b8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x83; syscall; 
0x00000000000f49e8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x95; syscall; 
0x00000000000fa788: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x9e; syscall; 
0x00000000000fa828: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x9f; syscall; 
0x00000000000fabe8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xb4; syscall; 
0x00000000000f4898: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xb; syscall; 
0x00000000000f80e8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc2; syscall; 
0x00000000000f8148: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc3; syscall; 
0x00000000000f8028: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc4; syscall; 
0x00000000000f81d8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc5; syscall; 
0x00000000000faa98: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xfe; syscall; 
0x00000000000bd338: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rdi]; ret; 
0x0000000000037b98: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, dword ptr [rip + 0x3864fa]; ret; 
0x000000000009da9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000a0c5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000001365aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; add rsp, 0x48; ret; 
0x000000000005d55a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; pop rbx; ret; 
0x0000000000046d3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000009700a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000103d08: test byte ptr [rax], al; add byte ptr [rax], al; sub ecx, eax; mov eax, ecx; ret; 
0x00000000000eafa1: test byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000000e54cb: test byte ptr [rax], al; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000193a2c: test byte ptr [rax], bl; add byte ptr [rax], dl; or esp, ebp; jmp qword ptr [rcx]; 
0x0000000000133654: test byte ptr [rax], ch; add byte ptr [rcx + 0x5c], al; jmp rax; 
0x00000000000e23db: test byte ptr [rax], ch; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; adc byte ptr [r8 + 0x39], cl; ret; 
0x0000000000172a9c: test byte ptr [rax], ch; in al, dx; call qword ptr [rax]; 
0x0000000000172a94: test byte ptr [rax], ch; in al, dx; inc dword ptr [rax + rbp + 0x2884ffec]; in al, dx; call qword ptr [rax]; 
0x000000000018c620: test byte ptr [rax], dh; clc; call rsp; 
0x00000000000bcde0: test byte ptr [rax], dl; xor byte ptr [rax], al; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x000000000011b13d: test byte ptr [rbp + 0x18], bl; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000015a806: test byte ptr [rbp + 0x48fffffb], ah; mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000031b8a: test byte ptr [rbp + 0x48fffffd], cl; mov eax, dword ptr [rip + 0x39247a]; lea rdi, qword ptr [rip + 0x38e0e3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000002f5c4: test byte ptr [rbp + 0x48fffffe], dl; mov eax, dword ptr [rip + 0x394a40]; lea rdi, qword ptr [rip + 0x390529]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f6516: test byte ptr [rbp + 3], cl; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000000241e9: test byte ptr [rbp + rcx*4 + 0x2c], cl; ret; 
0x000000000018ae94: test byte ptr [rbp - 0x2abffff], bh; hlt; call rsp; 
0x00000000001a752c: test byte ptr [rbx + 0x20c00001], dl; cmc; jmp qword ptr [rsi]; 
0x00000000000f5bb8: test byte ptr [rbx + 0x3100000a], dh; test byte ptr [rax - 0x77], 0xef; call rbx; 
0x00000000001a852c: test byte ptr [rbx + 0x47200001], ah; cmc; jmp rax; 
0x000000000012605b: test byte ptr [rbx + 0x49fffffe], ah; mov eax, dword ptr [rsp + 8]; mov rsi, rsp; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000127870: test byte ptr [rbx + 1], dh; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x70]; mov rsi, qword ptr [rsp + 0x10]; mov rdi, rbp; call qword ptr [rax + 8]; 
0x0000000000123d68: test byte ptr [rbx + 1], dh; add byte ptr [rax], al; mov rdi, qword ptr [r13]; mov rsi, rbp; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000857b0: test byte ptr [rbx + 2], bl; add byte ptr [rax], al; mov rdi, rbx; mov rdx, r15; call rax; 
0x00000000000f6278: test byte ptr [rbx + 5], cl; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000000f6298: test byte ptr [rbx + 6], cl; add byte ptr [rax], al; xor esi, esi; mov rdi, r15; call rbx; 
0x00000000001281ff: test byte ptr [rbx + rax], ch; add byte ptr [rax], al; mov rdi, qword ptr [r15]; mov rsi, r13; mov rax, qword ptr [rdi + 0x38]; call qword ptr [rax + 8]; 
0x00000000000c8a44: test byte ptr [rbx + rsi*8 + 0x2ae9ffff], al; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000004ef48: test byte ptr [rbx - 0x14000002], bh; fst dword ptr [rax - 0x776c74b8]; add byte ptr [rax], al; add byte ptr [rbx + 0x7501046a], al; ret; 
0x00000000000f75bf: test byte ptr [rbx - 0x3eb7dbc4], 0xc8; adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000019752c: test byte ptr [rbx - 0x42800000], dl; in eax, dx; jmp qword ptr [rax]; 
0x00000000000d8904: test byte ptr [rbx - 0x72000003], bh; add dword ptr [r8 - 0x7d], ecx; ret; 
0x00000000001445d7: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000018be40: test byte ptr [rbx - 9], ah; jmp rsp; 
0x00000000000a4c60: test byte ptr [rbx], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000f2aa8: test byte ptr [rbx], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x3c01; 
0x0000000000025261: test byte ptr [rbx], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000163772: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000018b998: test byte ptr [rbx], bl; idiv edi; mov esp, 0xb40001fa; sbb esi, edi; call rsp; 
0x00000000000a5100: test byte ptr [rbx], dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001a7b2c: test byte ptr [rcx + 0x2dc00001], bl; cmc; jmp qword ptr [rcx]; 
0x000000000010600a: test byte ptr [rcx + 0x31000000], bl; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000118742: test byte ptr [rcx + 0x45000000], bh; xor eax, eax; movsxd rdi, r14d; mov eax, 3; syscall; 
0x0000000000120fe7: test byte ptr [rcx + 0x48000001], al; mov eax, dword ptr [rbp + 8]; lea esi, dword ptr [r12 + 3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax + 0x30]; 
0x00000000000bd9f1: test byte ptr [rcx + 0x48fffffe], ah; mov edi, ebx; mov dword ptr [rbp - 0x58], edx; call 0x135c70; mov rax, rbx; call rax; 
0x000000000018caf8: test byte ptr [rcx + 0x64f4fff8], cl; add al, byte ptr [rax]; ret 0xf88a; 
0x00000000001a5b2c: test byte ptr [rcx + 1], bh; add al, dl; mov al, 0xf4; jmp qword ptr [rcx]; 
0x00000000001a532c: test byte ptr [rcx + 1], dh; add al, dl; jp 0x1a5327; jmp qword ptr [rcx]; 
0x0000000000163769: test byte ptr [rcx + rax - 0x67d0000], al; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000000f29ef: test byte ptr [rcx + rax - 0x7cb80000], bh; ret 0x3c01; 
0x00000000000f298f: test byte ptr [rcx + rax - 0x7cb80000], dl; ret 0x3c01; 
0x000000000008b13e: test byte ptr [rcx + rax - 0x7cb80000], dl; ret 0xe901; 
0x000000000008508f: test byte ptr [rcx + rax], bh; add byte ptr [rcx + rcx*4 - 0xa], cl; call rax; 
0x000000000008a78f: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, qword ptr [rdi + rsi]; ret; 
0x0000000000037070: test byte ptr [rcx + rcx*4 - 0x31], 0x44; mov eax, eax; syscall; 
0x0000000000037109: test byte ptr [rcx + rcx*4 - 0x39], 0x89; call 0xffffffff894b7622; ret 0xc189; 
0x00000000000807f7: test byte ptr [rcx + rcx*4 - 0xf], 0xf; mov ds, word ptr [rdx + 0x48000000]; mov eax, dword ptr [rip + 0x33d5b0]; mov qword ptr [rsp + 0x28], r14; mov rdi, r14; call qword ptr [rax]; 
0x0000000000039414: test byte ptr [rcx + rcx*4 - 9], 0xe8; ret; 
0x000000000003fef6: test byte ptr [rcx - 0x47], 0x40; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x894c; 
0x000000000006dc52: test byte ptr [rcx - 0x76ffffff], cl; ret 0xe283; 
0x00000000001087e3: test byte ptr [rcx - 0x79cb638], 0xf; add eax, 0xfff0003d; dec dword ptr [rax - 0x77]; ret 0x1376; 
0x0000000000133414: test byte ptr [rcx - 0x7d000000], bl; ret 0x8380; 
0x00000000000bc88a: test byte ptr [rcx - 0x7d], 0xc4; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000018bd58: test byte ptr [rcx - 9], cl; jmp rsp; 
0x00000000001374a6: test byte ptr [rcx], 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000010c5c5: test byte ptr [rcx], 0xf0; bswap eax; ret; 
0x00000000000f610a: test byte ptr [rcx], ah; add eax, 0xf6310000; mov rdi, r12; call rbx; 
0x00000000000d31e3: test byte ptr [rcx], al; add eax, 0x438d0000; add dword ptr [rax - 0x7d], ecx; ret; 
0x00000000000aaf2d: test byte ptr [rcx], al; add eax, 0xb8480000; ret 0xffff; 
0x0000000000045b1d: test byte ptr [rcx], dl; add dword ptr [rax], eax; add byte ptr [rcx + 0x39], cl; ret 0x840f; 
0x00000000000f543c: test byte ptr [rdi + 0x48000000], ch; mov esi, dword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000088c14: test byte ptr [rdi + 0x48000000], dl; bsf eax, edx; ret; 
0x00000000000962e0: test byte ptr [rdi + 0xffffffd], bl; mov dh, 0x45; ret; 
0x00000000001b392c: test byte ptr [rdi + 2], dl; add byte ptr [rax + 0x76], dl; idiv edi; ret 0; 
0x00000000000409a4: test byte ptr [rdi + rbx*8 - 1], bl; dec dword ptr [rax + 0x39]; ret; 
0x0000000000083456: test byte ptr [rdi + rdx - 8], 1; lea rcx, qword ptr [rdx - 8]; cmovne rax, rcx; add rsp, 8; ret; 
0x00000000001a692c: test byte ptr [rdi - 0x22efffff], al; hlt; call qword ptr [rdx]; 
0x00000000000d9a93: test byte ptr [rdi - 0x77000000], cl; sub byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x00000000000c4514: test byte ptr [rdi - 0x80000000], ah; cli; jnp 0xc452c; xchg eax, esp; ret 0xb60f; 
0x000000000018a988: test byte ptr [rdi - 0xd], bh; call rsp; 
0x000000000018a988: test byte ptr [rdi - 0xd], bh; call rsp; pushfq; add dword ptr [rax], eax; ret 0xf380; 
0x00000000001a0e34: test byte ptr [rdi - 0xf], bh; jmp qword ptr [rdx]; 
0x0000000000030e63: test byte ptr [rdi*8 - 0x74b70001], dl; add eax, 0x3931a1; lea rdi, qword ptr [r12 + 0x80]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c4597: test byte ptr [rdi*8 - 0x7cb70001], al; ret 0xeb02; 
0x00000000000c277b: test byte ptr [rdi], 0x1f; add byte ptr [rax + 0x63], cl; sti; mov eax, 3; syscall; 
0x00000000000f528a: test byte ptr [rdi], 0x84; ret 0; 
0x000000000003e601: test byte ptr [rdi], 0x84; ret 0x15; 
0x000000000003aa1b: test byte ptr [rdi], 0x84; ret; 
0x00000000000789f2: test byte ptr [rdi], 0x95; ret 0x8445; 
0x00000000000dae56: test byte ptr [rdi], 0x95; ret 0xd284; 
0x000000000005800a: test byte ptr [rdi], 0x9f; ret 0x9529; 
0x0000000000072ee2: test byte ptr [rdi], 4; sete al; ret; 
0x0000000000072ef2: test byte ptr [rdi], 8; sete al; ret; 
0x000000000009d758: test byte ptr [rdi], al; add byte ptr [rax], al; ret; 
0x0000000000075d5c: test byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rbx - 0x7af0fe08], al; ret; 
0x000000000018c4c4: test byte ptr [rdi], dh; add al, byte ptr [rax]; movsb byte ptr [rdi], byte ptr [rsi]; sbb al, 0xf8; jmp rsp; 
0x00000000000d98b4: test byte ptr [rdi], dh; add dword ptr [rax], eax; add byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x00000000000e73f0: test byte ptr [rdx + 0x3c000015], dh; sub cl, byte ptr [rdi]; xchg eax, esp; ret 0x403c; 
0x00000000001a842c: test byte ptr [rdx + 0x43900001], ah; cmc; call qword ptr [rax]; 
0x000000000008a701: test byte ptr [rdx + 0x48000001], bh; bsr eax, eax; add rax, rdi; ret; 
0x00000000001a942c: test byte ptr [rdx + 0x69e00001], dh; cmc; call rcx; 
0x00000000000962cd: test byte ptr [rdx + 0xffffffd], dh; mov dh, 0x45; ret 0x8349; 
0x0000000000126a82: test byte ptr [rdx + 1], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x58]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x00000000000323cd: test byte ptr [rdx + 1], cl; add byte ptr [rax], al; movsxd rdi, r12d; mov eax, 3; syscall; 
0x00000000000f5fc9: test byte ptr [rdx + 7], bl; add byte ptr [rax], al; xor esi, esi; mov rdi, r14; call rbx; 
0x00000000000f658f: test byte ptr [rdx + rax - 0x9cf0000], dh; mov rdi, r15; call rbx; 
0x00000000000c65a7: test byte ptr [rdx - 0x76fffffd], dl; ret 0x8349; 
0x00000000000746f9: test byte ptr [rdx], ah; add dword ptr [rax], eax; add byte ptr [rsi - 0x70], ah; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000000a60f1: test byte ptr [rdx], ah; add eax, 0x7c830000; and al, 8; adc byte ptr [rcx + 0xf], al; xchg eax, esp; ret 0xf983; 
0x00000000000a8ce5: test byte ptr [rdx], ah; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000001b65ed: test byte ptr [rdx], al; add byte ptr [rax], dl; push rdi; call qword ptr [rcx]; 
0x0000000000093244: test byte ptr [rdx], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000113c06: test byte ptr [rdx], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4104; 
0x0000000000045b26: test byte ptr [rdx], bl; out 0xff, al; dec dword ptr [rax + 0x39]; ret; 
0x000000000004e9d9: test byte ptr [rdx], dl; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x558], 1; jmp rax; 
0x0000000000028e80: test byte ptr [rdx], dl; add eax, dword ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x00000000001b65ec: test byte ptr [rdx], r8b; add byte ptr [rax], dl; push rdi; call qword ptr [rcx]; 
0x00000000000cb75e: test byte ptr [rip + 0x2f84ad], 0x80; lea rax, qword ptr [rip - 0x4c]; lea rdx, qword ptr [rip - 0x123]; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000c5309: test byte ptr [rip + 0x31ffffff], bh; fisttp dword ptr [rax - 0x77]; fmul dword ptr [rcx + 3]; adc byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000013203c: test byte ptr [rip + 0x48ffffff], ch; movsxd rdi, ebx; mov eax, 3; syscall; 
0x0000000000021a17: test byte ptr [rip + 0x5b000001], dl; pop rbp; pop r12; ret; 
0x00000000000caccb: test byte ptr [rip - 0x74000001], dh; mov byte ptr [r9 - 0x77], r8b; ret 0xdb84; 
0x00000000000428dd: test byte ptr [rip - 0x76ffffff], bl; ret; 
0x00000000000e6466: test byte ptr [rip - 0x7a000001], ah; fisttp dword ptr [rdi]; xchg eax, ebp; ret; 
0x0000000000097e7a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000085fad: test byte ptr [rsi + 0x4c000000], al; mov edi, edi; mov rdx, rbx; mov rsi, r13; call rax; 
0x00000000000f5bdd: test byte ptr [rsi + 0xa], ch; add byte ptr [rax], al; xor esi, esi; mov rdi, r12; call rbx; 
0x000000000008550d: test byte ptr [rsi + 1], bl; add byte ptr [rax], al; mov rdx, r12; mov rdi, r15; call rax; 
0x00000000001a502c: test byte ptr [rsi + 1], ch; add byte ptr [rax + 0x6e], ah; hlt; jmp qword ptr [rcx]; 
0x00000000001b402c: test byte ptr [rsi + 2], bl; add al, ah; mov dh, bh; call qword ptr [rdx]; 
0x00000000000852fd: test byte ptr [rsi], ch; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; call rax; 
0x00000000000a70c4: test byte ptr [rsi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000048e06: test byte ptr [rsp + rax], al; add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x00000000000d9282: test byte ptr [rsp + rcx*8], ah; add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax], al; add al, ch; jmp qword ptr [rcx - 0xc]; 
0x000000000018dbbc: test ch, bl; add al, byte ptr [rax]; and al, 0xbb; cli; jmp rsp; 
0x000000000002c208: test ch, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; mov eax, 3; syscall; 
0x000000000007888e: test ch, bl; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x830f; 
0x00000000001967f5: test ch, ch; jmp qword ptr [rdx]; 
0x00000000000eea26: test ch, cl; add byte ptr [rax], al; add byte ptr [rbx - 0x7acfdb84], cl; dec dword ptr [rdi]; xchg eax, esp; ret 0x7c83; 
0x00000000001ad865: test ch, dh; jmp qword ptr [rdx]; 
0x00000000000c23f6: test ch, dl; add byte ptr [rax], al; add byte ptr [rax + 0x7f], bh; ret; 
0x000000000010c227: test cl, bh; call qword ptr [rax - 0x18]; 
0x0000000000121704: test cl, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbx]; 
0x00000000000e22a2: test cl, bl; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rdi + 0xf], 0xb6; xor byte ptr [rax - 0x77], cl; ret 0xf980; 
0x0000000000189d10: test cl, ch; out dx, eax; call rsp; 
0x000000000004b6ec: test cl, dh; add al, byte ptr [rax]; add byte ptr [rax - 0x50743], al; call qword ptr [rbx + 0xf]; 
0x0000000000094682: test dh, al; add dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000025865: test dh, dh; mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x00000000000ac231: test dh, dl; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x00000000001b3f30: test dil, sil; jmp qword ptr [rdx + 2]; 
0x0000000000102be1: test dl, ah; add byte ptr [rax], al; add dh, dh; ret; 
0x000000000018d7ac: test dl, al; add al, byte ptr [rax]; cli; call rsp; 
0x00000000000210ce: test dl, bl; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x894c; 
0x000000000009748e: test dl, dl; cmovne rax, rdi; ret; 
0x000000000004e983: test dword ptr [rax + 0x1fffffa], edi; add byte ptr [rax], al; add bh, al; test dword ptr [rdx + rdi*8 + 0x1ffff], edx; add byte ptr [rax], al; jmp rax; 
0x000000000004ed6b: test dword ptr [rax + 0x1fffffa], edi; add byte ptr [rax], al; add bh, al; test dword ptr [rdx + rdi*8 + 0xffff], edx; add byte ptr [rax], al; jmp rax; 
0x000000000010a8c8: test dword ptr [rax + 0x29], 0x89c701c8; ret 0x850f; 
0x000000000007c8c5: test dword ptr [rax + 0x34], 0x96850f00; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; adc eax, 0x3440f2; add dword ptr [rip + 0x3440e7], 1; ret; 
0x000000000008ca49: test dword ptr [rax + 0x48fffffb], edi; mov eax, edi; ret; 
0x00000000000e2d1c: test dword ptr [rax + 0xf000000], esp; xchg eax, ebp; ret 0xe2c1; 
0x0000000000138eaf: test dword ptr [rax + 0xf], 0x2949d2bc; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000000634dd: test dword ptr [rax + 0xfffffee], edi; test dword ptr [rdi + rax*8 + 0x6ae9ffff], esi; ret 0xffff; 
0x000000000009da8b: test dword ptr [rax + 4], edx; add byte ptr [rax], al; ret; 
0x000000000015e433: test dword ptr [rax + 6], ebp; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000009ef9b: test dword ptr [rax + 7], edx; add byte ptr [rax], al; ret; 
0x000000000009ee9b: test dword ptr [rax + 8], edx; add byte ptr [rax], al; ret; 
0x00000000000e1e7e: test dword ptr [rax + rax - 0x6b750000], esp; and al, 0xa4; add byte ptr [rax], al; add byte ptr [rcx], bh; ret 0x8f0f; 
0x0000000000047e37: test dword ptr [rax + rdi*8 - 0x49f00001], eax; add dword ptr [r8 - 0x7d], ecx; ret; 
0x000000000004dd21: test dword ptr [rax - 0x16000006], ebx; ret; 
0x00000000000f686e: test dword ptr [rax - 0x41000004], ebp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x000000000005fa66: test dword ptr [rax - 0x75], 0xffef08b5; dec dword ptr [rcx - 0x3f]; cli; add cl, byte ptr [rcx + rcx*4 - 0x2e]; mov qword ptr [rbp - 0x10e0], r10; call qword ptr [rax + 0x38]; 
0x000000000006a63b: test dword ptr [rax - 0x76000002], ebx; ret; 
0x00000000000f46f5: test dword ptr [rax - 0x77], 0xca8948d6; mov r10, r8; mov r8, r9; mov r9, qword ptr [rsp + 8]; syscall; 
0x0000000000054e22: test dword ptr [rax - 0x7c000002], eax; ret 0x8908; 
0x000000000004bf1f: test dword ptr [rax - 0x7c000005], esi; ret 0x8908; 
0x000000000004bf8f: test dword ptr [rax - 0x7c000005], esi; ret 0x8910; 
0x00000000000d94e0: test dword ptr [rax - 0x7d], 0x394101c0; ret 0xda7f; 
0x000000000015e8eb: test dword ptr [rax - 0x7fffffff], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x00000000000c3619: test dword ptr [rax - 0x8ffffff], esp; ret; 
0x00000000000c4b1f: test dword ptr [rax - 0x900000c], eax; ret; 
0x00000000000f3209: test dword ptr [rax - 0xe89fe07], 0x7420fa80; in al, dx; mov byte ptr [r9 - 1], 0; ret; 
0x00000000000c0b43: test dword ptr [rax], 0x7c8b0000; and al, 0xc; movsxd r10, ecx; syscall; 
0x000000000008616d: test dword ptr [rax], 0x89480000; fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, r12; call rax; 
0x00000000001903e4: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0xe], dl; adc byte ptr [rbx + 0xa4c0202], al; ret; 
0x00000000000eb137: test dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000000838c2: test dword ptr [rax], eax; add rax, r13; jmp rax; 
0x00000000001335a2: test dword ptr [rax], ebp; add byte ptr [rax - 0x77], cl; adc eax, 0x28c2e4; add rsp, 8; ret; 
0x0000000000133597: test dword ptr [rax], ebp; add byte ptr [rbp + 0x480e74c0], al; lea edx, dword ptr [rip + 0x28853b]; mov qword ptr [rip + 0x28c2e4], rdx; add rsp, 8; ret; 
0x00000000001b7508: test dword ptr [rax], ecx; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000035885: test dword ptr [rax], edi; add byte ptr [rbp - 1], bh; mov dword ptr fs:[rax], 0x16; mov rdi, rbx; mov eax, 3; syscall; 
0x000000000015e88b: test dword ptr [rax], edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000133596: test dword ptr [rax], r13d; add byte ptr [rbp + 0x480e74c0], al; lea edx, dword ptr [rip + 0x28853b]; mov qword ptr [rip + 0x28c2e4], rdx; add rsp, 8; ret; 
0x00000000000838c1: test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x000000000005ec42: test dword ptr [rbp + 0x29], 0xe5894dfc; sar r13, 2; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000006fe70: test dword ptr [rbp + 0x5b000000], edx; mov eax, ebp; pop rbp; pop r12; ret; 
0x00000000000919cf: test dword ptr [rbp - 0xc000004], esp; ret; 
0x0000000000096f1e: test dword ptr [rbp], edi; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000133789: test dword ptr [rbx + 0x48000001], edx; add esp, 8; ret; 
0x0000000000001b0e: test dword ptr [rbx + 0x59e7c8ee], esi; pop rbx; ret 0x2a63; 
0x00000000000a2a80: test dword ptr [rbx + 1], ecx; add byte ptr [rax], al; ret; 
0x00000000000a3378: test dword ptr [rbx + 1], esp; add byte ptr [rax], al; lea rax, qword ptr [rdi - 0x10]; ret; 
0x000000000015a408: test dword ptr [rbx + 2], eax; add byte ptr [rax], al; ret; 
0x000000000015a3e8: test dword ptr [rbx + 2], esp; add byte ptr [rax], al; ret; 
0x000000000015a300: test dword ptr [rbx + 3], ecx; add byte ptr [rax], al; ret; 
0x000000000009f090: test dword ptr [rbx + 6], ebx; add byte ptr [rax], al; ret; 
0x0000000000160b17: test dword ptr [rbx + 7], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000015e797: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x0000000000160f66: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000135220: test dword ptr [rbx + rax], ebp; add byte ptr [rax - 0x75], cl; add eax, 0x28a664; call qword ptr [rax]; 
0x000000000015e737: test dword ptr [rbx + rax], esp; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000136255: test dword ptr [rbx + rcx*4 + 0xa], 0x4de2894c; add ecx, ebx; call rax; 
0x00000000000cf8e8: test dword ptr [rbx - 0x16000009], eax; push rax; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000002b5f: test dword ptr [rbx - 0x2e], ebp; cmp dl, byte ptr [rdi]; ret; 
0x00000000000f672e: test dword ptr [rbx - 0x41000008], ebx; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x00000000000f692e: test dword ptr [rbx - 0x4100000a], edi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x0000000000144413: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000014c6b3: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x0000000000096e88: test dword ptr [rbx], eax; add dword ptr [rax], eax; add byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x00000000000fb750: test dword ptr [rbx], ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000587f2: test dword ptr [rbx], ebp; ret; 
0x00000000000fc773: test dword ptr [rbx], ebx; sub al, 0; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x000000000008402a: test dword ptr [rcx + 0x3100000e], eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000008bd7a: test dword ptr [rcx + 0x48000000], esi; xor eax, eax; ret; 
0x000000000013375c: test dword ptr [rcx + 0x48000001], esp; mov eax, dword ptr [rip + 0x28c128]; call qword ptr [rax]; 
0x000000000008c760: test dword ptr [rcx + 0x48fffffe], esp; mov eax, edi; ret; 
0x00000000000be6c5: test dword ptr [rcx + 0x64000001], edi; mov dword ptr [rdx], esi; add rsp, 0x18; ret; 
0x00000000001337d2: test dword ptr [rcx + 1], ebp; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x28c0b2]; mov rsi, r9; mov rdi, r8; call qword ptr [rax + 8]; 
0x000000000015a10a: test dword ptr [rcx + 5], eax; add byte ptr [rax], al; ret; 
0x0000000000160aed: test dword ptr [rcx + 7], esi; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000009d672: test dword ptr [rcx + 8], ebp; add byte ptr [rax], al; ret; 
0x00000000001609fd: test dword ptr [rcx + 8], esp; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000160929: test dword ptr [rcx + 9], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000016090d: test dword ptr [rcx + 9], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000000a2ac7: test dword ptr [rcx + rax], eax; add byte ptr [rax], al; ret; 
0x0000000000164047: test dword ptr [rcx + rax], edx; add byte ptr [rax], al; ret; 
0x00000000000a2a97: test dword ptr [rcx + rax], esi; add byte ptr [rax], al; ret; 
0x0000000000121fa2: test dword ptr [rcx + rcx*4 - 0x1e], 0xe8e5014c; ret 0xf6f6; 
0x00000000000f66ae: test dword ptr [rcx - 0x41000006], eax; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x00000000001333ea: test dword ptr [rcx - 0x75], ecx; sub byte ptr [r8 - 0x77], r9b; ret 0x8948; 
0x00000000001465d5: test dword ptr [rcx], 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018b8dd: test dword ptr [rcx], 0xf703e400; inc esp; test dword ptr [rcx], 0xf704a400; jmp rsp; 
0x000000000018b8e5: test dword ptr [rcx], 0xf704a400; jmp rsp; 
0x00000000000c42e5: test dword ptr [rcx], 0xfa800000; jnp 0xc42fc; xchg eax, esp; ret 0xb60f; 
0x000000000005f13b: test dword ptr [rcx], edx; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x10f8], 1; jmp rax; 
0x000000000005f322: test dword ptr [rcx], edx; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x113c], 1; jmp rax; 
0x0000000000082acd: test dword ptr [rdi + 0x48000022], eax; mov eax, ebx; pop rbx; ret; 
0x000000000008c94a: test dword ptr [rdi + 0x48fffffc], esi; mov eax, edi; ret; 
0x00000000000be853: test dword ptr [rdi + 0x64000000], esp; mov dword ptr [rdx], r8d; add rsp, 0x40; mov eax, esi; pop rbx; ret; 
0x00000000000634e3: test dword ptr [rdi + rax*8 + 0x6ae9ffff], esi; ret 0xffff; 
0x00000000000375b3: test dword ptr [rdi + rax*8], edx; setne al; movzx eax, al; ret; 
0x000000000009d7d7: test dword ptr [rdi + rax], eax; add byte ptr [rax], al; ret; 
0x000000000009d7b7: test dword ptr [rdi + rax], esp; add byte ptr [rax], al; ret; 
0x00000000000fc277: test dword ptr [rdi + rdi*8 - 1], eax; dec dword ptr [rcx + rcx*4 - 0x31]; mov eax, 3; syscall; 
0x00000000000f66ee: test dword ptr [rdi - 0x41000004], edi; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r13; call rbx; 
0x00000000000917e5: test dword ptr [rdi - 0xc000002], ecx; ret; 
0x0000000000137eca: test dword ptr [rdi], 0x441f; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000037816: test dword ptr [rdi], eax; setne al; movzx eax, al; ret; 
0x000000000003c950: test dword ptr [rdx + 0x48000001], ebp; add esp, 8; ret; 
0x0000000000133808: test dword ptr [rdx + 1], edx; add byte ptr [rax], al; mov eax, edx; add rsp, 8; ret; 
0x000000000015e859: test dword ptr [rdx + 2], eax; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000015e829: test dword ptr [rdx + 2], esi; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x000000000009d971: test dword ptr [rdx + 5], ebp; add byte ptr [rax], al; ret; 
0x0000000000160b2b: test dword ptr [rdx + 7], ecx; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000160a29: test dword ptr [rdx + 8], esp; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000009ed79: test dword ptr [rdx + 9], esi; add byte ptr [rax], al; ret; 
0x000000000007c913: test dword ptr [rdx + rax], ebp; add bl, dh; ret; 
0x0000000000161e62: test dword ptr [rdx + rax], edi; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000160832: test dword ptr [rdx + rcx], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000004e841: test dword ptr [rdx + rdi*8 + 0x1ffff], eax; add byte ptr [rax], al; jmp rax; 
0x000000000004baa8: test dword ptr [rdx + rdi*8 + 0x1ffff], ebp; add byte ptr [rax], al; jmp rax; 
0x000000000004e98d: test dword ptr [rdx + rdi*8 + 0x1ffff], edx; add byte ptr [rax], al; jmp rax; 
0x000000000004ed75: test dword ptr [rdx + rdi*8 + 0xffff], edx; add byte ptr [rax], al; jmp rax; 
0x000000000015ee09: test dword ptr [rdx - 0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi + 0x66]; 
0x00000000000f67ce: test dword ptr [rdx - 0x41000006], ebp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r14; call rbx; 
0x00000000000f68ee: test dword ptr [rdx - 0x41000007], ebp; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r15; call rbx; 
0x00000000000a3689: test dword ptr [rdx - 0x7b000000], eax; sal byte ptr [rax + rbx + 0x49], 0x83; ret 0x4908; 
0x000000000015e711: test dword ptr [rdx - 0x7ffffffd], ecx; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000015e6e9: test dword ptr [rdx - 0x7ffffffd], esi; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000015e7f9: test dword ptr [rdx - 0x7ffffffe], esp; cmp byte ptr [rcx], al; sbb rax, -1; ret; 
0x000000000015a3c7: test dword ptr [rdx], eax; add byte ptr [rax], al; ret; 
0x000000000013384f: test dword ptr [rdx], ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x28c035; mov rdi, rdx; call qword ptr [rax + 0x20]; 
0x000000000015e769: test dword ptr [rdx], esi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x0000000000133883: test dword ptr [rip + 0x48000001], edx; mov eax, edx; add rsp, 8; ret; 
0x0000000000070662: test dword ptr [rip + 0x5b000001], ecx; pop rbp; mov eax, edx; pop r12; ret; 
0x00000000000ee386: test dword ptr [rip - 0x76ffffff], edi; sal dword ptr [rcx], 1; rol cl, 0xe9; add esi, esi; ret 0xf304; 
0x000000000006ea3c: test dword ptr [rsi + 0x48000000], ebx; add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000000a341d: test dword ptr [rsi + 0x48000000], edi; lea eax, dword ptr [rdi - 0x10]; ret; 
0x0000000000134e95: test dword ptr [rsi + 0x48000000], esi; mov eax, dword ptr [rip + 0x28a9ef]; xor ebp, ebp; call qword ptr [rax + 0x28]; 
0x000000000007c8ca: test dword ptr [rsi + 0x48000002], edx; mov dword ptr [rip + 0x3440f2], edx; add dword ptr [rip + 0x3440e7], 1; ret; 
0x0000000000096ead: test dword ptr [rsi + 0x66000000], edi; pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret; 
0x00000000001639d2: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000009d795: test dword ptr [rsi + 7], eax; add byte ptr [rax], al; ret; 
0x000000000009d775: test dword ptr [rsi + 7], esp; add byte ptr [rax], al; ret; 
0x000000000009d68d: test dword ptr [rsi + 8], ecx; add byte ptr [rax], al; ret; 
0x0000000000068186: test dword ptr [rsi + rdi*8 + 0x20e9ffff], eax; ret; 
0x00000000000f6657: test dword ptr [rsi - 0x4100000b], eax; add eax, dword ptr [rax]; add byte ptr [rax], al; mov rdi, r12; call rbx; 
0x0000000000091ace: test dword ptr [rsi - 0xc000005], esp; ret; 
0x000000000006f853: test dword ptr [rsi - 0xcfffffc], esp; ret; 
0x00000000000f66ce: test dword ptr [rsi*8 + 0x3beffff], esi; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rbx; 
0x000000000007e466: test dword ptr [rsi], eax; add byte ptr [rax], al; mov rax, r8; ret; 
0x00000000000b2109: test dword ptr [rsi], edi; or dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; add eax, 0x311d03; add rsp, 8; ret; 
0x000000000011b155: test dword ptr [rsi], edx; add al, byte ptr [rax]; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000160d38: test dword ptr [rsi], esp; add eax, 0xc0310000; ret; 
0x0000000000128754: test dword ptr [rsp + rdi*8 - 1], edi; jmp qword ptr [rsi - 0x7d]; 
0x0000000000164b3a: test eax, 0x1f0fffeb; add bl, dh; ret; 
0x00000000000fc0c6: test eax, 0x40ba; add byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r9; mov eax, 0x14; syscall; 
0x00000000001211d3: test eax, 0x480029c9; mov eax, dword ptr [rdx + rax*8]; jmp rax; 
0x0000000000107d93: test eax, 0x48002bc1; ror eax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000036b43: test eax, 0x480038d4; mov esi, esp; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000c2c23: test eax, 0x48fffdef; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x000000000011edf3: test eax, 0x5b002a48; ret; 
0x00000000000376bb: test eax, 0x64003867; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000175c20: test eax, 0x7d4c8c5d; ret 0xd8f; 
0x000000000014a866: test eax, 0x7f0f41f3; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000176952: test eax, 0x80a72de5; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000000f4baa: test eax, 0x8548fff2; ror byte ptr [rax - 0x77], 3; setne al; movzx eax, al; pop rbx; ret; 
0x000000000006bbf3: test eax, 0x89000088; ret; 
0x0000000000187795: test eax, 0xa8a0fffc; cld; call qword ptr [rax]; 
0x000000000018642d: test eax, 0xa9e6fffd; std; jmp qword ptr [rsi - 0x56]; 
0x0000000000179c76: test eax, 0xc3fffb00; add dh, bh; jmp rdi; 
0x00000000000af116: test eax, 0xe2058d48; ret 0x30; 
0x000000000013d5e2: test eax, 0xe3c4c9eb; jns 0x13d64c; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000013ddc2: test eax, 0xe3c4c9eb; jns 0x13de2c; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000134e9e: test eax, 0xed310028; call qword ptr [rax + 0x28]; 
0x00000000001890b9: test eax, 0xf4acffee; add byte ptr [rax], al; mov ah, 0xa9; out dx, al; jmp rsp; 
0x00000000000a1598: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x000000000010c7c1: test eax, 0xffff27e9; jmp qword ptr [rsi + 0xf]; 
0x00000000000cce0d: test eax, eax; cmove rax, qword ptr [rbp - 0xa8]; mov rdi, rax; call rbx; 
0x00000000000cb638: test eax, eax; cmove rdx, qword ptr [rsp]; add rsp, 0x18; mov rax, rdx; ret; 
0x0000000000094553: test eax, eax; cmove rdx, rbx; mov rax, rdx; pop rbx; ret; 
0x00000000000b132d: test eax, eax; cmovne rdx, rax; add rsp, 0x28; mov rax, rdx; ret; 
0x000000000010acd1: test eax, eax; cmovne rdx, rax; mov qword ptr [rip + 0x2b7ae2], rdx; pop rbp; ret; 
0x0000000000107a71: test eax, eax; cmovne rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000000f1aa6: test eax, eax; cmovns edx, dword ptr [rsp]; add rsp, 0x18; mov eax, edx; ret; 
0x00000000000f2222: test eax, eax; jns 0xf2229; mov byte ptr [rbx], 0; mov rax, rbx; pop rbx; ret; 
0x00000000000f4bae: test eax, eax; mov qword ptr [rbx], rax; setne al; movzx eax, al; pop rbx; ret; 
0x000000000005db40: test eax, eax; sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x00000000000ecdec: test eax, eax; sete al; add rsp, 0x48; movzx eax, al; ret; 
0x00000000000465b0: test eax, eax; sete al; add rsp, 8; movzx eax, al; ret; 
0x0000000000022c9f: test eax, eax; setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000122919: test eax, eax; setne al; add rsp, 8; movzx eax, al; ret; 
0x000000000005db77: test eax, eax; setne al; movzx eax, al; neg eax; pop rbx; ret; 
0x000000000007968e: test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x0000000000079591: test eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000015e6c3: test eax, ebx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000015e8bb: test eax, esp; add dword ptr [rax], eax; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000010dba8: test ebp, eax; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 + 0x32], ah; add rsp, 0x18; ret; 
0x000000000015ecde: test ebp, ebp; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000019683d: test ebp, ebp; jmp qword ptr [rdx]; 
0x00000000001609be: test ebp, ecx; or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000082af8: test ebp, edx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000001aa021: test ebp, esi; call qword ptr [rsi + 6]; 
0x000000000008bce0: test ebx, ebp; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000001338bc: test ebx, edi; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x28bfc8; call qword ptr [rax + 0x28]; 
0x000000000015e6a0: test ebx, edi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x000000000003cad1: test ebx, esp; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; and al, 0xc; add rsp, 0x18; ret; 
0x00000000000318f7: test ebx, esp; cmp byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000d40c6: test ecx, eax; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x4c01; 
0x0000000000162182: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000103db5: test ecx, ecx; jns 0x103d88; mov eax, edx; sub eax, r9d; ret; 
0x0000000000103d04: test ecx, ecx; jns 0x103d90; sub ecx, eax; mov eax, ecx; ret; 
0x0000000000103f37: test ecx, ecx; jns 0x103f6e; mov eax, r8d; sub eax, r9d; ret; 
0x0000000000189b90: test ecx, edx; out dx, eax; dec dword ptr [rbx + rsi + 1]; add byte ptr [rcx + rdx*8 + 0x3394ffef], ah; add dword ptr [rax], eax; ret; 
0x00000000001af1a4: test ecx, esp; cmc; jmp qword ptr [rdx]; 
0x00000000000ff871: test edx, eax; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000e6f91: test edx, ebp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4802; 
0x00000000001911a9: test edx, ebp; jmp qword ptr [rbx + 3]; 
0x0000000000187eb1: test edx, ebp; jmp rsp; 
0x000000000015ed01: test edx, ecx; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000015e7c9: test edx, edx; add al, byte ptr [rax]; add byte ptr [rax - 0x7cb7fec8], al; fdivr st(7); ret; 
0x00000000000721f7: test edx, edx; cli; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x00000000000f7fef: test edx, edx; cmovne eax, edx; ret; 
0x0000000000048777: test edx, edx; cmovns eax, edx; pop rbx; ret; 
0x0000000000036bcf: test edx, edx; cmovns rax, qword ptr [rsp + 0xa0]; add rsp, 0x148; ret; 
0x0000000000036dcc: test edx, edx; jns 0x36de0; add rsp, 0xd0; ret; 
0x000000000003797a: test edx, edx; sete al; ret; 
0x000000000012d557: test edx, edx; setne al; mov qword ptr [rsp], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x00000000001295d1: test edx, edx; setne al; neg eax; add rsp, 0x20; pop rbx; ret; 
0x00000000000ff941: test edx, esi; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000000e44b1: test esi, 0x16b8ff80; add byte ptr [rax], al; add byte ptr [rsp + rax - 0xd], dh; ret; 
0x0000000000082be5: test esi, ebp; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; ret; 
0x0000000000162175: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x00000000000c116d: test esp, 0xd8f7002f; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000016218f: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000018724d: test esp, edi; call qword ptr [rax - 0x7b]; 
0x00000000001871d1: test esp, edi; call rsp; 
0x0000000000187251: test esp, edi; inc eax; mov edi, esp; call qword ptr [rax - 0x75]; 
0x0000000000187251: test esp, edi; inc eax; mov edi, esp; call qword ptr [rax - 0x75]; cld; jmp rax; 
0x0000000000187051: test esp, edi; jmp qword ptr [rax]; 
0x0000000000178281: test esp, edi; push rax; xchg ah, bh; call qword ptr [rax]; 
0x00000000000f3208: test qword ptr [rax - 0xe89fe07], 0x7420fa80; in al, dx; mov byte ptr [r9 - 1], 0; ret; 
0x0000000000144412: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x00000000000375b2: test qword ptr [rdi + rax*8], rdx; setne al; movzx eax, al; ret; 
0x0000000000037815: test qword ptr [rdi], rax; setne al; movzx eax, al; ret; 
0x0000000000103db4: test r9d, r9d; jns 0x103d88; mov eax, edx; sub eax, r9d; ret; 
0x0000000000103f36: test r9d, r9d; jns 0x103f6e; mov eax, r8d; sub eax, r9d; ret; 
0x00000000000cce0c: test rax, rax; cmove rax, qword ptr [rbp - 0xa8]; mov rdi, rax; call rbx; 
0x0000000000094552: test rax, rax; cmove rdx, rbx; mov rax, rdx; pop rbx; ret; 
0x00000000000b132c: test rax, rax; cmovne rdx, rax; add rsp, 0x28; mov rax, rdx; ret; 
0x000000000010acd0: test rax, rax; cmovne rdx, rax; mov qword ptr [rip + 0x2b7ae2], rdx; pop rbp; ret; 
0x0000000000107a70: test rax, rax; cmovne rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000000f4bad: test rax, rax; mov qword ptr [rbx], rax; setne al; movzx eax, al; pop rbx; ret; 
0x000000000005db3f: test rax, rax; sete al; add rsp, 0x18; movzx eax, al; neg eax; ret; 
0x0000000000025864: test sil, sil; mov eax, 0xffffffff; cmovns eax, edx; ret; 
0x0000000000002b5e: test word ptr [rbx - 0x2e], bp; cmp dl, byte ptr [rdi]; ret; 
0x000000000014a718: ud2; lea r11, qword ptr [rip + 0x3c42f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001aa645: vaddps xmm10, xmm15, xmm13; cmc; jmp qword ptr [rsi]; 
0x0000000000082dee: verw cx; mov r9b, 0xff; jmp qword ptr [rsi + 0x66]; 
0x0000000000136e73: vminsd xmm15, xmm4, qword ptr [rax - 1]; pop r12; ret; 
0x00000000000aec51: vminsd xmm8, xmm4, qword ptr [rcx + 0x5c]; mov eax, r13d; pop r13; ret; 
0x000000000007a727: vminsd xmm8, xmm4, qword ptr [rcx + 0x5c]; ret; 
0x0000000000021b1d: vmptrst qword ptr [rcx]; add byte ptr [rcx + 0x5c], al; ret; 
0x0000000000036655: vmread qword ptr [rax], rdi; add byte ptr [rdi + rax*8], ah; and al, byte ptr [rax]; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000012ca36: vpandn xmm5, xmm14, xmm0; ret 0xfbf3; 
0x00000000000aed35: vsubpd xmm8, xmm7, xmmword ptr [rcx + rcx*4 - 0x18]; pop r13; pop r14; ret; 
0x00000000000ff999: wait; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000012f1f7: wait; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000001a7cad: wait; add dword ptr [rax], eax; jo 0x1a7ce1; cmc; jmp qword ptr [rcx]; 
0x00000000001a7cc5: wait; add dword ptr [rax], eax; mov byte ptr [rdi], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001a7d6d: wait; add dword ptr [rax], eax; nop; xor ch, dh; jmp qword ptr [rcx]; 
0x00000000001a7d9d: wait; add dword ptr [rax], eax; sal byte ptr [rax], 0xf5; jmp qword ptr [rax]; 
0x00000000001a7d85: wait; add dword ptr [rax], eax; test al, 0x30; cmc; jmp qword ptr [rcx]; 
0x000000000018a985: wait; add dword ptr [rax], eax; test byte ptr [rdi - 0xd], bh; call rsp; 
0x00000000001a7d55: wait; add dword ptr [rax], eax; xor bpl, sil; jmp qword ptr [rax]; 
0x00000000001a7d3d: wait; add dword ptr [rax], eax; xor byte ptr [rax], dh; cmc; jmp qword ptr [rcx]; 
0x000000000014d547: wait; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000004c9ab: wait; call qword ptr [rdx]; 
0x00000000001ae7f5: wait; cmc; jmp qword ptr [rdx]; 
0x00000000001793c9: wait; hlt; call qword ptr [rbx - 0x65]; 
0x00000000001794a9: wait; hlt; call qword ptr [rcx]; 
0x00000000001794cd: wait; hlt; call rbx; 
0x0000000000179591: wait; hlt; call rdi; 
0x0000000000179591: wait; hlt; call rdi; popfq; hlt; jmp rcx; 
0x00000000001793d1: wait; hlt; call rsi; 
0x00000000001793c5: wait; hlt; dec dword ptr [rcx - 0x65]; hlt; call qword ptr [rbx - 0x65]; 
0x00000000001794c9: wait; hlt; dec ecx; wait; hlt; call rbx; 
0x0000000000179541: wait; hlt; inc dword ptr [rdi]; popfq; hlt; call qword ptr [rcx]; 
0x00000000001794ed: wait; hlt; jmp qword ptr [rbx]; 
0x00000000001794d5: wait; hlt; jmp rdi; 
0x00000000001797d9: wait; hlt; lcall ptr [rax - 0x67000b65]; wait; hlt; call rsi; 
0x00000000001793cd: wait; hlt; lcall ptr [rdi - 0x65]; hlt; call rsi; 
0x00000000001797bd: wait; hlt; ljmp ptr [rax]; wait; hlt; call rsi; 
0x00000000001794a5: wait; hlt; ljmp ptr [rcx - 0x65]; hlt; call qword ptr [rcx]; 
0x0000000000179791: wait; hlt; ljmp ptr [rcx - 0x65]; hlt; call rsi; 
0x0000000000195799: wait; in eax, dx; call qword ptr [rdi + 0x4000001]; 
0x000000000009fd75: wait; mov dword ptr [rip + 0xc634900], ecx; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e295: wait; movabs byte ptr [0x8d49930c6349000d], al; or al, 0xb; jmp rcx; 
0x000000000009ea3b: wait; or eax, 0xc634900; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000188fb1: wait; out dx, al; jmp rsp; 
0x00000000000b42f4: wait; xor byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b4274: wait; xor byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a0e4d: wrmsr; in eax, dx; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000a0ecf: wrmsr; in eax, dx; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000a0fd1: wrmsr; in eax, dx; mov byte ptr [rdi + 0x1f], ch; ret; 
0x0000000000002bb0: xabort -0xd; ret; 
0x0000000000047fc6: xchg ah, al; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000000f19de: xchg ah, al; sub al, 0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, rdi; ret; 
0x0000000000178285: xchg ah, bh; call qword ptr [rax]; 
0x0000000000178285: xchg ah, bh; call qword ptr [rax]; mov ah, bh; push qword ptr [rax]; mov esp, edi; call qword ptr [rax - 0x76]; 
0x00000000001870c5: xchg ah, bh; call qword ptr [rsi - 0x7a]; 
0x00000000001870c5: xchg ah, bh; call qword ptr [rsi - 0x7a]; cld; jmp rsi; 
0x0000000000187149: xchg ah, bh; call rdx; 
0x0000000000187145: xchg ah, bh; inc dword ptr [rdx - 0x7a]; cld; call rdx; 
0x00000000001870c9: xchg ah, bh; jmp rsi; 
0x0000000000137cbf: xchg ah, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001384e3: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000139e2f: xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001378af: xchg ah, ch; add eax, 0x83480000; ret 0xeb10; 
0x0000000000147b46: xchg ah, ch; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001385d3: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001383f3: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001373bb: xchg al, ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000007c532: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rsi - 1]; call qword ptr [rax + 0x18]; 
0x000000000002e9eb: xchg al, bl; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8b41; 
0x0000000000137bcb: xchg al, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000012443d: xchg al, dl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x19], cl; call qword ptr [rax + 0x20]; 
0x000000000013ddcc: xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000013d5ec: xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000013d9dc: xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d1fc: xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000000adc94: xchg bh, cl; add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x894c; 
0x000000000013fcfd: xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000035a5d: xchg bl, al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000013e801: xchg bl, cl; adc eax, 0x83480000; ret 0xe910; 
0x000000000013fa01: xchg bl, cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013f101: xchg bl, cl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013f401: xchg bl, cl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013eaf9: xchg bl, dl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000004e835: xchg byte ptr [r10], r10b; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x00000000000f916f: xchg byte ptr [r8 + rax], r13b; add rsp, 8; ret; 
0x00000000001281e3: xchg byte ptr [rax + 0x48000000], dl; mov esi, dword ptr [rbp - 0x180]; mov rdi, r13; add dword ptr [rax], 1; mov rax, qword ptr [r14 + 0x60]; call qword ptr [rax + 8]; 
0x000000000014dfc6: xchg byte ptr [rax + 0x63490003], dl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000f9162: xchg byte ptr [rax + r8], r13b; mov dword ptr [rip + 0x2c8678], eax; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x0000000000138e3b: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000013a98f: xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000000f9170: xchg byte ptr [rax + rax], ch; add rsp, 8; ret; 
0x00000000000f9169: xchg byte ptr [rax + rax], ch; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000f9163: xchg byte ptr [rax + rax], ch; mov dword ptr [rip + 0x2c8678], eax; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x00000000000f915d: xchg byte ptr [rax + rax], ch; mov eax, dword ptr [rip + 0x2c864e]; mov dword ptr [rip + 0x2c8678], eax; lea rax, qword ptr [rip + 0x2c8645]; add rsp, 8; ret; 
0x000000000013a16f: xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000013763f: xchg byte ptr [rax + rcx], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000013994f: xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000013797f: xchg byte ptr [rax - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000138993: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000186bc8: xchg byte ptr [rax - 4], ah; call qword ptr [rsi]; 
0x0000000000137c9b: xchg byte ptr [rax], al; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000085fae: xchg byte ptr [rax], al; add byte ptr [rax], al; mov rdi, r15; mov rdx, rbx; mov rsi, r13; call rax; 
0x00000000000fae31: xchg byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000013d39b: xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000137d6b: xchg byte ptr [rax], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000014e2c6: xchg byte ptr [rbp + 0x63490003], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001969d6: xchg byte ptr [rbp + 0xd1cffed], al; ret 0xed84; 
0x000000000013a4af: xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000138123: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000139c8f: xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013946f: xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000014dcc6: xchg byte ptr [rbx + 0x63490003], dl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000013a64f: xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x0000000000137b1f: xchg byte ptr [rbx + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000138b73: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000138303: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000013730f: xchg byte ptr [rbx + rcx - 0x7cb80000], cl; ret 0xeb10; 
0x000000000014ea47: xchg byte ptr [rbx], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000035b9b: xchg byte ptr [rbx], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000014d6c6: xchg byte ptr [rcx + 0x63490003], bl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000138d53: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000129376: xchg byte ptr [rcx], al; add al, ch; ret 0xffd9; 
0x000000000000d040: xchg byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000018a6a5: xchg byte ptr [rcx], al; add byte ptr [rsi + rax - 0xd], ah; dec esp; xchg byte ptr [rcx], al; add byte ptr [rsi + rax - 0xd], dh; jmp rsp; 
0x000000000018a6ad: xchg byte ptr [rcx], al; add byte ptr [rsi + rax - 0xd], dh; jmp rsp; 
0x000000000008272e: xchg byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000005f223: xchg byte ptr [rcx], dl; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1114], 1; jmp rax; 
0x000000000005f09d: xchg byte ptr [rcx], dl; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1128], 1; jmp rax; 
0x000000000005f2d8: xchg byte ptr [rcx], dl; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1130], 1; jmp rax; 
0x000000000014e8c6: xchg byte ptr [rdi + 0x63490003], al; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000013770f: xchg byte ptr [rdi + rax - 0x7cb80000], cl; ret 0xeb10; 
0x00000000000c4041: xchg byte ptr [rdi - 0xa000000], bh; ret; 
0x000000000013d88c: xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d0ac: xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013e1bc: xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000008bb91: xchg byte ptr [rdx + 0x48000002], ch; add eax, edi; add rax, rcx; ret; 
0x000000000014e5c6: xchg byte ptr [rdx + 0x63490003], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000137bef: xchg byte ptr [rdx + rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000138c63: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001373df: xchg byte ptr [rdx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x00000000001397af: xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000137481: xchg byte ptr [rdx], bl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001385a5: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000117384: xchg byte ptr [rdx], ch; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000138695: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001384b5: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000004e793: xchg byte ptr [rdx], dl; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x578], 1; jmp rax; 
0x000000000004e836: xchg byte ptr [rdx], dl; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r12; mov dword ptr [rbp - 0x57c], 1; jmp rax; 
0x000000000004b9cd: xchg byte ptr [rip - 0x77cb800], al; dec dword ptr [rcx - 0x77]; ret 0x850f; 
0x000000000014d9c6: xchg byte ptr [rsi + 0x63490003], dl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001377df: xchg byte ptr [rsi + rax - 0x7cb80000], bh; ret 0xeb10; 
0x000000000019b14c: xchg byte ptr [rsi + rbp*8], bh; jmp qword ptr [rdx]; 
0x000000000013eda6: xchg byte ptr [rsi], ah; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001398e5: xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a5e5: xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013fca6: xchg byte ptr [rsi], ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013f3a6: xchg byte ptr [rsi], ah; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013f0a6: xchg byte ptr [rsi], ah; or eax, 0x83480000; ret 0x4910; 
0x00000000001afe2c: xchg byte ptr [rsi], al; mov word ptr [rip + 0x38e048d], es; pop qword ptr [rdx]; add dl, byte ptr [rsi + 0x41380e0a]; ret; 
0x00000000001aa2a8: xchg byte ptr [rsi], al; mov word ptr [rip + 0x38e048d], es; pop qword ptr [rdx]; add ecx, dword ptr [rbx + 1]; ret; 
0x000000000013a105: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013d78d: xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013ea9e: xchg byte ptr [rsi], ch; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013e0bd: xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000137a4f: xchg byte ptr [rsp + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000138213: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000194851: xchg ch, ch; call qword ptr [rbx + 1]; 
0x000000000013c13f: xchg ch, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013bf5f: xchg ch, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013c937: xchg ch, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001ad9a5: xchg ch, dh; jmp qword ptr [rdx]; 
0x000000000013b857: xchg ch, dl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013c757: xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000095354: xchg ch, dl; add al, byte ptr [rax]; add byte ptr [rbp - 0x77], cl; ret 0x894c; 
0x000000000013a925: xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000139c25: xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x0000000000139745: xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000013a445: xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x00000000000865f2: xchg dh, bh; dec dword ptr [rax - 0x77]; fistp word ptr [rbx - 0x17]; sal byte ptr [rdx - 2], cl; jmp qword ptr [rsi - 0x70]; 
0x00000000001a8ba4: xchg dh, bl; hlt; jmp qword ptr [rdx]; 
0x000000000019c141: xchg dh, ch; call qword ptr [rdi]; 
0x000000000013d8dd: xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000013d0fd: xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000001af441: xchg dh, dh; jmp rdx; 
0x00000000001374a5: xchg dh, dh; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000001383c5: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001381e5: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000187f01: xchg dl, ch; call rsp; 
0x00000000001382d5: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000001380f5: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x00000000000ef806: xchg dl, cl; stc; jmp qword ptr [rsi + 0x44]; 
0x0000000000187f00: xchg dl, r13b; call rsp; 
0x00000000000e43f9: xchg dword ptr [rax + 0x48000000], eax; mov dword ptr [rsi + 0x78], eax; xor eax, eax; ret; 
0x0000000000079492: xchg dword ptr [rax + 0x48000000], edx; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000005dca2: xchg dword ptr [rax + 0x4c000000], ecx; mov dword ptr [rax + 8], eax; mov dword ptr [rax + 4], 1; xor eax, eax; ret; 
0x00000000000a1a5b: xchg dword ptr [rax + 1], ecx; add byte ptr [rax], al; lea rsi, qword ptr [rip + 0xd6e59]; movsxd rax, dword ptr [rsi + rdi*4]; add rsi, rax; jmp rsi; 
0x000000000006d0bb: xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x00000000000a8a02: xchg dword ptr [rax + rdx - 0x7cb80000], ebx; ret; 
0x00000000000dc8eb: xchg dword ptr [rax - 0x76fffff4], esi; ret 0x8d48; 
0x000000000006750c: xchg dword ptr [rax - 0x76fffff5], ebp; ret 0x348; 
0x00000000000fac21: xchg dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000006e4c2: xchg dword ptr [rax], eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x0000000000145f45: xchg dword ptr [rax], ecx; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000023c84: xchg dword ptr [rbp + rcx*4 + 0x74], ecx; ret; 
0x00000000000adc18: xchg dword ptr [rbp - 0x507af040], eax; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000067485: xchg dword ptr [rbp - 0x76ffffe9], edx; ret 0x348; 
0x0000000000067934: xchg dword ptr [rbp - 0x76fffffd], ebp; ret 0x348; 
0x00000000000a3567: xchg dword ptr [rbp - 0x7b], eax; sal byte ptr [rbp - 0x35], 0xf3; ret; 
0x000000000002dbb7: xchg dword ptr [rbp - 0x7c000004], esi; ret 0x8901; 
0x00000000000d9892: xchg dword ptr [rbx + rbp*8 + 0x39], edi; ret 0xc189; 
0x00000000000659bd: xchg dword ptr [rbx - 0x7cfffff4], eax; ret 0x8308; 
0x000000000014e8c7: xchg dword ptr [rbx], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000105b92: xchg dword ptr [rbx], ebp; add byte ptr [rax - 0x77], cl; ret 0x2b49; 
0x000000000005c2a0: xchg dword ptr [rbx], esi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000131755: xchg dword ptr [rcx + 0x2948fff1], eax; ret; 
0x00000000001738ec: xchg dword ptr [rcx + 0x79], ecx; xchg eax, edx; ret 0xf869; 
0x00000000000e4d21: xchg dword ptr [rcx + rax], ecx; add byte ptr [rax], al; mov dword ptr [rsi], eax; xor eax, eax; ret; 
0x00000000000597d0: xchg dword ptr [rcx - 0x77000000], edi; ret 0x348; 
0x00000000000819d8: xchg dword ptr [rcx - 0x9fffffb], edi; ret; 
0x00000000001a68cd: xchg dword ptr [rcx], eax; add byte ptr [rax - 0x24], dh; hlt; call qword ptr [rax]; 
0x000000000005f05d: xchg dword ptr [rcx], edx; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; jmp rax; 
0x000000000005f185: xchg dword ptr [rcx], edx; add byte ptr [rax + 0x63], cl; add al, 0x90; add rax, r13; mov dword ptr [rbp - 0x1108], 1; jmp rax; 
0x000000000006d174: xchg dword ptr [rdi + 0x48000003], esi; lea esi, dword ptr [rip + 0x10ac74]; movsxd rcx, dword ptr [rsi + rcx*4]; add rsi, rcx; jmp rsi; 
0x00000000000e726d: xchg dword ptr [rdi + rax - 0x72b80000], esi; add eax, 0x932db; movsxd rdx, dword ptr [rax + r11*4]; add rax, rdx; jmp rax; 
0x000000000019c4fc: xchg dword ptr [rdi - 0x12], ebx; jmp qword ptr [rdx]; 
0x000000000006757e: xchg dword ptr [rdi - 0x76fffff6], esp; ret 0x348; 
0x0000000000058e92: xchg dword ptr [rdi - 0x77000000], ebp; ret 0x348; 
0x000000000006764c: xchg dword ptr [rdi - 0x7d000000], eax; ret 0x8308; 
0x00000000000f9e1c: xchg dword ptr [rdi], ebx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000d98b2: xchg dword ptr [rdi], ecx; test byte ptr [rdi], dh; add dword ptr [rax], eax; add byte ptr [rbp - 0x7cb7febd], cl; ret; 
0x00000000000f985c: xchg dword ptr [rdi], edx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000006d287: xchg dword ptr [rdx + rax - 0x72b80000], esi; or eax, 0x10ac1d; movsxd rdx, dword ptr [rcx + rdx*4]; add rcx, rdx; jmp rcx; 
0x000000000005dbdd: xchg dword ptr [rdx], eax; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x0000000000082ace: xchg dword ptr [rdx], esp; add byte ptr [rax], al; mov rax, rbx; pop rbx; ret; 
0x0000000000067853: xchg dword ptr [rip - 0x76fffffd], ecx; ret 0x348; 
0x000000000006717b: xchg dword ptr [rip - 0x7cfffffb], edi; ret 0x8308; 
0x00000000000d4545: xchg dword ptr [rsi + rdi*8 - 1], edi; jmp qword ptr [rsi + 0xf]; 
0x000000000005900b: xchg dword ptr [rsi - 0x77000000], esp; ret 0x348; 
0x00000000001a06e4: xchg dword ptr [rsi - 0xf], esi; jmp qword ptr [rdx]; 
0x0000000000173a8b: xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x0000000000059e7d: xchg dword ptr [rsp + rax], ebp; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000000dbe42: xchg dword ptr [rsp + rax], edx; add byte ptr [rcx - 0x75], al; adc al, 0x8d; add qword ptr [r8 - 0x7d], rcx; ret; 
0x0000000000143185: xchg dword ptr [rsp + rax], esi; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000013b498: xchg eax, ebp; adc eax, 0x83480000; ret 0xe910; 
0x00000000000273b9: xchg eax, ebp; add al, 0; add byte ptr [rax + 0x29], cl; ret 0x8b49; 
0x00000000000bd9b3: xchg eax, ebp; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000005ffe5: xchg eax, ebp; add byte ptr [rax], 0; add byte ptr [rcx + 1], cl; ret 0x3145; 
0x000000000006e422: xchg eax, ebp; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rcx + 0x48], 0x8b; mov edi, 0xe0; jmp rax; 
0x000000000014db47: xchg eax, ebp; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000c6224: xchg eax, ebp; add rsp, 8; lea rax, qword ptr [rbx + 8]; pop rbx; pop rbp; ret; 
0x00000000001782b1: xchg eax, ebp; cld; push qword ptr [rax - 0x6a]; cld; jmp rax; 
0x00000000001ae48d: xchg eax, ebp; cmc; jmp qword ptr [rdx]; 
0x000000000017937d: xchg eax, ebp; hlt; call rax; 
0x0000000000179385: xchg eax, ebp; hlt; call rax; xchg eax, ebp; hlt; jmp rsi; 
0x0000000000179389: xchg eax, ebp; hlt; jmp rsi; 
0x0000000000194f01: xchg eax, ebp; in eax, dx; call qword ptr [rax]; 
0x0000000000194e89: xchg eax, ebp; in eax, dx; jmp qword ptr [rax]; 
0x00000000001ace1c: xchg eax, ebp; jp 0x1ace14; jmp qword ptr [rdx]; 
0x00000000000af4f9: xchg eax, ebp; mov byte ptr [rbp - 0x3e6af040], 0x83; clc; add al, 0xf; xchg eax, ebp; ret 0xc0e9; 
0x000000000004bf28: xchg eax, ebp; movabs al, byte ptr [0x8949008b48fffffb]; add bl, ch; ret; 
0x0000000000135f13: xchg eax, ebp; out dx, al; dec dword ptr [rbx + 0x480c2444]; add esp, 0x48; ret; 
0x00000000000dfbc8: xchg eax, ebp; ret 0x2041; 
0x000000000003e77f: xchg eax, ebp; ret 0x2948; 
0x00000000000a74ff: xchg eax, ebp; ret 0x294c; 
0x00000000000b1861: xchg eax, ebp; ret 0x3145; 
0x00000000000cb7ee: xchg eax, ebp; ret 0x460f; 
0x000000000006d6a6: xchg eax, ebp; ret 0x5389; 
0x0000000000095553: xchg eax, ebp; ret 0x5474; 
0x0000000000128b80: xchg eax, ebp; ret 0x548d; 
0x0000000000076ea3: xchg eax, ebp; ret 0x60e9; 
0x0000000000020246: xchg eax, ebp; ret 0x8341; 
0x0000000000049025: xchg eax, ebp; ret 0x8348; 
0x00000000000d3ae1: xchg eax, ebp; ret 0x840f; 
0x000000000007d537: xchg eax, ebp; ret 0x8441; 
0x00000000000789f4: xchg eax, ebp; ret 0x8445; 
0x000000000004902e: xchg eax, ebp; ret 0x854d; 
0x00000000000c744d: xchg eax, ebp; ret 0x8944; 
0x00000000000cf2f8: xchg eax, ebp; ret 0x8d47; 
0x000000000008168e: xchg eax, ebp; ret 0x948; 
0x00000000000323e5: xchg eax, ebp; ret 0x953d; 
0x0000000000032dfc: xchg eax, ebp; ret 0x9be9; 
0x000000000003e205: xchg eax, ebp; ret 0xb60f; 
0x0000000000048f09: xchg eax, ebp; ret 0xc031; 
0x00000000000af504: xchg eax, ebp; ret 0xc0e9; 
0x00000000000daf82: xchg eax, ebp; ret 0xc209; 
0x000000000011266a: xchg eax, ebp; ret 0xc985; 
0x00000000000a5bf8: xchg eax, ebp; ret 0xceb; 
0x00000000000fa15c: xchg eax, ebp; ret 0xcfeb; 
0x0000000000121b04: xchg eax, ebp; ret 0xd089; 
0x000000000011259b: xchg eax, ebp; ret 0xd120; 
0x00000000000b0bc4: xchg eax, ebp; ret 0xd138; 
0x0000000000032a9c: xchg eax, ebp; ret 0xd284; 
0x000000000003e3cf: xchg eax, ebp; ret 0xd349; 
0x000000000006de97: xchg eax, ebp; ret 0xdaf7; 
0x000000000003e314: xchg eax, ebp; ret 0xe083; 
0x00000000000e2d22: xchg eax, ebp; ret 0xe2c1; 
0x00000000000b18ab: xchg eax, ebp; ret 0xf749; 
0x00000000000a44f3: xchg eax, ebp; ret 0xf883; 
0x00000000000a8334: xchg eax, ebp; ret 0xfeb; 
0x0000000000048ed8: xchg eax, ebp; ret 0xff31; 
0x00000000000020c3: xchg eax, ebp; ret; 
0x0000000000112591: xchg eax, ebp; rol dword ptr [rbx - 0x20343], -1; add byte ptr [rdi], cl; xchg eax, ebp; ret 0xd120; 
0x000000000012d55a: xchg eax, ebp; ror byte ptr [rax - 0x77], 4; and al, 0x48; mov eax, dword ptr [rdi + 8]; call qword ptr [rax + 8]; 
0x0000000000122876: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0xf], bl; mov dh, 0xc0; pop rbp; ret; 
0x0000000000022ca2: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000012291c: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x00000000000fa74d: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000012d0d2: xchg eax, ebp; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0xf], bl; mov dh, 0xc0; pop rbp; ret; 
0x00000000000b3672: xchg eax, ebp; ror byte ptr [rcx + rcx*4 + 0x15], 0xa5; fdiv dword ptr [rax]; add byte ptr [rcx - 0x76dbdbbc], cl; ret; 
0x000000000012d539: xchg eax, ebp; ror byte ptr [rcx - 0x3b7cb7fd], 0x10; mov eax, 1; pop rbx; ret; 
0x00000000001215da: xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000005db7a: xchg eax, ebp; ror byte ptr [rdi], 0xb6; sal bh, 0xd8; pop rbx; ret; 
0x00000000000f212c: xchg eax, ebp; sal bh, 0xd8; add rsp, 0x10; pop rbx; ret; 
0x00000000001295d4: xchg eax, ebp; sal bh, 0xd8; add rsp, 0x20; pop rbx; ret; 
0x0000000000129bb3: xchg eax, ebp; sal bh, 0xd8; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000006a92b: xchg eax, ebp; sar dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000061738: xchg eax, ebp; shr bh, 0xff; dec dword ptr [rax - 0x75]; add byte ptr [rcx - 0x77], cl; add bl, ch; ret; 
0x0000000000061653: xchg eax, ebp; shr bh, 0xff; dec dword ptr [rdi]; test al, ch; out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x000000000008cbf7: xchg eax, ebp; std; or al, 0; ret; 
0x000000000013217f: xchg eax, ebp; sti; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000000f4887: xchg eax, ebp; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000002b5d: xchg eax, ebp; test word ptr [rbx - 0x2e], bp; cmp dl, byte ptr [rdi]; ret; 
0x000000000008aa9f: xchg eax, ebp; xor eax, dword ptr [rax]; lea rdi, qword ptr [rip + 0x336247]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f3c07: xchg eax, ebp; xor edi, ecx; inc dword ptr [rbp - 0x7cee8b40]; ret; 
0x000000000002cb03: xchg eax, ebx; adc byte ptr [rax], al; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000018d0bd: xchg eax, ebx; add al, byte ptr [rax]; in al, 0x71; stc; jmp rsp; 
0x0000000000074433: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sti; call qword ptr [rax + 0x20]; 
0x000000000007b97c: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; sti; call qword ptr [rax + 0x60]; 
0x0000000000049be2: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rbx - 0x16], cl; mov rdx, r13; call qword ptr [rax + 0x38]; 
0x000000000005ea6a: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rbx - 0x1e], cl; mov rdx, r12; call qword ptr [rax + 0x38]; 
0x000000000007ba92: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx + 0x48d231d1], cl; mov eax, dword ptr [rax + 0x48]; jmp rax; 
0x0000000000074d53: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call qword ptr [rax + 0x20]; 
0x0000000000076013: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x00000000000750b2: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x30]; 
0x00000000000eaf21: xchg eax, ebx; add dword ptr [rax], eax; add al, ch; hlt; jmp qword ptr [rsi + 0xf]; 
0x00000000001a752d: xchg eax, ebx; add dword ptr [rax], eax; shl byte ptr [rax], 0xf5; jmp qword ptr [rsi]; 
0x000000000014dcc7: xchg eax, ebx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015fc80: xchg eax, ebx; add rcx, r11; jmp rcx; 
0x00000000001aaa54: xchg eax, ebx; and bh, bl; jmp qword ptr [rdx]; 
0x000000000007504d: xchg eax, ebx; fadd dword ptr [rax]; add byte ptr [rax], al; mov esi, eax; mov rdi, rbx; call qword ptr [rdx + 0x30]; 
0x00000000000d8c59: xchg eax, ebx; fdivr st(7); dec dword ptr [rax - 0x77]; ret; 
0x000000000009cc9c: xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x0000000000142922: xchg eax, ebx; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000074924: xchg eax, ebx; ret 0x3948; 
0x000000000003a3cf: xchg eax, ebx; ret 0x3949; 
0x000000000003a6b7: xchg eax, ebx; ret 0x8348; 
0x0000000000049a00: xchg eax, ebx; ret 0x841; 
0x00000000000e3480: xchg eax, ebx; ret 0x944; 
0x00000000000634c0: xchg eax, ebx; ret 0xffff; 
0x00000000000fad13: xchg eax, ebx; sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x113; syscall; 
0x00000000000f4b24: xchg eax, ebx; sub al, 0; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000000f4a94: xchg eax, ebx; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f9759: xchg eax, ebx; sub byte ptr [rax + rax], 0x48; add esp, 8; ret; 
0x000000000008acec: xchg eax, ebx; xor eax, dword ptr [rax]; mov edi, dword ptr [rip + 0x335ffb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012166e: xchg eax, ebx; xor eax, eax; pop rbx; ret; 
0x000000000010c8c3: xchg eax, ecx; adc eax, 0x4864002b; add eax, dword ptr [0]; ret; 
0x000000000010e3fb: xchg eax, ecx; adc eax, 0x8948002b; ret 0xb9; 
0x000000000007a3af: xchg eax, ecx; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000179c72: xchg eax, ecx; add dh, dh; ljmp ptr [rcx - 0x3c000500]; add dh, bh; jmp rdi; 
0x0000000000079033: xchg eax, ecx; add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; call qword ptr [rax + 0x40]; 
0x00000000001a7345: xchg eax, ecx; add dword ptr [rax], eax; test al, 0xd; cmc; jmp qword ptr [rcx]; 
0x000000000006d296: xchg eax, ecx; add rcx, rdx; jmp rcx; 
0x00000000000fb9d3: xchg eax, ecx; and al, 0x2c; add bh, dh; fsub dword ptr [rcx + rcx*4 + 2]; or rax, 0xffffffffffffffff; ret; 
0x0000000000192a84: xchg eax, ecx; and al, 0xeb; jmp qword ptr [rdx]; 
0x00000000000ebcd3: xchg eax, ecx; and dword ptr [rip + 0x64d8f700], ebp; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000002f873: xchg eax, ecx; cmp dword ptr [r8], r8d; lea rdi, qword ptr [rip + 0x390282]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000eced3: xchg eax, ecx; cvtps2pi mm0, qword ptr [rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000018ad79: xchg eax, ecx; hlt; jmp rsp; 
0x00000000000374d3: xchg eax, ecx; imul edi, dword ptr [rax], 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001a1a85: xchg eax, ecx; int1; jmp qword ptr [rdx]; 
0x000000000013aa31: xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000000f1ed3: xchg eax, ecx; mov edi, 0xd8f7002c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000044f8b: xchg eax, ecx; out 0xff, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000019db91: xchg eax, ecx; out dx, eax; jmp qword ptr [rbx]; 
0x0000000000021c7e: xchg eax, ecx; push -0xcfffff7; ret; 
0x00000000001088d3: xchg eax, ecx; push rbp; sub eax, dword ptr [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000c1ad3: xchg eax, ecx; ret; 
0x00000000000fa7d3: xchg eax, ecx; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000013915f: xchg eax, ecx; sub eax, edx; ret; 
0x00000000000fa8d3: xchg eax, ecx; xor eax, 0xd8f7002c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000146335: xchg eax, edi; add al, 4; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000e6a90: xchg eax, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x4c6; 
0x0000000000095405: xchg eax, edi; add byte ptr [rax], al; add byte ptr [rbp - 0x73], cl; dec dword ptr [r13 - 0x77]; ret; 
0x000000000005f94b: xchg eax, edi; add byte ptr [rax], al; add byte ptr [rbx - 0x111743], al; call qword ptr [rax]; 
0x000000000005fc5f: xchg eax, edi; add byte ptr [rax], al; add byte ptr [rbx - 0x116b43], al; call qword ptr [rax]; 
0x00000000000e4dec: xchg eax, edi; add byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x00000000001a790d: xchg eax, edi; add dword ptr [rax], eax; add byte ptr [rbx], ch; cmc; jmp qword ptr [rcx]; 
0x0000000000083e9d: xchg eax, edi; add dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000001a7925: xchg eax, edi; add dword ptr [rax], eax; sbb byte ptr [rbx], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001a7955: xchg eax, edi; add dword ptr [rax], eax; sub rsi, rbp; jmp qword ptr [rcx]; 
0x00000000001a793d: xchg eax, edi; add dword ptr [rax], eax; xor byte ptr [rbx], ch; cmc; jmp qword ptr [rcx]; 
0x00000000000b4c6e: xchg eax, edi; add rdx, rdi; jmp rdx; 
0x00000000001326d5: xchg eax, edi; and esp, edi; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret 0x9274; 
0x0000000000174d3f: xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x00000000001782b9: xchg eax, edi; cld; call qword ptr [rax - 0x67]; 
0x00000000001ae51d: xchg eax, edi; cmc; jmp qword ptr [rdx]; 
0x0000000000037bf5: xchg eax, edi; cmp byte ptr fs:[rax], al; mov eax, edx; ret; 
0x000000000019b0bc: xchg eax, edi; cmp ch, dh; jmp qword ptr [rdx]; 
0x00000000001490f5: xchg eax, edi; fadd dword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000072f8c: xchg eax, edi; movabs al, byte ptr [0x4820428b48000000]; sub eax, dword ptr [rdx + 0x18]; sar rax, 2; ret; 
0x0000000000072e7c: xchg eax, edi; movabs al, byte ptr [0x4838428b48000000]; sub eax, dword ptr [rdx + 0x30]; sar rax, 2; ret; 
0x0000000000125dc1: xchg eax, edi; out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x0000000000021de1: xchg eax, edi; ret 0x39; 
0x0000000000113255: xchg eax, edi; ret 0xfff0; 
0x00000000001960d7: xchg eax, edi; ret; 
0x000000000007b48f: xchg eax, edi; rol byte ptr [rax], 0; add byte ptr [rbp + 0x48487ed2], al; mov eax, dword ptr [rbx + 0xd8]; mov rdi, rbx; call qword ptr [rax + 0x68]; 
0x00000000000c233e: xchg eax, edi; ror byte ptr [rdi], 0x92; ret 0xd029; 
0x00000000000ed3e9: xchg eax, edi; ror byte ptr [rdi], 0xb6; shr byte ptr [rcx], cl; sal bl, 1; ret; 
0x00000000000f0254: xchg eax, edi; ror dword ptr [rdi], -0x6e; ret 0xcc80; 
0x00000000000d2e68: xchg eax, edi; ror dword ptr [rdi], -0x6e; ret 0xd138; 
0x0000000000022279: xchg eax, edi; sbb dword ptr [rdx], edi; add byte ptr [rbx - 0x76bef019], al; ret 0xb8; 
0x00000000000f4716: xchg eax, edi; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000769c5: xchg eax, edi; sub eax, 0xf8830000; push qword ptr [rbp + 2]; pop rbx; ret; 
0x0000000000173f38: xchg eax, edi; xchg eax, esp; ret; 
0x0000000000143575: xchg eax, edi; xor byte ptr [rax + rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001882c5: xchg eax, edx; add byte ptr [rax], al; hlt; add ch, bl; jmp rsp; 
0x00000000001973ed: xchg eax, edx; add byte ptr [rax], al; mov al, 0xba; in eax, dx; jmp qword ptr [rdx]; 
0x0000000000197465: xchg eax, edx; add byte ptr [rax], al; test al, 0xba; in eax, dx; jmp qword ptr [rdi]; 
0x000000000010e60b: xchg eax, edx; add dword ptr [rax], eax; add byte ptr [rbp + rcx*4 + 5], cl; ret 0x2b44; 
0x00000000001a73bd: xchg eax, edx; add dword ptr [rax], eax; and byte ptr [rsi], cl; cmc; jmp qword ptr [rcx]; 
0x000000000014de47: xchg eax, edx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000010ab1a: xchg eax, edx; and al, 0xfe; call qword ptr [rax - 0x18]; 
0x000000000002f57a: xchg eax, edx; cmp qword ptr [rax], rax; lea rdi, qword ptr [rip + 0x39057b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000c6e12: xchg eax, edx; idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000039a9a: xchg eax, edx; idiv edi; dec ecx; ret; 
0x00000000000c49dc: xchg eax, edx; idiv edi; push rsi; ret; 
0x0000000000194cc9: xchg eax, edx; in eax, dx; jmp qword ptr [rcx + 0x4000001]; 
0x00000000001a1acd: xchg eax, edx; int1; jmp qword ptr [rdx]; 
0x000000000018734c: xchg eax, edx; jnp 0x18734b; jmp qword ptr [rdx]; 
0x000000000013fd8c: xchg eax, edx; lea rcx, qword ptr [rip + 0x274ec]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013e3e7: xchg eax, edx; lea rcx, qword ptr [rip + 0x28e91]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013c9ec: xchg eax, edx; lea rcx, qword ptr [rip + 0x2a88c]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000013aa27: xchg eax, edx; lea rcx, qword ptr [rip + 0x2c851]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000001273c4: xchg eax, edx; lock dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x0000000000127403: xchg eax, edx; lock dec dword ptr [rax - 0x77]; ret 0xbfeb; 
0x00000000000825ea: xchg eax, edx; mov al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000011f4ba: xchg eax, edx; ret 0; 
0x00000000000ae836: xchg eax, edx; ret 0x8941; 
0x00000000000ed3ce: xchg eax, edx; ret 0x970f; 
0x00000000000f0257: xchg eax, edx; ret 0xcc80; 
0x00000000000c2341: xchg eax, edx; ret 0xd029; 
0x00000000000d2e6b: xchg eax, edx; ret 0xd138; 
0x00000000001738ef: xchg eax, edx; ret 0xf869; 
0x00000000000288ba: xchg eax, edx; ret; 
0x000000000013caad: xchg eax, edx; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x0000000000187634: xchg eax, edx; scasb al, byte ptr [rdi]; cld; jmp qword ptr [rdx]; 
0x00000000000fada3: xchg eax, edx; sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x114; syscall; 
0x00000000000fae63: xchg eax, edx; sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0x116; syscall; 
0x00000000000f4c04: xchg eax, edx; sub al, 0; mov dword ptr fs:[rax], 0x16; pop rbx; ret; 
0x00000000000f4bbf: xchg eax, edx; sub al, 0; mov dword ptr fs:[rax], 0x16; xor eax, eax; pop rbx; ret; 
0x0000000000137eb7: xchg eax, edx; sub eax, edx; ret; 
0x000000000018713c: xchg eax, edx; xchg esp, edi; jmp qword ptr [rdx]; 
0x0000000000145176: xchg eax, esi; adc al, 4; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000004c11e: xchg eax, esi; add al, byte ptr [rax]; add byte ptr [rax - 0x4fa43], al; call qword ptr [rbx + 0xf]; 
0x000000000007c8cb: xchg eax, esi; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; adc eax, 0x3440f2; add dword ptr [rip + 0x3440e7], 1; ret; 
0x000000000018d135: xchg eax, esi; add al, byte ptr [rax]; mov ah, 0x7f; stc; call rsp; 
0x000000000015ff80: xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000008379e: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000014c063: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000010556d: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; cmp byte ptr [rax - 0x77], r9b; ret 0x2b49; 
0x00000000001a7825: xchg eax, esi; add dword ptr [rax], eax; sub byte ptr [rdx], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001a783d: xchg eax, esi; add dword ptr [rax], eax; sub sil, bpl; jmp qword ptr [rcx]; 
0x000000000014d9c7: xchg eax, esi; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018cb89: xchg eax, esi; clc; call rsp; 
0x00000000000c3546: xchg eax, esi; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000001782b5: xchg eax, esi; cld; jmp rax; 
0x00000000001aa261: xchg eax, esi; cmc; jmp qword ptr [rdi + 3]; 
0x000000000010bde6: xchg eax, esi; fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x0000000000045ed6: xchg eax, esi; fdivp st(7); jmp qword ptr [rsi + 0xf]; 
0x0000000000179375: xchg eax, esi; hlt; lcall ptr [rax - 0x67000b6b]; xchg eax, ebp; hlt; call rax; 
0x00000000001793a9: xchg eax, esi; hlt; ljmp ptr [rax - 0x57000b6b]; xchg eax, ebp; hlt; jmp rsi; 
0x00000000000f691e: xchg eax, esi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000194f49: xchg eax, esi; in eax, dx; jmp rsp; 
0x000000000016003d: xchg eax, esi; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000001a17fc: xchg eax, esi; mov dh, cl; jmp qword ptr [rdx]; 
0x0000000000187098: xchg eax, esi; mov edi, esp; jmp qword ptr [rsi]; 
0x00000000001863b0: xchg eax, esi; movsb byte ptr [rdi], byte ptr [rsi]; std; inc dword ptr [rdx - 0x5b]; std; call qword ptr [rdx]; 
0x0000000000186bac: xchg eax, esi; movsxd rdi, esp; jmp qword ptr [rsi]; 
0x000000000007bd3b: xchg eax, esi; nop dword ptr [rax]; mov rax, -1; ret; 
0x00000000000c6074: xchg eax, esi; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000015ff9b: xchg eax, esi; nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000022023: xchg eax, esi; or al, 0; nop word ptr cs:[rax + rax]; lea rax, qword ptr [rip + 0x15a154]; ret; 
0x000000000008869c: xchg eax, esi; ret 0x144; 
0x000000000003377e: xchg eax, esi; ret 0x14; 
0x0000000000109bdc: xchg eax, esi; ret 0x394c; 
0x000000000007d530: xchg eax, esi; ret 0x8348; 
0x000000000017618c: xchg eax, esi; ret 0xcd11; 
0x0000000000110cef: xchg eax, esi; ret; 
0x000000000015ffec: xchg eax, esi; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000000b9f78: xchg eax, esi; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x0000000000186385: xchg eax, esi; sti; push qword ptr [rax - 0x68]; sti; jmp qword ptr [rax]; 
0x00000000000fa9e3: xchg eax, esi; sub al, 0; add byte ptr [rbp + 0x13], dh; mov r10, rcx; mov eax, 0xe8; syscall; 
0x000000000018c440: xchg eax, esp; adc al, 0xf8; call rsp; 
0x00000000001af43c: xchg eax, esp; adc al, byte ptr [rdx]; add al, ah; xchg dh, dh; jmp rdx; 
0x000000000018c61c: xchg eax, esp; add al, byte ptr [rax]; test byte ptr [rax], dh; clc; call rsp; 
0x000000000019bdc0: xchg eax, esp; add byte ptr [rax], al; add byte ptr [rsp + rbx*8], bl; add byte ptr [rax], al; cmp byte ptr [rax - 0x12], dh; call qword ptr [rsi]; 
0x00000000000f2990: xchg eax, esp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x3c01; 
0x000000000008b13f: xchg eax, esp; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000000e0de8: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rbx + 0x3978244c], cl; ret 0x1372; 
0x00000000000e1e84: xchg eax, esp; and al, 0xa4; add byte ptr [rax], al; add byte ptr [rcx], bh; ret 0x8f0f; 
0x0000000000027486: xchg eax, esp; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000003ffc7: xchg eax, esp; and al, 0xb0; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000073ce8: xchg eax, esp; and al, 0xf0; add dword ptr [rax], eax; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000018cb81: xchg eax, esp; clc; call qword ptr [rax + rbp*2 - 0x69cbfffe]; clc; call rsp; 
0x000000000018af18: xchg eax, esp; cmc; call rsp; 
0x000000000018af18: xchg eax, esp; cmc; call rsp; ret; 
0x000000000018ae90: xchg eax, esp; cmc; hlt; inc dword ptr [rbp + rdi*4 - 0x2abffff]; hlt; call rsp; 
0x00000000001ae3fd: xchg eax, esp; cmc; jmp qword ptr [rdx]; 
0x00000000001a1c3c: xchg eax, esp; cmp al, byte ptr [rcx]; add byte ptr [rax], ah; in eax, dx; int1; call qword ptr [rax]; 
0x000000000018db08: xchg eax, esp; cmpsd dword ptr [rsi], dword ptr [rdi]; cli; push qword ptr [rcx + rbx*8 - 0x56cbfffe]; cli; jmp rsp; 
0x000000000019c13c: xchg eax, esp; fild word ptr [rax]; add byte ptr [rax - 0x7a], dl; out dx, al; call qword ptr [rdi]; 
0x00000000001a9bfc: xchg eax, esp; hlt; jmp qword ptr [rdx]; 
0x000000000018bd50: xchg eax, esp; idiv edi; mov ah, 8; add al, byte ptr [rax]; test byte ptr [rcx - 9], cl; jmp rsp; 
0x0000000000193bd1: xchg eax, esp; in al, dx; jmp qword ptr [rbx]; 
0x0000000000188ae8: xchg eax, esp; in eax, dx; inc dword ptr [rdi + rax*8]; add byte ptr [rax + 0x6cffed65], ch; mov byte ptr [rax], 0; ret; 
0x000000000018d3d8: xchg eax, esp; int 0xf9; call rsp; 
0x000000000017495a: xchg eax, esp; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0x1749d7; mov ebp, 0xfb67d10d; ret; 
0x000000000018db90: xchg eax, esp; mov bh, 0xfa; ljmp ptr [rsp + rbx*8 - 0x481bfffe]; cli; call rsp; 
0x000000000009cdc8: xchg eax, esp; mov ch, 0xd; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000018af84: xchg eax, esp; mov dword ptr [rcx], 0xf5bfa400; call rsp; 
0x00000000000f7bf7: xchg eax, esp; mov eax, 3; syscall; 
0x000000000018d67c: xchg eax, esp; mov ebx, 0x2bc40002; cli; jmp rsp; 
0x0000000000108e4b: xchg eax, esp; nop dword ptr [rax]; mov rax, rdi; pop rbx; ret; 
0x000000000018cd08: xchg eax, esp; out 0xf8, al; dec dword ptr [rbx + rsi*2 - 0x18bbfffe]; clc; call rsp; 
0x000000000019d03c: xchg eax, esp; out dx, al; add byte ptr [rax], al; cli; out dx, al; call qword ptr [rcx]; 
0x00000000001ab014: xchg eax, esp; outsd dx, dword ptr [rsi]; add dword ptr [rax], eax; cwde; loope 0x1ab010; jmp qword ptr [rcx + 0x4000001]; 
0x0000000000001b5b: xchg eax, esp; pop rdx; int 0x4f; jmp rdx; 
0x000000000018cb84: xchg eax, esp; push -0x69cbfffe; clc; call rsp; 
0x000000000007f87a: xchg eax, esp; ret 0x1589; 
0x00000000000a9b5d: xchg eax, esp; ret 0x294c; 
0x0000000000116d28: xchg eax, esp; ret 0x2a; 
0x00000000000b1a4d: xchg eax, esp; ret 0x2b3c; 
0x00000000000ceb47: xchg eax, esp; ret 0x38b; 
0x00000000001295a1: xchg eax, esp; ret 0x3d83; 
0x00000000000df861: xchg eax, esp; ret 0x3d; 
0x00000000000e73f8: xchg eax, esp; ret 0x403c; 
0x00000000000c599f: xchg eax, esp; ret 0x45e9; 
0x0000000000034623: xchg eax, esp; ret 0x70e9; 
0x00000000000eea32: xchg eax, esp; ret 0x7c83; 
0x0000000000047b73: xchg eax, esp; ret 0x8341; 
0x00000000000c3e85: xchg eax, esp; ret 0x8548; 
0x00000000000b0d8e: xchg eax, esp; ret 0x8840; 
0x00000000000cc6e3: xchg eax, esp; ret 0x8944; 
0x00000000000b1c16: xchg eax, esp; ret 0x894c; 
0x0000000000103bfd: xchg eax, esp; ret 0x89eb; 
0x00000000000cd1b8: xchg eax, esp; ret 0x8b48; 
0x0000000000021e87: xchg eax, esp; ret 0x8d48; 
0x00000000000b0e6e: xchg eax, esp; ret 0x943a; 
0x00000000000296d6: xchg eax, esp; ret 0xb60f; 
0x00000000000d6477: xchg eax, esp; ret 0xc030; 
0x0000000000021f81: xchg eax, esp; ret 0xc031; 
0x000000000013cab0: xchg eax, esp; ret 0xc085; 
0x000000000005b8d3: xchg eax, esp; ret 0xd189; 
0x000000000004a5b0: xchg eax, esp; ret 0xd284; 
0x00000000000cd449: xchg eax, esp; ret 0xd5e9; 
0x000000000007069c: xchg eax, esp; ret 0xdaf7; 
0x000000000012f2fe: xchg eax, esp; ret 0xea83; 
0x000000000007fafb: xchg eax, esp; ret 0xee9; 
0x00000000000a60fd: xchg eax, esp; ret 0xf983; 
0x00000000000d0c17: xchg eax, esp; ret 0xfd83; 
0x00000000000cee22: xchg eax, esp; ret 0xff83; 
0x000000000001f543: xchg eax, esp; ret; 
0x0000000000076c3a: xchg eax, esp; rol byte ptr [rax + rax*8 - 0x7cb7978c], 0xc4; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x000000000012d078: xchg eax, esp; rol byte ptr [rbx + 0x617401fa], 0x48; add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000000b710e: xchg eax, esp; ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000ecdef: xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; movzx rax, al; ret; 
0x000000000012ce36: xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0xf], bl; mov dh, 0xc0; pop rbp; ret; 
0x00000000000465b3: xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000005db43: xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000012e7c6: xchg eax, esp; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rdi], cl; mov dh, 0xc0; ret; 
0x000000000013536e: xchg eax, esp; ror byte ptr [rcx], 0xc6; movsxd rdi, r12d; mov eax, 3; syscall; 
0x00000000000b047f: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x14; add byte ptr [rax + 1], cl; ret 0x8d48; 
0x00000000000c268c: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; add bh, bh; ret; 
0x0000000000121a8b: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000012dd49: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc4; sub byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000036a6a: xchg eax, esp; ror byte ptr [rdi], 0xb6; ror byte ptr [rcx - 0x3fcebfbd], 0x5b; ret; 
0x00000000001a803c: xchg eax, esp; sahf; add dword ptr [rax], eax; jo 0x1a8077; cmc; jmp qword ptr [rcx]; 
0x000000000004c748: xchg eax, esp; sar edi, 1; dec dword ptr [rax - 0x77]; ret 0x1beb; 
0x000000000004d630: xchg eax, esp; shr eax, -0x57; ret 0xffff; 
0x00000000001add3c: xchg eax, esp; sti; add dword ptr [rax], eax; shl byte ptr [rdx], 0xf6; call rdi; 
0x0000000000190e3c: xchg eax, esp; sub al, 0; add al, dh; jno 0x190e2d; call qword ptr [rsi + 1]; 
0x00000000000f4974: xchg eax, esp; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001898f4: xchg eax, esp; sub dword ptr [rcx], eax; add ah, ah; push rsp; out dx, eax; jmp rsp; 
0x00000000001a7d3c: xchg eax, esp; wait; add dword ptr [rax], eax; xor byte ptr [rax], dh; cmc; jmp qword ptr [rcx]; 
0x00000000001a793c: xchg eax, esp; xchg eax, edi; add dword ptr [rax], eax; xor byte ptr [rbx], ch; cmc; jmp qword ptr [rcx]; 
0x00000000001a783c: xchg eax, esp; xchg eax, esi; add dword ptr [rax], eax; sub sil, bpl; jmp qword ptr [rcx]; 
0x00000000001ab93c: xchg eax, esp; xlatb; add dword ptr [rax], eax; jo 0x1ab92b; cmc; call qword ptr [rax]; 
0x000000000018e0d8: xchg eax, esp; xlatb; std; call rsp; 
0x0000000000189e80: xchg eax, esp; xor esi, eax; call rsp; 
0x00000000000f4b23: xchg eax, r11d; sub al, 0; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x00000000000a1e2e: xchg ebp, ebx; add byte ptr [rax], al; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000121bd8: xchg ebp, edi; dec dword ptr [rax - 0x77]; ret 0xffb8; 
0x000000000005356e: xchg ebp, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001ad9ed: xchg ebp, esi; jmp qword ptr [rdx]; 
0x000000000018d181: xchg ecx, edi; jmp rsp; 
0x000000000018d179: xchg ecx, edi; ljmp ptr [rax + rbx*4 - 0x784bfffe]; stc; jmp rsp; 
0x00000000000a7826: xchg ecx, esi; add al, byte ptr [rax]; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000001a122d: xchg ecx, esi; jmp qword ptr [rdx]; 
0x000000000018a1c9: xchg ecx, esi; jmp rsp; 
0x000000000018d178: xchg ecx, r15d; ljmp ptr [rax + rbx*4 - 0x784bfffe]; stc; jmp rsp; 
0x00000000000acc26: xchg edi, esp; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000000ab1d9: xchg edi, esp; idiv edi; dec dword ptr [rcx - 0x7d]; ret 0x4104; 
0x000000000005a610: xchg edx, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000036dc7: xchg esi, ecx; add byte ptr [rax], al; add byte ptr [rbp + 0x481079d2], al; add esp, 0xd0; ret; 
0x00000000001944ed: xchg esp, ebp; jmp qword ptr [rdx]; 
0x0000000000148d05: xchg esp, ebx; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000d4262: xchg esp, ecx; idiv bh; dec dword ptr [rax - 0x7d]; ret 0x8d01; 
0x00000000001765b7: xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000018707d: xchg esp, edi; call qword ptr [rax - 0x79]; 
0x000000000018707d: xchg esp, edi; call qword ptr [rax - 0x79]; cld; jmp rax; 
0x00000000001870c1: xchg esp, edi; inc esi; xchg ah, bh; call qword ptr [rsi - 0x7a]; 
0x00000000001870c1: xchg esp, edi; inc esi; xchg ah, bh; call qword ptr [rsi - 0x7a]; cld; jmp rsi; 
0x0000000000187279: xchg esp, edi; jmp qword ptr [rax - 0x79]; 
0x000000000018713d: xchg esp, edi; jmp qword ptr [rdx]; 
0x0000000000187081: xchg esp, edi; jmp rax; 
0x0000000000187141: xchg esp, edi; push qword ptr [rdx + 0x42fffc86]; xchg ah, bh; call rdx; 
0x00000000001870bd: xchg esp, edi; push qword ptr [rsi]; xchg esp, edi; inc esi; xchg ah, bh; call qword ptr [rsi - 0x7a]; 
0x00000000001944ec: xchg r12d, r13d; jmp qword ptr [rdx]; 
0x00000000000f4715: xchg rax, r15; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000187148: xchg spl, dil; call rdx; 
0x000000000008ab62: xlatb; add byte ptr [rax], al; add al, ch; xor eax, 0x39fffad0; ret; 
0x000000000019b9a5: xlatb; add byte ptr [rax], al; xor rbp, rsi; call qword ptr [rsi]; 
0x00000000000a70bf: xlatb; add byte ptr [rbp + 0x36840fed], al; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x00000000000ac22c: xlatb; add byte ptr [rbp - 0x297bf013], al; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000095dc5: xlatb; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; stc; dec dword ptr [rcx - 0x77]; ret 0x840f; 
0x0000000000170e29: xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000001ab93d: xlatb; add dword ptr [rax], eax; jo 0x1ab92b; cmc; call qword ptr [rax]; 
0x0000000000149194: xlatb; add eax, dword ptr [rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151462: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x36323]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001512e2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x364a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000151162: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x36623]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150fe3: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x367a2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150e62: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x36923]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150ce2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x36aa3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150b62: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x36c23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001509e2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x36da3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150862: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x36f23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001506e2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x370a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150562: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x37223]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001503e2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x373a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150262: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x37523]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001500e2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x376a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ff62: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x37823]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e982: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x38903]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e802: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x38a83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e682: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x38c03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e503: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x38d82]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e382: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x38f03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e202: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x39083]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e082: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x39203]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014df02: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x39383]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dd82: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x39503]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dc02: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x39683]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014da82: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x39803]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d902: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x39983]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d782: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x39b03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d602: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x39c83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d482: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x39e03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014beb2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3aed3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bd32: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3b053]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bbb2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3b1d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ba33: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3b352]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b8b2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3b4d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b732: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3b653]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b5b2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3b7d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b432: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3b953]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b2b2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3bad3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b132: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3bc53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014afb2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3bdd3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ae32: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3bf53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014acb2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3c0d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ab32: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3c253]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a9b2: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3c3d3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147e68: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x3eb1d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145498: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x4132d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142ac8: xlatb; add rsi, rdx; lea r11, qword ptr [rip + 0x43b3d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000013385d: xlatb; call qword ptr [rax + 0x20]; 
0x00000000001aa999: xlatb; cmc; call qword ptr [rsi]; 
0x00000000001aac01: xlatb; cmc; jmp qword ptr [rax + 1]; 
0x00000000001aa949: xlatb; cmc; jmp qword ptr [rdi]; 
0x00000000001aa919: xlatb; cmc; jmp qword ptr [rsi]; 
0x0000000000148bb5: xlatb; fld qword ptr [rbx]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000d1ddf: xlatb; hlt; jmp qword ptr [rsi + 0x66]; 
0x0000000000108179: xlatb; jmp rax; 
0x0000000000174963: xlatb; jo 0x1749d7; mov ebp, 0xfb67d10d; ret; 
0x000000000014c68b: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000161d02: xlatb; lea r11, qword ptr [rip + 0x247c6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161c88: xlatb; lea r11, qword ptr [rip + 0x24840]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161bf9: xlatb; lea r11, qword ptr [rip + 0x248cf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001619ee: xlatb; lea r11, qword ptr [rip + 0x24ada]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001618bc: xlatb; lea r11, qword ptr [rip + 0x24c0c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001617f6: xlatb; lea r11, qword ptr [rip + 0x24cd2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000161778: xlatb; lea r11, qword ptr [rip + 0x24d50]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001616e1: xlatb; lea r11, qword ptr [rip + 0x24de7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001614e5: xlatb; lea r11, qword ptr [rip + 0x24fe3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001613b4: xlatb; lea r11, qword ptr [rip + 0x25114]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001612b3: xlatb; lea r11, qword ptr [rip + 0x25215]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001606d2: xlatb; lea r11, qword ptr [rip + 0x25cb6]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160658: xlatb; lea r11, qword ptr [rip + 0x25d30]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001605c9: xlatb; lea r11, qword ptr [rip + 0x25dbf]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001603be: xlatb; lea r11, qword ptr [rip + 0x25fca]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000016028c: xlatb; lea r11, qword ptr [rip + 0x260fc]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001601c6: xlatb; lea r11, qword ptr [rip + 0x261c2]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000160148: xlatb; lea r11, qword ptr [rip + 0x26240]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000001600b1: xlatb; lea r11, qword ptr [rip + 0x262d7]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015feb5: xlatb; lea r11, qword ptr [rip + 0x264d3]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fd84: xlatb; lea r11, qword ptr [rip + 0x26604]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000015fc75: xlatb; lea r11, qword ptr [rip + 0x26713]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000151880: xlatb; lea r11, qword ptr [rip + 0x35cc8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001516cd: xlatb; lea r11, qword ptr [rip + 0x360bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fe28: xlatb; lea r11, qword ptr [rip + 0x37960]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fccc: xlatb; lea r11, qword ptr [rip + 0x37abc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ed6c: xlatb; lea r11, qword ptr [rip + 0x382dc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ebd9: xlatb; lea r11, qword ptr [rip + 0x386af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d348: xlatb; lea r11, qword ptr [rip + 0x39f40]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d1d9: xlatb; lea r11, qword ptr [rip + 0x3a0af]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c29c: xlatb; lea r11, qword ptr [rip + 0x3a8ac]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014c109: xlatb; lea r11, qword ptr [rip + 0x3ac7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a51b: xlatb; lea r11, qword ptr [rip + 0x3c46d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a878: xlatb; lea r11, qword ptr [rip + 0x3c510]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a706: xlatb; lea r11, qword ptr [rip + 0x3c682]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147d7c: xlatb; lea r11, qword ptr [rip + 0x3ec0c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147cb7: xlatb; lea r11, qword ptr [rip + 0x3ecd1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001453ac: xlatb; lea r11, qword ptr [rip + 0x4141c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001452e7: xlatb; lea r11, qword ptr [rip + 0x414e1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001429dc: xlatb; lea r11, qword ptr [rip + 0x43c2c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000142917: xlatb; lea r11, qword ptr [rip + 0x43cf1]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000c11a2: xlatb; mov eax, r8d; syscall; 
0x00000000000c11b3: xlatb; mov eax, r9d; syscall; 
0x000000000011620a: xlatb; mov edx, r11d; call 0x115190; sub rsp, -0x80; pop rbx; ret; 
0x00000000000f1ef2: xlatb; mov esi, 0x28121969; mov rdi, -0x11e2153; mov eax, 0xa9; syscall; 
0x0000000000117ec6: xlatb; mov qword ptr [r9], rdi; ret; 
0x000000000007958e: xlatb; mov rax, qword ptr [rbp + 0xd8]; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rax + 0x18]; 
0x000000000012dd8e: xlatb; mov rax, qword ptr [rbx + 8]; lea rsi, qword ptr [rsp + 0x10]; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000f978a: xlatb; mov rdi, rbx; call 0x54480; mov rax, rbx; pop rbx; ret; 
0x00000000000fa32e: xlatb; mov rdx, r8; mov r8, r9; mov r10, qword ptr [rsp + 8]; mov eax, 0x38; syscall; 
0x0000000000148a61: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x3df22]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000146091: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x40732]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000001436c1: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, qword ptr [rip + 0x42f42]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000036c29: xlatb; movsxd rsi, esi; movsxd rdi, ecx; mov eax, 0xea; syscall; 
0x000000000007decf: xlatb; neg rdi; call qword ptr [rax]; 
0x0000000000036fe2: xlatb; nop word ptr cs:[rax + rax]; mov esi, 8; mov eax, 0x82; syscall; 
0x00000000000c0b80: xlatb; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x25; syscall; 
0x0000000000145df5: xlatb; or dword ptr [rax + rax], eax; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000179594: xlatb; popfq; hlt; jmp rcx; 
0x000000000001a2b0: xlatb; ret 0x17; 
0x0000000000088a0f: xlatb; ret 0x4166; 
0x0000000000175e06: xlatb; ret 0x4e27; 
0x0000000000003238: xlatb; ret 0x5a51; 
0x000000000008a877: xlatb; ret 0x94c; 
0x000000000008bbdf: xlatb; ret 0xc085; 
0x0000000000086e80: xlatb; ret 0xc148; 
0x00000000000970bb: xlatb; ret 0xf188; 
0x0000000000086e89: xlatb; ret; 
0x0000000000093921: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000088cd8: xlatb; rol byte ptr [rbp - 0x149d8a2e], 1; ror byte ptr [rcx + 0x39], 1; ret; 
0x0000000000096f56: xlatb; rol dword ptr [rbp + 0x317475c0], -0x40; ret; 
0x000000000016213e: xlatb; rol dword ptr [rbp + 0x661075c0], cl; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000096f19: xlatb; rol dword ptr [rbp + 0x7d850fc0], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008bd75: xlatb; rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000157022: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x00000000000986af: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13; 
0x000000000015705e: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000009d10e: xlatb; ror byte ptr [rcx - 0x7d], 1; ret 0x4d10; 
0x0000000000162136: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000096eb4: xlatb; ror dword ptr [rdi], -0x43; ror byte ptr [rax + 1], 0xf8; ret; 
0x0000000000136ba6: xlatb; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000088356: xlatb; sal bh, 1; ret 0x8000; 
0x0000000000088216: xlatb; sal bh, 1; ret 0xc000; 
0x00000000000880d6: xlatb; sal bh, 1; ret 0xe000; 
0x0000000000087f96: xlatb; sal bh, 1; ret 0xf000; 
0x0000000000087e56: xlatb; sal bh, 1; ret 0xf800; 
0x0000000000087d16: xlatb; sal bh, 1; ret 0xfc00; 
0x0000000000087bd6: xlatb; sal bh, 1; ret 0xfe00; 
0x0000000000087a96: xlatb; sal bh, 1; ret 0xff00; 
0x0000000000087956: xlatb; sal bh, 1; ret 0xff80; 
0x0000000000087816: xlatb; sal bh, 1; ret 0xffc0; 
0x00000000000876d6: xlatb; sal bh, 1; ret 0xffe0; 
0x0000000000087596: xlatb; sal bh, 1; ret 0xfff0; 
0x0000000000087456: xlatb; sal bh, 1; ret 0xfff8; 
0x0000000000087316: xlatb; sal bh, 1; ret 0xfffc; 
0x00000000000871d6: xlatb; sal bh, 1; ret 0xfffe; 
0x00000000000fc721: xlatb; sbb ebp, dword ptr [rax + rax]; add al, byte ptr [rax]; add byte ptr [rax], al; pop rbp; ret; 
0x000000000014a44d: xlatb; sfence; lea r11, qword ptr [rip + 0x3c538]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000147a65: xlatb; sfence; lea r11, qword ptr [rip + 0x3ed60]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000145095: xlatb; sfence; lea r11, qword ptr [rip + 0x41570]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000162132: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000008a826: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000008a815: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000018e0d9: xlatb; std; call rsp; 
0x00000000001867c9: xlatb; sti; inc dword ptr [rax + 0x58fffbd8]; add al, 0xfc; jmp qword ptr [rax]; 
0x00000000000f0684: xlatb; sub al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000015151f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x36026]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015139f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x361a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015121f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x36326]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015109f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x364a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150f1f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x36626]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150d9f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x367a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150c1f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x36926]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000150a9f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x36aa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015091f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x36c26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015079f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x36da6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015061f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x36f26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015049f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x370a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015031f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x37226]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015019f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x373a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000015001f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x37526]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014fea6: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3769f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ea3f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x38606]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e8bf: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x38786]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e73f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x38906]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e5bf: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x38a86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e43f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x38c06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e2bf: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x38d86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014e13f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x38f06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dfbf: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x39086]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014de3f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x39206]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014dcbf: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x39386]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014db3f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x39506]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d9bf: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x39686]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d83f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x39806]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d6bf: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x39986]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d53f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x39b06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014d3c6: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x39c7f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bf6f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3abd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bdef: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3ad56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014bc6f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3aed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014baef: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b056]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b96f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b1d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b7ef: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b356]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b66f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b4d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b4ef: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b656]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b36f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b7d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b1ef: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3b956]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014b06f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bad6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aeef: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bc56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014ad6f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bdd6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014abef: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3bf56]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014aa6f: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3c0d6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000014a8f6: xlatb; sub rsi, rdx; lea r11, qword ptr [rip + 0x3c24f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000e4a86: xlatb; syscall; 
0x00000000000b06b4: xlatb; xor byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000143035: xlatb; xor eax, 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000375f8: xlatb; xor eax, eax; ret; 
0x00000000000c4b20: xor ah, 0xff; push rsi; ret; 
0x000000000009c908: xor ah, ah; mov byte ptr [rdx + 0x10], ah; mov rax, rdi; ret; 
0x0000000000099b30: xor ah, ah; mov byte ptr [rdx + 1], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000099b40: xor ah, ah; mov byte ptr [rdx + 2], ah; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000099b70: xor ah, ah; mov byte ptr [rdx + 4], ah; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000009c89e: xor ah, ah; mov byte ptr [rdx + 8], ah; mov rax, rdi; ret; 
0x0000000000099be0: xor ah, ah; mov byte ptr [rdx + 8], ah; movlpd xmm0, qword ptr [rcx]; movlpd qword ptr [rdx], xmm0; mov rax, rdi; ret; 
0x0000000000186abd: xor ah, bh; call qword ptr [rax]; 
0x0000000000186abd: xor ah, bh; call qword ptr [rax]; xor bh, ah; jmp rax; 
0x0000000000186a9d: xor ah, bh; jmp qword ptr [rax + 0x32]; 
0x00000000001869b9: xor ah, bh; jmp rax; 
0x0000000000186999: xor ah, bh; push rax; xor esp, edi; call rax; 
0x000000000007c939: xor al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000001b0798: xor al, 0; add byte ptr [rax], al; hlt; and eax, 0x65300002; clc; jmp qword ptr [rbx]; 
0x00000000001b0e88: xor al, 0; add byte ptr [rax], al; in al, 0x2c; add al, byte ptr [rax]; sbb dh, 0xf6; jmp qword ptr [rcx]; 
0x000000000019d788: xor al, 0; add byte ptr [rax], al; in al, 0xf5; add byte ptr [rax], al; adc byte ptr [rdi - 0x11], ah; jmp qword ptr [rsi]; 
0x00000000001b0710: xor al, 0; add byte ptr [rax], al; insb byte ptr [rdi], dx; and eax, 0x65480002; clc; jmp qword ptr [rbx]; 
0x00000000001a6348: xor al, 0; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rcx], 0xf4c5c000; call qword ptr [rax + 5]; 
0x00000000001b0a08: xor al, 0; add byte ptr [rax], al; sub byte ptr fs:[rdx], al; add byte ptr [rax + 0x64], dh; clc; jmp qword ptr [rbx]; 
0x00000000000fb1b1: xor al, 0; add byte ptr [rax], al; syscall; 
0x000000000007d345: xor al, 0; add dword ptr [rbx - 0xd], ebx; ret; 
0x000000000007c8d4: xor al, 0; add dword ptr [rip + 0x3440e7], 1; ret; 
0x000000000007e19f: xor al, 0; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000006fffd: xor al, 0; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000007141d: xor al, 0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000007840f: xor al, 0; mov rdi, qword ptr [rax]; call 0x5eaf0; add rsp, 0xd8; ret; 
0x00000000000784c1: xor al, 0; mov rdi, qword ptr [rax]; call 0x64230; add rsp, 0xd8; ret; 
0x000000000007c855: xor al, 0; ret; 
0x00000000001117e8: xor al, 0x17; sub eax, dword ptr [rax]; call rax; 
0x00000000000814cf: xor al, 0x18; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000828d5: xor al, 0x18; pop rbx; ret; 
0x00000000001738ea: xor al, 0x19; xchg dword ptr [rcx + 0x79], ecx; xchg eax, edx; ret 0xf869; 
0x0000000000082ddc: xor al, 0x24; jmp rax; 
0x00000000000c0a4e: xor al, 0x24; mov eax, ecx; movsxd rdi, dword ptr [rsp + 8]; syscall; 
0x0000000000129b88: xor al, 0x24; mov esi, 4; mov qword ptr [rsp + 8], rdi; mov rdi, rbx; call qword ptr [rax]; 
0x0000000000110e1f: xor al, 0x24; mov r8, rbp; mov ecx, 0x400; mov rdx, r15; mov rdi, r12; call rax; 
0x00000000000c1cf4: xor al, 0x25; rol byte ptr [rdx], 1; add byte ptr [rax], al; ret; 
0x000000000012ab14: xor al, 0x29; add byte ptr [rax - 0x73], cl; adc eax, 0x298d62; mov qword ptr fs:[rax], rdx; ret; 
0x000000000018cef0: xor al, 0x2a; stc; jmp rsp; 
0x00000000000fa994: xor al, 0x2c; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001a0edc: xor al, 0x2d; add dword ptr [rax], eax; rcl ah, 1; int1; jmp qword ptr [rbx]; 
0x000000000005d516: xor al, 0x36; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000048876: xor al, 0x37; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000002041: xor al, 0x39; push rbx; cmp byte ptr [rdi - 0x19ade7f3], dl; ret; 
0x00000000001a1cdc: xor al, 0x3b; add dword ptr [rax], eax; mov al, 0xee; int1; jmp qword ptr [rcx]; 
0x00000000000f09be: xor al, 0x41; mov dword ptr [rax + 0x38], edx; mov word ptr [r8 + 0x21], si; ret; 
0x00000000000361ba: xor al, 0x48; and eax, edx; or rdi, rax; movq xmm1, rdi; movapd xmm0, xmm1; ret; 
0x0000000000096fdb: xor al, 0x48; lea eax, dword ptr [rdi + rax + 0x20]; ret; 
0x000000000006cdea: xor al, 0x48; lea ecx, dword ptr [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000011fffb: xor al, 0x48; mov eax, dword ptr [rbp + 8]; mov rdi, rbp; call qword ptr [rax + 0x20]; 
0x000000000018c7c8: xor al, 0x49; clc; push qword ptr [rbx + rcx*2 + 2]; add byte ptr [rdx + rcx*2], al; clc; call rsp; 
0x000000000018a03c: xor al, 0x5c; add dword ptr [rax], eax; hlt; ret 0xfff0; 
0x00000000000f0674: xor al, 0x75; fild word ptr [rcx + 0xf]; xor byte ptr [rcx], 0xc0; ret; 
0x0000000000194324: xor al, 0x80; in al, dx; jmp qword ptr [rdx]; 
0x00000000000a1b41: xor al, 0x81; add rcx, rsi; jmp rcx; 
0x00000000000a1b01: xor al, 0x82; add rdx, rsi; jmp rdx; 
0x00000000001871ec: xor al, 0x89; cld; inc esp; mov ah, bh; call qword ptr [rax + rcx*4 - 4]; jmp rsp; 
0x0000000000020c72: xor al, 0x89; inc dword ptr [rdi + 4]; ret; 
0x00000000001ae0ac: xor al, 0x8a; cmc; jmp qword ptr [rdx]; 
0x00000000001a6edc: xor al, 0x8d; add dword ptr [rax], eax; sar dh, 1; hlt; jmp rax; 
0x000000000018ad78: xor al, 0x91; hlt; jmp rsp; 
0x000000000018cb88: xor al, 0x96; clc; call rsp; 
0x00000000001a82dc: xor al, 0xa1; add dword ptr [rax], eax; nop; cmp esi, ebp; jmp qword ptr [rcx]; 
0x00000000001899f0: xor al, 0xa7; out dx, eax; call rsp; 
0x000000000018db10: xor al, 0xa9; cli; jmp rsp; 
0x00000000001276a8: xor al, 0xb0; add rax, rsi; jmp rax; 
0x000000000002fc0c: xor al, 0xbf; add dword ptr [rax], eax; add byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000019a1dc: xor al, 0xc0; add byte ptr [rax], al; nop; and al, 0xee; call qword ptr [rsi]; 
0x000000000018afa8: xor al, 0xc2; cmc; call rsp; 
0x0000000000174aca: xor al, 0xd8; ret; 
0x00000000001ac3dc: xor al, 0xe2; add dword ptr [rax], eax; nop; cld; cmc; call qword ptr [rax]; 
0x000000000018ddd8: xor al, 0xe4; cli; call rsp; 
0x00000000001ad6dc: xor al, 0xf5; add dword ptr [rax], eax; sbb byte ptr [rcx], 0xf6; call rdi; 
0x00000000001a7ff9: xor al, 0xf5; jmp qword ptr [rax]; 
0x00000000001b5845: xor al, 0xf7; jmp qword ptr [rdx]; 
0x0000000000086ad7: xor al, 0xfb; jmp qword ptr [rsi + 0xf]; 
0x00000000000a2a98: xor al, 1; add byte ptr [rax], al; ret; 
0x00000000000fb011: xor al, 1; add byte ptr [rax], al; syscall; 
0x000000000018c288: xor al, 1; clc; call rsp; 
0x0000000000143186: xor al, 4; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000018c308: xor al, 4; clc; jmp rsp; 
0x00000000000542a0: xor al, al; add eax, 0x107; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000000fa4fb: xor al, al; or eax, edi; ret; 
0x00000000000e44c3: xor al, al; ret; 
0x000000000018c621: xor al, bh; call rsp; 
0x0000000000143374: xor al, byte ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000fb241: xor al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000015e76a: xor al, byte ptr [rbx]; add byte ptr [rax], al; cmp byte ptr [rax], 1; sbb rax, -1; ret; 
0x00000000001a147d: xor al, byte ptr [rcx]; add byte ptr [rax - 0x21], dl; int1; jmp qword ptr [rdi + 1]; 
0x00000000000eafea: xor al, byte ptr [rcx]; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000000f1ec1: xor al, byte ptr [rcx]; add byte ptr [rax], al; syscall; 
0x000000000014609a: xor al, byte ptr [rdi]; add al, 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000eaeba: xor al, byte ptr [rsi - 0xd]; jmp qword ptr [rsi - 0x70]; 
0x0000000000178358: xor al, ch; std; call qword ptr [rax]; 
0x0000000000186774: xor al, dl; sti; inc dword ptr [rax - 0x2f00042f]; sar bl, cl; jmp qword ptr [rax]; 
0x00000000000efcb8: xor ax, ax; ret; 
0x0000000000186ac1: xor bh, ah; jmp rax; 
0x0000000000186299: xor bh, bl; inc eax; xor edi, ebx; jmp qword ptr [rax + 0x35]; 
0x0000000000033d72: xor bh, byte ptr [rbx - 0x76b6ffc8]; ret 0x65e9; 
0x000000000000314b: xor bh, byte ptr [rsi - 0xd]; add ebp, esi; mov eax, 0xa1a3e95a; ret 0xba88; 
0x00000000001867c8: xor bh, dl; sti; inc dword ptr [rax + 0x58fffbd8]; add al, 0xfc; jmp qword ptr [rax]; 
0x00000000001866a0: xor bl, ah; sti; call qword ptr [rax]; 
0x0000000000186295: xor bl, bh; jmp qword ptr [rax]; 
0x000000000000360d: xor bl, byte ptr [rbx + 0x1bb67a8c]; add eax, 0x572808a8; call qword ptr [rsi + 0x6f]; 
0x000000000003202a: xor bl, ch; cmp byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001a7d58: xor bpl, sil; jmp qword ptr [rax]; 
0x000000000019adec: xor bpl, sil; jmp qword ptr [rdx]; 
0x00000000000a2b8c: xor byte ptr [r11], r15b; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x000000000008bcfd: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x000000000008bd71: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000111292: xor byte ptr [r8 + 1], dil; pop rbx; ret; 
0x000000000007b0a0: xor byte ptr [r8 - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000012b0ca: xor byte ptr [r8 - 0x77], r9b; and al, 0x20; mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x0000000000127f31: xor byte ptr [r8 - 0x77], r9b; push rdi; cmp byte ptr [rax + 1], bh; ret; 
0x00000000000725ef: xor byte ptr [r8 - 0x77], r9b; sbb byte ptr [r9 + r9*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000000d4c4f: xor byte ptr [r9], sil; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000001b438: xor byte ptr [rax + 0x18], ah; add byte ptr [rax], al; add byte ptr [rax], al; add al, dh; ret; 
0x000000000004425c: xor byte ptr [rax + 0x29], cl; ret 0x2949; 
0x00000000000721db: xor byte ptr [rax + 0x29], cl; ret; 
0x00000000000d4d87: xor byte ptr [rax + 0x39], cl; ret 0x830f; 
0x00000000000eb3e7: xor byte ptr [rax + 0x437501e5], al; mov edx, edx; movsxd rdi, edi; mov eax, 0x10c; syscall; 
0x00000000000b8b7f: xor byte ptr [rax + 0x63], cl; ret 0x894c; 
0x0000000000111293: xor byte ptr [rax + 1], bh; pop rbx; ret; 
0x0000000000096fb6: xor byte ptr [rax + 1], cl; ret 0x547c; 
0x0000000000143576: xor byte ptr [rax + rax], al; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000fad84: xor byte ptr [rax + rax], ch; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000187998: xor byte ptr [rax - 0x585f0004], ch; cld; jmp qword ptr [rax]; 
0x000000000011ee27: xor byte ptr [rax - 0x73], cl; add eax, 0x2a4871; pop rbx; ret; 
0x000000000011edef: xor byte ptr [rax - 0x73], cl; add eax, 0x2a48a9; pop rbx; ret; 
0x000000000011ed30: xor byte ptr [rax - 0x73], cl; add eax, 0x2a4968; pop rbx; ret; 
0x0000000000178198: xor byte ptr [rax - 0x757f000f], cl; int1; call rax; 
0x000000000008263d: xor byte ptr [rax - 0x75], cl; add eax, 0x33b88b; mov qword ptr [rax], rdi; ret; 
0x0000000000086cbf: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x000000000012b0cb: xor byte ptr [rax - 0x77], cl; and al, 0x20; mov rax, qword ptr [rdi + 0x38]; mov qword ptr [rsp + 0x28], rax; mov rax, qword ptr [rdi + 8]; call qword ptr [rax + 0x18]; 
0x000000000012e75a: xor byte ptr [rax - 0x77], cl; and al, 8; xor eax, eax; call rdx; 
0x000000000007b0a1: xor byte ptr [rax - 0x77], cl; and byte ptr [r9 + 0x5bc03113], cl; ret; 
0x000000000004989f: xor byte ptr [rax - 0x77], cl; fucompi st(0); push 0x480004e2; add esp, 0x440; pop rbx; ret; 
0x0000000000127f32: xor byte ptr [rax - 0x77], cl; push rdi; cmp byte ptr [rax + 1], bh; ret; 
0x00000000000b6287: xor byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000000e5d00: xor byte ptr [rax - 0x77], cl; ret 0x8b44; 
0x000000000006ca71: xor byte ptr [rax - 0x77], cl; ret 0xee83; 
0x00000000000e22af: xor byte ptr [rax - 0x77], cl; ret 0xf980; 
0x00000000000dd2e9: xor byte ptr [rax - 0x77], cl; ret; 
0x00000000000725f0: xor byte ptr [rax - 0x77], cl; sbb byte ptr [r9 + r9*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000187078: xor byte ptr [rax - 0x783f0004], cl; cld; call qword ptr [rax - 0x79]; 
0x0000000000187078: xor byte ptr [rax - 0x783f0004], cl; cld; call qword ptr [rax - 0x79]; cld; jmp rax; 
0x0000000000059f72: xor byte ptr [rax - 0x7d], cl; ret; 
0x0000000000178134: xor byte ptr [rax - 0xf], dl; inc dword ptr [rax + 0x52]; int1; call qword ptr [rax + 0x54]; 
0x000000000018eaf0: xor byte ptr [rax - 3], ah; jmp qword ptr [rdx]; 
0x00000000001862dc: xor byte ptr [rax - 5], dl; call qword ptr [rax]; 
0x0000000000186294: xor byte ptr [rax], 0xfb; jmp qword ptr [rax]; 
0x00000000000e44fc: xor byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000008ab08: xor byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; jmp rax; 
0x0000000000021f63: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000000bdfd3: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; add rsp, 0x38; ret; 
0x0000000000031e1d: xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x0000000000036b53: xor byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x00000000001120ac: xor byte ptr [rax], al; add byte ptr [rax], al; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x0000000000046330: xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006f7e5: xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c085: xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c485: xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab6d: xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb41: xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007add5: xor byte ptr [rax], al; add byte ptr [rax], al; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x0000000000108f6f: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x108fa0; add rsp, 0xd8; ret; 
0x00000000001090ba: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x1090d0; add rsp, 0xd8; ret; 
0x000000000010a344: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x10a360; add rsp, 0xd8; ret; 
0x000000000010a554: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x10a570; add rsp, 0xd8; ret; 
0x000000000010c0ea: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x10c100; add rsp, 0xd8; ret; 
0x000000000004871f: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x475b0; add rsp, 0xd8; ret; 
0x0000000000054329: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x49c40; add rsp, 0xd8; ret; 
0x000000000005d079: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x5cfc0; add rsp, 0xd8; ret; 
0x000000000005e409: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x5e420; add rsp, 0xd8; ret; 
0x0000000000078349: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x5eaf0; add rsp, 0xd8; ret; 
0x0000000000078559: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x6c6c0; add rsp, 0xd8; ret; 
0x000000000005d1b9: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x70930; add rsp, 0xd8; ret; 
0x0000000000054589: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x72120; add rsp, 0xd8; ret; 
0x0000000000054619: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x72280; add rsp, 0xd8; ret; 
0x0000000000054464: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x72420; add rsp, 0xd8; ret; 
0x0000000000072829: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x72620; add rsp, 0xd8; ret; 
0x0000000000073bd4: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x73c60; add rsp, 0xd8; ret; 
0x0000000000073e19: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x73d20; add rsp, 0xd8; ret; 
0x00000000000af649: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0xaf660; add rsp, 0xd8; ret; 
0x00000000000f4491: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0xf3ec0; add rsp, 0xd8; ret; 
0x0000000000065aa6: xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x00000000000641ae: xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed32: xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fc8: xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efbe: xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e8a: xor byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x00000000000a1b65: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000000fb581: xor byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000000c0d74: xor byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; mov eax, 0x22; syscall; 
0x00000000000c0dd4: xor byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; mov eax, 0x23; syscall; 
0x0000000000060290: xor byte ptr [rax], al; add byte ptr [rbx - 0x10df43], al; call qword ptr [rbx + 0xf]; 
0x00000000000bc80d: xor byte ptr [rax], al; lea rdi, qword ptr [rip + 0x3032ea]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc7ed: xor byte ptr [rax], al; lea rdi, qword ptr [rip + 0x30330a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000bc70e: xor byte ptr [rax], al; lea rdi, qword ptr [rip + 0x3033e9]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc6ec: xor byte ptr [rax], al; lea rdi, qword ptr [rip + 0x30340b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc505: xor byte ptr [rax], al; lea rdi, qword ptr [rip + 0x3035f2]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc4da: xor byte ptr [rax], al; lea rdi, qword ptr [rip + 0x30361d]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc38d: xor byte ptr [rax], al; lea rdi, qword ptr [rip + 0x30376a]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc328: xor byte ptr [rax], al; lea rdi, qword ptr [rip + 0x3037cf]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000b4a1d: xor byte ptr [rax], al; mov dword ptr [rdx], eax; xor edx, edx; add rsp, 8; mov rax, rdx; ret; 
0x00000000000b42f5: xor byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000000b05b5: xor byte ptr [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x00000000000bcde2: xor byte ptr [rax], al; mov dword ptr fs:[rax], 2; xor eax, eax; ret; 
0x00000000000c10cd: xor byte ptr [rax], al; mov rdi, r9; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bcd92: xor byte ptr [rax], al; movsxd rdi, ebp; mov al, 3; mov esi, dword ptr fs:[rdx]; syscall; 
0x00000000000b1425: xor byte ptr [rax], al; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000bc32f: xor byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bc7f4: xor byte ptr [rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000be057: xor byte ptr [rax], dh; add byte ptr [rbp + 0x28], dh; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x00000000001a7d40: xor byte ptr [rax], dh; cmc; jmp qword ptr [rcx]; 
0x00000000000a1067: xor byte ptr [rax], dh; in eax, dx; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000a2b90: xor byte ptr [rbp + 0x3d], dh; ret; 
0x00000000000a2b8f: xor byte ptr [rbp + 0x3d], r14b; ret; 
0x000000000016065c: xor byte ptr [rbp + 2], bl; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x00000000000a06dc: xor byte ptr [rbp + rcx*4 + 0x1d], cl; mov al, 0x80; or eax, 0xc634900; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009fd71: xor byte ptr [rbp + rcx*4 + 0x1d], cl; wait; mov dword ptr [rip + 0xc634900], ecx; xchg eax, ebx; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000009e291: xor byte ptr [rbp + rcx*4 + 0x1d], cl; wait; movabs byte ptr [0x8d49930c6349000d], al; or al, 0xb; jmp rcx; 
0x0000000000088659: xor byte ptr [rbp + rcx*4 + 0x48], al; rol byte ptr [rcx + 0xf], 1; xchg eax, esp; ret 0x8341; 
0x00000000000a3a5c: xor byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x38; mov rsi, rbp; mov rdi, qword ptr [r12]; lea rcx, qword ptr [rax + 1]; call rbx; 
0x00000000000a89f8: xor byte ptr [rbp + rsi*8 - 0x73], dh; rol byte ptr [r11 - 0x78f0f608], 1; pushfq; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000001b07a0: xor byte ptr [rbp - 8], ah; jmp qword ptr [rbx]; 
0x0000000000070b2e: xor byte ptr [rbx + 0x10], dh; lea rax, qword ptr [rcx + 1]; mov qword ptr [rdx + 0x28], rax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x0000000000070b2d: xor byte ptr [rbx + 0x10], sil; lea rax, qword ptr [rcx + 1]; mov qword ptr [rdx + 0x28], rax; mov byte ptr [rcx], dil; movzx eax, dil; ret; 
0x0000000000075059: xor byte ptr [rbx + 0x374fff8], al; and dword ptr [rbx], 0xffffffef; pop rbx; ret; 
0x00000000000837da: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000000c2c13: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000019bb07: xor byte ptr [rbx + 0xae60206], al; ret; 
0x000000000008c9ab: xor byte ptr [rbx + rcx*4 + 0x76], cl; cmp byte ptr [rax + 0xf], cl; ret; 
0x000000000007bdbe: xor byte ptr [rbx - 0x198a0008], al; pop rbx; ret; 
0x0000000000187980: xor byte ptr [rbx - 0x5d5f0004], ah; cld; call qword ptr [rax]; 
0x00000000001a5390: xor byte ptr [rbx - 0xc], bh; jmp qword ptr [rcx]; 
0x0000000000186a00: xor byte ptr [rbx], 0xfc; jmp qword ptr [rax + 0x35]; 
0x00000000001868b0: xor byte ptr [rbx], al; cld; push rax; add al, 0xfc; call rax; 
0x00000000001a8280: xor byte ptr [rbx], bh; cmc; jmp qword ptr [rcx]; 
0x00000000000a2b8d: xor byte ptr [rbx], bh; xor byte ptr [rbp + 0x3d], r14b; ret; 
0x00000000001a7940: xor byte ptr [rbx], ch; cmc; jmp qword ptr [rcx]; 
0x00000000000a7973: xor byte ptr [rcx + 0x39], cl; ret 0x840f; 
0x0000000000001b20: xor byte ptr [rcx + 0x3a6d4813], ah; ret; 
0x00000000000cee1c: xor byte ptr [rcx + 0xf40247c], cl; xchg eax, esp; ret 0xff83; 
0x0000000000059c6c: xor byte ptr [rcx + 0xf], al; mov dh, 0x45; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000080840: xor byte ptr [rcx + rcx*4 + 0x5c], al; and al, 0x28; call rax; 
0x0000000000074e3c: xor byte ptr [rcx + rcx*4 + 0x60], cl; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000000ed643: xor byte ptr [rcx + rcx*4 - 0x1a], cl; call qword ptr [rbx + 0x40]; 
0x0000000000135f0c: xor byte ptr [rcx - 0x17f3dbbc], cl; ficom dword ptr [rbp + 0x448bffee]; and al, 0xc; add rsp, 0x48; ret; 
0x0000000000055dfb: xor byte ptr [rcx - 0x7d], cl; ret 0x4101; 
0x000000000005517a: xor byte ptr [rcx - 0x7d], cl; ret 0x4401; 
0x0000000000055a3b: xor byte ptr [rcx - 0x7d], cl; ret 0xe901; 
0x00000000000e19e2: xor byte ptr [rcx], 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000116223: xor byte ptr [rcx], 0xc0; pop rbx; ret; 
0x00000000000f067c: xor byte ptr [rcx], 0xc0; ret; 
0x00000000000fafba: xor byte ptr [rcx], al; add byte ptr [rax], al; syscall; 
0x000000000018687c: xor byte ptr [rcx], cl; cld; call qword ptr [rax]; 
0x000000000018687c: xor byte ptr [rcx], cl; cld; call qword ptr [rax]; or edi, esp; jmp rax; 
0x00000000001a4850: xor byte ptr [rcx], cl; hlt; jmp rdx; 
0x00000000000d4c50: xor byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x00000000000fd922: xor byte ptr [rcx], dh; rol byte ptr [rbx - 0x69f0f601], 0xc0; ret; 
0x000000000011dfdb: xor byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x1a], cl; mov rdi, rbp; mov rcx, r13; call rbx; 
0x00000000001b5964: xor byte ptr [rdi + rsi*8], dh; jmp qword ptr [rdx]; 
0x0000000000187570: xor byte ptr [rdi - 0x513f0004], ch; cld; call qword ptr [rax - 0x52]; 
0x00000000001786c0: xor byte ptr [rdi - 0xe], ch; call qword ptr [rax + 0x6f]; 
0x00000000001862fc: xor byte ptr [rdi - 5], bl; call qword ptr [rax]; 
0x00000000000009e8: xor byte ptr [rdx + 0x310e2044], ch; rol qword ptr [rax + 0x4260a120], cl; ret 0x4021; 
0x0000000000092f14: xor byte ptr [rdx + 0xe], 0x2a; ret; 
0x00000000000fa63f: xor byte ptr [rdx + 8], bh; mov rsi, rbp; mov rdi, rbx; mov eax, 0x11a; syscall; 
0x0000000000003149: xor byte ptr [rdx + rsi - 0x11fc0c82], ch; mov eax, 0xa1a3e95a; ret 0xba88; 
0x00000000001864b4: xor byte ptr [rdx - 0x553f0003], ch; std; call qword ptr [rax - 0x55]; 
0x000000000018c37d: xor byte ptr [rdx], al; add byte ptr [rax + rcx - 8], ah; jmp rsp; 
0x00000000001918b7: xor byte ptr [rdx], al; ret; 
0x0000000000186b20: xor byte ptr [rdx], bl; cld; inc dword ptr [rax - 0x2f0003e5]; sbb al, 0xfc; jmp qword ptr [rax]; 
0x000000000007f877: xor byte ptr [rdx], dh; sete dl; mov dword ptr [rip + 0x33e8de], edx; movsxd rdi, ecx; mov eax, 3; syscall; 
0x0000000000186894: xor byte ptr [rip + 0x710fffc], al; cld; push rax; or ah, bh; call rax; 
0x00000000001aa2e3: xor byte ptr [rsi + 0x380e4106], al; add dword ptr [rdi], 3; add dword ptr [rdx], r9d; ret; 
0x0000000000176956: xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x000000000015fd2f: xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000015fd2a: xor byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000008a7dc: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000008bcfe: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000008bd72: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x4e7af040], 0; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000177f64: xor byte ptr [rsi - 0x11], dl; call qword ptr [rax]; 
0x00000000001a4d80: xor byte ptr [rsi - 0xc], ah; jmp qword ptr [rcx]; 
0x00000000001786a0: xor byte ptr [rsi - 0xe], ch; call qword ptr [rax + 0x6e]; 
0x0000000000178454: xor byte ptr [rsi - 0xe], dl; jmp qword ptr [rax + 0x56]; 
0x0000000000186314: xor byte ptr [rsi - 5], ch; inc dword ptr [rax - 0x2f000491]; jo 0x18631a; jmp qword ptr [rax]; 
0x00000000001868f8: xor byte ptr [rsi], al; cld; call qword ptr [rax]; 
0x0000000000186994: xor byte ptr [rsi], ch; cld; call qword ptr [rax]; 
0x0000000000187788: xor byte ptr [rsp + rdi*8 - 0x3543f01], ch; jmp qword ptr [rax - 0x5f]; 
0x00000000001782c4: xor byte ptr [rsp + rdi*8 - 0x3625f01], bl; call qword ptr [rax]; 
0x0000000000186d64: xor byte ptr [rsp + rdi*8 - 1], ah; shl byte ptr [rbx - 4], 0xff; push rax; movsxd rdi, esp; jmp rax; 
0x00000000000be056: xor byte ptr es:[rax], dh; add byte ptr [rbp + 0x28], dh; mov dword ptr fs:[rdx], r8d; mov rax, rsi; add rsp, 8; ret; 
0x00000000000bc4e0: xor byte ptr ss:[rax], al; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000001ad0df: xor ch, 0xff; sbb al, 0xd; fdivr dword ptr [rbp - 0xb]; jmp qword ptr [rdx]; 
0x00000000000fab74: xor ch, byte ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000a0df8: xor ch, ch; mov byte ptr [rdi + 0x10], ch; ret; 
0x00000000000a0e0e: xor ch, ch; mov byte ptr [rdi + 0x11], ch; ret; 
0x00000000000a0e30: xor ch, ch; mov byte ptr [rdi + 0x12], ch; ret; 
0x00000000000a0e4e: xor ch, ch; mov byte ptr [rdi + 0x13], ch; ret; 
0x00000000000a0e6e: xor ch, ch; mov byte ptr [rdi + 0x14], ch; ret; 
0x00000000000a0e94: xor ch, ch; mov byte ptr [rdi + 0x15], ch; ret; 
0x00000000000a0eb0: xor ch, ch; mov byte ptr [rdi + 0x16], ch; ret; 
0x00000000000a0ed0: xor ch, ch; mov byte ptr [rdi + 0x17], ch; ret; 
0x00000000000a0ef0: xor ch, ch; mov byte ptr [rdi + 0x18], ch; ret; 
0x00000000000a0f16: xor ch, ch; mov byte ptr [rdi + 0x19], ch; ret; 
0x00000000000a0f38: xor ch, ch; mov byte ptr [rdi + 0x1a], ch; ret; 
0x00000000000a0f56: xor ch, ch; mov byte ptr [rdi + 0x1b], ch; ret; 
0x00000000000a0f76: xor ch, ch; mov byte ptr [rdi + 0x1c], ch; ret; 
0x00000000000a0f92: xor ch, ch; mov byte ptr [rdi + 0x1d], ch; ret; 
0x00000000000a0fb2: xor ch, ch; mov byte ptr [rdi + 0x1e], ch; ret; 
0x00000000000a0fd2: xor ch, ch; mov byte ptr [rdi + 0x1f], ch; ret; 
0x00000000000a0ff2: xor ch, ch; mov byte ptr [rdi + 0x20], ch; ret; 
0x00000000000a1018: xor ch, ch; mov byte ptr [rdi + 0x21], ch; ret; 
0x00000000000a1068: xor ch, ch; mov byte ptr [rdi + 0x40], ch; ret; 
0x00000000000a0d3e: xor ch, ch; mov byte ptr [rdi + 0xa], ch; ret; 
0x00000000000a0d5c: xor ch, ch; mov byte ptr [rdi + 0xb], ch; ret; 
0x00000000000a0d7c: xor ch, ch; mov byte ptr [rdi + 0xc], ch; ret; 
0x00000000000a0d9e: xor ch, ch; mov byte ptr [rdi + 0xd], ch; ret; 
0x00000000000a0dbe: xor ch, ch; mov byte ptr [rdi + 0xe], ch; ret; 
0x00000000000a0dde: xor ch, ch; mov byte ptr [rdi + 0xf], ch; ret; 
0x00000000000a0c74: xor ch, ch; mov byte ptr [rdi + 1], ch; ret; 
0x00000000000a0c86: xor ch, ch; mov byte ptr [rdi + 2], ch; ret; 
0x00000000000a0c9c: xor ch, ch; mov byte ptr [rdi + 3], ch; ret; 
0x00000000000a0cb4: xor ch, ch; mov byte ptr [rdi + 4], ch; ret; 
0x00000000000a0cca: xor ch, ch; mov byte ptr [rdi + 5], ch; ret; 
0x00000000000a0cdc: xor ch, ch; mov byte ptr [rdi + 6], ch; ret; 
0x00000000000a0cfa: xor ch, ch; mov byte ptr [rdi + 7], ch; ret; 
0x00000000000a0d06: xor ch, ch; mov byte ptr [rdi + 8], ch; ret; 
0x00000000000a0d1c: xor ch, ch; mov byte ptr [rdi + 9], ch; ret; 
0x00000000000a0c60: xor ch, ch; mov byte ptr [rdi], ch; ret; 
0x00000000001a7d59: xor ch, dh; jmp qword ptr [rax]; 
0x00000000001a7d41: xor ch, dh; jmp qword ptr [rcx]; 
0x000000000019ada5: xor ch, dh; jmp qword ptr [rdx]; 
0x00000000001a0d5f: xor cl, 0xff; sbb al, 0xd; fidivr word ptr [rsi - 0xf]; jmp qword ptr [rdx]; 
0x000000000015fbdd: xor cl, byte ptr [rax - 0x75]; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000001276ef: xor cl, byte ptr [rax - 0x77]; jp 0x1276fc; ret; 
0x0000000000127707: xor cl, byte ptr [rax - 0x77]; jp 0x127714; ret; 
0x0000000000127f4f: xor cl, byte ptr [rax - 0x77]; jp 0x127f5c; ret; 
0x0000000000127f67: xor cl, byte ptr [rax - 0x77]; jp 0x127f74; ret; 
0x0000000000127f97: xor cl, byte ptr [rax - 0x77]; jp 0x127fa4; ret; 
0x0000000000046ffd: xor cl, byte ptr [rax - 0x77]; ret 0x8d48; 
0x00000000000b0276: xor cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x00000000000b803e: xor cl, byte ptr [rax - 0x77]; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x00000000001234e0: xor cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x00000000000e85e6: xor cl, byte ptr [rax - 0x7d]; ret; 
0x00000000000d0bb7: xor cl, byte ptr [rax]; xor eax, eax; ret; 
0x000000000010c84b: xor cl, byte ptr [rcx - 0x7d]; ret 0x4d04; 
0x00000000000e7276: xor cl, byte ptr [rcx]; add byte ptr [rdx + 0x63], cl; adc al, 0x98; add rax, rdx; jmp rax; 
0x000000000007f878: xor cl, byte ptr [rdi]; xchg eax, esp; ret 0x1589; 
0x0000000000187124: xor cl, byte ptr [rdx - 0x763d0004]; cld; call qword ptr [rdx - 0x77]; 
0x0000000000187124: xor cl, byte ptr [rdx - 0x763d0004]; cld; call qword ptr [rdx - 0x77]; cld; jmp rdx; 
0x00000000001034f1: xor cl, ch; ret; 
0x000000000009c780: xor cl, cl; mov byte ptr [rax], cl; mov rax, rdi; ret; 
0x00000000001a20b0: xor dh, bh; int1; jmp qword ptr [rcx]; 
0x0000000000003147: xor dh, bh; xor byte ptr [rdx + rsi - 0x11fc0c82], ch; mov eax, 0xa1a3e95a; ret 0xba88; 
0x000000000009d3aa: xor dh, byte ptr [rax + 0x6349000d]; or al, 0x93; lea rcx, qword ptr [r11 + rcx]; jmp rcx; 
0x000000000018761c: xor dh, byte ptr [rcx - 0x4f3d0004]; cld; call qword ptr [rdx - 0x50]; 
0x000000000018761c: xor dh, byte ptr [rcx - 0x4f3d0004]; cld; call qword ptr [rdx - 0x50]; cld; jmp rdx; 
0x00000000000faa32: xor dh, byte ptr [rsp + rbp]; add bh, dh; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x00000000001a7e91: xor dh, ch; call qword ptr [rsi]; 
0x000000000010b89f: xor dh, ch; inc dword ptr [rbp - 0x7b]; in al, 0x89; ret 0x87e; 
0x00000000001a7ec1: xor dh, ch; jmp qword ptr [rcx]; 
0x000000000019ad5d: xor dh, ch; jmp qword ptr [rdx]; 
0x000000000019cfd0: xor dh, dh; out dx, al; call qword ptr [rdx + 4]; 
0x000000000012c7ca: xor dh, dh; sti; jmp qword ptr [rsi - 0x70]; 
0x00000000000360dc: xor dl, 0xf; adc dword ptr [rdi], eax; and rax, rdx; movq xmm0, rax; ret; 
0x000000000003f9fb: xor dl, 0xff; dec dword ptr [rax + 0x63]; ret 0x3ce9; 
0x0000000000022b67: xor dl, byte ptr [rax + rax]; mov eax, eax; movsxd rax, dword ptr [rdx + rax*4]; add rdx, rax; jmp rdx; 
0x00000000000647fc: xor dl, byte ptr [rcx]; add byte ptr [rdx + 0x63], cl; adc al, 0xa0; add rax, rdx; jmp rax; 
0x000000000000087b: xor dl, byte ptr [rcx]; out 0xc, eax; movabs eax, dword ptr [0x10c0449000e]; ret 0x440c; 
0x0000000000029183: xor dl, byte ptr [rip + 0x3d8d4800]; ret; 
0x000000000013516c: xor dl, ch; sub byte ptr [rax], al; mov eax, 0; cmove rax, rdx; add rsp, 8; ret; 
0x00000000000e3ffe: xor dl, dl; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000121549: xor dword ptr [rax + 0x23], 0; add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rax + 0x28]; 
0x0000000000143426: xor dword ptr [rax + rax], eax; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x00000000000fac97: xor dword ptr [rax + rax], ebp; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000e2581: xor dword ptr [rax - 0x75], ecx; adc byte ptr [rax + 0x39], cl; ret; 
0x000000000007b7c3: xor dword ptr [rax - 0x75], ecx; sbb eax, 0; add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rax + 0x20]; 
0x0000000000096bae: xor dword ptr [rax - 0x7c], eax; div byte ptr [rbp - 0x14]; mov qword ptr [rdx], rcx; ret; 
0x000000000004c5ec: xor dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x00000000000fb121: xor dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000000b066b: xor dword ptr [rax], eax; add rsp, 0x28; ret; 
0x00000000000b2113: xor dword ptr [rax], eax; add rsp, 8; ret; 
0x00000000000aeffd: xor dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x310afa]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aef46: xor dword ptr [rax], eax; lea rdi, qword ptr [rip + 0x310bb1]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000aef4d: xor dword ptr [rax], eax; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000173f2f: xor dword ptr [rbp + rcx*4 - 0x62], edi; int 0xe0; fdivr st(4); test al, 0x97; xchg eax, esp; ret; 
0x0000000000186400: xor dword ptr [rbp + rdi*8 - 0x2533e01], ebp; jmp qword ptr [rcx - 0x53]; 
0x000000000011bcc3: xor dword ptr [rbx - 0x72b7ffd6], eax; xor eax, 0xfffff7a2; lea rdi, qword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000faae3: xor dword ptr [rbx], 0xd8f7002c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000189b5d: xor dword ptr [rcx], eax; add bl, cl; shr bh, 1; lcall ptr [rcx + rsi - 0x2f15ffff]; out dx, eax; jmp rsp; 
0x00000000000fa8c1: xor dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000189b65: xor dword ptr [rcx], eax; add dl, ch; shr bh, 1; jmp rsp; 
0x00000000000fbd33: xor dword ptr [rcx], esp; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000931b2: xor dword ptr [rdi + rdi*8], 0xffffffff; jmp qword ptr [rsi + 0xf]; 
0x00000000000faf33: xor dword ptr [rdi], ebp; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ebf33: xor dword ptr [rdi], ebx; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000ecf33: xor dword ptr [rdi], ecx; sub eax, 0x64d8f700; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001acc64: xor dword ptr [rdx - 0xb], edi; jmp qword ptr [rdx]; 
0x00000000000eb433: xor dword ptr [rdx], ebp; sub eax, 0xc76400; pop rdi; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000000fac33: xor dword ptr [rdx], esi; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fb133: xor dword ptr [rip - 0x2708ffd4], ebp; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000fa933: xor dword ptr [rip - 0x2708ffd4], esi; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000132033: xor dword ptr [rsi - 0x7c9bffd8], edi; cmp byte ptr [rbx + 0xf], dh; test byte ptr [rip + 0x48ffffff], ch; movsxd rdi, ebx; mov eax, 3; syscall; 
0x00000000000f4a33: xor dword ptr [rsp + rbp + 0x64d8f700], edx; mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000006d17b: xor eax, 0x10ac74; movsxd rcx, dword ptr [rsi + rcx*4]; add rsi, rcx; jmp rsi; 
0x000000000006c812: xor eax, 0x10b479; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rsi, rax; jmp rsi; 
0x0000000000046336: xor eax, 0x195; call rax; 
0x00000000000f0492: xor eax, 0x20; mov qword ptr [rbx + 0x48], rax; pop rbx; ret; 
0x000000000006f7eb: xor eax, 0x30; call rax; 
0x0000000000065aac: xor eax, 0x3584af; call rax; 
0x00000000000641b4: xor eax, 0x359da7; call rax; 
0x000000000005ed38: xor eax, 0x35f223; call rax; 
0x0000000000055fce: xor eax, 0x367f8d; call rax; 
0x000000000004efc4: xor eax, 0x36ef97; call rax; 
0x0000000000049e90: xor eax, 0x3740cb; call rax; 
0x00000000001869e5: xor eax, 0x3790fffc; cld; call qword ptr [rax + 0x20fffc39]; sub al, 0xfc; jmp rax; 
0x00000000001869a5: xor eax, 0x37d0fffc; cld; call rax; cmp esp, edi; jmp qword ptr [rax + 0x2c]; 
0x00000000000487ae: xor eax, 0x39480037; ret; 
0x000000000008ab67: xor eax, 0x39fffad0; ret; 
0x00000000000225ea: xor eax, 0x3a1649; mov dword ptr [rip + 0x3a1646], r8d; lea rax, qword ptr [rip + 0x3a1603]; mov dword ptr [rip + 0x3a15fd], edi; pop rbx; ret; 
0x0000000000174a7a: xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000133857: xor eax, 0x480028c0; mov edi, edx; call qword ptr [rax + 0x20]; 
0x000000000006cdd8: xor eax, 0x48b4800; ret 0x8548; 
0x0000000000064e28: xor eax, 0x48f63100; lea edi, dword ptr [rbp - 0xf0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f9d47: xor eax, 0x48fff5a7; add esp, 0x10; mov rax, rbx; pop rbx; ret; 
0x00000000000e3c97: xor eax, 0x48fffff6; add esp, 0x18; ret; 
0x0000000000037327: xor eax, 0x48fffffc; add esp, 0x88; pop rbx; pop rbp; ret; 
0x00000000000c2642: xor eax, 0x4a533d48; add byte ptr [r13 + rbp - 0x48], sil; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000143036: xor eax, 0x63490004; adc al, 0x93; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x0000000000133b1b: xor eax, 0x6d058b48; mov ebp, 0x894c0028; salc; mov rdi, r9; call qword ptr [rax + 0x10]; 
0x00000000000eb5b0: xor eax, 0x70c48348; pop rbx; ret; 
0x0000000000037632: xor eax, 0x7502c2f6; sbb byte ptr [rbx + 0xb7501e2], al; xor eax, eax; nop; ret; 
0x000000000012d6ef: xor eax, 0x8478b48; lea rsi, qword ptr [rsp + 0x10]; call qword ptr [rax]; 
0x000000000010b545: xor eax, 0x8545fff5; in al, 0x89; ret 0x87e; 
0x000000000010378e: xor eax, 0x8548fff8; ror byte ptr [rdi], 0x95; ret; 
0x000000000006f7ff: xor eax, 0x8994eb00; ret 0x8b48; 
0x00000000000caccc: xor eax, 0x8bffffff; mov byte ptr [r9 - 0x77], r8b; ret 0xdb84; 
0x000000000006f850: xor eax, 0xa6850f00; add al, 0; add bl, dh; ret; 
0x0000000000024589: xor eax, 0xab2; lea rdi, qword ptr [rip + 0x39b4db]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000243a1: xor eax, 0xc9a; lea rdi, qword ptr [rip + 0x39b6c3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000133bbe: xor eax, 0xca058b48; mov esp, 0x894c0028; salc; mov rdi, r9; call qword ptr [rax + 0x18]; 
0x000000000012bea8: xor eax, 0xd0bfffef; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000001b5917: xor eax, 0xd1cfff7; xor al, 0xf7; jmp qword ptr [rdx]; 
0x00000000001b595f: xor eax, 0xd1cfff7; xor byte ptr [rdi + rsi*8], dh; jmp qword ptr [rdx]; 
0x0000000000189bcd: xor eax, 0xd2750001; out dx, eax; dec dword ptr [rbp + rsi - 0x2d6fffff]; out dx, eax; call rsp; 
0x0000000000189bd5: xor eax, 0xd2900001; out dx, eax; call rsp; 
0x00000000000a1a62: xor eax, 0xd6e59; movsxd rax, dword ptr [rsi + rdi*4]; add rsi, rax; jmp rsi; 
0x00000000000fa874: xor eax, 0xd8f7002c; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000000245d: xor eax, 0xdd410018; out 0xa9, al; ret 0xbd07; 
0x000000000006f7d5: xor eax, 0xe7894800; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x00000000000d4457: xor eax, 0xf000a5c; mov dh, 0xc0; movsxd rax, dword ptr [rcx + rax*4]; add rcx, rax; jmp rcx; 
0x00000000000d0489: xor eax, 0xffffdb52; lea rdi, qword ptr [rip + 0x2f0f2b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007c48b: xor eax, 0xffffe480; call rax; 
0x000000000007c08b: xor eax, 0xffffe880; call rax; 
0x000000000011bcc9: xor eax, 0xfffff7a2; lea rdi, qword ptr [rip + 0x2a76fb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x0000000000049169: xor eax, 0xfffff912; lea rdi, qword ptr [rip + 0x37777b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007addb: xor eax, 0xfffffb30; call rax; 
0x000000000006fb47: xor eax, 0xfffffcd4; call rax; 
0x000000000007ab73: xor eax, 0xfffffd98; call rax; 
0x000000000008aca1: xor eax, 0xfffffdca; lea rdi, qword ptr [rip + 0x335fb3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011ee09: xor eax, 0xfffffe52; lea rdi, qword ptr [rip + 0x2a486b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000010ad71: xor eax, 0xfffffeea; lea rdi, qword ptr [rip + 0x2b7a23]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000011209e: xor eax, 0xffffff7d; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000012ab89: xor eax, 0xffffff82; lea rdi, qword ptr [rip + 0x298ccb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f2499: xor eax, 0xffffff92; lea rdi, qword ptr [rip + 0x2cf08b]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f5d89: xor eax, 0xffffffff; dec dword ptr [rcx + rcx*4 - 1]; mov edx, 4; mov esi, 1; call rbx; 
0x000000000008ab05: xor eax, dword ptr [0x30]; add rsp, 8; jmp rax; 
0x0000000000021f60: xor eax, dword ptr [0x30]; call rax; 
0x00000000000bdfd0: xor eax, dword ptr [0x30]; call rax; add rsp, 0x38; ret; 
0x0000000000036b50: xor eax, dword ptr [0x30]; jmp rax; 
0x00000000001120a9: xor eax, dword ptr [0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000004632d: xor eax, dword ptr [0x30]; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006f7e2: xor eax, dword ptr [0x30]; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c082: xor eax, dword ptr [0x30]; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c482: xor eax, dword ptr [0x30]; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab6a: xor eax, dword ptr [0x30]; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb3e: xor eax, dword ptr [0x30]; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007add2: xor eax, dword ptr [0x30]; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x0000000000065aa3: xor eax, dword ptr [0x30]; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x00000000000641ab: xor eax, dword ptr [0x30]; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed2f: xor eax, dword ptr [0x30]; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fc5: xor eax, dword ptr [0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efbb: xor eax, dword ptr [0x30]; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e87: xor eax, dword ptr [0x30]; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x0000000000143224: xor eax, dword ptr [rax + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000012f531: xor eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000082654: xor eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000fb1e1: xor eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000085d96: xor eax, dword ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, ebx; pop rbx; ret; 
0x0000000000085ace: xor eax, dword ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; pop r12; ret; 
0x0000000000085c81: xor eax, dword ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000008b9dc: xor eax, dword ptr [rax]; add rsp, 0x100; ret; 
0x0000000000085d34: xor eax, dword ptr [rax]; add rsp, 0x18; ret; 
0x000000000008aac8: xor eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000008aaa0: xor eax, dword ptr [rax]; lea rdi, qword ptr [rip + 0x336247]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000008ac9d: xor eax, dword ptr [rax]; lea rsi, qword ptr [rip - 0x236]; lea rdi, qword ptr [rip + 0x335fb3]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000841d5: xor eax, dword ptr [rax]; mov dword ptr fs:[rax], 0xc; xor eax, eax; add rsp, 0x18; ret; 
0x000000000008115d: xor eax, dword ptr [rax]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret; 
0x000000000008131d: xor eax, dword ptr [rax]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x000000000008aced: xor eax, dword ptr [rax]; mov edi, dword ptr [rip + 0x335ffb]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000082643: xor eax, dword ptr [rax]; mov qword ptr [rax], rdi; ret; 
0x0000000000082639: xor eax, dword ptr [rax]; mov qword ptr [rax], rsi; mov rax, qword ptr [rip + 0x33b88b]; mov qword ptr [rax], rdi; ret; 
0x000000000008aac1: xor eax, dword ptr [rax]; mov qword ptr [rip + 0x3361a6], rax; add rsp, 8; ret; 
0x000000000008aa7f: xor eax, dword ptr [rax]; mov qword ptr [rip + 0x3361e8], rax; ret; 
0x0000000000080806: xor eax, dword ptr [rax]; mov qword ptr [rsp + 0x28], r14; mov rdi, r14; call qword ptr [rax]; 
0x00000000000867bd: xor eax, dword ptr [rax]; mov qword ptr [rsp + 8], rax; call qword ptr [rdx]; 
0x0000000000080956: xor eax, dword ptr [rax]; mov rdi, rcx; mov qword ptr [rsp + 0x10], rcx; call qword ptr [rax]; 
0x000000000008ac74: xor eax, dword ptr [rax]; mov rsi, rbp; mov edi, dword ptr [rip + 0x336071]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000007f880: xor eax, dword ptr [rax]; movsxd rdi, ecx; mov eax, 3; syscall; 
0x000000000008aa86: xor eax, dword ptr [rax]; ret; 
0x000000000008aaa7: xor eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000080a6c: xor eax, dword ptr [rax]; xor edi, edi; call qword ptr [rax]; 
0x000000000007deee: xor eax, dword ptr [rax]; xor edi, edi; mov qword ptr [rsp + 8], rcx; call qword ptr [rax]; 
0x000000000007de9d: xor eax, dword ptr [rax]; xor edi, edi; mov r14, rdx; call qword ptr [rax]; 
0x0000000000103f3a: xor eax, dword ptr [rcx + rcx*4 - 0x40]; sub eax, r9d; ret; 
0x00000000000adf45: xor eax, dword ptr [rcx - 0x77]; ret 0x2941; 
0x00000000000fbb13: xor eax, dword ptr [rcx]; add byte ptr [rax], al; syscall; 
0x0000000000189b95: xor eax, dword ptr [rcx]; add byte ptr [rcx + rdx*8 + 0x3394ffef], ah; add dword ptr [rax], eax; ret; 
0x00000000000b0669: xor eax, dword ptr [rdi]; xor dword ptr [rax], eax; add rsp, 0x28; ret; 
0x00000000001b1515: xor eax, dword ptr [rdx]; add al, bl; div dh; call qword ptr [rsi]; 
0x000000000018c435: xor eax, dword ptr [rdx]; add byte ptr [rsp + rdx + 0x33bcfff8], al; add al, byte ptr [rax]; xchg eax, esp; adc al, 0xf8; call rsp; 
0x000000000003ce43: xor eax, eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000007c60b: xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000037430: xor eax, eax; add rsp, 0x140; pop rbx; ret; 
0x0000000000125de0: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000000841de: xor eax, eax; add rsp, 0x18; ret; 
0x00000000000f1bc8: xor eax, eax; add rsp, 0x190; pop rbx; pop rbp; pop r12; ret; 
0x0000000000075ace: xor eax, eax; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000000b43e2: xor eax, eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000113742: xor eax, eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000012979a: xor eax, eax; add rsp, 0x30; pop rbx; ret; 
0x00000000001298f7: xor eax, eax; add rsp, 0x48; pop rbx; pop rbp; ret; 
0x00000000001365b0: xor eax, eax; add rsp, 0x48; ret; 
0x0000000000135dbc: xor eax, eax; add rsp, 0x58; ret; 
0x000000000002c267: xor eax, eax; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000037090: xor eax, eax; add rsp, 0x98; pop rbx; pop rbp; ret; 
0x000000000003c23c: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000083480: xor eax, eax; add rsp, 8; ret; 
0x000000000002ff50: xor eax, eax; and edi, 0xffffff80; sete al; ret; 
0x00000000000bf6fe: xor eax, eax; call 0x542b0; add rsp, 0x20; sar eax, 0x1f; pop rbx; ret; 
0x00000000001110e2: xor eax, eax; call 0x54480; add rsp, 0x10; mov rax, rbx; pop rbx; ret; 
0x00000000000f72c0: xor eax, eax; call 0x6cef0; add rsp, 0x408; ret; 
0x00000000000e3c94: xor eax, eax; call 0xe32d0; add rsp, 0x18; ret; 
0x00000000000ebd7e: xor eax, eax; call 0xebb40; add rsp, 0x20; pop rbx; ret; 
0x0000000000132cd9: xor eax, eax; call 0xebb40; add rsp, 8; sar eax, 0x1f; ret; 
0x00000000001202a8: xor eax, eax; call qword ptr [rbp + 0x28]; 
0x0000000000120206: xor eax, eax; call qword ptr [rbx + 0x18]; 
0x0000000000120206: xor eax, eax; call qword ptr [rbx + 0x18]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000012da03: xor eax, eax; call rcx; 
0x000000000012e760: xor eax, eax; call rdx; 
0x00000000000fd923: xor eax, eax; cmp edi, 9; setbe al; ret; 
0x00000000000c60b3: xor eax, eax; cmp edx, 1; sete al; ret; 
0x0000000000101f97: xor eax, eax; cmp qword ptr [rbx + 0x28], 0; cmovns rax, qword ptr [rbx + 0x28]; pop rbx; ret; 
0x00000000000c091d: xor eax, eax; cmp rdx, -1; cmovne rax, rdx; ret; 
0x00000000000fbbf4: xor eax, eax; cmp rdx, rcx; cmovae rax, rsi; ret; 
0x0000000000107a77: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000121500: xor eax, eax; jmp rcx; 
0x0000000000111060: xor eax, eax; mov byte ptr [rdx], 0; pop r12; ret; 
0x00000000000e4160: xor eax, eax; mov dword ptr [rbp + 4], edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000001176e3: xor eax, eax; mov dword ptr [rdi + 0xc], edx; mov qword ptr [rsi], rdi; ret; 
0x000000000012ced7: xor eax, eax; mov dword ptr [rsp], 2; mov rdi, rsp; call rdx; 
0x000000000012e3f6: xor eax, eax; mov edx, 0xffffffff; mov rsi, rbx; mov rdi, rbp; call rcx; 
0x00000000000b14fe: xor eax, eax; mov qword ptr [rbx + 8], rcx; add rsp, 0xd0; pop rbx; ret; 
0x000000000003cd17: xor eax, eax; mov qword ptr [rdi + 8], rdx; ret; 
0x000000000003cd27: xor eax, eax; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 8], rdx; ret; 
0x0000000000096bd8: xor eax, eax; mov qword ptr [rdx], rcx; ret; 
0x0000000000085d2d: xor eax, eax; mov qword ptr [rip + 0x33ae5a], rdx; add rsp, 0x18; ret; 
0x000000000010abc1: xor eax, eax; mov rbp, rsp; pop rbp; ret; 
0x0000000000128219: xor eax, eax; mov rsi, qword ptr [rbp - 0x188]; mov rdi, r13; mov rcx, qword ptr [rbp - 0x168]; call rcx; 
0x0000000000123d83: xor eax, eax; mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x20]; call rcx; 
0x0000000000123f7a: xor eax, eax; mov rsi, qword ptr [rsp + 0x40]; mov rdi, rbp; mov rcx, qword ptr [rsp + 0x18]; call rcx; 
0x00000000001245d7: xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx; 
0x00000000001245f7: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x10], 2; add rdi, 0x10; jmp rcx; 
0x0000000000127ec7: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x58], 2; add rdi, 0x58; jmp rcx; 
0x0000000000127617: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0x68], 2; add rdi, 0x68; jmp rcx; 
0x0000000000123a37: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi + 0xc8], 2; add rdi, 0xc8; jmp rcx; 
0x000000000011b151: xor eax, eax; mov word ptr [rbp + 0x216], ax; pop rbx; pop rbp; pop r12; ret; 
0x000000000011b048: xor eax, eax; mov word ptr [rbx + 0x216], ax; pop rbx; pop rbp; pop r12; ret; 
0x000000000003d3ad: xor eax, eax; mov word ptr [rdi + 2], dx; ret; 
0x00000000000c0aeb: xor eax, eax; movsxd r10, ecx; mov esi, esi; mov edi, edi; mov eax, 0xf7; syscall; 
0x00000000000fb3ee: xor eax, eax; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2c; syscall; 
0x00000000000fb27e: xor eax, eax; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2d; syscall; 
0x0000000000118748: xor eax, eax; movsxd rdi, r14d; mov eax, 3; syscall; 
0x00000000000d2628: xor eax, eax; nop word ptr [rax + rax]; pop rbx; pop rbp; pop r12; ret; 
0x000000000003763d: xor eax, eax; nop; ret; 
0x000000000007a352: xor eax, eax; pop r12; ret; 
0x00000000000aecf4: xor eax, eax; pop r14; ret; 
0x00000000000d4ea6: xor eax, eax; pop r15; ret; 
0x000000000011f3d3: xor eax, eax; pop rbp; jmp rcx; 
0x0000000000120b80: xor eax, eax; pop rbp; jmp rdx; 
0x000000000010ac31: xor eax, eax; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x000000000002474d: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000003c3fd: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000073484: xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000000357b6: xor eax, eax; pop rbx; ret; 
0x00000000000bcdee: xor eax, eax; pop rdx; ret; 
0x00000000000375d6: xor eax, eax; ret; 
0x0000000000097eae: xor eax, eax; sub eax, ecx; ret; 
0x0000000000109ee8: xor eax, eax; syscall; 
0x0000000000072ee0: xor eax, eax; test byte ptr [rdi], 4; sete al; ret; 
0x0000000000072ef0: xor eax, eax; test byte ptr [rdi], 8; sete al; ret; 
0x000000000009748c: xor eax, eax; test dl, dl; cmovne rax, rdi; ret; 
0x0000000000037978: xor eax, eax; test edx, edx; sete al; ret; 
0x000000000003d00d: xor eax, edx; ret; 
0x000000000003c877: xor eax, edx; sub eax, edx; ret; 
0x000000000003c88b: xor eax, edx; sub rax, rdx; ret; 
0x00000000001ad76f: xor ebp, 0xffffffff; sbb al, 0xd; ret 0xf582; 
0x000000000013ca49: xor ebp, dword ptr [rax + 0xc8b0002]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000000faa87: xor ebp, dword ptr [rax + rax]; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000000f4ba9: xor ebp, dword ptr [rcx - 0x7ab7000e]; ror byte ptr [rax - 0x77], 3; setne al; movzx eax, al; pop rbx; ret; 
0x00000000000bcbb9: xor ebp, dword ptr [rcx]; idiv bh; nop dword ptr [rax]; pop rbx; ret; 
0x0000000000134ea1: xor ebp, ebp; call qword ptr [rax + 0x28]; 
0x00000000001896a1: xor ebp, edi; call rsp; 
0x000000000019b9a9: xor ebp, esi; call qword ptr [rsi]; 
0x00000000001a7db9: xor ebp, esi; jmp qword ptr [rcx]; 
0x000000000019ae35: xor ebp, esi; jmp qword ptr [rdx]; 
0x00000000000e520a: xor ebx, dword ptr [rbx + 0x5d]; mov eax, 5; pop r12; ret; 
0x000000000006e569: xor ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000000fafc7: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x130; syscall; 
0x00000000000f4917: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x1a; syscall; 
0x00000000000c0d87: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x22; syscall; 
0x00000000000c0de7: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x23; syscall; 
0x00000000000fb0d7: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x2b; syscall; 
0x00000000000fb4a7: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x2e; syscall; 
0x00000000000f1de7: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x4a; syscall; 
0x00000000000f1e77: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x4b; syscall; 
0x00000000000ebf67: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 0x55; syscall; 
0x00000000000eb717: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 1; syscall; 
0x00000000000eb4c7: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 2; syscall; 
0x00000000000ebe17: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 3; syscall; 
0x00000000000ecfc7: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 7; syscall; 
0x00000000000fa3b7: xor ebx, eax; sub rsp, 8; call 0x1080a0; mov qword ptr [rsp], rax; mov eax, 8; syscall; 
0x000000000005d478: xor ebx, ebx; add rsp, 0x1008; mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000000c253e: xor ebx, esi; ret; 
0x00000000001007db: xor ecx, 0x8948002b; ret 0xbae9; 
0x000000000017818d: xor ecx, 0xf18390ff; jmp rax; 
0x00000000000c4f5f: xor ecx, 0xffffffff; dec dword ptr [rax - 0x77]; ret 0x8d49; 
0x0000000000038fc1: xor ecx, dword ptr [rax + 0x39]; ret; 
0x00000000000aedd2: xor ecx, dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x20; pop rbx; ret; 
0x00000000000bcc04: xor ecx, dword ptr [rax - 0x77]; jnp 0xbcc11; mov qword ptr [rbx + 0x18], rdx; add rsp, 0xd0; pop rbx; ret; 
0x00000000000ba09c: xor ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000000c6450: xor ecx, dword ptr [rbx]; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000103bcb: xor ecx, dword ptr [rcx - 0x7d]; ret; 
0x000000000019b4f4: xor ecx, dword ptr [rdi - 0x12]; jmp qword ptr [rdx]; 
0x0000000000107e23: xor ecx, eax; sub eax, dword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000000cb191: xor ecx, ecx; call 0xc9d70; add rsp, 0x18; ret; 
0x00000000000cb131: xor ecx, ecx; call 0xcb0b0; add rsp, 0x18; ret; 
0x00000000000cb165: xor ecx, ecx; mov dword ptr [rsp], 0; call 0xcb0b0; add rsp, 0x18; ret; 
0x000000000007d06e: xor ecx, ecx; movsxd rdx, eax; call 0x7cfa0; or dword ptr [rbx], 8; pop rbx; ret; 
0x000000000002850f: xor ecx, ecx; xor edx, edx; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov dword ptr [rsp + 8], eax; call rbx; 
0x0000000000027808: xor ecx, ecx; xor edx, edx; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x00000000000fb3eb: xor ecx, ecx; xor r8d, r8d; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2c; syscall; 
0x00000000000fb27b: xor ecx, ecx; xor r8d, r8d; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2d; syscall; 
0x0000000000126d34: xor ecx, esi; jmp qword ptr [rsi + 0xf]; 
0x000000000011ce8e: xor edi, dword ptr [0x30]; call rax; 
0x000000000008113a: xor edi, eax; mov byte ptr [rsi + rbx], dil; mov rax, rsi; pop rbx; ret; 
0x000000000018629d: xor edi, ebx; jmp qword ptr [rax + 0x35]; 
0x00000000000f3c08: xor edi, ecx; inc dword ptr [rbp - 0x7cee8b40]; ret; 
0x0000000000107e7e: xor edi, edi; call 0x3c1e0; mov rax, qword ptr [rip + 0x2bc114]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000ec756: xor edi, edi; call 0xec010; add rsp, 0x120; pop rbx; ret; 
0x0000000000080a6e: xor edi, edi; call qword ptr [rax]; 
0x000000000010aa8d: xor edi, edi; lea rsi, qword ptr [rsp - 0x18]; mov eax, 0x83; syscall; 
0x000000000010888e: xor edi, edi; mov eax, 0xe3; syscall; 
0x000000000007def0: xor edi, edi; mov qword ptr [rsp + 8], rcx; call qword ptr [rax]; 
0x0000000000047102: xor edi, edi; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000007de9f: xor edi, edi; mov r14, rdx; call qword ptr [rax]; 
0x00000000000b9f5e: xor edi, edi; mov rax, qword ptr [rax]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f72be: xor edi, edi; xor eax, eax; call 0x6cef0; add rsp, 0x408; ret; 
0x000000000019a894: xor edi, esi; in eax, dx; jmp qword ptr [rdx]; 
0x00000000001869a1: xor edi, esp; call rax; 
0x0000000000186a01: xor edi, esp; jmp qword ptr [rax + 0x35]; 
0x0000000000186ac5: xor edi, esp; jmp rax; 
0x0000000000031e1a: xor edx, dword ptr [0x30]; call rdx; 
0x000000000010a449: xor edx, dword ptr [rax - 0xf]; dec dword ptr [rax - 0x77]; ret 0x8949; 
0x000000000006465d: xor edx, dword ptr [rcx]; add byte ptr [rax + 0x63], cl; add al, 0x81; add rcx, rax; jmp rcx; 
0x0000000000108451: xor edx, edx; add rdi, 0x28; mov eax, r9d; syscall; 
0x000000000010813f: xor edx, edx; add rdi, 0x308; mov esi, 0x80; syscall; 
0x00000000000b4a21: xor edx, edx; add rsp, 8; mov rax, rdx; ret; 
0x000000000012e8aa: xor edx, edx; call 0x718d0; not eax; add rsp, 8; shr eax, 0x1f; ret; 
0x00000000000cb7e3: xor edx, edx; cmp dword ptr [rdi + 4], eax; mov eax, 0xffffffff; setne dl; cmovbe eax, edx; ret; 
0x0000000000084f89: xor edx, edx; cmp rax, -1; cmovne rdx, rax; add rsp, 8; mov rax, rdx; ret; 
0x000000000004f20b: xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x00000000000738b9: xor edx, edx; div rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000000886c0: xor edx, edx; mov eax, edx; ret; 
0x0000000000047138: xor edx, edx; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000000f60e5: xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx; 
0x000000000007ba99: xor edx, edx; mov rax, qword ptr [rax + 0x48]; jmp rax; 
0x00000000000c0972: xor edx, edx; mov rdi, -1; mov eax, 0x3d; syscall; 
0x0000000000028511: xor edx, edx; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000002780a: xor edx, edx; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x00000000000c09b5: xor edx, edx; mov rsi, qword ptr [rsp + 8]; or rdi, 0xffffffffffffffff; mov eax, ecx; syscall; 
0x000000000011dfdc: xor edx, edx; mov rsi, r12; mov rdi, rbp; mov rcx, r13; call rbx; 
0x000000000006f759: xor edx, edx; mov rsi, r9; mov eax, r8d; syscall; 
0x0000000000070322: xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x0000000000037d94: xor edx, edx; mov rsi, rbx; mov eax, 0x80; syscall; 
0x00000000000c09fd: xor edx, edx; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x3d; syscall; 
0x00000000000ed0ef: xor edx, edx; neg ecx; cmp eax, 0xfffff000; cmova edx, ecx; mov eax, edx; ret; 
0x000000000008aa63: xor edx, edx; or cl, cl; cmove rax, rdx; ret; 
0x0000000000070270: xor edx, edx; pop r12; jmp rax; 
0x000000000007387c: xor edx, edx; pop rbx; div rbp; pop rbp; pop r12; ret; 
0x000000000003800f: xor edx, edx; rep stosq qword ptr [rdi], rax; mov edi, r8d; call 0x36eb0; add rsp, 0xa8; ret; 
0x000000000006f7da: xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c07a: xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c47a: xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab62: xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb36: xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007adca: xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x00000000000f2252: xor edx, edx; test eax, eax; cmove rdx, rbx; mov rax, rdx; pop rbx; ret; 
0x00000000000c0970: xor edx, edx; xor edx, edx; mov rdi, -1; mov eax, 0x3d; syscall; 
0x00000000000c09b3: xor edx, edx; xor edx, edx; mov rsi, qword ptr [rsp + 8]; or rdi, 0xffffffffffffffff; mov eax, ecx; syscall; 
0x000000000006f757: xor edx, edx; xor edx, edx; mov rsi, r9; mov eax, r8d; syscall; 
0x0000000000037106: xor edx, edx; xor esi, esi; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000003706d: xor edx, edx; xor esi, esi; mov rdi, r9; mov eax, r8d; syscall; 
0x000000000007c159: xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x00000000000ed358: xor edx, edx; xor esi, esi; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x0000000000174d3d: xor esi, dword ptr [rcx]; xchg eax, edi; call qword ptr [rbx + 0x7c]; 
0x0000000000189e81: xor esi, eax; call rsp; 
0x00000000001a7f81: xor esi, ebp; jmp qword ptr [rax]; 
0x00000000001a7f39: xor esi, ebp; jmp qword ptr [rcx]; 
0x0000000000126bcb: xor esi, ecx; jmp qword ptr [rsi - 0x70]; 
0x00000000000f1033: xor esi, ecx; sub al, 0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x00000000001b59f5: xor esi, edi; jmp qword ptr [rdx]; 
0x000000000018bbb1: xor esi, edi; jmp rsp; 
0x00000000000828d1: xor esi, edx; mov byte ptr [rax + rbx], sil; pop rbx; ret; 
0x0000000000039ea9: xor esi, esi; call 0x3d3e0; add rsp, 8; ret; 
0x0000000000097b94: xor esi, esi; call 0x8c4b0; mov rax, rbx; pop rbx; ret; 
0x0000000000054d94: xor esi, esi; lea rdi, qword ptr [rbp - 0x170]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000064e2a: xor esi, esi; lea rdi, qword ptr [rbp - 0xf0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000012c166: xor esi, esi; mov dword ptr [rbx + 0x10], 1; mov rdi, r13; call qword ptr [rax + 0x28]; 
0x00000000001087e2: xor esi, esi; mov eax, ecx; movsxd rdi, r8d; syscall; 
0x0000000000079e08: xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, r12; call qword ptr [rax + 0x48]; 
0x0000000000079d57: xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, rbx; call qword ptr [rax + 0x48]; 
0x00000000000461e1: xor esi, esi; mov edi, 0x100011; mov eax, 0x38; syscall; 
0x00000000000c0ed6: xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall; 
0x0000000000049197: xor esi, esi; mov edi, dword ptr [rsp + 0x60]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000e8a39: xor esi, esi; mov edi, dword ptr [rsp + 0xe0]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f75be: xor esi, esi; mov edi, dword ptr [rsp]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000f5be2: xor esi, esi; mov rdi, r12; call rbx; 
0x00000000000f5c07: xor esi, esi; mov rdi, r13; call rbx; 
0x00000000000f5c2b: xor esi, esi; mov rdi, r14; call rbx; 
0x00000000000f5c4b: xor esi, esi; mov rdi, r15; call rbx; 
0x0000000000037108: xor esi, esi; mov rdi, r8; mov eax, ebp; syscall; 
0x000000000003706f: xor esi, esi; mov rdi, r9; mov eax, r8d; syscall; 
0x00000000000f5bbd: xor esi, esi; mov rdi, rbp; call rbx; 
0x000000000011f552: xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 0; call qword ptr [rax + 0x28]; 
0x000000000011f4c2: xor esi, esi; mov rdi, rbp; mov dword ptr [rbx + 0x18], 1; call qword ptr [rax + 0x28]; 
0x0000000000126756: xor esi, esi; mov rdi, rbp; mov dword ptr [rsp + 0x40], 0; mov qword ptr [rsp + 0x10], rax; mov rax, qword ptr [rsp + 0x48]; call qword ptr [rax + 0x28]; 
0x0000000000097a8f: xor esi, esi; mov rdi, rbx; call 0x8c4b0; lea rax, qword ptr [rbx - 1]; pop rbx; ret; 
0x00000000000a3896: xor esi, esi; mov rdi, rbx; call 0x8c4b0; lea rax, qword ptr [rbx - 4]; pop rbx; ret; 
0x000000000006d977: xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x10]; 
0x000000000007c15b: xor esi, esi; mov rdi, rbx; call qword ptr [rax + 0x58]; 
0x0000000000102181: xor esi, esi; mov rdx, qword ptr [rsp + 0x18]; mov edi, 0x2000004; call rax; 
0x00000000000ed35a: xor esi, esi; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x0000000000046354: xor esi, esi; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000003c529: xor esi, esi; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x00000000000ed295: xor esi, esi; syscall; 
0x00000000000ec754: xor esi, esi; xor edi, edi; call 0xec010; add rsp, 0x120; pop rbx; ret; 
0x0000000000047100: xor esi, esi; xor edi, edi; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000001b5cd4: xor esi, r15d; jmp qword ptr [rdx]; 
0x00000000000f1233: xor esp, ecx; sub al, 0; neg eax; mov dword ptr fs:[rdx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000186a1d: xor esp, edi; call qword ptr [rax + 0x33]; 
0x000000000018699d: xor esp, edi; call rax; 
0x0000000000186a3d: xor esp, edi; jmp qword ptr [rax]; 
0x0000000000186a5d: xor esp, edi; jmp rax; 
0x00000000001434c3: xor qword ptr [r8 + rax], rax; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, qword ptr [r11 + rdx]; jmp rdx; 
0x000000000010813e: xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x0000000000108450: xor r10d, r10d; add rdi, 0x28; mov eax, r9d; syscall; 
0x00000000000c09fc: xor r10d, r10d; movsxd rdx, edx; movsxd rdi, edi; mov eax, 0x3d; syscall; 
0x00000000000c096f: xor r10d, r10d; xor edx, edx; mov rdi, -1; mov eax, 0x3d; syscall; 
0x00000000000c09b2: xor r10d, r10d; xor edx, edx; mov rsi, qword ptr [rsp + 8]; or rdi, 0xffffffffffffffff; mov eax, ecx; syscall; 
0x000000000006f756: xor r10d, r10d; xor edx, edx; mov rsi, r9; mov eax, r8d; syscall; 
0x00000000000ed357: xor r10d, r10d; xor esi, esi; movsxd rdi, edi; mov eax, 0x118; syscall; 
0x000000000010b89e: xor r14b, bpl; inc dword ptr [rbp - 0x7b]; in al, 0x89; ret 0x87e; 
0x0000000000189b94: xor r8, qword ptr [rcx]; add byte ptr [rcx + rdx*8 + 0x3394ffef], ah; add dword ptr [rax], eax; ret; 
0x00000000000e3c93: xor r8d, r8d; call 0xe32d0; add rsp, 0x18; ret; 
0x00000000000c0aea: xor r8d, r8d; movsxd r10, ecx; mov esi, esi; mov edi, edi; mov eax, 0xf7; syscall; 
0x00000000000fb3ed: xor r8d, r8d; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2c; syscall; 
0x00000000000fb27d: xor r8d, r8d; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2d; syscall; 
0x0000000000118747: xor r8d, r8d; movsxd rdi, r14d; mov eax, 3; syscall; 
0x00000000001034f0: xor r9b, bpl; ret; 
0x00000000000d0bb6: xor r9b, byte ptr [rax]; xor eax, eax; ret; 
0x00000000000cb190: xor r9d, r9d; call 0xc9d70; add rsp, 0x18; ret; 
0x00000000000cb164: xor r9d, r9d; mov dword ptr [rsp], 0; call 0xcb0b0; add rsp, 0x18; ret; 
0x00000000000fb3ea: xor r9d, r9d; xor r8d, r8d; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2c; syscall; 
0x00000000000fb27a: xor r9d, r9d; xor r8d, r8d; movsxd r10, ecx; movsxd rdi, edi; mov eax, 0x2d; syscall; 
0x00000000000f0491: xor rax, 0x20; mov qword ptr [rbx + 0x48], rax; pop rbx; ret; 
0x000000000006f7d4: xor rax, 0xffffffffe7894800; xor edx, edx; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000008ab04: xor rax, qword ptr [0x30]; add rsp, 8; jmp rax; 
0x0000000000021f5f: xor rax, qword ptr [0x30]; call rax; 
0x00000000000bdfcf: xor rax, qword ptr [0x30]; call rax; add rsp, 0x38; ret; 
0x0000000000036b4f: xor rax, qword ptr [0x30]; jmp rax; 
0x00000000001120a8: xor rax, qword ptr [0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000004632c: xor rax, qword ptr [0x30]; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006f7e1: xor rax, qword ptr [0x30]; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c081: xor rax, qword ptr [0x30]; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c481: xor rax, qword ptr [0x30]; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab69: xor rax, qword ptr [0x30]; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb3d: xor rax, qword ptr [0x30]; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007add1: xor rax, qword ptr [0x30]; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x0000000000065aa2: xor rax, qword ptr [0x30]; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x00000000000641aa: xor rax, qword ptr [0x30]; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed2e: xor rax, qword ptr [0x30]; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fc4: xor rax, qword ptr [0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efba: xor rax, qword ptr [0x30]; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e86: xor rax, qword ptr [0x30]; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x000000000008ab03: xor rax, qword ptr fs:[0x30]; add rsp, 8; jmp rax; 
0x0000000000021f5e: xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000000bdfce: xor rax, qword ptr fs:[0x30]; call rax; add rsp, 0x38; ret; 
0x0000000000036b4e: xor rax, qword ptr fs:[0x30]; jmp rax; 
0x00000000001120a7: xor rax, qword ptr fs:[0x30]; lea rdi, qword ptr [rip + 0x2b0ec9]; call rax; 
0x000000000004632b: xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x195]; call rax; 
0x000000000006f7e0: xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip + 0x30]; call rax; 
0x000000000007c080: xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1780]; call rax; 
0x000000000007c480: xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x1b80]; call rax; 
0x000000000007ab68: xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x268]; call rax; 
0x000000000006fb3c: xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x32c]; call rax; 
0x000000000007add0: xor rax, qword ptr fs:[0x30]; lea rsi, qword ptr [rip - 0x4d0]; call rax; 
0x0000000000065aa1: xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3584af]; call rax; 
0x00000000000641a9: xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x359da7]; call rax; 
0x000000000005ed2d: xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x35f223]; call rax; 
0x0000000000055fc3: xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x367f8d]; call rax; 
0x000000000004efb9: xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x36ef97]; call rax; 
0x0000000000049e85: xor rax, qword ptr fs:[0x30]; mov rsi, qword ptr [rip + 0x3740cb]; call rax; 
0x000000000002c266: xor rax, rax; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret; 
0x0000000000088b75: xor rax, rax; ret; 
0x000000000003c88a: xor rax, rdx; sub rax, rdx; ret; 
0x00000000001ad76e: xor rbp, 0xffffffffffffffff; sbb al, 0xd; ret 0xf582; 
0x000000000019b9a8: xor rbp, rsi; call qword ptr [rsi]; 
0x0000000000027807: xor rcx, rcx; xor edx, edx; mov rsi, qword ptr [rsp + 0x60]; mov rdi, qword ptr [rsp + 0x58]; mov dword ptr [rsp + 8], eax; call rbx; 
0x000000000011ce8d: xor rdi, qword ptr [0x30]; call rax; 
0x000000000011ce8c: xor rdi, qword ptr fs:[0x30]; call rax; 
0x0000000000031e19: xor rdx, qword ptr [0x30]; call rdx; 
0x0000000000031e18: xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000007026f: xor rdx, rdx; pop r12; jmp rax; 

42022 gadgets found
