


Gadgets
=======


0x0000000000400e49: adc al, byte ptr [rax]; call 0x7c0; nop; pop rbp; ret; 
0x0000000000400e6e: adc eax, dword ptr [rax]; call 0x7c0; nop; pop rbp; ret; 
0x000000000040128f: add bl, dh; ret; 
0x00000000004009a4: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rsi*8 + 0x55], 0x48; mov ebp, esp; call rax; 
0x000000000040128d: add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004009a2: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rsi*8 + 0x55], 0x48; mov ebp, esp; call rax; 
0x000000000040128b: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000040091c: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000401341: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rsp + rsi*8 - 1], ah; call rsp; 
0x0000000000401345: add byte ptr [rax], al; add byte ptr [rsp + rsi*8 - 1], ah; call rsp; 
0x000000000040078b: add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000400ec4: add byte ptr [rax], al; call 0x7b0; nop; leave; ret; 
0x0000000000400d26: add byte ptr [rax], al; call 0x870; mov qword ptr [rip + 0x2013a4], rax; nop; leave; ret; 
0x000000000040091e: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000401292: add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000401343: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rsp + rsi*8 - 1], ah; call rsp; 
0x000000000040133b: add byte ptr [rcx], al; sbb eax, dword ptr [rbx]; cmp ecx, dword ptr [rax + 0x10000000]; add byte ptr [rax], al; add byte ptr [rsp + rsi*8 - 1], ah; call rsp; 
0x0000000000401347: add byte ptr [rsp + rsi*8 - 1], ah; call rsp; 
0x0000000000400c21: add cl, byte ptr [rbx + 0x6348f045]; ror byte ptr [rax - 0x75], 1; fmul dword ptr [r8 + 1]; ret 0xb60f; 
0x0000000000400e18: add cl, cl; ret; 
0x0000000000400d2f: add eax, 0x2013a4; nop; leave; ret; 
0x0000000000400984: add eax, 0x20173e; add ebx, esi; ret; 
0x0000000000400ca1: add eax, 0x90ffffff; pop rbp; ret; 
0x00000000004010b3: add eax, 0xfff727e8; dec ecx; ret; 
0x0000000000401013: add eax, 0xfff7c7e8; dec ecx; ret; 
0x0000000000400ddb: add eax, 0xfff9ffe8; dec ecx; ret; 
0x0000000000400b68: add eax, 0xfffc72e8; dec ecx; ret; 
0x0000000000400989: add ebx, esi; ret; 
0x0000000000401058: add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000040078e: add esp, 8; ret; 
0x0000000000401057: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000040078d: add rsp, 8; ret; 
0x0000000000400912: and byte ptr [rax], ah; jmp rax; 
0x0000000000400987: and byte ptr [rax], al; add ebx, esi; ret; 
0x0000000000400d32: and byte ptr [rax], al; nop; leave; ret; 
0x0000000000400e0e: and eax, 0x48ffffff; mov eax, dword ptr [rbp - 8]; movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000400789: and eax, dword ptr [rcx]; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000400ec6: call 0x7b0; nop; leave; ret; 
0x0000000000400e42: call 0x7c0; mov edi, 0x4012e5; call 0x7c0; nop; pop rbp; ret; 
0x0000000000400e67: call 0x7c0; mov edi, 0x401314; call 0x7c0; nop; pop rbp; ret; 
0x0000000000400e4c: call 0x7c0; nop; pop rbp; ret; 
0x0000000000400b69: call 0x7e0; leave; ret; 
0x0000000000400d28: call 0x870; mov qword ptr [rip + 0x2013a4], rax; nop; leave; ret; 
0x0000000000401051: call 0x890; nop; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000400788: call 0x8b0; add rsp, 8; ret; 
0x0000000000400e0d: call 0xd37; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000401055: call qword ptr [rax + 0x18c48348]; pop rbx; pop rbp; ret; 
0x000000000040141b: call qword ptr [rax]; 
0x00000000004009b5: call qword ptr [rbp + 0x48]; 
0x0000000000401523: call qword ptr [rbp]; 
0x0000000000400cbd: call qword ptr [rbx]; 
0x00000000004009ae: call rax; 
0x000000000040134b: call rsp; 
0x0000000000400e15: clc; movzx eax, byte ptr [rax]; leave; ret; 
0x000000000040133f: cmp ecx, dword ptr [rax + 0x10000000]; add byte ptr [rax], al; add byte ptr [rsp + rsi*8 - 1], ah; call rsp; 
0x0000000000400b0a: dec dword ptr [rax + 1]; ret 0x858b; 
0x0000000000400b35: dec dword ptr [rax + 1]; ret 0xb60f; 
0x0000000000400e11: dec dword ptr [rax - 0x75]; clc; movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000400d2c: dec dword ptr [rax - 0x77]; add eax, 0x2013a4; nop; leave; ret; 
0x0000000000400fe5: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000400b6d: dec ecx; ret; 
0x0000000000400c0b: fmul dword ptr [r8 + 1]; ret 0x458b; 
0x0000000000400c2a: fmul dword ptr [r8 + 1]; ret 0xb60f; 
0x0000000000400c0c: fmul dword ptr [rax + 1]; ret 0x458b; 
0x0000000000400c2b: fmul dword ptr [rax + 1]; ret 0xb60f; 
0x000000000040126c: fmul qword ptr [rax - 0x7d]; ret; 
0x0000000000400fe3: idiv edi; dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x0000000000401016: idiv edi; dec ecx; ret; 
0x0000000000400ebe: in al, 0x7c; sar byte ptr [rdi + 0xa], 1; call 0x7b0; nop; leave; ret; 
0x0000000000400ab0: inc dword ptr [rcx]; ret 0x858b; 
0x00000000004009a9: int1; push rbp; mov rbp, rsp; call rax; 
0x00000000004015c3: jmp qword ptr [rbp]; 
0x0000000000400915: jmp rax; 
0x0000000000400981: lcall ptr [rbp - 0x3a]; add eax, 0x20173e; add ebx, esi; ret; 
0x0000000000400b6e: leave; ret; 
0x0000000000400e17: mov dh, 0; leave; ret; 
0x0000000000400d2e: mov dword ptr [rip + 0x2013a4], eax; nop; leave; ret; 
0x0000000000400e13: mov eax, dword ptr [rbp - 8]; movzx eax, byte ptr [rax]; leave; ret; 
0x00000000004009ac: mov ebp, esp; call rax; 
0x0000000000400e47: mov edi, 0x4012e5; call 0x7c0; nop; pop rbp; ret; 
0x0000000000400e6c: mov edi, 0x401314; call 0x7c0; nop; pop rbp; ret; 
0x0000000000400910: mov edi, 0x6020a8; jmp rax; 
0x0000000000400ec1: mov edi, 0xa; call 0x7b0; nop; leave; ret; 
0x0000000000400e0b: mov edi, eax; call 0xd37; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000400d2d: mov qword ptr [rip + 0x2013a4], rax; nop; leave; ret; 
0x0000000000400e12: mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax]; leave; ret; 
0x00000000004009ab: mov rbp, rsp; call rax; 
0x0000000000400e0a: mov rdi, rax; call 0xd37; mov rax, qword ptr [rbp - 8]; movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000400e16: movzx eax, byte ptr [rax]; leave; ret; 
0x0000000000400918: nop dword ptr [rax + rax]; pop rbp; ret; 
0x0000000000400965: nop dword ptr [rax]; pop rbp; ret; 
0x0000000000400917: nop word ptr [rax + rax]; pop rbp; ret; 
0x0000000000401056: nop; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000400d34: nop; leave; ret; 
0x0000000000400ca5: nop; pop rbp; ret; 
0x0000000000400ec2: or al, byte ptr [rax]; add byte ptr [rax], al; call 0x7b0; nop; leave; ret; 
0x000000000040127c: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000040127e: pop r13; pop r14; pop r15; ret; 
0x0000000000401280: pop r14; pop r15; ret; 
0x0000000000401282: pop r15; ret; 
0x000000000040090f: pop rbp; mov edi, 0x6020a8; jmp rax; 
0x000000000040127b: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000040127f: pop rbp; pop r14; pop r15; ret; 
0x0000000000400920: pop rbp; ret; 
0x000000000040105b: pop rbx; pop rbp; ret; 
0x0000000000401283: pop rdi; ret; 
0x0000000000401281: pop rsi; pop r15; ret; 
0x000000000040127d: pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000004009aa: push rbp; mov rbp, rsp; call rax; 
0x0000000000400c0f: ret 0x458b; 
0x0000000000400a60: ret 0x858b; 
0x0000000000400fe8: ret 0x8b48; 
0x0000000000400ad1: ret 0xb60f; 
0x0000000000400ac7: ret 0xd089; 
0x0000000000400f7b: ret 0xe283; 
0x0000000000400791: ret; 
0x0000000000400c08: ror byte ptr [rax - 0x75], 1; fmul dword ptr [r8 + 1]; ret 0x458b; 
0x0000000000400c27: ror byte ptr [rax - 0x75], 1; fmul dword ptr [r8 + 1]; ret 0xb60f; 
0x0000000000400aaa: ror byte ptr [rbx - 0x1137b], 1; inc dword ptr [rcx]; ret 0x858b; 
0x00000000004009a7: sal byte ptr [rcx + rsi*8 + 0x55], 0x48; mov ebp, esp; call rax; 
0x0000000000400ec0: sar byte ptr [rdi + 0xa], 1; call 0x7b0; nop; leave; ret; 
0x0000000000400f79: sbb al, 1; ret 0xe283; 
0x000000000040105a: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000400acf: sbb byte ptr [rcx], al; ret 0xb60f; 
0x000000000040133d: sbb eax, dword ptr [rbx]; cmp ecx, dword ptr [rax + 0x10000000]; add byte ptr [rax], al; add byte ptr [rsp + rsi*8 - 1], ah; call rsp; 
0x0000000000400ad4: shr byte ptr [rcx], cl; ret 0xd089; 
0x0000000000401295: sub esp, 8; add rsp, 8; ret; 
0x0000000000401294: sub rsp, 8; add rsp, 8; ret; 
0x000000000040091a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 

129 gadgets found
